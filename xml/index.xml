<Overview>
  <Assemblies>
    <Assembly Name="Accessibility" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.Default | System.Diagnostics.DebuggableAttribute+DebuggingModes.DisableOptimizations)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Accessibility.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Accessibility.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Accessibility.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("1EA4DBF0-3C3B-11CF-810C-00AA00389B71")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ImportedFromTypeLib("Accessibility")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibVersion(1, 1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="CustomMarshalers" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("CustomMarshalers.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("CustomMarshalers.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.0.30319.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("CustomMarshalers.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="ISymWrapper" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("ISymWrapper.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ISymWrapper.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.0.30319.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("ISymWrapper.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Activities.Build" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.Activities.Build.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.Activities.Build.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a", "8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Activities.Build.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Build.Conversion.v4.0" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.Build.Conversion.v4.0.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.Build.Conversion.v4.0.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Build.Conversion.v4.0.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Conversion.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Conversion.Whidbey.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("634AFA8F-4271-4e2c-9525-D0B75DAA821A")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Build" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.Build.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.Build.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Build.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Framework.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Engine.Whidbey.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.UnitTesting.Targets, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Engine.BackEndUnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Conversion.v4.0, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Conversion.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Tasks.Cop, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.ApexTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Build.Engine" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.Build.Engine.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.Build.Engine.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Build.Engine.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Engine.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Framework.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Engine.Whidbey.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Tasks.Cop, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.UnitTesting.Targets, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Build.Framework" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.Build.Framework.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.Build.Framework.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Build.Framework.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Framework.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Framework.Whidbey.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("D8A9BA71-4724-481d-9CA7-0DA23A1D615C")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/build/2009/properties", "Microsoft.Build.Framework.XamlTypes")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Build.Tasks.v4.0" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.Build.Tasks.v4.0.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.Build.Tasks.v4.0.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Build.Tasks.v4.0.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Tasks.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Tasks.Whidbey.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("E3D4D3B9-944C-407b-A82E-B19719EA7FB3")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Build.Utilities.v4.0" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.Build.Utilities.v4.0.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.Build.Utilities.v4.0.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Build.Utilities.v4.0.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Utilities.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("Microsoft.Build.Utilities.Whidbey.Unittest, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.CSharp" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.CSharp.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.CSharp.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.CSharp.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.JScript" Version="10.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.JScript.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.JScript.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("14.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("14.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® Visual Studio® 12 CTP")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.JScript.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("D3295D87-D604-11D4-A704-00C04FA137E4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibVersion(10, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.VisualBasic.Compatibility.Data" Version="10.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.VisualBasic.Compatibility.Data.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.VisualBasic.Compatibility.Data.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® Visual Studio® 12 CTP")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.VisualBasic.Compatibility.Data.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.VisualBasic.Compatibility" Version="10.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.VisualBasic.Compatibility.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.VisualBasic.Compatibility.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® Visual Studio® 12 CTP")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.VisualBasic.Compatibility.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.VisualBasic" Version="10.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("Microsoft.VisualBasic.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Microsoft.VisualBasic.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® Visual Studio® 12 CTP")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.VisualBasic.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.VisualC" Version="10.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.AssemblyTargetedPatchBand("1.0.23-210108996")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComCompatibleVersion(1, 0, 3300, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibVersion(8, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.VisualC.STLCLR" Version="2.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("STLCLR cross assembly library")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyKeyName("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("STLCLR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.VisualC.STLCLR")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.AssemblyTargetedPatchBand("1.0.23-210108528")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="mscorlib" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("mscorlib.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("mscorlib.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("mscorlib.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.DefaultDependency(System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System, PublicKey=00000000000000000400000000000000", AllInternalsVisible=false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Core, PublicKey=00000000000000000400000000000000", AllInternalsVisible=false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Numerics, PublicKey=00000000000000000400000000000000", AllInternalsVisible=false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Reflection.Context, PublicKey=00000000000000000400000000000000", AllInternalsVisible=false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Runtime.WindowsRuntime, PublicKey=00000000000000000400000000000000", AllInternalsVisible=false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Runtime.WindowsRuntime.UI.Xaml, PublicKey=00000000000000000400000000000000", AllInternalsVisible=false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("WindowsBase, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9", AllInternalsVisible=false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationCore, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9", AllInternalsVisible=false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9", AllInternalsVisible=false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.StringFreezing</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComCompatibleVersion(1, 0, 3300, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("BED7F4EA-1A96-11d2-8F08-00A0C9A6186D")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibVersion(2, 4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="PresentationBuildTasks" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("PresentationBuildTasks.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("PresentationBuildTasks.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("PresentationBuildTasks.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="PresentationCore" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("PresentationCore.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("PresentationCore.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.0.30319.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("PresentationCore.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System,", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("WindowsBase,", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("WindowsFormsIntegration, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Windows.Controls.Ribbon, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework-SystemDrawing, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Windows.Presentation, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationUI, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Printing, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("ReachFramework, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media.Animation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media.Media3D")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media.Imaging")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Automation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Media.TextFormatting")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Ink")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Input")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Media.Effects")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Media.Imaging")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Media.Media3D")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Media.Animation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Media")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Automation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Media.TextFormatting")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Ink")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Input")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Media.Effects")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Media.Imaging")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Media.Media3D")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Media.Animation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Media")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Automation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Media.TextFormatting")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Input")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Media.Effects")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Media.Imaging")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Media.Media3D")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Media.Animation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Media")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml", "System.Windows.Markup")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/composite-font", "System.Windows.Media")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Automation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media.TextFormatting")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Ink")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Input")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media.Effects")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "wpf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "wpf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/xps/2005/06", "xps")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/winfx/2006/xaml", "x")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "av")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="PresentationFramework.Aero" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("PresentationFramework.Aero.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("PresentationFramework.Aero.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("PresentationFramework.Aero.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="PresentationFramework.Aero2" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("PresentationFramework.Aero2.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("PresentationFramework.Aero2.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("PresentationFramework.Aero2.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="PresentationFramework.AeroLite" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("PresentationFramework.AeroLite.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("PresentationFramework.AeroLite.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("PresentationFramework.AeroLite.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="PresentationFramework.Classic" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("PresentationFramework.Classic.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("PresentationFramework.Classic.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("PresentationFramework.Classic.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="PresentationFramework" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("PresentationFramework.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("PresentationFramework.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("PresentationFramework.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("mscorlib,", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System,", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("WindowsBase,", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("PresentationCore,", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Xaml,", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Core,", System.Runtime.CompilerServices.LoadHint.Sometimes)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework.Royale, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework.Luna, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework.Aero, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework.Aero2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework.AeroLite, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework.Classic, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Windows.Presentation, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework-SystemCore, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("PresentationFramework-SystemXml, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Windows.Controls.Ribbon, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsCompatibleWith("http://schemas.microsoft.com/xps/2005/06/resourcedictionary-key", "http://schemas.microsoft.com/winfx/2006/xaml")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Documents")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Shapes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Shell")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Navigation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Controls.Primitives")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media.Animation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Input")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "System.Windows.Media")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Documents")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Shapes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Shell")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Navigation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Controls.Primitives")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Media.Animation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Input")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "System.Windows.Media")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Documents")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Shapes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Shell")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Navigation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Controls.Primitives")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Media.Animation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "System.Windows.Input")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/winfx/2006/xaml", "System.Windows.Markup")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Controls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Documents")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Shapes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Navigation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Controls.Primitives")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Media.Animation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06", "System.Windows.Input")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/xps/2005/06/documentstructure", "System.Windows.Documents.DocumentStructures")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/winfx/2006/xaml/presentation", "av")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/netfx/2007/xaml/presentation", "wpf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/netfx/2009/xaml/presentation", "wpf")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/winfx/2006/xaml", "x")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/xps/2005/06", "metro")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.ThemeInfo(System.Windows.ResourceDictionaryLocation.ExternalAssembly, System.Windows.ResourceDictionaryLocation.None)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="PresentationFramework.Luna" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("PresentationFramework.Luna.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("PresentationFramework.Luna.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("PresentationFramework.Luna.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="PresentationFramework.Royale" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("PresentationFramework.Royale.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("PresentationFramework.Royale.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("PresentationFramework.Royale.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="ReachFramework" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("ReachFramework.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("ReachFramework.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("ReachFramework.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Printing, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="sysglobl" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("sysglobl.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("sysglobl.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("sysglobl.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Activities.Core.Presentation" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Activities.Core.Presentation.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Activities.Core.Presentation.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a", "8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Activities.Core.Presentation.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("CIT.System.Activities.Core.Design, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Activities" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Activities.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Activities.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a", "8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Activities.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("CDF.CIT.Scenarios.WorkflowModel.Debugger, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("CDF.CIT.Scenarios.WorkflowModel.Compensation, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("CDF.CIT.Scenarios.WorkflowModel.DataModel, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("CDF.CIT.Scenarios.Activities.Statements.StateMachine, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Compensation, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Runtime.Serialization, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("97bdccfe-43bf-4c17-991d-c797c2ef2243")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/activities", "System.Activities")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/activities", "System.Activities.Statements")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/activities", "System.Activities.Expressions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/activities", "System.Activities.Validation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/activities", "System.Activities.XamlIntegration")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger", "System.Activities.Debugger.Symbol")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger", "sads")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Activities.DurableInstancing" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Activities.DurableInstancing.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Activities.DurableInstancing.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a", "8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Activities.DurableInstancing.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("3C5386D5-54BD-49dc-AFCC-A46EAE3545DB")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Activities.Presentation" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Activities.Presentation.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Activities.Presentation.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c80000014010000060200000024000052534131000800000100010085aad0bef0688d1b994a0d78e1fd29fc24ac34ed3d3ac3fb9b3d0c48386ba834aa880035060a8848b2d8adf58e670ed20914be3681a891c9c8c01eef2ab22872547c39be00af0e6c72485d7cfd1a51df8947d36ceba9989106b58abe79e6a3e71a01ed6bdc867012883e0b1a4d35b1b5eeed6df21e401bb0c22f2246ccb69979dc9e61eef262832ed0f2064853725a75485fa8a3efb7e027319c86dec03dc3b1bca2b5081bab52a627b9917450dfad534799e1c7af58683bdfa135f1518ff1ea60e90d7b993a6c87fd3dd93408e35d1296f9a7f9a97c5db56c0f3cc25ad11e9777f94d138b3cea53b9a8331c2e6dcb8d2ea94e18bf1163ff112a22dbd92d429a", "8913ef869646d14971df222c210018ab394cfe63f8eb9b4d894c0dda7368cfb69df15d049b347f8a8b9205cdcc3d6bd6690f0bd24b3da3179feb8c03f410703027c7844ff654997e38015dfc97222c15061af2a1d3fe91775b9dd4b8ede64d3d59816270a9520e393c8e60619b80d40fc1dc4f12b5aa0c2df20d02ea32960851")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Activities.Presentation.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("CIT.System.Activities.Core.Design, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Activities.Core.Presentation, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Activities.Presentation.UnitTest, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation/toolbox", "System.Activities.Presentation.Toolbox")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation", "System.Activities.Presentation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation", "System.Activities.Presentation.View")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation", "System.Activities.Presentation.Annotations")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation", "System.Activities.Presentation.Expressions")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsDefinition("http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation", "System.Activities.Presentation.ViewState")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation", "sap")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation", "sap2010")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.XmlnsPrefix("http://schemas.openxmlformats.org/markup-compatibility/2006", "mc")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.ThemeInfo(System.Windows.ResourceDictionaryLocation.SourceAssembly, System.Windows.ResourceDictionaryLocation.SourceAssembly)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.AddIn.Contract" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.AddIn.Contract.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.AddIn.Contract.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.AddIn.Contract.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess, System.Runtime.ConstrainedExecution.Cer.None)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.AddIn" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.AddIn.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.AddIn.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.AddIn.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.DefaultDependency(System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.StringFreezing</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.ComponentModel.Composition" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.ComponentModel.Composition.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.ComponentModel.Composition.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.ComponentModel.Composition.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.ComponentModel.Composition.UnitTests, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.ComponentModel.Composition.UnitTestFramework, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.ComponentModel.Composition.Registration" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.ComponentModel.Composition.Registration.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.ComponentModel.Composition.Registration.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.ComponentModel.Composition.Registration.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.ComponentModel.Composition.RegistrationModel.UnitTests, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.ComponentModel.Composition.UnitTestFramework, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.ComponentModel.DataAnnotations" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.ComponentModel.DataAnnotations.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.ComponentModel.DataAnnotations.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.ComponentModel.DataAnnotations.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.ComponentModel.DataAnnotations.Test, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Configuration" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Configuration.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Configuration.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Configuration.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComCompatibleVersion(1, 0, 3300, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Configuration.Install" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Configuration.Install.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Configuration.Install.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Configuration.Install.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Core" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Core.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Core.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Core.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.DefaultDependency(System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.StringFreezing</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Data.DataSetExtensions" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Data.DataSetExtensions.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Data.DataSetExtensions.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Data.DataSetExtensions.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComCompatibleVersion(1, 0, 3300, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Data" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Data.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Data.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Data.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Data.DataSetExtensions, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("SqlAccess, PublicKey=0024000004800000940000000602000000240000525341310004000001000100272736ad6e5f9586bac2d531eabc3acc666c2f8ec879fa94f8f7b0327d2ff2ed523448f83c3d5c5dd2dfc7bc99c5286b2c125117bf5cbe242b9d41750732b2bdffe649c6efb8e5526d526fdd130095ecdb7bf210809c6cdad8824faa9ac0310ac3cba2aa0523567b2dfa7fe250b30facbd62d4ec99b94ac47c7d3b28f1f6e4c8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComCompatibleVersion(1, 0, 3300, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Data.Entity.Design" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Data.Entity.Design.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Data.Entity.Design.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Data.Entity.Design.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Data.Entity" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Data.Entity.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Data.Entity.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Data.Entity.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Data.Entity.Design,PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComCompatibleVersion(1, 0, 3300, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Data.Linq" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Data.Linq.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Data.Linq.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Data.Linq.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DLinq.Unittests,PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("DLinqTestHooks,PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTransparent</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Data.OracleClient" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Data.OracleClient.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Data.OracleClient.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Data.OracleClient.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Data,", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComCompatibleVersion(1, 0, 3300, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Data.Services.Client" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Data.Services.Client.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Data.Services.Client.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Data.Services.Client.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Data.Services.Design" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Data.Services.Design.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Data.Services.Design.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Data.Services.Design.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers(PartialTrustVisibilityLevel=System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Data.Services" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Data.Services.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Data.Services.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Data.Services.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComCompatibleVersion(1, 0, 3300, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Data.SqlXml" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Data.SqlXml.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Data.SqlXml.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Data.SqlXml.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.Dependency("System.Xml,", System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Xml, PublicKey=00000000000000000400000000000000")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Deployment" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Deployment.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Deployment.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Deployment.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("dfsvc, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Design" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Drawing.BitmapSuffixInSatelliteAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Design.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Design.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Design.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Web.Extensions.Design, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Web.DynamicData.Design, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Design.Test, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComCompatibleVersion(1, 0, 3300, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Device" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Device.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Device.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Device.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level2, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.DirectoryServices.AccountManagement" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.DirectoryServices.AccountManagement.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.DirectoryServices.AccountManagement.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.DirectoryServices.AccountManagement.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.DirectoryServices" Version="4.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 07 d1 fa 57 c4 ae d9 f0 a3 2e 84 aa 0f ae fd 0d e9 e8 fd 6a ec 8f 87 fb 03 76 6c 83 4c 99 92 1e b2 3b e7 9a d9 d5 dc c1 dd 9a d2 36 13 21 02 90 0b 72 3c f9 80 95 7f c4 e1 77 10 8f c6 07 77 4f 29 e8 32 0e 92 ea 05 ec e4 e8 21 c0 a5 ef e8 f1 64 5c 4c 0c 93 c1 ab 99 28 5d 62 2c aa 65 2c 1d fa d6 3d 74 5d 6f 2d e5 f1 7e 5e af 0f c4 96 3d 26 1c 8a 12 43 65 18 20 6d c0 93 34 4d 5a d2 93 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation.  All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.DirectoryServices.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.DirectoryServices.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.7.2014.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblySignatureKey("002400000c800000140100000602000000240000525341310008000001000100613399aff18ef1a2c2514a273a42d9042b72321f1757102df9ebada69923e2738406c21e5b801552ab8d200a65a235e001ac9adc25f2d811eb09496a4c6a59d4619589c69f5baf0c4179a47311d92555cd006acc8b5959f2bd6e10e360c34537a1d266da8085856583c85d81da7f3ec01ed9564c58d93d713cd0172c8e23a10f0239b80c96b07736f5d8b022542a4e74251a5f432824318b3539a5a087f8e53d2f135f9ca47f3bb2e10aff0af0849504fb7cea3ff192dc8de0edad64c68efde34c56d302ad55fd6e80f302d5efcdeae953658d3452561b5f36c542efdbdd9f888538d374cef106acf7d93a4445c3c73cd911f0571aaf3d54da12b11ddec375b3", "a5a866e1ee186f807668209f3b11236ace5e21f117803a3143abb126dd035d7d2f876b6938aaf2ee3414d5420d753621400db44a49c486ce134300a2106adb6bdb433590fef8ad5c43cba82290dc49530effd86523d9483c00f458af46890036b0e2c61d077d7fbac467a506eba29e467a87198b053c749aa2a4d2840c784e6d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.DirectoryServices.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.ReferenceAssembly</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DefaultDllImportSearchPaths(System.Runtime.InteropServices.DllImportSearchPath.System32 | System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityRules(System.Security.SecurityRuleSet.Level1, SkipVerificationInFullTrust=true)</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Accessibility">
      <Type Name="__MIDL_IWinTypes_0009" Kind="Structure" />
      <Type Name="_RemotableHandle" Kind="Structure" />
      <Type Name="AnnoScope" Kind="Enumeration" />
      <Type Name="CAccPropServices" Kind="Interface" />
      <Type Name="CAccPropServicesClass" Kind="Class" />
      <Type Name="IAccessible" Kind="Interface" />
      <Type Name="IAccessibleHandler" Kind="Interface" />
      <Type Name="IAccIdentity" Kind="Interface" />
      <Type Name="IAccPropServer" Kind="Interface" />
      <Type Name="IAccPropServices" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Activities.Build">
      <Type Name="WorkflowBuildMessageTask" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Activities.Build.Debugger">
      <Type Name="DebugBuildExtension" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Activities.Build.Expressions">
      <Type Name="ExpressionsBuildExtension" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Activities.Build.Validation">
      <Type Name="DeferredValidationTask" Kind="Class" />
      <Type Name="ReportDeferredValidationErrorsTask" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.BuildEngine">
      <Type Name="BuildItem" Kind="Class" />
      <Type Name="BuildItemGroup" Kind="Class" />
      <Type Name="BuildItemGroupCollection" Kind="Class" />
      <Type Name="BuildProperty" Kind="Class" />
      <Type Name="BuildPropertyGroup" Kind="Class" />
      <Type Name="BuildPropertyGroupCollection" Kind="Class" />
      <Type Name="BuildSettings" Kind="Enumeration" />
      <Type Name="BuildTask" Kind="Class" />
      <Type Name="ColorResetter" Kind="Delegate" />
      <Type Name="ColorSetter" Kind="Delegate" />
      <Type Name="ConfigurableForwardingLogger" Kind="Class" />
      <Type Name="ConsoleLogger" Kind="Class" />
      <Type Name="DistributedFileLogger" Kind="Class" />
      <Type Name="Engine" Kind="Class" />
      <Type Name="FileLogger" Kind="Class" />
      <Type Name="Import" Kind="Class" />
      <Type Name="ImportCollection" Kind="Class" />
      <Type Name="InternalLoggerException" Kind="Class" />
      <Type Name="InvalidProjectFileException" Kind="Class" />
      <Type Name="InvalidToolsetDefinitionException" Kind="Class" />
      <Type Name="LocalNode" Kind="Class" />
      <Type Name="LoggerDescription" Kind="Class" />
      <Type Name="Project" Kind="Class" />
      <Type Name="ProjectLoadSettings" Kind="Enumeration" />
      <Type Name="PropertyPosition" Kind="Enumeration" />
      <Type Name="RemoteErrorException" Kind="Class" />
      <Type Name="SolutionWrapperProject" Kind="Class" />
      <Type Name="Target" Kind="Class" />
      <Type Name="TargetCollection" Kind="Class" />
      <Type Name="Toolset" Kind="Class" />
      <Type Name="ToolsetCollection" Kind="Class" />
      <Type Name="ToolsetDefinitionLocations" Kind="Enumeration" />
      <Type Name="UsingTask" Kind="Class" />
      <Type Name="UsingTaskCollection" Kind="Class" />
      <Type Name="Utilities" Kind="Class" />
      <Type Name="WriteHandler" Kind="Delegate" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Construction">
      <Type Name="ElementLocation" Kind="Class" />
      <Type Name="ProjectChooseElement" Kind="Class" />
      <Type Name="ProjectElement" Kind="Class" />
      <Type Name="ProjectElementContainer" Kind="Class" />
      <Type Name="ProjectExtensionsElement" Kind="Class" />
      <Type Name="ProjectImportElement" Kind="Class" />
      <Type Name="ProjectImportGroupElement" Kind="Class" />
      <Type Name="ProjectItemDefinitionElement" Kind="Class" />
      <Type Name="ProjectItemDefinitionGroupElement" Kind="Class" />
      <Type Name="ProjectItemElement" Kind="Class" />
      <Type Name="ProjectItemGroupElement" Kind="Class" />
      <Type Name="ProjectMetadataElement" Kind="Class" />
      <Type Name="ProjectOnErrorElement" Kind="Class" />
      <Type Name="ProjectOtherwiseElement" Kind="Class" />
      <Type Name="ProjectOutputElement" Kind="Class" />
      <Type Name="ProjectPropertyElement" Kind="Class" />
      <Type Name="ProjectPropertyGroupElement" Kind="Class" />
      <Type Name="ProjectRootElement" Kind="Class" />
      <Type Name="ProjectTargetElement" Kind="Class" />
      <Type Name="ProjectTaskElement" Kind="Class" />
      <Type Name="ProjectUsingTaskBodyElement" Kind="Class" />
      <Type Name="ProjectUsingTaskElement" Kind="Class" />
      <Type Name="ProjectUsingTaskParameterElement" Kind="Class" />
      <Type Name="ProjectWhenElement" Kind="Class" />
      <Type Name="UsingTaskParameterGroupElement" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Conversion">
      <Type Name="ProjectFileConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Debugging">
      <Type Name="DebuggerManager" Kind="Class" />
      <Type Name="DebuggerManager+IslandThread" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Evaluation">
      <Type Name="Project" Kind="Class" />
      <Type Name="ProjectChangedEventArgs" Kind="Class" />
      <Type Name="ProjectCollection" Kind="Class" />
      <Type Name="ProjectCollection+ProjectAddedEventHandler" Kind="Delegate" />
      <Type Name="ProjectCollection+ProjectAddedToProjectCollectionEventArgs" Kind="Class" />
      <Type Name="ProjectCollectionChangedEventArgs" Kind="Class" />
      <Type Name="ProjectCollectionChangedState" Kind="Enumeration" />
      <Type Name="ProjectItem" Kind="Class" />
      <Type Name="ProjectItemDefinition" Kind="Class" />
      <Type Name="ProjectLoadSettings" Kind="Enumeration" />
      <Type Name="ProjectMetadata" Kind="Class" />
      <Type Name="ProjectProperty" Kind="Class" />
      <Type Name="ProjectXmlChangedEventArgs" Kind="Class" />
      <Type Name="ResolvedImport" Kind="Structure" />
      <Type Name="SubToolset" Kind="Class" />
      <Type Name="Toolset" Kind="Class" />
      <Type Name="ToolsetDefinitionLocations" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Exceptions">
      <Type Name="BuildAbortedException" Kind="Class" />
      <Type Name="InternalLoggerException" Kind="Class" />
      <Type Name="InvalidProjectFileException" Kind="Class" />
      <Type Name="InvalidToolsetDefinitionException" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Execution">
      <Type Name="BuildManager" Kind="Class" />
      <Type Name="BuildParameters" Kind="Class" />
      <Type Name="BuildRequestData" Kind="Class" />
      <Type Name="BuildRequestDataFlags" Kind="Enumeration" />
      <Type Name="BuildResult" Kind="Class" />
      <Type Name="BuildResultCode" Kind="Enumeration" />
      <Type Name="BuildSubmission" Kind="Class" />
      <Type Name="BuildSubmissionCompleteCallback" Kind="Delegate" />
      <Type Name="HostServices" Kind="Class" />
      <Type Name="ITargetResult" Kind="Interface" />
      <Type Name="NodeAffinity" Kind="Enumeration" />
      <Type Name="NodeEngineShutdownReason" Kind="Enumeration" />
      <Type Name="OutOfProcNode" Kind="Class" />
      <Type Name="ProjectInstance" Kind="Class" />
      <Type Name="ProjectInstanceSettings" Kind="Enumeration" />
      <Type Name="ProjectItemDefinitionInstance" Kind="Class" />
      <Type Name="ProjectItemGroupTaskInstance" Kind="Class" />
      <Type Name="ProjectItemGroupTaskItemInstance" Kind="Class" />
      <Type Name="ProjectItemGroupTaskMetadataInstance" Kind="Class" />
      <Type Name="ProjectItemInstance" Kind="Class" />
      <Type Name="ProjectMetadataInstance" Kind="Class" />
      <Type Name="ProjectOnErrorInstance" Kind="Class" />
      <Type Name="ProjectPropertyGroupTaskInstance" Kind="Class" />
      <Type Name="ProjectPropertyGroupTaskPropertyInstance" Kind="Class" />
      <Type Name="ProjectPropertyInstance" Kind="Class" />
      <Type Name="ProjectTargetInstance" Kind="Class" />
      <Type Name="ProjectTargetInstanceChild" Kind="Class" />
      <Type Name="ProjectTaskInstance" Kind="Class" />
      <Type Name="ProjectTaskInstanceChild" Kind="Class" />
      <Type Name="ProjectTaskOutputItemInstance" Kind="Class" />
      <Type Name="ProjectTaskOutputPropertyInstance" Kind="Class" />
      <Type Name="TargetResult" Kind="Class" />
      <Type Name="TargetResultCode" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Framework">
      <Type Name="AnyEventHandler" Kind="Delegate" />
      <Type Name="BuildEngineResult" Kind="Structure" />
      <Type Name="BuildErrorEventArgs" Kind="Class" />
      <Type Name="BuildErrorEventHandler" Kind="Delegate" />
      <Type Name="BuildEventArgs" Kind="Class" />
      <Type Name="BuildEventContext" Kind="Class" />
      <Type Name="BuildFinishedEventArgs" Kind="Class" />
      <Type Name="BuildFinishedEventHandler" Kind="Delegate" />
      <Type Name="BuildMessageEventArgs" Kind="Class" />
      <Type Name="BuildMessageEventHandler" Kind="Delegate" />
      <Type Name="BuildStartedEventArgs" Kind="Class" />
      <Type Name="BuildStartedEventHandler" Kind="Delegate" />
      <Type Name="BuildStatusEventArgs" Kind="Class" />
      <Type Name="BuildStatusEventHandler" Kind="Delegate" />
      <Type Name="BuildWarningEventArgs" Kind="Class" />
      <Type Name="BuildWarningEventHandler" Kind="Delegate" />
      <Type Name="CriticalBuildMessageEventArgs" Kind="Class" />
      <Type Name="CustomBuildEventArgs" Kind="Class" />
      <Type Name="CustomBuildEventHandler" Kind="Delegate" />
      <Type Name="ExternalProjectFinishedEventArgs" Kind="Class" />
      <Type Name="ExternalProjectStartedEventArgs" Kind="Class" />
      <Type Name="IBuildEngine" Kind="Interface" />
      <Type Name="IBuildEngine2" Kind="Interface" />
      <Type Name="IBuildEngine3" Kind="Interface" />
      <Type Name="IBuildEngine4" Kind="Interface" />
      <Type Name="ICancelableTask" Kind="Interface" />
      <Type Name="IEventRedirector" Kind="Interface" />
      <Type Name="IEventSource" Kind="Interface" />
      <Type Name="IForwardingLogger" Kind="Interface" />
      <Type Name="IGeneratedTask" Kind="Interface" />
      <Type Name="ILogger" Kind="Interface" />
      <Type Name="INodeLogger" Kind="Interface" />
      <Type Name="ITask" Kind="Interface" />
      <Type Name="ITaskFactory" Kind="Interface" />
      <Type Name="ITaskFactory2" Kind="Interface" />
      <Type Name="ITaskHost" Kind="Interface" />
      <Type Name="ITaskItem" Kind="Interface" />
      <Type Name="ITaskItem2" Kind="Interface" />
      <Type Name="LazyFormattedBuildEventArgs" Kind="Class" />
      <Type Name="LoadInSeparateAppDomainAttribute" Kind="Class" />
      <Type Name="LoggerException" Kind="Class" />
      <Type Name="LoggerVerbosity" Kind="Enumeration" />
      <Type Name="MessageImportance" Kind="Enumeration" />
      <Type Name="OutputAttribute" Kind="Class" />
      <Type Name="ProjectFinishedEventArgs" Kind="Class" />
      <Type Name="ProjectFinishedEventHandler" Kind="Delegate" />
      <Type Name="ProjectStartedEventArgs" Kind="Class" />
      <Type Name="ProjectStartedEventHandler" Kind="Delegate" />
      <Type Name="RegisteredTaskObjectLifetime" Kind="Enumeration" />
      <Type Name="RequiredAttribute" Kind="Class" />
      <Type Name="RequiredRuntimeAttribute" Kind="Class" />
      <Type Name="RunInMTAAttribute" Kind="Class" />
      <Type Name="RunInSTAAttribute" Kind="Class" />
      <Type Name="TargetFinishedEventArgs" Kind="Class" />
      <Type Name="TargetFinishedEventHandler" Kind="Delegate" />
      <Type Name="TargetStartedEventArgs" Kind="Class" />
      <Type Name="TargetStartedEventHandler" Kind="Delegate" />
      <Type Name="TaskCommandLineEventArgs" Kind="Class" />
      <Type Name="TaskFinishedEventArgs" Kind="Class" />
      <Type Name="TaskFinishedEventHandler" Kind="Delegate" />
      <Type Name="TaskPropertyInfo" Kind="Class" />
      <Type Name="TaskStartedEventArgs" Kind="Class" />
      <Type Name="TaskStartedEventHandler" Kind="Delegate" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Framework.XamlTypes">
      <Type Name="Argument" Kind="Class" />
      <Type Name="BaseProperty" Kind="Class" />
      <Type Name="BoolProperty" Kind="Class" />
      <Type Name="Category" Kind="Class" />
      <Type Name="CategorySchema" Kind="Class" />
      <Type Name="ContentType" Kind="Class" />
      <Type Name="DataSource" Kind="Class" />
      <Type Name="DefaultValueSourceLocation" Kind="Enumeration" />
      <Type Name="DynamicEnumProperty" Kind="Class" />
      <Type Name="EnumProperty" Kind="Class" />
      <Type Name="EnumValue" Kind="Class" />
      <Type Name="FileExtension" Kind="Class" />
      <Type Name="IntProperty" Kind="Class" />
      <Type Name="IProjectSchemaNode" Kind="Interface" />
      <Type Name="ItemType" Kind="Class" />
      <Type Name="NameValuePair" Kind="Class" />
      <Type Name="ProjectSchemaDefinitions" Kind="Class" />
      <Type Name="Rule" Kind="Class" />
      <Type Name="RuleBag" Kind="Class" />
      <Type Name="RuleOverrideMode" Kind="Enumeration" />
      <Type Name="RuleSchema" Kind="Class" />
      <Type Name="StringListProperty" Kind="Class" />
      <Type Name="StringProperty" Kind="Class" />
      <Type Name="ValueEditor" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Logging">
      <Type Name="ColorResetter" Kind="Delegate" />
      <Type Name="ColorSetter" Kind="Delegate" />
      <Type Name="ConfigurableForwardingLogger" Kind="Class" />
      <Type Name="ConsoleLogger" Kind="Class" />
      <Type Name="DistributedFileLogger" Kind="Class" />
      <Type Name="FileLogger" Kind="Class" />
      <Type Name="ForwardingLoggerRecord" Kind="Class" />
      <Type Name="LoggerDescription" Kind="Class" />
      <Type Name="WriteHandler" Kind="Delegate" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Tasks">
      <Type Name="AL" Kind="Class" />
      <Type Name="AppDomainIsolatedTaskExtension" Kind="Class" />
      <Type Name="AspNetCompiler" Kind="Class" />
      <Type Name="AssignCulture" Kind="Class" />
      <Type Name="AssignProjectConfiguration" Kind="Class" />
      <Type Name="AssignTargetPath" Kind="Class" />
      <Type Name="CallTarget" Kind="Class" />
      <Type Name="CodeTaskFactory" Kind="Class" />
      <Type Name="CombinePath" Kind="Class" />
      <Type Name="CommandLineBuilderExtension" Kind="Class" />
      <Type Name="ConvertToAbsolutePath" Kind="Class" />
      <Type Name="Copy" Kind="Class" />
      <Type Name="CreateCSharpManifestResourceName" Kind="Class" />
      <Type Name="CreateItem" Kind="Class" />
      <Type Name="CreateManifestResourceName" Kind="Class" />
      <Type Name="CreateProperty" Kind="Class" />
      <Type Name="CreateVisualBasicManifestResourceName" Kind="Class" />
      <Type Name="Csc" Kind="Class" />
      <Type Name="Delete" Kind="Class" />
      <Type Name="Error" Kind="Class" />
      <Type Name="Exec" Kind="Class" />
      <Type Name="ExtractedClassName" Kind="Structure" />
      <Type Name="FindAppConfigFile" Kind="Class" />
      <Type Name="FindInList" Kind="Class" />
      <Type Name="FindUnderPath" Kind="Class" />
      <Type Name="FormatUrl" Kind="Class" />
      <Type Name="FormatVersion" Kind="Class" />
      <Type Name="GenerateApplicationManifest" Kind="Class" />
      <Type Name="GenerateBootstrapper" Kind="Class" />
      <Type Name="GenerateDeploymentManifest" Kind="Class" />
      <Type Name="GenerateManifestBase" Kind="Class" />
      <Type Name="GenerateResource" Kind="Class" />
      <Type Name="GenerateTrustInfo" Kind="Class" />
      <Type Name="GetAssemblyIdentity" Kind="Class" />
      <Type Name="GetFrameworkPath" Kind="Class" />
      <Type Name="GetFrameworkSdkPath" Kind="Class" />
      <Type Name="GetInstalledSDKLocations" Kind="Class" />
      <Type Name="GetReferenceAssemblyPaths" Kind="Class" />
      <Type Name="GetSDKReferenceFiles" Kind="Class" />
      <Type Name="IFixedTypeInfo" Kind="Interface" />
      <Type Name="LC" Kind="Class" />
      <Type Name="MakeDir" Kind="Class" />
      <Type Name="ManagedCompiler" Kind="Class" />
      <Type Name="Message" Kind="Class" />
      <Type Name="Move" Kind="Class" />
      <Type Name="MSBuild" Kind="Class" />
      <Type Name="ReadLinesFromFile" Kind="Class" />
      <Type Name="RegisterAssembly" Kind="Class" />
      <Type Name="RemoveDir" Kind="Class" />
      <Type Name="RemoveDuplicates" Kind="Class" />
      <Type Name="RequiresFramework35SP1Assembly" Kind="Class" />
      <Type Name="ResolveAssemblyReference" Kind="Class" />
      <Type Name="ResolveComReference" Kind="Class" />
      <Type Name="ResolveKeySource" Kind="Class" />
      <Type Name="ResolveManifestFiles" Kind="Class" />
      <Type Name="ResolveNativeReference" Kind="Class" />
      <Type Name="ResolveNonMSBuildProjectOutput" Kind="Class" />
      <Type Name="ResolveProjectBase" Kind="Class" />
      <Type Name="ResolveSDKReference" Kind="Class" />
      <Type Name="SGen" Kind="Class" />
      <Type Name="SignFile" Kind="Class" />
      <Type Name="TaskExtension" Kind="Class" />
      <Type Name="TaskLoggingHelperExtension" Kind="Class" />
      <Type Name="ToolTaskExtension" Kind="Class" />
      <Type Name="Touch" Kind="Class" />
      <Type Name="UnregisterAssembly" Kind="Class" />
      <Type Name="UpdateManifest" Kind="Class" />
      <Type Name="Vbc" Kind="Class" />
      <Type Name="Warning" Kind="Class" />
      <Type Name="WinMDExp" Kind="Class" />
      <Type Name="WriteCodeFragment" Kind="Class" />
      <Type Name="WriteLinesToFile" Kind="Class" />
      <Type Name="XamlTaskFactory" Kind="Class" />
      <Type Name="XmlPeek" Kind="Class" />
      <Type Name="XmlPoke" Kind="Class" />
      <Type Name="XslTransformation" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Tasks.Deployment.Bootstrapper">
      <Type Name="BootstrapperBuilder" Kind="Class" />
      <Type Name="BuildMessage" Kind="Class" />
      <Type Name="BuildMessageSeverity" Kind="Enumeration" />
      <Type Name="BuildResults" Kind="Class" />
      <Type Name="BuildSettings" Kind="Class" />
      <Type Name="ComponentsLocation" Kind="Enumeration" />
      <Type Name="IBootstrapperBuilder" Kind="Interface" />
      <Type Name="IBuildMessage" Kind="Interface" />
      <Type Name="IBuildResults" Kind="Interface" />
      <Type Name="IBuildSettings" Kind="Interface" />
      <Type Name="IProduct" Kind="Interface" />
      <Type Name="IProductBuilder" Kind="Interface" />
      <Type Name="IProductBuilderCollection" Kind="Interface" />
      <Type Name="IProductCollection" Kind="Interface" />
      <Type Name="Product" Kind="Class" />
      <Type Name="ProductBuilder" Kind="Class" />
      <Type Name="ProductBuilderCollection" Kind="Class" />
      <Type Name="ProductCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Tasks.Deployment.ManifestUtilities">
      <Type Name="ApplicationIdentity" Kind="Class" />
      <Type Name="ApplicationManifest" Kind="Class" />
      <Type Name="AssemblyIdentity" Kind="Class" />
      <Type Name="AssemblyIdentity+FullNameFlags" Kind="Enumeration" />
      <Type Name="AssemblyManifest" Kind="Class" />
      <Type Name="AssemblyReference" Kind="Class" />
      <Type Name="AssemblyReferenceCollection" Kind="Class" />
      <Type Name="AssemblyReferenceType" Kind="Enumeration" />
      <Type Name="BaseReference" Kind="Class" />
      <Type Name="ComClass" Kind="Class" />
      <Type Name="CompatibleFramework" Kind="Class" />
      <Type Name="CompatibleFrameworkCollection" Kind="Class" />
      <Type Name="DeployManifest" Kind="Class" />
      <Type Name="FileAssociation" Kind="Class" />
      <Type Name="FileAssociationCollection" Kind="Class" />
      <Type Name="FileReference" Kind="Class" />
      <Type Name="FileReferenceCollection" Kind="Class" />
      <Type Name="Manifest" Kind="Class" />
      <Type Name="ManifestReader" Kind="Class" />
      <Type Name="ManifestWriter" Kind="Class" />
      <Type Name="OutputMessage" Kind="Class" />
      <Type Name="OutputMessageCollection" Kind="Class" />
      <Type Name="OutputMessageType" Kind="Enumeration" />
      <Type Name="ProxyStub" Kind="Class" />
      <Type Name="SecurityUtilities" Kind="Class" />
      <Type Name="TrustInfo" Kind="Class" />
      <Type Name="TypeLib" Kind="Class" />
      <Type Name="UpdateMode" Kind="Enumeration" />
      <Type Name="UpdateUnit" Kind="Enumeration" />
      <Type Name="WindowClass" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Tasks.Hosting">
      <Type Name="ICscHostObject" Kind="Interface" />
      <Type Name="ICscHostObject2" Kind="Interface" />
      <Type Name="ICscHostObject3" Kind="Interface" />
      <Type Name="ICscHostObject4" Kind="Interface" />
      <Type Name="IVbcHostObject" Kind="Interface" />
      <Type Name="IVbcHostObject2" Kind="Interface" />
      <Type Name="IVbcHostObject3" Kind="Interface" />
      <Type Name="IVbcHostObject4" Kind="Interface" />
      <Type Name="IVbcHostObject5" Kind="Interface" />
      <Type Name="IVbcHostObjectFreeThreaded" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Tasks.Windows">
      <Type Name="FileClassifier" Kind="Class" />
      <Type Name="GenerateTemporaryTargetAssembly" Kind="Class" />
      <Type Name="GetWinFXPath" Kind="Class" />
      <Type Name="MarkupCompilePass1" Kind="Class" />
      <Type Name="MarkupCompilePass2" Kind="Class" />
      <Type Name="MergeLocalizationDirectives" Kind="Class" />
      <Type Name="ResourcesGenerator" Kind="Class" />
      <Type Name="UidManager" Kind="Class" />
      <Type Name="UpdateManifestForBrowserApplication" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Tasks.Xaml">
      <Type Name="CommandLineArgumentRelation" Kind="Class" />
      <Type Name="CommandLineGenerator" Kind="Class" />
      <Type Name="CommandLineToolSwitch" Kind="Class" />
      <Type Name="CommandLineToolSwitchType" Kind="Enumeration" />
      <Type Name="PropertyRelation" Kind="Class" />
      <Type Name="XamlDataDrivenToolTask" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Build.Utilities">
      <Type Name="AppDomainIsolatedTask" Kind="Class" />
      <Type Name="AssemblyFoldersExInfo" Kind="Class" />
      <Type Name="CanonicalTrackedInputFiles" Kind="Class" />
      <Type Name="CanonicalTrackedOutputFiles" Kind="Class" />
      <Type Name="CommandLineBuilder" Kind="Class" />
      <Type Name="DependencyFilter" Kind="Delegate" />
      <Type Name="DotNetFrameworkArchitecture" Kind="Enumeration" />
      <Type Name="ExecutableType" Kind="Enumeration" />
      <Type Name="FileTracker" Kind="Class" />
      <Type Name="FlatTrackingData" Kind="Class" />
      <Type Name="HostObjectInitializationStatus" Kind="Enumeration" />
      <Type Name="Logger" Kind="Class" />
      <Type Name="MuxLogger" Kind="Class" />
      <Type Name="ProcessorArchitecture" Kind="Class" />
      <Type Name="TargetDotNetFrameworkVersion" Kind="Enumeration" />
      <Type Name="TargetPlatformSDK" Kind="Class" />
      <Type Name="Task" Kind="Class" />
      <Type Name="TaskItem" Kind="Class" />
      <Type Name="TaskLoggingHelper" Kind="Class" />
      <Type Name="ToolLocationHelper" Kind="Class" />
      <Type Name="ToolTask" Kind="Class" />
      <Type Name="TrackedDependencies" Kind="Class" />
      <Type Name="UpToDateCheckType" Kind="Enumeration" />
      <Type Name="VisualStudioVersion" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.CSharp.Activities">
      <Type Name="CSharpReference`1" DisplayName="CSharpReference&lt;TResult&gt;" Kind="Class" />
      <Type Name="CSharpValue`1" DisplayName="CSharpValue&lt;TResult&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.CSharp.RuntimeBinder">
      <Type Name="Binder" Kind="Class" />
      <Type Name="CSharpArgumentInfo" Kind="Class" />
      <Type Name="CSharpArgumentInfoFlags" Kind="Enumeration" />
      <Type Name="CSharpBinderFlags" Kind="Enumeration" />
      <Type Name="RuntimeBinderException" Kind="Class" />
      <Type Name="RuntimeBinderInternalCompilerException" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.JScript">
      <Type Name="ActivationObject" Kind="Class" />
      <Type Name="ActiveXObjectConstructor" Kind="Class" />
      <Type Name="ArgumentsObject" Kind="Class" />
      <Type Name="ArrayConstructor" Kind="Class" />
      <Type Name="ArrayLiteral" Kind="Class" />
      <Type Name="ArrayObject" Kind="Class" />
      <Type Name="ArrayPrototype" Kind="Class" />
      <Type Name="ArrayWrapper" Kind="Class" />
      <Type Name="AssemblyCustomAttributeList" Kind="Class" />
      <Type Name="AST" Kind="Class" />
      <Type Name="ASTList" Kind="Class" />
      <Type Name="BinaryOp" Kind="Class" />
      <Type Name="Binding" Kind="Class" />
      <Type Name="BitwiseBinary" Kind="Class" />
      <Type Name="Block" Kind="Class" />
      <Type Name="BlockScope" Kind="Class" />
      <Type Name="BooleanConstructor" Kind="Class" />
      <Type Name="BooleanObject" Kind="Class" />
      <Type Name="BooleanPrototype" Kind="Class" />
      <Type Name="BreakOutOfFinally" Kind="Class" />
      <Type Name="Closure" Kind="Class" />
      <Type Name="CmdLineError" Kind="Enumeration" />
      <Type Name="CmdLineException" Kind="Class" />
      <Type Name="CmdLineOptionParser" Kind="Class" />
      <Type Name="COMCharStream" Kind="Class" />
      <Type Name="COMFieldInfo" Kind="Class" />
      <Type Name="COMMemberInfo" Kind="Interface" />
      <Type Name="COMMethodInfo" Kind="Class" />
      <Type Name="COMPropertyInfo" Kind="Class" />
      <Type Name="Context" Kind="Class" />
      <Type Name="ContinueOutOfFinally" Kind="Class" />
      <Type Name="Convert" Kind="Class" />
      <Type Name="DateConstructor" Kind="Class" />
      <Type Name="DateObject" Kind="Class" />
      <Type Name="DatePrototype" Kind="Class" />
      <Type Name="DebugBreak" Kind="Class" />
      <Type Name="DebugConvert" Kind="Class" />
      <Type Name="DocumentContext" Kind="Class" />
      <Type Name="DynamicFieldInfo" Kind="Class" />
      <Type Name="Empty" Kind="Class" />
      <Type Name="EndOfFile" Kind="Class" />
      <Type Name="EnumeratorConstructor" Kind="Class" />
      <Type Name="EnumeratorObject" Kind="Class" />
      <Type Name="EnumeratorPrototype" Kind="Class" />
      <Type Name="Equality" Kind="Class" />
      <Type Name="ErrorConstructor" Kind="Class" />
      <Type Name="ErrorObject" Kind="Class" />
      <Type Name="ErrorPrototype" Kind="Class" />
      <Type Name="ErrorType" Kind="Enumeration" />
      <Type Name="Eval" Kind="Class" />
      <Type Name="EvalErrorObject" Kind="Class" />
      <Type Name="Expando" Kind="Class" />
      <Type Name="FieldAccessor" Kind="Class" />
      <Type Name="ForIn" Kind="Class" />
      <Type Name="FunctionConstructor" Kind="Class" />
      <Type Name="FunctionDeclaration" Kind="Class" />
      <Type Name="FunctionExpression" Kind="Class" />
      <Type Name="FunctionObject" Kind="Class" />
      <Type Name="FunctionPrototype" Kind="Class" />
      <Type Name="FunctionWrapper" Kind="Class" />
      <Type Name="GlobalObject" Kind="Class" />
      <Type Name="Globals" Kind="Class" />
      <Type Name="GlobalScope" Kind="Class" />
      <Type Name="Hide" Kind="Class" />
      <Type Name="IActivationObject" Kind="Interface" />
      <Type Name="IAuthorServices" Kind="Interface" />
      <Type Name="IColorizeText" Kind="Interface" />
      <Type Name="IDebugConvert" Kind="Interface" />
      <Type Name="IDebugConvert2" Kind="Interface" />
      <Type Name="IDebuggerObject" Kind="Interface" />
      <Type Name="IDebugScriptScope" Kind="Interface" />
      <Type Name="IDebugType" Kind="Interface" />
      <Type Name="IDebugVsaScriptCodeItem" Kind="Interface" />
      <Type Name="IDefineEvent" Kind="Interface" />
      <Type Name="IEngine2" Kind="Interface" />
      <Type Name="IErrorHandler" Kind="Interface" />
      <Type Name="IMessageReceiver" Kind="Interface" />
      <Type Name="IMethodsCompletionInfo" Kind="Interface" />
      <Type Name="Import" Kind="Class" />
      <Type Name="In" Kind="Class" />
      <Type Name="INeedEngine" Kind="Interface" />
      <Type Name="Instanceof" Kind="Class" />
      <Type Name="IObjectCompletionInfo" Kind="Interface" />
      <Type Name="IParseText" Kind="Interface" />
      <Type Name="IRedirectOutput" Kind="Interface" />
      <Type Name="ISite2" Kind="Interface" />
      <Type Name="ITokenColorInfo" Kind="Interface" />
      <Type Name="ITokenEnumerator" Kind="Interface" />
      <Type Name="IVsaFullErrorInfo" Kind="Interface" />
      <Type Name="IVsaScriptCodeItem" Kind="Interface" />
      <Type Name="IVsaScriptScope" Kind="Interface" />
      <Type Name="IWrappedMember" Kind="Interface" />
      <Type Name="JSAuthor" Kind="Class" />
      <Type Name="JSBuiltin" Kind="Enumeration" />
      <Type Name="JSConstructor" Kind="Class" />
      <Type Name="JScriptCodeProvider" Kind="Class" />
      <Type Name="JScriptException" Kind="Class" />
      <Type Name="JSError" Kind="Enumeration" />
      <Type Name="JSField" Kind="Class" />
      <Type Name="JSFieldInfo" Kind="Class" />
      <Type Name="JSFunctionAttribute" Kind="Class" />
      <Type Name="JSFunctionAttributeEnum" Kind="Enumeration" />
      <Type Name="JSLocalField" Kind="Class" />
      <Type Name="JSMethod" Kind="Class" />
      <Type Name="JSMethodInfo" Kind="Class" />
      <Type Name="JSObject" Kind="Class" />
      <Type Name="JSParser" Kind="Class" />
      <Type Name="JSPrototypeObject" Kind="Class" />
      <Type Name="JSScanner" Kind="Class" />
      <Type Name="JSToken" Kind="Enumeration" />
      <Type Name="JSVariableField" Kind="Class" />
      <Type Name="LateBinding" Kind="Class" />
      <Type Name="LenientArrayPrototype" Kind="Class" />
      <Type Name="LenientBooleanPrototype" Kind="Class" />
      <Type Name="LenientDateConstructor" Kind="Class" />
      <Type Name="LenientDatePrototype" Kind="Class" />
      <Type Name="LenientEnumeratorPrototype" Kind="Class" />
      <Type Name="LenientErrorPrototype" Kind="Class" />
      <Type Name="LenientFunctionPrototype" Kind="Class" />
      <Type Name="LenientGlobalObject" Kind="Class" />
      <Type Name="LenientMathObject" Kind="Class" />
      <Type Name="LenientNumberPrototype" Kind="Class" />
      <Type Name="LenientObjectPrototype" Kind="Class" />
      <Type Name="LenientRegExpPrototype" Kind="Class" />
      <Type Name="LenientStringConstructor" Kind="Class" />
      <Type Name="LenientStringPrototype" Kind="Class" />
      <Type Name="LenientVBArrayPrototype" Kind="Class" />
      <Type Name="MathObject" Kind="Class" />
      <Type Name="MemberInfoInitializer" Kind="Interface" />
      <Type Name="MemberInfoList" Kind="Class" />
      <Type Name="MethodInvoker" Kind="Class" />
      <Type Name="Missing" Kind="Class" />
      <Type Name="Namespace" Kind="Class" />
      <Type Name="NoContextException" Kind="Class" />
      <Type Name="NotRecommended" Kind="Class" />
      <Type Name="NumberConstructor" Kind="Class" />
      <Type Name="NumberObject" Kind="Class" />
      <Type Name="NumberPrototype" Kind="Class" />
      <Type Name="NumericBinary" Kind="Class" />
      <Type Name="NumericUnary" Kind="Class" />
      <Type Name="ObjectConstructor" Kind="Class" />
      <Type Name="ObjectPrototype" Kind="Class" />
      <Type Name="Override" Kind="Class" />
      <Type Name="Package" Kind="Class" />
      <Type Name="ParserException" Kind="Class" />
      <Type Name="Plus" Kind="Class" />
      <Type Name="PostOrPrefixOperator" Kind="Class" />
      <Type Name="RangeErrorObject" Kind="Class" />
      <Type Name="ReferenceAttribute" Kind="Class" />
      <Type Name="ReferenceErrorObject" Kind="Class" />
      <Type Name="RegExpConstructor" Kind="Class" />
      <Type Name="RegExpMatch" Kind="Class" />
      <Type Name="RegExpObject" Kind="Class" />
      <Type Name="RegExpPrototype" Kind="Class" />
      <Type Name="Relational" Kind="Class" />
      <Type Name="ReturnOutOfFinally" Kind="Class" />
      <Type Name="Runtime" Kind="Class" />
      <Type Name="ScriptBlock" Kind="Class" />
      <Type Name="ScriptFunction" Kind="Class" />
      <Type Name="ScriptObject" Kind="Class" />
      <Type Name="ScriptStream" Kind="Class" />
      <Type Name="SimpleHashtable" Kind="Class" />
      <Type Name="SourceState" Kind="Enumeration" />
      <Type Name="StackFrame" Kind="Class" />
      <Type Name="StrictEquality" Kind="Class" />
      <Type Name="StringConstructor" Kind="Class" />
      <Type Name="StringObject" Kind="Class" />
      <Type Name="StringPrototype" Kind="Class" />
      <Type Name="SuperTypeMembersSorter" Kind="Class" />
      <Type Name="SyntaxErrorObject" Kind="Class" />
      <Type Name="Throw" Kind="Class" />
      <Type Name="TokenColor" Kind="Enumeration" />
      <Type Name="Try" Kind="Class" />
      <Type Name="TypedArray" Kind="Class" />
      <Type Name="TypeErrorObject" Kind="Class" />
      <Type Name="Typeof" Kind="Class" />
      <Type Name="TypeReflector" Kind="Class" />
      <Type Name="UnaryOp" Kind="Class" />
      <Type Name="URIErrorObject" Kind="Class" />
      <Type Name="VBArrayConstructor" Kind="Class" />
      <Type Name="VBArrayObject" Kind="Class" />
      <Type Name="VBArrayPrototype" Kind="Class" />
      <Type Name="VsaItem" Kind="Class" />
      <Type Name="VsaItems" Kind="Class" />
      <Type Name="VSAITEMTYPE2" Kind="Enumeration" />
      <Type Name="With" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.JScript.Vsa">
      <Type Name="BaseVsaEngine" Kind="Class" />
      <Type Name="BaseVsaEngine+Pre" Kind="Enumeration" />
      <Type Name="BaseVsaSite" Kind="Class" />
      <Type Name="BaseVsaStartup" Kind="Class" />
      <Type Name="IJSVsaCodeItem" Kind="Interface" />
      <Type Name="IJSVsaEngine" Kind="Interface" />
      <Type Name="IJSVsaError" Kind="Interface" />
      <Type Name="IJSVsaGlobalItem" Kind="Interface" />
      <Type Name="IJSVsaItem" Kind="Interface" />
      <Type Name="IJSVsaItems" Kind="Interface" />
      <Type Name="IJSVsaPersistSite" Kind="Interface" />
      <Type Name="IJSVsaReferenceItem" Kind="Interface" />
      <Type Name="IJSVsaSite" Kind="Interface" />
      <Type Name="JSVsaError" Kind="Enumeration" />
      <Type Name="JSVsaException" Kind="Class" />
      <Type Name="JSVsaItemFlag" Kind="Enumeration" />
      <Type Name="JSVsaItemType" Kind="Enumeration" />
      <Type Name="ResInfo" Kind="Class" />
      <Type Name="VsaEngine" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.SqlServer.Server">
      <Type Name="DataAccessKind" Kind="Enumeration" />
      <Type Name="Format" Kind="Enumeration" />
      <Type Name="IBinarySerialize" Kind="Interface" />
      <Type Name="InvalidUdtException" Kind="Class" />
      <Type Name="SqlContext" Kind="Class" />
      <Type Name="SqlDataRecord" Kind="Class" />
      <Type Name="SqlFacetAttribute" Kind="Class" />
      <Type Name="SqlFunctionAttribute" Kind="Class" />
      <Type Name="SqlMetaData" Kind="Class" />
      <Type Name="SqlMethodAttribute" Kind="Class" />
      <Type Name="SqlPipe" Kind="Class" />
      <Type Name="SqlProcedureAttribute" Kind="Class" />
      <Type Name="SqlTriggerAttribute" Kind="Class" />
      <Type Name="SqlTriggerContext" Kind="Class" />
      <Type Name="SqlUserDefinedAggregateAttribute" Kind="Class" />
      <Type Name="SqlUserDefinedTypeAttribute" Kind="Class" />
      <Type Name="SystemDataAccessKind" Kind="Enumeration" />
      <Type Name="TriggerAction" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic">
      <Type Name="AppWinStyle" Kind="Enumeration" />
      <Type Name="AudioPlayMode" Kind="Enumeration" />
      <Type Name="CallType" Kind="Enumeration" />
      <Type Name="Collection" Kind="Class" />
      <Type Name="ComClassAttribute" Kind="Class" />
      <Type Name="CompareMethod" Kind="Enumeration" />
      <Type Name="Constants" Kind="Class" />
      <Type Name="ControlChars" Kind="Class" />
      <Type Name="Conversion" Kind="Class" />
      <Type Name="DateAndTime" Kind="Class" />
      <Type Name="DateFormat" Kind="Enumeration" />
      <Type Name="DateInterval" Kind="Enumeration" />
      <Type Name="DueDate" Kind="Enumeration" />
      <Type Name="ErrObject" Kind="Class" />
      <Type Name="FileAttribute" Kind="Enumeration" />
      <Type Name="FileSystem" Kind="Class" />
      <Type Name="Financial" Kind="Class" />
      <Type Name="FirstDayOfWeek" Kind="Enumeration" />
      <Type Name="FirstWeekOfYear" Kind="Enumeration" />
      <Type Name="Globals" Kind="Class" />
      <Type Name="HideModuleNameAttribute" Kind="Class" />
      <Type Name="Information" Kind="Class" />
      <Type Name="Interaction" Kind="Class" />
      <Type Name="MsgBoxResult" Kind="Enumeration" />
      <Type Name="MsgBoxStyle" Kind="Enumeration" />
      <Type Name="MyGroupCollectionAttribute" Kind="Class" />
      <Type Name="OpenAccess" Kind="Enumeration" />
      <Type Name="OpenMode" Kind="Enumeration" />
      <Type Name="OpenShare" Kind="Enumeration" />
      <Type Name="SpcInfo" Kind="Structure" />
      <Type Name="Strings" Kind="Class" />
      <Type Name="TabInfo" Kind="Structure" />
      <Type Name="TriState" Kind="Enumeration" />
      <Type Name="VariantType" Kind="Enumeration" />
      <Type Name="VBFixedArrayAttribute" Kind="Class" />
      <Type Name="VBFixedStringAttribute" Kind="Class" />
      <Type Name="VBMath" Kind="Class" />
      <Type Name="VbStrConv" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic.Activities">
      <Type Name="VisualBasic" Kind="Class" />
      <Type Name="VisualBasicDesignerHelper" Kind="Class" />
      <Type Name="VisualBasicImportReference" Kind="Class" />
      <Type Name="VisualBasicReference`1" DisplayName="VisualBasicReference&lt;TResult&gt;" Kind="Class" />
      <Type Name="VisualBasicSettings" Kind="Class" />
      <Type Name="VisualBasicValue`1" DisplayName="VisualBasicValue&lt;TResult&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic.Activities.XamlIntegration">
      <Type Name="VisualBasicSettingsConverter" Kind="Class" />
      <Type Name="VisualBasicSettingsValueSerializer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic.ApplicationServices">
      <Type Name="ApplicationBase" Kind="Class" />
      <Type Name="AssemblyInfo" Kind="Class" />
      <Type Name="AuthenticationMode" Kind="Enumeration" />
      <Type Name="BuiltInRole" Kind="Enumeration" />
      <Type Name="BuiltInRoleConverter" Kind="Class" />
      <Type Name="CantStartSingleInstanceException" Kind="Class" />
      <Type Name="ConsoleApplicationBase" Kind="Class" />
      <Type Name="NoStartupFormException" Kind="Class" />
      <Type Name="ShutdownEventHandler" Kind="Delegate" />
      <Type Name="ShutdownMode" Kind="Enumeration" />
      <Type Name="StartupEventArgs" Kind="Class" />
      <Type Name="StartupEventHandler" Kind="Delegate" />
      <Type Name="StartupNextInstanceEventArgs" Kind="Class" />
      <Type Name="StartupNextInstanceEventHandler" Kind="Delegate" />
      <Type Name="UnhandledExceptionEventArgs" Kind="Class" />
      <Type Name="UnhandledExceptionEventHandler" Kind="Delegate" />
      <Type Name="User" Kind="Class" />
      <Type Name="WebUser" Kind="Class" />
      <Type Name="WindowsFormsApplicationBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic.Compatibility.VB6">
      <Type Name="ADODC" Kind="Class" />
      <Type Name="ADODC+BOFActionEnum" Kind="Enumeration" />
      <Type Name="ADODC+EndOfRecordsetDelegate" Kind="Delegate" />
      <Type Name="ADODC+EOFActionEnum" Kind="Enumeration" />
      <Type Name="ADODC+ErrorDelegate" Kind="Delegate" />
      <Type Name="ADODC+FetchCompleteDelegate" Kind="Delegate" />
      <Type Name="ADODC+FetchProgressDelegate" Kind="Delegate" />
      <Type Name="ADODC+FieldChangeCompleteDelegate" Kind="Delegate" />
      <Type Name="ADODC+MoveCompleteDelegate" Kind="Delegate" />
      <Type Name="ADODC+OrientationEnum" Kind="Enumeration" />
      <Type Name="ADODC+RecordChangeCompleteDelegate" Kind="Delegate" />
      <Type Name="ADODC+RecordsetChangeCompleteDelegate" Kind="Delegate" />
      <Type Name="ADODC+WillChangeFieldDelegate" Kind="Delegate" />
      <Type Name="ADODC+WillChangeRecordDelegate" Kind="Delegate" />
      <Type Name="ADODC+WillChangeRecordsetDelegate" Kind="Delegate" />
      <Type Name="ADODC+WillMoveDelegate" Kind="Delegate" />
      <Type Name="ADODCArray" Kind="Class" />
      <Type Name="BaseControlArray" Kind="Class" />
      <Type Name="BaseDataEnvironment" Kind="Class" />
      <Type Name="BaseOcxArray" Kind="Class" />
      <Type Name="BindingCollectionEnumerator" Kind="Class" />
      <Type Name="ButtonArray" Kind="Class" />
      <Type Name="CheckBoxArray" Kind="Class" />
      <Type Name="CheckedListBoxArray" Kind="Class" />
      <Type Name="ColorDialogArray" Kind="Class" />
      <Type Name="ComboBoxArray" Kind="Class" />
      <Type Name="CONNECTDATA" Kind="Structure" />
      <Type Name="DBBINDING" Kind="Structure" />
      <Type Name="DBCOLUMNINFO" Kind="Structure" />
      <Type Name="DBID" Kind="Structure" />
      <Type Name="DBinding" Kind="Interface" />
      <Type Name="DBindingCollection" Kind="Interface" />
      <Type Name="DBKINDENUM" Kind="Enumeration" />
      <Type Name="DBPROPIDSET" Kind="Structure" />
      <Type Name="DirListBox" Kind="Class" />
      <Type Name="DirListBoxArray" Kind="Class" />
      <Type Name="DriveListBox" Kind="Class" />
      <Type Name="DriveListBoxArray" Kind="Class" />
      <Type Name="FileListBox" Kind="Class" />
      <Type Name="FileListBoxArray" Kind="Class" />
      <Type Name="FixedLengthString" Kind="Class" />
      <Type Name="FontDialogArray" Kind="Class" />
      <Type Name="FormShowConstants" Kind="Enumeration" />
      <Type Name="GroupBoxArray" Kind="Class" />
      <Type Name="HScrollBarArray" Kind="Class" />
      <Type Name="IAccessor" Kind="Interface" />
      <Type Name="IChapteredRowset" Kind="Interface" />
      <Type Name="IColumnsInfo" Kind="Interface" />
      <Type Name="IConnectionPoint" Kind="Interface" />
      <Type Name="IConnectionPointContainer" Kind="Interface" />
      <Type Name="IDataFormat" Kind="Interface" />
      <Type Name="IDataFormatDisp" Kind="Interface" />
      <Type Name="IEnumConnectionPoints" Kind="Interface" />
      <Type Name="IEnumConnections" Kind="Interface" />
      <Type Name="ImageListArray" Kind="Class" />
      <Type Name="IRowPosition" Kind="Interface" />
      <Type Name="IRowPositionChange" Kind="Interface" />
      <Type Name="IRowset" Kind="Interface" />
      <Type Name="IRowsetChange" Kind="Interface" />
      <Type Name="IRowsetIdentity" Kind="Interface" />
      <Type Name="IRowsetInfo" Kind="Interface" />
      <Type Name="IRowsetNotify" Kind="Interface" />
      <Type Name="LabelArray" Kind="Class" />
      <Type Name="ListBoxArray" Kind="Class" />
      <Type Name="ListBoxItem" Kind="Class" />
      <Type Name="ListViewArray" Kind="Class" />
      <Type Name="LoadResConstants" Kind="Enumeration" />
      <Type Name="MaskedTextBoxArray" Kind="Class" />
      <Type Name="MBinding" Kind="Class" />
      <Type Name="MBindingCollection" Kind="Class" />
      <Type Name="MenuItemArray" Kind="Class" />
      <Type Name="MouseButtonConstants" Kind="Enumeration" />
      <Type Name="OpenFileDialogArray" Kind="Class" />
      <Type Name="PanelArray" Kind="Class" />
      <Type Name="PictureBoxArray" Kind="Class" />
      <Type Name="PrintDialogArray" Kind="Class" />
      <Type Name="ProgressBarArray" Kind="Class" />
      <Type Name="RadioButtonArray" Kind="Class" />
      <Type Name="RichTextBoxArray" Kind="Class" />
      <Type Name="SaveFileDialogArray" Kind="Class" />
      <Type Name="ScaleMode" Kind="Enumeration" />
      <Type Name="ShiftConstants" Kind="Enumeration" />
      <Type Name="SRDescriptionAttribute" Kind="Class" />
      <Type Name="StatusBarArray" Kind="Class" />
      <Type Name="StatusStripArray" Kind="Class" />
      <Type Name="Support" Kind="Class" />
      <Type Name="TabControlArray" Kind="Class" />
      <Type Name="TextBoxArray" Kind="Class" />
      <Type Name="TimerArray" Kind="Class" />
      <Type Name="ToolBarArray" Kind="Class" />
      <Type Name="ToolStripArray" Kind="Class" />
      <Type Name="ToolStripMenuItemArray" Kind="Class" />
      <Type Name="TreeViewArray" Kind="Class" />
      <Type Name="UGUID" Kind="Structure" />
      <Type Name="UNAME" Kind="Structure" />
      <Type Name="UpdateMode" Kind="Enumeration" />
      <Type Name="VScrollBarArray" Kind="Class" />
      <Type Name="WebBrowserArray" Kind="Class" />
      <Type Name="WebClass" Kind="Class" />
      <Type Name="WebClassContainingClassNotOptional" Kind="Class" />
      <Type Name="WebClassCouldNotFindEvent" Kind="Class" />
      <Type Name="WebClassNextItemCannotBeCurrentWebItem" Kind="Class" />
      <Type Name="WebClassNextItemRespondNotFound" Kind="Class" />
      <Type Name="WebClassUserWebClassNameNotOptional" Kind="Class" />
      <Type Name="WebClassWebClassFileNameNotOptional" Kind="Class" />
      <Type Name="WebClassWebItemNotValid" Kind="Class" />
      <Type Name="WebItem" Kind="Class" />
      <Type Name="WebItemAssociatedWebClassNotOptional" Kind="Class" />
      <Type Name="WebItemClosingTagNotFound" Kind="Class" />
      <Type Name="WebItemCouldNotLoadEmbeddedResource" Kind="Class" />
      <Type Name="WebItemCouldNotLoadTemplateFile" Kind="Class" />
      <Type Name="WebItemNameNotOptional" Kind="Class" />
      <Type Name="WebItemNoTemplateSpecified" Kind="Class" />
      <Type Name="WebItemTooManyNestedTags" Kind="Class" />
      <Type Name="WebItemUnexpectedErrorReadingTemplateFile" Kind="Class" />
      <Type Name="ZOrderConstants" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic.CompilerServices">
      <Type Name="BooleanType" Kind="Class" />
      <Type Name="ByteType" Kind="Class" />
      <Type Name="CharArrayType" Kind="Class" />
      <Type Name="CharType" Kind="Class" />
      <Type Name="Conversions" Kind="Class" />
      <Type Name="DateType" Kind="Class" />
      <Type Name="DecimalType" Kind="Class" />
      <Type Name="DesignerGeneratedAttribute" Kind="Class" />
      <Type Name="DoubleType" Kind="Class" />
      <Type Name="ExceptionUtils" Kind="Class" />
      <Type Name="FlowControl" Kind="Class" />
      <Type Name="HostServices" Kind="Class" />
      <Type Name="IncompleteInitialization" Kind="Class" />
      <Type Name="IntegerType" Kind="Class" />
      <Type Name="InternalErrorException" Kind="Class" />
      <Type Name="InternalXmlHelper" Kind="Class" />
      <Type Name="IVbHost" Kind="Interface" />
      <Type Name="LateBinding" Kind="Class" />
      <Type Name="LikeOperator" Kind="Class" />
      <Type Name="LongType" Kind="Class" />
      <Type Name="NewLateBinding" Kind="Class" />
      <Type Name="ObjectFlowControl" Kind="Class" />
      <Type Name="ObjectFlowControl+ForLoopControl" Kind="Class" />
      <Type Name="ObjectType" Kind="Class" />
      <Type Name="Operators" Kind="Class" />
      <Type Name="OptionCompareAttribute" Kind="Class" />
      <Type Name="OptionTextAttribute" Kind="Class" />
      <Type Name="ProjectData" Kind="Class" />
      <Type Name="ShortType" Kind="Class" />
      <Type Name="SingleType" Kind="Class" />
      <Type Name="StandardModuleAttribute" Kind="Class" />
      <Type Name="StaticLocalInitFlag" Kind="Class" />
      <Type Name="StringType" Kind="Class" />
      <Type Name="Utils" Kind="Class" />
      <Type Name="Versioned" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic.Devices">
      <Type Name="Audio" Kind="Class" />
      <Type Name="Clock" Kind="Class" />
      <Type Name="Computer" Kind="Class" />
      <Type Name="ComputerInfo" Kind="Class" />
      <Type Name="Keyboard" Kind="Class" />
      <Type Name="Mouse" Kind="Class" />
      <Type Name="Network" Kind="Class" />
      <Type Name="NetworkAvailableEventArgs" Kind="Class" />
      <Type Name="NetworkAvailableEventHandler" Kind="Delegate" />
      <Type Name="Ports" Kind="Class" />
      <Type Name="ServerComputer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic.FileIO">
      <Type Name="DeleteDirectoryOption" Kind="Enumeration" />
      <Type Name="FieldType" Kind="Enumeration" />
      <Type Name="FileSystem" Kind="Class" />
      <Type Name="MalformedLineException" Kind="Class" />
      <Type Name="RecycleOption" Kind="Enumeration" />
      <Type Name="SearchOption" Kind="Enumeration" />
      <Type Name="SpecialDirectories" Kind="Class" />
      <Type Name="TextFieldParser" Kind="Class" />
      <Type Name="UICancelOption" Kind="Enumeration" />
      <Type Name="UIOption" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic.Logging">
      <Type Name="AspLog" Kind="Class" />
      <Type Name="DiskSpaceExhaustedOption" Kind="Enumeration" />
      <Type Name="FileLogTraceListener" Kind="Class" />
      <Type Name="Log" Kind="Class" />
      <Type Name="LogFileCreationScheduleOption" Kind="Enumeration" />
      <Type Name="LogFileLocation" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic.MyServices">
      <Type Name="ClipboardProxy" Kind="Class" />
      <Type Name="FileSystemProxy" Kind="Class" />
      <Type Name="RegistryProxy" Kind="Class" />
      <Type Name="SpecialDirectoriesProxy" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.VisualBasic.MyServices.Internal">
      <Type Name="ContextValue`1" DisplayName="ContextValue&lt;T&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.VisualC">
      <Type Name="DebugInfoInPDBAttribute" Kind="Class" />
      <Type Name="DecoratedNameAttribute" Kind="Class" />
      <Type Name="IsConstModifier" Kind="Class" />
      <Type Name="IsCXXReferenceModifier" Kind="Class" />
      <Type Name="IsLongModifier" Kind="Class" />
      <Type Name="IsSignedModifier" Kind="Class" />
      <Type Name="IsVolatileModifier" Kind="Class" />
      <Type Name="MiscellaneousBitsAttribute" Kind="Class" />
      <Type Name="NeedsCopyConstructorModifier" Kind="Class" />
      <Type Name="NoSignSpecifiedModifier" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.VisualC.StlClr">
      <Type Name="BinaryDelegate`3" DisplayName="BinaryDelegate&lt;TArg1,TArg2,TResult&gt;" Kind="Delegate" />
      <Type Name="DequeEnumerator`1" DisplayName="DequeEnumerator&lt;TValue&gt;" Kind="Class" />
      <Type Name="DequeEnumeratorBase`1" DisplayName="DequeEnumeratorBase&lt;TValue&gt;" Kind="Class" />
      <Type Name="GenericPair`2" DisplayName="GenericPair&lt;TValue1,TValue2&gt;" Kind="Class" />
      <Type Name="HashEnumerator`2" DisplayName="HashEnumerator&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="HashEnumeratorBase`2" DisplayName="HashEnumeratorBase&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="IDeque`1" DisplayName="IDeque&lt;TValue&gt;" Kind="Interface" />
      <Type Name="IHash`2" DisplayName="IHash&lt;TKey,TValue&gt;" Kind="Interface" />
      <Type Name="IList`1" DisplayName="IList&lt;TValue&gt;" Kind="Interface" />
      <Type Name="IPriorityQueue`2" DisplayName="IPriorityQueue&lt;TValue,TCont&gt;" Kind="Interface" />
      <Type Name="IQueue`2" DisplayName="IQueue&lt;TValue,TCont&gt;" Kind="Interface" />
      <Type Name="IStack`2" DisplayName="IStack&lt;TValue,TCont&gt;" Kind="Interface" />
      <Type Name="ITree`2" DisplayName="ITree&lt;TKey,TValue&gt;" Kind="Interface" />
      <Type Name="IVector`1" DisplayName="IVector&lt;TValue&gt;" Kind="Interface" />
      <Type Name="ListEnumerator`1" DisplayName="ListEnumerator&lt;TValue&gt;" Kind="Class" />
      <Type Name="ListEnumeratorBase`1" DisplayName="ListEnumeratorBase&lt;TValue&gt;" Kind="Class" />
      <Type Name="TreeEnumerator`2" DisplayName="TreeEnumerator&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="TreeEnumeratorBase`2" DisplayName="TreeEnumeratorBase&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="UnaryDelegate`2" DisplayName="UnaryDelegate&lt;TArg,TResult&gt;" Kind="Delegate" />
      <Type Name="VectorEnumerator`1" DisplayName="VectorEnumerator&lt;TValue&gt;" Kind="Class" />
      <Type Name="VectorEnumeratorBase`1" DisplayName="VectorEnumeratorBase&lt;TValue&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.VisualC.StlClr.Generic">
      <Type Name="ConstContainerBidirectionalIterator`1" DisplayName="ConstContainerBidirectionalIterator&lt;TValue&gt;" Kind="Class" />
      <Type Name="ConstContainerRandomAccessIterator`1" DisplayName="ConstContainerRandomAccessIterator&lt;TValue&gt;" Kind="Class" />
      <Type Name="ConstReverseBidirectionalIterator`1" DisplayName="ConstReverseBidirectionalIterator&lt;TValue&gt;" Kind="Class" />
      <Type Name="ConstReverseRandomAccessIterator`1" DisplayName="ConstReverseRandomAccessIterator&lt;TValue&gt;" Kind="Class" />
      <Type Name="ContainerBidirectionalIterator`1" DisplayName="ContainerBidirectionalIterator&lt;TValue&gt;" Kind="Class" />
      <Type Name="ContainerRandomAccessIterator`1" DisplayName="ContainerRandomAccessIterator&lt;TValue&gt;" Kind="Class" />
      <Type Name="IBaseIterator`1" DisplayName="IBaseIterator&lt;TValue&gt;" Kind="Interface" />
      <Type Name="IBidirectionalContainer`1" DisplayName="IBidirectionalContainer&lt;TValue&gt;" Kind="Interface" />
      <Type Name="IBidirectionalIterator`1" DisplayName="IBidirectionalIterator&lt;TValue&gt;" Kind="Interface" />
      <Type Name="IForwardIterator`1" DisplayName="IForwardIterator&lt;TValue&gt;" Kind="Interface" />
      <Type Name="IInputIterator`1" DisplayName="IInputIterator&lt;TValue&gt;" Kind="Interface" />
      <Type Name="INode`1" DisplayName="INode&lt;TValue&gt;" Kind="Interface" />
      <Type Name="IOutputIterator`1" DisplayName="IOutputIterator&lt;TValue&gt;" Kind="Interface" />
      <Type Name="IRandomAccessContainer`1" DisplayName="IRandomAccessContainer&lt;TValue&gt;" Kind="Interface" />
      <Type Name="IRandomAccessIterator`1" DisplayName="IRandomAccessIterator&lt;TValue&gt;" Kind="Interface" />
      <Type Name="ReverseBidirectionalIterator`1" DisplayName="ReverseBidirectionalIterator&lt;TValue&gt;" Kind="Class" />
      <Type Name="ReverseRandomAccessIterator`1" DisplayName="ReverseRandomAccessIterator&lt;TValue&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Win32">
      <Type Name="CommonDialog" Kind="Class" />
      <Type Name="FileDialog" Kind="Class" />
      <Type Name="FileDialogCustomPlace" Kind="Class" />
      <Type Name="FileDialogCustomPlaces" Kind="Class" />
      <Type Name="OpenFileDialog" Kind="Class" />
      <Type Name="Registry" Kind="Class" />
      <Type Name="RegistryHive" Kind="Enumeration" />
      <Type Name="RegistryKey" Kind="Class" />
      <Type Name="RegistryKeyPermissionCheck" Kind="Enumeration" />
      <Type Name="RegistryOptions" Kind="Enumeration" />
      <Type Name="RegistryValueKind" Kind="Enumeration" />
      <Type Name="RegistryValueOptions" Kind="Enumeration" />
      <Type Name="RegistryView" Kind="Enumeration" />
      <Type Name="SaveFileDialog" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Win32.SafeHandles">
      <Type Name="CriticalHandleMinusOneIsInvalid" Kind="Class" />
      <Type Name="CriticalHandleZeroOrMinusOneIsInvalid" Kind="Class" />
      <Type Name="SafeAccessTokenHandle" Kind="Class" />
      <Type Name="SafeFileHandle" Kind="Class" />
      <Type Name="SafeHandleMinusOneIsInvalid" Kind="Class" />
      <Type Name="SafeHandleZeroOrMinusOneIsInvalid" Kind="Class" />
      <Type Name="SafeMemoryMappedFileHandle" Kind="Class" />
      <Type Name="SafeMemoryMappedViewHandle" Kind="Class" />
      <Type Name="SafeNCryptHandle" Kind="Class" />
      <Type Name="SafeNCryptKeyHandle" Kind="Class" />
      <Type Name="SafeNCryptProviderHandle" Kind="Class" />
      <Type Name="SafeNCryptSecretHandle" Kind="Class" />
      <Type Name="SafePipeHandle" Kind="Class" />
      <Type Name="SafeRegistryHandle" Kind="Class" />
      <Type Name="SafeWaitHandle" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Windows.Themes">
      <Type Name="BulletChrome" Kind="Class" />
      <Type Name="ButtonChrome" Kind="Class" />
      <Type Name="ClassicBorderDecorator" Kind="Class" />
      <Type Name="ClassicBorderStyle" Kind="Enumeration" />
      <Type Name="DataGridHeaderBorder" Kind="Class" />
      <Type Name="ListBoxChrome" Kind="Class" />
      <Type Name="PlatformCulture" Kind="Class" />
      <Type Name="ProgressBarBrushConverter" Kind="Class" />
      <Type Name="ProgressBarHighlightConverter" Kind="Class" />
      <Type Name="ScrollChrome" Kind="Class" />
      <Type Name="ScrollGlyph" Kind="Enumeration" />
      <Type Name="SystemDropShadowChrome" Kind="Class" />
      <Type Name="ThemeColor" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System">
      <Type Name="_AppDomain" Kind="Interface" />
      <Type Name="AccessViolationException" Kind="Class" />
      <Type Name="Action`1" DisplayName="Action&lt;T&gt;" Kind="Delegate" />
      <Type Name="Action`10" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;" Kind="Delegate" />
      <Type Name="Action`11" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;" Kind="Delegate" />
      <Type Name="Action`12" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;" Kind="Delegate" />
      <Type Name="Action`13" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;" Kind="Delegate" />
      <Type Name="Action`14" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;" Kind="Delegate" />
      <Type Name="Action`15" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;" Kind="Delegate" />
      <Type Name="Action`16" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;" Kind="Delegate" />
      <Type Name="Action`5" DisplayName="Action&lt;T1,T2,T3,T4,T5&gt;" Kind="Delegate" />
      <Type Name="Action`6" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6&gt;" Kind="Delegate" />
      <Type Name="Action`7" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6,T7&gt;" Kind="Delegate" />
      <Type Name="Action`8" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;" Kind="Delegate" />
      <Type Name="Action`9" DisplayName="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;" Kind="Delegate" />
      <Type Name="ActivationContext" Kind="Class" />
      <Type Name="ActivationContext+ContextForm" Kind="Enumeration" />
      <Type Name="Activator" Kind="Class" />
      <Type Name="AggregateException" Kind="Class" />
      <Type Name="AppContext" Kind="Class" />
      <Type Name="AppDomain" Kind="Class" />
      <Type Name="AppDomainInitializer" Kind="Delegate" />
      <Type Name="AppDomainManager" Kind="Class" />
      <Type Name="AppDomainManagerInitializationOptions" Kind="Enumeration" />
      <Type Name="AppDomainSetup" Kind="Class" />
      <Type Name="AppDomainUnloadedException" Kind="Class" />
      <Type Name="ApplicationException" Kind="Class" />
      <Type Name="ApplicationId" Kind="Class" />
      <Type Name="ApplicationIdentity" Kind="Class" />
      <Type Name="ArgIterator" Kind="Structure" />
      <Type Name="ArgumentException" Kind="Class" />
      <Type Name="ArgumentNullException" Kind="Class" />
      <Type Name="ArgumentOutOfRangeException" Kind="Class" />
      <Type Name="ArithmeticException" Kind="Class" />
      <Type Name="Array" Kind="Class" />
      <Type Name="ArraySegment`1" DisplayName="ArraySegment&lt;T&gt;" Kind="Structure" />
      <Type Name="ArrayTypeMismatchException" Kind="Class" />
      <Type Name="AssemblyLoadEventArgs" Kind="Class" />
      <Type Name="AssemblyLoadEventHandler" Kind="Delegate" />
      <Type Name="AsyncCallback" Kind="Delegate" />
      <Type Name="Attribute" Kind="Class" />
      <Type Name="AttributeTargets" Kind="Enumeration" />
      <Type Name="AttributeUsageAttribute" Kind="Class" />
      <Type Name="BadImageFormatException" Kind="Class" />
      <Type Name="Base64FormattingOptions" Kind="Enumeration" />
      <Type Name="BitConverter" Kind="Class" />
      <Type Name="Boolean" Kind="Structure" />
      <Type Name="Buffer" Kind="Class" />
      <Type Name="Byte" Kind="Structure" />
      <Type Name="CannotUnloadAppDomainException" Kind="Class" />
      <Type Name="Char" Kind="Structure" />
      <Type Name="CharEnumerator" Kind="Class" />
      <Type Name="CLSCompliantAttribute" Kind="Class" />
      <Type Name="Comparison`1" DisplayName="Comparison&lt;T&gt;" Kind="Delegate" />
      <Type Name="Console" Kind="Class" />
      <Type Name="ConsoleCancelEventArgs" Kind="Class" />
      <Type Name="ConsoleCancelEventHandler" Kind="Delegate" />
      <Type Name="ConsoleColor" Kind="Enumeration" />
      <Type Name="ConsoleKey" Kind="Enumeration" />
      <Type Name="ConsoleKeyInfo" Kind="Structure" />
      <Type Name="ConsoleModifiers" Kind="Enumeration" />
      <Type Name="ConsoleSpecialKey" Kind="Enumeration" />
      <Type Name="ContextBoundObject" Kind="Class" />
      <Type Name="ContextMarshalException" Kind="Class" />
      <Type Name="ContextStaticAttribute" Kind="Class" />
      <Type Name="Convert" Kind="Class" />
      <Type Name="Converter`2" DisplayName="Converter&lt;TInput,TOutput&gt;" Kind="Delegate" />
      <Type Name="CrossAppDomainDelegate" Kind="Delegate" />
      <Type Name="DataMisalignedException" Kind="Class" />
      <Type Name="DateTime" Kind="Structure" />
      <Type Name="DateTimeKind" Kind="Enumeration" />
      <Type Name="DateTimeOffset" Kind="Structure" />
      <Type Name="DayOfWeek" Kind="Enumeration" />
      <Type Name="DBNull" Kind="Class" />
      <Type Name="Decimal" Kind="Structure" />
      <Type Name="Delegate" Kind="Class" />
      <Type Name="DivideByZeroException" Kind="Class" />
      <Type Name="DllNotFoundException" Kind="Class" />
      <Type Name="Double" Kind="Structure" />
      <Type Name="DuplicateWaitObjectException" Kind="Class" />
      <Type Name="EntryPointNotFoundException" Kind="Class" />
      <Type Name="Enum" Kind="Class" />
      <Type Name="Environment" Kind="Class" />
      <Type Name="Environment+SpecialFolder" Kind="Enumeration" />
      <Type Name="Environment+SpecialFolderOption" Kind="Enumeration" />
      <Type Name="EnvironmentVariableTarget" Kind="Enumeration" />
      <Type Name="EventArgs" Kind="Class" />
      <Type Name="EventHandler" Kind="Delegate" />
      <Type Name="EventHandler`1" DisplayName="EventHandler&lt;TEventArgs&gt;" Kind="Delegate" />
      <Type Name="Exception" Kind="Class" />
      <Type Name="ExecutionEngineException" Kind="Class" />
      <Type Name="FieldAccessException" Kind="Class" />
      <Type Name="FlagsAttribute" Kind="Class" />
      <Type Name="FormatException" Kind="Class" />
      <Type Name="FormattableString" Kind="Class" />
      <Type Name="Func`10" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`11" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`12" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`13" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`14" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`15" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`16" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`17" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`6" DisplayName="Func&lt;T1,T2,T3,T4,T5,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`7" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`8" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,T7,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`9" DisplayName="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;" Kind="Delegate" />
      <Type Name="GC" Kind="Class" />
      <Type Name="GCCollectionMode" Kind="Enumeration" />
      <Type Name="GCNotificationStatus" Kind="Enumeration" />
      <Type Name="Guid" Kind="Structure" />
      <Type Name="IAppDomainSetup" Kind="Interface" />
      <Type Name="IAsyncResult" Kind="Interface" />
      <Type Name="ICloneable" Kind="Interface" />
      <Type Name="IComparable" Kind="Interface" />
      <Type Name="IComparable`1" DisplayName="IComparable&lt;T&gt;" Kind="Interface" />
      <Type Name="IConvertible" Kind="Interface" />
      <Type Name="ICustomFormatter" Kind="Interface" />
      <Type Name="IDisposable" Kind="Interface" />
      <Type Name="IEquatable`1" DisplayName="IEquatable&lt;T&gt;" Kind="Interface" />
      <Type Name="IFormatProvider" Kind="Interface" />
      <Type Name="IFormattable" Kind="Interface" />
      <Type Name="IndexOutOfRangeException" Kind="Class" />
      <Type Name="InsufficientExecutionStackException" Kind="Class" />
      <Type Name="InsufficientMemoryException" Kind="Class" />
      <Type Name="Int16" Kind="Structure" />
      <Type Name="Int32" Kind="Structure" />
      <Type Name="Int64" Kind="Structure" />
      <Type Name="IntPtr" Kind="Structure" />
      <Type Name="InvalidCastException" Kind="Class" />
      <Type Name="InvalidOperationException" Kind="Class" />
      <Type Name="InvalidProgramException" Kind="Class" />
      <Type Name="IObservable`1" DisplayName="IObservable&lt;T&gt;" Kind="Interface" />
      <Type Name="IObserver`1" DisplayName="IObserver&lt;T&gt;" Kind="Interface" />
      <Type Name="IProgress`1" DisplayName="IProgress&lt;T&gt;" Kind="Interface" />
      <Type Name="IServiceProvider" Kind="Interface" />
      <Type Name="Lazy`2" DisplayName="Lazy&lt;T,TMetadata&gt;" Kind="Class" />
      <Type Name="LoaderOptimization" Kind="Enumeration" />
      <Type Name="LoaderOptimizationAttribute" Kind="Class" />
      <Type Name="LocalDataStoreSlot" Kind="Class" />
      <Type Name="MarshalByRefObject" Kind="Class" />
      <Type Name="Math" Kind="Class" />
      <Type Name="MemberAccessException" Kind="Class" />
      <Type Name="MethodAccessException" Kind="Class" />
      <Type Name="MidpointRounding" Kind="Enumeration" />
      <Type Name="MissingFieldException" Kind="Class" />
      <Type Name="MissingMemberException" Kind="Class" />
      <Type Name="MissingMethodException" Kind="Class" />
      <Type Name="ModuleHandle" Kind="Structure" />
      <Type Name="MTAThreadAttribute" Kind="Class" />
      <Type Name="MulticastDelegate" Kind="Class" />
      <Type Name="MulticastNotSupportedException" Kind="Class" />
      <Type Name="NonSerializedAttribute" Kind="Class" />
      <Type Name="NotFiniteNumberException" Kind="Class" />
      <Type Name="NotImplementedException" Kind="Class" />
      <Type Name="NotSupportedException" Kind="Class" />
      <Type Name="Nullable" Kind="Class" />
      <Type Name="Nullable`1" DisplayName="Nullable&lt;T&gt;" Kind="Structure" />
      <Type Name="NullReferenceException" Kind="Class" />
      <Type Name="Object" Kind="Class" />
      <Type Name="ObjectDisposedException" Kind="Class" />
      <Type Name="ObsoleteAttribute" Kind="Class" />
      <Type Name="OperatingSystem" Kind="Class" />
      <Type Name="OperationCanceledException" Kind="Class" />
      <Type Name="OutOfMemoryException" Kind="Class" />
      <Type Name="OverflowException" Kind="Class" />
      <Type Name="ParamArrayAttribute" Kind="Class" />
      <Type Name="PlatformID" Kind="Enumeration" />
      <Type Name="PlatformNotSupportedException" Kind="Class" />
      <Type Name="Predicate`1" DisplayName="Predicate&lt;T&gt;" Kind="Delegate" />
      <Type Name="Progress`1" DisplayName="Progress&lt;T&gt;" Kind="Class" />
      <Type Name="Random" Kind="Class" />
      <Type Name="RankException" Kind="Class" />
      <Type Name="ResolveEventArgs" Kind="Class" />
      <Type Name="ResolveEventHandler" Kind="Delegate" />
      <Type Name="RuntimeArgumentHandle" Kind="Structure" />
      <Type Name="RuntimeFieldHandle" Kind="Structure" />
      <Type Name="RuntimeMethodHandle" Kind="Structure" />
      <Type Name="RuntimeTypeHandle" Kind="Structure" />
      <Type Name="SByte" Kind="Structure" />
      <Type Name="SerializableAttribute" Kind="Class" />
      <Type Name="Single" Kind="Structure" />
      <Type Name="StackOverflowException" Kind="Class" />
      <Type Name="STAThreadAttribute" Kind="Class" />
      <Type Name="String" Kind="Class" />
      <Type Name="StringComparer" Kind="Class" />
      <Type Name="StringComparison" Kind="Enumeration" />
      <Type Name="StringSplitOptions" Kind="Enumeration" />
      <Type Name="SystemException" Kind="Class" />
      <Type Name="ThreadStaticAttribute" Kind="Class" />
      <Type Name="TimeoutException" Kind="Class" />
      <Type Name="TimeSpan" Kind="Structure" />
      <Type Name="TimeZone" Kind="Class" />
      <Type Name="TimeZoneInfo+AdjustmentRule" Kind="Class" />
      <Type Name="TimeZoneInfo+TransitionTime" Kind="Structure" />
      <Type Name="Tuple" Kind="Class" />
      <Type Name="Tuple`1" DisplayName="Tuple&lt;T1&gt;" Kind="Class" />
      <Type Name="Tuple`2" DisplayName="Tuple&lt;T1,T2&gt;" Kind="Class" />
      <Type Name="Tuple`3" DisplayName="Tuple&lt;T1,T2,T3&gt;" Kind="Class" />
      <Type Name="Tuple`4" DisplayName="Tuple&lt;T1,T2,T3,T4&gt;" Kind="Class" />
      <Type Name="Tuple`5" DisplayName="Tuple&lt;T1,T2,T3,T4,T5&gt;" Kind="Class" />
      <Type Name="Tuple`6" DisplayName="Tuple&lt;T1,T2,T3,T4,T5,T6&gt;" Kind="Class" />
      <Type Name="Tuple`7" DisplayName="Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;" Kind="Class" />
      <Type Name="Tuple`8" DisplayName="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" Kind="Class" />
      <Type Name="TupleExtensions" Kind="Class" />
      <Type Name="Type" Kind="Class" />
      <Type Name="TypeAccessException" Kind="Class" />
      <Type Name="TypeCode" Kind="Enumeration" />
      <Type Name="TypedReference" Kind="Structure" />
      <Type Name="TypeInitializationException" Kind="Class" />
      <Type Name="TypeLoadException" Kind="Class" />
      <Type Name="TypeUnloadedException" Kind="Class" />
      <Type Name="UInt16" Kind="Structure" />
      <Type Name="UInt32" Kind="Structure" />
      <Type Name="UInt64" Kind="Structure" />
      <Type Name="UIntPtr" Kind="Structure" />
      <Type Name="UnauthorizedAccessException" Kind="Class" />
      <Type Name="UnhandledExceptionEventArgs" Kind="Class" />
      <Type Name="UnhandledExceptionEventHandler" Kind="Delegate" />
      <Type Name="ValueTuple" Kind="Structure" />
      <Type Name="ValueTuple`1" DisplayName="ValueTuple&lt;T1&gt;" Kind="Structure" />
      <Type Name="ValueTuple`2" DisplayName="ValueTuple&lt;T1,T2&gt;" Kind="Structure" />
      <Type Name="ValueTuple`3" DisplayName="ValueTuple&lt;T1,T2,T3&gt;" Kind="Structure" />
      <Type Name="ValueTuple`4" DisplayName="ValueTuple&lt;T1,T2,T3,T4&gt;" Kind="Structure" />
      <Type Name="ValueTuple`5" DisplayName="ValueTuple&lt;T1,T2,T3,T4,T5&gt;" Kind="Structure" />
      <Type Name="ValueTuple`6" DisplayName="ValueTuple&lt;T1,T2,T3,T4,T5,T6&gt;" Kind="Structure" />
      <Type Name="ValueTuple`7" DisplayName="ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;" Kind="Structure" />
      <Type Name="ValueTuple`8" DisplayName="ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" Kind="Structure" />
      <Type Name="ValueType" Kind="Class" />
      <Type Name="Version" Kind="Class" />
      <Type Name="Void" Kind="Structure" />
      <Type Name="WeakReference" Kind="Class" />
      <Type Name="WeakReference`1" DisplayName="WeakReference&lt;T&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities">
      <Type Name="Activity" Kind="Class" />
      <Type Name="Activity`1" DisplayName="Activity&lt;TResult&gt;" Kind="Class" />
      <Type Name="ActivityAction" Kind="Class" />
      <Type Name="ActivityAction`1" DisplayName="ActivityAction&lt;T&gt;" Kind="Class" />
      <Type Name="ActivityAction`10" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;" Kind="Class" />
      <Type Name="ActivityAction`11" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;" Kind="Class" />
      <Type Name="ActivityAction`12" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;" Kind="Class" />
      <Type Name="ActivityAction`13" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;" Kind="Class" />
      <Type Name="ActivityAction`14" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;" Kind="Class" />
      <Type Name="ActivityAction`15" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;" Kind="Class" />
      <Type Name="ActivityAction`16" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;" Kind="Class" />
      <Type Name="ActivityAction`2" DisplayName="ActivityAction&lt;T1,T2&gt;" Kind="Class" />
      <Type Name="ActivityAction`3" DisplayName="ActivityAction&lt;T1,T2,T3&gt;" Kind="Class" />
      <Type Name="ActivityAction`4" DisplayName="ActivityAction&lt;T1,T2,T3,T4&gt;" Kind="Class" />
      <Type Name="ActivityAction`5" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5&gt;" Kind="Class" />
      <Type Name="ActivityAction`6" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6&gt;" Kind="Class" />
      <Type Name="ActivityAction`7" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6,T7&gt;" Kind="Class" />
      <Type Name="ActivityAction`8" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;" Kind="Class" />
      <Type Name="ActivityAction`9" DisplayName="ActivityAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;" Kind="Class" />
      <Type Name="ActivityBuilder" Kind="Class" />
      <Type Name="ActivityBuilder`1" DisplayName="ActivityBuilder&lt;TResult&gt;" Kind="Class" />
      <Type Name="ActivityContext" Kind="Class" />
      <Type Name="ActivityDelegate" Kind="Class" />
      <Type Name="ActivityFunc`1" DisplayName="ActivityFunc&lt;TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`10" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`11" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`12" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`13" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`14" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`15" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`16" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`17" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`2" DisplayName="ActivityFunc&lt;T,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`3" DisplayName="ActivityFunc&lt;T1,T2,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`4" DisplayName="ActivityFunc&lt;T1,T2,T3,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`5" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`6" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`7" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`8" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,T7,TResult&gt;" Kind="Class" />
      <Type Name="ActivityFunc`9" DisplayName="ActivityFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;" Kind="Class" />
      <Type Name="ActivityInstance" Kind="Class" />
      <Type Name="ActivityInstanceState" Kind="Enumeration" />
      <Type Name="ActivityMetadata" Kind="Structure" />
      <Type Name="ActivityPropertyReference" Kind="Class" />
      <Type Name="ActivityWithResult" Kind="Class" />
      <Type Name="Argument" Kind="Class" />
      <Type Name="ArgumentDirection" Kind="Enumeration" />
      <Type Name="AsyncCodeActivity" Kind="Class" />
      <Type Name="AsyncCodeActivity`1" DisplayName="AsyncCodeActivity&lt;TResult&gt;" Kind="Class" />
      <Type Name="AsyncCodeActivityContext" Kind="Class" />
      <Type Name="Bookmark" Kind="Class" />
      <Type Name="BookmarkCallback" Kind="Delegate" />
      <Type Name="BookmarkOptions" Kind="Enumeration" />
      <Type Name="BookmarkResumptionResult" Kind="Enumeration" />
      <Type Name="BookmarkScope" Kind="Class" />
      <Type Name="BookmarkScopeHandle" Kind="Class" />
      <Type Name="CodeActivity" Kind="Class" />
      <Type Name="CodeActivity`1" DisplayName="CodeActivity&lt;TResult&gt;" Kind="Class" />
      <Type Name="CodeActivityContext" Kind="Class" />
      <Type Name="CodeActivityMetadata" Kind="Structure" />
      <Type Name="CodeActivityPublicEnvironmentAccessor" Kind="Structure" />
      <Type Name="CompletionCallback" Kind="Delegate" />
      <Type Name="CompletionCallback`1" DisplayName="CompletionCallback&lt;TResult&gt;" Kind="Delegate" />
      <Type Name="DelegateArgument" Kind="Class" />
      <Type Name="DelegateCompletionCallback" Kind="Delegate" />
      <Type Name="DelegateInArgument" Kind="Class" />
      <Type Name="DelegateInArgument`1" DisplayName="DelegateInArgument&lt;T&gt;" Kind="Class" />
      <Type Name="DelegateOutArgument" Kind="Class" />
      <Type Name="DelegateOutArgument`1" DisplayName="DelegateOutArgument&lt;T&gt;" Kind="Class" />
      <Type Name="DynamicActivity" Kind="Class" />
      <Type Name="DynamicActivity`1" DisplayName="DynamicActivity&lt;TResult&gt;" Kind="Class" />
      <Type Name="DynamicActivityProperty" Kind="Class" />
      <Type Name="ExceptionPersistenceExtension" Kind="Class" />
      <Type Name="ExclusiveHandle" Kind="Class" />
      <Type Name="ExecutionProperties" Kind="Class" />
      <Type Name="FaultCallback" Kind="Delegate" />
      <Type Name="Handle" Kind="Class" />
      <Type Name="HandleInitializationContext" Kind="Class" />
      <Type Name="IExecutionProperty" Kind="Interface" />
      <Type Name="InArgument" Kind="Class" />
      <Type Name="InArgument`1" DisplayName="InArgument&lt;T&gt;" Kind="Class" />
      <Type Name="InOutArgument" Kind="Class" />
      <Type Name="InOutArgument`1" DisplayName="InOutArgument&lt;T&gt;" Kind="Class" />
      <Type Name="InvalidWorkflowException" Kind="Class" />
      <Type Name="InvokeCompletedEventArgs" Kind="Class" />
      <Type Name="IPropertyRegistrationCallback" Kind="Interface" />
      <Type Name="Location" Kind="Class" />
      <Type Name="Location`1" DisplayName="Location&lt;T&gt;" Kind="Class" />
      <Type Name="LocationReference" Kind="Class" />
      <Type Name="LocationReferenceEnvironment" Kind="Class" />
      <Type Name="NativeActivity" Kind="Class" />
      <Type Name="NativeActivity`1" DisplayName="NativeActivity&lt;TResult&gt;" Kind="Class" />
      <Type Name="NativeActivityAbortContext" Kind="Class" />
      <Type Name="NativeActivityContext" Kind="Class" />
      <Type Name="NativeActivityFaultContext" Kind="Class" />
      <Type Name="NativeActivityMetadata" Kind="Structure" />
      <Type Name="NativeActivityTransactionContext" Kind="Class" />
      <Type Name="NoPersistHandle" Kind="Class" />
      <Type Name="OutArgument" Kind="Class" />
      <Type Name="OutArgument`1" DisplayName="OutArgument&lt;T&gt;" Kind="Class" />
      <Type Name="OverloadGroupAttribute" Kind="Class" />
      <Type Name="PersistableIdleAction" Kind="Enumeration" />
      <Type Name="RegistrationContext" Kind="Class" />
      <Type Name="RequiredArgumentAttribute" Kind="Class" />
      <Type Name="RuntimeArgument" Kind="Class" />
      <Type Name="RuntimeDelegateArgument" Kind="Class" />
      <Type Name="RuntimeTransactionHandle" Kind="Class" />
      <Type Name="UnhandledExceptionAction" Kind="Enumeration" />
      <Type Name="ValidationException" Kind="Class" />
      <Type Name="Variable" Kind="Class" />
      <Type Name="Variable`1" DisplayName="Variable&lt;T&gt;" Kind="Class" />
      <Type Name="VariableModifiers" Kind="Enumeration" />
      <Type Name="VersionMismatchException" Kind="Class" />
      <Type Name="WorkflowApplication" Kind="Class" />
      <Type Name="WorkflowApplicationAbortedEventArgs" Kind="Class" />
      <Type Name="WorkflowApplicationAbortedException" Kind="Class" />
      <Type Name="WorkflowApplicationCompletedEventArgs" Kind="Class" />
      <Type Name="WorkflowApplicationCompletedException" Kind="Class" />
      <Type Name="WorkflowApplicationEventArgs" Kind="Class" />
      <Type Name="WorkflowApplicationException" Kind="Class" />
      <Type Name="WorkflowApplicationIdleEventArgs" Kind="Class" />
      <Type Name="WorkflowApplicationInstance" Kind="Class" />
      <Type Name="WorkflowApplicationTerminatedException" Kind="Class" />
      <Type Name="WorkflowApplicationUnhandledExceptionEventArgs" Kind="Class" />
      <Type Name="WorkflowApplicationUnloadedException" Kind="Class" />
      <Type Name="WorkflowDataContext" Kind="Class" />
      <Type Name="WorkflowIdentity" Kind="Class" />
      <Type Name="WorkflowIdentityFilter" Kind="Enumeration" />
      <Type Name="WorkflowInspectionServices" Kind="Class" />
      <Type Name="WorkflowInvoker" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Core.Presentation">
      <Type Name="ConnectionPointType" Kind="Enumeration" />
      <Type Name="DesignerMetadata" Kind="Class" />
      <Type Name="FinalState" Kind="Class" />
      <Type Name="FlowchartDesignerCommands" Kind="Class" />
      <Type Name="GenericTypeArgumentConverter" Kind="Class" />
      <Type Name="LocationChangedEventArgs" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Core.Presentation.Factories">
      <Type Name="ForEachWithBodyFactory`1" DisplayName="ForEachWithBodyFactory&lt;T&gt;" Kind="Class" />
      <Type Name="ParallelForEachWithBodyFactory`1" DisplayName="ParallelForEachWithBodyFactory&lt;T&gt;" Kind="Class" />
      <Type Name="PickWithTwoBranchesFactory" Kind="Class" />
      <Type Name="StateMachineWithInitialStateFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Core.Presentation.Themes">
      <Type Name="DesignerStylesDictionary" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Debugger">
      <Type Name="DebugInfo" Kind="Class" />
      <Type Name="IDebuggableWorkflowTree" Kind="Interface" />
      <Type Name="LocalsItemDescription" Kind="Class" />
      <Type Name="SourceLocation" Kind="Class" />
      <Type Name="SourceLocationFoundEventArgs" Kind="Class" />
      <Type Name="SourceLocationProvider" Kind="Class" />
      <Type Name="State" Kind="Class" />
      <Type Name="StateManager" Kind="Class" />
      <Type Name="ThreadWorkerController" Kind="Class" />
      <Type Name="VirtualStackFrame" Kind="Class" />
      <Type Name="XamlDebuggerXmlReader" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Debugger.Symbol">
      <Type Name="ActivitySymbol" Kind="Class" />
      <Type Name="DebugSymbol" Kind="Class" />
      <Type Name="WorkflowSymbol" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.DurableInstancing">
      <Type Name="ActivatableWorkflowsQueryResult" Kind="Class" />
      <Type Name="CreateWorkflowOwnerCommand" Kind="Class" />
      <Type Name="CreateWorkflowOwnerWithIdentityCommand" Kind="Class" />
      <Type Name="DeleteWorkflowOwnerCommand" Kind="Class" />
      <Type Name="HasActivatableWorkflowEvent" Kind="Class" />
      <Type Name="HasRunnableWorkflowEvent" Kind="Class" />
      <Type Name="InstanceCompletionAction" Kind="Enumeration" />
      <Type Name="InstanceEncodingOption" Kind="Enumeration" />
      <Type Name="InstanceLockedExceptionAction" Kind="Enumeration" />
      <Type Name="LoadWorkflowByInstanceKeyCommand" Kind="Class" />
      <Type Name="LoadWorkflowCommand" Kind="Class" />
      <Type Name="QueryActivatableWorkflowsCommand" Kind="Class" />
      <Type Name="SaveWorkflowCommand" Kind="Class" />
      <Type Name="SqlWorkflowInstanceStore" Kind="Class" />
      <Type Name="TryLoadRunnableWorkflowCommand" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.DynamicUpdate">
      <Type Name="ActivityBlockingUpdate" Kind="Class" />
      <Type Name="DynamicUpdateInfo" Kind="Class" />
      <Type Name="DynamicUpdateMap" Kind="Class" />
      <Type Name="DynamicUpdateMapBuilder" Kind="Class" />
      <Type Name="DynamicUpdateMapItem" Kind="Class" />
      <Type Name="DynamicUpdateMapQuery" Kind="Class" />
      <Type Name="DynamicUpdateServices" Kind="Class" />
      <Type Name="InstanceUpdateException" Kind="Class" />
      <Type Name="NativeActivityUpdateContext" Kind="Class" />
      <Type Name="NativeActivityUpdateMapMetadata" Kind="Class" />
      <Type Name="UpdateMapMetadata" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.ExpressionParser">
      <Type Name="SourceExpressionException" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Expressions">
      <Type Name="Add`3" DisplayName="Add&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="And`3" DisplayName="And&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="AndAlso" Kind="Class" />
      <Type Name="ArgumentReference`1" DisplayName="ArgumentReference&lt;T&gt;" Kind="Class" />
      <Type Name="ArgumentValue`1" DisplayName="ArgumentValue&lt;T&gt;" Kind="Class" />
      <Type Name="ArrayItemReference`1" DisplayName="ArrayItemReference&lt;TItem&gt;" Kind="Class" />
      <Type Name="ArrayItemValue`1" DisplayName="ArrayItemValue&lt;TItem&gt;" Kind="Class" />
      <Type Name="As`2" DisplayName="As&lt;TOperand,TResult&gt;" Kind="Class" />
      <Type Name="AssemblyReference" Kind="Class" />
      <Type Name="Cast`2" DisplayName="Cast&lt;TOperand,TResult&gt;" Kind="Class" />
      <Type Name="CompiledExpressionInvoker" Kind="Class" />
      <Type Name="DelegateArgumentReference`1" DisplayName="DelegateArgumentReference&lt;T&gt;" Kind="Class" />
      <Type Name="DelegateArgumentValue`1" DisplayName="DelegateArgumentValue&lt;T&gt;" Kind="Class" />
      <Type Name="Divide`3" DisplayName="Divide&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="EnvironmentLocationReference`1" DisplayName="EnvironmentLocationReference&lt;T&gt;" Kind="Class" />
      <Type Name="EnvironmentLocationValue`1" DisplayName="EnvironmentLocationValue&lt;T&gt;" Kind="Class" />
      <Type Name="Equal`3" DisplayName="Equal&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="ExpressionServices" Kind="Class" />
      <Type Name="FieldReference`2" DisplayName="FieldReference&lt;TOperand,TResult&gt;" Kind="Class" />
      <Type Name="FieldValue`2" DisplayName="FieldValue&lt;TOperand,TResult&gt;" Kind="Class" />
      <Type Name="GreaterThan`3" DisplayName="GreaterThan&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="GreaterThanOrEqual`3" DisplayName="GreaterThanOrEqual&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="IndexerReference`2" DisplayName="IndexerReference&lt;TOperand,TItem&gt;" Kind="Class" />
      <Type Name="InvokeFunc`1" DisplayName="InvokeFunc&lt;TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`10" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`11" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`12" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`13" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`14" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`15" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`16" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`17" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`2" DisplayName="InvokeFunc&lt;T,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`3" DisplayName="InvokeFunc&lt;T1,T2,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`4" DisplayName="InvokeFunc&lt;T1,T2,T3,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`5" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`6" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`7" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`8" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,T7,TResult&gt;" Kind="Class" />
      <Type Name="InvokeFunc`9" DisplayName="InvokeFunc&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;" Kind="Class" />
      <Type Name="InvokeMethod`1" DisplayName="InvokeMethod&lt;TResult&gt;" Kind="Class" />
      <Type Name="ITextExpression" Kind="Interface" />
      <Type Name="LambdaReference`1" DisplayName="LambdaReference&lt;T&gt;" Kind="Class" />
      <Type Name="LambdaSerializationException" Kind="Class" />
      <Type Name="LambdaValue`1" DisplayName="LambdaValue&lt;TResult&gt;" Kind="Class" />
      <Type Name="LessThan`3" DisplayName="LessThan&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="LessThanOrEqual`3" DisplayName="LessThanOrEqual&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="Literal`1" DisplayName="Literal&lt;T&gt;" Kind="Class" />
      <Type Name="MultidimensionalArrayItemReference`1" DisplayName="MultidimensionalArrayItemReference&lt;TItem&gt;" Kind="Class" />
      <Type Name="Multiply`3" DisplayName="Multiply&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="New`1" DisplayName="New&lt;TResult&gt;" Kind="Class" />
      <Type Name="NewArray`1" DisplayName="NewArray&lt;TResult&gt;" Kind="Class" />
      <Type Name="Not`2" DisplayName="Not&lt;TOperand,TResult&gt;" Kind="Class" />
      <Type Name="NotEqual`3" DisplayName="NotEqual&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="Or`3" DisplayName="Or&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="OrElse" Kind="Class" />
      <Type Name="PropertyReference`2" DisplayName="PropertyReference&lt;TOperand,TResult&gt;" Kind="Class" />
      <Type Name="PropertyValue`2" DisplayName="PropertyValue&lt;TOperand,TResult&gt;" Kind="Class" />
      <Type Name="Subtract`3" DisplayName="Subtract&lt;TLeft,TRight,TResult&gt;" Kind="Class" />
      <Type Name="TextExpression" Kind="Class" />
      <Type Name="ValueTypeFieldReference`2" DisplayName="ValueTypeFieldReference&lt;TOperand,TResult&gt;" Kind="Class" />
      <Type Name="ValueTypeIndexerReference`2" DisplayName="ValueTypeIndexerReference&lt;TOperand,TItem&gt;" Kind="Class" />
      <Type Name="ValueTypePropertyReference`2" DisplayName="ValueTypePropertyReference&lt;TOperand,TResult&gt;" Kind="Class" />
      <Type Name="VariableReference`1" DisplayName="VariableReference&lt;T&gt;" Kind="Class" />
      <Type Name="VariableValue`1" DisplayName="VariableValue&lt;T&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Hosting">
      <Type Name="BookmarkInfo" Kind="Class" />
      <Type Name="BookmarkScopeInfo" Kind="Class" />
      <Type Name="IWorkflowInstanceExtension" Kind="Interface" />
      <Type Name="LocationInfo" Kind="Class" />
      <Type Name="SymbolResolver" Kind="Class" />
      <Type Name="WorkflowInstance" Kind="Class" />
      <Type Name="WorkflowInstance+WorkflowInstanceControl" Kind="Structure" />
      <Type Name="WorkflowInstanceExtensionManager" Kind="Class" />
      <Type Name="WorkflowInstanceProxy" Kind="Class" />
      <Type Name="WorkflowInstanceState" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Activities.Persistence">
      <Type Name="PersistenceIOParticipant" Kind="Class" />
      <Type Name="PersistenceParticipant" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation">
      <Type Name="ActivityDesigner" Kind="Class" />
      <Type Name="ActivityDesignerOptionsAttribute" Kind="Class" />
      <Type Name="ArgumentAccessor" Kind="Class" />
      <Type Name="CachedResourceDictionaryExtension" Kind="Class" />
      <Type Name="ClipboardData" Kind="Class" />
      <Type Name="ContextItem" Kind="Class" />
      <Type Name="ContextItemManager" Kind="Class" />
      <Type Name="CutCopyPasteHelper" Kind="Class" />
      <Type Name="DefaultTypeArgumentAttribute" Kind="Class" />
      <Type Name="DesignerConfigurationService" Kind="Class" />
      <Type Name="DragDropHelper" Kind="Class" />
      <Type Name="DynamicArgumentDesignerOptions" Kind="Class" />
      <Type Name="DynamicArgumentDialog" Kind="Class" />
      <Type Name="EditingContext" Kind="Class" />
      <Type Name="IActivityTemplateFactory" Kind="Interface" />
      <Type Name="IActivityTemplateFactory`1" DisplayName="IActivityTemplateFactory&lt;T&gt;" Kind="Interface" />
      <Type Name="IActivityToolboxService" Kind="Interface" />
      <Type Name="ICompositeView" Kind="Interface" />
      <Type Name="ICompositeViewEvents" Kind="Interface" />
      <Type Name="IIntegratedHelpService" Kind="Interface" />
      <Type Name="IModalService" Kind="Interface" />
      <Type Name="IMultipleDragEnabledCompositeView" Kind="Interface" />
      <Type Name="IWorkflowDesignerStorageService" Kind="Interface" />
      <Type Name="IXamlLoadErrorService" Kind="Interface" />
      <Type Name="ObjectReferenceService" Kind="Class" />
      <Type Name="PublishServiceCallback" Kind="Delegate" />
      <Type Name="PublishServiceCallback`1" DisplayName="PublishServiceCallback&lt;TServiceType&gt;" Kind="Delegate" />
      <Type Name="ServiceManager" Kind="Class" />
      <Type Name="SourceLocationUpdatedEventArgs" Kind="Class" />
      <Type Name="SubscribeContextCallback" Kind="Delegate" />
      <Type Name="SubscribeContextCallback`1" DisplayName="SubscribeContextCallback&lt;TContextItemType&gt;" Kind="Delegate" />
      <Type Name="SubscribeServiceCallback" Kind="Delegate" />
      <Type Name="SubscribeServiceCallback`1" DisplayName="SubscribeServiceCallback&lt;TServiceType&gt;" Kind="Delegate" />
      <Type Name="TypeResolvingOptionsAttribute" Kind="Class" />
      <Type Name="UndoEngine" Kind="Class" />
      <Type Name="UndoUnit" Kind="Class" />
      <Type Name="UndoUnitEventArgs" Kind="Class" />
      <Type Name="WorkflowDesigner" Kind="Class" />
      <Type Name="WorkflowDesignerColors" Kind="Class" />
      <Type Name="WorkflowDesignerIcons" Kind="Class" />
      <Type Name="WorkflowDesignerIcons+Activities" Kind="Class" />
      <Type Name="WorkflowDesignerIcons+ContextMenuItems" Kind="Class" />
      <Type Name="WorkflowDesignerIcons+DesignerItems" Kind="Class" />
      <Type Name="WorkflowElementDialog" Kind="Class" />
      <Type Name="WorkflowFileItem" Kind="Class" />
      <Type Name="WorkflowItemPresenter" Kind="Class" />
      <Type Name="WorkflowItemsPresenter" Kind="Class" />
      <Type Name="WorkflowViewElement" Kind="Class" />
      <Type Name="XamlLoadErrorInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Annotations">
      <Type Name="Annotation" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Converters">
      <Type Name="ArgumentToExpressionConverter" Kind="Class" />
      <Type Name="ArgumentToExpressionModelItemConverter" Kind="Class" />
      <Type Name="ModelPropertyEntryToModelItemConverter" Kind="Class" />
      <Type Name="ModelPropertyEntryToOwnerActivityConverter" Kind="Class" />
      <Type Name="ModelToObjectValueConverter" Kind="Class" />
      <Type Name="ObjectToModelValueConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Debug">
      <Type Name="BreakpointTypes" Kind="Enumeration" />
      <Type Name="DebuggerService" Kind="Class" />
      <Type Name="IDesignerDebugView" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Expressions">
      <Type Name="CreateExpressionFromStringCallback" Kind="Delegate" />
      <Type Name="ExpressionActivityEditor" Kind="Class" />
      <Type Name="ExpressionMorphHelper" Kind="Class" />
      <Type Name="ExpressionMorphHelperAttribute" Kind="Class" />
      <Type Name="TextualExpressionEditor" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Hosting">
      <Type Name="AssemblyContextControlItem" Kind="Class" />
      <Type Name="CommandInfo" Kind="Class" />
      <Type Name="CommandValues" Kind="Class" />
      <Type Name="ICommandService" Kind="Interface" />
      <Type Name="IDocumentPersistenceService" Kind="Interface" />
      <Type Name="ImportedNamespaceContextItem" Kind="Class" />
      <Type Name="IMultiTargetingSupportService" Kind="Interface" />
      <Type Name="IWorkflowCommandExtensionCallback" Kind="Interface" />
      <Type Name="MultiTargetingSupportService" Kind="Class" />
      <Type Name="ReadOnlyState" Kind="Class" />
      <Type Name="WindowHelperService" Kind="Class" />
      <Type Name="WindowMessage" Kind="Delegate" />
      <Type Name="WorkflowCommandExtensionItem" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Metadata">
      <Type Name="ActivityArgumentHelper" Kind="Class" />
      <Type Name="AttributeCallback" Kind="Delegate" />
      <Type Name="AttributeCallbackBuilder" Kind="Class" />
      <Type Name="AttributeTable" Kind="Class" />
      <Type Name="AttributeTableBuilder" Kind="Class" />
      <Type Name="AttributeTableValidationException" Kind="Class" />
      <Type Name="IRegisterMetadata" Kind="Interface" />
      <Type Name="MetadataStore" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Model">
      <Type Name="AttachedPropertiesService" Kind="Class" />
      <Type Name="AttachedProperty" Kind="Class" />
      <Type Name="AttachedProperty`1" DisplayName="AttachedProperty&lt;T&gt;" Kind="Class" />
      <Type Name="AttachedPropertyInfo" Kind="Class" />
      <Type Name="AttachedPropertyInfo`1" DisplayName="AttachedPropertyInfo&lt;T&gt;" Kind="Class" />
      <Type Name="Change" Kind="Class" />
      <Type Name="CreateOptions" Kind="Enumeration" />
      <Type Name="EditingScope" Kind="Class" />
      <Type Name="EditingScopeEventArgs" Kind="Class" />
      <Type Name="ModelEditingScope" Kind="Class" />
      <Type Name="ModelFactory" Kind="Class" />
      <Type Name="ModelItem" Kind="Class" />
      <Type Name="ModelItemCollection" Kind="Class" />
      <Type Name="ModelItemDictionary" Kind="Class" />
      <Type Name="ModelItemExtensions" Kind="Class" />
      <Type Name="ModelMemberCollection`2" DisplayName="ModelMemberCollection&lt;TItemType,TFindType&gt;" Kind="Class" />
      <Type Name="ModelProperty" Kind="Class" />
      <Type Name="ModelPropertyCollection" Kind="Class" />
      <Type Name="ModelTreeManager" Kind="Class" />
      <Type Name="MorphHelper" Kind="Class" />
      <Type Name="PropertyValueMorphHelper" Kind="Delegate" />
      <Type Name="TextImage" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.PropertyEditing">
      <Type Name="CategoryEditor" Kind="Class" />
      <Type Name="CategoryEntry" Kind="Class" />
      <Type Name="DependencyPropertyValueSource" Kind="Class" />
      <Type Name="DialogPropertyValueEditor" Kind="Class" />
      <Type Name="EditModeSwitchButton" Kind="Class" />
      <Type Name="EditorOptionAttribute" Kind="Class" />
      <Type Name="EditorReuseAttribute" Kind="Class" />
      <Type Name="ExtendedPropertyValueEditor" Kind="Class" />
      <Type Name="IPropertyFilterTarget" Kind="Interface" />
      <Type Name="PropertyContainerEditMode" Kind="Enumeration" />
      <Type Name="PropertyEntry" Kind="Class" />
      <Type Name="PropertyEntryCollection" Kind="Class" />
      <Type Name="PropertyFilter" Kind="Class" />
      <Type Name="PropertyFilterAppliedEventArgs" Kind="Class" />
      <Type Name="PropertyFilterPredicate" Kind="Class" />
      <Type Name="PropertyValue" Kind="Class" />
      <Type Name="PropertyValueCollection" Kind="Class" />
      <Type Name="PropertyValueEditor" Kind="Class" />
      <Type Name="PropertyValueEditorCommands" Kind="Class" />
      <Type Name="PropertyValueExceptionEventArgs" Kind="Class" />
      <Type Name="PropertyValueExceptionSource" Kind="Enumeration" />
      <Type Name="PropertyValueSource" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Services">
      <Type Name="ModelChangedEventArgs" Kind="Class" />
      <Type Name="ModelChangeInfo" Kind="Class" />
      <Type Name="ModelChangeType" Kind="Enumeration" />
      <Type Name="ModelSearchService" Kind="Class" />
      <Type Name="ModelService" Kind="Class" />
      <Type Name="ViewService" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Sqm">
      <Type Name="IVSSqmService" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Toolbox">
      <Type Name="ActivityTemplateFactory" Kind="Class" />
      <Type Name="ActivityTemplateFactory`1" DisplayName="ActivityTemplateFactory&lt;T&gt;" Kind="Class" />
      <Type Name="ActivityTemplateFactoryBuilder" Kind="Class" />
      <Type Name="ToolboxCategory" Kind="Class" />
      <Type Name="ToolboxCategoryItems" Kind="Class" />
      <Type Name="ToolboxControl" Kind="Class" />
      <Type Name="ToolboxItemWrapper" Kind="Class" />
      <Type Name="ToolCreatedEventArgs" Kind="Class" />
      <Type Name="ToolCreatedEventHandler" Kind="Delegate" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.Validation">
      <Type Name="IValidationErrorService" Kind="Interface" />
      <Type Name="ValidationErrorInfo" Kind="Class" />
      <Type Name="ValidationService" Kind="Class" />
      <Type Name="ValidationState" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.View">
      <Type Name="CommandMenuMode" Kind="Class" />
      <Type Name="DesignerView" Kind="Class" />
      <Type Name="EditingState" Kind="Enumeration" />
      <Type Name="ExpressionTextBox" Kind="Class" />
      <Type Name="IExpressionEditorInstance" Kind="Interface" />
      <Type Name="IExpressionEditorService" Kind="Interface" />
      <Type Name="PropertyKind" Kind="Enumeration" />
      <Type Name="Selection" Kind="Class" />
      <Type Name="ShellBarItemVisibility" Kind="Enumeration" />
      <Type Name="ShellHeaderItemsVisibility" Kind="Enumeration" />
      <Type Name="TypePresenter" Kind="Class" />
      <Type Name="TypeResolvingOptions" Kind="Class" />
      <Type Name="TypeWrapper" Kind="Class" />
      <Type Name="ViewCreatedEventArgs" Kind="Class" />
      <Type Name="ViewStateChangedEventArgs" Kind="Class" />
      <Type Name="ViewStateChangedEventHandler" Kind="Delegate" />
      <Type Name="ViewStateService" Kind="Class" />
      <Type Name="VirtualizedContainerService" Kind="Class" />
      <Type Name="WorkflowViewService" Kind="Class" />
      <Type Name="WorkflowViewStateService" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.View.OutlineView">
      <Type Name="HidePropertyInOutlineViewAttribute" Kind="Class" />
      <Type Name="ShowInOutlineViewAttribute" Kind="Class" />
      <Type Name="ShowPropertyInOutlineViewAsSiblingAttribute" Kind="Class" />
      <Type Name="ShowPropertyInOutlineViewAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Presentation.ViewState">
      <Type Name="ViewStateData" Kind="Class" />
      <Type Name="ViewStateManager" Kind="Class" />
      <Type Name="WorkflowViewState" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Statements">
      <Type Name="AddToCollection`1" DisplayName="AddToCollection&lt;T&gt;" Kind="Class" />
      <Type Name="Assign" Kind="Class" />
      <Type Name="Assign`1" DisplayName="Assign&lt;T&gt;" Kind="Class" />
      <Type Name="CancellationScope" Kind="Class" />
      <Type Name="Catch" Kind="Class" />
      <Type Name="Catch`1" DisplayName="Catch&lt;TException&gt;" Kind="Class" />
      <Type Name="ClearCollection`1" DisplayName="ClearCollection&lt;T&gt;" Kind="Class" />
      <Type Name="CompensableActivity" Kind="Class" />
      <Type Name="Compensate" Kind="Class" />
      <Type Name="CompensationExtension" Kind="Class" />
      <Type Name="CompensationToken" Kind="Class" />
      <Type Name="Confirm" Kind="Class" />
      <Type Name="CreateBookmarkScope" Kind="Class" />
      <Type Name="Delay" Kind="Class" />
      <Type Name="DeleteBookmarkScope" Kind="Class" />
      <Type Name="DoWhile" Kind="Class" />
      <Type Name="DurableTimerExtension" Kind="Class" />
      <Type Name="ExistsInCollection`1" DisplayName="ExistsInCollection&lt;T&gt;" Kind="Class" />
      <Type Name="Flowchart" Kind="Class" />
      <Type Name="FlowDecision" Kind="Class" />
      <Type Name="FlowNode" Kind="Class" />
      <Type Name="FlowStep" Kind="Class" />
      <Type Name="FlowSwitch`1" DisplayName="FlowSwitch&lt;T&gt;" Kind="Class" />
      <Type Name="ForEach`1" DisplayName="ForEach&lt;T&gt;" Kind="Class" />
      <Type Name="HandleScope`1" DisplayName="HandleScope&lt;THandle&gt;" Kind="Class" />
      <Type Name="If" Kind="Class" />
      <Type Name="InvokeAction" Kind="Class" />
      <Type Name="InvokeAction`1" DisplayName="InvokeAction&lt;T&gt;" Kind="Class" />
      <Type Name="InvokeAction`10" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;" Kind="Class" />
      <Type Name="InvokeAction`11" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;" Kind="Class" />
      <Type Name="InvokeAction`12" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;" Kind="Class" />
      <Type Name="InvokeAction`13" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;" Kind="Class" />
      <Type Name="InvokeAction`14" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;" Kind="Class" />
      <Type Name="InvokeAction`15" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;" Kind="Class" />
      <Type Name="InvokeAction`16" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;" Kind="Class" />
      <Type Name="InvokeAction`2" DisplayName="InvokeAction&lt;T1,T2&gt;" Kind="Class" />
      <Type Name="InvokeAction`3" DisplayName="InvokeAction&lt;T1,T2,T3&gt;" Kind="Class" />
      <Type Name="InvokeAction`4" DisplayName="InvokeAction&lt;T1,T2,T3,T4&gt;" Kind="Class" />
      <Type Name="InvokeAction`5" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5&gt;" Kind="Class" />
      <Type Name="InvokeAction`6" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6&gt;" Kind="Class" />
      <Type Name="InvokeAction`7" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6,T7&gt;" Kind="Class" />
      <Type Name="InvokeAction`8" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;" Kind="Class" />
      <Type Name="InvokeAction`9" DisplayName="InvokeAction&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;" Kind="Class" />
      <Type Name="InvokeDelegate" Kind="Class" />
      <Type Name="InvokeMethod" Kind="Class" />
      <Type Name="NoPersistScope" Kind="Class" />
      <Type Name="Parallel" Kind="Class" />
      <Type Name="ParallelForEach`1" DisplayName="ParallelForEach&lt;T&gt;" Kind="Class" />
      <Type Name="Persist" Kind="Class" />
      <Type Name="Pick" Kind="Class" />
      <Type Name="PickBranch" Kind="Class" />
      <Type Name="RemoveFromCollection`1" DisplayName="RemoveFromCollection&lt;T&gt;" Kind="Class" />
      <Type Name="Rethrow" Kind="Class" />
      <Type Name="Sequence" Kind="Class" />
      <Type Name="State" Kind="Class" />
      <Type Name="StateMachine" Kind="Class" />
      <Type Name="Switch`1" DisplayName="Switch&lt;T&gt;" Kind="Class" />
      <Type Name="TerminateWorkflow" Kind="Class" />
      <Type Name="Throw" Kind="Class" />
      <Type Name="TimerExtension" Kind="Class" />
      <Type Name="TransactionScope" Kind="Class" />
      <Type Name="Transition" Kind="Class" />
      <Type Name="TryCatch" Kind="Class" />
      <Type Name="While" Kind="Class" />
      <Type Name="WorkflowTerminatedException" Kind="Class" />
      <Type Name="WriteLine" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Statements.Tracking">
      <Type Name="StateMachineStateQuery" Kind="Class" />
      <Type Name="StateMachineStateRecord" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Tracking">
      <Type Name="ActivityInfo" Kind="Class" />
      <Type Name="ActivityScheduledQuery" Kind="Class" />
      <Type Name="ActivityScheduledRecord" Kind="Class" />
      <Type Name="ActivityStateQuery" Kind="Class" />
      <Type Name="ActivityStateRecord" Kind="Class" />
      <Type Name="ActivityStates" Kind="Class" />
      <Type Name="BookmarkResumptionQuery" Kind="Class" />
      <Type Name="BookmarkResumptionRecord" Kind="Class" />
      <Type Name="CancelRequestedQuery" Kind="Class" />
      <Type Name="CancelRequestedRecord" Kind="Class" />
      <Type Name="CustomTrackingQuery" Kind="Class" />
      <Type Name="CustomTrackingRecord" Kind="Class" />
      <Type Name="EtwTrackingParticipant" Kind="Class" />
      <Type Name="FaultPropagationQuery" Kind="Class" />
      <Type Name="FaultPropagationRecord" Kind="Class" />
      <Type Name="ImplementationVisibility" Kind="Enumeration" />
      <Type Name="TrackingParticipant" Kind="Class" />
      <Type Name="TrackingProfile" Kind="Class" />
      <Type Name="TrackingQuery" Kind="Class" />
      <Type Name="TrackingRecord" Kind="Class" />
      <Type Name="WorkflowInstanceAbortedRecord" Kind="Class" />
      <Type Name="WorkflowInstanceQuery" Kind="Class" />
      <Type Name="WorkflowInstanceRecord" Kind="Class" />
      <Type Name="WorkflowInstanceStates" Kind="Class" />
      <Type Name="WorkflowInstanceSuspendedRecord" Kind="Class" />
      <Type Name="WorkflowInstanceTerminatedRecord" Kind="Class" />
      <Type Name="WorkflowInstanceUnhandledExceptionRecord" Kind="Class" />
      <Type Name="WorkflowInstanceUpdatedRecord" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.Validation">
      <Type Name="ActivityValidationServices" Kind="Class" />
      <Type Name="AddValidationError" Kind="Class" />
      <Type Name="AssertValidation" Kind="Class" />
      <Type Name="Constraint" Kind="Class" />
      <Type Name="Constraint`1" DisplayName="Constraint&lt;T&gt;" Kind="Class" />
      <Type Name="GetChildSubtree" Kind="Class" />
      <Type Name="GetParentChain" Kind="Class" />
      <Type Name="GetWorkflowTree" Kind="Class" />
      <Type Name="ValidationContext" Kind="Class" />
      <Type Name="ValidationError" Kind="Class" />
      <Type Name="ValidationResults" Kind="Class" />
      <Type Name="ValidationSettings" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Activities.XamlIntegration">
      <Type Name="ActivityWithResultConverter" Kind="Class" />
      <Type Name="ActivityWithResultValueSerializer" Kind="Class" />
      <Type Name="ActivityXamlServices" Kind="Class" />
      <Type Name="ActivityXamlServicesSettings" Kind="Class" />
      <Type Name="ArgumentValueSerializer" Kind="Class" />
      <Type Name="AssemblyReferenceConverter" Kind="Class" />
      <Type Name="CompiledDataContext" Kind="Class" />
      <Type Name="DynamicUpdateMapConverter" Kind="Class" />
      <Type Name="DynamicUpdateMapExtension" Kind="Class" />
      <Type Name="DynamicUpdateMapItemConverter" Kind="Class" />
      <Type Name="FuncDeferringLoader" Kind="Class" />
      <Type Name="ICompiledExpressionRoot" Kind="Interface" />
      <Type Name="ImplementationVersionConverter" Kind="Class" />
      <Type Name="InArgumentConverter" Kind="Class" />
      <Type Name="InOutArgumentConverter" Kind="Class" />
      <Type Name="IValueSerializableExpression" Kind="Interface" />
      <Type Name="OutArgumentConverter" Kind="Class" />
      <Type Name="PropertyReferenceExtension`1" DisplayName="PropertyReferenceExtension&lt;T&gt;" Kind="Class" />
      <Type Name="SerializableFuncDeferringLoader" Kind="Class" />
      <Type Name="TextExpressionCompiler" Kind="Class" />
      <Type Name="TextExpressionCompilerError" Kind="Class" />
      <Type Name="TextExpressionCompilerResults" Kind="Class" />
      <Type Name="TextExpressionCompilerSettings" Kind="Class" />
      <Type Name="TypeConverterBase" Kind="Class" />
      <Type Name="WorkflowIdentityConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.AddIn">
      <Type Name="AddInAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.AddIn.Contract">
      <Type Name="IContract" Kind="Interface" />
      <Type Name="IEnumeratorContract`1" DisplayName="IEnumeratorContract&lt;T&gt;" Kind="Interface" />
      <Type Name="IExecutorExtensionContract" Kind="Interface" />
      <Type Name="IListContract`1" DisplayName="IListContract&lt;T&gt;" Kind="Interface" />
      <Type Name="INativeHandleContract" Kind="Interface" />
      <Type Name="IProfferServiceContract" Kind="Interface" />
      <Type Name="ISerializableObjectContract" Kind="Interface" />
      <Type Name="IServiceProviderContract" Kind="Interface" />
      <Type Name="RemoteArgument" Kind="Structure" />
      <Type Name="RemoteArgumentKind" Kind="Enumeration" />
      <Type Name="SerializableObjectData" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.AddIn.Contract.Automation">
      <Type Name="IRemoteDelegateContract" Kind="Interface" />
      <Type Name="IRemoteEventInfoContract" Kind="Interface" />
      <Type Name="IRemoteFieldInfoContract" Kind="Interface" />
      <Type Name="IRemoteMethodInfoContract" Kind="Interface" />
      <Type Name="IRemoteObjectContract" Kind="Interface" />
      <Type Name="IRemotePropertyInfoContract" Kind="Interface" />
      <Type Name="IRemoteTypeContract" Kind="Interface" />
      <Type Name="RemoteFieldData" Kind="Structure" />
      <Type Name="RemoteMemberData" Kind="Structure" />
      <Type Name="RemoteMethodData" Kind="Structure" />
      <Type Name="RemoteParameterData" Kind="Structure" />
      <Type Name="RemotePropertyData" Kind="Structure" />
      <Type Name="RemoteTypeData" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.AddIn.Contract.Collections">
      <Type Name="IArrayContract`1" DisplayName="IArrayContract&lt;C&gt;" Kind="Interface" />
      <Type Name="ICollectionContract`1" DisplayName="ICollectionContract&lt;C&gt;" Kind="Interface" />
      <Type Name="IEnumerableContract`1" DisplayName="IEnumerableContract&lt;C&gt;" Kind="Interface" />
      <Type Name="IEnumeratorContract`1" DisplayName="IEnumeratorContract&lt;C&gt;" Kind="Interface" />
      <Type Name="IListContract`1" DisplayName="IListContract&lt;C&gt;" Kind="Interface" />
      <Type Name="IRemoteArgumentArrayContract" Kind="Interface" />
      <Type Name="IRemoteArgumentArrayListContract" Kind="Interface" />
      <Type Name="IRemoteArgumentCollectionContract" Kind="Interface" />
      <Type Name="IRemoteArgumentDictionaryContract" Kind="Interface" />
      <Type Name="IRemoteArgumentDictionaryEnumeratorContract" Kind="Interface" />
      <Type Name="IRemoteArgumentEnumerableContract" Kind="Interface" />
      <Type Name="IRemoteArgumentEnumeratorContract" Kind="Interface" />
      <Type Name="RemoteArgumentDictionaryEntry" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.AddIn.Hosting">
      <Type Name="AddInController" Kind="Class" />
      <Type Name="AddInEnvironment" Kind="Class" />
      <Type Name="AddInProcess" Kind="Class" />
      <Type Name="AddInSecurityLevel" Kind="Enumeration" />
      <Type Name="AddInSegmentDirectoryNotFoundException" Kind="Class" />
      <Type Name="AddInSegmentType" Kind="Enumeration" />
      <Type Name="AddInStore" Kind="Class" />
      <Type Name="AddInToken" Kind="Class" />
      <Type Name="InvalidPipelineStoreException" Kind="Class" />
      <Type Name="PipelineStoreLocation" Kind="Enumeration" />
      <Type Name="Platform" Kind="Enumeration" />
      <Type Name="QualificationDataItem" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.AddIn.Pipeline">
      <Type Name="AddInAdapterAttribute" Kind="Class" />
      <Type Name="AddInBaseAttribute" Kind="Class" />
      <Type Name="AddInContractAttribute" Kind="Class" />
      <Type Name="CollectionAdapters" Kind="Class" />
      <Type Name="ContractAdapter" Kind="Class" />
      <Type Name="ContractBase" Kind="Class" />
      <Type Name="ContractHandle" Kind="Class" />
      <Type Name="HostAdapterAttribute" Kind="Class" />
      <Type Name="QualificationDataAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Collections">
      <Type Name="ArrayList" Kind="Class" />
      <Type Name="BitArray" Kind="Class" />
      <Type Name="CaseInsensitiveComparer" Kind="Class" />
      <Type Name="CaseInsensitiveHashCodeProvider" Kind="Class" />
      <Type Name="CollectionBase" Kind="Class" />
      <Type Name="Comparer" Kind="Class" />
      <Type Name="DictionaryBase" Kind="Class" />
      <Type Name="DictionaryEntry" Kind="Structure" />
      <Type Name="Hashtable" Kind="Class" />
      <Type Name="ICollection" Kind="Interface" />
      <Type Name="IComparer" Kind="Interface" />
      <Type Name="IDictionary" Kind="Interface" />
      <Type Name="IDictionaryEnumerator" Kind="Interface" />
      <Type Name="IEnumerable" Kind="Interface" />
      <Type Name="IEnumerator" Kind="Interface" />
      <Type Name="IEqualityComparer" Kind="Interface" />
      <Type Name="IHashCodeProvider" Kind="Interface" />
      <Type Name="IList" Kind="Interface" />
      <Type Name="IStructuralComparable" Kind="Interface" />
      <Type Name="IStructuralEquatable" Kind="Interface" />
      <Type Name="Queue" Kind="Class" />
      <Type Name="ReadOnlyCollectionBase" Kind="Class" />
      <Type Name="SortedList" Kind="Class" />
      <Type Name="Stack" Kind="Class" />
      <Type Name="StructuralComparisons" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Collections.Concurrent">
      <Type Name="ConcurrentDictionary`2" DisplayName="ConcurrentDictionary&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="ConcurrentQueue`1" DisplayName="ConcurrentQueue&lt;T&gt;" Kind="Class" />
      <Type Name="ConcurrentStack`1" DisplayName="ConcurrentStack&lt;T&gt;" Kind="Class" />
      <Type Name="EnumerablePartitionerOptions" Kind="Enumeration" />
      <Type Name="IProducerConsumerCollection`1" DisplayName="IProducerConsumerCollection&lt;T&gt;" Kind="Interface" />
      <Type Name="OrderablePartitioner`1" DisplayName="OrderablePartitioner&lt;TSource&gt;" Kind="Class" />
      <Type Name="Partitioner" Kind="Class" />
      <Type Name="Partitioner`1" DisplayName="Partitioner&lt;TSource&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Collections.Generic">
      <Type Name="Comparer`1" DisplayName="Comparer&lt;T&gt;" Kind="Class" />
      <Type Name="Dictionary`2" DisplayName="Dictionary&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="Dictionary`2+Enumerator" DisplayName="Dictionary&lt;TKey,TValue&gt;+Enumerator" Kind="Structure" />
      <Type Name="Dictionary`2+KeyCollection" DisplayName="Dictionary&lt;TKey,TValue&gt;+KeyCollection" Kind="Class" />
      <Type Name="Dictionary`2+KeyCollection+Enumerator" DisplayName="Dictionary&lt;TKey,TValue&gt;+KeyCollection+Enumerator" Kind="Structure" />
      <Type Name="Dictionary`2+ValueCollection" DisplayName="Dictionary&lt;TKey,TValue&gt;+ValueCollection" Kind="Class" />
      <Type Name="Dictionary`2+ValueCollection+Enumerator" DisplayName="Dictionary&lt;TKey,TValue&gt;+ValueCollection+Enumerator" Kind="Structure" />
      <Type Name="EqualityComparer`1" DisplayName="EqualityComparer&lt;T&gt;" Kind="Class" />
      <Type Name="HashSet`1" DisplayName="HashSet&lt;T&gt;" Kind="Class" />
      <Type Name="HashSet`1+Enumerator" DisplayName="HashSet&lt;T&gt;+Enumerator" Kind="Structure" />
      <Type Name="ICollection`1" DisplayName="ICollection&lt;T&gt;" Kind="Interface" />
      <Type Name="IComparer`1" DisplayName="IComparer&lt;T&gt;" Kind="Interface" />
      <Type Name="IDictionary`2" DisplayName="IDictionary&lt;TKey,TValue&gt;" Kind="Interface" />
      <Type Name="IEnumerable`1" DisplayName="IEnumerable&lt;T&gt;" Kind="Interface" />
      <Type Name="IEnumerator`1" DisplayName="IEnumerator&lt;T&gt;" Kind="Interface" />
      <Type Name="IEqualityComparer`1" DisplayName="IEqualityComparer&lt;T&gt;" Kind="Interface" />
      <Type Name="IList`1" DisplayName="IList&lt;T&gt;" Kind="Interface" />
      <Type Name="IReadOnlyCollection`1" DisplayName="IReadOnlyCollection&lt;T&gt;" Kind="Interface" />
      <Type Name="IReadOnlyDictionary`2" DisplayName="IReadOnlyDictionary&lt;TKey,TValue&gt;" Kind="Interface" />
      <Type Name="IReadOnlyList`1" DisplayName="IReadOnlyList&lt;T&gt;" Kind="Interface" />
      <Type Name="KeyNotFoundException" Kind="Class" />
      <Type Name="KeyValuePair`2" DisplayName="KeyValuePair&lt;TKey,TValue&gt;" Kind="Structure" />
      <Type Name="List`1" DisplayName="List&lt;T&gt;" Kind="Class" />
      <Type Name="List`1+Enumerator" DisplayName="List&lt;T&gt;+Enumerator" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.Collections.ObjectModel">
      <Type Name="Collection`1" DisplayName="Collection&lt;T&gt;" Kind="Class" />
      <Type Name="KeyedCollection`2" DisplayName="KeyedCollection&lt;TKey,TItem&gt;" Kind="Class" />
      <Type Name="ReadOnlyCollection`1" DisplayName="ReadOnlyCollection&lt;T&gt;" Kind="Class" />
      <Type Name="ReadOnlyDictionary`2" DisplayName="ReadOnlyDictionary&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="ReadOnlyDictionary`2+KeyCollection" DisplayName="ReadOnlyDictionary&lt;TKey,TValue&gt;+KeyCollection" Kind="Class" />
      <Type Name="ReadOnlyDictionary`2+ValueCollection" DisplayName="ReadOnlyDictionary&lt;TKey,TValue&gt;+ValueCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel">
      <Type Name="DesignerProperties" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel.Composition">
      <Type Name="AttributedModelServices" Kind="Class" />
      <Type Name="CatalogReflectionContextAttribute" Kind="Class" />
      <Type Name="ChangeRejectedException" Kind="Class" />
      <Type Name="CompositionContractMismatchException" Kind="Class" />
      <Type Name="CompositionError" Kind="Class" />
      <Type Name="CompositionException" Kind="Class" />
      <Type Name="CreationPolicy" Kind="Enumeration" />
      <Type Name="ExportAttribute" Kind="Class" />
      <Type Name="ExportFactory`1" DisplayName="ExportFactory&lt;T&gt;" Kind="Class" />
      <Type Name="ExportFactory`2" DisplayName="ExportFactory&lt;T,TMetadata&gt;" Kind="Class" />
      <Type Name="ExportLifetimeContext`1" DisplayName="ExportLifetimeContext&lt;T&gt;" Kind="Class" />
      <Type Name="ExportMetadataAttribute" Kind="Class" />
      <Type Name="ICompositionService" Kind="Interface" />
      <Type Name="ImportAttribute" Kind="Class" />
      <Type Name="ImportCardinalityMismatchException" Kind="Class" />
      <Type Name="ImportingConstructorAttribute" Kind="Class" />
      <Type Name="ImportManyAttribute" Kind="Class" />
      <Type Name="ImportSource" Kind="Enumeration" />
      <Type Name="InheritedExportAttribute" Kind="Class" />
      <Type Name="IPartImportsSatisfiedNotification" Kind="Interface" />
      <Type Name="MetadataAttributeAttribute" Kind="Class" />
      <Type Name="MetadataViewImplementationAttribute" Kind="Class" />
      <Type Name="PartCreationPolicyAttribute" Kind="Class" />
      <Type Name="PartMetadataAttribute" Kind="Class" />
      <Type Name="PartNotDiscoverableAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel.Composition.Hosting">
      <Type Name="AggregateCatalog" Kind="Class" />
      <Type Name="AggregateExportProvider" Kind="Class" />
      <Type Name="ApplicationCatalog" Kind="Class" />
      <Type Name="AssemblyCatalog" Kind="Class" />
      <Type Name="AtomicComposition" Kind="Class" />
      <Type Name="CatalogExportProvider" Kind="Class" />
      <Type Name="CatalogExtensions" Kind="Class" />
      <Type Name="ComposablePartCatalogChangeEventArgs" Kind="Class" />
      <Type Name="ComposablePartExportProvider" Kind="Class" />
      <Type Name="CompositionBatch" Kind="Class" />
      <Type Name="CompositionConstants" Kind="Class" />
      <Type Name="CompositionContainer" Kind="Class" />
      <Type Name="CompositionOptions" Kind="Enumeration" />
      <Type Name="CompositionScopeDefinition" Kind="Class" />
      <Type Name="CompositionService" Kind="Class" />
      <Type Name="DirectoryCatalog" Kind="Class" />
      <Type Name="ExportProvider" Kind="Class" />
      <Type Name="ExportsChangeEventArgs" Kind="Class" />
      <Type Name="FilteredCatalog" Kind="Class" />
      <Type Name="ImportEngine" Kind="Class" />
      <Type Name="INotifyComposablePartCatalogChanged" Kind="Interface" />
      <Type Name="ScopingExtensions" Kind="Class" />
      <Type Name="TypeCatalog" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel.Composition.Primitives">
      <Type Name="ComposablePart" Kind="Class" />
      <Type Name="ComposablePartCatalog" Kind="Class" />
      <Type Name="ComposablePartDefinition" Kind="Class" />
      <Type Name="ComposablePartException" Kind="Class" />
      <Type Name="ContractBasedImportDefinition" Kind="Class" />
      <Type Name="Export" Kind="Class" />
      <Type Name="ExportDefinition" Kind="Class" />
      <Type Name="ExportedDelegate" Kind="Class" />
      <Type Name="ICompositionElement" Kind="Interface" />
      <Type Name="ImportCardinality" Kind="Enumeration" />
      <Type Name="ImportDefinition" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel.Composition.ReflectionModel">
      <Type Name="LazyMemberInfo" Kind="Structure" />
      <Type Name="ReflectionModelServices" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel.Composition.Registration">
      <Type Name="ExportBuilder" Kind="Class" />
      <Type Name="ImportBuilder" Kind="Class" />
      <Type Name="ParameterImportBuilder" Kind="Class" />
      <Type Name="PartBuilder" Kind="Class" />
      <Type Name="PartBuilder`1" DisplayName="PartBuilder&lt;T&gt;" Kind="Class" />
      <Type Name="RegistrationBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel.DataAnnotations">
      <Type Name="AssociatedMetadataTypeTypeDescriptionProvider" Kind="Class" />
      <Type Name="AssociationAttribute" Kind="Class" />
      <Type Name="BindableTypeAttribute" Kind="Class" />
      <Type Name="CompareAttribute" Kind="Class" />
      <Type Name="ConcurrencyCheckAttribute" Kind="Class" />
      <Type Name="CreditCardAttribute" Kind="Class" />
      <Type Name="CustomValidationAttribute" Kind="Class" />
      <Type Name="DataType" Kind="Enumeration" />
      <Type Name="DataTypeAttribute" Kind="Class" />
      <Type Name="DisplayAttribute" Kind="Class" />
      <Type Name="DisplayColumnAttribute" Kind="Class" />
      <Type Name="DisplayFormatAttribute" Kind="Class" />
      <Type Name="EditableAttribute" Kind="Class" />
      <Type Name="EmailAddressAttribute" Kind="Class" />
      <Type Name="EnumDataTypeAttribute" Kind="Class" />
      <Type Name="FileExtensionsAttribute" Kind="Class" />
      <Type Name="FilterUIHintAttribute" Kind="Class" />
      <Type Name="IValidatableObject" Kind="Interface" />
      <Type Name="KeyAttribute" Kind="Class" />
      <Type Name="MaxLengthAttribute" Kind="Class" />
      <Type Name="MetadataTypeAttribute" Kind="Class" />
      <Type Name="MinLengthAttribute" Kind="Class" />
      <Type Name="PhoneAttribute" Kind="Class" />
      <Type Name="RangeAttribute" Kind="Class" />
      <Type Name="RegularExpressionAttribute" Kind="Class" />
      <Type Name="RequiredAttribute" Kind="Class" />
      <Type Name="ScaffoldColumnAttribute" Kind="Class" />
      <Type Name="ScaffoldTableAttribute" Kind="Class" />
      <Type Name="StringLengthAttribute" Kind="Class" />
      <Type Name="TimestampAttribute" Kind="Class" />
      <Type Name="UIHintAttribute" Kind="Class" />
      <Type Name="UrlAttribute" Kind="Class" />
      <Type Name="ValidationAttribute" Kind="Class" />
      <Type Name="ValidationContext" Kind="Class" />
      <Type Name="ValidationException" Kind="Class" />
      <Type Name="ValidationResult" Kind="Class" />
      <Type Name="Validator" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel.DataAnnotations.Schema">
      <Type Name="ColumnAttribute" Kind="Class" />
      <Type Name="ComplexTypeAttribute" Kind="Class" />
      <Type Name="DatabaseGeneratedAttribute" Kind="Class" />
      <Type Name="DatabaseGeneratedOption" Kind="Enumeration" />
      <Type Name="ForeignKeyAttribute" Kind="Class" />
      <Type Name="InversePropertyAttribute" Kind="Class" />
      <Type Name="NotMappedAttribute" Kind="Class" />
      <Type Name="TableAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel.Design">
      <Type Name="ActiveDesignSurfaceChangedEventArgs" Kind="Class" />
      <Type Name="ActiveDesignSurfaceChangedEventHandler" Kind="Delegate" />
      <Type Name="ArrayEditor" Kind="Class" />
      <Type Name="BinaryEditor" Kind="Class" />
      <Type Name="ByteViewer" Kind="Class" />
      <Type Name="CollectionEditor" Kind="Class" />
      <Type Name="CollectionEditor+CollectionForm" Kind="Class" />
      <Type Name="ComponentActionsType" Kind="Enumeration" />
      <Type Name="ComponentDesigner" Kind="Class" />
      <Type Name="ComponentDesigner+ShadowPropertyCollection" Kind="Class" />
      <Type Name="DateTimeEditor" Kind="Class" />
      <Type Name="DesignerActionHeaderItem" Kind="Class" />
      <Type Name="DesignerActionItem" Kind="Class" />
      <Type Name="DesignerActionItemCollection" Kind="Class" />
      <Type Name="DesignerActionList" Kind="Class" />
      <Type Name="DesignerActionListCollection" Kind="Class" />
      <Type Name="DesignerActionListsChangedEventArgs" Kind="Class" />
      <Type Name="DesignerActionListsChangedEventHandler" Kind="Delegate" />
      <Type Name="DesignerActionListsChangedType" Kind="Enumeration" />
      <Type Name="DesignerActionMethodItem" Kind="Class" />
      <Type Name="DesignerActionPropertyItem" Kind="Class" />
      <Type Name="DesignerActionService" Kind="Class" />
      <Type Name="DesignerActionTextItem" Kind="Class" />
      <Type Name="DesignerActionUIService" Kind="Class" />
      <Type Name="DesignerActionUIStateChangeEventArgs" Kind="Class" />
      <Type Name="DesignerActionUIStateChangeEventHandler" Kind="Delegate" />
      <Type Name="DesignerActionUIStateChangeType" Kind="Enumeration" />
      <Type Name="DesignerCommandSet" Kind="Class" />
      <Type Name="DesignSurface" Kind="Class" />
      <Type Name="DesignSurfaceCollection" Kind="Class" />
      <Type Name="DesignSurfaceEventArgs" Kind="Class" />
      <Type Name="DesignSurfaceEventHandler" Kind="Delegate" />
      <Type Name="DesignSurfaceManager" Kind="Class" />
      <Type Name="DisplayMode" Kind="Enumeration" />
      <Type Name="EventBindingService" Kind="Class" />
      <Type Name="ExceptionCollection" Kind="Class" />
      <Type Name="IComponentDesignerDebugService" Kind="Interface" />
      <Type Name="IComponentDesignerStateService" Kind="Interface" />
      <Type Name="IDesignTimeAssemblyLoader" Kind="Interface" />
      <Type Name="IMultitargetHelperService" Kind="Interface" />
      <Type Name="InheritanceService" Kind="Class" />
      <Type Name="LoadedEventArgs" Kind="Class" />
      <Type Name="LoadedEventHandler" Kind="Delegate" />
      <Type Name="LocalizationExtenderProvider" Kind="Class" />
      <Type Name="MenuCommandsChangedEventArgs" Kind="Class" />
      <Type Name="MenuCommandsChangedEventHandler" Kind="Delegate" />
      <Type Name="MenuCommandsChangedType" Kind="Enumeration" />
      <Type Name="MenuCommandService" Kind="Class" />
      <Type Name="MultilineStringEditor" Kind="Class" />
      <Type Name="ObjectSelectorEditor" Kind="Class" />
      <Type Name="ObjectSelectorEditor+Selector" Kind="Class" />
      <Type Name="ObjectSelectorEditor+SelectorNode" Kind="Class" />
      <Type Name="ProjectTargetFrameworkAttribute" Kind="Class" />
      <Type Name="UndoEngine" Kind="Class" />
      <Type Name="UndoEngine+UndoUnit" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ComponentModel.Design.Data">
      <Type Name="DataSourceDescriptor" Kind="Class" />
      <Type Name="DataSourceDescriptorCollection" Kind="Class" />
      <Type Name="DataSourceGroup" Kind="Class" />
      <Type Name="DataSourceGroupCollection" Kind="Class" />
      <Type Name="DataSourceProviderService" Kind="Class" />
      <Type Name="DesignerDataColumn" Kind="Class" />
      <Type Name="DesignerDataConnection" Kind="Class" />
      <Type Name="DesignerDataParameter" Kind="Class" />
      <Type Name="DesignerDataRelationship" Kind="Class" />
      <Type Name="DesignerDataSchemaClass" Kind="Class" />
      <Type Name="DesignerDataStoredProcedure" Kind="Class" />
      <Type Name="DesignerDataTable" Kind="Class" />
      <Type Name="DesignerDataTableBase" Kind="Class" />
      <Type Name="DesignerDataView" Kind="Class" />
      <Type Name="IDataEnvironment" Kind="Interface" />
      <Type Name="IDesignerDataSchema" Kind="Interface" />
      <Type Name="QueryBuilderMode" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.ComponentModel.Design.Serialization">
      <Type Name="BasicDesignerLoader" Kind="Class" />
      <Type Name="BasicDesignerLoader+ReloadOptions" Kind="Enumeration" />
      <Type Name="CodeDomComponentSerializationService" Kind="Class" />
      <Type Name="CodeDomDesignerLoader" Kind="Class" />
      <Type Name="CodeDomLocalizationModel" Kind="Enumeration" />
      <Type Name="CodeDomLocalizationProvider" Kind="Class" />
      <Type Name="CodeDomSerializer" Kind="Class" />
      <Type Name="CodeDomSerializerBase" Kind="Class" />
      <Type Name="CodeDomSerializerException" Kind="Class" />
      <Type Name="CollectionCodeDomSerializer" Kind="Class" />
      <Type Name="DesignerSerializationManager" Kind="Class" />
      <Type Name="ExpressionContext" Kind="Class" />
      <Type Name="ICodeDomDesignerReload" Kind="Interface" />
      <Type Name="MemberCodeDomSerializer" Kind="Class" />
      <Type Name="ObjectStatementCollection" Kind="Class" />
      <Type Name="RootContext" Kind="Class" />
      <Type Name="SerializeAbsoluteContext" Kind="Class" />
      <Type Name="StatementContext" Kind="Class" />
      <Type Name="TypeCodeDomSerializer" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Configuration">
      <Type Name="AppSettingsSection" Kind="Class" />
      <Type Name="CallbackValidator" Kind="Class" />
      <Type Name="CallbackValidatorAttribute" Kind="Class" />
      <Type Name="CommaDelimitedStringCollection" Kind="Class" />
      <Type Name="CommaDelimitedStringCollectionConverter" Kind="Class" />
      <Type Name="Configuration" Kind="Class" />
      <Type Name="ConfigurationAllowDefinition" Kind="Enumeration" />
      <Type Name="ConfigurationAllowExeDefinition" Kind="Enumeration" />
      <Type Name="ConfigurationCollectionAttribute" Kind="Class" />
      <Type Name="ConfigurationConverterBase" Kind="Class" />
      <Type Name="ConfigurationElement" Kind="Class" />
      <Type Name="ConfigurationElementCollection" Kind="Class" />
      <Type Name="ConfigurationElementCollectionType" Kind="Enumeration" />
      <Type Name="ConfigurationElementProperty" Kind="Class" />
      <Type Name="ConfigurationErrorsException" Kind="Class" />
      <Type Name="ConfigurationFileMap" Kind="Class" />
      <Type Name="ConfigurationLocation" Kind="Class" />
      <Type Name="ConfigurationLocationCollection" Kind="Class" />
      <Type Name="ConfigurationLockCollection" Kind="Class" />
      <Type Name="ConfigurationManager" Kind="Class" />
      <Type Name="ConfigurationPermission" Kind="Class" />
      <Type Name="ConfigurationPermissionAttribute" Kind="Class" />
      <Type Name="ConfigurationProperty" Kind="Class" />
      <Type Name="ConfigurationPropertyAttribute" Kind="Class" />
      <Type Name="ConfigurationPropertyCollection" Kind="Class" />
      <Type Name="ConfigurationPropertyOptions" Kind="Enumeration" />
      <Type Name="ConfigurationSaveMode" Kind="Enumeration" />
      <Type Name="ConfigurationSection" Kind="Class" />
      <Type Name="ConfigurationSectionCollection" Kind="Class" />
      <Type Name="ConfigurationSectionGroup" Kind="Class" />
      <Type Name="ConfigurationSectionGroupCollection" Kind="Class" />
      <Type Name="ConfigurationUserLevel" Kind="Enumeration" />
      <Type Name="ConfigurationValidatorAttribute" Kind="Class" />
      <Type Name="ConfigurationValidatorBase" Kind="Class" />
      <Type Name="ConnectionStringSettings" Kind="Class" />
      <Type Name="ConnectionStringSettingsCollection" Kind="Class" />
      <Type Name="ConnectionStringsSection" Kind="Class" />
      <Type Name="ContextInformation" Kind="Class" />
      <Type Name="DefaultSection" Kind="Class" />
      <Type Name="DefaultValidator" Kind="Class" />
      <Type Name="DpapiProtectedConfigurationProvider" Kind="Class" />
      <Type Name="ElementInformation" Kind="Class" />
      <Type Name="ExeConfigurationFileMap" Kind="Class" />
      <Type Name="ExeContext" Kind="Class" />
      <Type Name="GenericEnumConverter" Kind="Class" />
      <Type Name="IgnoreSection" Kind="Class" />
      <Type Name="InfiniteIntConverter" Kind="Class" />
      <Type Name="InfiniteTimeSpanConverter" Kind="Class" />
      <Type Name="IntegerValidator" Kind="Class" />
      <Type Name="IntegerValidatorAttribute" Kind="Class" />
      <Type Name="KeyValueConfigurationCollection" Kind="Class" />
      <Type Name="KeyValueConfigurationElement" Kind="Class" />
      <Type Name="LongValidator" Kind="Class" />
      <Type Name="LongValidatorAttribute" Kind="Class" />
      <Type Name="NameValueConfigurationCollection" Kind="Class" />
      <Type Name="NameValueConfigurationElement" Kind="Class" />
      <Type Name="OverrideMode" Kind="Enumeration" />
      <Type Name="PositiveTimeSpanValidator" Kind="Class" />
      <Type Name="PositiveTimeSpanValidatorAttribute" Kind="Class" />
      <Type Name="PropertyInformation" Kind="Class" />
      <Type Name="PropertyInformationCollection" Kind="Class" />
      <Type Name="PropertyValueOrigin" Kind="Enumeration" />
      <Type Name="ProtectedConfiguration" Kind="Class" />
      <Type Name="ProtectedConfigurationProvider" Kind="Class" />
      <Type Name="ProtectedConfigurationProviderCollection" Kind="Class" />
      <Type Name="ProtectedConfigurationSection" Kind="Class" />
      <Type Name="ProtectedProviderSettings" Kind="Class" />
      <Type Name="ProviderSettings" Kind="Class" />
      <Type Name="ProviderSettingsCollection" Kind="Class" />
      <Type Name="RegexStringValidator" Kind="Class" />
      <Type Name="RegexStringValidatorAttribute" Kind="Class" />
      <Type Name="RsaProtectedConfigurationProvider" Kind="Class" />
      <Type Name="SectionInformation" Kind="Class" />
      <Type Name="StringValidator" Kind="Class" />
      <Type Name="StringValidatorAttribute" Kind="Class" />
      <Type Name="SubclassTypeValidator" Kind="Class" />
      <Type Name="SubclassTypeValidatorAttribute" Kind="Class" />
      <Type Name="TimeSpanMinutesConverter" Kind="Class" />
      <Type Name="TimeSpanMinutesOrInfiniteConverter" Kind="Class" />
      <Type Name="TimeSpanSecondsConverter" Kind="Class" />
      <Type Name="TimeSpanSecondsOrInfiniteConverter" Kind="Class" />
      <Type Name="TimeSpanValidator" Kind="Class" />
      <Type Name="TimeSpanValidatorAttribute" Kind="Class" />
      <Type Name="TypeNameConverter" Kind="Class" />
      <Type Name="ValidatorCallback" Kind="Delegate" />
      <Type Name="WhiteSpaceTrimStringConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Configuration.Assemblies">
      <Type Name="AssemblyHash" Kind="Structure" />
      <Type Name="AssemblyHashAlgorithm" Kind="Enumeration" />
      <Type Name="AssemblyVersionCompatibility" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Configuration.Install">
      <Type Name="AssemblyInstaller" Kind="Class" />
      <Type Name="ComponentInstaller" Kind="Class" />
      <Type Name="IManagedInstaller" Kind="Interface" />
      <Type Name="InstallContext" Kind="Class" />
      <Type Name="Installer" Kind="Class" />
      <Type Name="InstallerCollection" Kind="Class" />
      <Type Name="InstallEventArgs" Kind="Class" />
      <Type Name="InstallEventHandler" Kind="Delegate" />
      <Type Name="InstallException" Kind="Class" />
      <Type Name="ManagedInstallerClass" Kind="Class" />
      <Type Name="TransactedInstaller" Kind="Class" />
      <Type Name="UninstallAction" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Configuration.Internal">
      <Type Name="DelegatingConfigHost" Kind="Class" />
      <Type Name="IConfigErrorInfo" Kind="Interface" />
      <Type Name="IConfigSystem" Kind="Interface" />
      <Type Name="IConfigurationManagerHelper" Kind="Interface" />
      <Type Name="IConfigurationManagerInternal" Kind="Interface" />
      <Type Name="IInternalConfigClientHost" Kind="Interface" />
      <Type Name="IInternalConfigConfigurationFactory" Kind="Interface" />
      <Type Name="IInternalConfigHost" Kind="Interface" />
      <Type Name="IInternalConfigRecord" Kind="Interface" />
      <Type Name="IInternalConfigRoot" Kind="Interface" />
      <Type Name="IInternalConfigSettingsFactory" Kind="Interface" />
      <Type Name="IInternalConfigSystem" Kind="Interface" />
      <Type Name="InternalConfigEventArgs" Kind="Class" />
      <Type Name="InternalConfigEventHandler" Kind="Delegate" />
      <Type Name="StreamChangeCallback" Kind="Delegate" />
    </Namespace>
    <Namespace Name="System.Configuration.Provider">
      <Type Name="ProviderBase" Kind="Class" />
      <Type Name="ProviderCollection" Kind="Class" />
      <Type Name="ProviderException" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data">
      <Type Name="AcceptRejectRule" Kind="Enumeration" />
      <Type Name="CommandBehavior" Kind="Enumeration" />
      <Type Name="CommandType" Kind="Enumeration" />
      <Type Name="ConflictOption" Kind="Enumeration" />
      <Type Name="ConnectionState" Kind="Enumeration" />
      <Type Name="Constraint" Kind="Class" />
      <Type Name="ConstraintCollection" Kind="Class" />
      <Type Name="ConstraintException" Kind="Class" />
      <Type Name="DataColumn" Kind="Class" />
      <Type Name="DataColumnChangeEventArgs" Kind="Class" />
      <Type Name="DataColumnChangeEventHandler" Kind="Delegate" />
      <Type Name="DataColumnCollection" Kind="Class" />
      <Type Name="DataException" Kind="Class" />
      <Type Name="DataRelation" Kind="Class" />
      <Type Name="DataRelationCollection" Kind="Class" />
      <Type Name="DataRow" Kind="Class" />
      <Type Name="DataRowAction" Kind="Enumeration" />
      <Type Name="DataRowBuilder" Kind="Class" />
      <Type Name="DataRowChangeEventArgs" Kind="Class" />
      <Type Name="DataRowChangeEventHandler" Kind="Delegate" />
      <Type Name="DataRowCollection" Kind="Class" />
      <Type Name="DataRowComparer" Kind="Class" />
      <Type Name="DataRowComparer`1" DisplayName="DataRowComparer&lt;TRow&gt;" Kind="Class" />
      <Type Name="DataRowExtensions" Kind="Class" />
      <Type Name="DataRowState" Kind="Enumeration" />
      <Type Name="DataRowVersion" Kind="Enumeration" />
      <Type Name="DataRowView" Kind="Class" />
      <Type Name="DataSet" Kind="Class" />
      <Type Name="DataSetDateTime" Kind="Enumeration" />
      <Type Name="DataSetSchemaImporterExtension" Kind="Class" />
      <Type Name="DataSysDescriptionAttribute" Kind="Class" />
      <Type Name="DataTable" Kind="Class" />
      <Type Name="DataTableClearEventArgs" Kind="Class" />
      <Type Name="DataTableClearEventHandler" Kind="Delegate" />
      <Type Name="DataTableCollection" Kind="Class" />
      <Type Name="DataTableExtensions" Kind="Class" />
      <Type Name="DataTableNewRowEventArgs" Kind="Class" />
      <Type Name="DataTableNewRowEventHandler" Kind="Delegate" />
      <Type Name="DataTableReader" Kind="Class" />
      <Type Name="DataView" Kind="Class" />
      <Type Name="DataViewManager" Kind="Class" />
      <Type Name="DataViewRowState" Kind="Enumeration" />
      <Type Name="DataViewSetting" Kind="Class" />
      <Type Name="DataViewSettingCollection" Kind="Class" />
      <Type Name="DBConcurrencyException" Kind="Class" />
      <Type Name="DbType" Kind="Enumeration" />
      <Type Name="DeletedRowInaccessibleException" Kind="Class" />
      <Type Name="DuplicateNameException" Kind="Class" />
      <Type Name="EntityCommandCompilationException" Kind="Class" />
      <Type Name="EntityCommandExecutionException" Kind="Class" />
      <Type Name="EntityException" Kind="Class" />
      <Type Name="EntityKey" Kind="Class" />
      <Type Name="EntityKeyMember" Kind="Class" />
      <Type Name="EntitySqlException" Kind="Class" />
      <Type Name="EntityState" Kind="Enumeration" />
      <Type Name="EnumerableRowCollection" Kind="Class" />
      <Type Name="EnumerableRowCollection`1" DisplayName="EnumerableRowCollection&lt;TRow&gt;" Kind="Class" />
      <Type Name="EnumerableRowCollectionExtensions" Kind="Class" />
      <Type Name="EvaluateException" Kind="Class" />
      <Type Name="FillErrorEventArgs" Kind="Class" />
      <Type Name="FillErrorEventHandler" Kind="Delegate" />
      <Type Name="ForeignKeyConstraint" Kind="Class" />
      <Type Name="IColumnMapping" Kind="Interface" />
      <Type Name="IColumnMappingCollection" Kind="Interface" />
      <Type Name="IDataAdapter" Kind="Interface" />
      <Type Name="IDataParameter" Kind="Interface" />
      <Type Name="IDataParameterCollection" Kind="Interface" />
      <Type Name="IDataReader" Kind="Interface" />
      <Type Name="IDataRecord" Kind="Interface" />
      <Type Name="IDbCommand" Kind="Interface" />
      <Type Name="IDbConnection" Kind="Interface" />
      <Type Name="IDbDataAdapter" Kind="Interface" />
      <Type Name="IDbDataParameter" Kind="Interface" />
      <Type Name="IDbTransaction" Kind="Interface" />
      <Type Name="IExtendedDataRecord" Kind="Interface" />
      <Type Name="InRowChangingEventException" Kind="Class" />
      <Type Name="InternalDataCollectionBase" Kind="Class" />
      <Type Name="InvalidCommandTreeException" Kind="Class" />
      <Type Name="InvalidConstraintException" Kind="Class" />
      <Type Name="InvalidExpressionException" Kind="Class" />
      <Type Name="IsolationLevel" Kind="Enumeration" />
      <Type Name="ITableMapping" Kind="Interface" />
      <Type Name="ITableMappingCollection" Kind="Interface" />
      <Type Name="KeyRestrictionBehavior" Kind="Enumeration" />
      <Type Name="LoadOption" Kind="Enumeration" />
      <Type Name="MappingException" Kind="Class" />
      <Type Name="MappingType" Kind="Enumeration" />
      <Type Name="MergeFailedEventArgs" Kind="Class" />
      <Type Name="MergeFailedEventHandler" Kind="Delegate" />
      <Type Name="MetadataException" Kind="Class" />
      <Type Name="MissingMappingAction" Kind="Enumeration" />
      <Type Name="MissingPrimaryKeyException" Kind="Class" />
      <Type Name="MissingSchemaAction" Kind="Enumeration" />
      <Type Name="NoNullAllowedException" Kind="Class" />
      <Type Name="ObjectNotFoundException" Kind="Class" />
      <Type Name="OperationAbortedException" Kind="Class" />
      <Type Name="OptimisticConcurrencyException" Kind="Class" />
      <Type Name="OrderedEnumerableRowCollection`1" DisplayName="OrderedEnumerableRowCollection&lt;TRow&gt;" Kind="Class" />
      <Type Name="ParameterDirection" Kind="Enumeration" />
      <Type Name="PropertyAttributes" Kind="Enumeration" />
      <Type Name="PropertyCollection" Kind="Class" />
      <Type Name="PropertyConstraintException" Kind="Class" />
      <Type Name="ProviderIncompatibleException" Kind="Class" />
      <Type Name="ReadOnlyException" Kind="Class" />
      <Type Name="RowNotInTableException" Kind="Class" />
      <Type Name="Rule" Kind="Enumeration" />
      <Type Name="SchemaSerializationMode" Kind="Enumeration" />
      <Type Name="SchemaType" Kind="Enumeration" />
      <Type Name="SerializationFormat" Kind="Enumeration" />
      <Type Name="SqlDbType" Kind="Enumeration" />
      <Type Name="StateChangeEventArgs" Kind="Class" />
      <Type Name="StateChangeEventHandler" Kind="Delegate" />
      <Type Name="StatementCompletedEventArgs" Kind="Class" />
      <Type Name="StatementCompletedEventHandler" Kind="Delegate" />
      <Type Name="StatementType" Kind="Enumeration" />
      <Type Name="StrongTypingException" Kind="Class" />
      <Type Name="SyntaxErrorException" Kind="Class" />
      <Type Name="TypedDataSetGenerator" Kind="Class" />
      <Type Name="TypedDataSetGeneratorException" Kind="Class" />
      <Type Name="TypedTableBase`1" DisplayName="TypedTableBase&lt;T&gt;" Kind="Class" />
      <Type Name="TypedTableBaseExtensions" Kind="Class" />
      <Type Name="UniqueConstraint" Kind="Class" />
      <Type Name="UpdateException" Kind="Class" />
      <Type Name="UpdateRowSource" Kind="Enumeration" />
      <Type Name="UpdateStatus" Kind="Enumeration" />
      <Type Name="VersionNotFoundException" Kind="Class" />
      <Type Name="XmlReadMode" Kind="Enumeration" />
      <Type Name="XmlWriteMode" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.Common">
      <Type Name="CatalogLocation" Kind="Enumeration" />
      <Type Name="DataAdapter" Kind="Class" />
      <Type Name="DataColumnMapping" Kind="Class" />
      <Type Name="DataColumnMappingCollection" Kind="Class" />
      <Type Name="DataRecordInfo" Kind="Class" />
      <Type Name="DataTableMapping" Kind="Class" />
      <Type Name="DataTableMappingCollection" Kind="Class" />
      <Type Name="DbCommand" Kind="Class" />
      <Type Name="DbCommandBuilder" Kind="Class" />
      <Type Name="DbCommandDefinition" Kind="Class" />
      <Type Name="DbConnection" Kind="Class" />
      <Type Name="DbConnectionStringBuilder" Kind="Class" />
      <Type Name="DbDataAdapter" Kind="Class" />
      <Type Name="DBDataPermission" Kind="Class" />
      <Type Name="DBDataPermissionAttribute" Kind="Class" />
      <Type Name="DbDataReader" Kind="Class" />
      <Type Name="DbDataRecord" Kind="Class" />
      <Type Name="DbDataSourceEnumerator" Kind="Class" />
      <Type Name="DbEnumerator" Kind="Class" />
      <Type Name="DbException" Kind="Class" />
      <Type Name="DbMetaDataCollectionNames" Kind="Class" />
      <Type Name="DbMetaDataColumnNames" Kind="Class" />
      <Type Name="DbParameter" Kind="Class" />
      <Type Name="DbParameterCollection" Kind="Class" />
      <Type Name="DbProviderConfigurationHandler" Kind="Class" />
      <Type Name="DbProviderFactories" Kind="Class" />
      <Type Name="DbProviderFactoriesConfigurationHandler" Kind="Class" />
      <Type Name="DbProviderFactory" Kind="Class" />
      <Type Name="DbProviderManifest" Kind="Class" />
      <Type Name="DbProviderServices" Kind="Class" />
      <Type Name="DbProviderSpecificTypePropertyAttribute" Kind="Class" />
      <Type Name="DbTransaction" Kind="Class" />
      <Type Name="DbXmlEnabledProviderManifest" Kind="Class" />
      <Type Name="EntityRecordInfo" Kind="Class" />
      <Type Name="FieldMetadata" Kind="Structure" />
      <Type Name="GroupByBehavior" Kind="Enumeration" />
      <Type Name="IdentifierCase" Kind="Enumeration" />
      <Type Name="RowUpdatedEventArgs" Kind="Class" />
      <Type Name="RowUpdatingEventArgs" Kind="Class" />
      <Type Name="SchemaTableColumn" Kind="Class" />
      <Type Name="SchemaTableOptionalColumn" Kind="Class" />
      <Type Name="SupportedJoinOperators" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.Common.CommandTrees">
      <Type Name="DbAggregate" Kind="Class" />
      <Type Name="DbAndExpression" Kind="Class" />
      <Type Name="DbApplyExpression" Kind="Class" />
      <Type Name="DbArithmeticExpression" Kind="Class" />
      <Type Name="DbBinaryExpression" Kind="Class" />
      <Type Name="DbCaseExpression" Kind="Class" />
      <Type Name="DbCastExpression" Kind="Class" />
      <Type Name="DbCommandTree" Kind="Class" />
      <Type Name="DbComparisonExpression" Kind="Class" />
      <Type Name="DbConstantExpression" Kind="Class" />
      <Type Name="DbCrossJoinExpression" Kind="Class" />
      <Type Name="DbDeleteCommandTree" Kind="Class" />
      <Type Name="DbDerefExpression" Kind="Class" />
      <Type Name="DbDistinctExpression" Kind="Class" />
      <Type Name="DbElementExpression" Kind="Class" />
      <Type Name="DbEntityRefExpression" Kind="Class" />
      <Type Name="DbExceptExpression" Kind="Class" />
      <Type Name="DbExpression" Kind="Class" />
      <Type Name="DbExpressionBinding" Kind="Class" />
      <Type Name="DbExpressionKind" Kind="Enumeration" />
      <Type Name="DbExpressionVisitor" Kind="Class" />
      <Type Name="DbExpressionVisitor`1" DisplayName="DbExpressionVisitor&lt;TResultType&gt;" Kind="Class" />
      <Type Name="DbFilterExpression" Kind="Class" />
      <Type Name="DbFunctionAggregate" Kind="Class" />
      <Type Name="DbFunctionCommandTree" Kind="Class" />
      <Type Name="DbFunctionExpression" Kind="Class" />
      <Type Name="DbGroupAggregate" Kind="Class" />
      <Type Name="DbGroupByExpression" Kind="Class" />
      <Type Name="DbGroupExpressionBinding" Kind="Class" />
      <Type Name="DbInsertCommandTree" Kind="Class" />
      <Type Name="DbIntersectExpression" Kind="Class" />
      <Type Name="DbIsEmptyExpression" Kind="Class" />
      <Type Name="DbIsNullExpression" Kind="Class" />
      <Type Name="DbIsOfExpression" Kind="Class" />
      <Type Name="DbJoinExpression" Kind="Class" />
      <Type Name="DbLambda" Kind="Class" />
      <Type Name="DbLambdaExpression" Kind="Class" />
      <Type Name="DbLikeExpression" Kind="Class" />
      <Type Name="DbLimitExpression" Kind="Class" />
      <Type Name="DbModificationClause" Kind="Class" />
      <Type Name="DbModificationCommandTree" Kind="Class" />
      <Type Name="DbNewInstanceExpression" Kind="Class" />
      <Type Name="DbNotExpression" Kind="Class" />
      <Type Name="DbNullExpression" Kind="Class" />
      <Type Name="DbOfTypeExpression" Kind="Class" />
      <Type Name="DbOrExpression" Kind="Class" />
      <Type Name="DbParameterReferenceExpression" Kind="Class" />
      <Type Name="DbProjectExpression" Kind="Class" />
      <Type Name="DbPropertyExpression" Kind="Class" />
      <Type Name="DbQuantifierExpression" Kind="Class" />
      <Type Name="DbQueryCommandTree" Kind="Class" />
      <Type Name="DbRefExpression" Kind="Class" />
      <Type Name="DbRefKeyExpression" Kind="Class" />
      <Type Name="DbRelationshipNavigationExpression" Kind="Class" />
      <Type Name="DbScanExpression" Kind="Class" />
      <Type Name="DbSetClause" Kind="Class" />
      <Type Name="DbSkipExpression" Kind="Class" />
      <Type Name="DbSortClause" Kind="Class" />
      <Type Name="DbSortExpression" Kind="Class" />
      <Type Name="DbTreatExpression" Kind="Class" />
      <Type Name="DbUnaryExpression" Kind="Class" />
      <Type Name="DbUnionAllExpression" Kind="Class" />
      <Type Name="DbUpdateCommandTree" Kind="Class" />
      <Type Name="DbVariableReferenceExpression" Kind="Class" />
      <Type Name="DefaultExpressionVisitor" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Common.CommandTrees.ExpressionBuilder">
      <Type Name="DbExpressionBuilder" Kind="Class" />
      <Type Name="EdmFunctions" Kind="Class" />
      <Type Name="Row" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial">
      <Type Name="SpatialEdmFunctions" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Common.EntitySql">
      <Type Name="EntitySqlParser" Kind="Class" />
      <Type Name="FunctionDefinition" Kind="Class" />
      <Type Name="ParseResult" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Design">
      <Type Name="MethodSignatureGenerator" Kind="Class" />
      <Type Name="ParameterGenerationOption" Kind="Enumeration" />
      <Type Name="TypedDataSetGenerator" Kind="Class" />
      <Type Name="TypedDataSetGenerator+GenerateOption" Kind="Enumeration" />
      <Type Name="TypedDataSetGeneratorException" Kind="Class" />
      <Type Name="TypedDataSetSchemaImporterExtension" Kind="Class" />
      <Type Name="TypedDataSetSchemaImporterExtensionFx35" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Design">
      <Type Name="EdmToObjectNamespaceMap" Kind="Class" />
      <Type Name="EntityClassGenerator" Kind="Class" />
      <Type Name="EntityCodeGenerator" Kind="Class" />
      <Type Name="EntityFrameworkVersions" Kind="Class" />
      <Type Name="EntityModelSchemaGenerator" Kind="Class" />
      <Type Name="EntityStoreSchemaFilterEffect" Kind="Enumeration" />
      <Type Name="EntityStoreSchemaFilterEntry" Kind="Class" />
      <Type Name="EntityStoreSchemaFilterObjectTypes" Kind="Enumeration" />
      <Type Name="EntityStoreSchemaGenerator" Kind="Class" />
      <Type Name="EntityViewGenerator" Kind="Class" />
      <Type Name="LanguageOption" Kind="Enumeration" />
      <Type Name="MetadataExtensionMethods" Kind="Class" />
      <Type Name="MetadataItemCollectionFactory" Kind="Class" />
      <Type Name="PropertyGeneratedEventArgs" Kind="Class" />
      <Type Name="PropertyGeneratedEventHandler" Kind="Delegate" />
      <Type Name="TypeGeneratedEventArgs" Kind="Class" />
      <Type Name="TypeGeneratedEventHandler" Kind="Delegate" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Design.AspNet">
      <Type Name="EntityDesignerBuildProvider" Kind="Class" />
      <Type Name="EntityModelBuildProvider" Kind="Class" />
      <Type Name="MappingModelBuildProvider" Kind="Class" />
      <Type Name="StorageModelBuildProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Entity.Design.PluralizationServices">
      <Type Name="ICustomPluralizationMapping" Kind="Interface" />
      <Type Name="PluralizationService" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.EntityClient">
      <Type Name="EntityCommand" Kind="Class" />
      <Type Name="EntityConnection" Kind="Class" />
      <Type Name="EntityConnectionStringBuilder" Kind="Class" />
      <Type Name="EntityDataReader" Kind="Class" />
      <Type Name="EntityParameter" Kind="Class" />
      <Type Name="EntityParameterCollection" Kind="Class" />
      <Type Name="EntityProviderFactory" Kind="Class" />
      <Type Name="EntityTransaction" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Linq">
      <Type Name="Binary" Kind="Class" />
      <Type Name="ChangeAction" Kind="Enumeration" />
      <Type Name="ChangeConflictCollection" Kind="Class" />
      <Type Name="ChangeConflictException" Kind="Class" />
      <Type Name="ChangeSet" Kind="Class" />
      <Type Name="CompiledQuery" Kind="Class" />
      <Type Name="ConflictMode" Kind="Enumeration" />
      <Type Name="DataContext" Kind="Class" />
      <Type Name="DataLoadOptions" Kind="Class" />
      <Type Name="DBConvert" Kind="Class" />
      <Type Name="DuplicateKeyException" Kind="Class" />
      <Type Name="EntityRef`1" DisplayName="EntityRef&lt;TEntity&gt;" Kind="Structure" />
      <Type Name="EntitySet`1" DisplayName="EntitySet&lt;TEntity&gt;" Kind="Class" />
      <Type Name="ForeignKeyReferenceAlreadyHasValueException" Kind="Class" />
      <Type Name="IExecuteResult" Kind="Interface" />
      <Type Name="IFunctionResult" Kind="Interface" />
      <Type Name="IMultipleResults" Kind="Interface" />
      <Type Name="ISingleResult`1" DisplayName="ISingleResult&lt;T&gt;" Kind="Interface" />
      <Type Name="ITable" Kind="Interface" />
      <Type Name="ITable`1" DisplayName="ITable&lt;TEntity&gt;" Kind="Interface" />
      <Type Name="Link`1" DisplayName="Link&lt;T&gt;" Kind="Structure" />
      <Type Name="MemberChangeConflict" Kind="Class" />
      <Type Name="ModifiedMemberInfo" Kind="Structure" />
      <Type Name="ObjectChangeConflict" Kind="Class" />
      <Type Name="RefreshMode" Kind="Enumeration" />
      <Type Name="Table`1" DisplayName="Table&lt;TEntity&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Linq.Mapping">
      <Type Name="AssociationAttribute" Kind="Class" />
      <Type Name="AttributeMappingSource" Kind="Class" />
      <Type Name="AutoSync" Kind="Enumeration" />
      <Type Name="ColumnAttribute" Kind="Class" />
      <Type Name="DataAttribute" Kind="Class" />
      <Type Name="DatabaseAttribute" Kind="Class" />
      <Type Name="FunctionAttribute" Kind="Class" />
      <Type Name="InheritanceMappingAttribute" Kind="Class" />
      <Type Name="MappingSource" Kind="Class" />
      <Type Name="MetaAccessor" Kind="Class" />
      <Type Name="MetaAccessor`2" DisplayName="MetaAccessor&lt;TEntity,TMember&gt;" Kind="Class" />
      <Type Name="MetaAssociation" Kind="Class" />
      <Type Name="MetaDataMember" Kind="Class" />
      <Type Name="MetaFunction" Kind="Class" />
      <Type Name="MetaModel" Kind="Class" />
      <Type Name="MetaParameter" Kind="Class" />
      <Type Name="MetaTable" Kind="Class" />
      <Type Name="MetaType" Kind="Class" />
      <Type Name="ParameterAttribute" Kind="Class" />
      <Type Name="ProviderAttribute" Kind="Class" />
      <Type Name="ResultTypeAttribute" Kind="Class" />
      <Type Name="TableAttribute" Kind="Class" />
      <Type Name="UpdateCheck" Kind="Enumeration" />
      <Type Name="XmlMappingSource" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Linq.SqlClient">
      <Type Name="Sql2000Provider" Kind="Class" />
      <Type Name="Sql2005Provider" Kind="Class" />
      <Type Name="Sql2008Provider" Kind="Class" />
      <Type Name="SqlHelpers" Kind="Class" />
      <Type Name="SqlMethods" Kind="Class" />
      <Type Name="SqlProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Linq.SqlClient.Implementation">
      <Type Name="ObjectMaterializer`1" DisplayName="ObjectMaterializer&lt;TDataReader&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Mapping">
      <Type Name="EntityViewContainer" Kind="Class" />
      <Type Name="EntityViewGenerationAttribute" Kind="Class" />
      <Type Name="MappingItemCollection" Kind="Class" />
      <Type Name="StorageMappingItemCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Metadata.Edm">
      <Type Name="AssociationEndMember" Kind="Class" />
      <Type Name="AssociationSet" Kind="Class" />
      <Type Name="AssociationSetEnd" Kind="Class" />
      <Type Name="AssociationType" Kind="Class" />
      <Type Name="BuiltInTypeKind" Kind="Enumeration" />
      <Type Name="CollectionKind" Kind="Enumeration" />
      <Type Name="CollectionType" Kind="Class" />
      <Type Name="ComplexType" Kind="Class" />
      <Type Name="ConcurrencyMode" Kind="Enumeration" />
      <Type Name="DataSpace" Kind="Enumeration" />
      <Type Name="Documentation" Kind="Class" />
      <Type Name="EdmError" Kind="Class" />
      <Type Name="EdmFunction" Kind="Class" />
      <Type Name="EdmItemCollection" Kind="Class" />
      <Type Name="EdmMember" Kind="Class" />
      <Type Name="EdmProperty" Kind="Class" />
      <Type Name="EdmSchemaError" Kind="Class" />
      <Type Name="EdmSchemaErrorSeverity" Kind="Enumeration" />
      <Type Name="EdmType" Kind="Class" />
      <Type Name="EntityContainer" Kind="Class" />
      <Type Name="EntitySet" Kind="Class" />
      <Type Name="EntitySetBase" Kind="Class" />
      <Type Name="EntityType" Kind="Class" />
      <Type Name="EntityTypeBase" Kind="Class" />
      <Type Name="EnumMember" Kind="Class" />
      <Type Name="EnumType" Kind="Class" />
      <Type Name="Facet" Kind="Class" />
      <Type Name="FacetDescription" Kind="Class" />
      <Type Name="FunctionParameter" Kind="Class" />
      <Type Name="GlobalItem" Kind="Class" />
      <Type Name="ItemCollection" Kind="Class" />
      <Type Name="MetadataItem" Kind="Class" />
      <Type Name="MetadataProperty" Kind="Class" />
      <Type Name="MetadataWorkspace" Kind="Class" />
      <Type Name="NavigationProperty" Kind="Class" />
      <Type Name="ObjectItemCollection" Kind="Class" />
      <Type Name="OperationAction" Kind="Enumeration" />
      <Type Name="ParameterMode" Kind="Enumeration" />
      <Type Name="ParameterTypeSemantics" Kind="Enumeration" />
      <Type Name="PrimitiveType" Kind="Class" />
      <Type Name="PrimitiveTypeKind" Kind="Enumeration" />
      <Type Name="PropertyKind" Kind="Enumeration" />
      <Type Name="ReadOnlyMetadataCollection`1" DisplayName="ReadOnlyMetadataCollection&lt;T&gt;" Kind="Class" />
      <Type Name="ReadOnlyMetadataCollection`1+Enumerator" DisplayName="ReadOnlyMetadataCollection&lt;T&gt;+Enumerator" Kind="Structure" />
      <Type Name="ReferentialConstraint" Kind="Class" />
      <Type Name="RefType" Kind="Class" />
      <Type Name="RelationshipEndMember" Kind="Class" />
      <Type Name="RelationshipMultiplicity" Kind="Enumeration" />
      <Type Name="RelationshipSet" Kind="Class" />
      <Type Name="RelationshipType" Kind="Class" />
      <Type Name="RowType" Kind="Class" />
      <Type Name="SimpleType" Kind="Class" />
      <Type Name="StoreGeneratedPattern" Kind="Enumeration" />
      <Type Name="StoreItemCollection" Kind="Class" />
      <Type Name="StructuralType" Kind="Class" />
      <Type Name="TypeUsage" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Objects">
      <Type Name="CompiledQuery" Kind="Class" />
      <Type Name="CurrentValueRecord" Kind="Class" />
      <Type Name="DbUpdatableDataRecord" Kind="Class" />
      <Type Name="EntityFunctions" Kind="Class" />
      <Type Name="IObjectSet`1" DisplayName="IObjectSet&lt;TEntity&gt;" Kind="Interface" />
      <Type Name="MergeOption" Kind="Enumeration" />
      <Type Name="ObjectContext" Kind="Class" />
      <Type Name="ObjectContextOptions" Kind="Class" />
      <Type Name="ObjectMaterializedEventArgs" Kind="Class" />
      <Type Name="ObjectMaterializedEventHandler" Kind="Delegate" />
      <Type Name="ObjectParameter" Kind="Class" />
      <Type Name="ObjectParameterCollection" Kind="Class" />
      <Type Name="ObjectQuery" Kind="Class" />
      <Type Name="ObjectQuery`1" DisplayName="ObjectQuery&lt;T&gt;" Kind="Class" />
      <Type Name="ObjectResult" Kind="Class" />
      <Type Name="ObjectResult`1" DisplayName="ObjectResult&lt;T&gt;" Kind="Class" />
      <Type Name="ObjectSet`1" DisplayName="ObjectSet&lt;TEntity&gt;" Kind="Class" />
      <Type Name="ObjectStateEntry" Kind="Class" />
      <Type Name="ObjectStateManager" Kind="Class" />
      <Type Name="OriginalValueRecord" Kind="Class" />
      <Type Name="ProxyDataContractResolver" Kind="Class" />
      <Type Name="RefreshMode" Kind="Enumeration" />
      <Type Name="SaveOptions" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.Objects.DataClasses">
      <Type Name="ComplexObject" Kind="Class" />
      <Type Name="EdmComplexPropertyAttribute" Kind="Class" />
      <Type Name="EdmComplexTypeAttribute" Kind="Class" />
      <Type Name="EdmEntityTypeAttribute" Kind="Class" />
      <Type Name="EdmEnumTypeAttribute" Kind="Class" />
      <Type Name="EdmFunctionAttribute" Kind="Class" />
      <Type Name="EdmPropertyAttribute" Kind="Class" />
      <Type Name="EdmRelationshipAttribute" Kind="Class" />
      <Type Name="EdmRelationshipNavigationPropertyAttribute" Kind="Class" />
      <Type Name="EdmScalarPropertyAttribute" Kind="Class" />
      <Type Name="EdmSchemaAttribute" Kind="Class" />
      <Type Name="EdmTypeAttribute" Kind="Class" />
      <Type Name="EntityCollection`1" DisplayName="EntityCollection&lt;TEntity&gt;" Kind="Class" />
      <Type Name="EntityObject" Kind="Class" />
      <Type Name="EntityReference" Kind="Class" />
      <Type Name="EntityReference`1" DisplayName="EntityReference&lt;TEntity&gt;" Kind="Class" />
      <Type Name="IEntityChangeTracker" Kind="Interface" />
      <Type Name="IEntityWithChangeTracker" Kind="Interface" />
      <Type Name="IEntityWithKey" Kind="Interface" />
      <Type Name="IEntityWithRelationships" Kind="Interface" />
      <Type Name="IRelatedEnd" Kind="Interface" />
      <Type Name="RelatedEnd" Kind="Class" />
      <Type Name="RelationshipKind" Kind="Enumeration" />
      <Type Name="RelationshipManager" Kind="Class" />
      <Type Name="StructuralObject" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Objects.SqlClient">
      <Type Name="SqlFunctions" Kind="Class" />
      <Type Name="SqlSpatialFunctions" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Odbc">
      <Type Name="OdbcCommand" Kind="Class" />
      <Type Name="OdbcCommandBuilder" Kind="Class" />
      <Type Name="OdbcConnection" Kind="Class" />
      <Type Name="OdbcConnectionStringBuilder" Kind="Class" />
      <Type Name="OdbcDataAdapter" Kind="Class" />
      <Type Name="OdbcDataReader" Kind="Class" />
      <Type Name="OdbcError" Kind="Class" />
      <Type Name="OdbcErrorCollection" Kind="Class" />
      <Type Name="OdbcException" Kind="Class" />
      <Type Name="OdbcFactory" Kind="Class" />
      <Type Name="OdbcInfoMessageEventArgs" Kind="Class" />
      <Type Name="OdbcInfoMessageEventHandler" Kind="Delegate" />
      <Type Name="OdbcMetaDataCollectionNames" Kind="Class" />
      <Type Name="OdbcMetaDataColumnNames" Kind="Class" />
      <Type Name="OdbcParameter" Kind="Class" />
      <Type Name="OdbcParameterCollection" Kind="Class" />
      <Type Name="OdbcPermission" Kind="Class" />
      <Type Name="OdbcPermissionAttribute" Kind="Class" />
      <Type Name="OdbcRowUpdatedEventArgs" Kind="Class" />
      <Type Name="OdbcRowUpdatedEventHandler" Kind="Delegate" />
      <Type Name="OdbcRowUpdatingEventArgs" Kind="Class" />
      <Type Name="OdbcRowUpdatingEventHandler" Kind="Delegate" />
      <Type Name="OdbcTransaction" Kind="Class" />
      <Type Name="OdbcType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.OleDb">
      <Type Name="OleDbCommand" Kind="Class" />
      <Type Name="OleDbCommandBuilder" Kind="Class" />
      <Type Name="OleDbConnection" Kind="Class" />
      <Type Name="OleDbConnectionStringBuilder" Kind="Class" />
      <Type Name="OleDbDataAdapter" Kind="Class" />
      <Type Name="OleDbDataReader" Kind="Class" />
      <Type Name="OleDbEnumerator" Kind="Class" />
      <Type Name="OleDbError" Kind="Class" />
      <Type Name="OleDbErrorCollection" Kind="Class" />
      <Type Name="OleDbException" Kind="Class" />
      <Type Name="OleDbFactory" Kind="Class" />
      <Type Name="OleDbInfoMessageEventArgs" Kind="Class" />
      <Type Name="OleDbInfoMessageEventHandler" Kind="Delegate" />
      <Type Name="OleDbLiteral" Kind="Enumeration" />
      <Type Name="OleDbMetaDataCollectionNames" Kind="Class" />
      <Type Name="OleDbMetaDataColumnNames" Kind="Class" />
      <Type Name="OleDbParameter" Kind="Class" />
      <Type Name="OleDbParameterCollection" Kind="Class" />
      <Type Name="OleDbPermission" Kind="Class" />
      <Type Name="OleDbPermissionAttribute" Kind="Class" />
      <Type Name="OleDbRowUpdatedEventArgs" Kind="Class" />
      <Type Name="OleDbRowUpdatedEventHandler" Kind="Delegate" />
      <Type Name="OleDbRowUpdatingEventArgs" Kind="Class" />
      <Type Name="OleDbRowUpdatingEventHandler" Kind="Delegate" />
      <Type Name="OleDbSchemaGuid" Kind="Class" />
      <Type Name="OleDbTransaction" Kind="Class" />
      <Type Name="OleDbType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.OracleClient">
      <Type Name="OracleBFile" Kind="Class" />
      <Type Name="OracleBinary" Kind="Structure" />
      <Type Name="OracleBoolean" Kind="Structure" />
      <Type Name="OracleClientFactory" Kind="Class" />
      <Type Name="OracleCommand" Kind="Class" />
      <Type Name="OracleCommandBuilder" Kind="Class" />
      <Type Name="OracleConnection" Kind="Class" />
      <Type Name="OracleConnectionStringBuilder" Kind="Class" />
      <Type Name="OracleDataAdapter" Kind="Class" />
      <Type Name="OracleDataReader" Kind="Class" />
      <Type Name="OracleDateTime" Kind="Structure" />
      <Type Name="OracleException" Kind="Class" />
      <Type Name="OracleInfoMessageEventArgs" Kind="Class" />
      <Type Name="OracleInfoMessageEventHandler" Kind="Delegate" />
      <Type Name="OracleLob" Kind="Class" />
      <Type Name="OracleLobOpenMode" Kind="Enumeration" />
      <Type Name="OracleMonthSpan" Kind="Structure" />
      <Type Name="OracleNumber" Kind="Structure" />
      <Type Name="OracleParameter" Kind="Class" />
      <Type Name="OracleParameterCollection" Kind="Class" />
      <Type Name="OraclePermission" Kind="Class" />
      <Type Name="OraclePermissionAttribute" Kind="Class" />
      <Type Name="OracleRowUpdatedEventArgs" Kind="Class" />
      <Type Name="OracleRowUpdatedEventHandler" Kind="Delegate" />
      <Type Name="OracleRowUpdatingEventArgs" Kind="Class" />
      <Type Name="OracleRowUpdatingEventHandler" Kind="Delegate" />
      <Type Name="OracleString" Kind="Structure" />
      <Type Name="OracleTimeSpan" Kind="Structure" />
      <Type Name="OracleTransaction" Kind="Class" />
      <Type Name="OracleType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.Services">
      <Type Name="ChangeInterceptorAttribute" Kind="Class" />
      <Type Name="DataService`1" DisplayName="DataService&lt;T&gt;" Kind="Class" />
      <Type Name="DataServiceBehavior" Kind="Class" />
      <Type Name="DataServiceConfiguration" Kind="Class" />
      <Type Name="DataServiceException" Kind="Class" />
      <Type Name="DataServiceHost" Kind="Class" />
      <Type Name="DataServiceHostFactory" Kind="Class" />
      <Type Name="DataServiceOperationContext" Kind="Class" />
      <Type Name="DataServiceProcessingPipeline" Kind="Class" />
      <Type Name="DataServiceProcessingPipelineEventArgs" Kind="Class" />
      <Type Name="EntitySetRights" Kind="Enumeration" />
      <Type Name="ETagAttribute" Kind="Class" />
      <Type Name="ExpandSegment" Kind="Class" />
      <Type Name="ExpandSegmentCollection" Kind="Class" />
      <Type Name="HandleExceptionArgs" Kind="Class" />
      <Type Name="IDataServiceConfiguration" Kind="Interface" />
      <Type Name="IDataServiceHost" Kind="Interface" />
      <Type Name="IDataServiceHost2" Kind="Interface" />
      <Type Name="IExpandedResult" Kind="Interface" />
      <Type Name="IExpandProvider" Kind="Interface" />
      <Type Name="IgnorePropertiesAttribute" Kind="Class" />
      <Type Name="IRequestHandler" Kind="Interface" />
      <Type Name="IUpdatable" Kind="Interface" />
      <Type Name="MimeTypeAttribute" Kind="Class" />
      <Type Name="ProcessRequestArgs" Kind="Class" />
      <Type Name="QueryInterceptorAttribute" Kind="Class" />
      <Type Name="ServiceOperationRights" Kind="Enumeration" />
      <Type Name="SingleResultAttribute" Kind="Class" />
      <Type Name="UpdateOperations" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.Services.BuildProvider">
      <Type Name="DataServiceBuildProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Services.Client">
      <Type Name="ChangeOperationResponse" Kind="Class" />
      <Type Name="DataServiceClientException" Kind="Class" />
      <Type Name="DataServiceCollection`1" DisplayName="DataServiceCollection&lt;T&gt;" Kind="Class" />
      <Type Name="DataServiceContext" Kind="Class" />
      <Type Name="DataServiceQuery" Kind="Class" />
      <Type Name="DataServiceQuery`1" DisplayName="DataServiceQuery&lt;TElement&gt;" Kind="Class" />
      <Type Name="DataServiceQueryContinuation" Kind="Class" />
      <Type Name="DataServiceQueryContinuation`1" DisplayName="DataServiceQueryContinuation&lt;T&gt;" Kind="Class" />
      <Type Name="DataServiceQueryException" Kind="Class" />
      <Type Name="DataServiceRequest" Kind="Class" />
      <Type Name="DataServiceRequest`1" DisplayName="DataServiceRequest&lt;TElement&gt;" Kind="Class" />
      <Type Name="DataServiceRequestArgs" Kind="Class" />
      <Type Name="DataServiceRequestException" Kind="Class" />
      <Type Name="DataServiceResponse" Kind="Class" />
      <Type Name="DataServiceStreamResponse" Kind="Class" />
      <Type Name="Descriptor" Kind="Class" />
      <Type Name="EntityChangedParams" Kind="Class" />
      <Type Name="EntityCollectionChangedParams" Kind="Class" />
      <Type Name="EntityDescriptor" Kind="Class" />
      <Type Name="EntityStates" Kind="Enumeration" />
      <Type Name="LinkDescriptor" Kind="Class" />
      <Type Name="MediaEntryAttribute" Kind="Class" />
      <Type Name="MergeOption" Kind="Enumeration" />
      <Type Name="MimeTypePropertyAttribute" Kind="Class" />
      <Type Name="OperationResponse" Kind="Class" />
      <Type Name="QueryOperationResponse" Kind="Class" />
      <Type Name="QueryOperationResponse`1" DisplayName="QueryOperationResponse&lt;T&gt;" Kind="Class" />
      <Type Name="ReadingWritingEntityEventArgs" Kind="Class" />
      <Type Name="SaveChangesOptions" Kind="Enumeration" />
      <Type Name="SendingRequestEventArgs" Kind="Class" />
      <Type Name="TrackingMode" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.Services.Common">
      <Type Name="DataServiceEntityAttribute" Kind="Class" />
      <Type Name="DataServiceKeyAttribute" Kind="Class" />
      <Type Name="DataServiceProtocolVersion" Kind="Enumeration" />
      <Type Name="EntityPropertyMappingAttribute" Kind="Class" />
      <Type Name="EntitySetAttribute" Kind="Class" />
      <Type Name="HasStreamAttribute" Kind="Class" />
      <Type Name="SyndicationItemProperty" Kind="Enumeration" />
      <Type Name="SyndicationTextContentKind" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.Services.Configuration">
      <Type Name="DataServicesFeaturesSection" Kind="Class" />
      <Type Name="DataServicesReplaceFunctionFeature" Kind="Class" />
      <Type Name="DataServicesSectionGroup" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Services.Design">
      <Type Name="DataServiceCodeVersion" Kind="Enumeration" />
      <Type Name="EdmToObjectNamespaceMap" Kind="Class" />
      <Type Name="EntityClassGenerator" Kind="Class" />
      <Type Name="LanguageOption" Kind="Enumeration" />
      <Type Name="PropertyGeneratedEventArgs" Kind="Class" />
      <Type Name="TypeGeneratedEventArgs" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Services.Internal">
      <Type Name="ExpandedWrapper`1" DisplayName="ExpandedWrapper&lt;TExpandedElement&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`10" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1,TProperty2,TProperty3,TProperty4,TProperty5,TProperty6,TProperty7,TProperty8&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`11" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1,TProperty2,TProperty3,TProperty4,TProperty5,TProperty6,TProperty7,TProperty8,TProperty9&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`12" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1,TProperty2,TProperty3,TProperty4,TProperty5,TProperty6,TProperty7,TProperty8,TProperty9,TProperty10&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`13" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1,TProperty2,TProperty3,TProperty4,TProperty5,TProperty6,TProperty7,TProperty8,TProperty9,TProperty10,TProperty11&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`2" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`3" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`4" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1,TProperty2&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`5" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1,TProperty2,TProperty3&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`6" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1,TProperty2,TProperty3,TProperty4&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`7" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1,TProperty2,TProperty3,TProperty4,TProperty5&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`8" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1,TProperty2,TProperty3,TProperty4,TProperty5,TProperty6&gt;" Kind="Class" />
      <Type Name="ExpandedWrapper`9" DisplayName="ExpandedWrapper&lt;TExpandedElement,TProperty0,TProperty1,TProperty2,TProperty3,TProperty4,TProperty5,TProperty6,TProperty7&gt;" Kind="Class" />
      <Type Name="ProjectedWrapper" Kind="Class" />
      <Type Name="ProjectedWrapper0" Kind="Class" />
      <Type Name="ProjectedWrapper1" Kind="Class" />
      <Type Name="ProjectedWrapper2" Kind="Class" />
      <Type Name="ProjectedWrapper3" Kind="Class" />
      <Type Name="ProjectedWrapper4" Kind="Class" />
      <Type Name="ProjectedWrapper5" Kind="Class" />
      <Type Name="ProjectedWrapper6" Kind="Class" />
      <Type Name="ProjectedWrapper7" Kind="Class" />
      <Type Name="ProjectedWrapper8" Kind="Class" />
      <Type Name="ProjectedWrapperMany" Kind="Class" />
      <Type Name="ProjectedWrapperManyEnd" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Services.Providers">
      <Type Name="DataServiceProviderMethods" Kind="Class" />
      <Type Name="IDataServiceMetadataProvider" Kind="Interface" />
      <Type Name="IDataServicePagingProvider" Kind="Interface" />
      <Type Name="IDataServiceQueryProvider" Kind="Interface" />
      <Type Name="IDataServiceStreamProvider" Kind="Interface" />
      <Type Name="IDataServiceUpdateProvider" Kind="Interface" />
      <Type Name="OpenTypeMethods" Kind="Class" />
      <Type Name="ResourceAssociationSet" Kind="Class" />
      <Type Name="ResourceAssociationSetEnd" Kind="Class" />
      <Type Name="ResourceProperty" Kind="Class" />
      <Type Name="ResourcePropertyKind" Kind="Enumeration" />
      <Type Name="ResourceSet" Kind="Class" />
      <Type Name="ResourceType" Kind="Class" />
      <Type Name="ResourceTypeKind" Kind="Enumeration" />
      <Type Name="ServiceOperation" Kind="Class" />
      <Type Name="ServiceOperationParameter" Kind="Class" />
      <Type Name="ServiceOperationResultKind" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Data.Spatial">
      <Type Name="DbGeography" Kind="Class" />
      <Type Name="DbGeographyWellKnownValue" Kind="Class" />
      <Type Name="DbGeometry" Kind="Class" />
      <Type Name="DbGeometryWellKnownValue" Kind="Class" />
      <Type Name="DbSpatialDataReader" Kind="Class" />
      <Type Name="DbSpatialServices" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.Sql">
      <Type Name="SqlDataSourceEnumerator" Kind="Class" />
      <Type Name="SqlNotificationRequest" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.SqlClient">
      <Type Name="ApplicationIntent" Kind="Enumeration" />
      <Type Name="OnChangeEventHandler" Kind="Delegate" />
      <Type Name="PoolBlockingPeriod" Kind="Enumeration" />
      <Type Name="SortOrder" Kind="Enumeration" />
      <Type Name="SqlAuthenticationMethod" Kind="Enumeration" />
      <Type Name="SqlBulkCopy" Kind="Class" />
      <Type Name="SqlBulkCopyColumnMapping" Kind="Class" />
      <Type Name="SqlBulkCopyColumnMappingCollection" Kind="Class" />
      <Type Name="SqlBulkCopyOptions" Kind="Enumeration" />
      <Type Name="SqlClientFactory" Kind="Class" />
      <Type Name="SqlClientMetaDataCollectionNames" Kind="Class" />
      <Type Name="SqlClientPermission" Kind="Class" />
      <Type Name="SqlClientPermissionAttribute" Kind="Class" />
      <Type Name="SqlColumnEncryptionCertificateStoreProvider" Kind="Class" />
      <Type Name="SqlColumnEncryptionCngProvider" Kind="Class" />
      <Type Name="SqlColumnEncryptionCspProvider" Kind="Class" />
      <Type Name="SqlColumnEncryptionKeyStoreProvider" Kind="Class" />
      <Type Name="SqlCommand" Kind="Class" />
      <Type Name="SqlCommandBuilder" Kind="Class" />
      <Type Name="SqlCommandColumnEncryptionSetting" Kind="Enumeration" />
      <Type Name="SqlConnection" Kind="Class" />
      <Type Name="SqlConnectionColumnEncryptionSetting" Kind="Enumeration" />
      <Type Name="SqlConnectionStringBuilder" Kind="Class" />
      <Type Name="SqlCredential" Kind="Class" />
      <Type Name="SqlDataAdapter" Kind="Class" />
      <Type Name="SqlDataReader" Kind="Class" />
      <Type Name="SQLDebugging" Kind="Class" />
      <Type Name="SqlDependency" Kind="Class" />
      <Type Name="SqlError" Kind="Class" />
      <Type Name="SqlErrorCollection" Kind="Class" />
      <Type Name="SqlException" Kind="Class" />
      <Type Name="SqlInfoMessageEventArgs" Kind="Class" />
      <Type Name="SqlInfoMessageEventHandler" Kind="Delegate" />
      <Type Name="SqlNotificationEventArgs" Kind="Class" />
      <Type Name="SqlNotificationInfo" Kind="Enumeration" />
      <Type Name="SqlNotificationSource" Kind="Enumeration" />
      <Type Name="SqlNotificationType" Kind="Enumeration" />
      <Type Name="SqlParameter" Kind="Class" />
      <Type Name="SqlParameterCollection" Kind="Class" />
      <Type Name="SqlProviderServices" Kind="Class" />
      <Type Name="SqlRowsCopiedEventArgs" Kind="Class" />
      <Type Name="SqlRowsCopiedEventHandler" Kind="Delegate" />
      <Type Name="SqlRowUpdatedEventArgs" Kind="Class" />
      <Type Name="SqlRowUpdatedEventHandler" Kind="Delegate" />
      <Type Name="SqlRowUpdatingEventArgs" Kind="Class" />
      <Type Name="SqlRowUpdatingEventHandler" Kind="Delegate" />
      <Type Name="SqlTransaction" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Data.SqlTypes">
      <Type Name="INullable" Kind="Interface" />
      <Type Name="SqlAlreadyFilledException" Kind="Class" />
      <Type Name="SqlBinary" Kind="Structure" />
      <Type Name="SqlBoolean" Kind="Structure" />
      <Type Name="SqlByte" Kind="Structure" />
      <Type Name="SqlBytes" Kind="Class" />
      <Type Name="SqlChars" Kind="Class" />
      <Type Name="SqlCompareOptions" Kind="Enumeration" />
      <Type Name="SqlDateTime" Kind="Structure" />
      <Type Name="SqlDecimal" Kind="Structure" />
      <Type Name="SqlDouble" Kind="Structure" />
      <Type Name="SqlFileStream" Kind="Class" />
      <Type Name="SqlGuid" Kind="Structure" />
      <Type Name="SqlInt16" Kind="Structure" />
      <Type Name="SqlInt32" Kind="Structure" />
      <Type Name="SqlInt64" Kind="Structure" />
      <Type Name="SqlMoney" Kind="Structure" />
      <Type Name="SqlNotFilledException" Kind="Class" />
      <Type Name="SqlNullValueException" Kind="Class" />
      <Type Name="SqlSingle" Kind="Structure" />
      <Type Name="SqlString" Kind="Structure" />
      <Type Name="SqlTruncateException" Kind="Class" />
      <Type Name="SqlTypeException" Kind="Class" />
      <Type Name="SqlTypesSchemaImporterExtensionHelper" Kind="Class" />
      <Type Name="SqlXml" Kind="Class" />
      <Type Name="StorageState" Kind="Enumeration" />
      <Type Name="TypeBigIntSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeBinarySchemaImporterExtension" Kind="Class" />
      <Type Name="TypeBitSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeCharSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeDateTimeSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeDecimalSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeFloatSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeIntSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeMoneySchemaImporterExtension" Kind="Class" />
      <Type Name="TypeNCharSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeNTextSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeNumericSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeNVarCharSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeRealSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeSmallDateTimeSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeSmallIntSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeSmallMoneySchemaImporterExtension" Kind="Class" />
      <Type Name="TypeTextSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeTinyIntSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeUniqueIdentifierSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeVarBinarySchemaImporterExtension" Kind="Class" />
      <Type Name="TypeVarCharSchemaImporterExtension" Kind="Class" />
      <Type Name="TypeVarImageSchemaImporterExtension" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Deployment.Application">
      <Type Name="ApplicationDeployment" Kind="Class" />
      <Type Name="CheckForUpdateCompletedEventArgs" Kind="Class" />
      <Type Name="CheckForUpdateCompletedEventHandler" Kind="Delegate" />
      <Type Name="CompatibleFramework" Kind="Class" />
      <Type Name="CompatibleFrameworkMissingException" Kind="Class" />
      <Type Name="CompatibleFrameworks" Kind="Class" />
      <Type Name="DependentPlatformMissingException" Kind="Class" />
      <Type Name="DeploymentDownloadException" Kind="Class" />
      <Type Name="DeploymentException" Kind="Class" />
      <Type Name="DeploymentProgressChangedEventArgs" Kind="Class" />
      <Type Name="DeploymentProgressChangedEventHandler" Kind="Delegate" />
      <Type Name="DeploymentProgressState" Kind="Enumeration" />
      <Type Name="DeploymentServiceCom" Kind="Class" />
      <Type Name="DownloadApplicationCompletedEventArgs" Kind="Class" />
      <Type Name="DownloadFileGroupCompletedEventArgs" Kind="Class" />
      <Type Name="DownloadFileGroupCompletedEventHandler" Kind="Delegate" />
      <Type Name="DownloadProgressChangedEventArgs" Kind="Class" />
      <Type Name="GetManifestCompletedEventArgs" Kind="Class" />
      <Type Name="InPlaceHostingManager" Kind="Class" />
      <Type Name="InvalidDeploymentException" Kind="Class" />
      <Type Name="SupportedRuntimeMissingException" Kind="Class" />
      <Type Name="TrustNotGrantedException" Kind="Class" />
      <Type Name="UpdateCheckInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Deployment.Internal">
      <Type Name="InternalActivationContextHelper" Kind="Class" />
      <Type Name="InternalApplicationIdentityHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Deployment.Internal.CodeSigning">
      <Type Name="RSAPKCS1SHA256SignatureDescription" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Device.Location">
      <Type Name="CivicAddress" Kind="Class" />
      <Type Name="CivicAddressResolver" Kind="Class" />
      <Type Name="GeoCoordinate" Kind="Class" />
      <Type Name="GeoCoordinateWatcher" Kind="Class" />
      <Type Name="GeoPosition`1" DisplayName="GeoPosition&lt;T&gt;" Kind="Class" />
      <Type Name="GeoPositionAccuracy" Kind="Enumeration" />
      <Type Name="GeoPositionChangedEventArgs`1" DisplayName="GeoPositionChangedEventArgs&lt;T&gt;" Kind="Class" />
      <Type Name="GeoPositionPermission" Kind="Enumeration" />
      <Type Name="GeoPositionStatus" Kind="Enumeration" />
      <Type Name="GeoPositionStatusChangedEventArgs" Kind="Class" />
      <Type Name="ICivicAddressResolver" Kind="Interface" />
      <Type Name="IGeoPositionWatcher`1" DisplayName="IGeoPositionWatcher&lt;T&gt;" Kind="Interface" />
      <Type Name="ResolveAddressCompletedEventArgs" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Diagnostics">
      <Type Name="ConditionalAttribute" Kind="Class" />
      <Type Name="DebuggableAttribute" Kind="Class" />
      <Type Name="DebuggableAttribute+DebuggingModes" Kind="Enumeration" />
      <Type Name="Debugger" Kind="Class" />
      <Type Name="DebuggerBrowsableAttribute" Kind="Class" />
      <Type Name="DebuggerBrowsableState" Kind="Enumeration" />
      <Type Name="DebuggerDisplayAttribute" Kind="Class" />
      <Type Name="DebuggerHiddenAttribute" Kind="Class" />
      <Type Name="DebuggerNonUserCodeAttribute" Kind="Class" />
      <Type Name="DebuggerStepperBoundaryAttribute" Kind="Class" />
      <Type Name="DebuggerStepThroughAttribute" Kind="Class" />
      <Type Name="DebuggerTypeProxyAttribute" Kind="Class" />
      <Type Name="DebuggerVisualizerAttribute" Kind="Class" />
      <Type Name="EventLogInstaller" Kind="Class" />
      <Type Name="EventSchemaTraceListener" Kind="Class" />
      <Type Name="PerformanceCounterInstaller" Kind="Class" />
      <Type Name="StackFrame" Kind="Class" />
      <Type Name="StackTrace" Kind="Class" />
      <Type Name="TraceLogRetentionOption" Kind="Enumeration" />
      <Type Name="UnescapedXmlDiagnosticData" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Diagnostics.CodeAnalysis">
      <Type Name="SuppressMessageAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Diagnostics.Contracts">
      <Type Name="Contract" Kind="Class" />
      <Type Name="ContractAbbreviatorAttribute" Kind="Class" />
      <Type Name="ContractArgumentValidatorAttribute" Kind="Class" />
      <Type Name="ContractClassAttribute" Kind="Class" />
      <Type Name="ContractClassForAttribute" Kind="Class" />
      <Type Name="ContractFailedEventArgs" Kind="Class" />
      <Type Name="ContractFailureKind" Kind="Enumeration" />
      <Type Name="ContractInvariantMethodAttribute" Kind="Class" />
      <Type Name="ContractOptionAttribute" Kind="Class" />
      <Type Name="ContractPublicPropertyNameAttribute" Kind="Class" />
      <Type Name="ContractReferenceAssemblyAttribute" Kind="Class" />
      <Type Name="ContractRuntimeIgnoredAttribute" Kind="Class" />
      <Type Name="ContractVerificationAttribute" Kind="Class" />
      <Type Name="PureAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Diagnostics.Contracts.Internal">
      <Type Name="ContractHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Diagnostics.Design">
      <Type Name="LogConverter" Kind="Class" />
      <Type Name="ProcessDesigner" Kind="Class" />
      <Type Name="ProcessModuleDesigner" Kind="Class" />
      <Type Name="ProcessThreadDesigner" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Diagnostics.Eventing">
      <Type Name="EventDescriptor" Kind="Structure" />
      <Type Name="EventProvider" Kind="Class" />
      <Type Name="EventProvider+WriteEventErrorCode" Kind="Enumeration" />
      <Type Name="EventProviderTraceListener" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Diagnostics.Eventing.Reader">
      <Type Name="EventBookmark" Kind="Class" />
      <Type Name="EventKeyword" Kind="Class" />
      <Type Name="EventLevel" Kind="Class" />
      <Type Name="EventLogConfiguration" Kind="Class" />
      <Type Name="EventLogException" Kind="Class" />
      <Type Name="EventLogInformation" Kind="Class" />
      <Type Name="EventLogInvalidDataException" Kind="Class" />
      <Type Name="EventLogIsolation" Kind="Enumeration" />
      <Type Name="EventLogLink" Kind="Class" />
      <Type Name="EventLogMode" Kind="Enumeration" />
      <Type Name="EventLogNotFoundException" Kind="Class" />
      <Type Name="EventLogPropertySelector" Kind="Class" />
      <Type Name="EventLogProviderDisabledException" Kind="Class" />
      <Type Name="EventLogQuery" Kind="Class" />
      <Type Name="EventLogReader" Kind="Class" />
      <Type Name="EventLogReadingException" Kind="Class" />
      <Type Name="EventLogRecord" Kind="Class" />
      <Type Name="EventLogSession" Kind="Class" />
      <Type Name="EventLogStatus" Kind="Class" />
      <Type Name="EventLogType" Kind="Enumeration" />
      <Type Name="EventLogWatcher" Kind="Class" />
      <Type Name="EventMetadata" Kind="Class" />
      <Type Name="EventOpcode" Kind="Class" />
      <Type Name="EventProperty" Kind="Class" />
      <Type Name="EventRecord" Kind="Class" />
      <Type Name="EventRecordWrittenEventArgs" Kind="Class" />
      <Type Name="EventTask" Kind="Class" />
      <Type Name="PathType" Kind="Enumeration" />
      <Type Name="ProviderMetadata" Kind="Class" />
      <Type Name="SessionAuthentication" Kind="Enumeration" />
      <Type Name="StandardEventKeywords" Kind="Enumeration" />
      <Type Name="StandardEventLevel" Kind="Enumeration" />
      <Type Name="StandardEventOpcode" Kind="Enumeration" />
      <Type Name="StandardEventTask" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Diagnostics.PerformanceData">
      <Type Name="CounterData" Kind="Class" />
      <Type Name="CounterSet" Kind="Class" />
      <Type Name="CounterSetInstance" Kind="Class" />
      <Type Name="CounterSetInstanceCounterDataSet" Kind="Class" />
      <Type Name="CounterSetInstanceType" Kind="Enumeration" />
      <Type Name="CounterType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Diagnostics.SymbolStore">
      <Type Name="ISymbolBinder" Kind="Interface" />
      <Type Name="ISymbolBinder1" Kind="Interface" />
      <Type Name="ISymbolDocument" Kind="Interface" />
      <Type Name="ISymbolDocumentWriter" Kind="Interface" />
      <Type Name="ISymbolMethod" Kind="Interface" />
      <Type Name="ISymbolNamespace" Kind="Interface" />
      <Type Name="ISymbolReader" Kind="Interface" />
      <Type Name="ISymbolScope" Kind="Interface" />
      <Type Name="ISymbolVariable" Kind="Interface" />
      <Type Name="ISymbolWriter" Kind="Interface" />
      <Type Name="SymAddressKind" Kind="Enumeration" />
      <Type Name="SymBinder" Kind="Class" />
      <Type Name="SymBinderBase" Kind="Class" />
      <Type Name="SymbolToken" Kind="Structure" />
      <Type Name="SymDocument" Kind="Class" />
      <Type Name="SymDocumentBase" Kind="Class" />
      <Type Name="SymDocumentType" Kind="Class" />
      <Type Name="SymDocumentWriter" Kind="Class" />
      <Type Name="SymDocumentWriterBase" Kind="Class" />
      <Type Name="SymLanguageType" Kind="Class" />
      <Type Name="SymLanguageVendor" Kind="Class" />
      <Type Name="SymMethod" Kind="Class" />
      <Type Name="SymMethodBase" Kind="Class" />
      <Type Name="SymReader" Kind="Class" />
      <Type Name="SymReaderBase" Kind="Class" />
      <Type Name="SymScope" Kind="Class" />
      <Type Name="SymScopeBase" Kind="Class" />
      <Type Name="SymVariable" Kind="Class" />
      <Type Name="SymVariableBase" Kind="Class" />
      <Type Name="SymWriter" Kind="Class" />
      <Type Name="SymWriterBase" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Diagnostics.Tracing">
      <Type Name="EventActivityOptions" Kind="Enumeration" />
      <Type Name="EventAttribute" Kind="Class" />
      <Type Name="EventChannel" Kind="Enumeration" />
      <Type Name="EventCommand" Kind="Enumeration" />
      <Type Name="EventCommandEventArgs" Kind="Class" />
      <Type Name="EventDataAttribute" Kind="Class" />
      <Type Name="EventFieldAttribute" Kind="Class" />
      <Type Name="EventFieldFormat" Kind="Enumeration" />
      <Type Name="EventFieldTags" Kind="Enumeration" />
      <Type Name="EventIgnoreAttribute" Kind="Class" />
      <Type Name="EventKeywords" Kind="Enumeration" />
      <Type Name="EventLevel" Kind="Enumeration" />
      <Type Name="EventListener" Kind="Class" />
      <Type Name="EventManifestOptions" Kind="Enumeration" />
      <Type Name="EventOpcode" Kind="Enumeration" />
      <Type Name="EventSource" Kind="Class" />
      <Type Name="EventSource+EventData" Kind="Structure" />
      <Type Name="EventSourceAttribute" Kind="Class" />
      <Type Name="EventSourceCreatedEventArgs" Kind="Class" />
      <Type Name="EventSourceException" Kind="Class" />
      <Type Name="EventSourceOptions" Kind="Structure" />
      <Type Name="EventSourceSettings" Kind="Enumeration" />
      <Type Name="EventTags" Kind="Enumeration" />
      <Type Name="EventTask" Kind="Enumeration" />
      <Type Name="EventWrittenEventArgs" Kind="Class" />
      <Type Name="NonEventAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.DirectoryServices">
      <Type Name="ActiveDirectoryAccessRule" Kind="Class" />
      <Type Name="ActiveDirectoryAuditRule" Kind="Class" />
      <Type Name="ActiveDirectoryRights" Kind="Enumeration" />
      <Type Name="ActiveDirectorySecurity" Kind="Class" />
      <Type Name="ActiveDirectorySecurityInheritance" Kind="Enumeration" />
      <Type Name="AuthenticationTypes" Kind="Enumeration" />
      <Type Name="CreateChildAccessRule" Kind="Class" />
      <Type Name="DeleteChildAccessRule" Kind="Class" />
      <Type Name="DeleteTreeAccessRule" Kind="Class" />
      <Type Name="DereferenceAlias" Kind="Enumeration" />
      <Type Name="DirectoryEntries" Kind="Class" />
      <Type Name="DirectoryEntry" Kind="Class" />
      <Type Name="DirectoryEntryConfiguration" Kind="Class" />
      <Type Name="DirectorySearcher" Kind="Class" />
      <Type Name="DirectoryServicesCOMException" Kind="Class" />
      <Type Name="DirectoryServicesPermission" Kind="Class" />
      <Type Name="DirectoryServicesPermissionAccess" Kind="Enumeration" />
      <Type Name="DirectoryServicesPermissionAttribute" Kind="Class" />
      <Type Name="DirectoryServicesPermissionEntry" Kind="Class" />
      <Type Name="DirectoryServicesPermissionEntryCollection" Kind="Class" />
      <Type Name="DirectorySynchronization" Kind="Class" />
      <Type Name="DirectorySynchronizationOptions" Kind="Enumeration" />
      <Type Name="DirectoryVirtualListView" Kind="Class" />
      <Type Name="DirectoryVirtualListViewContext" Kind="Class" />
      <Type Name="DSDescriptionAttribute" Kind="Class" />
      <Type Name="ExtendedDN" Kind="Enumeration" />
      <Type Name="ExtendedRightAccessRule" Kind="Class" />
      <Type Name="ListChildrenAccessRule" Kind="Class" />
      <Type Name="PasswordEncodingMethod" Kind="Enumeration" />
      <Type Name="PropertyAccess" Kind="Enumeration" />
      <Type Name="PropertyAccessRule" Kind="Class" />
      <Type Name="PropertyCollection" Kind="Class" />
      <Type Name="PropertySetAccessRule" Kind="Class" />
      <Type Name="PropertyValueCollection" Kind="Class" />
      <Type Name="ReferralChasingOption" Kind="Enumeration" />
      <Type Name="ResultPropertyCollection" Kind="Class" />
      <Type Name="ResultPropertyValueCollection" Kind="Class" />
      <Type Name="SchemaNameCollection" Kind="Class" />
      <Type Name="SearchResult" Kind="Class" />
      <Type Name="SearchResultCollection" Kind="Class" />
      <Type Name="SearchScope" Kind="Enumeration" />
      <Type Name="SecurityMasks" Kind="Enumeration" />
      <Type Name="SortDirection" Kind="Enumeration" />
      <Type Name="SortOption" Kind="Class" />
    </Namespace>
    <Namespace Name="System.DirectoryServices.AccountManagement">
      <Type Name="AdvancedFilters" Kind="Class" />
      <Type Name="AuthenticablePrincipal" Kind="Class" />
      <Type Name="ComputerPrincipal" Kind="Class" />
      <Type Name="ContextOptions" Kind="Enumeration" />
      <Type Name="ContextType" Kind="Enumeration" />
      <Type Name="DirectoryObjectClassAttribute" Kind="Class" />
      <Type Name="DirectoryPropertyAttribute" Kind="Class" />
      <Type Name="DirectoryRdnPrefixAttribute" Kind="Class" />
      <Type Name="GroupPrincipal" Kind="Class" />
      <Type Name="GroupScope" Kind="Enumeration" />
      <Type Name="IdentityType" Kind="Enumeration" />
      <Type Name="MatchType" Kind="Enumeration" />
      <Type Name="MultipleMatchesException" Kind="Class" />
      <Type Name="NoMatchingPrincipalException" Kind="Class" />
      <Type Name="PasswordException" Kind="Class" />
      <Type Name="Principal" Kind="Class" />
      <Type Name="PrincipalCollection" Kind="Class" />
      <Type Name="PrincipalContext" Kind="Class" />
      <Type Name="PrincipalException" Kind="Class" />
      <Type Name="PrincipalExistsException" Kind="Class" />
      <Type Name="PrincipalOperationException" Kind="Class" />
      <Type Name="PrincipalSearcher" Kind="Class" />
      <Type Name="PrincipalSearchResult`1" DisplayName="PrincipalSearchResult&lt;T&gt;" Kind="Class" />
      <Type Name="PrincipalServerDownException" Kind="Class" />
      <Type Name="PrincipalValueCollection`1" DisplayName="PrincipalValueCollection&lt;T&gt;" Kind="Class" />
      <Type Name="UserPrincipal" Kind="Class" />
    </Namespace>
    <Namespace Name="System.DirectoryServices.ActiveDirectory">
      <Type Name="ActiveDirectoryInterSiteTransport" Kind="Class" />
      <Type Name="ActiveDirectoryObjectExistsException" Kind="Class" />
      <Type Name="ActiveDirectoryObjectNotFoundException" Kind="Class" />
      <Type Name="ActiveDirectoryOperationException" Kind="Class" />
      <Type Name="ActiveDirectoryPartition" Kind="Class" />
      <Type Name="ActiveDirectoryReplicationMetadata" Kind="Class" />
      <Type Name="ActiveDirectoryRole" Kind="Enumeration" />
      <Type Name="ActiveDirectoryRoleCollection" Kind="Class" />
      <Type Name="ActiveDirectorySchedule" Kind="Class" />
      <Type Name="ActiveDirectorySchema" Kind="Class" />
      <Type Name="ActiveDirectorySchemaClass" Kind="Class" />
      <Type Name="ActiveDirectorySchemaClassCollection" Kind="Class" />
      <Type Name="ActiveDirectorySchemaProperty" Kind="Class" />
      <Type Name="ActiveDirectorySchemaPropertyCollection" Kind="Class" />
      <Type Name="ActiveDirectoryServerDownException" Kind="Class" />
      <Type Name="ActiveDirectorySite" Kind="Class" />
      <Type Name="ActiveDirectorySiteCollection" Kind="Class" />
      <Type Name="ActiveDirectorySiteLink" Kind="Class" />
      <Type Name="ActiveDirectorySiteLinkBridge" Kind="Class" />
      <Type Name="ActiveDirectorySiteLinkCollection" Kind="Class" />
      <Type Name="ActiveDirectorySiteOptions" Kind="Enumeration" />
      <Type Name="ActiveDirectorySubnet" Kind="Class" />
      <Type Name="ActiveDirectorySubnetCollection" Kind="Class" />
      <Type Name="ActiveDirectorySyntax" Kind="Enumeration" />
      <Type Name="ActiveDirectoryTransportType" Kind="Enumeration" />
      <Type Name="AdamInstance" Kind="Class" />
      <Type Name="AdamInstanceCollection" Kind="Class" />
      <Type Name="AdamRole" Kind="Enumeration" />
      <Type Name="AdamRoleCollection" Kind="Class" />
      <Type Name="ApplicationPartition" Kind="Class" />
      <Type Name="ApplicationPartitionCollection" Kind="Class" />
      <Type Name="AttributeMetadata" Kind="Class" />
      <Type Name="AttributeMetadataCollection" Kind="Class" />
      <Type Name="ConfigurationSet" Kind="Class" />
      <Type Name="DirectoryContext" Kind="Class" />
      <Type Name="DirectoryContextType" Kind="Enumeration" />
      <Type Name="DirectoryServer" Kind="Class" />
      <Type Name="DirectoryServerCollection" Kind="Class" />
      <Type Name="Domain" Kind="Class" />
      <Type Name="DomainCollection" Kind="Class" />
      <Type Name="DomainCollisionOptions" Kind="Enumeration" />
      <Type Name="DomainController" Kind="Class" />
      <Type Name="DomainControllerCollection" Kind="Class" />
      <Type Name="DomainMode" Kind="Enumeration" />
      <Type Name="Forest" Kind="Class" />
      <Type Name="ForestMode" Kind="Enumeration" />
      <Type Name="ForestTrustCollisionException" Kind="Class" />
      <Type Name="ForestTrustCollisionType" Kind="Enumeration" />
      <Type Name="ForestTrustDomainInfoCollection" Kind="Class" />
      <Type Name="ForestTrustDomainInformation" Kind="Class" />
      <Type Name="ForestTrustDomainStatus" Kind="Enumeration" />
      <Type Name="ForestTrustRelationshipCollision" Kind="Class" />
      <Type Name="ForestTrustRelationshipCollisionCollection" Kind="Class" />
      <Type Name="ForestTrustRelationshipInformation" Kind="Class" />
      <Type Name="GlobalCatalog" Kind="Class" />
      <Type Name="GlobalCatalogCollection" Kind="Class" />
      <Type Name="HourOfDay" Kind="Enumeration" />
      <Type Name="LocatorOptions" Kind="Enumeration" />
      <Type Name="MinuteOfHour" Kind="Enumeration" />
      <Type Name="NotificationStatus" Kind="Enumeration" />
      <Type Name="PropertyTypes" Kind="Enumeration" />
      <Type Name="ReadOnlyActiveDirectorySchemaClassCollection" Kind="Class" />
      <Type Name="ReadOnlyActiveDirectorySchemaPropertyCollection" Kind="Class" />
      <Type Name="ReadOnlyDirectoryServerCollection" Kind="Class" />
      <Type Name="ReadOnlySiteCollection" Kind="Class" />
      <Type Name="ReadOnlySiteLinkBridgeCollection" Kind="Class" />
      <Type Name="ReadOnlySiteLinkCollection" Kind="Class" />
      <Type Name="ReadOnlyStringCollection" Kind="Class" />
      <Type Name="ReplicationConnection" Kind="Class" />
      <Type Name="ReplicationConnectionCollection" Kind="Class" />
      <Type Name="ReplicationCursor" Kind="Class" />
      <Type Name="ReplicationCursorCollection" Kind="Class" />
      <Type Name="ReplicationFailure" Kind="Class" />
      <Type Name="ReplicationFailureCollection" Kind="Class" />
      <Type Name="ReplicationNeighbor" Kind="Class" />
      <Type Name="ReplicationNeighbor+ReplicationNeighborOptions" Kind="Enumeration" />
      <Type Name="ReplicationNeighborCollection" Kind="Class" />
      <Type Name="ReplicationOperation" Kind="Class" />
      <Type Name="ReplicationOperationCollection" Kind="Class" />
      <Type Name="ReplicationOperationInformation" Kind="Class" />
      <Type Name="ReplicationOperationType" Kind="Enumeration" />
      <Type Name="ReplicationSecurityLevel" Kind="Enumeration" />
      <Type Name="ReplicationSpan" Kind="Enumeration" />
      <Type Name="SchemaClassType" Kind="Enumeration" />
      <Type Name="SyncFromAllServersErrorCategory" Kind="Enumeration" />
      <Type Name="SyncFromAllServersErrorInformation" Kind="Class" />
      <Type Name="SyncFromAllServersEvent" Kind="Enumeration" />
      <Type Name="SyncFromAllServersOperationException" Kind="Class" />
      <Type Name="SyncFromAllServersOptions" Kind="Enumeration" />
      <Type Name="SyncUpdateCallback" Kind="Delegate" />
      <Type Name="TopLevelName" Kind="Class" />
      <Type Name="TopLevelNameCollection" Kind="Class" />
      <Type Name="TopLevelNameCollisionOptions" Kind="Enumeration" />
      <Type Name="TopLevelNameStatus" Kind="Enumeration" />
      <Type Name="TrustDirection" Kind="Enumeration" />
      <Type Name="TrustRelationshipInformation" Kind="Class" />
      <Type Name="TrustRelationshipInformationCollection" Kind="Class" />
      <Type Name="TrustType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Dynamic">
      <Type Name="BinaryOperationBinder" Kind="Class" />
      <Type Name="BindingRestrictions" Kind="Class" />
      <Type Name="CallInfo" Kind="Class" />
      <Type Name="ConvertBinder" Kind="Class" />
      <Type Name="CreateInstanceBinder" Kind="Class" />
      <Type Name="DeleteIndexBinder" Kind="Class" />
      <Type Name="DeleteMemberBinder" Kind="Class" />
      <Type Name="DynamicMetaObject" Kind="Class" />
      <Type Name="DynamicMetaObjectBinder" Kind="Class" />
      <Type Name="DynamicObject" Kind="Class" />
      <Type Name="ExpandoObject" Kind="Class" />
      <Type Name="GetIndexBinder" Kind="Class" />
      <Type Name="GetMemberBinder" Kind="Class" />
      <Type Name="IDynamicMetaObjectProvider" Kind="Interface" />
      <Type Name="IInvokeOnGetBinder" Kind="Interface" />
      <Type Name="InvokeBinder" Kind="Class" />
      <Type Name="InvokeMemberBinder" Kind="Class" />
      <Type Name="SetIndexBinder" Kind="Class" />
      <Type Name="SetMemberBinder" Kind="Class" />
      <Type Name="UnaryOperationBinder" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Globalization">
      <Type Name="Calendar" Kind="Class" />
      <Type Name="CalendarAlgorithmType" Kind="Enumeration" />
      <Type Name="CalendarWeekRule" Kind="Enumeration" />
      <Type Name="CharUnicodeInfo" Kind="Class" />
      <Type Name="ChineseLunisolarCalendar" Kind="Class" />
      <Type Name="CompareInfo" Kind="Class" />
      <Type Name="CompareOptions" Kind="Enumeration" />
      <Type Name="CultureAndRegionInfoBuilder" Kind="Class" />
      <Type Name="CultureAndRegionModifiers" Kind="Enumeration" />
      <Type Name="CultureInfo" Kind="Class" />
      <Type Name="CultureNotFoundException" Kind="Class" />
      <Type Name="CultureTypes" Kind="Enumeration" />
      <Type Name="DateTimeFormatInfo" Kind="Class" />
      <Type Name="DateTimeStyles" Kind="Enumeration" />
      <Type Name="DaylightTime" Kind="Class" />
      <Type Name="DigitShapes" Kind="Enumeration" />
      <Type Name="EastAsianLunisolarCalendar" Kind="Class" />
      <Type Name="GregorianCalendar" Kind="Class" />
      <Type Name="GregorianCalendarTypes" Kind="Enumeration" />
      <Type Name="HebrewCalendar" Kind="Class" />
      <Type Name="HijriCalendar" Kind="Class" />
      <Type Name="IdnMapping" Kind="Class" />
      <Type Name="JapaneseCalendar" Kind="Class" />
      <Type Name="JapaneseLunisolarCalendar" Kind="Class" />
      <Type Name="JulianCalendar" Kind="Class" />
      <Type Name="KoreanCalendar" Kind="Class" />
      <Type Name="KoreanLunisolarCalendar" Kind="Class" />
      <Type Name="NumberFormatInfo" Kind="Class" />
      <Type Name="NumberStyles" Kind="Enumeration" />
      <Type Name="PersianCalendar" Kind="Class" />
      <Type Name="RegionInfo" Kind="Class" />
      <Type Name="SortKey" Kind="Class" />
      <Type Name="SortVersion" Kind="Class" />
      <Type Name="StringInfo" Kind="Class" />
      <Type Name="TaiwanCalendar" Kind="Class" />
      <Type Name="TaiwanLunisolarCalendar" Kind="Class" />
      <Type Name="TextElementEnumerator" Kind="Class" />
      <Type Name="TextInfo" Kind="Class" />
      <Type Name="ThaiBuddhistCalendar" Kind="Class" />
      <Type Name="TimeSpanStyles" Kind="Enumeration" />
      <Type Name="UmAlQuraCalendar" Kind="Class" />
      <Type Name="UnicodeCategory" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.IO">
      <Type Name="BinaryReader" Kind="Class" />
      <Type Name="BinaryWriter" Kind="Class" />
      <Type Name="BufferedStream" Kind="Class" />
      <Type Name="Directory" Kind="Class" />
      <Type Name="DirectoryInfo" Kind="Class" />
      <Type Name="DirectoryNotFoundException" Kind="Class" />
      <Type Name="DriveInfo" Kind="Class" />
      <Type Name="DriveNotFoundException" Kind="Class" />
      <Type Name="DriveType" Kind="Enumeration" />
      <Type Name="EndOfStreamException" Kind="Class" />
      <Type Name="File" Kind="Class" />
      <Type Name="FileAccess" Kind="Enumeration" />
      <Type Name="FileAttributes" Kind="Enumeration" />
      <Type Name="FileInfo" Kind="Class" />
      <Type Name="FileLoadException" Kind="Class" />
      <Type Name="FileMode" Kind="Enumeration" />
      <Type Name="FileNotFoundException" Kind="Class" />
      <Type Name="FileOptions" Kind="Enumeration" />
      <Type Name="FileShare" Kind="Enumeration" />
      <Type Name="FileStream" Kind="Class" />
      <Type Name="FileSystemInfo" Kind="Class" />
      <Type Name="HandleInheritability" Kind="Enumeration" />
      <Type Name="IOException" Kind="Class" />
      <Type Name="MemoryStream" Kind="Class" />
      <Type Name="Path" Kind="Class" />
      <Type Name="PathTooLongException" Kind="Class" />
      <Type Name="SearchOption" Kind="Enumeration" />
      <Type Name="SeekOrigin" Kind="Enumeration" />
      <Type Name="Stream" Kind="Class" />
      <Type Name="StreamReader" Kind="Class" />
      <Type Name="StreamWriter" Kind="Class" />
      <Type Name="StringReader" Kind="Class" />
      <Type Name="StringWriter" Kind="Class" />
      <Type Name="TextReader" Kind="Class" />
      <Type Name="TextWriter" Kind="Class" />
      <Type Name="UnmanagedMemoryAccessor" Kind="Class" />
      <Type Name="UnmanagedMemoryStream" Kind="Class" />
    </Namespace>
    <Namespace Name="System.IO.IsolatedStorage">
      <Type Name="INormalizeForIsolatedStorage" Kind="Interface" />
      <Type Name="IsolatedStorage" Kind="Class" />
      <Type Name="IsolatedStorageException" Kind="Class" />
      <Type Name="IsolatedStorageFile" Kind="Class" />
      <Type Name="IsolatedStorageFileStream" Kind="Class" />
      <Type Name="IsolatedStorageScope" Kind="Enumeration" />
      <Type Name="IsolatedStorageSecurityOptions" Kind="Enumeration" />
      <Type Name="IsolatedStorageSecurityState" Kind="Class" />
    </Namespace>
    <Namespace Name="System.IO.MemoryMappedFiles">
      <Type Name="MemoryMappedFile" Kind="Class" />
      <Type Name="MemoryMappedFileAccess" Kind="Enumeration" />
      <Type Name="MemoryMappedFileOptions" Kind="Enumeration" />
      <Type Name="MemoryMappedFileRights" Kind="Enumeration" />
      <Type Name="MemoryMappedFileSecurity" Kind="Class" />
      <Type Name="MemoryMappedViewAccessor" Kind="Class" />
      <Type Name="MemoryMappedViewStream" Kind="Class" />
    </Namespace>
    <Namespace Name="System.IO.Packaging">
      <Type Name="PackageStore" Kind="Class" />
      <Type Name="PackWebRequest" Kind="Class" />
      <Type Name="PackWebRequestFactory" Kind="Class" />
      <Type Name="PackWebResponse" Kind="Class" />
    </Namespace>
    <Namespace Name="System.IO.Pipes">
      <Type Name="AnonymousPipeClientStream" Kind="Class" />
      <Type Name="AnonymousPipeServerStream" Kind="Class" />
      <Type Name="NamedPipeClientStream" Kind="Class" />
      <Type Name="NamedPipeServerStream" Kind="Class" />
      <Type Name="PipeAccessRights" Kind="Enumeration" />
      <Type Name="PipeAccessRule" Kind="Class" />
      <Type Name="PipeAuditRule" Kind="Class" />
      <Type Name="PipeDirection" Kind="Enumeration" />
      <Type Name="PipeOptions" Kind="Enumeration" />
      <Type Name="PipeSecurity" Kind="Class" />
      <Type Name="PipeStream" Kind="Class" />
      <Type Name="PipeStreamImpersonationWorker" Kind="Delegate" />
      <Type Name="PipeTransmissionMode" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Linq">
      <Type Name="Enumerable" Kind="Class" />
      <Type Name="EnumerableExecutor" Kind="Class" />
      <Type Name="EnumerableExecutor`1" DisplayName="EnumerableExecutor&lt;T&gt;" Kind="Class" />
      <Type Name="EnumerableQuery" Kind="Class" />
      <Type Name="EnumerableQuery`1" DisplayName="EnumerableQuery&lt;T&gt;" Kind="Class" />
      <Type Name="IGrouping`2" DisplayName="IGrouping&lt;TKey,TElement&gt;" Kind="Interface" />
      <Type Name="ILookup`2" DisplayName="ILookup&lt;TKey,TElement&gt;" Kind="Interface" />
      <Type Name="IOrderedEnumerable`1" DisplayName="IOrderedEnumerable&lt;TElement&gt;" Kind="Interface" />
      <Type Name="IOrderedQueryable" Kind="Interface" />
      <Type Name="IOrderedQueryable`1" DisplayName="IOrderedQueryable&lt;T&gt;" Kind="Interface" />
      <Type Name="IQueryable" Kind="Interface" />
      <Type Name="IQueryable`1" DisplayName="IQueryable&lt;T&gt;" Kind="Interface" />
      <Type Name="IQueryProvider" Kind="Interface" />
      <Type Name="Lookup`2" DisplayName="Lookup&lt;TKey,TElement&gt;" Kind="Class" />
      <Type Name="OrderedParallelQuery`1" DisplayName="OrderedParallelQuery&lt;TSource&gt;" Kind="Class" />
      <Type Name="ParallelEnumerable" Kind="Class" />
      <Type Name="ParallelExecutionMode" Kind="Enumeration" />
      <Type Name="ParallelMergeOptions" Kind="Enumeration" />
      <Type Name="ParallelQuery" Kind="Class" />
      <Type Name="ParallelQuery`1" DisplayName="ParallelQuery&lt;TSource&gt;" Kind="Class" />
      <Type Name="Queryable" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Linq.Expressions">
      <Type Name="BinaryExpression" Kind="Class" />
      <Type Name="BlockExpression" Kind="Class" />
      <Type Name="CatchBlock" Kind="Class" />
      <Type Name="ConditionalExpression" Kind="Class" />
      <Type Name="ConstantExpression" Kind="Class" />
      <Type Name="DebugInfoExpression" Kind="Class" />
      <Type Name="DefaultExpression" Kind="Class" />
      <Type Name="DynamicExpression" Kind="Class" />
      <Type Name="DynamicExpressionVisitor" Kind="Class" />
      <Type Name="ElementInit" Kind="Class" />
      <Type Name="Expression" Kind="Class" />
      <Type Name="Expression`1" DisplayName="Expression&lt;TDelegate&gt;" Kind="Class" />
      <Type Name="ExpressionType" Kind="Enumeration" />
      <Type Name="ExpressionVisitor" Kind="Class" />
      <Type Name="GotoExpression" Kind="Class" />
      <Type Name="GotoExpressionKind" Kind="Enumeration" />
      <Type Name="IArgumentProvider" Kind="Interface" />
      <Type Name="IDynamicExpression" Kind="Interface" />
      <Type Name="IndexExpression" Kind="Class" />
      <Type Name="InvocationExpression" Kind="Class" />
      <Type Name="LabelExpression" Kind="Class" />
      <Type Name="LabelTarget" Kind="Class" />
      <Type Name="LambdaExpression" Kind="Class" />
      <Type Name="ListInitExpression" Kind="Class" />
      <Type Name="LoopExpression" Kind="Class" />
      <Type Name="MemberAssignment" Kind="Class" />
      <Type Name="MemberBinding" Kind="Class" />
      <Type Name="MemberBindingType" Kind="Enumeration" />
      <Type Name="MemberExpression" Kind="Class" />
      <Type Name="MemberInitExpression" Kind="Class" />
      <Type Name="MemberListBinding" Kind="Class" />
      <Type Name="MemberMemberBinding" Kind="Class" />
      <Type Name="MethodCallExpression" Kind="Class" />
      <Type Name="NewArrayExpression" Kind="Class" />
      <Type Name="NewExpression" Kind="Class" />
      <Type Name="ParameterExpression" Kind="Class" />
      <Type Name="RuntimeVariablesExpression" Kind="Class" />
      <Type Name="SwitchCase" Kind="Class" />
      <Type Name="SwitchExpression" Kind="Class" />
      <Type Name="SymbolDocumentInfo" Kind="Class" />
      <Type Name="TryExpression" Kind="Class" />
      <Type Name="TypeBinaryExpression" Kind="Class" />
      <Type Name="UnaryExpression" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Management.Instrumentation">
      <Type Name="InstanceNotFoundException" Kind="Class" />
      <Type Name="InstrumentationBaseException" Kind="Class" />
      <Type Name="InstrumentationException" Kind="Class" />
      <Type Name="ManagementBindAttribute" Kind="Class" />
      <Type Name="ManagementCommitAttribute" Kind="Class" />
      <Type Name="ManagementConfigurationAttribute" Kind="Class" />
      <Type Name="ManagementConfigurationType" Kind="Enumeration" />
      <Type Name="ManagementCreateAttribute" Kind="Class" />
      <Type Name="ManagementEntityAttribute" Kind="Class" />
      <Type Name="ManagementEnumeratorAttribute" Kind="Class" />
      <Type Name="ManagementHostingModel" Kind="Enumeration" />
      <Type Name="ManagementKeyAttribute" Kind="Class" />
      <Type Name="ManagementMemberAttribute" Kind="Class" />
      <Type Name="ManagementNameAttribute" Kind="Class" />
      <Type Name="ManagementNewInstanceAttribute" Kind="Class" />
      <Type Name="ManagementProbeAttribute" Kind="Class" />
      <Type Name="ManagementReferenceAttribute" Kind="Class" />
      <Type Name="ManagementRemoveAttribute" Kind="Class" />
      <Type Name="ManagementTaskAttribute" Kind="Class" />
      <Type Name="WmiConfigurationAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Messaging.Design">
      <Type Name="MessageDesigner" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Printing">
      <Type Name="Collation" Kind="Enumeration" />
      <Type Name="ConflictStatus" Kind="Enumeration" />
      <Type Name="DeviceFontSubstitution" Kind="Enumeration" />
      <Type Name="Duplexing" Kind="Enumeration" />
      <Type Name="InputBin" Kind="Enumeration" />
      <Type Name="OutputColor" Kind="Enumeration" />
      <Type Name="OutputQuality" Kind="Enumeration" />
      <Type Name="PageBorderless" Kind="Enumeration" />
      <Type Name="PageImageableArea" Kind="Class" />
      <Type Name="PageMediaSize" Kind="Class" />
      <Type Name="PageMediaSizeName" Kind="Enumeration" />
      <Type Name="PageMediaType" Kind="Enumeration" />
      <Type Name="PageOrder" Kind="Enumeration" />
      <Type Name="PageOrientation" Kind="Enumeration" />
      <Type Name="PageQualitativeResolution" Kind="Enumeration" />
      <Type Name="PageResolution" Kind="Class" />
      <Type Name="PageScalingFactorRange" Kind="Class" />
      <Type Name="PagesPerSheetDirection" Kind="Enumeration" />
      <Type Name="PhotoPrintingIntent" Kind="Enumeration" />
      <Type Name="PrintCapabilities" Kind="Class" />
      <Type Name="PrintCommitAttributesException" Kind="Class" />
      <Type Name="PrintingCanceledException" Kind="Class" />
      <Type Name="PrintingNotSupportedException" Kind="Class" />
      <Type Name="PrintJobException" Kind="Class" />
      <Type Name="PrintQueueException" Kind="Class" />
      <Type Name="PrintServerException" Kind="Class" />
      <Type Name="PrintSystemException" Kind="Class" />
      <Type Name="PrintTicket" Kind="Class" />
      <Type Name="PrintTicketScope" Kind="Enumeration" />
      <Type Name="Stapling" Kind="Enumeration" />
      <Type Name="TrueTypeFontMode" Kind="Enumeration" />
      <Type Name="ValidationResult" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.Printing.Interop">
      <Type Name="BaseDevModeType" Kind="Enumeration" />
      <Type Name="PrintTicketConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Reflection">
      <Type Name="AmbiguousMatchException" Kind="Class" />
      <Type Name="Assembly" Kind="Class" />
      <Type Name="AssemblyAlgorithmIdAttribute" Kind="Class" />
      <Type Name="AssemblyCompanyAttribute" Kind="Class" />
      <Type Name="AssemblyConfigurationAttribute" Kind="Class" />
      <Type Name="AssemblyContentType" Kind="Enumeration" />
      <Type Name="AssemblyCopyrightAttribute" Kind="Class" />
      <Type Name="AssemblyCultureAttribute" Kind="Class" />
      <Type Name="AssemblyDefaultAliasAttribute" Kind="Class" />
      <Type Name="AssemblyDelaySignAttribute" Kind="Class" />
      <Type Name="AssemblyDescriptionAttribute" Kind="Class" />
      <Type Name="AssemblyFileVersionAttribute" Kind="Class" />
      <Type Name="AssemblyFlagsAttribute" Kind="Class" />
      <Type Name="AssemblyInformationalVersionAttribute" Kind="Class" />
      <Type Name="AssemblyKeyFileAttribute" Kind="Class" />
      <Type Name="AssemblyKeyNameAttribute" Kind="Class" />
      <Type Name="AssemblyMetadataAttribute" Kind="Class" />
      <Type Name="AssemblyName" Kind="Class" />
      <Type Name="AssemblyNameFlags" Kind="Enumeration" />
      <Type Name="AssemblyNameProxy" Kind="Class" />
      <Type Name="AssemblyProductAttribute" Kind="Class" />
      <Type Name="AssemblySignatureKeyAttribute" Kind="Class" />
      <Type Name="AssemblyTitleAttribute" Kind="Class" />
      <Type Name="AssemblyTrademarkAttribute" Kind="Class" />
      <Type Name="AssemblyVersionAttribute" Kind="Class" />
      <Type Name="Binder" Kind="Class" />
      <Type Name="BindingFlags" Kind="Enumeration" />
      <Type Name="CallingConventions" Kind="Enumeration" />
      <Type Name="ConstructorInfo" Kind="Class" />
      <Type Name="CustomAttributeData" Kind="Class" />
      <Type Name="CustomAttributeExtensions" Kind="Class" />
      <Type Name="CustomAttributeFormatException" Kind="Class" />
      <Type Name="CustomAttributeNamedArgument" Kind="Structure" />
      <Type Name="CustomAttributeTypedArgument" Kind="Structure" />
      <Type Name="DefaultMemberAttribute" Kind="Class" />
      <Type Name="EventAttributes" Kind="Enumeration" />
      <Type Name="EventInfo" Kind="Class" />
      <Type Name="ExceptionHandlingClause" Kind="Class" />
      <Type Name="ExceptionHandlingClauseOptions" Kind="Enumeration" />
      <Type Name="FieldAttributes" Kind="Enumeration" />
      <Type Name="FieldInfo" Kind="Class" />
      <Type Name="GenericParameterAttributes" Kind="Enumeration" />
      <Type Name="ICustomAttributeProvider" Kind="Interface" />
      <Type Name="ImageFileMachine" Kind="Enumeration" />
      <Type Name="InterfaceMapping" Kind="Structure" />
      <Type Name="IntrospectionExtensions" Kind="Class" />
      <Type Name="InvalidFilterCriteriaException" Kind="Class" />
      <Type Name="IReflect" Kind="Interface" />
      <Type Name="IReflectableType" Kind="Interface" />
      <Type Name="LocalVariableInfo" Kind="Class" />
      <Type Name="ManifestResourceInfo" Kind="Class" />
      <Type Name="MemberFilter" Kind="Delegate" />
      <Type Name="MemberInfo" Kind="Class" />
      <Type Name="MemberTypes" Kind="Enumeration" />
      <Type Name="MethodAttributes" Kind="Enumeration" />
      <Type Name="MethodBase" Kind="Class" />
      <Type Name="MethodBody" Kind="Class" />
      <Type Name="MethodImplAttributes" Kind="Enumeration" />
      <Type Name="MethodInfo" Kind="Class" />
      <Type Name="Missing" Kind="Class" />
      <Type Name="Module" Kind="Class" />
      <Type Name="ModuleResolveEventHandler" Kind="Delegate" />
      <Type Name="ObfuscateAssemblyAttribute" Kind="Class" />
      <Type Name="ObfuscationAttribute" Kind="Class" />
      <Type Name="ParameterAttributes" Kind="Enumeration" />
      <Type Name="ParameterInfo" Kind="Class" />
      <Type Name="ParameterModifier" Kind="Structure" />
      <Type Name="Pointer" Kind="Class" />
      <Type Name="PortableExecutableKinds" Kind="Enumeration" />
      <Type Name="ProcessorArchitecture" Kind="Enumeration" />
      <Type Name="PropertyAttributes" Kind="Enumeration" />
      <Type Name="PropertyInfo" Kind="Class" />
      <Type Name="ReflectionContext" Kind="Class" />
      <Type Name="ReflectionTypeLoadException" Kind="Class" />
      <Type Name="ResourceAttributes" Kind="Enumeration" />
      <Type Name="ResourceLocation" Kind="Enumeration" />
      <Type Name="RuntimeReflectionExtensions" Kind="Class" />
      <Type Name="StrongNameKeyPair" Kind="Class" />
      <Type Name="TargetException" Kind="Class" />
      <Type Name="TargetInvocationException" Kind="Class" />
      <Type Name="TargetParameterCountException" Kind="Class" />
      <Type Name="TypeAttributes" Kind="Enumeration" />
      <Type Name="TypeDelegator" Kind="Class" />
      <Type Name="TypeFilter" Kind="Delegate" />
      <Type Name="TypeInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Reflection.Emit">
      <Type Name="AssemblyBuilder" Kind="Class" />
      <Type Name="AssemblyBuilderAccess" Kind="Enumeration" />
      <Type Name="ConstructorBuilder" Kind="Class" />
      <Type Name="CustomAttributeBuilder" Kind="Class" />
      <Type Name="DynamicILInfo" Kind="Class" />
      <Type Name="DynamicMethod" Kind="Class" />
      <Type Name="EnumBuilder" Kind="Class" />
      <Type Name="EventBuilder" Kind="Class" />
      <Type Name="EventToken" Kind="Structure" />
      <Type Name="ExceptionHandler" Kind="Structure" />
      <Type Name="FieldBuilder" Kind="Class" />
      <Type Name="FieldToken" Kind="Structure" />
      <Type Name="FlowControl" Kind="Enumeration" />
      <Type Name="GenericTypeParameterBuilder" Kind="Class" />
      <Type Name="ILGenerator" Kind="Class" />
      <Type Name="Label" Kind="Structure" />
      <Type Name="LocalBuilder" Kind="Class" />
      <Type Name="MethodBuilder" Kind="Class" />
      <Type Name="MethodRental" Kind="Class" />
      <Type Name="MethodToken" Kind="Structure" />
      <Type Name="ModuleBuilder" Kind="Class" />
      <Type Name="OpCode" Kind="Structure" />
      <Type Name="OpCodes" Kind="Class" />
      <Type Name="OpCodeType" Kind="Enumeration" />
      <Type Name="OperandType" Kind="Enumeration" />
      <Type Name="PackingSize" Kind="Enumeration" />
      <Type Name="ParameterBuilder" Kind="Class" />
      <Type Name="ParameterToken" Kind="Structure" />
      <Type Name="PEFileKinds" Kind="Enumeration" />
      <Type Name="PropertyBuilder" Kind="Class" />
      <Type Name="PropertyToken" Kind="Structure" />
      <Type Name="SignatureHelper" Kind="Class" />
      <Type Name="SignatureToken" Kind="Structure" />
      <Type Name="StackBehaviour" Kind="Enumeration" />
      <Type Name="StringToken" Kind="Structure" />
      <Type Name="TypeBuilder" Kind="Class" />
      <Type Name="TypeToken" Kind="Structure" />
      <Type Name="UnmanagedMarshal" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Resources">
      <Type Name="IResourceReader" Kind="Interface" />
      <Type Name="IResourceWriter" Kind="Interface" />
      <Type Name="MissingManifestResourceException" Kind="Class" />
      <Type Name="MissingSatelliteAssemblyException" Kind="Class" />
      <Type Name="NeutralResourcesLanguageAttribute" Kind="Class" />
      <Type Name="ResourceManager" Kind="Class" />
      <Type Name="ResourceReader" Kind="Class" />
      <Type Name="ResourceSet" Kind="Class" />
      <Type Name="ResourceWriter" Kind="Class" />
      <Type Name="SatelliteContractVersionAttribute" Kind="Class" />
      <Type Name="UltimateResourceFallbackLocation" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Resources.Tools">
      <Type Name="ITargetAwareCodeDomProvider" Kind="Interface" />
      <Type Name="StronglyTypedResourceBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime">
      <Type Name="AssemblyTargetedPatchBandAttribute" Kind="Class" />
      <Type Name="GCLargeObjectHeapCompactionMode" Kind="Enumeration" />
      <Type Name="GCLatencyMode" Kind="Enumeration" />
      <Type Name="GCSettings" Kind="Class" />
      <Type Name="MemoryFailPoint" Kind="Class" />
      <Type Name="ProfileOptimization" Kind="Class" />
      <Type Name="TargetedPatchingOptOutAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.CompilerServices">
      <Type Name="AccessedThroughPropertyAttribute" Kind="Class" />
      <Type Name="AsyncStateMachineAttribute" Kind="Class" />
      <Type Name="AsyncTaskMethodBuilder" Kind="Structure" />
      <Type Name="AsyncTaskMethodBuilder`1" DisplayName="AsyncTaskMethodBuilder&lt;TResult&gt;" Kind="Structure" />
      <Type Name="AsyncVoidMethodBuilder" Kind="Structure" />
      <Type Name="CallConvCdecl" Kind="Class" />
      <Type Name="CallConvFastcall" Kind="Class" />
      <Type Name="CallConvStdcall" Kind="Class" />
      <Type Name="CallConvThiscall" Kind="Class" />
      <Type Name="CallerFilePathAttribute" Kind="Class" />
      <Type Name="CallerLineNumberAttribute" Kind="Class" />
      <Type Name="CallerMemberNameAttribute" Kind="Class" />
      <Type Name="CallSite" Kind="Class" />
      <Type Name="CallSite`1" DisplayName="CallSite&lt;T&gt;" Kind="Class" />
      <Type Name="CallSiteBinder" Kind="Class" />
      <Type Name="CallSiteHelpers" Kind="Class" />
      <Type Name="CallSiteOps" Kind="Class" />
      <Type Name="Closure" Kind="Class" />
      <Type Name="CompilationRelaxations" Kind="Enumeration" />
      <Type Name="CompilationRelaxationsAttribute" Kind="Class" />
      <Type Name="CompilerGeneratedAttribute" Kind="Class" />
      <Type Name="CompilerGlobalScopeAttribute" Kind="Class" />
      <Type Name="CompilerMarshalOverride" Kind="Class" />
      <Type Name="ConditionalWeakTable`2" DisplayName="ConditionalWeakTable&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="ConditionalWeakTable`2+CreateValueCallback" DisplayName="ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback" Kind="Delegate" />
      <Type Name="ConfiguredTaskAwaitable" Kind="Structure" />
      <Type Name="ConfiguredTaskAwaitable`1" DisplayName="ConfiguredTaskAwaitable&lt;TResult&gt;" Kind="Structure" />
      <Type Name="ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter" DisplayName="ConfiguredTaskAwaitable&lt;TResult&gt;+ConfiguredTaskAwaiter" Kind="Structure" />
      <Type Name="ConfiguredTaskAwaitable+ConfiguredTaskAwaiter" Kind="Structure" />
      <Type Name="ContractHelper" Kind="Class" />
      <Type Name="CustomConstantAttribute" Kind="Class" />
      <Type Name="DateTimeConstantAttribute" Kind="Class" />
      <Type Name="DebugInfoGenerator" Kind="Class" />
      <Type Name="DecimalConstantAttribute" Kind="Class" />
      <Type Name="DefaultDependencyAttribute" Kind="Class" />
      <Type Name="DependencyAttribute" Kind="Class" />
      <Type Name="DisablePrivateReflectionAttribute" Kind="Class" />
      <Type Name="DiscardableAttribute" Kind="Class" />
      <Type Name="DynamicAttribute" Kind="Class" />
      <Type Name="ExecutionScope" Kind="Class" />
      <Type Name="FixedAddressValueTypeAttribute" Kind="Class" />
      <Type Name="FixedBufferAttribute" Kind="Class" />
      <Type Name="FormattableStringFactory" Kind="Class" />
      <Type Name="HasCopySemanticsAttribute" Kind="Class" />
      <Type Name="IAsyncStateMachine" Kind="Interface" />
      <Type Name="ICriticalNotifyCompletion" Kind="Interface" />
      <Type Name="IDispatchConstantAttribute" Kind="Class" />
      <Type Name="IndexerNameAttribute" Kind="Class" />
      <Type Name="INotifyCompletion" Kind="Interface" />
      <Type Name="InternalsVisibleToAttribute" Kind="Class" />
      <Type Name="IRuntimeVariables" Kind="Interface" />
      <Type Name="IsBoxed" Kind="Class" />
      <Type Name="IsByValue" Kind="Class" />
      <Type Name="IsConst" Kind="Class" />
      <Type Name="IsCopyConstructed" Kind="Class" />
      <Type Name="IsExplicitlyDereferenced" Kind="Class" />
      <Type Name="IsImplicitlyDereferenced" Kind="Class" />
      <Type Name="IsJitIntrinsic" Kind="Class" />
      <Type Name="IsLong" Kind="Class" />
      <Type Name="IsPinned" Kind="Class" />
      <Type Name="IsSignUnspecifiedByte" Kind="Class" />
      <Type Name="IStrongBox" Kind="Interface" />
      <Type Name="IsUdtReturn" Kind="Class" />
      <Type Name="IsVolatile" Kind="Class" />
      <Type Name="IteratorStateMachineAttribute" Kind="Class" />
      <Type Name="IUnknownConstantAttribute" Kind="Class" />
      <Type Name="LoadHint" Kind="Enumeration" />
      <Type Name="MethodCodeType" Kind="Enumeration" />
      <Type Name="MethodImplAttribute" Kind="Class" />
      <Type Name="MethodImplOptions" Kind="Enumeration" />
      <Type Name="NativeCppClassAttribute" Kind="Class" />
      <Type Name="ReadOnlyCollectionBuilder`1" DisplayName="ReadOnlyCollectionBuilder&lt;T&gt;" Kind="Class" />
      <Type Name="ReferenceAssemblyAttribute" Kind="Class" />
      <Type Name="RequiredAttributeAttribute" Kind="Class" />
      <Type Name="RuleCache`1" DisplayName="RuleCache&lt;T&gt;" Kind="Class" />
      <Type Name="RuntimeCompatibilityAttribute" Kind="Class" />
      <Type Name="RuntimeHelpers" Kind="Class" />
      <Type Name="RuntimeHelpers+CleanupCode" Kind="Delegate" />
      <Type Name="RuntimeHelpers+TryCode" Kind="Delegate" />
      <Type Name="RuntimeOps" Kind="Class" />
      <Type Name="RuntimeWrappedException" Kind="Class" />
      <Type Name="ScopelessEnumAttribute" Kind="Class" />
      <Type Name="SpecialNameAttribute" Kind="Class" />
      <Type Name="StateMachineAttribute" Kind="Class" />
      <Type Name="StringFreezingAttribute" Kind="Class" />
      <Type Name="StrongBox`1" DisplayName="StrongBox&lt;T&gt;" Kind="Class" />
      <Type Name="SuppressIldasmAttribute" Kind="Class" />
      <Type Name="TaskAwaiter" Kind="Structure" />
      <Type Name="TaskAwaiter`1" DisplayName="TaskAwaiter&lt;TResult&gt;" Kind="Structure" />
      <Type Name="TupleElementNamesAttribute" Kind="Class" />
      <Type Name="TypeForwardedFromAttribute" Kind="Class" />
      <Type Name="TypeForwardedToAttribute" Kind="Class" />
      <Type Name="UnsafeValueTypeAttribute" Kind="Class" />
      <Type Name="YieldAwaitable" Kind="Structure" />
      <Type Name="YieldAwaitable+YieldAwaiter" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.Runtime.ConstrainedExecution">
      <Type Name="Cer" Kind="Enumeration" />
      <Type Name="Consistency" Kind="Enumeration" />
      <Type Name="CriticalFinalizerObject" Kind="Class" />
      <Type Name="PrePrepareMethodAttribute" Kind="Class" />
      <Type Name="ReliabilityContractAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.DesignerServices">
      <Type Name="WindowsRuntimeDesignerContext" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.ExceptionServices">
      <Type Name="ExceptionDispatchInfo" Kind="Class" />
      <Type Name="FirstChanceExceptionEventArgs" Kind="Class" />
      <Type Name="HandleProcessCorruptedStateExceptionsAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Hosting">
      <Type Name="ActivationArguments" Kind="Class" />
      <Type Name="ApplicationActivator" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.InteropServices">
      <Type Name="_Activator" Kind="Interface" />
      <Type Name="_Assembly" Kind="Interface" />
      <Type Name="_AssemblyBuilder" Kind="Interface" />
      <Type Name="_AssemblyName" Kind="Interface" />
      <Type Name="_Attribute" Kind="Interface" />
      <Type Name="_ConstructorBuilder" Kind="Interface" />
      <Type Name="_ConstructorInfo" Kind="Interface" />
      <Type Name="_CustomAttributeBuilder" Kind="Interface" />
      <Type Name="_EnumBuilder" Kind="Interface" />
      <Type Name="_EventBuilder" Kind="Interface" />
      <Type Name="_EventInfo" Kind="Interface" />
      <Type Name="_Exception" Kind="Interface" />
      <Type Name="_FieldBuilder" Kind="Interface" />
      <Type Name="_FieldInfo" Kind="Interface" />
      <Type Name="_ILGenerator" Kind="Interface" />
      <Type Name="_LocalBuilder" Kind="Interface" />
      <Type Name="_MemberInfo" Kind="Interface" />
      <Type Name="_MethodBase" Kind="Interface" />
      <Type Name="_MethodBuilder" Kind="Interface" />
      <Type Name="_MethodInfo" Kind="Interface" />
      <Type Name="_MethodRental" Kind="Interface" />
      <Type Name="_Module" Kind="Interface" />
      <Type Name="_ModuleBuilder" Kind="Interface" />
      <Type Name="_ParameterBuilder" Kind="Interface" />
      <Type Name="_ParameterInfo" Kind="Interface" />
      <Type Name="_PropertyBuilder" Kind="Interface" />
      <Type Name="_PropertyInfo" Kind="Interface" />
      <Type Name="_SignatureHelper" Kind="Interface" />
      <Type Name="_Thread" Kind="Interface" />
      <Type Name="_Type" Kind="Interface" />
      <Type Name="_TypeBuilder" Kind="Interface" />
      <Type Name="AllowReversePInvokeCallsAttribute" Kind="Class" />
      <Type Name="ArrayWithOffset" Kind="Structure" />
      <Type Name="AssemblyRegistrationFlags" Kind="Enumeration" />
      <Type Name="AutomationProxyAttribute" Kind="Class" />
      <Type Name="BestFitMappingAttribute" Kind="Class" />
      <Type Name="BIND_OPTS" Kind="Structure" />
      <Type Name="BINDPTR" Kind="Structure" />
      <Type Name="BStrWrapper" Kind="Class" />
      <Type Name="CALLCONV" Kind="Enumeration" />
      <Type Name="CallingConvention" Kind="Enumeration" />
      <Type Name="CharSet" Kind="Enumeration" />
      <Type Name="ClassInterfaceAttribute" Kind="Class" />
      <Type Name="ClassInterfaceType" Kind="Enumeration" />
      <Type Name="CoClassAttribute" Kind="Class" />
      <Type Name="ComAliasNameAttribute" Kind="Class" />
      <Type Name="ComAwareEventInfo" Kind="Class" />
      <Type Name="ComCompatibleVersionAttribute" Kind="Class" />
      <Type Name="ComConversionLossAttribute" Kind="Class" />
      <Type Name="ComDefaultInterfaceAttribute" Kind="Class" />
      <Type Name="ComEventInterfaceAttribute" Kind="Class" />
      <Type Name="ComEventsHelper" Kind="Class" />
      <Type Name="COMException" Kind="Class" />
      <Type Name="ComImportAttribute" Kind="Class" />
      <Type Name="ComInterfaceType" Kind="Enumeration" />
      <Type Name="ComMemberType" Kind="Enumeration" />
      <Type Name="ComRegisterFunctionAttribute" Kind="Class" />
      <Type Name="ComSourceInterfacesAttribute" Kind="Class" />
      <Type Name="ComUnregisterFunctionAttribute" Kind="Class" />
      <Type Name="ComVisibleAttribute" Kind="Class" />
      <Type Name="CONNECTDATA" Kind="Structure" />
      <Type Name="CriticalHandle" Kind="Class" />
      <Type Name="CurrencyWrapper" Kind="Class" />
      <Type Name="CustomQueryInterfaceMode" Kind="Enumeration" />
      <Type Name="CustomQueryInterfaceResult" Kind="Enumeration" />
      <Type Name="DefaultCharSetAttribute" Kind="Class" />
      <Type Name="DefaultDllImportSearchPathsAttribute" Kind="Class" />
      <Type Name="DESCKIND" Kind="Enumeration" />
      <Type Name="DispatchWrapper" Kind="Class" />
      <Type Name="DispIdAttribute" Kind="Class" />
      <Type Name="DISPPARAMS" Kind="Structure" />
      <Type Name="DllImportAttribute" Kind="Class" />
      <Type Name="DllImportSearchPath" Kind="Enumeration" />
      <Type Name="ELEMDESC" Kind="Structure" />
      <Type Name="ELEMDESC+DESCUNION" Kind="Structure" />
      <Type Name="ErrorWrapper" Kind="Class" />
      <Type Name="EXCEPINFO" Kind="Structure" />
      <Type Name="ExporterEventKind" Kind="Enumeration" />
      <Type Name="ExtensibleClassFactory" Kind="Class" />
      <Type Name="ExternalException" Kind="Class" />
      <Type Name="FieldOffsetAttribute" Kind="Class" />
      <Type Name="FILETIME" Kind="Structure" />
      <Type Name="FUNCDESC" Kind="Structure" />
      <Type Name="FUNCFLAGS" Kind="Enumeration" />
      <Type Name="FUNCKIND" Kind="Enumeration" />
      <Type Name="GCHandle" Kind="Structure" />
      <Type Name="GCHandleType" Kind="Enumeration" />
      <Type Name="GuidAttribute" Kind="Class" />
      <Type Name="HandleRef" Kind="Structure" />
      <Type Name="ICustomAdapter" Kind="Interface" />
      <Type Name="ICustomFactory" Kind="Interface" />
      <Type Name="ICustomMarshaler" Kind="Interface" />
      <Type Name="ICustomQueryInterface" Kind="Interface" />
      <Type Name="IDispatchImplAttribute" Kind="Class" />
      <Type Name="IDispatchImplType" Kind="Enumeration" />
      <Type Name="IDLDESC" Kind="Structure" />
      <Type Name="IDLFLAG" Kind="Enumeration" />
      <Type Name="IMPLTYPEFLAGS" Kind="Enumeration" />
      <Type Name="ImportedFromTypeLibAttribute" Kind="Class" />
      <Type Name="ImporterEventKind" Kind="Enumeration" />
      <Type Name="InAttribute" Kind="Class" />
      <Type Name="InterfaceTypeAttribute" Kind="Class" />
      <Type Name="InvalidComObjectException" Kind="Class" />
      <Type Name="InvalidOleVariantTypeException" Kind="Class" />
      <Type Name="INVOKEKIND" Kind="Enumeration" />
      <Type Name="IRegistrationServices" Kind="Interface" />
      <Type Name="ITypeLibConverter" Kind="Interface" />
      <Type Name="ITypeLibExporterNameProvider" Kind="Interface" />
      <Type Name="ITypeLibExporterNotifySink" Kind="Interface" />
      <Type Name="ITypeLibImporterNotifySink" Kind="Interface" />
      <Type Name="LayoutKind" Kind="Enumeration" />
      <Type Name="LCIDConversionAttribute" Kind="Class" />
      <Type Name="LIBFLAGS" Kind="Enumeration" />
      <Type Name="ManagedToNativeComInteropStubAttribute" Kind="Class" />
      <Type Name="Marshal" Kind="Class" />
      <Type Name="MarshalAsAttribute" Kind="Class" />
      <Type Name="MarshalDirectiveException" Kind="Class" />
      <Type Name="ObjectCreationDelegate" Kind="Delegate" />
      <Type Name="OptionalAttribute" Kind="Class" />
      <Type Name="OutAttribute" Kind="Class" />
      <Type Name="PARAMDESC" Kind="Structure" />
      <Type Name="PARAMFLAG" Kind="Enumeration" />
      <Type Name="PreserveSigAttribute" Kind="Class" />
      <Type Name="PrimaryInteropAssemblyAttribute" Kind="Class" />
      <Type Name="ProgIdAttribute" Kind="Class" />
      <Type Name="RegistrationClassContext" Kind="Enumeration" />
      <Type Name="RegistrationConnectionType" Kind="Enumeration" />
      <Type Name="RegistrationServices" Kind="Class" />
      <Type Name="RuntimeEnvironment" Kind="Class" />
      <Type Name="SafeArrayRankMismatchException" Kind="Class" />
      <Type Name="SafeArrayTypeMismatchException" Kind="Class" />
      <Type Name="SafeBuffer" Kind="Class" />
      <Type Name="SafeHandle" Kind="Class" />
      <Type Name="SEHException" Kind="Class" />
      <Type Name="SetWin32ContextInIDispatchAttribute" Kind="Class" />
      <Type Name="STATSTG" Kind="Structure" />
      <Type Name="StructLayoutAttribute" Kind="Class" />
      <Type Name="SYSKIND" Kind="Enumeration" />
      <Type Name="TYPEATTR" Kind="Structure" />
      <Type Name="TYPEDESC" Kind="Structure" />
      <Type Name="TYPEFLAGS" Kind="Enumeration" />
      <Type Name="TypeIdentifierAttribute" Kind="Class" />
      <Type Name="TYPEKIND" Kind="Enumeration" />
      <Type Name="TYPELIBATTR" Kind="Structure" />
      <Type Name="TypeLibConverter" Kind="Class" />
      <Type Name="TypeLibExporterFlags" Kind="Enumeration" />
      <Type Name="TypeLibFuncAttribute" Kind="Class" />
      <Type Name="TypeLibFuncFlags" Kind="Enumeration" />
      <Type Name="TypeLibImportClassAttribute" Kind="Class" />
      <Type Name="TypeLibImporterFlags" Kind="Enumeration" />
      <Type Name="TypeLibTypeAttribute" Kind="Class" />
      <Type Name="TypeLibTypeFlags" Kind="Enumeration" />
      <Type Name="TypeLibVarAttribute" Kind="Class" />
      <Type Name="TypeLibVarFlags" Kind="Enumeration" />
      <Type Name="TypeLibVersionAttribute" Kind="Class" />
      <Type Name="UCOMIBindCtx" Kind="Interface" />
      <Type Name="UCOMIConnectionPoint" Kind="Interface" />
      <Type Name="UCOMIConnectionPointContainer" Kind="Interface" />
      <Type Name="UCOMIEnumConnectionPoints" Kind="Interface" />
      <Type Name="UCOMIEnumConnections" Kind="Interface" />
      <Type Name="UCOMIEnumMoniker" Kind="Interface" />
      <Type Name="UCOMIEnumString" Kind="Interface" />
      <Type Name="UCOMIEnumVARIANT" Kind="Interface" />
      <Type Name="UCOMIMoniker" Kind="Interface" />
      <Type Name="UCOMIPersistFile" Kind="Interface" />
      <Type Name="UCOMIRunningObjectTable" Kind="Interface" />
      <Type Name="UCOMIStream" Kind="Interface" />
      <Type Name="UCOMITypeComp" Kind="Interface" />
      <Type Name="UCOMITypeInfo" Kind="Interface" />
      <Type Name="UCOMITypeLib" Kind="Interface" />
      <Type Name="UnknownWrapper" Kind="Class" />
      <Type Name="UnmanagedFunctionPointerAttribute" Kind="Class" />
      <Type Name="UnmanagedType" Kind="Enumeration" />
      <Type Name="VARDESC" Kind="Structure" />
      <Type Name="VARDESC+DESCUNION" Kind="Structure" />
      <Type Name="VarEnum" Kind="Enumeration" />
      <Type Name="VARFLAGS" Kind="Enumeration" />
      <Type Name="VariantWrapper" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.InteropServices.ComTypes">
      <Type Name="BIND_OPTS" Kind="Structure" />
      <Type Name="BINDPTR" Kind="Structure" />
      <Type Name="CALLCONV" Kind="Enumeration" />
      <Type Name="CONNECTDATA" Kind="Structure" />
      <Type Name="DESCKIND" Kind="Enumeration" />
      <Type Name="DISPPARAMS" Kind="Structure" />
      <Type Name="ELEMDESC" Kind="Structure" />
      <Type Name="ELEMDESC+DESCUNION" Kind="Structure" />
      <Type Name="EXCEPINFO" Kind="Structure" />
      <Type Name="FILETIME" Kind="Structure" />
      <Type Name="FUNCDESC" Kind="Structure" />
      <Type Name="FUNCFLAGS" Kind="Enumeration" />
      <Type Name="FUNCKIND" Kind="Enumeration" />
      <Type Name="IBindCtx" Kind="Interface" />
      <Type Name="IConnectionPoint" Kind="Interface" />
      <Type Name="IConnectionPointContainer" Kind="Interface" />
      <Type Name="IDLDESC" Kind="Structure" />
      <Type Name="IDLFLAG" Kind="Enumeration" />
      <Type Name="IEnumConnectionPoints" Kind="Interface" />
      <Type Name="IEnumConnections" Kind="Interface" />
      <Type Name="IEnumMoniker" Kind="Interface" />
      <Type Name="IEnumString" Kind="Interface" />
      <Type Name="IEnumVARIANT" Kind="Interface" />
      <Type Name="IMoniker" Kind="Interface" />
      <Type Name="IMPLTYPEFLAGS" Kind="Enumeration" />
      <Type Name="INVOKEKIND" Kind="Enumeration" />
      <Type Name="IPersistFile" Kind="Interface" />
      <Type Name="IRunningObjectTable" Kind="Interface" />
      <Type Name="IStream" Kind="Interface" />
      <Type Name="ITypeComp" Kind="Interface" />
      <Type Name="ITypeInfo" Kind="Interface" />
      <Type Name="ITypeInfo2" Kind="Interface" />
      <Type Name="ITypeLib" Kind="Interface" />
      <Type Name="ITypeLib2" Kind="Interface" />
      <Type Name="LIBFLAGS" Kind="Enumeration" />
      <Type Name="PARAMDESC" Kind="Structure" />
      <Type Name="PARAMFLAG" Kind="Enumeration" />
      <Type Name="STATSTG" Kind="Structure" />
      <Type Name="SYSKIND" Kind="Enumeration" />
      <Type Name="TYPEATTR" Kind="Structure" />
      <Type Name="TYPEDESC" Kind="Structure" />
      <Type Name="TYPEFLAGS" Kind="Enumeration" />
      <Type Name="TYPEKIND" Kind="Enumeration" />
      <Type Name="TYPELIBATTR" Kind="Structure" />
      <Type Name="VARDESC" Kind="Structure" />
      <Type Name="VARDESC+DESCUNION" Kind="Structure" />
      <Type Name="VARFLAGS" Kind="Enumeration" />
      <Type Name="VARKIND" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Runtime.InteropServices.CustomMarshalers">
      <Type Name="EnumerableToDispatchMarshaler" Kind="Class" />
      <Type Name="EnumeratorToEnumVariantMarshaler" Kind="Class" />
      <Type Name="ExpandoToDispatchExMarshaler" Kind="Class" />
      <Type Name="TypeToTypeInfoMarshaler" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.InteropServices.Expando">
      <Type Name="IExpando" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Runtime.InteropServices.WindowsRuntime">
      <Type Name="DefaultInterfaceAttribute" Kind="Class" />
      <Type Name="DesignerNamespaceResolveEventArgs" Kind="Class" />
      <Type Name="EventRegistrationToken" Kind="Structure" />
      <Type Name="EventRegistrationTokenTable`1" DisplayName="EventRegistrationTokenTable&lt;T&gt;" Kind="Class" />
      <Type Name="IActivationFactory" Kind="Interface" />
      <Type Name="InterfaceImplementedInVersionAttribute" Kind="Class" />
      <Type Name="NamespaceResolveEventArgs" Kind="Class" />
      <Type Name="ReadOnlyArrayAttribute" Kind="Class" />
      <Type Name="ReturnValueNameAttribute" Kind="Class" />
      <Type Name="WindowsRuntimeMarshal" Kind="Class" />
      <Type Name="WindowsRuntimeMetadata" Kind="Class" />
      <Type Name="WriteOnlyArrayAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Remoting">
      <Type Name="ActivatedClientTypeEntry" Kind="Class" />
      <Type Name="ActivatedServiceTypeEntry" Kind="Class" />
      <Type Name="CustomErrorsModes" Kind="Enumeration" />
      <Type Name="IChannelInfo" Kind="Interface" />
      <Type Name="IEnvoyInfo" Kind="Interface" />
      <Type Name="InternalRemotingServices" Kind="Class" />
      <Type Name="IObjectHandle" Kind="Interface" />
      <Type Name="IRemotingTypeInfo" Kind="Interface" />
      <Type Name="ObjectHandle" Kind="Class" />
      <Type Name="ObjRef" Kind="Class" />
      <Type Name="RemotingConfiguration" Kind="Class" />
      <Type Name="RemotingException" Kind="Class" />
      <Type Name="RemotingServices" Kind="Class" />
      <Type Name="RemotingTimeoutException" Kind="Class" />
      <Type Name="ServerException" Kind="Class" />
      <Type Name="SoapServices" Kind="Class" />
      <Type Name="TypeEntry" Kind="Class" />
      <Type Name="WellKnownClientTypeEntry" Kind="Class" />
      <Type Name="WellKnownObjectMode" Kind="Enumeration" />
      <Type Name="WellKnownServiceTypeEntry" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Remoting.Activation">
      <Type Name="ActivatorLevel" Kind="Enumeration" />
      <Type Name="IActivator" Kind="Interface" />
      <Type Name="IConstructionCallMessage" Kind="Interface" />
      <Type Name="IConstructionReturnMessage" Kind="Interface" />
      <Type Name="UrlAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Remoting.Channels">
      <Type Name="BaseChannelObjectWithProperties" Kind="Class" />
      <Type Name="BaseChannelSinkWithProperties" Kind="Class" />
      <Type Name="BaseChannelWithProperties" Kind="Class" />
      <Type Name="ChannelDataStore" Kind="Class" />
      <Type Name="ChannelServices" Kind="Class" />
      <Type Name="ClientChannelSinkStack" Kind="Class" />
      <Type Name="IChannel" Kind="Interface" />
      <Type Name="IChannelDataStore" Kind="Interface" />
      <Type Name="IChannelReceiver" Kind="Interface" />
      <Type Name="IChannelReceiverHook" Kind="Interface" />
      <Type Name="IChannelSender" Kind="Interface" />
      <Type Name="IChannelSinkBase" Kind="Interface" />
      <Type Name="IClientChannelSink" Kind="Interface" />
      <Type Name="IClientChannelSinkProvider" Kind="Interface" />
      <Type Name="IClientChannelSinkStack" Kind="Interface" />
      <Type Name="IClientFormatterSink" Kind="Interface" />
      <Type Name="IClientFormatterSinkProvider" Kind="Interface" />
      <Type Name="IClientResponseChannelSinkStack" Kind="Interface" />
      <Type Name="ISecurableChannel" Kind="Interface" />
      <Type Name="IServerChannelSink" Kind="Interface" />
      <Type Name="IServerChannelSinkProvider" Kind="Interface" />
      <Type Name="IServerChannelSinkStack" Kind="Interface" />
      <Type Name="IServerFormatterSinkProvider" Kind="Interface" />
      <Type Name="IServerResponseChannelSinkStack" Kind="Interface" />
      <Type Name="ITransportHeaders" Kind="Interface" />
      <Type Name="ServerChannelSinkStack" Kind="Class" />
      <Type Name="ServerProcessing" Kind="Enumeration" />
      <Type Name="SinkProviderData" Kind="Class" />
      <Type Name="TransportHeaders" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Remoting.Contexts">
      <Type Name="Context" Kind="Class" />
      <Type Name="ContextAttribute" Kind="Class" />
      <Type Name="ContextProperty" Kind="Class" />
      <Type Name="CrossContextDelegate" Kind="Delegate" />
      <Type Name="IContextAttribute" Kind="Interface" />
      <Type Name="IContextProperty" Kind="Interface" />
      <Type Name="IContextPropertyActivator" Kind="Interface" />
      <Type Name="IContributeClientContextSink" Kind="Interface" />
      <Type Name="IContributeDynamicSink" Kind="Interface" />
      <Type Name="IContributeEnvoySink" Kind="Interface" />
      <Type Name="IContributeObjectSink" Kind="Interface" />
      <Type Name="IContributeServerContextSink" Kind="Interface" />
      <Type Name="IDynamicMessageSink" Kind="Interface" />
      <Type Name="IDynamicProperty" Kind="Interface" />
      <Type Name="SynchronizationAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Remoting.Lifetime">
      <Type Name="ClientSponsor" Kind="Class" />
      <Type Name="ILease" Kind="Interface" />
      <Type Name="ISponsor" Kind="Interface" />
      <Type Name="LeaseState" Kind="Enumeration" />
      <Type Name="LifetimeServices" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Remoting.Messaging">
      <Type Name="AsyncResult" Kind="Class" />
      <Type Name="CallContext" Kind="Class" />
      <Type Name="ConstructionCall" Kind="Class" />
      <Type Name="ConstructionResponse" Kind="Class" />
      <Type Name="Header" Kind="Class" />
      <Type Name="HeaderHandler" Kind="Delegate" />
      <Type Name="ILogicalThreadAffinative" Kind="Interface" />
      <Type Name="IMessage" Kind="Interface" />
      <Type Name="IMessageCtrl" Kind="Interface" />
      <Type Name="IMessageSink" Kind="Interface" />
      <Type Name="IMethodCallMessage" Kind="Interface" />
      <Type Name="IMethodMessage" Kind="Interface" />
      <Type Name="IMethodReturnMessage" Kind="Interface" />
      <Type Name="InternalMessageWrapper" Kind="Class" />
      <Type Name="IRemotingFormatter" Kind="Interface" />
      <Type Name="LogicalCallContext" Kind="Class" />
      <Type Name="MessageSurrogateFilter" Kind="Delegate" />
      <Type Name="MethodCall" Kind="Class" />
      <Type Name="MethodCallMessageWrapper" Kind="Class" />
      <Type Name="MethodResponse" Kind="Class" />
      <Type Name="MethodReturnMessageWrapper" Kind="Class" />
      <Type Name="OneWayAttribute" Kind="Class" />
      <Type Name="RemotingSurrogateSelector" Kind="Class" />
      <Type Name="ReturnMessage" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Remoting.Metadata">
      <Type Name="SoapAttribute" Kind="Class" />
      <Type Name="SoapFieldAttribute" Kind="Class" />
      <Type Name="SoapMethodAttribute" Kind="Class" />
      <Type Name="SoapOption" Kind="Enumeration" />
      <Type Name="SoapParameterAttribute" Kind="Class" />
      <Type Name="SoapTypeAttribute" Kind="Class" />
      <Type Name="XmlFieldOrderOption" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Runtime.Remoting.Metadata.W3cXsd2001">
      <Type Name="ISoapXsd" Kind="Interface" />
      <Type Name="SoapAnyUri" Kind="Class" />
      <Type Name="SoapBase64Binary" Kind="Class" />
      <Type Name="SoapDate" Kind="Class" />
      <Type Name="SoapDateTime" Kind="Class" />
      <Type Name="SoapDay" Kind="Class" />
      <Type Name="SoapDuration" Kind="Class" />
      <Type Name="SoapEntities" Kind="Class" />
      <Type Name="SoapEntity" Kind="Class" />
      <Type Name="SoapHexBinary" Kind="Class" />
      <Type Name="SoapId" Kind="Class" />
      <Type Name="SoapIdref" Kind="Class" />
      <Type Name="SoapIdrefs" Kind="Class" />
      <Type Name="SoapInteger" Kind="Class" />
      <Type Name="SoapLanguage" Kind="Class" />
      <Type Name="SoapMonth" Kind="Class" />
      <Type Name="SoapMonthDay" Kind="Class" />
      <Type Name="SoapName" Kind="Class" />
      <Type Name="SoapNcName" Kind="Class" />
      <Type Name="SoapNegativeInteger" Kind="Class" />
      <Type Name="SoapNmtoken" Kind="Class" />
      <Type Name="SoapNmtokens" Kind="Class" />
      <Type Name="SoapNonNegativeInteger" Kind="Class" />
      <Type Name="SoapNonPositiveInteger" Kind="Class" />
      <Type Name="SoapNormalizedString" Kind="Class" />
      <Type Name="SoapNotation" Kind="Class" />
      <Type Name="SoapPositiveInteger" Kind="Class" />
      <Type Name="SoapQName" Kind="Class" />
      <Type Name="SoapTime" Kind="Class" />
      <Type Name="SoapToken" Kind="Class" />
      <Type Name="SoapYear" Kind="Class" />
      <Type Name="SoapYearMonth" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Remoting.Proxies">
      <Type Name="ProxyAttribute" Kind="Class" />
      <Type Name="RealProxy" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Remoting.Services">
      <Type Name="EnterpriseServicesHelper" Kind="Class" />
      <Type Name="ITrackingHandler" Kind="Interface" />
      <Type Name="TrackingServices" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Serialization">
      <Type Name="Formatter" Kind="Class" />
      <Type Name="FormatterConverter" Kind="Class" />
      <Type Name="FormatterServices" Kind="Class" />
      <Type Name="IDeserializationCallback" Kind="Interface" />
      <Type Name="IFormatter" Kind="Interface" />
      <Type Name="IFormatterConverter" Kind="Interface" />
      <Type Name="IObjectReference" Kind="Interface" />
      <Type Name="ISafeSerializationData" Kind="Interface" />
      <Type Name="ISerializable" Kind="Interface" />
      <Type Name="ISerializationSurrogate" Kind="Interface" />
      <Type Name="ISurrogateSelector" Kind="Interface" />
      <Type Name="ObjectIDGenerator" Kind="Class" />
      <Type Name="ObjectManager" Kind="Class" />
      <Type Name="OnDeserializedAttribute" Kind="Class" />
      <Type Name="OnDeserializingAttribute" Kind="Class" />
      <Type Name="OnSerializedAttribute" Kind="Class" />
      <Type Name="OnSerializingAttribute" Kind="Class" />
      <Type Name="OptionalFieldAttribute" Kind="Class" />
      <Type Name="SafeSerializationEventArgs" Kind="Class" />
      <Type Name="SerializationBinder" Kind="Class" />
      <Type Name="SerializationEntry" Kind="Structure" />
      <Type Name="SerializationException" Kind="Class" />
      <Type Name="SerializationInfo" Kind="Class" />
      <Type Name="SerializationInfoEnumerator" Kind="Class" />
      <Type Name="SerializationObjectManager" Kind="Class" />
      <Type Name="StreamingContext" Kind="Structure" />
      <Type Name="StreamingContextStates" Kind="Enumeration" />
      <Type Name="SurrogateSelector" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Serialization.Formatters">
      <Type Name="FormatterAssemblyStyle" Kind="Enumeration" />
      <Type Name="FormatterTypeStyle" Kind="Enumeration" />
      <Type Name="IFieldInfo" Kind="Interface" />
      <Type Name="InternalRM" Kind="Class" />
      <Type Name="InternalST" Kind="Class" />
      <Type Name="ISoapMessage" Kind="Interface" />
      <Type Name="ServerFault" Kind="Class" />
      <Type Name="SoapFault" Kind="Class" />
      <Type Name="SoapMessage" Kind="Class" />
      <Type Name="TypeFilterLevel" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Runtime.Serialization.Formatters.Binary">
      <Type Name="BinaryFormatter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.Versioning">
      <Type Name="ComponentGuaranteesAttribute" Kind="Class" />
      <Type Name="ComponentGuaranteesOptions" Kind="Enumeration" />
      <Type Name="ResourceConsumptionAttribute" Kind="Class" />
      <Type Name="ResourceExposureAttribute" Kind="Class" />
      <Type Name="ResourceScope" Kind="Enumeration" />
      <Type Name="TargetFrameworkAttribute" Kind="Class" />
      <Type Name="VersioningHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Security">
      <Type Name="AllowPartiallyTrustedCallersAttribute" Kind="Class" />
      <Type Name="CodeAccessPermission" Kind="Class" />
      <Type Name="HostProtectionException" Kind="Class" />
      <Type Name="HostSecurityManager" Kind="Class" />
      <Type Name="HostSecurityManagerOptions" Kind="Enumeration" />
      <Type Name="IEvidenceFactory" Kind="Interface" />
      <Type Name="IPermission" Kind="Interface" />
      <Type Name="ISecurityEncodable" Kind="Interface" />
      <Type Name="ISecurityPolicyEncodable" Kind="Interface" />
      <Type Name="IStackWalk" Kind="Interface" />
      <Type Name="ManifestKinds" Kind="Enumeration" />
      <Type Name="NamedPermissionSet" Kind="Class" />
      <Type Name="PartialTrustVisibilityLevel" Kind="Enumeration" />
      <Type Name="PermissionSet" Kind="Class" />
      <Type Name="PolicyLevelType" Kind="Enumeration" />
      <Type Name="ReadOnlyPermissionSet" Kind="Class" />
      <Type Name="SecureString" Kind="Class" />
      <Type Name="SecurityContext" Kind="Class" />
      <Type Name="SecurityContextSource" Kind="Enumeration" />
      <Type Name="SecurityCriticalAttribute" Kind="Class" />
      <Type Name="SecurityCriticalScope" Kind="Enumeration" />
      <Type Name="SecurityElement" Kind="Class" />
      <Type Name="SecurityException" Kind="Class" />
      <Type Name="SecurityManager" Kind="Class" />
      <Type Name="SecurityRulesAttribute" Kind="Class" />
      <Type Name="SecurityRuleSet" Kind="Enumeration" />
      <Type Name="SecuritySafeCriticalAttribute" Kind="Class" />
      <Type Name="SecurityState" Kind="Class" />
      <Type Name="SecurityTransparentAttribute" Kind="Class" />
      <Type Name="SecurityTreatAsSafeAttribute" Kind="Class" />
      <Type Name="SecurityZone" Kind="Enumeration" />
      <Type Name="SuppressUnmanagedCodeSecurityAttribute" Kind="Class" />
      <Type Name="UnverifiableCodeAttribute" Kind="Class" />
      <Type Name="VerificationException" Kind="Class" />
      <Type Name="XmlSyntaxException" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Security.AccessControl">
      <Type Name="AccessControlActions" Kind="Enumeration" />
      <Type Name="AccessControlModification" Kind="Enumeration" />
      <Type Name="AccessControlSections" Kind="Enumeration" />
      <Type Name="AccessControlType" Kind="Enumeration" />
      <Type Name="AccessRule" Kind="Class" />
      <Type Name="AccessRule`1" DisplayName="AccessRule&lt;T&gt;" Kind="Class" />
      <Type Name="AceEnumerator" Kind="Class" />
      <Type Name="AceFlags" Kind="Enumeration" />
      <Type Name="AceQualifier" Kind="Enumeration" />
      <Type Name="AceType" Kind="Enumeration" />
      <Type Name="AuditFlags" Kind="Enumeration" />
      <Type Name="AuditRule" Kind="Class" />
      <Type Name="AuditRule`1" DisplayName="AuditRule&lt;T&gt;" Kind="Class" />
      <Type Name="AuthorizationRule" Kind="Class" />
      <Type Name="AuthorizationRuleCollection" Kind="Class" />
      <Type Name="CommonAce" Kind="Class" />
      <Type Name="CommonAcl" Kind="Class" />
      <Type Name="CommonObjectSecurity" Kind="Class" />
      <Type Name="CommonSecurityDescriptor" Kind="Class" />
      <Type Name="CompoundAce" Kind="Class" />
      <Type Name="CompoundAceType" Kind="Enumeration" />
      <Type Name="ControlFlags" Kind="Enumeration" />
      <Type Name="CryptoKeyAccessRule" Kind="Class" />
      <Type Name="CryptoKeyAuditRule" Kind="Class" />
      <Type Name="CryptoKeyRights" Kind="Enumeration" />
      <Type Name="CryptoKeySecurity" Kind="Class" />
      <Type Name="CustomAce" Kind="Class" />
      <Type Name="DirectoryObjectSecurity" Kind="Class" />
      <Type Name="DirectorySecurity" Kind="Class" />
      <Type Name="DiscretionaryAcl" Kind="Class" />
      <Type Name="EventWaitHandleAccessRule" Kind="Class" />
      <Type Name="EventWaitHandleAuditRule" Kind="Class" />
      <Type Name="EventWaitHandleRights" Kind="Enumeration" />
      <Type Name="EventWaitHandleSecurity" Kind="Class" />
      <Type Name="FileSecurity" Kind="Class" />
      <Type Name="FileSystemAccessRule" Kind="Class" />
      <Type Name="FileSystemAuditRule" Kind="Class" />
      <Type Name="FileSystemRights" Kind="Enumeration" />
      <Type Name="FileSystemSecurity" Kind="Class" />
      <Type Name="GenericAce" Kind="Class" />
      <Type Name="GenericAcl" Kind="Class" />
      <Type Name="GenericSecurityDescriptor" Kind="Class" />
      <Type Name="InheritanceFlags" Kind="Enumeration" />
      <Type Name="KnownAce" Kind="Class" />
      <Type Name="MutexAccessRule" Kind="Class" />
      <Type Name="MutexAuditRule" Kind="Class" />
      <Type Name="MutexRights" Kind="Enumeration" />
      <Type Name="MutexSecurity" Kind="Class" />
      <Type Name="NativeObjectSecurity" Kind="Class" />
      <Type Name="NativeObjectSecurity+ExceptionFromErrorCode" Kind="Delegate" />
      <Type Name="ObjectAccessRule" Kind="Class" />
      <Type Name="ObjectAce" Kind="Class" />
      <Type Name="ObjectAceFlags" Kind="Enumeration" />
      <Type Name="ObjectAuditRule" Kind="Class" />
      <Type Name="ObjectSecurity" Kind="Class" />
      <Type Name="ObjectSecurity`1" DisplayName="ObjectSecurity&lt;T&gt;" Kind="Class" />
      <Type Name="PrivilegeNotHeldException" Kind="Class" />
      <Type Name="PropagationFlags" Kind="Enumeration" />
      <Type Name="QualifiedAce" Kind="Class" />
      <Type Name="RawAcl" Kind="Class" />
      <Type Name="RawSecurityDescriptor" Kind="Class" />
      <Type Name="RegistryAccessRule" Kind="Class" />
      <Type Name="RegistryAuditRule" Kind="Class" />
      <Type Name="RegistryRights" Kind="Enumeration" />
      <Type Name="RegistrySecurity" Kind="Class" />
      <Type Name="ResourceType" Kind="Enumeration" />
      <Type Name="SecurityInfos" Kind="Enumeration" />
      <Type Name="SystemAcl" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Security.Claims">
      <Type Name="Claim" Kind="Class" />
      <Type Name="ClaimsIdentity" Kind="Class" />
      <Type Name="ClaimsPrincipal" Kind="Class" />
      <Type Name="ClaimTypes" Kind="Class" />
      <Type Name="ClaimValueTypes" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Security.Cryptography">
      <Type Name="AesCng" Kind="Class" />
      <Type Name="AesCryptoServiceProvider" Kind="Class" />
      <Type Name="AesManaged" Kind="Class" />
      <Type Name="AsymmetricAlgorithm" Kind="Class" />
      <Type Name="AsymmetricKeyExchangeDeformatter" Kind="Class" />
      <Type Name="AsymmetricKeyExchangeFormatter" Kind="Class" />
      <Type Name="AsymmetricSignatureDeformatter" Kind="Class" />
      <Type Name="AsymmetricSignatureFormatter" Kind="Class" />
      <Type Name="CipherMode" Kind="Enumeration" />
      <Type Name="CngAlgorithm" Kind="Class" />
      <Type Name="CngAlgorithmGroup" Kind="Class" />
      <Type Name="CngExportPolicies" Kind="Enumeration" />
      <Type Name="CngKey" Kind="Class" />
      <Type Name="CngKeyBlobFormat" Kind="Class" />
      <Type Name="CngKeyCreationOptions" Kind="Enumeration" />
      <Type Name="CngKeyCreationParameters" Kind="Class" />
      <Type Name="CngKeyHandleOpenOptions" Kind="Enumeration" />
      <Type Name="CngKeyOpenOptions" Kind="Enumeration" />
      <Type Name="CngKeyUsages" Kind="Enumeration" />
      <Type Name="CngProperty" Kind="Structure" />
      <Type Name="CngPropertyCollection" Kind="Class" />
      <Type Name="CngPropertyOptions" Kind="Enumeration" />
      <Type Name="CngProvider" Kind="Class" />
      <Type Name="CngUIPolicy" Kind="Class" />
      <Type Name="CngUIProtectionLevels" Kind="Enumeration" />
      <Type Name="CryptoAPITransform" Kind="Class" />
      <Type Name="CryptoConfig" Kind="Class" />
      <Type Name="CryptographicException" Kind="Class" />
      <Type Name="CryptographicUnexpectedOperationException" Kind="Class" />
      <Type Name="CryptoStream" Kind="Class" />
      <Type Name="CryptoStreamMode" Kind="Enumeration" />
      <Type Name="CspKeyContainerInfo" Kind="Class" />
      <Type Name="CspParameters" Kind="Class" />
      <Type Name="CspProviderFlags" Kind="Enumeration" />
      <Type Name="DeriveBytes" Kind="Class" />
      <Type Name="DES" Kind="Class" />
      <Type Name="DESCryptoServiceProvider" Kind="Class" />
      <Type Name="DSA" Kind="Class" />
      <Type Name="DSACng" Kind="Class" />
      <Type Name="DSACryptoServiceProvider" Kind="Class" />
      <Type Name="DSAParameters" Kind="Structure" />
      <Type Name="DSASignatureDeformatter" Kind="Class" />
      <Type Name="DSASignatureFormatter" Kind="Class" />
      <Type Name="ECCurve" Kind="Structure" />
      <Type Name="ECCurve+ECCurveType" Kind="Enumeration" />
      <Type Name="ECCurve+NamedCurves" Kind="Class" />
      <Type Name="ECDiffieHellman" Kind="Class" />
      <Type Name="ECDiffieHellmanCng" Kind="Class" />
      <Type Name="ECDiffieHellmanCngPublicKey" Kind="Class" />
      <Type Name="ECDiffieHellmanKeyDerivationFunction" Kind="Enumeration" />
      <Type Name="ECDiffieHellmanPublicKey" Kind="Class" />
      <Type Name="ECDsa" Kind="Class" />
      <Type Name="ECDsaCng" Kind="Class" />
      <Type Name="ECKeyXmlFormat" Kind="Enumeration" />
      <Type Name="ECParameters" Kind="Structure" />
      <Type Name="ECPoint" Kind="Structure" />
      <Type Name="FromBase64Transform" Kind="Class" />
      <Type Name="FromBase64TransformMode" Kind="Enumeration" />
      <Type Name="HashAlgorithm" Kind="Class" />
      <Type Name="HashAlgorithmName" Kind="Structure" />
      <Type Name="HMAC" Kind="Class" />
      <Type Name="HMACMD5" Kind="Class" />
      <Type Name="HMACRIPEMD160" Kind="Class" />
      <Type Name="HMACSHA1" Kind="Class" />
      <Type Name="HMACSHA256" Kind="Class" />
      <Type Name="HMACSHA384" Kind="Class" />
      <Type Name="HMACSHA512" Kind="Class" />
      <Type Name="ICryptoTransform" Kind="Interface" />
      <Type Name="ICspAsymmetricAlgorithm" Kind="Interface" />
      <Type Name="KeyedHashAlgorithm" Kind="Class" />
      <Type Name="KeyNumber" Kind="Enumeration" />
      <Type Name="KeySizes" Kind="Class" />
      <Type Name="MACTripleDES" Kind="Class" />
      <Type Name="ManifestSignatureInformation" Kind="Class" />
      <Type Name="ManifestSignatureInformationCollection" Kind="Class" />
      <Type Name="MaskGenerationMethod" Kind="Class" />
      <Type Name="MD5" Kind="Class" />
      <Type Name="MD5Cng" Kind="Class" />
      <Type Name="MD5CryptoServiceProvider" Kind="Class" />
      <Type Name="PaddingMode" Kind="Enumeration" />
      <Type Name="PasswordDeriveBytes" Kind="Class" />
      <Type Name="PKCS1MaskGenerationMethod" Kind="Class" />
      <Type Name="RandomNumberGenerator" Kind="Class" />
      <Type Name="RC2" Kind="Class" />
      <Type Name="RC2CryptoServiceProvider" Kind="Class" />
      <Type Name="Rfc2898DeriveBytes" Kind="Class" />
      <Type Name="Rijndael" Kind="Class" />
      <Type Name="RijndaelManaged" Kind="Class" />
      <Type Name="RijndaelManagedTransform" Kind="Class" />
      <Type Name="RIPEMD160" Kind="Class" />
      <Type Name="RIPEMD160Managed" Kind="Class" />
      <Type Name="RNGCryptoServiceProvider" Kind="Class" />
      <Type Name="RSA" Kind="Class" />
      <Type Name="RSACng" Kind="Class" />
      <Type Name="RSACryptoServiceProvider" Kind="Class" />
      <Type Name="RSAEncryptionPadding" Kind="Class" />
      <Type Name="RSAEncryptionPaddingMode" Kind="Enumeration" />
      <Type Name="RSAOAEPKeyExchangeDeformatter" Kind="Class" />
      <Type Name="RSAOAEPKeyExchangeFormatter" Kind="Class" />
      <Type Name="RSAParameters" Kind="Structure" />
      <Type Name="RSAPKCS1KeyExchangeDeformatter" Kind="Class" />
      <Type Name="RSAPKCS1KeyExchangeFormatter" Kind="Class" />
      <Type Name="RSAPKCS1SignatureDeformatter" Kind="Class" />
      <Type Name="RSAPKCS1SignatureFormatter" Kind="Class" />
      <Type Name="RSASignaturePadding" Kind="Class" />
      <Type Name="RSASignaturePaddingMode" Kind="Enumeration" />
      <Type Name="SHA1" Kind="Class" />
      <Type Name="SHA1Cng" Kind="Class" />
      <Type Name="SHA1CryptoServiceProvider" Kind="Class" />
      <Type Name="SHA1Managed" Kind="Class" />
      <Type Name="SHA256" Kind="Class" />
      <Type Name="SHA256Cng" Kind="Class" />
      <Type Name="SHA256CryptoServiceProvider" Kind="Class" />
      <Type Name="SHA256Managed" Kind="Class" />
      <Type Name="SHA384" Kind="Class" />
      <Type Name="SHA384Cng" Kind="Class" />
      <Type Name="SHA384CryptoServiceProvider" Kind="Class" />
      <Type Name="SHA384Managed" Kind="Class" />
      <Type Name="SHA512" Kind="Class" />
      <Type Name="SHA512Cng" Kind="Class" />
      <Type Name="SHA512CryptoServiceProvider" Kind="Class" />
      <Type Name="SHA512Managed" Kind="Class" />
      <Type Name="SignatureDescription" Kind="Class" />
      <Type Name="SignatureVerificationResult" Kind="Enumeration" />
      <Type Name="StrongNameSignatureInformation" Kind="Class" />
      <Type Name="SymmetricAlgorithm" Kind="Class" />
      <Type Name="ToBase64Transform" Kind="Class" />
      <Type Name="TripleDES" Kind="Class" />
      <Type Name="TripleDESCng" Kind="Class" />
      <Type Name="TripleDESCryptoServiceProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Security.Cryptography.X509Certificates">
      <Type Name="AuthenticodeSignatureInformation" Kind="Class" />
      <Type Name="DSACertificateExtensions" Kind="Class" />
      <Type Name="ECDsaCertificateExtensions" Kind="Class" />
      <Type Name="RSACertificateExtensions" Kind="Class" />
      <Type Name="TimestampInformation" Kind="Class" />
      <Type Name="TrustStatus" Kind="Enumeration" />
      <Type Name="X509Certificate" Kind="Class" />
      <Type Name="X509ContentType" Kind="Enumeration" />
      <Type Name="X509KeyStorageFlags" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Security.Permissions">
      <Type Name="CodeAccessSecurityAttribute" Kind="Class" />
      <Type Name="EnvironmentPermission" Kind="Class" />
      <Type Name="EnvironmentPermissionAccess" Kind="Enumeration" />
      <Type Name="EnvironmentPermissionAttribute" Kind="Class" />
      <Type Name="FileDialogPermission" Kind="Class" />
      <Type Name="FileDialogPermissionAccess" Kind="Enumeration" />
      <Type Name="FileDialogPermissionAttribute" Kind="Class" />
      <Type Name="FileIOPermission" Kind="Class" />
      <Type Name="FileIOPermissionAccess" Kind="Enumeration" />
      <Type Name="FileIOPermissionAttribute" Kind="Class" />
      <Type Name="GacIdentityPermission" Kind="Class" />
      <Type Name="GacIdentityPermissionAttribute" Kind="Class" />
      <Type Name="HostProtectionAttribute" Kind="Class" />
      <Type Name="HostProtectionResource" Kind="Enumeration" />
      <Type Name="IsolatedStorageContainment" Kind="Enumeration" />
      <Type Name="IsolatedStorageFilePermission" Kind="Class" />
      <Type Name="IsolatedStorageFilePermissionAttribute" Kind="Class" />
      <Type Name="IsolatedStoragePermission" Kind="Class" />
      <Type Name="IsolatedStoragePermissionAttribute" Kind="Class" />
      <Type Name="IUnrestrictedPermission" Kind="Interface" />
      <Type Name="KeyContainerPermission" Kind="Class" />
      <Type Name="KeyContainerPermissionAccessEntry" Kind="Class" />
      <Type Name="KeyContainerPermissionAccessEntryCollection" Kind="Class" />
      <Type Name="KeyContainerPermissionAccessEntryEnumerator" Kind="Class" />
      <Type Name="KeyContainerPermissionAttribute" Kind="Class" />
      <Type Name="KeyContainerPermissionFlags" Kind="Enumeration" />
      <Type Name="PermissionSetAttribute" Kind="Class" />
      <Type Name="PermissionState" Kind="Enumeration" />
      <Type Name="PrincipalPermission" Kind="Class" />
      <Type Name="PrincipalPermissionAttribute" Kind="Class" />
      <Type Name="PublisherIdentityPermission" Kind="Class" />
      <Type Name="PublisherIdentityPermissionAttribute" Kind="Class" />
      <Type Name="ReflectionPermission" Kind="Class" />
      <Type Name="ReflectionPermissionAttribute" Kind="Class" />
      <Type Name="ReflectionPermissionFlag" Kind="Enumeration" />
      <Type Name="RegistryPermission" Kind="Class" />
      <Type Name="RegistryPermissionAccess" Kind="Enumeration" />
      <Type Name="RegistryPermissionAttribute" Kind="Class" />
      <Type Name="SecurityAction" Kind="Enumeration" />
      <Type Name="SecurityAttribute" Kind="Class" />
      <Type Name="SecurityPermission" Kind="Class" />
      <Type Name="SecurityPermissionAttribute" Kind="Class" />
      <Type Name="SecurityPermissionFlag" Kind="Enumeration" />
      <Type Name="SiteIdentityPermission" Kind="Class" />
      <Type Name="SiteIdentityPermissionAttribute" Kind="Class" />
      <Type Name="StrongNameIdentityPermission" Kind="Class" />
      <Type Name="StrongNameIdentityPermissionAttribute" Kind="Class" />
      <Type Name="StrongNamePublicKeyBlob" Kind="Class" />
      <Type Name="UIPermission" Kind="Class" />
      <Type Name="UIPermissionAttribute" Kind="Class" />
      <Type Name="UIPermissionClipboard" Kind="Enumeration" />
      <Type Name="UIPermissionWindow" Kind="Enumeration" />
      <Type Name="UrlIdentityPermission" Kind="Class" />
      <Type Name="UrlIdentityPermissionAttribute" Kind="Class" />
      <Type Name="ZoneIdentityPermission" Kind="Class" />
      <Type Name="ZoneIdentityPermissionAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Security.Policy">
      <Type Name="AllMembershipCondition" Kind="Class" />
      <Type Name="ApplicationDirectory" Kind="Class" />
      <Type Name="ApplicationDirectoryMembershipCondition" Kind="Class" />
      <Type Name="ApplicationSecurityInfo" Kind="Class" />
      <Type Name="ApplicationSecurityManager" Kind="Class" />
      <Type Name="ApplicationTrust" Kind="Class" />
      <Type Name="ApplicationTrustCollection" Kind="Class" />
      <Type Name="ApplicationTrustEnumerator" Kind="Class" />
      <Type Name="ApplicationVersionMatch" Kind="Enumeration" />
      <Type Name="CodeConnectAccess" Kind="Class" />
      <Type Name="CodeGroup" Kind="Class" />
      <Type Name="Evidence" Kind="Class" />
      <Type Name="EvidenceBase" Kind="Class" />
      <Type Name="FileCodeGroup" Kind="Class" />
      <Type Name="FirstMatchCodeGroup" Kind="Class" />
      <Type Name="GacInstalled" Kind="Class" />
      <Type Name="GacMembershipCondition" Kind="Class" />
      <Type Name="Hash" Kind="Class" />
      <Type Name="HashMembershipCondition" Kind="Class" />
      <Type Name="IApplicationTrustManager" Kind="Interface" />
      <Type Name="IIdentityPermissionFactory" Kind="Interface" />
      <Type Name="IMembershipCondition" Kind="Interface" />
      <Type Name="NetCodeGroup" Kind="Class" />
      <Type Name="PermissionRequestEvidence" Kind="Class" />
      <Type Name="PolicyException" Kind="Class" />
      <Type Name="PolicyLevel" Kind="Class" />
      <Type Name="PolicyStatement" Kind="Class" />
      <Type Name="PolicyStatementAttribute" Kind="Enumeration" />
      <Type Name="Publisher" Kind="Class" />
      <Type Name="PublisherMembershipCondition" Kind="Class" />
      <Type Name="Site" Kind="Class" />
      <Type Name="SiteMembershipCondition" Kind="Class" />
      <Type Name="StrongName" Kind="Class" />
      <Type Name="StrongNameMembershipCondition" Kind="Class" />
      <Type Name="TrustManagerContext" Kind="Class" />
      <Type Name="TrustManagerUIContext" Kind="Enumeration" />
      <Type Name="UnionCodeGroup" Kind="Class" />
      <Type Name="Url" Kind="Class" />
      <Type Name="UrlMembershipCondition" Kind="Class" />
      <Type Name="Zone" Kind="Class" />
      <Type Name="ZoneMembershipCondition" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Security.Principal">
      <Type Name="GenericIdentity" Kind="Class" />
      <Type Name="GenericPrincipal" Kind="Class" />
      <Type Name="IdentityNotMappedException" Kind="Class" />
      <Type Name="IdentityReference" Kind="Class" />
      <Type Name="IdentityReferenceCollection" Kind="Class" />
      <Type Name="IIdentity" Kind="Interface" />
      <Type Name="IPrincipal" Kind="Interface" />
      <Type Name="NTAccount" Kind="Class" />
      <Type Name="PrincipalPolicy" Kind="Enumeration" />
      <Type Name="SecurityIdentifier" Kind="Class" />
      <Type Name="TokenAccessLevels" Kind="Enumeration" />
      <Type Name="TokenImpersonationLevel" Kind="Enumeration" />
      <Type Name="WellKnownSidType" Kind="Enumeration" />
      <Type Name="WindowsAccountType" Kind="Enumeration" />
      <Type Name="WindowsBuiltInRole" Kind="Enumeration" />
      <Type Name="WindowsIdentity" Kind="Class" />
      <Type Name="WindowsImpersonationContext" Kind="Class" />
      <Type Name="WindowsPrincipal" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ServiceModel.Activities.Presentation">
      <Type Name="ServiceContractImporter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ServiceModel.Activities.Presentation.Factories">
      <Type Name="ReceiveAndSendReplyFactory" Kind="Class" />
      <Type Name="SendAndReceiveReplyFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="System.ServiceProcess.Design">
      <Type Name="ServiceControllerDesigner" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Text">
      <Type Name="ASCIIEncoding" Kind="Class" />
      <Type Name="Decoder" Kind="Class" />
      <Type Name="DecoderExceptionFallback" Kind="Class" />
      <Type Name="DecoderExceptionFallbackBuffer" Kind="Class" />
      <Type Name="DecoderFallback" Kind="Class" />
      <Type Name="DecoderFallbackBuffer" Kind="Class" />
      <Type Name="DecoderFallbackException" Kind="Class" />
      <Type Name="DecoderReplacementFallback" Kind="Class" />
      <Type Name="DecoderReplacementFallbackBuffer" Kind="Class" />
      <Type Name="Encoder" Kind="Class" />
      <Type Name="EncoderExceptionFallback" Kind="Class" />
      <Type Name="EncoderExceptionFallbackBuffer" Kind="Class" />
      <Type Name="EncoderFallback" Kind="Class" />
      <Type Name="EncoderFallbackBuffer" Kind="Class" />
      <Type Name="EncoderFallbackException" Kind="Class" />
      <Type Name="EncoderReplacementFallback" Kind="Class" />
      <Type Name="EncoderReplacementFallbackBuffer" Kind="Class" />
      <Type Name="Encoding" Kind="Class" />
      <Type Name="EncodingInfo" Kind="Class" />
      <Type Name="EncodingProvider" Kind="Class" />
      <Type Name="NormalizationForm" Kind="Enumeration" />
      <Type Name="StringBuilder" Kind="Class" />
      <Type Name="UnicodeEncoding" Kind="Class" />
      <Type Name="UTF32Encoding" Kind="Class" />
      <Type Name="UTF7Encoding" Kind="Class" />
      <Type Name="UTF8Encoding" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Threading">
      <Type Name="AbandonedMutexException" Kind="Class" />
      <Type Name="ApartmentState" Kind="Enumeration" />
      <Type Name="AsyncFlowControl" Kind="Structure" />
      <Type Name="AsyncLocal`1" DisplayName="AsyncLocal&lt;T&gt;" Kind="Class" />
      <Type Name="AsyncLocalValueChangedArgs`1" DisplayName="AsyncLocalValueChangedArgs&lt;T&gt;" Kind="Structure" />
      <Type Name="AutoResetEvent" Kind="Class" />
      <Type Name="CancellationToken" Kind="Structure" />
      <Type Name="CancellationTokenRegistration" Kind="Structure" />
      <Type Name="CancellationTokenSource" Kind="Class" />
      <Type Name="CompressedStack" Kind="Class" />
      <Type Name="ContextCallback" Kind="Delegate" />
      <Type Name="CountdownEvent" Kind="Class" />
      <Type Name="EventResetMode" Kind="Enumeration" />
      <Type Name="EventWaitHandle" Kind="Class" />
      <Type Name="ExecutionContext" Kind="Class" />
      <Type Name="HostExecutionContext" Kind="Class" />
      <Type Name="HostExecutionContextManager" Kind="Class" />
      <Type Name="Interlocked" Kind="Class" />
      <Type Name="IOCompletionCallback" Kind="Delegate" />
      <Type Name="LazyInitializer" Kind="Class" />
      <Type Name="LockCookie" Kind="Structure" />
      <Type Name="LockRecursionPolicy" Kind="Enumeration" />
      <Type Name="ManualResetEvent" Kind="Class" />
      <Type Name="ManualResetEventSlim" Kind="Class" />
      <Type Name="Monitor" Kind="Class" />
      <Type Name="Mutex" Kind="Class" />
      <Type Name="NativeOverlapped" Kind="Structure" />
      <Type Name="Overlapped" Kind="Class" />
      <Type Name="ParameterizedThreadStart" Kind="Delegate" />
      <Type Name="ReaderWriterLock" Kind="Class" />
      <Type Name="ReaderWriterLockSlim" Kind="Class" />
      <Type Name="RegisteredWaitHandle" Kind="Class" />
      <Type Name="SemaphoreFullException" Kind="Class" />
      <Type Name="SemaphoreSlim" Kind="Class" />
      <Type Name="SendOrPostCallback" Kind="Delegate" />
      <Type Name="SpinLock" Kind="Structure" />
      <Type Name="SpinWait" Kind="Structure" />
      <Type Name="SynchronizationContext" Kind="Class" />
      <Type Name="SynchronizationLockException" Kind="Class" />
      <Type Name="Thread" Kind="Class" />
      <Type Name="ThreadAbortException" Kind="Class" />
      <Type Name="ThreadInterruptedException" Kind="Class" />
      <Type Name="ThreadLocal`1" DisplayName="ThreadLocal&lt;T&gt;" Kind="Class" />
      <Type Name="ThreadPool" Kind="Class" />
      <Type Name="ThreadPriority" Kind="Enumeration" />
      <Type Name="ThreadStart" Kind="Delegate" />
      <Type Name="ThreadStartException" Kind="Class" />
      <Type Name="ThreadState" Kind="Enumeration" />
      <Type Name="ThreadStateException" Kind="Class" />
      <Type Name="Timeout" Kind="Class" />
      <Type Name="Timer" Kind="Class" />
      <Type Name="TimerCallback" Kind="Delegate" />
      <Type Name="Volatile" Kind="Class" />
      <Type Name="WaitCallback" Kind="Delegate" />
      <Type Name="WaitHandle" Kind="Class" />
      <Type Name="WaitHandleCannotBeOpenedException" Kind="Class" />
      <Type Name="WaitHandleExtensions" Kind="Class" />
      <Type Name="WaitOrTimerCallback" Kind="Delegate" />
    </Namespace>
    <Namespace Name="System.Threading.Tasks">
      <Type Name="ConcurrentExclusiveSchedulerPair" Kind="Class" />
      <Type Name="Parallel" Kind="Class" />
      <Type Name="ParallelLoopResult" Kind="Structure" />
      <Type Name="ParallelLoopState" Kind="Class" />
      <Type Name="ParallelOptions" Kind="Class" />
      <Type Name="Task" Kind="Class" />
      <Type Name="Task`1" DisplayName="Task&lt;TResult&gt;" Kind="Class" />
      <Type Name="TaskCanceledException" Kind="Class" />
      <Type Name="TaskCompletionSource`1" DisplayName="TaskCompletionSource&lt;TResult&gt;" Kind="Class" />
      <Type Name="TaskContinuationOptions" Kind="Enumeration" />
      <Type Name="TaskCreationOptions" Kind="Enumeration" />
      <Type Name="TaskExtensions" Kind="Class" />
      <Type Name="TaskFactory" Kind="Class" />
      <Type Name="TaskFactory`1" DisplayName="TaskFactory&lt;TResult&gt;" Kind="Class" />
      <Type Name="TaskScheduler" Kind="Class" />
      <Type Name="TaskSchedulerException" Kind="Class" />
      <Type Name="TaskStatus" Kind="Enumeration" />
      <Type Name="UnobservedTaskExceptionEventArgs" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.UI.Design">
      <Type Name="AppSettingsExpressionEditor" Kind="Class" />
      <Type Name="CalendarDataBindingHandler" Kind="Class" />
      <Type Name="ClientScriptItem" Kind="Class" />
      <Type Name="ClientScriptItemCollection" Kind="Class" />
      <Type Name="ColorBuilder" Kind="Class" />
      <Type Name="ConnectionStringEditor" Kind="Class" />
      <Type Name="ConnectionStringsExpressionEditor" Kind="Class" />
      <Type Name="ContainerControlDesigner" Kind="Class" />
      <Type Name="ContentDefinition" Kind="Class" />
      <Type Name="ContentDesignerState" Kind="Enumeration" />
      <Type Name="ControlDesigner" Kind="Class" />
      <Type Name="ControlDesignerState" Kind="Class" />
      <Type Name="ControlLocation" Kind="Enumeration" />
      <Type Name="ControlParser" Kind="Class" />
      <Type Name="ControlPersister" Kind="Class" />
      <Type Name="DataBindingCollectionConverter" Kind="Class" />
      <Type Name="DataBindingCollectionEditor" Kind="Class" />
      <Type Name="DataBindingHandler" Kind="Class" />
      <Type Name="DataBindingValueUIHandler" Kind="Class" />
      <Type Name="DataColumnSelectionConverter" Kind="Class" />
      <Type Name="DataFieldConverter" Kind="Class" />
      <Type Name="DataMemberConverter" Kind="Class" />
      <Type Name="DataSetFieldSchema" Kind="Class" />
      <Type Name="DataSetSchema" Kind="Class" />
      <Type Name="DataSetViewSchema" Kind="Class" />
      <Type Name="DataSourceBooleanViewSchemaConverter" Kind="Class" />
      <Type Name="DataSourceConverter" Kind="Class" />
      <Type Name="DataSourceDesigner" Kind="Class" />
      <Type Name="DataSourceViewSchemaConverter" Kind="Class" />
      <Type Name="DesignerAutoFormat" Kind="Class" />
      <Type Name="DesignerAutoFormatCollection" Kind="Class" />
      <Type Name="DesignerAutoFormatStyle" Kind="Class" />
      <Type Name="DesignerDataSourceView" Kind="Class" />
      <Type Name="DesignerHierarchicalDataSourceView" Kind="Class" />
      <Type Name="DesignerObject" Kind="Class" />
      <Type Name="DesignerRegion" Kind="Class" />
      <Type Name="DesignerRegionCollection" Kind="Class" />
      <Type Name="DesignerRegionMouseEventArgs" Kind="Class" />
      <Type Name="DesignTimeData" Kind="Class" />
      <Type Name="DesignTimeResourceProviderFactory" Kind="Class" />
      <Type Name="EditableDesignerRegion" Kind="Class" />
      <Type Name="ExpressionEditor" Kind="Class" />
      <Type Name="ExpressionEditorSheet" Kind="Class" />
      <Type Name="ExpressionsCollectionConverter" Kind="Class" />
      <Type Name="ExpressionsCollectionEditor" Kind="Class" />
      <Type Name="HierarchicalDataSourceConverter" Kind="Class" />
      <Type Name="HierarchicalDataSourceDesigner" Kind="Class" />
      <Type Name="HtmlControlDesigner" Kind="Class" />
      <Type Name="HtmlIntrinsicControlDesigner" Kind="Class" />
      <Type Name="HyperLinkDataBindingHandler" Kind="Class" />
      <Type Name="IContentResolutionService" Kind="Interface" />
      <Type Name="IControlDesignerBehavior" Kind="Interface" />
      <Type Name="IControlDesignerTag" Kind="Interface" />
      <Type Name="IControlDesignerView" Kind="Interface" />
      <Type Name="IDataBindingSchemaProvider" Kind="Interface" />
      <Type Name="IDataSourceDesigner" Kind="Interface" />
      <Type Name="IDataSourceFieldSchema" Kind="Interface" />
      <Type Name="IDataSourceProvider" Kind="Interface" />
      <Type Name="IDataSourceSchema" Kind="Interface" />
      <Type Name="IDataSourceViewSchema" Kind="Interface" />
      <Type Name="IDesignTimeResourceProviderFactoryService" Kind="Interface" />
      <Type Name="IDesignTimeResourceWriter" Kind="Interface" />
      <Type Name="IDocumentProjectItem" Kind="Interface" />
      <Type Name="IFolderProjectItem" Kind="Interface" />
      <Type Name="IHierarchicalDataSourceDesigner" Kind="Interface" />
      <Type Name="IHtmlControlDesignerBehavior" Kind="Interface" />
      <Type Name="ImageUrlEditor" Kind="Class" />
      <Type Name="IProjectItem" Kind="Interface" />
      <Type Name="ITemplateEditingFrame" Kind="Interface" />
      <Type Name="ITemplateEditingService" Kind="Interface" />
      <Type Name="IWebAdministrationService" Kind="Interface" />
      <Type Name="IWebApplication" Kind="Interface" />
      <Type Name="IWebFormReferenceManager" Kind="Interface" />
      <Type Name="IWebFormsBuilderUIService" Kind="Interface" />
      <Type Name="IWebFormsDocumentService" Kind="Interface" />
      <Type Name="MailFileEditor" Kind="Class" />
      <Type Name="MdbDataFileEditor" Kind="Class" />
      <Type Name="ReadWriteControlDesigner" Kind="Class" />
      <Type Name="ResourceExpressionEditor" Kind="Class" />
      <Type Name="ResourceExpressionEditorSheet" Kind="Class" />
      <Type Name="RouteUrlExpressionEditor" Kind="Class" />
      <Type Name="RouteUrlExpressionEditorSheet" Kind="Class" />
      <Type Name="RouteValueExpressionEditor" Kind="Class" />
      <Type Name="RouteValueExpressionEditorSheet" Kind="Class" />
      <Type Name="SkinIDTypeConverter" Kind="Class" />
      <Type Name="SupportsPreviewControlAttribute" Kind="Class" />
      <Type Name="TemplatedControlDesigner" Kind="Class" />
      <Type Name="TemplatedEditableDesignerRegion" Kind="Class" />
      <Type Name="TemplateDefinition" Kind="Class" />
      <Type Name="TemplateEditingService" Kind="Class" />
      <Type Name="TemplateEditingVerb" Kind="Class" />
      <Type Name="TemplateGroup" Kind="Class" />
      <Type Name="TemplateGroupCollection" Kind="Class" />
      <Type Name="TemplateModeChangedEventArgs" Kind="Class" />
      <Type Name="TextControlDesigner" Kind="Class" />
      <Type Name="TextDataBindingHandler" Kind="Class" />
      <Type Name="TransactedChangeCallback" Kind="Delegate" />
      <Type Name="TypeSchema" Kind="Class" />
      <Type Name="UrlBuilder" Kind="Class" />
      <Type Name="UrlBuilderOptions" Kind="Enumeration" />
      <Type Name="UrlEditor" Kind="Class" />
      <Type Name="UserControlDesigner" Kind="Class" />
      <Type Name="UserControlFileEditor" Kind="Class" />
      <Type Name="ViewEvent" Kind="Class" />
      <Type Name="ViewEventArgs" Kind="Class" />
      <Type Name="ViewEventHandler" Kind="Delegate" />
      <Type Name="ViewFlags" Kind="Enumeration" />
      <Type Name="ViewRendering" Kind="Class" />
      <Type Name="WebControlToolboxItem" Kind="Class" />
      <Type Name="WebFormsDesignerActionService" Kind="Class" />
      <Type Name="WebFormsReferenceManager" Kind="Class" />
      <Type Name="WebFormsRootDesigner" Kind="Class" />
      <Type Name="XmlDataFileEditor" Kind="Class" />
      <Type Name="XmlDocumentSchema" Kind="Class" />
      <Type Name="XmlFileEditor" Kind="Class" />
      <Type Name="XmlUrlEditor" Kind="Class" />
      <Type Name="XsdSchemaFileEditor" Kind="Class" />
      <Type Name="XslTransformFileEditor" Kind="Class" />
      <Type Name="XslUrlEditor" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.UI.Design.Directives">
      <Type Name="DirectiveAttribute" Kind="Class" />
      <Type Name="DirectiveRegistry" Kind="Class" />
      <Type Name="SchemaElementNameAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.UI.Design.WebControls">
      <Type Name="AccessDataSourceDesigner" Kind="Class" />
      <Type Name="AdRotatorDesigner" Kind="Class" />
      <Type Name="BaseDataBoundControlDesigner" Kind="Class" />
      <Type Name="BaseDataListComponentEditor" Kind="Class" />
      <Type Name="BaseDataListDesigner" Kind="Class" />
      <Type Name="BaseValidatorDesigner" Kind="Class" />
      <Type Name="BulletedListDesigner" Kind="Class" />
      <Type Name="ButtonDesigner" Kind="Class" />
      <Type Name="CalendarAutoFormatDialog" Kind="Class" />
      <Type Name="CalendarDesigner" Kind="Class" />
      <Type Name="ChangePasswordDesigner" Kind="Class" />
      <Type Name="CheckBoxDesigner" Kind="Class" />
      <Type Name="CompositeControlDesigner" Kind="Class" />
      <Type Name="ContentDesigner" Kind="Class" />
      <Type Name="ContentPlaceHolderDesigner" Kind="Class" />
      <Type Name="CreateUserWizardDesigner" Kind="Class" />
      <Type Name="CreateUserWizardStepCollectionEditor" Kind="Class" />
      <Type Name="DataBoundControlDesigner" Kind="Class" />
      <Type Name="DataControlFieldDesigner" Kind="Class" />
      <Type Name="DataControlFieldTypeEditor" Kind="Class" />
      <Type Name="DataGridColumnCollectionEditor" Kind="Class" />
      <Type Name="DataGridComponentEditor" Kind="Class" />
      <Type Name="DataGridDesigner" Kind="Class" />
      <Type Name="DataListComponentEditor" Kind="Class" />
      <Type Name="DataListDesigner" Kind="Class" />
      <Type Name="DataProviderNameConverter" Kind="Class" />
      <Type Name="DataSourceIDConverter" Kind="Class" />
      <Type Name="DetailsViewDesigner" Kind="Class" />
      <Type Name="EmbeddedMailObjectCollectionEditor" Kind="Class" />
      <Type Name="FormViewDesigner" Kind="Class" />
      <Type Name="GridViewDesigner" Kind="Class" />
      <Type Name="HiddenFieldDesigner" Kind="Class" />
      <Type Name="HierarchicalDataBoundControlDesigner" Kind="Class" />
      <Type Name="HierarchicalDataSourceIDConverter" Kind="Class" />
      <Type Name="HotSpotCollectionEditor" Kind="Class" />
      <Type Name="HyperLinkDesigner" Kind="Class" />
      <Type Name="LabelDesigner" Kind="Class" />
      <Type Name="LinkButtonDesigner" Kind="Class" />
      <Type Name="ListControlDataBindingHandler" Kind="Class" />
      <Type Name="ListControlDesigner" Kind="Class" />
      <Type Name="ListItemsCollectionEditor" Kind="Class" />
      <Type Name="LiteralDesigner" Kind="Class" />
      <Type Name="LoginDesigner" Kind="Class" />
      <Type Name="LoginNameDesigner" Kind="Class" />
      <Type Name="LoginStatusDesigner" Kind="Class" />
      <Type Name="LoginViewDesigner" Kind="Class" />
      <Type Name="MailDefinitionBodyFileNameEditor" Kind="Class" />
      <Type Name="MenuBindingsEditor" Kind="Class" />
      <Type Name="MenuDesigner" Kind="Class" />
      <Type Name="MenuItemCollectionEditor" Kind="Class" />
      <Type Name="MenuItemStyleCollectionEditor" Kind="Class" />
      <Type Name="MultiViewDesigner" Kind="Class" />
      <Type Name="ObjectDataSourceDesigner" Kind="Class" />
      <Type Name="ObjectDesignerDataSourceView" Kind="Class" />
      <Type Name="PanelContainerDesigner" Kind="Class" />
      <Type Name="PanelDesigner" Kind="Class" />
      <Type Name="ParameterCollectionEditor" Kind="Class" />
      <Type Name="ParameterEditorUserControl" Kind="Class" />
      <Type Name="PasswordRecoveryDesigner" Kind="Class" />
      <Type Name="PreviewControlDesigner" Kind="Class" />
      <Type Name="RegexEditorDialog" Kind="Class" />
      <Type Name="RegexTypeEditor" Kind="Class" />
      <Type Name="RepeaterDesigner" Kind="Class" />
      <Type Name="RoleGroupCollectionEditor" Kind="Class" />
      <Type Name="SiteMapDataSourceDesigner" Kind="Class" />
      <Type Name="SiteMapDesignerDataSourceView" Kind="Class" />
      <Type Name="SiteMapDesignerHierarchicalDataSourceView" Kind="Class" />
      <Type Name="SiteMapPathDesigner" Kind="Class" />
      <Type Name="SqlDataSourceConnectionStringEditor" Kind="Class" />
      <Type Name="SqlDataSourceDesigner" Kind="Class" />
      <Type Name="SqlDesignerDataSourceView" Kind="Class" />
      <Type Name="StyleCollectionEditor" Kind="Class" />
      <Type Name="SubMenuStyleCollectionEditor" Kind="Class" />
      <Type Name="SubstitutionDesigner" Kind="Class" />
      <Type Name="TableCellsCollectionEditor" Kind="Class" />
      <Type Name="TableDesigner" Kind="Class" />
      <Type Name="TableRowsCollectionEditor" Kind="Class" />
      <Type Name="TreeNodeBindingDepthConverter" Kind="Class" />
      <Type Name="TreeNodeCollectionEditor" Kind="Class" />
      <Type Name="TreeNodeStyleCollectionEditor" Kind="Class" />
      <Type Name="TreeViewBindingsEditor" Kind="Class" />
      <Type Name="TreeViewDesigner" Kind="Class" />
      <Type Name="ValidationSummaryDesigner" Kind="Class" />
      <Type Name="ViewDesigner" Kind="Class" />
      <Type Name="WizardDesigner" Kind="Class" />
      <Type Name="WizardStepCollectionEditor" Kind="Class" />
      <Type Name="WizardStepEditableRegion" Kind="Class" />
      <Type Name="WizardStepTemplatedEditableRegion" Kind="Class" />
      <Type Name="XmlDataSourceDesigner" Kind="Class" />
      <Type Name="XmlDesigner" Kind="Class" />
      <Type Name="XmlDesignerDataSourceView" Kind="Class" />
      <Type Name="XmlDesignerHierarchicalDataSourceView" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.UI.Design.WebControls.WebParts">
      <Type Name="CatalogPartDesigner" Kind="Class" />
      <Type Name="CatalogZoneDesigner" Kind="Class" />
      <Type Name="ConnectionsZoneDesigner" Kind="Class" />
      <Type Name="DeclarativeCatalogPartDesigner" Kind="Class" />
      <Type Name="EditorPartDesigner" Kind="Class" />
      <Type Name="EditorZoneDesigner" Kind="Class" />
      <Type Name="PageCatalogPartDesigner" Kind="Class" />
      <Type Name="PartDesigner" Kind="Class" />
      <Type Name="ProxyWebPartManagerDesigner" Kind="Class" />
      <Type Name="ToolZoneDesigner" Kind="Class" />
      <Type Name="WebPartDesigner" Kind="Class" />
      <Type Name="WebPartManagerDesigner" Kind="Class" />
      <Type Name="WebPartZoneBaseDesigner" Kind="Class" />
      <Type Name="WebPartZoneDesigner" Kind="Class" />
      <Type Name="WebZoneDesigner" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows">
      <Type Name="Application" Kind="Class" />
      <Type Name="AttachedPropertyBrowsableForChildrenAttribute" Kind="Class" />
      <Type Name="AutoResizedEventArgs" Kind="Class" />
      <Type Name="AutoResizedEventHandler" Kind="Delegate" />
      <Type Name="BaselineAlignment" Kind="Enumeration" />
      <Type Name="BaseValueSource" Kind="Enumeration" />
      <Type Name="Clipboard" Kind="Class" />
      <Type Name="ColorConvertedBitmapExtension" Kind="Class" />
      <Type Name="ColumnSpaceDistribution" Kind="Enumeration" />
      <Type Name="ComponentResourceKey" Kind="Class" />
      <Type Name="Condition" Kind="Class" />
      <Type Name="ConditionCollection" Kind="Class" />
      <Type Name="ContentElement" Kind="Class" />
      <Type Name="ContentOperations" Kind="Class" />
      <Type Name="CoreCompatibilityPreferences" Kind="Class" />
      <Type Name="CornerRadius" Kind="Structure" />
      <Type Name="CornerRadiusConverter" Kind="Class" />
      <Type Name="CultureInfoIetfLanguageTagConverter" Kind="Class" />
      <Type Name="DataFormat" Kind="Class" />
      <Type Name="DataFormats" Kind="Class" />
      <Type Name="DataObject" Kind="Class" />
      <Type Name="DataObjectCopyingEventArgs" Kind="Class" />
      <Type Name="DataObjectCopyingEventHandler" Kind="Delegate" />
      <Type Name="DataObjectEventArgs" Kind="Class" />
      <Type Name="DataObjectPastingEventArgs" Kind="Class" />
      <Type Name="DataObjectPastingEventHandler" Kind="Delegate" />
      <Type Name="DataObjectSettingDataEventArgs" Kind="Class" />
      <Type Name="DataObjectSettingDataEventHandler" Kind="Delegate" />
      <Type Name="DataTemplate" Kind="Class" />
      <Type Name="DataTemplateKey" Kind="Class" />
      <Type Name="DataTrigger" Kind="Class" />
      <Type Name="DeferrableContent" Kind="Class" />
      <Type Name="DeferrableContentConverter" Kind="Class" />
      <Type Name="DependencyPropertyHelper" Kind="Class" />
      <Type Name="DialogResultConverter" Kind="Class" />
      <Type Name="DpiChangedEventArgs" Kind="Class" />
      <Type Name="DpiChangedEventHandler" Kind="Delegate" />
      <Type Name="DpiScale" Kind="Structure" />
      <Type Name="DragAction" Kind="Enumeration" />
      <Type Name="DragDrop" Kind="Class" />
      <Type Name="DragDropEffects" Kind="Enumeration" />
      <Type Name="DragDropKeyStates" Kind="Enumeration" />
      <Type Name="DragEventArgs" Kind="Class" />
      <Type Name="DragEventHandler" Kind="Delegate" />
      <Type Name="Duration" Kind="Structure" />
      <Type Name="DurationConverter" Kind="Class" />
      <Type Name="DynamicResourceExtension" Kind="Class" />
      <Type Name="DynamicResourceExtensionConverter" Kind="Class" />
      <Type Name="EventManager" Kind="Class" />
      <Type Name="EventPrivateKey" Kind="Class" />
      <Type Name="EventRoute" Kind="Class" />
      <Type Name="EventSetter" Kind="Class" />
      <Type Name="EventTrigger" Kind="Class" />
      <Type Name="ExceptionRoutedEventArgs" Kind="Class" />
      <Type Name="ExitEventArgs" Kind="Class" />
      <Type Name="ExitEventHandler" Kind="Delegate" />
      <Type Name="FigureHorizontalAnchor" Kind="Enumeration" />
      <Type Name="FigureLength" Kind="Structure" />
      <Type Name="FigureLengthConverter" Kind="Class" />
      <Type Name="FigureUnitType" Kind="Enumeration" />
      <Type Name="FigureVerticalAnchor" Kind="Enumeration" />
      <Type Name="FlowDirection" Kind="Enumeration" />
      <Type Name="FontCapitals" Kind="Enumeration" />
      <Type Name="FontEastAsianLanguage" Kind="Enumeration" />
      <Type Name="FontEastAsianWidths" Kind="Enumeration" />
      <Type Name="FontFraction" Kind="Enumeration" />
      <Type Name="FontNumeralAlignment" Kind="Enumeration" />
      <Type Name="FontNumeralStyle" Kind="Enumeration" />
      <Type Name="FontSizeConverter" Kind="Class" />
      <Type Name="FontStretch" Kind="Structure" />
      <Type Name="FontStretchConverter" Kind="Class" />
      <Type Name="FontStretches" Kind="Class" />
      <Type Name="FontStyle" Kind="Structure" />
      <Type Name="FontStyleConverter" Kind="Class" />
      <Type Name="FontStyles" Kind="Class" />
      <Type Name="FontVariants" Kind="Enumeration" />
      <Type Name="FontWeight" Kind="Structure" />
      <Type Name="FontWeightConverter" Kind="Class" />
      <Type Name="FontWeights" Kind="Class" />
      <Type Name="FrameworkCompatibilityPreferences" Kind="Class" />
      <Type Name="FrameworkContentElement" Kind="Class" />
      <Type Name="FrameworkElement" Kind="Class" />
      <Type Name="FrameworkElementFactory" Kind="Class" />
      <Type Name="FrameworkPropertyMetadata" Kind="Class" />
      <Type Name="FrameworkPropertyMetadataOptions" Kind="Enumeration" />
      <Type Name="FrameworkTemplate" Kind="Class" />
      <Type Name="FreezableCollection`1" DisplayName="FreezableCollection&lt;T&gt;" Kind="Class" />
      <Type Name="FreezableCollection`1+Enumerator" DisplayName="FreezableCollection&lt;T&gt;+Enumerator" Kind="Structure" />
      <Type Name="GiveFeedbackEventArgs" Kind="Class" />
      <Type Name="GiveFeedbackEventHandler" Kind="Delegate" />
      <Type Name="GridLength" Kind="Structure" />
      <Type Name="GridLengthConverter" Kind="Class" />
      <Type Name="GridUnitType" Kind="Enumeration" />
      <Type Name="HierarchicalDataTemplate" Kind="Class" />
      <Type Name="HorizontalAlignment" Kind="Enumeration" />
      <Type Name="HwndDpiChangedEventArgs" Kind="Class" />
      <Type Name="HwndDpiChangedEventHandler" Kind="Delegate" />
      <Type Name="IContentHost" Kind="Interface" />
      <Type Name="IDataObject" Kind="Interface" />
      <Type Name="IFrameworkInputElement" Kind="Interface" />
      <Type Name="IInputElement" Kind="Interface" />
      <Type Name="InheritanceBehavior" Kind="Enumeration" />
      <Type Name="KeySplineConverter" Kind="Class" />
      <Type Name="KeyTimeConverter" Kind="Class" />
      <Type Name="LengthConverter" Kind="Class" />
      <Type Name="LineBreakCondition" Kind="Enumeration" />
      <Type Name="LineStackingStrategy" Kind="Enumeration" />
      <Type Name="LocalizabilityAttribute" Kind="Class" />
      <Type Name="Localization" Kind="Class" />
      <Type Name="LocalizationCategory" Kind="Enumeration" />
      <Type Name="LogicalTreeHelper" Kind="Class" />
      <Type Name="LostFocusEventManager" Kind="Class" />
      <Type Name="MediaScriptCommandRoutedEventArgs" Kind="Class" />
      <Type Name="MessageBox" Kind="Class" />
      <Type Name="MessageBoxButton" Kind="Enumeration" />
      <Type Name="MessageBoxImage" Kind="Enumeration" />
      <Type Name="MessageBoxOptions" Kind="Enumeration" />
      <Type Name="MessageBoxResult" Kind="Enumeration" />
      <Type Name="Modifiability" Kind="Enumeration" />
      <Type Name="MultiDataTrigger" Kind="Class" />
      <Type Name="MultiTrigger" Kind="Class" />
      <Type Name="NullableBoolConverter" Kind="Class" />
      <Type Name="PowerLineStatus" Kind="Enumeration" />
      <Type Name="PresentationSource" Kind="Class" />
      <Type Name="PropertyPath" Kind="Class" />
      <Type Name="PropertyPathConverter" Kind="Class" />
      <Type Name="QueryContinueDragEventArgs" Kind="Class" />
      <Type Name="QueryContinueDragEventHandler" Kind="Delegate" />
      <Type Name="Readability" Kind="Enumeration" />
      <Type Name="ReasonSessionEnding" Kind="Enumeration" />
      <Type Name="RequestBringIntoViewEventArgs" Kind="Class" />
      <Type Name="RequestBringIntoViewEventHandler" Kind="Delegate" />
      <Type Name="ResizeMode" Kind="Enumeration" />
      <Type Name="ResourceDictionary" Kind="Class" />
      <Type Name="ResourceDictionaryLocation" Kind="Enumeration" />
      <Type Name="ResourceKey" Kind="Class" />
      <Type Name="ResourceReferenceKeyNotFoundException" Kind="Class" />
      <Type Name="RoutedEvent" Kind="Class" />
      <Type Name="RoutedEventArgs" Kind="Class" />
      <Type Name="RoutedEventHandler" Kind="Delegate" />
      <Type Name="RoutedEventHandlerInfo" Kind="Structure" />
      <Type Name="RoutedPropertyChangedEventArgs`1" DisplayName="RoutedPropertyChangedEventArgs&lt;T&gt;" Kind="Class" />
      <Type Name="RoutedPropertyChangedEventHandler`1" DisplayName="RoutedPropertyChangedEventHandler&lt;T&gt;" Kind="Delegate" />
      <Type Name="RoutingStrategy" Kind="Enumeration" />
      <Type Name="SessionEndingCancelEventArgs" Kind="Class" />
      <Type Name="SessionEndingCancelEventHandler" Kind="Delegate" />
      <Type Name="Setter" Kind="Class" />
      <Type Name="SetterBase" Kind="Class" />
      <Type Name="SetterBaseCollection" Kind="Class" />
      <Type Name="ShutdownMode" Kind="Enumeration" />
      <Type Name="SizeChangedEventArgs" Kind="Class" />
      <Type Name="SizeChangedEventHandler" Kind="Delegate" />
      <Type Name="SizeChangedInfo" Kind="Class" />
      <Type Name="SizeToContent" Kind="Enumeration" />
      <Type Name="SourceChangedEventArgs" Kind="Class" />
      <Type Name="SourceChangedEventHandler" Kind="Delegate" />
      <Type Name="StartupEventArgs" Kind="Class" />
      <Type Name="StartupEventHandler" Kind="Delegate" />
      <Type Name="StaticResourceExtension" Kind="Class" />
      <Type Name="StrokeCollectionConverter" Kind="Class" />
      <Type Name="Style" Kind="Class" />
      <Type Name="StyleTypedPropertyAttribute" Kind="Class" />
      <Type Name="SystemColors" Kind="Class" />
      <Type Name="SystemCommands" Kind="Class" />
      <Type Name="SystemFonts" Kind="Class" />
      <Type Name="SystemParameters" Kind="Class" />
      <Type Name="TemplateBindingExpression" Kind="Class" />
      <Type Name="TemplateBindingExpressionConverter" Kind="Class" />
      <Type Name="TemplateBindingExtension" Kind="Class" />
      <Type Name="TemplateBindingExtensionConverter" Kind="Class" />
      <Type Name="TemplateContent" Kind="Class" />
      <Type Name="TemplateContentLoader" Kind="Class" />
      <Type Name="TemplateKey" Kind="Class" />
      <Type Name="TemplateKey+TemplateType" Kind="Enumeration" />
      <Type Name="TemplatePartAttribute" Kind="Class" />
      <Type Name="TemplateVisualStateAttribute" Kind="Class" />
      <Type Name="TextAlignment" Kind="Enumeration" />
      <Type Name="TextDataFormat" Kind="Enumeration" />
      <Type Name="TextDecoration" Kind="Class" />
      <Type Name="TextDecorationCollection" Kind="Class" />
      <Type Name="TextDecorationCollection+Enumerator" Kind="Structure" />
      <Type Name="TextDecorationCollectionConverter" Kind="Class" />
      <Type Name="TextDecorationLocation" Kind="Enumeration" />
      <Type Name="TextDecorations" Kind="Class" />
      <Type Name="TextDecorationUnit" Kind="Enumeration" />
      <Type Name="TextMarkerStyle" Kind="Enumeration" />
      <Type Name="TextTrimming" Kind="Enumeration" />
      <Type Name="TextWrapping" Kind="Enumeration" />
      <Type Name="ThemeDictionaryExtension" Kind="Class" />
      <Type Name="ThemeInfoAttribute" Kind="Class" />
      <Type Name="Thickness" Kind="Structure" />
      <Type Name="ThicknessConverter" Kind="Class" />
      <Type Name="Trigger" Kind="Class" />
      <Type Name="TriggerAction" Kind="Class" />
      <Type Name="TriggerActionCollection" Kind="Class" />
      <Type Name="TriggerBase" Kind="Class" />
      <Type Name="TriggerCollection" Kind="Class" />
      <Type Name="UIElement" Kind="Class" />
      <Type Name="UIElement3D" Kind="Class" />
      <Type Name="UIPropertyMetadata" Kind="Class" />
      <Type Name="ValueSource" Kind="Structure" />
      <Type Name="VerticalAlignment" Kind="Enumeration" />
      <Type Name="Visibility" Kind="Enumeration" />
      <Type Name="VisualState" Kind="Class" />
      <Type Name="VisualStateChangedEventArgs" Kind="Class" />
      <Type Name="VisualStateGroup" Kind="Class" />
      <Type Name="VisualStateManager" Kind="Class" />
      <Type Name="VisualTransition" Kind="Class" />
      <Type Name="Window" Kind="Class" />
      <Type Name="WindowCollection" Kind="Class" />
      <Type Name="WindowStartupLocation" Kind="Enumeration" />
      <Type Name="WindowState" Kind="Enumeration" />
      <Type Name="WindowStyle" Kind="Enumeration" />
      <Type Name="WrapDirection" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Windows.Annotations">
      <Type Name="Annotation" Kind="Class" />
      <Type Name="AnnotationAction" Kind="Enumeration" />
      <Type Name="AnnotationAuthorChangedEventArgs" Kind="Class" />
      <Type Name="AnnotationAuthorChangedEventHandler" Kind="Delegate" />
      <Type Name="AnnotationDocumentPaginator" Kind="Class" />
      <Type Name="AnnotationHelper" Kind="Class" />
      <Type Name="AnnotationResource" Kind="Class" />
      <Type Name="AnnotationResourceChangedEventArgs" Kind="Class" />
      <Type Name="AnnotationResourceChangedEventHandler" Kind="Delegate" />
      <Type Name="AnnotationService" Kind="Class" />
      <Type Name="ContentLocator" Kind="Class" />
      <Type Name="ContentLocatorBase" Kind="Class" />
      <Type Name="ContentLocatorGroup" Kind="Class" />
      <Type Name="ContentLocatorPart" Kind="Class" />
      <Type Name="IAnchorInfo" Kind="Interface" />
      <Type Name="TextAnchor" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Annotations.Storage">
      <Type Name="AnnotationStore" Kind="Class" />
      <Type Name="StoreContentAction" Kind="Enumeration" />
      <Type Name="StoreContentChangedEventArgs" Kind="Class" />
      <Type Name="StoreContentChangedEventHandler" Kind="Delegate" />
      <Type Name="XmlStreamStore" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Automation">
      <Type Name="AutomationProperties" Kind="Class" />
      <Type Name="IsOffscreenBehavior" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Windows.Automation.Peers">
      <Type Name="AutomationControlType" Kind="Enumeration" />
      <Type Name="AutomationEvents" Kind="Enumeration" />
      <Type Name="AutomationOrientation" Kind="Enumeration" />
      <Type Name="AutomationPeer" Kind="Class" />
      <Type Name="ButtonAutomationPeer" Kind="Class" />
      <Type Name="ButtonBaseAutomationPeer" Kind="Class" />
      <Type Name="CalendarAutomationPeer" Kind="Class" />
      <Type Name="CalendarButtonAutomationPeer" Kind="Class" />
      <Type Name="CheckBoxAutomationPeer" Kind="Class" />
      <Type Name="ComboBoxAutomationPeer" Kind="Class" />
      <Type Name="ContentElementAutomationPeer" Kind="Class" />
      <Type Name="ContentTextAutomationPeer" Kind="Class" />
      <Type Name="ContextMenuAutomationPeer" Kind="Class" />
      <Type Name="DataGridAutomationPeer" Kind="Class" />
      <Type Name="DataGridCellAutomationPeer" Kind="Class" />
      <Type Name="DataGridCellItemAutomationPeer" Kind="Class" />
      <Type Name="DataGridColumnHeaderAutomationPeer" Kind="Class" />
      <Type Name="DataGridColumnHeaderItemAutomationPeer" Kind="Class" />
      <Type Name="DataGridColumnHeadersPresenterAutomationPeer" Kind="Class" />
      <Type Name="DataGridDetailsPresenterAutomationPeer" Kind="Class" />
      <Type Name="DataGridItemAutomationPeer" Kind="Class" />
      <Type Name="DataGridRowAutomationPeer" Kind="Class" />
      <Type Name="DataGridRowHeaderAutomationPeer" Kind="Class" />
      <Type Name="DatePickerAutomationPeer" Kind="Class" />
      <Type Name="DateTimeAutomationPeer" Kind="Class" />
      <Type Name="DocumentAutomationPeer" Kind="Class" />
      <Type Name="DocumentPageViewAutomationPeer" Kind="Class" />
      <Type Name="DocumentViewerAutomationPeer" Kind="Class" />
      <Type Name="DocumentViewerBaseAutomationPeer" Kind="Class" />
      <Type Name="ExpanderAutomationPeer" Kind="Class" />
      <Type Name="FixedPageAutomationPeer" Kind="Class" />
      <Type Name="FlowDocumentPageViewerAutomationPeer" Kind="Class" />
      <Type Name="FlowDocumentReaderAutomationPeer" Kind="Class" />
      <Type Name="FlowDocumentScrollViewerAutomationPeer" Kind="Class" />
      <Type Name="FrameAutomationPeer" Kind="Class" />
      <Type Name="FrameworkContentElementAutomationPeer" Kind="Class" />
      <Type Name="FrameworkElementAutomationPeer" Kind="Class" />
      <Type Name="GenericRootAutomationPeer" Kind="Class" />
      <Type Name="GridSplitterAutomationPeer" Kind="Class" />
      <Type Name="GridViewAutomationPeer" Kind="Class" />
      <Type Name="GridViewCellAutomationPeer" Kind="Class" />
      <Type Name="GridViewColumnHeaderAutomationPeer" Kind="Class" />
      <Type Name="GridViewHeaderRowPresenterAutomationPeer" Kind="Class" />
      <Type Name="GridViewItemAutomationPeer" Kind="Class" />
      <Type Name="GroupBoxAutomationPeer" Kind="Class" />
      <Type Name="GroupItemAutomationPeer" Kind="Class" />
      <Type Name="HostedWindowWrapper" Kind="Class" />
      <Type Name="HyperlinkAutomationPeer" Kind="Class" />
      <Type Name="ImageAutomationPeer" Kind="Class" />
      <Type Name="InkCanvasAutomationPeer" Kind="Class" />
      <Type Name="InkPresenterAutomationPeer" Kind="Class" />
      <Type Name="ItemAutomationPeer" Kind="Class" />
      <Type Name="ItemsControlAutomationPeer" Kind="Class" />
      <Type Name="IViewAutomationPeer" Kind="Interface" />
      <Type Name="LabelAutomationPeer" Kind="Class" />
      <Type Name="ListBoxAutomationPeer" Kind="Class" />
      <Type Name="ListBoxItemAutomationPeer" Kind="Class" />
      <Type Name="ListBoxItemWrapperAutomationPeer" Kind="Class" />
      <Type Name="ListViewAutomationPeer" Kind="Class" />
      <Type Name="MediaElementAutomationPeer" Kind="Class" />
      <Type Name="MenuAutomationPeer" Kind="Class" />
      <Type Name="MenuItemAutomationPeer" Kind="Class" />
      <Type Name="NavigationWindowAutomationPeer" Kind="Class" />
      <Type Name="PasswordBoxAutomationPeer" Kind="Class" />
      <Type Name="PatternInterface" Kind="Enumeration" />
      <Type Name="ProgressBarAutomationPeer" Kind="Class" />
      <Type Name="RadioButtonAutomationPeer" Kind="Class" />
      <Type Name="RangeBaseAutomationPeer" Kind="Class" />
      <Type Name="RepeatButtonAutomationPeer" Kind="Class" />
      <Type Name="RichTextBoxAutomationPeer" Kind="Class" />
      <Type Name="ScrollBarAutomationPeer" Kind="Class" />
      <Type Name="ScrollViewerAutomationPeer" Kind="Class" />
      <Type Name="SelectorAutomationPeer" Kind="Class" />
      <Type Name="SelectorItemAutomationPeer" Kind="Class" />
      <Type Name="SeparatorAutomationPeer" Kind="Class" />
      <Type Name="SliderAutomationPeer" Kind="Class" />
      <Type Name="StatusBarAutomationPeer" Kind="Class" />
      <Type Name="StatusBarItemAutomationPeer" Kind="Class" />
      <Type Name="TabControlAutomationPeer" Kind="Class" />
      <Type Name="TabItemAutomationPeer" Kind="Class" />
      <Type Name="TabItemWrapperAutomationPeer" Kind="Class" />
      <Type Name="TableAutomationPeer" Kind="Class" />
      <Type Name="TableCellAutomationPeer" Kind="Class" />
      <Type Name="TextAutomationPeer" Kind="Class" />
      <Type Name="TextBlockAutomationPeer" Kind="Class" />
      <Type Name="TextBoxAutomationPeer" Kind="Class" />
      <Type Name="TextElementAutomationPeer" Kind="Class" />
      <Type Name="ThumbAutomationPeer" Kind="Class" />
      <Type Name="ToggleButtonAutomationPeer" Kind="Class" />
      <Type Name="ToolBarAutomationPeer" Kind="Class" />
      <Type Name="ToolTipAutomationPeer" Kind="Class" />
      <Type Name="TreeViewAutomationPeer" Kind="Class" />
      <Type Name="TreeViewDataItemAutomationPeer" Kind="Class" />
      <Type Name="TreeViewItemAutomationPeer" Kind="Class" />
      <Type Name="UIElement3DAutomationPeer" Kind="Class" />
      <Type Name="UIElementAutomationPeer" Kind="Class" />
      <Type Name="UserControlAutomationPeer" Kind="Class" />
      <Type Name="Viewport3DAutomationPeer" Kind="Class" />
      <Type Name="WindowAutomationPeer" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Baml2006">
      <Type Name="Baml2006Reader" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Controls">
      <Type Name="AccessText" Kind="Class" />
      <Type Name="AddingNewItemEventArgs" Kind="Class" />
      <Type Name="AdornedElementPlaceholder" Kind="Class" />
      <Type Name="AlternationConverter" Kind="Class" />
      <Type Name="BooleanToVisibilityConverter" Kind="Class" />
      <Type Name="Border" Kind="Class" />
      <Type Name="BorderGapMaskConverter" Kind="Class" />
      <Type Name="Button" Kind="Class" />
      <Type Name="Calendar" Kind="Class" />
      <Type Name="CalendarBlackoutDatesCollection" Kind="Class" />
      <Type Name="CalendarDateChangedEventArgs" Kind="Class" />
      <Type Name="CalendarDateRange" Kind="Class" />
      <Type Name="CalendarMode" Kind="Enumeration" />
      <Type Name="CalendarModeChangedEventArgs" Kind="Class" />
      <Type Name="CalendarSelectionMode" Kind="Enumeration" />
      <Type Name="Canvas" Kind="Class" />
      <Type Name="CharacterCasing" Kind="Enumeration" />
      <Type Name="CheckBox" Kind="Class" />
      <Type Name="CleanUpVirtualizedItemEventArgs" Kind="Class" />
      <Type Name="CleanUpVirtualizedItemEventHandler" Kind="Delegate" />
      <Type Name="ClickMode" Kind="Enumeration" />
      <Type Name="ColumnDefinition" Kind="Class" />
      <Type Name="ColumnDefinitionCollection" Kind="Class" />
      <Type Name="ComboBox" Kind="Class" />
      <Type Name="ComboBoxItem" Kind="Class" />
      <Type Name="ContentControl" Kind="Class" />
      <Type Name="ContentPresenter" Kind="Class" />
      <Type Name="ContextMenu" Kind="Class" />
      <Type Name="ContextMenuEventArgs" Kind="Class" />
      <Type Name="ContextMenuEventHandler" Kind="Delegate" />
      <Type Name="ContextMenuService" Kind="Class" />
      <Type Name="Control" Kind="Class" />
      <Type Name="ControlTemplate" Kind="Class" />
      <Type Name="DataErrorValidationRule" Kind="Class" />
      <Type Name="DataGrid" Kind="Class" />
      <Type Name="DataGridAutoGeneratingColumnEventArgs" Kind="Class" />
      <Type Name="DataGridBeginningEditEventArgs" Kind="Class" />
      <Type Name="DataGridBoundColumn" Kind="Class" />
      <Type Name="DataGridCell" Kind="Class" />
      <Type Name="DataGridCellClipboardEventArgs" Kind="Class" />
      <Type Name="DataGridCellEditEndingEventArgs" Kind="Class" />
      <Type Name="DataGridCellInfo" Kind="Structure" />
      <Type Name="DataGridCellsPanel" Kind="Class" />
      <Type Name="DataGridCheckBoxColumn" Kind="Class" />
      <Type Name="DataGridClipboardCellContent" Kind="Structure" />
      <Type Name="DataGridClipboardCopyMode" Kind="Enumeration" />
      <Type Name="DataGridColumn" Kind="Class" />
      <Type Name="DataGridColumnEventArgs" Kind="Class" />
      <Type Name="DataGridColumnReorderingEventArgs" Kind="Class" />
      <Type Name="DataGridComboBoxColumn" Kind="Class" />
      <Type Name="DataGridEditAction" Kind="Enumeration" />
      <Type Name="DataGridEditingUnit" Kind="Enumeration" />
      <Type Name="DataGridGridLinesVisibility" Kind="Enumeration" />
      <Type Name="DataGridHeadersVisibility" Kind="Enumeration" />
      <Type Name="DataGridHyperlinkColumn" Kind="Class" />
      <Type Name="DataGridLength" Kind="Structure" />
      <Type Name="DataGridLengthConverter" Kind="Class" />
      <Type Name="DataGridLengthUnitType" Kind="Enumeration" />
      <Type Name="DataGridPreparingCellForEditEventArgs" Kind="Class" />
      <Type Name="DataGridRow" Kind="Class" />
      <Type Name="DataGridRowClipboardEventArgs" Kind="Class" />
      <Type Name="DataGridRowDetailsEventArgs" Kind="Class" />
      <Type Name="DataGridRowDetailsVisibilityMode" Kind="Enumeration" />
      <Type Name="DataGridRowEditEndingEventArgs" Kind="Class" />
      <Type Name="DataGridRowEventArgs" Kind="Class" />
      <Type Name="DataGridSelectionMode" Kind="Enumeration" />
      <Type Name="DataGridSelectionUnit" Kind="Enumeration" />
      <Type Name="DataGridSortingEventArgs" Kind="Class" />
      <Type Name="DataGridSortingEventHandler" Kind="Delegate" />
      <Type Name="DataGridTemplateColumn" Kind="Class" />
      <Type Name="DataGridTextColumn" Kind="Class" />
      <Type Name="DataTemplateSelector" Kind="Class" />
      <Type Name="DatePicker" Kind="Class" />
      <Type Name="DatePickerDateValidationErrorEventArgs" Kind="Class" />
      <Type Name="DatePickerFormat" Kind="Enumeration" />
      <Type Name="Decorator" Kind="Class" />
      <Type Name="DefinitionBase" Kind="Class" />
      <Type Name="Dock" Kind="Enumeration" />
      <Type Name="DockPanel" Kind="Class" />
      <Type Name="DocumentViewer" Kind="Class" />
      <Type Name="ExceptionValidationRule" Kind="Class" />
      <Type Name="ExpandDirection" Kind="Enumeration" />
      <Type Name="Expander" Kind="Class" />
      <Type Name="FlowDocumentPageViewer" Kind="Class" />
      <Type Name="FlowDocumentReader" Kind="Class" />
      <Type Name="FlowDocumentReaderViewingMode" Kind="Enumeration" />
      <Type Name="FlowDocumentScrollViewer" Kind="Class" />
      <Type Name="Frame" Kind="Class" />
      <Type Name="Grid" Kind="Class" />
      <Type Name="GridResizeBehavior" Kind="Enumeration" />
      <Type Name="GridResizeDirection" Kind="Enumeration" />
      <Type Name="GridSplitter" Kind="Class" />
      <Type Name="GridView" Kind="Class" />
      <Type Name="GridViewColumn" Kind="Class" />
      <Type Name="GridViewColumnCollection" Kind="Class" />
      <Type Name="GridViewColumnHeader" Kind="Class" />
      <Type Name="GridViewColumnHeaderRole" Kind="Enumeration" />
      <Type Name="GridViewHeaderRowPresenter" Kind="Class" />
      <Type Name="GridViewRowPresenter" Kind="Class" />
      <Type Name="GroupBox" Kind="Class" />
      <Type Name="GroupItem" Kind="Class" />
      <Type Name="GroupStyle" Kind="Class" />
      <Type Name="GroupStyleSelector" Kind="Delegate" />
      <Type Name="HeaderedContentControl" Kind="Class" />
      <Type Name="HeaderedItemsControl" Kind="Class" />
      <Type Name="HierarchicalVirtualizationConstraints" Kind="Structure" />
      <Type Name="HierarchicalVirtualizationHeaderDesiredSizes" Kind="Structure" />
      <Type Name="HierarchicalVirtualizationItemDesiredSizes" Kind="Structure" />
      <Type Name="Image" Kind="Class" />
      <Type Name="InitializingNewItemEventArgs" Kind="Class" />
      <Type Name="InitializingNewItemEventHandler" Kind="Delegate" />
      <Type Name="InkCanvas" Kind="Class" />
      <Type Name="InkCanvasClipboardFormat" Kind="Enumeration" />
      <Type Name="InkCanvasEditingMode" Kind="Enumeration" />
      <Type Name="InkCanvasGestureEventArgs" Kind="Class" />
      <Type Name="InkCanvasGestureEventHandler" Kind="Delegate" />
      <Type Name="InkCanvasSelectionChangingEventArgs" Kind="Class" />
      <Type Name="InkCanvasSelectionChangingEventHandler" Kind="Delegate" />
      <Type Name="InkCanvasSelectionEditingEventArgs" Kind="Class" />
      <Type Name="InkCanvasSelectionEditingEventHandler" Kind="Delegate" />
      <Type Name="InkCanvasSelectionHitResult" Kind="Enumeration" />
      <Type Name="InkCanvasStrokeCollectedEventArgs" Kind="Class" />
      <Type Name="InkCanvasStrokeCollectedEventHandler" Kind="Delegate" />
      <Type Name="InkCanvasStrokeErasingEventArgs" Kind="Class" />
      <Type Name="InkCanvasStrokeErasingEventHandler" Kind="Delegate" />
      <Type Name="InkCanvasStrokesReplacedEventArgs" Kind="Class" />
      <Type Name="InkCanvasStrokesReplacedEventHandler" Kind="Delegate" />
      <Type Name="InkPresenter" Kind="Class" />
      <Type Name="ItemCollection" Kind="Class" />
      <Type Name="ItemContainerGenerator" Kind="Class" />
      <Type Name="ItemContainerTemplate" Kind="Class" />
      <Type Name="ItemContainerTemplateKey" Kind="Class" />
      <Type Name="ItemContainerTemplateSelector" Kind="Class" />
      <Type Name="ItemsControl" Kind="Class" />
      <Type Name="ItemsPanelTemplate" Kind="Class" />
      <Type Name="ItemsPresenter" Kind="Class" />
      <Type Name="Label" Kind="Class" />
      <Type Name="ListBox" Kind="Class" />
      <Type Name="ListBoxItem" Kind="Class" />
      <Type Name="ListView" Kind="Class" />
      <Type Name="ListViewItem" Kind="Class" />
      <Type Name="MediaElement" Kind="Class" />
      <Type Name="MediaState" Kind="Enumeration" />
      <Type Name="Menu" Kind="Class" />
      <Type Name="MenuItem" Kind="Class" />
      <Type Name="MenuItemRole" Kind="Enumeration" />
      <Type Name="MenuScrollingVisibilityConverter" Kind="Class" />
      <Type Name="NotifyDataErrorValidationRule" Kind="Class" />
      <Type Name="Orientation" Kind="Enumeration" />
      <Type Name="OverflowMode" Kind="Enumeration" />
      <Type Name="Page" Kind="Class" />
      <Type Name="PageRange" Kind="Structure" />
      <Type Name="PageRangeSelection" Kind="Enumeration" />
      <Type Name="Panel" Kind="Class" />
      <Type Name="PanningMode" Kind="Enumeration" />
      <Type Name="PasswordBox" Kind="Class" />
      <Type Name="PrintDialog" Kind="Class" />
      <Type Name="PrintDialogException" Kind="Class" />
      <Type Name="ProgressBar" Kind="Class" />
      <Type Name="RadioButton" Kind="Class" />
      <Type Name="RichTextBox" Kind="Class" />
      <Type Name="RowDefinition" Kind="Class" />
      <Type Name="RowDefinitionCollection" Kind="Class" />
      <Type Name="ScrollBarVisibility" Kind="Enumeration" />
      <Type Name="ScrollChangedEventArgs" Kind="Class" />
      <Type Name="ScrollChangedEventHandler" Kind="Delegate" />
      <Type Name="ScrollContentPresenter" Kind="Class" />
      <Type Name="ScrollUnit" Kind="Enumeration" />
      <Type Name="ScrollViewer" Kind="Class" />
      <Type Name="SelectedCellsChangedEventArgs" Kind="Class" />
      <Type Name="SelectedCellsChangedEventHandler" Kind="Delegate" />
      <Type Name="SelectedDatesCollection" Kind="Class" />
      <Type Name="SelectionChangedEventArgs" Kind="Class" />
      <Type Name="SelectionChangedEventHandler" Kind="Delegate" />
      <Type Name="SelectionMode" Kind="Enumeration" />
      <Type Name="SelectiveScrollingOrientation" Kind="Enumeration" />
      <Type Name="Separator" Kind="Class" />
      <Type Name="Slider" Kind="Class" />
      <Type Name="SoundPlayerAction" Kind="Class" />
      <Type Name="SpellCheck" Kind="Class" />
      <Type Name="SpellingError" Kind="Class" />
      <Type Name="SpellingReform" Kind="Enumeration" />
      <Type Name="StackPanel" Kind="Class" />
      <Type Name="StickyNoteControl" Kind="Class" />
      <Type Name="StickyNoteType" Kind="Enumeration" />
      <Type Name="StretchDirection" Kind="Enumeration" />
      <Type Name="StyleSelector" Kind="Class" />
      <Type Name="TabControl" Kind="Class" />
      <Type Name="TabItem" Kind="Class" />
      <Type Name="TextBlock" Kind="Class" />
      <Type Name="TextBox" Kind="Class" />
      <Type Name="TextChange" Kind="Class" />
      <Type Name="TextChangedEventArgs" Kind="Class" />
      <Type Name="TextChangedEventHandler" Kind="Delegate" />
      <Type Name="TextSearch" Kind="Class" />
      <Type Name="ToolBar" Kind="Class" />
      <Type Name="ToolBarTray" Kind="Class" />
      <Type Name="ToolTip" Kind="Class" />
      <Type Name="ToolTipEventArgs" Kind="Class" />
      <Type Name="ToolTipEventHandler" Kind="Delegate" />
      <Type Name="ToolTipService" Kind="Class" />
      <Type Name="TreeView" Kind="Class" />
      <Type Name="TreeViewItem" Kind="Class" />
      <Type Name="UIElementCollection" Kind="Class" />
      <Type Name="UndoAction" Kind="Enumeration" />
      <Type Name="UserControl" Kind="Class" />
      <Type Name="Validation" Kind="Class" />
      <Type Name="ValidationError" Kind="Class" />
      <Type Name="ValidationErrorEventAction" Kind="Enumeration" />
      <Type Name="ValidationErrorEventArgs" Kind="Class" />
      <Type Name="ValidationResult" Kind="Class" />
      <Type Name="ValidationRule" Kind="Class" />
      <Type Name="ValidationStep" Kind="Enumeration" />
      <Type Name="ViewBase" Kind="Class" />
      <Type Name="Viewbox" Kind="Class" />
      <Type Name="Viewport3D" Kind="Class" />
      <Type Name="VirtualizationCacheLength" Kind="Structure" />
      <Type Name="VirtualizationCacheLengthConverter" Kind="Class" />
      <Type Name="VirtualizationCacheLengthUnit" Kind="Enumeration" />
      <Type Name="VirtualizationMode" Kind="Enumeration" />
      <Type Name="VirtualizingPanel" Kind="Class" />
      <Type Name="VirtualizingStackPanel" Kind="Class" />
      <Type Name="WebBrowser" Kind="Class" />
      <Type Name="WrapPanel" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Controls.Primitives">
      <Type Name="AutoToolTipPlacement" Kind="Enumeration" />
      <Type Name="BulletDecorator" Kind="Class" />
      <Type Name="ButtonBase" Kind="Class" />
      <Type Name="CalendarButton" Kind="Class" />
      <Type Name="CalendarDayButton" Kind="Class" />
      <Type Name="CalendarItem" Kind="Class" />
      <Type Name="CustomPopupPlacement" Kind="Structure" />
      <Type Name="CustomPopupPlacementCallback" Kind="Delegate" />
      <Type Name="DataGridCellsPresenter" Kind="Class" />
      <Type Name="DataGridColumnHeader" Kind="Class" />
      <Type Name="DataGridColumnHeadersPresenter" Kind="Class" />
      <Type Name="DataGridDetailsPresenter" Kind="Class" />
      <Type Name="DataGridRowHeader" Kind="Class" />
      <Type Name="DataGridRowsPresenter" Kind="Class" />
      <Type Name="DatePickerTextBox" Kind="Class" />
      <Type Name="DocumentPageView" Kind="Class" />
      <Type Name="DocumentViewerBase" Kind="Class" />
      <Type Name="DragCompletedEventArgs" Kind="Class" />
      <Type Name="DragCompletedEventHandler" Kind="Delegate" />
      <Type Name="DragDeltaEventArgs" Kind="Class" />
      <Type Name="DragDeltaEventHandler" Kind="Delegate" />
      <Type Name="DragStartedEventArgs" Kind="Class" />
      <Type Name="DragStartedEventHandler" Kind="Delegate" />
      <Type Name="GeneratorDirection" Kind="Enumeration" />
      <Type Name="GeneratorPosition" Kind="Structure" />
      <Type Name="GeneratorStatus" Kind="Enumeration" />
      <Type Name="GridViewRowPresenterBase" Kind="Class" />
      <Type Name="IContainItemStorage" Kind="Interface" />
      <Type Name="IHierarchicalVirtualizationAndScrollInfo" Kind="Interface" />
      <Type Name="IItemContainerGenerator" Kind="Interface" />
      <Type Name="IRecyclingItemContainerGenerator" Kind="Interface" />
      <Type Name="IScrollInfo" Kind="Interface" />
      <Type Name="ItemsChangedEventArgs" Kind="Class" />
      <Type Name="ItemsChangedEventHandler" Kind="Delegate" />
      <Type Name="LayoutInformation" Kind="Class" />
      <Type Name="MenuBase" Kind="Class" />
      <Type Name="MultiSelector" Kind="Class" />
      <Type Name="PlacementMode" Kind="Enumeration" />
      <Type Name="Popup" Kind="Class" />
      <Type Name="PopupAnimation" Kind="Enumeration" />
      <Type Name="PopupPrimaryAxis" Kind="Enumeration" />
      <Type Name="RangeBase" Kind="Class" />
      <Type Name="RepeatButton" Kind="Class" />
      <Type Name="ResizeGrip" Kind="Class" />
      <Type Name="ScrollBar" Kind="Class" />
      <Type Name="ScrollEventArgs" Kind="Class" />
      <Type Name="ScrollEventHandler" Kind="Delegate" />
      <Type Name="ScrollEventType" Kind="Enumeration" />
      <Type Name="SelectiveScrollingGrid" Kind="Class" />
      <Type Name="Selector" Kind="Class" />
      <Type Name="StatusBar" Kind="Class" />
      <Type Name="StatusBarItem" Kind="Class" />
      <Type Name="TabPanel" Kind="Class" />
      <Type Name="TextBoxBase" Kind="Class" />
      <Type Name="Thumb" Kind="Class" />
      <Type Name="TickBar" Kind="Class" />
      <Type Name="TickBarPlacement" Kind="Enumeration" />
      <Type Name="TickPlacement" Kind="Enumeration" />
      <Type Name="ToggleButton" Kind="Class" />
      <Type Name="ToolBarOverflowPanel" Kind="Class" />
      <Type Name="ToolBarPanel" Kind="Class" />
      <Type Name="Track" Kind="Class" />
      <Type Name="UniformGrid" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Data">
      <Type Name="Binding" Kind="Class" />
      <Type Name="BindingBase" Kind="Class" />
      <Type Name="BindingExpression" Kind="Class" />
      <Type Name="BindingExpressionBase" Kind="Class" />
      <Type Name="BindingGroup" Kind="Class" />
      <Type Name="BindingListCollectionView" Kind="Class" />
      <Type Name="BindingMode" Kind="Enumeration" />
      <Type Name="BindingOperations" Kind="Class" />
      <Type Name="BindingStatus" Kind="Enumeration" />
      <Type Name="CollectionContainer" Kind="Class" />
      <Type Name="CollectionRegisteringEventArgs" Kind="Class" />
      <Type Name="CollectionSynchronizationCallback" Kind="Delegate" />
      <Type Name="CollectionView" Kind="Class" />
      <Type Name="CollectionViewGroup" Kind="Class" />
      <Type Name="CollectionViewRegisteringEventArgs" Kind="Class" />
      <Type Name="CollectionViewSource" Kind="Class" />
      <Type Name="CompositeCollection" Kind="Class" />
      <Type Name="DataChangedEventManager" Kind="Class" />
      <Type Name="DataTransferEventArgs" Kind="Class" />
      <Type Name="FilterEventArgs" Kind="Class" />
      <Type Name="FilterEventHandler" Kind="Delegate" />
      <Type Name="GroupDescriptionSelectorCallback" Kind="Delegate" />
      <Type Name="IMultiValueConverter" Kind="Interface" />
      <Type Name="IValueConverter" Kind="Interface" />
      <Type Name="ListCollectionView" Kind="Class" />
      <Type Name="MultiBinding" Kind="Class" />
      <Type Name="MultiBindingExpression" Kind="Class" />
      <Type Name="ObjectDataProvider" Kind="Class" />
      <Type Name="PriorityBinding" Kind="Class" />
      <Type Name="PriorityBindingExpression" Kind="Class" />
      <Type Name="PropertyGroupDescription" Kind="Class" />
      <Type Name="RelativeSource" Kind="Class" />
      <Type Name="RelativeSourceMode" Kind="Enumeration" />
      <Type Name="UpdateSourceExceptionFilterCallback" Kind="Delegate" />
      <Type Name="UpdateSourceTrigger" Kind="Enumeration" />
      <Type Name="ValueConversionAttribute" Kind="Class" />
      <Type Name="ValueUnavailableException" Kind="Class" />
      <Type Name="XmlDataProvider" Kind="Class" />
      <Type Name="XmlNamespaceMapping" Kind="Class" />
      <Type Name="XmlNamespaceMappingCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Diagnostics">
      <Type Name="ResourceDictionaryDiagnostics" Kind="Class" />
      <Type Name="ResourceDictionaryInfo" Kind="Class" />
      <Type Name="ResourceDictionaryLoadedEventArgs" Kind="Class" />
      <Type Name="ResourceDictionaryUnloadedEventArgs" Kind="Class" />
      <Type Name="VisualDiagnostics" Kind="Class" />
      <Type Name="VisualTreeChangeEventArgs" Kind="Class" />
      <Type Name="VisualTreeChangeType" Kind="Enumeration" />
      <Type Name="XamlSourceInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Documents">
      <Type Name="Adorner" Kind="Class" />
      <Type Name="AdornerDecorator" Kind="Class" />
      <Type Name="AdornerLayer" Kind="Class" />
      <Type Name="AnchoredBlock" Kind="Class" />
      <Type Name="Block" Kind="Class" />
      <Type Name="BlockCollection" Kind="Class" />
      <Type Name="BlockUIContainer" Kind="Class" />
      <Type Name="Bold" Kind="Class" />
      <Type Name="ContentPosition" Kind="Class" />
      <Type Name="DocumentPage" Kind="Class" />
      <Type Name="DocumentPaginator" Kind="Class" />
      <Type Name="DocumentReference" Kind="Class" />
      <Type Name="DocumentReferenceCollection" Kind="Class" />
      <Type Name="DynamicDocumentPaginator" Kind="Class" />
      <Type Name="EditingCommands" Kind="Class" />
      <Type Name="Figure" Kind="Class" />
      <Type Name="FixedDocument" Kind="Class" />
      <Type Name="FixedDocumentSequence" Kind="Class" />
      <Type Name="FixedPage" Kind="Class" />
      <Type Name="Floater" Kind="Class" />
      <Type Name="FlowDocument" Kind="Class" />
      <Type Name="FrameworkRichTextComposition" Kind="Class" />
      <Type Name="FrameworkTextComposition" Kind="Class" />
      <Type Name="GetPageCompletedEventArgs" Kind="Class" />
      <Type Name="GetPageCompletedEventHandler" Kind="Delegate" />
      <Type Name="GetPageNumberCompletedEventArgs" Kind="Class" />
      <Type Name="GetPageNumberCompletedEventHandler" Kind="Delegate" />
      <Type Name="GetPageRootCompletedEventArgs" Kind="Class" />
      <Type Name="GetPageRootCompletedEventHandler" Kind="Delegate" />
      <Type Name="Glyphs" Kind="Class" />
      <Type Name="Hyperlink" Kind="Class" />
      <Type Name="IDocumentPaginatorSource" Kind="Interface" />
      <Type Name="Inline" Kind="Class" />
      <Type Name="InlineCollection" Kind="Class" />
      <Type Name="InlineUIContainer" Kind="Class" />
      <Type Name="Italic" Kind="Class" />
      <Type Name="LineBreak" Kind="Class" />
      <Type Name="LinkTarget" Kind="Class" />
      <Type Name="LinkTargetCollection" Kind="Class" />
      <Type Name="List" Kind="Class" />
      <Type Name="ListItem" Kind="Class" />
      <Type Name="ListItemCollection" Kind="Class" />
      <Type Name="LogicalDirection" Kind="Enumeration" />
      <Type Name="PageContent" Kind="Class" />
      <Type Name="PageContentCollection" Kind="Class" />
      <Type Name="PagesChangedEventArgs" Kind="Class" />
      <Type Name="PagesChangedEventHandler" Kind="Delegate" />
      <Type Name="PaginationProgressEventArgs" Kind="Class" />
      <Type Name="PaginationProgressEventHandler" Kind="Delegate" />
      <Type Name="Paragraph" Kind="Class" />
      <Type Name="Run" Kind="Class" />
      <Type Name="Section" Kind="Class" />
      <Type Name="Span" Kind="Class" />
      <Type Name="Table" Kind="Class" />
      <Type Name="TableCell" Kind="Class" />
      <Type Name="TableCellCollection" Kind="Class" />
      <Type Name="TableColumn" Kind="Class" />
      <Type Name="TableColumnCollection" Kind="Class" />
      <Type Name="TableRow" Kind="Class" />
      <Type Name="TableRowCollection" Kind="Class" />
      <Type Name="TableRowGroup" Kind="Class" />
      <Type Name="TableRowGroupCollection" Kind="Class" />
      <Type Name="TextEffectResolver" Kind="Class" />
      <Type Name="TextEffectTarget" Kind="Class" />
      <Type Name="TextElement" Kind="Class" />
      <Type Name="TextElementCollection`1" DisplayName="TextElementCollection&lt;TextElementType&gt;" Kind="Class" />
      <Type Name="TextElementEditingBehaviorAttribute" Kind="Class" />
      <Type Name="TextPointer" Kind="Class" />
      <Type Name="TextPointerContext" Kind="Enumeration" />
      <Type Name="TextRange" Kind="Class" />
      <Type Name="TextSelection" Kind="Class" />
      <Type Name="Typography" Kind="Class" />
      <Type Name="Underline" Kind="Class" />
      <Type Name="ZoomPercentageConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Documents.DocumentStructures">
      <Type Name="BlockElement" Kind="Class" />
      <Type Name="FigureStructure" Kind="Class" />
      <Type Name="ListItemStructure" Kind="Class" />
      <Type Name="ListStructure" Kind="Class" />
      <Type Name="NamedElement" Kind="Class" />
      <Type Name="ParagraphStructure" Kind="Class" />
      <Type Name="SectionStructure" Kind="Class" />
      <Type Name="SemanticBasicElement" Kind="Class" />
      <Type Name="StoryBreak" Kind="Class" />
      <Type Name="StoryFragment" Kind="Class" />
      <Type Name="StoryFragments" Kind="Class" />
      <Type Name="TableCellStructure" Kind="Class" />
      <Type Name="TableRowGroupStructure" Kind="Class" />
      <Type Name="TableRowStructure" Kind="Class" />
      <Type Name="TableStructure" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Documents.Serialization">
      <Type Name="ISerializerFactory" Kind="Interface" />
      <Type Name="SerializerDescriptor" Kind="Class" />
      <Type Name="SerializerProvider" Kind="Class" />
      <Type Name="SerializerWriter" Kind="Class" />
      <Type Name="SerializerWriterCollator" Kind="Class" />
      <Type Name="WritingCancelledEventArgs" Kind="Class" />
      <Type Name="WritingCancelledEventHandler" Kind="Delegate" />
      <Type Name="WritingCompletedEventArgs" Kind="Class" />
      <Type Name="WritingCompletedEventHandler" Kind="Delegate" />
      <Type Name="WritingPrintTicketRequiredEventArgs" Kind="Class" />
      <Type Name="WritingPrintTicketRequiredEventHandler" Kind="Delegate" />
      <Type Name="WritingProgressChangedEventArgs" Kind="Class" />
      <Type Name="WritingProgressChangedEventHandler" Kind="Delegate" />
      <Type Name="WritingProgressChangeLevel" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Windows.Forms.Design">
      <Type Name="AnchorEditor" Kind="Class" />
      <Type Name="AxImporter" Kind="Class" />
      <Type Name="AxImporter+IReferenceResolver" Kind="Interface" />
      <Type Name="AxImporter+Options" Kind="Class" />
      <Type Name="AxParameterData" Kind="Class" />
      <Type Name="AxWrapperGen" Kind="Class" />
      <Type Name="BorderSidesEditor" Kind="Class" />
      <Type Name="ComponentDocumentDesigner" Kind="Class" />
      <Type Name="ComponentTray" Kind="Class" />
      <Type Name="ControlDesigner" Kind="Class" />
      <Type Name="ControlDesigner+ControlDesignerAccessibleObject" Kind="Class" />
      <Type Name="DesignerOptions" Kind="Class" />
      <Type Name="DockEditor" Kind="Class" />
      <Type Name="DocumentDesigner" Kind="Class" />
      <Type Name="EventHandlerService" Kind="Class" />
      <Type Name="FileNameEditor" Kind="Class" />
      <Type Name="FolderNameEditor" Kind="Class" />
      <Type Name="FolderNameEditor+FolderBrowser" Kind="Class" />
      <Type Name="FolderNameEditor+FolderBrowserFolder" Kind="Enumeration" />
      <Type Name="FolderNameEditor+FolderBrowserStyles" Kind="Enumeration" />
      <Type Name="IContainsThemedScrollbarWindows" Kind="Interface" />
      <Type Name="ImageListCodeDomSerializer" Kind="Class" />
      <Type Name="ImageListImageEditor" Kind="Class" />
      <Type Name="IMenuEditorService" Kind="Interface" />
      <Type Name="MaskDescriptor" Kind="Class" />
      <Type Name="MenuCommands" Kind="Class" />
      <Type Name="ParentControlDesigner" Kind="Class" />
      <Type Name="ScrollableControlDesigner" Kind="Class" />
      <Type Name="SelectionRules" Kind="Enumeration" />
      <Type Name="ShortcutKeysEditor" Kind="Class" />
      <Type Name="ThemedScrollbarMode" Kind="Enumeration" />
      <Type Name="ThemedScrollbarWindow" Kind="Structure" />
      <Type Name="WindowsFormsDesignerOptionService" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Forms.Design.Behavior">
      <Type Name="Adorner" Kind="Class" />
      <Type Name="Behavior" Kind="Class" />
      <Type Name="BehaviorDragDropEventArgs" Kind="Class" />
      <Type Name="BehaviorDragDropEventHandler" Kind="Delegate" />
      <Type Name="BehaviorService" Kind="Class" />
      <Type Name="BehaviorServiceAdornerCollection" Kind="Class" />
      <Type Name="BehaviorServiceAdornerCollectionEnumerator" Kind="Class" />
      <Type Name="ComponentGlyph" Kind="Class" />
      <Type Name="ControlBodyGlyph" Kind="Class" />
      <Type Name="Glyph" Kind="Class" />
      <Type Name="GlyphCollection" Kind="Class" />
      <Type Name="GlyphSelectionType" Kind="Enumeration" />
      <Type Name="SnapLine" Kind="Class" />
      <Type Name="SnapLinePriority" Kind="Enumeration" />
      <Type Name="SnapLineType" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Windows.Ink">
      <Type Name="ApplicationGesture" Kind="Enumeration" />
      <Type Name="DrawingAttributeIds" Kind="Class" />
      <Type Name="DrawingAttributes" Kind="Class" />
      <Type Name="DrawingAttributesReplacedEventArgs" Kind="Class" />
      <Type Name="DrawingAttributesReplacedEventHandler" Kind="Delegate" />
      <Type Name="EllipseStylusShape" Kind="Class" />
      <Type Name="GestureRecognitionResult" Kind="Class" />
      <Type Name="GestureRecognizer" Kind="Class" />
      <Type Name="IncrementalHitTester" Kind="Class" />
      <Type Name="IncrementalLassoHitTester" Kind="Class" />
      <Type Name="IncrementalStrokeHitTester" Kind="Class" />
      <Type Name="LassoSelectionChangedEventArgs" Kind="Class" />
      <Type Name="LassoSelectionChangedEventHandler" Kind="Delegate" />
      <Type Name="PropertyDataChangedEventArgs" Kind="Class" />
      <Type Name="PropertyDataChangedEventHandler" Kind="Delegate" />
      <Type Name="RecognitionConfidence" Kind="Enumeration" />
      <Type Name="RectangleStylusShape" Kind="Class" />
      <Type Name="Stroke" Kind="Class" />
      <Type Name="StrokeCollection" Kind="Class" />
      <Type Name="StrokeCollectionChangedEventArgs" Kind="Class" />
      <Type Name="StrokeCollectionChangedEventHandler" Kind="Delegate" />
      <Type Name="StrokeHitEventArgs" Kind="Class" />
      <Type Name="StrokeHitEventHandler" Kind="Delegate" />
      <Type Name="StylusPointsReplacedEventArgs" Kind="Class" />
      <Type Name="StylusPointsReplacedEventHandler" Kind="Delegate" />
      <Type Name="StylusShape" Kind="Class" />
      <Type Name="StylusTip" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Windows.Input">
      <Type Name="AccessKeyEventArgs" Kind="Class" />
      <Type Name="AccessKeyManager" Kind="Class" />
      <Type Name="AccessKeyPressedEventArgs" Kind="Class" />
      <Type Name="AccessKeyPressedEventHandler" Kind="Delegate" />
      <Type Name="ApplicationCommands" Kind="Class" />
      <Type Name="CanExecuteChangedEventManager" Kind="Class" />
      <Type Name="CanExecuteRoutedEventArgs" Kind="Class" />
      <Type Name="CanExecuteRoutedEventHandler" Kind="Delegate" />
      <Type Name="CaptureMode" Kind="Enumeration" />
      <Type Name="CommandBinding" Kind="Class" />
      <Type Name="CommandBindingCollection" Kind="Class" />
      <Type Name="CommandConverter" Kind="Class" />
      <Type Name="CommandManager" Kind="Class" />
      <Type Name="ComponentCommands" Kind="Class" />
      <Type Name="Cursor" Kind="Class" />
      <Type Name="CursorConverter" Kind="Class" />
      <Type Name="Cursors" Kind="Class" />
      <Type Name="CursorType" Kind="Enumeration" />
      <Type Name="ExecutedRoutedEventArgs" Kind="Class" />
      <Type Name="ExecutedRoutedEventHandler" Kind="Delegate" />
      <Type Name="FocusManager" Kind="Class" />
      <Type Name="ICommandSource" Kind="Interface" />
      <Type Name="IInputLanguageSource" Kind="Interface" />
      <Type Name="IManipulator" Kind="Interface" />
      <Type Name="ImeConversionModeValues" Kind="Enumeration" />
      <Type Name="ImeSentenceModeValues" Kind="Enumeration" />
      <Type Name="InertiaExpansionBehavior" Kind="Class" />
      <Type Name="InertiaRotationBehavior" Kind="Class" />
      <Type Name="InertiaTranslationBehavior" Kind="Class" />
      <Type Name="InputBinding" Kind="Class" />
      <Type Name="InputBindingCollection" Kind="Class" />
      <Type Name="InputDevice" Kind="Class" />
      <Type Name="InputEventArgs" Kind="Class" />
      <Type Name="InputEventHandler" Kind="Delegate" />
      <Type Name="InputGesture" Kind="Class" />
      <Type Name="InputGestureCollection" Kind="Class" />
      <Type Name="InputLanguageChangedEventArgs" Kind="Class" />
      <Type Name="InputLanguageChangingEventArgs" Kind="Class" />
      <Type Name="InputLanguageEventArgs" Kind="Class" />
      <Type Name="InputLanguageEventHandler" Kind="Delegate" />
      <Type Name="InputLanguageManager" Kind="Class" />
      <Type Name="InputManager" Kind="Class" />
      <Type Name="InputMethod" Kind="Class" />
      <Type Name="InputMethodState" Kind="Enumeration" />
      <Type Name="InputMethodStateChangedEventArgs" Kind="Class" />
      <Type Name="InputMethodStateChangedEventHandler" Kind="Delegate" />
      <Type Name="InputMode" Kind="Enumeration" />
      <Type Name="InputScope" Kind="Class" />
      <Type Name="InputScopeConverter" Kind="Class" />
      <Type Name="InputScopeName" Kind="Class" />
      <Type Name="InputScopeNameConverter" Kind="Class" />
      <Type Name="InputScopeNameValue" Kind="Enumeration" />
      <Type Name="InputScopePhrase" Kind="Class" />
      <Type Name="InputType" Kind="Enumeration" />
      <Type Name="KeyBinding" Kind="Class" />
      <Type Name="Keyboard" Kind="Class" />
      <Type Name="KeyboardDevice" Kind="Class" />
      <Type Name="KeyboardEventArgs" Kind="Class" />
      <Type Name="KeyboardEventHandler" Kind="Delegate" />
      <Type Name="KeyboardFocusChangedEventArgs" Kind="Class" />
      <Type Name="KeyboardFocusChangedEventHandler" Kind="Delegate" />
      <Type Name="KeyboardInputProviderAcquireFocusEventArgs" Kind="Class" />
      <Type Name="KeyboardInputProviderAcquireFocusEventHandler" Kind="Delegate" />
      <Type Name="KeyboardNavigation" Kind="Class" />
      <Type Name="KeyboardNavigationMode" Kind="Enumeration" />
      <Type Name="KeyEventArgs" Kind="Class" />
      <Type Name="KeyEventHandler" Kind="Delegate" />
      <Type Name="KeyGesture" Kind="Class" />
      <Type Name="KeyGestureConverter" Kind="Class" />
      <Type Name="KeyGestureValueSerializer" Kind="Class" />
      <Type Name="KeyStates" Kind="Enumeration" />
      <Type Name="Manipulation" Kind="Class" />
      <Type Name="ManipulationBoundaryFeedbackEventArgs" Kind="Class" />
      <Type Name="ManipulationCompletedEventArgs" Kind="Class" />
      <Type Name="ManipulationDelta" Kind="Class" />
      <Type Name="ManipulationDeltaEventArgs" Kind="Class" />
      <Type Name="ManipulationInertiaStartingEventArgs" Kind="Class" />
      <Type Name="ManipulationModes" Kind="Enumeration" />
      <Type Name="ManipulationPivot" Kind="Class" />
      <Type Name="ManipulationStartedEventArgs" Kind="Class" />
      <Type Name="ManipulationStartingEventArgs" Kind="Class" />
      <Type Name="ManipulationVelocities" Kind="Class" />
      <Type Name="MediaCommands" Kind="Class" />
      <Type Name="Mouse" Kind="Class" />
      <Type Name="MouseAction" Kind="Enumeration" />
      <Type Name="MouseActionConverter" Kind="Class" />
      <Type Name="MouseActionValueSerializer" Kind="Class" />
      <Type Name="MouseBinding" Kind="Class" />
      <Type Name="MouseButton" Kind="Enumeration" />
      <Type Name="MouseButtonEventArgs" Kind="Class" />
      <Type Name="MouseButtonEventHandler" Kind="Delegate" />
      <Type Name="MouseButtonState" Kind="Enumeration" />
      <Type Name="MouseDevice" Kind="Class" />
      <Type Name="MouseEventArgs" Kind="Class" />
      <Type Name="MouseEventHandler" Kind="Delegate" />
      <Type Name="MouseGesture" Kind="Class" />
      <Type Name="MouseGestureConverter" Kind="Class" />
      <Type Name="MouseGestureValueSerializer" Kind="Class" />
      <Type Name="MouseWheelEventArgs" Kind="Class" />
      <Type Name="MouseWheelEventHandler" Kind="Delegate" />
      <Type Name="NavigationCommands" Kind="Class" />
      <Type Name="NotifyInputEventArgs" Kind="Class" />
      <Type Name="NotifyInputEventHandler" Kind="Delegate" />
      <Type Name="PreProcessInputEventArgs" Kind="Class" />
      <Type Name="PreProcessInputEventHandler" Kind="Delegate" />
      <Type Name="ProcessInputEventArgs" Kind="Class" />
      <Type Name="ProcessInputEventHandler" Kind="Delegate" />
      <Type Name="QueryCursorEventArgs" Kind="Class" />
      <Type Name="QueryCursorEventHandler" Kind="Delegate" />
      <Type Name="RestoreFocusMode" Kind="Enumeration" />
      <Type Name="RoutedCommand" Kind="Class" />
      <Type Name="RoutedUICommand" Kind="Class" />
      <Type Name="SpeechMode" Kind="Enumeration" />
      <Type Name="StagingAreaInputItem" Kind="Class" />
      <Type Name="Stylus" Kind="Class" />
      <Type Name="StylusButton" Kind="Class" />
      <Type Name="StylusButtonCollection" Kind="Class" />
      <Type Name="StylusButtonEventArgs" Kind="Class" />
      <Type Name="StylusButtonEventHandler" Kind="Delegate" />
      <Type Name="StylusButtonState" Kind="Enumeration" />
      <Type Name="StylusDevice" Kind="Class" />
      <Type Name="StylusDeviceCollection" Kind="Class" />
      <Type Name="StylusDownEventArgs" Kind="Class" />
      <Type Name="StylusDownEventHandler" Kind="Delegate" />
      <Type Name="StylusEventArgs" Kind="Class" />
      <Type Name="StylusEventHandler" Kind="Delegate" />
      <Type Name="StylusPoint" Kind="Structure" />
      <Type Name="StylusPointCollection" Kind="Class" />
      <Type Name="StylusPointDescription" Kind="Class" />
      <Type Name="StylusPointProperties" Kind="Class" />
      <Type Name="StylusPointProperty" Kind="Class" />
      <Type Name="StylusPointPropertyInfo" Kind="Class" />
      <Type Name="StylusPointPropertyUnit" Kind="Enumeration" />
      <Type Name="StylusSystemGestureEventArgs" Kind="Class" />
      <Type Name="StylusSystemGestureEventHandler" Kind="Delegate" />
      <Type Name="SystemGesture" Kind="Enumeration" />
      <Type Name="Tablet" Kind="Class" />
      <Type Name="TabletDevice" Kind="Class" />
      <Type Name="TabletDeviceCollection" Kind="Class" />
      <Type Name="TabletDeviceType" Kind="Enumeration" />
      <Type Name="TabletHardwareCapabilities" Kind="Enumeration" />
      <Type Name="TextComposition" Kind="Class" />
      <Type Name="TextCompositionAutoComplete" Kind="Enumeration" />
      <Type Name="TextCompositionEventArgs" Kind="Class" />
      <Type Name="TextCompositionEventHandler" Kind="Delegate" />
      <Type Name="TextCompositionManager" Kind="Class" />
      <Type Name="Touch" Kind="Class" />
      <Type Name="TouchAction" Kind="Enumeration" />
      <Type Name="TouchDevice" Kind="Class" />
      <Type Name="TouchEventArgs" Kind="Class" />
      <Type Name="TouchFrameEventArgs" Kind="Class" />
      <Type Name="TouchFrameEventHandler" Kind="Delegate" />
      <Type Name="TouchPoint" Kind="Class" />
      <Type Name="TouchPointCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Input.StylusPlugIns">
      <Type Name="DynamicRenderer" Kind="Class" />
      <Type Name="RawStylusInput" Kind="Class" />
      <Type Name="StylusPlugIn" Kind="Class" />
      <Type Name="StylusPlugInCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Input.StylusWisp">
      <Type Name="WispTabletDeviceCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Interop">
      <Type Name="ActiveXHost" Kind="Class" />
      <Type Name="BrowserInteropHelper" Kind="Class" />
      <Type Name="CursorInteropHelper" Kind="Class" />
      <Type Name="D3DImage" Kind="Class" />
      <Type Name="D3DResourceType" Kind="Enumeration" />
      <Type Name="DocObjHost" Kind="Class" />
      <Type Name="DynamicScriptObject" Kind="Class" />
      <Type Name="HwndHost" Kind="Class" />
      <Type Name="HwndSource" Kind="Class" />
      <Type Name="HwndSourceHook" Kind="Delegate" />
      <Type Name="HwndSourceParameters" Kind="Structure" />
      <Type Name="HwndTarget" Kind="Class" />
      <Type Name="IErrorPage" Kind="Interface" />
      <Type Name="Imaging" Kind="Class" />
      <Type Name="InteropBitmap" Kind="Class" />
      <Type Name="IProgressPage" Kind="Interface" />
      <Type Name="IWin32Window" Kind="Interface" />
      <Type Name="RenderMode" Kind="Enumeration" />
      <Type Name="WindowInteropHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Markup">
      <Type Name="ComponentResourceKeyConverter" Kind="Class" />
      <Type Name="DependencyPropertyConverter" Kind="Class" />
      <Type Name="EventSetterHandlerConverter" Kind="Class" />
      <Type Name="IAddChild" Kind="Interface" />
      <Type Name="IStyleConnector" Kind="Interface" />
      <Type Name="NamespaceMapEntry" Kind="Class" />
      <Type Name="ParserContext" Kind="Class" />
      <Type Name="ResourceReferenceExpressionConverter" Kind="Class" />
      <Type Name="RoutedEventConverter" Kind="Class" />
      <Type Name="SetterTriggerConditionValueConverter" Kind="Class" />
      <Type Name="TemplateKeyConverter" Kind="Class" />
      <Type Name="XamlDesignerSerializationManager" Kind="Class" />
      <Type Name="XamlInstanceCreator" Kind="Class" />
      <Type Name="XamlParseException" Kind="Class" />
      <Type Name="XamlReader" Kind="Class" />
      <Type Name="XamlTypeMapper" Kind="Class" />
      <Type Name="XamlWriter" Kind="Class" />
      <Type Name="XamlWriterMode" Kind="Enumeration" />
      <Type Name="XamlWriterState" Kind="Enumeration" />
      <Type Name="XmlAttributeProperties" Kind="Class" />
      <Type Name="XmlLanguage" Kind="Class" />
      <Type Name="XmlLanguageConverter" Kind="Class" />
      <Type Name="XmlnsDictionary" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Markup.Localizer">
      <Type Name="BamlLocalizabilityResolver" Kind="Class" />
      <Type Name="BamlLocalizableResource" Kind="Class" />
      <Type Name="BamlLocalizableResourceKey" Kind="Class" />
      <Type Name="BamlLocalizationDictionary" Kind="Class" />
      <Type Name="BamlLocalizationDictionaryEnumerator" Kind="Class" />
      <Type Name="BamlLocalizer" Kind="Class" />
      <Type Name="BamlLocalizerError" Kind="Enumeration" />
      <Type Name="BamlLocalizerErrorNotifyEventArgs" Kind="Class" />
      <Type Name="BamlLocalizerErrorNotifyEventHandler" Kind="Delegate" />
      <Type Name="ElementLocalizability" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Markup.Primitives">
      <Type Name="MarkupWriter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Media">
      <Type Name="AdornerHitTestResult" Kind="Class" />
      <Type Name="AlignmentX" Kind="Enumeration" />
      <Type Name="AlignmentY" Kind="Enumeration" />
      <Type Name="ArcSegment" Kind="Class" />
      <Type Name="BezierSegment" Kind="Class" />
      <Type Name="BitmapCache" Kind="Class" />
      <Type Name="BitmapCacheBrush" Kind="Class" />
      <Type Name="BitmapScalingMode" Kind="Enumeration" />
      <Type Name="Brush" Kind="Class" />
      <Type Name="BrushConverter" Kind="Class" />
      <Type Name="Brushes" Kind="Class" />
      <Type Name="BrushMappingMode" Kind="Enumeration" />
      <Type Name="CacheMode" Kind="Class" />
      <Type Name="CacheModeConverter" Kind="Class" />
      <Type Name="CachingHint" Kind="Enumeration" />
      <Type Name="CharacterMetrics" Kind="Class" />
      <Type Name="CharacterMetricsDictionary" Kind="Class" />
      <Type Name="ClearTypeHint" Kind="Enumeration" />
      <Type Name="Color" Kind="Structure" />
      <Type Name="ColorContext" Kind="Class" />
      <Type Name="ColorConverter" Kind="Class" />
      <Type Name="ColorInterpolationMode" Kind="Enumeration" />
      <Type Name="Colors" Kind="Class" />
      <Type Name="CombinedGeometry" Kind="Class" />
      <Type Name="CompositionTarget" Kind="Class" />
      <Type Name="ContainerVisual" Kind="Class" />
      <Type Name="DashStyle" Kind="Class" />
      <Type Name="DashStyles" Kind="Class" />
      <Type Name="DoubleCollection" Kind="Class" />
      <Type Name="DoubleCollection+Enumerator" Kind="Structure" />
      <Type Name="DoubleCollectionConverter" Kind="Class" />
      <Type Name="Drawing" Kind="Class" />
      <Type Name="DrawingBrush" Kind="Class" />
      <Type Name="DrawingCollection" Kind="Class" />
      <Type Name="DrawingCollection+Enumerator" Kind="Structure" />
      <Type Name="DrawingContext" Kind="Class" />
      <Type Name="DrawingGroup" Kind="Class" />
      <Type Name="DrawingImage" Kind="Class" />
      <Type Name="DrawingVisual" Kind="Class" />
      <Type Name="EdgeMode" Kind="Enumeration" />
      <Type Name="EllipseGeometry" Kind="Class" />
      <Type Name="ExceptionEventArgs" Kind="Class" />
      <Type Name="FamilyTypeface" Kind="Class" />
      <Type Name="FamilyTypefaceCollection" Kind="Class" />
      <Type Name="FillRule" Kind="Enumeration" />
      <Type Name="FontEmbeddingManager" Kind="Class" />
      <Type Name="FontEmbeddingRight" Kind="Enumeration" />
      <Type Name="FontFamily" Kind="Class" />
      <Type Name="FontFamilyConverter" Kind="Class" />
      <Type Name="FontFamilyMap" Kind="Class" />
      <Type Name="FontFamilyMapCollection" Kind="Class" />
      <Type Name="FontFamilyValueSerializer" Kind="Class" />
      <Type Name="Fonts" Kind="Class" />
      <Type Name="FormattedText" Kind="Class" />
      <Type Name="GeneralTransform" Kind="Class" />
      <Type Name="GeneralTransformCollection" Kind="Class" />
      <Type Name="GeneralTransformCollection+Enumerator" Kind="Structure" />
      <Type Name="GeneralTransformGroup" Kind="Class" />
      <Type Name="Geometry" Kind="Class" />
      <Type Name="GeometryCollection" Kind="Class" />
      <Type Name="GeometryCollection+Enumerator" Kind="Structure" />
      <Type Name="GeometryCombineMode" Kind="Enumeration" />
      <Type Name="GeometryConverter" Kind="Class" />
      <Type Name="GeometryDrawing" Kind="Class" />
      <Type Name="GeometryGroup" Kind="Class" />
      <Type Name="GeometryHitTestParameters" Kind="Class" />
      <Type Name="GeometryHitTestResult" Kind="Class" />
      <Type Name="GlyphRun" Kind="Class" />
      <Type Name="GlyphRunDrawing" Kind="Class" />
      <Type Name="GlyphTypeface" Kind="Class" />
      <Type Name="GradientBrush" Kind="Class" />
      <Type Name="GradientSpreadMethod" Kind="Enumeration" />
      <Type Name="GradientStop" Kind="Class" />
      <Type Name="GradientStopCollection" Kind="Class" />
      <Type Name="GradientStopCollection+Enumerator" Kind="Structure" />
      <Type Name="GuidelineSet" Kind="Class" />
      <Type Name="HitTestFilterBehavior" Kind="Enumeration" />
      <Type Name="HitTestFilterCallback" Kind="Delegate" />
      <Type Name="HitTestParameters" Kind="Class" />
      <Type Name="HitTestResult" Kind="Class" />
      <Type Name="HitTestResultBehavior" Kind="Enumeration" />
      <Type Name="HitTestResultCallback" Kind="Delegate" />
      <Type Name="HostVisual" Kind="Class" />
      <Type Name="ImageBrush" Kind="Class" />
      <Type Name="ImageDrawing" Kind="Class" />
      <Type Name="ImageMetadata" Kind="Class" />
      <Type Name="ImageSource" Kind="Class" />
      <Type Name="ImageSourceConverter" Kind="Class" />
      <Type Name="ImageSourceValueSerializer" Kind="Class" />
      <Type Name="Int32Collection" Kind="Class" />
      <Type Name="Int32Collection+Enumerator" Kind="Structure" />
      <Type Name="Int32CollectionConverter" Kind="Class" />
      <Type Name="IntersectionDetail" Kind="Enumeration" />
      <Type Name="InvalidWmpVersionException" Kind="Class" />
      <Type Name="LanguageSpecificStringDictionary" Kind="Class" />
      <Type Name="LinearGradientBrush" Kind="Class" />
      <Type Name="LineGeometry" Kind="Class" />
      <Type Name="LineSegment" Kind="Class" />
      <Type Name="MatrixTransform" Kind="Class" />
      <Type Name="MediaClock" Kind="Class" />
      <Type Name="MediaPlayer" Kind="Class" />
      <Type Name="MediaScriptCommandEventArgs" Kind="Class" />
      <Type Name="MediaTimeline" Kind="Class" />
      <Type Name="NumberCultureSource" Kind="Enumeration" />
      <Type Name="NumberSubstitution" Kind="Class" />
      <Type Name="NumberSubstitutionMethod" Kind="Enumeration" />
      <Type Name="PathFigure" Kind="Class" />
      <Type Name="PathFigureCollection" Kind="Class" />
      <Type Name="PathFigureCollection+Enumerator" Kind="Structure" />
      <Type Name="PathFigureCollectionConverter" Kind="Class" />
      <Type Name="PathGeometry" Kind="Class" />
      <Type Name="PathSegment" Kind="Class" />
      <Type Name="PathSegmentCollection" Kind="Class" />
      <Type Name="PathSegmentCollection+Enumerator" Kind="Structure" />
      <Type Name="Pen" Kind="Class" />
      <Type Name="PenLineCap" Kind="Enumeration" />
      <Type Name="PenLineJoin" Kind="Enumeration" />
      <Type Name="PixelFormat" Kind="Structure" />
      <Type Name="PixelFormatChannelMask" Kind="Structure" />
      <Type Name="PixelFormatConverter" Kind="Class" />
      <Type Name="PixelFormats" Kind="Class" />
      <Type Name="PointCollection" Kind="Class" />
      <Type Name="PointCollection+Enumerator" Kind="Structure" />
      <Type Name="PointCollectionConverter" Kind="Class" />
      <Type Name="PointHitTestParameters" Kind="Class" />
      <Type Name="PointHitTestResult" Kind="Class" />
      <Type Name="PolyBezierSegment" Kind="Class" />
      <Type Name="PolyLineSegment" Kind="Class" />
      <Type Name="PolyQuadraticBezierSegment" Kind="Class" />
      <Type Name="QuadraticBezierSegment" Kind="Class" />
      <Type Name="RadialGradientBrush" Kind="Class" />
      <Type Name="RectangleGeometry" Kind="Class" />
      <Type Name="RenderCapability" Kind="Class" />
      <Type Name="RenderingEventArgs" Kind="Class" />
      <Type Name="RenderOptions" Kind="Class" />
      <Type Name="RequestCachePolicyConverter" Kind="Class" />
      <Type Name="RotateTransform" Kind="Class" />
      <Type Name="ScaleTransform" Kind="Class" />
      <Type Name="SkewTransform" Kind="Class" />
      <Type Name="SolidColorBrush" Kind="Class" />
      <Type Name="StreamGeometry" Kind="Class" />
      <Type Name="StreamGeometryContext" Kind="Class" />
      <Type Name="Stretch" Kind="Enumeration" />
      <Type Name="StyleSimulations" Kind="Enumeration" />
      <Type Name="SweepDirection" Kind="Enumeration" />
      <Type Name="TextEffect" Kind="Class" />
      <Type Name="TextEffectCollection" Kind="Class" />
      <Type Name="TextEffectCollection+Enumerator" Kind="Structure" />
      <Type Name="TextFormattingMode" Kind="Enumeration" />
      <Type Name="TextHintingMode" Kind="Enumeration" />
      <Type Name="TextOptions" Kind="Class" />
      <Type Name="TextRenderingMode" Kind="Enumeration" />
      <Type Name="TileBrush" Kind="Class" />
      <Type Name="TileMode" Kind="Enumeration" />
      <Type Name="ToleranceType" Kind="Enumeration" />
      <Type Name="Transform" Kind="Class" />
      <Type Name="TransformCollection" Kind="Class" />
      <Type Name="TransformCollection+Enumerator" Kind="Structure" />
      <Type Name="TransformConverter" Kind="Class" />
      <Type Name="TransformGroup" Kind="Class" />
      <Type Name="TranslateTransform" Kind="Class" />
      <Type Name="Typeface" Kind="Class" />
      <Type Name="VectorCollection" Kind="Class" />
      <Type Name="VectorCollection+Enumerator" Kind="Structure" />
      <Type Name="VectorCollectionConverter" Kind="Class" />
      <Type Name="VideoDrawing" Kind="Class" />
      <Type Name="Visual" Kind="Class" />
      <Type Name="VisualBrush" Kind="Class" />
      <Type Name="VisualCollection" Kind="Class" />
      <Type Name="VisualCollection+Enumerator" Kind="Structure" />
      <Type Name="VisualTarget" Kind="Class" />
      <Type Name="VisualTreeHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Media.Animation">
      <Type Name="Animatable" Kind="Class" />
      <Type Name="AnimationClock" Kind="Class" />
      <Type Name="AnimationException" Kind="Class" />
      <Type Name="AnimationTimeline" Kind="Class" />
      <Type Name="BackEase" Kind="Class" />
      <Type Name="BeginStoryboard" Kind="Class" />
      <Type Name="BooleanAnimationBase" Kind="Class" />
      <Type Name="BooleanAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="BooleanKeyFrame" Kind="Class" />
      <Type Name="BooleanKeyFrameCollection" Kind="Class" />
      <Type Name="BounceEase" Kind="Class" />
      <Type Name="ByteAnimation" Kind="Class" />
      <Type Name="ByteAnimationBase" Kind="Class" />
      <Type Name="ByteAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="ByteKeyFrame" Kind="Class" />
      <Type Name="ByteKeyFrameCollection" Kind="Class" />
      <Type Name="CharAnimationBase" Kind="Class" />
      <Type Name="CharAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="CharKeyFrame" Kind="Class" />
      <Type Name="CharKeyFrameCollection" Kind="Class" />
      <Type Name="CircleEase" Kind="Class" />
      <Type Name="Clock" Kind="Class" />
      <Type Name="ClockCollection" Kind="Class" />
      <Type Name="ClockController" Kind="Class" />
      <Type Name="ClockGroup" Kind="Class" />
      <Type Name="ClockState" Kind="Enumeration" />
      <Type Name="ColorAnimation" Kind="Class" />
      <Type Name="ColorAnimationBase" Kind="Class" />
      <Type Name="ColorAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="ColorKeyFrame" Kind="Class" />
      <Type Name="ColorKeyFrameCollection" Kind="Class" />
      <Type Name="ControllableStoryboardAction" Kind="Class" />
      <Type Name="CubicEase" Kind="Class" />
      <Type Name="DecimalAnimation" Kind="Class" />
      <Type Name="DecimalAnimationBase" Kind="Class" />
      <Type Name="DecimalAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="DecimalKeyFrame" Kind="Class" />
      <Type Name="DecimalKeyFrameCollection" Kind="Class" />
      <Type Name="DiscreteBooleanKeyFrame" Kind="Class" />
      <Type Name="DiscreteByteKeyFrame" Kind="Class" />
      <Type Name="DiscreteCharKeyFrame" Kind="Class" />
      <Type Name="DiscreteColorKeyFrame" Kind="Class" />
      <Type Name="DiscreteDecimalKeyFrame" Kind="Class" />
      <Type Name="DiscreteDoubleKeyFrame" Kind="Class" />
      <Type Name="DiscreteInt16KeyFrame" Kind="Class" />
      <Type Name="DiscreteInt32KeyFrame" Kind="Class" />
      <Type Name="DiscreteInt64KeyFrame" Kind="Class" />
      <Type Name="DiscreteMatrixKeyFrame" Kind="Class" />
      <Type Name="DiscreteObjectKeyFrame" Kind="Class" />
      <Type Name="DiscretePoint3DKeyFrame" Kind="Class" />
      <Type Name="DiscretePointKeyFrame" Kind="Class" />
      <Type Name="DiscreteQuaternionKeyFrame" Kind="Class" />
      <Type Name="DiscreteRectKeyFrame" Kind="Class" />
      <Type Name="DiscreteRotation3DKeyFrame" Kind="Class" />
      <Type Name="DiscreteSingleKeyFrame" Kind="Class" />
      <Type Name="DiscreteSizeKeyFrame" Kind="Class" />
      <Type Name="DiscreteStringKeyFrame" Kind="Class" />
      <Type Name="DiscreteThicknessKeyFrame" Kind="Class" />
      <Type Name="DiscreteVector3DKeyFrame" Kind="Class" />
      <Type Name="DiscreteVectorKeyFrame" Kind="Class" />
      <Type Name="DoubleAnimation" Kind="Class" />
      <Type Name="DoubleAnimationBase" Kind="Class" />
      <Type Name="DoubleAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="DoubleAnimationUsingPath" Kind="Class" />
      <Type Name="DoubleKeyFrame" Kind="Class" />
      <Type Name="DoubleKeyFrameCollection" Kind="Class" />
      <Type Name="EasingByteKeyFrame" Kind="Class" />
      <Type Name="EasingColorKeyFrame" Kind="Class" />
      <Type Name="EasingDecimalKeyFrame" Kind="Class" />
      <Type Name="EasingDoubleKeyFrame" Kind="Class" />
      <Type Name="EasingFunctionBase" Kind="Class" />
      <Type Name="EasingInt16KeyFrame" Kind="Class" />
      <Type Name="EasingInt32KeyFrame" Kind="Class" />
      <Type Name="EasingInt64KeyFrame" Kind="Class" />
      <Type Name="EasingMode" Kind="Enumeration" />
      <Type Name="EasingPoint3DKeyFrame" Kind="Class" />
      <Type Name="EasingPointKeyFrame" Kind="Class" />
      <Type Name="EasingQuaternionKeyFrame" Kind="Class" />
      <Type Name="EasingRectKeyFrame" Kind="Class" />
      <Type Name="EasingRotation3DKeyFrame" Kind="Class" />
      <Type Name="EasingSingleKeyFrame" Kind="Class" />
      <Type Name="EasingSizeKeyFrame" Kind="Class" />
      <Type Name="EasingThicknessKeyFrame" Kind="Class" />
      <Type Name="EasingVector3DKeyFrame" Kind="Class" />
      <Type Name="EasingVectorKeyFrame" Kind="Class" />
      <Type Name="ElasticEase" Kind="Class" />
      <Type Name="ExponentialEase" Kind="Class" />
      <Type Name="FillBehavior" Kind="Enumeration" />
      <Type Name="HandoffBehavior" Kind="Enumeration" />
      <Type Name="IAnimatable" Kind="Interface" />
      <Type Name="IEasingFunction" Kind="Interface" />
      <Type Name="IKeyFrame" Kind="Interface" />
      <Type Name="IKeyFrameAnimation" Kind="Interface" />
      <Type Name="Int16Animation" Kind="Class" />
      <Type Name="Int16AnimationBase" Kind="Class" />
      <Type Name="Int16AnimationUsingKeyFrames" Kind="Class" />
      <Type Name="Int16KeyFrame" Kind="Class" />
      <Type Name="Int16KeyFrameCollection" Kind="Class" />
      <Type Name="Int32Animation" Kind="Class" />
      <Type Name="Int32AnimationBase" Kind="Class" />
      <Type Name="Int32AnimationUsingKeyFrames" Kind="Class" />
      <Type Name="Int32KeyFrame" Kind="Class" />
      <Type Name="Int32KeyFrameCollection" Kind="Class" />
      <Type Name="Int64Animation" Kind="Class" />
      <Type Name="Int64AnimationBase" Kind="Class" />
      <Type Name="Int64AnimationUsingKeyFrames" Kind="Class" />
      <Type Name="Int64KeyFrame" Kind="Class" />
      <Type Name="Int64KeyFrameCollection" Kind="Class" />
      <Type Name="KeySpline" Kind="Class" />
      <Type Name="KeyTime" Kind="Structure" />
      <Type Name="KeyTimeType" Kind="Enumeration" />
      <Type Name="LinearByteKeyFrame" Kind="Class" />
      <Type Name="LinearColorKeyFrame" Kind="Class" />
      <Type Name="LinearDecimalKeyFrame" Kind="Class" />
      <Type Name="LinearDoubleKeyFrame" Kind="Class" />
      <Type Name="LinearInt16KeyFrame" Kind="Class" />
      <Type Name="LinearInt32KeyFrame" Kind="Class" />
      <Type Name="LinearInt64KeyFrame" Kind="Class" />
      <Type Name="LinearPoint3DKeyFrame" Kind="Class" />
      <Type Name="LinearPointKeyFrame" Kind="Class" />
      <Type Name="LinearQuaternionKeyFrame" Kind="Class" />
      <Type Name="LinearRectKeyFrame" Kind="Class" />
      <Type Name="LinearRotation3DKeyFrame" Kind="Class" />
      <Type Name="LinearSingleKeyFrame" Kind="Class" />
      <Type Name="LinearSizeKeyFrame" Kind="Class" />
      <Type Name="LinearThicknessKeyFrame" Kind="Class" />
      <Type Name="LinearVector3DKeyFrame" Kind="Class" />
      <Type Name="LinearVectorKeyFrame" Kind="Class" />
      <Type Name="MatrixAnimationBase" Kind="Class" />
      <Type Name="MatrixAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="MatrixAnimationUsingPath" Kind="Class" />
      <Type Name="MatrixKeyFrame" Kind="Class" />
      <Type Name="MatrixKeyFrameCollection" Kind="Class" />
      <Type Name="ObjectAnimationBase" Kind="Class" />
      <Type Name="ObjectAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="ObjectKeyFrame" Kind="Class" />
      <Type Name="ObjectKeyFrameCollection" Kind="Class" />
      <Type Name="ParallelTimeline" Kind="Class" />
      <Type Name="PathAnimationSource" Kind="Enumeration" />
      <Type Name="PauseStoryboard" Kind="Class" />
      <Type Name="Point3DAnimation" Kind="Class" />
      <Type Name="Point3DAnimationBase" Kind="Class" />
      <Type Name="Point3DAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="Point3DKeyFrame" Kind="Class" />
      <Type Name="Point3DKeyFrameCollection" Kind="Class" />
      <Type Name="PointAnimation" Kind="Class" />
      <Type Name="PointAnimationBase" Kind="Class" />
      <Type Name="PointAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="PointAnimationUsingPath" Kind="Class" />
      <Type Name="PointKeyFrame" Kind="Class" />
      <Type Name="PointKeyFrameCollection" Kind="Class" />
      <Type Name="PowerEase" Kind="Class" />
      <Type Name="QuadraticEase" Kind="Class" />
      <Type Name="QuarticEase" Kind="Class" />
      <Type Name="QuaternionAnimation" Kind="Class" />
      <Type Name="QuaternionAnimationBase" Kind="Class" />
      <Type Name="QuaternionAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="QuaternionKeyFrame" Kind="Class" />
      <Type Name="QuaternionKeyFrameCollection" Kind="Class" />
      <Type Name="QuinticEase" Kind="Class" />
      <Type Name="RectAnimation" Kind="Class" />
      <Type Name="RectAnimationBase" Kind="Class" />
      <Type Name="RectAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="RectKeyFrame" Kind="Class" />
      <Type Name="RectKeyFrameCollection" Kind="Class" />
      <Type Name="RemoveStoryboard" Kind="Class" />
      <Type Name="RepeatBehavior" Kind="Structure" />
      <Type Name="RepeatBehaviorConverter" Kind="Class" />
      <Type Name="ResumeStoryboard" Kind="Class" />
      <Type Name="Rotation3DAnimation" Kind="Class" />
      <Type Name="Rotation3DAnimationBase" Kind="Class" />
      <Type Name="Rotation3DAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="Rotation3DKeyFrame" Kind="Class" />
      <Type Name="Rotation3DKeyFrameCollection" Kind="Class" />
      <Type Name="SeekStoryboard" Kind="Class" />
      <Type Name="SetStoryboardSpeedRatio" Kind="Class" />
      <Type Name="SineEase" Kind="Class" />
      <Type Name="SingleAnimation" Kind="Class" />
      <Type Name="SingleAnimationBase" Kind="Class" />
      <Type Name="SingleAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="SingleKeyFrame" Kind="Class" />
      <Type Name="SingleKeyFrameCollection" Kind="Class" />
      <Type Name="SizeAnimation" Kind="Class" />
      <Type Name="SizeAnimationBase" Kind="Class" />
      <Type Name="SizeAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="SizeKeyFrame" Kind="Class" />
      <Type Name="SizeKeyFrameCollection" Kind="Class" />
      <Type Name="SkipStoryboardToFill" Kind="Class" />
      <Type Name="SlipBehavior" Kind="Enumeration" />
      <Type Name="SplineByteKeyFrame" Kind="Class" />
      <Type Name="SplineColorKeyFrame" Kind="Class" />
      <Type Name="SplineDecimalKeyFrame" Kind="Class" />
      <Type Name="SplineDoubleKeyFrame" Kind="Class" />
      <Type Name="SplineInt16KeyFrame" Kind="Class" />
      <Type Name="SplineInt32KeyFrame" Kind="Class" />
      <Type Name="SplineInt64KeyFrame" Kind="Class" />
      <Type Name="SplinePoint3DKeyFrame" Kind="Class" />
      <Type Name="SplinePointKeyFrame" Kind="Class" />
      <Type Name="SplineQuaternionKeyFrame" Kind="Class" />
      <Type Name="SplineRectKeyFrame" Kind="Class" />
      <Type Name="SplineRotation3DKeyFrame" Kind="Class" />
      <Type Name="SplineSingleKeyFrame" Kind="Class" />
      <Type Name="SplineSizeKeyFrame" Kind="Class" />
      <Type Name="SplineThicknessKeyFrame" Kind="Class" />
      <Type Name="SplineVector3DKeyFrame" Kind="Class" />
      <Type Name="SplineVectorKeyFrame" Kind="Class" />
      <Type Name="StopStoryboard" Kind="Class" />
      <Type Name="Storyboard" Kind="Class" />
      <Type Name="StringAnimationBase" Kind="Class" />
      <Type Name="StringAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="StringKeyFrame" Kind="Class" />
      <Type Name="StringKeyFrameCollection" Kind="Class" />
      <Type Name="ThicknessAnimation" Kind="Class" />
      <Type Name="ThicknessAnimationBase" Kind="Class" />
      <Type Name="ThicknessAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="ThicknessKeyFrame" Kind="Class" />
      <Type Name="ThicknessKeyFrameCollection" Kind="Class" />
      <Type Name="Timeline" Kind="Class" />
      <Type Name="TimelineCollection" Kind="Class" />
      <Type Name="TimelineCollection+Enumerator" Kind="Structure" />
      <Type Name="TimelineGroup" Kind="Class" />
      <Type Name="TimeSeekOrigin" Kind="Enumeration" />
      <Type Name="Vector3DAnimation" Kind="Class" />
      <Type Name="Vector3DAnimationBase" Kind="Class" />
      <Type Name="Vector3DAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="Vector3DKeyFrame" Kind="Class" />
      <Type Name="Vector3DKeyFrameCollection" Kind="Class" />
      <Type Name="VectorAnimation" Kind="Class" />
      <Type Name="VectorAnimationBase" Kind="Class" />
      <Type Name="VectorAnimationUsingKeyFrames" Kind="Class" />
      <Type Name="VectorKeyFrame" Kind="Class" />
      <Type Name="VectorKeyFrameCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Media.Converters">
      <Type Name="BaseIListConverter" Kind="Class" />
      <Type Name="BoolIListConverter" Kind="Class" />
      <Type Name="BrushValueSerializer" Kind="Class" />
      <Type Name="CacheModeValueSerializer" Kind="Class" />
      <Type Name="CharIListConverter" Kind="Class" />
      <Type Name="DoubleCollectionValueSerializer" Kind="Class" />
      <Type Name="DoubleIListConverter" Kind="Class" />
      <Type Name="GeometryValueSerializer" Kind="Class" />
      <Type Name="Int32CollectionValueSerializer" Kind="Class" />
      <Type Name="PathFigureCollectionValueSerializer" Kind="Class" />
      <Type Name="PointCollectionValueSerializer" Kind="Class" />
      <Type Name="PointIListConverter" Kind="Class" />
      <Type Name="TransformValueSerializer" Kind="Class" />
      <Type Name="UShortIListConverter" Kind="Class" />
      <Type Name="VectorCollectionValueSerializer" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Media.Effects">
      <Type Name="BevelBitmapEffect" Kind="Class" />
      <Type Name="BitmapEffect" Kind="Class" />
      <Type Name="BitmapEffectCollection" Kind="Class" />
      <Type Name="BitmapEffectCollection+Enumerator" Kind="Structure" />
      <Type Name="BitmapEffectGroup" Kind="Class" />
      <Type Name="BitmapEffectInput" Kind="Class" />
      <Type Name="BlurBitmapEffect" Kind="Class" />
      <Type Name="BlurEffect" Kind="Class" />
      <Type Name="DropShadowBitmapEffect" Kind="Class" />
      <Type Name="DropShadowEffect" Kind="Class" />
      <Type Name="EdgeProfile" Kind="Enumeration" />
      <Type Name="Effect" Kind="Class" />
      <Type Name="EmbossBitmapEffect" Kind="Class" />
      <Type Name="KernelType" Kind="Enumeration" />
      <Type Name="OuterGlowBitmapEffect" Kind="Class" />
      <Type Name="PixelShader" Kind="Class" />
      <Type Name="RenderingBias" Kind="Enumeration" />
      <Type Name="SamplingMode" Kind="Enumeration" />
      <Type Name="ShaderEffect" Kind="Class" />
      <Type Name="ShaderRenderMode" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Windows.Media.Imaging">
      <Type Name="BitmapCacheOption" Kind="Enumeration" />
      <Type Name="BitmapCodecInfo" Kind="Class" />
      <Type Name="BitmapCreateOptions" Kind="Enumeration" />
      <Type Name="BitmapDecoder" Kind="Class" />
      <Type Name="BitmapEncoder" Kind="Class" />
      <Type Name="BitmapFrame" Kind="Class" />
      <Type Name="BitmapImage" Kind="Class" />
      <Type Name="BitmapMetadata" Kind="Class" />
      <Type Name="BitmapMetadataBlob" Kind="Class" />
      <Type Name="BitmapPalette" Kind="Class" />
      <Type Name="BitmapPalettes" Kind="Class" />
      <Type Name="BitmapSizeOptions" Kind="Class" />
      <Type Name="BitmapSource" Kind="Class" />
      <Type Name="BmpBitmapDecoder" Kind="Class" />
      <Type Name="BmpBitmapEncoder" Kind="Class" />
      <Type Name="CachedBitmap" Kind="Class" />
      <Type Name="ColorConvertedBitmap" Kind="Class" />
      <Type Name="CroppedBitmap" Kind="Class" />
      <Type Name="DownloadProgressEventArgs" Kind="Class" />
      <Type Name="FormatConvertedBitmap" Kind="Class" />
      <Type Name="GifBitmapDecoder" Kind="Class" />
      <Type Name="GifBitmapEncoder" Kind="Class" />
      <Type Name="IconBitmapDecoder" Kind="Class" />
      <Type Name="InPlaceBitmapMetadataWriter" Kind="Class" />
      <Type Name="JpegBitmapDecoder" Kind="Class" />
      <Type Name="JpegBitmapEncoder" Kind="Class" />
      <Type Name="LateBoundBitmapDecoder" Kind="Class" />
      <Type Name="PngBitmapDecoder" Kind="Class" />
      <Type Name="PngBitmapEncoder" Kind="Class" />
      <Type Name="PngInterlaceOption" Kind="Enumeration" />
      <Type Name="RenderTargetBitmap" Kind="Class" />
      <Type Name="Rotation" Kind="Enumeration" />
      <Type Name="TiffBitmapDecoder" Kind="Class" />
      <Type Name="TiffBitmapEncoder" Kind="Class" />
      <Type Name="TiffCompressOption" Kind="Enumeration" />
      <Type Name="TransformedBitmap" Kind="Class" />
      <Type Name="WmpBitmapDecoder" Kind="Class" />
      <Type Name="WmpBitmapEncoder" Kind="Class" />
      <Type Name="WriteableBitmap" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Media.Media3D">
      <Type Name="AffineTransform3D" Kind="Class" />
      <Type Name="AmbientLight" Kind="Class" />
      <Type Name="AxisAngleRotation3D" Kind="Class" />
      <Type Name="Camera" Kind="Class" />
      <Type Name="ContainerUIElement3D" Kind="Class" />
      <Type Name="DiffuseMaterial" Kind="Class" />
      <Type Name="DirectionalLight" Kind="Class" />
      <Type Name="EmissiveMaterial" Kind="Class" />
      <Type Name="GeneralTransform2DTo3D" Kind="Class" />
      <Type Name="GeneralTransform3D" Kind="Class" />
      <Type Name="GeneralTransform3DCollection" Kind="Class" />
      <Type Name="GeneralTransform3DCollection+Enumerator" Kind="Structure" />
      <Type Name="GeneralTransform3DGroup" Kind="Class" />
      <Type Name="GeneralTransform3DTo2D" Kind="Class" />
      <Type Name="Geometry3D" Kind="Class" />
      <Type Name="GeometryModel3D" Kind="Class" />
      <Type Name="HitTestParameters3D" Kind="Class" />
      <Type Name="Light" Kind="Class" />
      <Type Name="Material" Kind="Class" />
      <Type Name="MaterialCollection" Kind="Class" />
      <Type Name="MaterialCollection+Enumerator" Kind="Structure" />
      <Type Name="MaterialGroup" Kind="Class" />
      <Type Name="Matrix3D" Kind="Structure" />
      <Type Name="Matrix3DConverter" Kind="Class" />
      <Type Name="MatrixCamera" Kind="Class" />
      <Type Name="MatrixTransform3D" Kind="Class" />
      <Type Name="MeshGeometry3D" Kind="Class" />
      <Type Name="Model3D" Kind="Class" />
      <Type Name="Model3DCollection" Kind="Class" />
      <Type Name="Model3DCollection+Enumerator" Kind="Structure" />
      <Type Name="Model3DGroup" Kind="Class" />
      <Type Name="ModelUIElement3D" Kind="Class" />
      <Type Name="ModelVisual3D" Kind="Class" />
      <Type Name="OrthographicCamera" Kind="Class" />
      <Type Name="PerspectiveCamera" Kind="Class" />
      <Type Name="Point3D" Kind="Structure" />
      <Type Name="Point3DCollection" Kind="Class" />
      <Type Name="Point3DCollection+Enumerator" Kind="Structure" />
      <Type Name="Point3DCollectionConverter" Kind="Class" />
      <Type Name="Point3DConverter" Kind="Class" />
      <Type Name="Point4D" Kind="Structure" />
      <Type Name="Point4DConverter" Kind="Class" />
      <Type Name="PointLight" Kind="Class" />
      <Type Name="PointLightBase" Kind="Class" />
      <Type Name="ProjectionCamera" Kind="Class" />
      <Type Name="Quaternion" Kind="Structure" />
      <Type Name="QuaternionConverter" Kind="Class" />
      <Type Name="QuaternionRotation3D" Kind="Class" />
      <Type Name="RayHitTestParameters" Kind="Class" />
      <Type Name="RayHitTestResult" Kind="Class" />
      <Type Name="RayMeshGeometry3DHitTestResult" Kind="Class" />
      <Type Name="Rect3D" Kind="Structure" />
      <Type Name="Rect3DConverter" Kind="Class" />
      <Type Name="RotateTransform3D" Kind="Class" />
      <Type Name="Rotation3D" Kind="Class" />
      <Type Name="ScaleTransform3D" Kind="Class" />
      <Type Name="Size3D" Kind="Structure" />
      <Type Name="Size3DConverter" Kind="Class" />
      <Type Name="SpecularMaterial" Kind="Class" />
      <Type Name="SpotLight" Kind="Class" />
      <Type Name="Transform3D" Kind="Class" />
      <Type Name="Transform3DCollection" Kind="Class" />
      <Type Name="Transform3DCollection+Enumerator" Kind="Structure" />
      <Type Name="Transform3DGroup" Kind="Class" />
      <Type Name="TranslateTransform3D" Kind="Class" />
      <Type Name="Vector3D" Kind="Structure" />
      <Type Name="Vector3DCollection" Kind="Class" />
      <Type Name="Vector3DCollection+Enumerator" Kind="Structure" />
      <Type Name="Vector3DCollectionConverter" Kind="Class" />
      <Type Name="Vector3DConverter" Kind="Class" />
      <Type Name="Viewport2DVisual3D" Kind="Class" />
      <Type Name="Viewport3DVisual" Kind="Class" />
      <Type Name="Visual3D" Kind="Class" />
      <Type Name="Visual3DCollection" Kind="Class" />
      <Type Name="Visual3DCollection+Enumerator" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.Windows.Media.Media3D.Converters">
      <Type Name="Matrix3DValueSerializer" Kind="Class" />
      <Type Name="Point3DCollectionValueSerializer" Kind="Class" />
      <Type Name="Point3DValueSerializer" Kind="Class" />
      <Type Name="Point4DValueSerializer" Kind="Class" />
      <Type Name="QuaternionValueSerializer" Kind="Class" />
      <Type Name="Rect3DValueSerializer" Kind="Class" />
      <Type Name="Size3DValueSerializer" Kind="Class" />
      <Type Name="Vector3DCollectionValueSerializer" Kind="Class" />
      <Type Name="Vector3DValueSerializer" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Media.TextFormatting">
      <Type Name="CharacterBufferRange" Kind="Structure" />
      <Type Name="CharacterBufferReference" Kind="Structure" />
      <Type Name="CharacterHit" Kind="Structure" />
      <Type Name="CultureSpecificCharacterBufferRange" Kind="Class" />
      <Type Name="IndexedGlyphRun" Kind="Class" />
      <Type Name="InvertAxes" Kind="Enumeration" />
      <Type Name="MinMaxParagraphWidth" Kind="Structure" />
      <Type Name="TextBounds" Kind="Class" />
      <Type Name="TextCharacters" Kind="Class" />
      <Type Name="TextCollapsedRange" Kind="Class" />
      <Type Name="TextCollapsingProperties" Kind="Class" />
      <Type Name="TextCollapsingStyle" Kind="Enumeration" />
      <Type Name="TextEmbeddedObject" Kind="Class" />
      <Type Name="TextEmbeddedObjectMetrics" Kind="Class" />
      <Type Name="TextEndOfLine" Kind="Class" />
      <Type Name="TextEndOfParagraph" Kind="Class" />
      <Type Name="TextEndOfSegment" Kind="Class" />
      <Type Name="TextFormatter" Kind="Class" />
      <Type Name="TextHidden" Kind="Class" />
      <Type Name="TextLine" Kind="Class" />
      <Type Name="TextLineBreak" Kind="Class" />
      <Type Name="TextMarkerProperties" Kind="Class" />
      <Type Name="TextModifier" Kind="Class" />
      <Type Name="TextParagraphProperties" Kind="Class" />
      <Type Name="TextRun" Kind="Class" />
      <Type Name="TextRunBounds" Kind="Class" />
      <Type Name="TextRunCache" Kind="Class" />
      <Type Name="TextRunProperties" Kind="Class" />
      <Type Name="TextRunTypographyProperties" Kind="Class" />
      <Type Name="TextSimpleMarkerProperties" Kind="Class" />
      <Type Name="TextSource" Kind="Class" />
      <Type Name="TextSpan`1" DisplayName="TextSpan&lt;T&gt;" Kind="Class" />
      <Type Name="TextTabAlignment" Kind="Enumeration" />
      <Type Name="TextTabProperties" Kind="Class" />
      <Type Name="TextTrailingCharacterEllipsis" Kind="Class" />
      <Type Name="TextTrailingWordEllipsis" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Navigation">
      <Type Name="BaseUriHelper" Kind="Class" />
      <Type Name="CustomContentState" Kind="Class" />
      <Type Name="FragmentNavigationEventArgs" Kind="Class" />
      <Type Name="FragmentNavigationEventHandler" Kind="Delegate" />
      <Type Name="IProvideCustomContentState" Kind="Interface" />
      <Type Name="JournalEntry" Kind="Class" />
      <Type Name="JournalEntryListConverter" Kind="Class" />
      <Type Name="JournalEntryPosition" Kind="Enumeration" />
      <Type Name="JournalEntryUnifiedViewConverter" Kind="Class" />
      <Type Name="JournalOwnership" Kind="Enumeration" />
      <Type Name="LoadCompletedEventHandler" Kind="Delegate" />
      <Type Name="NavigatedEventHandler" Kind="Delegate" />
      <Type Name="NavigatingCancelEventArgs" Kind="Class" />
      <Type Name="NavigatingCancelEventHandler" Kind="Delegate" />
      <Type Name="NavigationEventArgs" Kind="Class" />
      <Type Name="NavigationFailedEventArgs" Kind="Class" />
      <Type Name="NavigationFailedEventHandler" Kind="Delegate" />
      <Type Name="NavigationMode" Kind="Enumeration" />
      <Type Name="NavigationProgressEventArgs" Kind="Class" />
      <Type Name="NavigationProgressEventHandler" Kind="Delegate" />
      <Type Name="NavigationService" Kind="Class" />
      <Type Name="NavigationStoppedEventHandler" Kind="Delegate" />
      <Type Name="NavigationUIVisibility" Kind="Enumeration" />
      <Type Name="NavigationWindow" Kind="Class" />
      <Type Name="PageFunction`1" DisplayName="PageFunction&lt;T&gt;" Kind="Class" />
      <Type Name="PageFunctionBase" Kind="Class" />
      <Type Name="RequestNavigateEventArgs" Kind="Class" />
      <Type Name="RequestNavigateEventHandler" Kind="Delegate" />
      <Type Name="ReturnEventArgs`1" DisplayName="ReturnEventArgs&lt;T&gt;" Kind="Class" />
      <Type Name="ReturnEventHandler`1" DisplayName="ReturnEventHandler&lt;T&gt;" Kind="Delegate" />
    </Namespace>
    <Namespace Name="System.Windows.Resources">
      <Type Name="AssemblyAssociatedContentFileAttribute" Kind="Class" />
      <Type Name="ContentTypes" Kind="Class" />
      <Type Name="StreamResourceInfo" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Shapes">
      <Type Name="Ellipse" Kind="Class" />
      <Type Name="Line" Kind="Class" />
      <Type Name="Path" Kind="Class" />
      <Type Name="Polygon" Kind="Class" />
      <Type Name="Polyline" Kind="Class" />
      <Type Name="Rectangle" Kind="Class" />
      <Type Name="Shape" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Shell">
      <Type Name="JumpItem" Kind="Class" />
      <Type Name="JumpItemRejectionReason" Kind="Enumeration" />
      <Type Name="JumpItemsRejectedEventArgs" Kind="Class" />
      <Type Name="JumpItemsRemovedEventArgs" Kind="Class" />
      <Type Name="JumpList" Kind="Class" />
      <Type Name="JumpPath" Kind="Class" />
      <Type Name="JumpTask" Kind="Class" />
      <Type Name="NonClientFrameEdges" Kind="Enumeration" />
      <Type Name="ResizeGripDirection" Kind="Enumeration" />
      <Type Name="TaskbarItemInfo" Kind="Class" />
      <Type Name="TaskbarItemProgressState" Kind="Enumeration" />
      <Type Name="ThumbButtonInfo" Kind="Class" />
      <Type Name="ThumbButtonInfoCollection" Kind="Class" />
      <Type Name="WindowChrome" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Xps">
      <Type Name="XpsException" Kind="Class" />
      <Type Name="XpsPackagingException" Kind="Class" />
      <Type Name="XpsSerializationException" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Xps.Packaging">
      <Type Name="IDocumentStructureProvider" Kind="Interface" />
      <Type Name="IStoryFragmentProvider" Kind="Interface" />
      <Type Name="IXpsFixedDocumentReader" Kind="Interface" />
      <Type Name="IXpsFixedDocumentSequenceReader" Kind="Interface" />
      <Type Name="IXpsFixedDocumentSequenceWriter" Kind="Interface" />
      <Type Name="IXpsFixedDocumentWriter" Kind="Interface" />
      <Type Name="IXpsFixedPageReader" Kind="Interface" />
      <Type Name="IXpsFixedPageWriter" Kind="Interface" />
      <Type Name="PackageInterleavingOrder" Kind="Enumeration" />
      <Type Name="PackagingAction" Kind="Enumeration" />
      <Type Name="PackagingProgressEventArgs" Kind="Class" />
      <Type Name="PackagingProgressEventHandler" Kind="Delegate" />
      <Type Name="SpotLocation" Kind="Class" />
      <Type Name="XpsColorContext" Kind="Class" />
      <Type Name="XpsDigitalSignature" Kind="Class" />
      <Type Name="XpsDigSigPartAlteringRestrictions" Kind="Enumeration" />
      <Type Name="XpsDocument" Kind="Class" />
      <Type Name="XpsFont" Kind="Class" />
      <Type Name="XpsImage" Kind="Class" />
      <Type Name="XpsImageType" Kind="Enumeration" />
      <Type Name="XpsPartBase" Kind="Class" />
      <Type Name="XpsResource" Kind="Class" />
      <Type Name="XpsResourceDictionary" Kind="Class" />
      <Type Name="XpsResourceSharing" Kind="Enumeration" />
      <Type Name="XpsSignatureDefinition" Kind="Class" />
      <Type Name="XpsStructure" Kind="Class" />
      <Type Name="XpsThumbnail" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Windows.Xps.Serialization">
      <Type Name="BasePackagingPolicy" Kind="Class" />
      <Type Name="ColorTypeConverter" Kind="Class" />
      <Type Name="FontSubsetterCommitPolicies" Kind="Enumeration" />
      <Type Name="FontTypeConverter" Kind="Class" />
      <Type Name="ImageSourceTypeConverter" Kind="Class" />
      <Type Name="PackageSerializationManager" Kind="Class" />
      <Type Name="PrintTicketLevel" Kind="Enumeration" />
      <Type Name="SerializationState" Kind="Enumeration" />
      <Type Name="XpsPackagingPolicy" Kind="Class" />
      <Type Name="XpsResourceStream" Kind="Class" />
      <Type Name="XpsSerializationCompletedEventArgs" Kind="Class" />
      <Type Name="XpsSerializationCompletedEventHandler" Kind="Delegate" />
      <Type Name="XpsSerializationManager" Kind="Class" />
      <Type Name="XpsSerializationManagerAsync" Kind="Class" />
      <Type Name="XpsSerializationPrintTicketRequiredEventArgs" Kind="Class" />
      <Type Name="XpsSerializationPrintTicketRequiredEventHandler" Kind="Delegate" />
      <Type Name="XpsSerializationProgressChangedEventArgs" Kind="Class" />
      <Type Name="XpsSerializationProgressChangedEventHandler" Kind="Delegate" />
      <Type Name="XpsSerializerFactory" Kind="Class" />
      <Type Name="XpsWritingProgressChangeLevel" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Xml">
      <Type Name="XmlDataDocument" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Xml.Xsl.Runtime">
      <Type Name="AncestorDocOrderIterator" Kind="Structure" />
      <Type Name="AncestorIterator" Kind="Structure" />
      <Type Name="AttributeContentIterator" Kind="Structure" />
      <Type Name="AttributeIterator" Kind="Structure" />
      <Type Name="ContentIterator" Kind="Structure" />
      <Type Name="ContentMergeIterator" Kind="Structure" />
      <Type Name="DecimalAggregator" Kind="Structure" />
      <Type Name="DescendantIterator" Kind="Structure" />
      <Type Name="DescendantMergeIterator" Kind="Structure" />
      <Type Name="DifferenceIterator" Kind="Structure" />
      <Type Name="DodSequenceMerge" Kind="Structure" />
      <Type Name="DoubleAggregator" Kind="Structure" />
      <Type Name="ElementContentIterator" Kind="Structure" />
      <Type Name="FollowingSiblingIterator" Kind="Structure" />
      <Type Name="FollowingSiblingMergeIterator" Kind="Structure" />
      <Type Name="IdIterator" Kind="Structure" />
      <Type Name="Int32Aggregator" Kind="Structure" />
      <Type Name="Int64Aggregator" Kind="Structure" />
      <Type Name="IntersectIterator" Kind="Structure" />
      <Type Name="IteratorResult" Kind="Enumeration" />
      <Type Name="NamespaceIterator" Kind="Structure" />
      <Type Name="NodeKindContentIterator" Kind="Structure" />
      <Type Name="NodeRangeIterator" Kind="Structure" />
      <Type Name="ParentIterator" Kind="Structure" />
      <Type Name="PrecedingIterator" Kind="Structure" />
      <Type Name="PrecedingSiblingDocOrderIterator" Kind="Structure" />
      <Type Name="PrecedingSiblingIterator" Kind="Structure" />
      <Type Name="SetIteratorResult" Kind="Enumeration" />
      <Type Name="StringConcat" Kind="Structure" />
      <Type Name="UnionIterator" Kind="Structure" />
      <Type Name="XmlCollation" Kind="Class" />
      <Type Name="XmlILIndex" Kind="Class" />
      <Type Name="XmlILStorageConverter" Kind="Class" />
      <Type Name="XmlNavigatorFilter" Kind="Class" />
      <Type Name="XmlQueryContext" Kind="Class" />
      <Type Name="XmlQueryItemSequence" Kind="Class" />
      <Type Name="XmlQueryNodeSequence" Kind="Class" />
      <Type Name="XmlQueryOutput" Kind="Class" />
      <Type Name="XmlQueryRuntime" Kind="Class" />
      <Type Name="XmlQuerySequence`1" DisplayName="XmlQuerySequence&lt;T&gt;" Kind="Class" />
      <Type Name="XmlSortKeyAccumulator" Kind="Structure" />
      <Type Name="XPathFollowingIterator" Kind="Structure" />
      <Type Name="XPathFollowingMergeIterator" Kind="Structure" />
      <Type Name="XPathPrecedingDocOrderIterator" Kind="Structure" />
      <Type Name="XPathPrecedingIterator" Kind="Structure" />
      <Type Name="XPathPrecedingMergeIterator" Kind="Structure" />
      <Type Name="XsltConvert" Kind="Class" />
      <Type Name="XsltFunctions" Kind="Class" />
      <Type Name="XsltLibrary" Kind="Class" />
    </Namespace>
    <Namespace Name="XamlGeneratedNamespace">
      <Type Name="GeneratedInternalTypeHelper" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Untitled</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Activities.Presentation.Model.ModelItem" />
      </Targets>
      <Member MemberName="Focus">
        <MemberSignature Language="C#" Value="public static void Focus (this System.Activities.Presentation.Model.ModelItem item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Focus(class System.Activities.Presentation.Model.ModelItem item) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="item" Type="System.Activities.Presentation.Model.ModelItem" RefType="this" />
        </Parameters>
        <Docs>
          <param name="item">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Activities.Presentation.Model.ModelItemExtensions" Member="M:System.Activities.Presentation.Model.ModelItemExtensions.Focus(System.Activities.Presentation.Model.ModelItem)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Activities.Presentation.Model.ModelItem" />
      </Targets>
      <Member MemberName="Focus">
        <MemberSignature Language="C#" Value="public static void Focus (this System.Activities.Presentation.Model.ModelItem item, int level);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Focus(class System.Activities.Presentation.Model.ModelItem item, int32 level) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="item" Type="System.Activities.Presentation.Model.ModelItem" RefType="this" />
          <Parameter Name="level" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="item">To be added.</param>
          <param name="level">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Activities.Presentation.Model.ModelItemExtensions" Member="M:System.Activities.Presentation.Model.ModelItemExtensions.Focus(System.Activities.Presentation.Model.ModelItem,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Activities.Presentation.Model.ModelItem" />
      </Targets>
      <Member MemberName="GetEditingContext">
        <MemberSignature Language="C#" Value="public static System.Activities.Presentation.EditingContext GetEditingContext (this System.Activities.Presentation.Model.ModelItem modelItem);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.Presentation.EditingContext GetEditingContext(class System.Activities.Presentation.Model.ModelItem modelItem) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Activities.Presentation.EditingContext</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelItem" Type="System.Activities.Presentation.Model.ModelItem" RefType="this" />
        </Parameters>
        <Docs>
          <param name="modelItem">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Activities.Presentation.Model.ModelItemExtensions" Member="M:System.Activities.Presentation.Model.ModelItemExtensions.GetEditingContext(System.Activities.Presentation.Model.ModelItem)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Activities.Presentation.Model.ModelItem" />
      </Targets>
      <Member MemberName="GetModelPath">
        <MemberSignature Language="C#" Value="public static string GetModelPath (this System.Activities.Presentation.Model.ModelItem modelItem);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetModelPath(class System.Activities.Presentation.Model.ModelItem modelItem) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="modelItem" Type="System.Activities.Presentation.Model.ModelItem" RefType="this" />
        </Parameters>
        <Docs>
          <param name="modelItem">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Activities.Presentation.Model.ModelItemExtensions" Member="M:System.Activities.Presentation.Model.ModelItemExtensions.GetModelPath(System.Activities.Presentation.Model.ModelItem)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Activities.Presentation.Model.ModelItem" />
      </Targets>
      <Member MemberName="IsParentOf">
        <MemberSignature Language="C#" Value="public static bool IsParentOf (this System.Activities.Presentation.Model.ModelItem item, System.Activities.Presentation.Model.ModelItem child);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsParentOf(class System.Activities.Presentation.Model.ModelItem item, class System.Activities.Presentation.Model.ModelItem child) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="item" Type="System.Activities.Presentation.Model.ModelItem" RefType="this" />
          <Parameter Name="child" Type="System.Activities.Presentation.Model.ModelItem" />
        </Parameters>
        <Docs>
          <param name="item">To be added.</param>
          <param name="child">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Activities.Presentation.Model.ModelItemExtensions" Member="M:System.Activities.Presentation.Model.ModelItemExtensions.IsParentOf(System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Hosting.CompositionBatch" />
      </Targets>
      <Member MemberName="AddExportedValue&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ComposablePart AddExportedValue&lt;T&gt; (this System.ComponentModel.Composition.Hosting.CompositionBatch batch, T exportedValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ComposablePart AddExportedValue&lt;T&gt;(class System.ComponentModel.Composition.Hosting.CompositionBatch batch, !!T exportedValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePart</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="batch" Type="System.ComponentModel.Composition.Hosting.CompositionBatch" RefType="this" />
          <Parameter Name="exportedValue" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="batch">To be added.</param>
          <param name="exportedValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Hosting.CompositionBatch" />
      </Targets>
      <Member MemberName="AddExportedValue&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ComposablePart AddExportedValue&lt;T&gt; (this System.ComponentModel.Composition.Hosting.CompositionBatch batch, string contractName, T exportedValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ComposablePart AddExportedValue&lt;T&gt;(class System.ComponentModel.Composition.Hosting.CompositionBatch batch, string contractName, !!T exportedValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePart</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="batch" Type="System.ComponentModel.Composition.Hosting.CompositionBatch" RefType="this" />
          <Parameter Name="contractName" Type="System.String" />
          <Parameter Name="exportedValue" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="batch">To be added.</param>
          <param name="contractName">To be added.</param>
          <param name="exportedValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.AddExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionBatch,System.String,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Hosting.CompositionBatch" />
      </Targets>
      <Member MemberName="AddPart">
        <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ComposablePart AddPart (this System.ComponentModel.Composition.Hosting.CompositionBatch batch, object attributedPart);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ComposablePart AddPart(class System.ComponentModel.Composition.Hosting.CompositionBatch batch, object attributedPart) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePart</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="batch" Type="System.ComponentModel.Composition.Hosting.CompositionBatch" RefType="this" />
          <Parameter Name="attributedPart" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="batch">To be added.</param>
          <param name="attributedPart">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.AddPart(System.ComponentModel.Composition.Hosting.CompositionBatch,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
      </Targets>
      <Member MemberName="ComposeExportedValue&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void ComposeExportedValue&lt;T&gt; (this System.ComponentModel.Composition.Hosting.CompositionContainer container, T exportedValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ComposeExportedValue&lt;T&gt;(class System.ComponentModel.Composition.Hosting.CompositionContainer container, !!T exportedValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="container" Type="System.ComponentModel.Composition.Hosting.CompositionContainer" RefType="this" />
          <Parameter Name="exportedValue" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="container">To be added.</param>
          <param name="exportedValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
      </Targets>
      <Member MemberName="ComposeExportedValue&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void ComposeExportedValue&lt;T&gt; (this System.ComponentModel.Composition.Hosting.CompositionContainer container, string contractName, T exportedValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ComposeExportedValue&lt;T&gt;(class System.ComponentModel.Composition.Hosting.CompositionContainer container, string contractName, !!T exportedValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="container" Type="System.ComponentModel.Composition.Hosting.CompositionContainer" RefType="this" />
          <Parameter Name="contractName" Type="System.String" />
          <Parameter Name="exportedValue" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="container">To be added.</param>
          <param name="contractName">To be added.</param>
          <param name="exportedValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.ComposeExportedValue``1(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
      </Targets>
      <Member MemberName="ComposeParts">
        <MemberSignature Language="C#" Value="public static void ComposeParts (this System.ComponentModel.Composition.Hosting.CompositionContainer container, object[] attributedParts);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ComposeParts(class System.ComponentModel.Composition.Hosting.CompositionContainer container, object[] attributedParts) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="container" Type="System.ComponentModel.Composition.Hosting.CompositionContainer" RefType="this" />
          <Parameter Name="attributedParts" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="container">To be added.</param>
          <param name="attributedParts">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.ComposeParts(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="Exports">
        <MemberSignature Language="C#" Value="public static bool Exports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, Type contractType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exports(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, class System.Type contractType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
          <Parameter Name="contractType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="part">To be added.</param>
          <param name="contractType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="Exports&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool Exports&lt;T&gt; (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exports&lt;T&gt;(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="part">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.Exports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="Imports">
        <MemberSignature Language="C#" Value="public static bool Imports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, Type contractType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Imports(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, class System.Type contractType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
          <Parameter Name="contractType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="part">To be added.</param>
          <param name="contractType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="Imports">
        <MemberSignature Language="C#" Value="public static bool Imports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, Type contractType, System.ComponentModel.Composition.Primitives.ImportCardinality importCardinality);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Imports(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, class System.Type contractType, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality importCardinality) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
          <Parameter Name="contractType" Type="System.Type" />
          <Parameter Name="importCardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        </Parameters>
        <Docs>
          <param name="part">To be added.</param>
          <param name="contractType">To be added.</param>
          <param name="importCardinality">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Type,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="Imports&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool Imports&lt;T&gt; (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Imports&lt;T&gt;(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="part">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="Imports&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool Imports&lt;T&gt; (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, System.ComponentModel.Composition.Primitives.ImportCardinality importCardinality);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Imports&lt;T&gt;(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality importCardinality) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
          <Parameter Name="importCardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="part">To be added.</param>
          <param name="importCardinality">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.Imports``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.ICompositionService" />
      </Targets>
      <Member MemberName="SatisfyImportsOnce">
        <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ComposablePart SatisfyImportsOnce (this System.ComponentModel.Composition.ICompositionService compositionService, object attributedPart);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ComposablePart SatisfyImportsOnce(class System.ComponentModel.Composition.ICompositionService compositionService, object attributedPart) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePart</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compositionService" Type="System.ComponentModel.Composition.ICompositionService" RefType="this" />
          <Parameter Name="attributedPart" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="compositionService">To be added.</param>
          <param name="attributedPart">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.ICompositionService" />
      </Targets>
      <Member MemberName="SatisfyImportsOnce">
        <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ComposablePart SatisfyImportsOnce (this System.ComponentModel.Composition.ICompositionService compositionService, object attributedPart, System.Reflection.ReflectionContext reflectionContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ComposablePart SatisfyImportsOnce(class System.ComponentModel.Composition.ICompositionService compositionService, object attributedPart, class System.Reflection.ReflectionContext reflectionContext) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePart</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="compositionService" Type="System.ComponentModel.Composition.ICompositionService" RefType="this" />
          <Parameter Name="attributedPart" Type="System.Object" />
          <Parameter Name="reflectionContext" Type="System.Reflection.ReflectionContext" />
        </Parameters>
        <Docs>
          <param name="compositionService">To be added.</param>
          <param name="attributedPart">To be added.</param>
          <param name="reflectionContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.AttributedModelServices" Member="M:System.ComponentModel.Composition.AttributedModelServices.SatisfyImportsOnce(System.ComponentModel.Composition.ICompositionService,System.Object,System.Reflection.ReflectionContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
      </Targets>
      <Member MemberName="CreateCompositionService">
        <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Hosting.CompositionService CreateCompositionService (this System.ComponentModel.Composition.Primitives.ComposablePartCatalog composablePartCatalog);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Hosting.CompositionService CreateCompositionService(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog composablePartCatalog) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ComponentModel.Composition.Hosting.CompositionService</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="composablePartCatalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" RefType="this" />
        </Parameters>
        <Docs>
          <param name="composablePartCatalog">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.Hosting.CatalogExtensions" Member="M:System.ComponentModel.Composition.Hosting.CatalogExtensions.CreateCompositionService(System.ComponentModel.Composition.Primitives.ComposablePartCatalog)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="ContainsPartMetadata&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool ContainsPartMetadata&lt;T&gt; (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string key, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ContainsPartMetadata&lt;T&gt;(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string key, !!T value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="part">To be added.</param>
          <param name="key">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.Hosting.ScopingExtensions" Member="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadata``1(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="ContainsPartMetadataWithKey">
        <MemberSignature Language="C#" Value="public static bool ContainsPartMetadataWithKey (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ContainsPartMetadataWithKey(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string key) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="part">To be added.</param>
          <param name="key">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.Hosting.ScopingExtensions" Member="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.ContainsPartMetadataWithKey(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="Exports">
        <MemberSignature Language="C#" Value="public static bool Exports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exports(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
          <Parameter Name="contractName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="part">To be added.</param>
          <param name="contractName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.Hosting.ScopingExtensions" Member="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Exports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
      </Targets>
      <Member MemberName="Filter">
        <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Hosting.FilteredCatalog Filter (this System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, Func&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition,bool&gt; filter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Hosting.FilteredCatalog Filter(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, class System.Func`2&lt;class System.ComponentModel.Composition.Primitives.ComposablePartDefinition, bool&gt; filter) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ComponentModel.Composition.Hosting.FilteredCatalog</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" RefType="this" />
          <Parameter Name="filter" Type="System.Func&lt;System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <param name="catalog">To be added.</param>
          <param name="filter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.Hosting.ScopingExtensions" Member="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Filter(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="Imports">
        <MemberSignature Language="C#" Value="public static bool Imports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Imports(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
          <Parameter Name="contractName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="part">To be added.</param>
          <param name="contractName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.Hosting.ScopingExtensions" Member="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Targets>
      <Member MemberName="Imports">
        <MemberSignature Language="C#" Value="public static bool Imports (this System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName, System.ComponentModel.Composition.Primitives.ImportCardinality importCardinality);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Imports(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition part, string contractName, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality importCardinality) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" RefType="this" />
          <Parameter Name="contractName" Type="System.String" />
          <Parameter Name="importCardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        </Parameters>
        <Docs>
          <param name="part">To be added.</param>
          <param name="contractName">To be added.</param>
          <param name="importCardinality">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.ComponentModel.Composition.Hosting.ScopingExtensions" Member="M:System.ComponentModel.Composition.Hosting.ScopingExtensions.Imports(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.String,System.ComponentModel.Composition.Primitives.ImportCardinality)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EdmFunction" />
      </Targets>
      <Member MemberName="Aggregate">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionAggregate Aggregate (this System.Data.Metadata.Edm.EdmFunction function, System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionAggregate Aggregate(class System.Data.Metadata.Edm.EdmFunction function, class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionAggregate</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="function" Type="System.Data.Metadata.Edm.EdmFunction" RefType="this" />
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="function">To be added.</param>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EdmFunction" />
      </Targets>
      <Member MemberName="AggregateDistinct">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionAggregate AggregateDistinct (this System.Data.Metadata.Edm.EdmFunction function, System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionAggregate AggregateDistinct(class System.Data.Metadata.Edm.EdmFunction function, class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionAggregate</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="function" Type="System.Data.Metadata.Edm.EdmFunction" RefType="this" />
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="function">To be added.</param>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="All">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbQuantifierExpression All (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbQuantifierExpression All(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbQuantifierExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="All">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbQuantifierExpression All (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpression predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbQuantifierExpression All(class System.Data.Common.CommandTrees.DbExpressionBinding input, class System.Data.Common.CommandTrees.DbExpression predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbQuantifierExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="predicate" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="And">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbAndExpression And (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbAndExpression And(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbAndExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Any">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbExpression Any (this System.Data.Common.CommandTrees.DbExpression source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbExpression Any(class System.Data.Common.CommandTrees.DbExpression source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Any">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbQuantifierExpression Any (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbQuantifierExpression Any(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbQuantifierExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="Any">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbQuantifierExpression Any (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpression predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbQuantifierExpression Any(class System.Data.Common.CommandTrees.DbExpressionBinding input, class System.Data.Common.CommandTrees.DbExpression predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbQuantifierExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="predicate" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbAggregate" />
      </Targets>
      <Member MemberName="As">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.KeyValuePair&lt;string,System.Data.Common.CommandTrees.DbAggregate&gt; As (this System.Data.Common.CommandTrees.DbAggregate value, string alias);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Common.CommandTrees.DbAggregate&gt; As(class System.Data.Common.CommandTrees.DbAggregate value, string alias) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Common.CommandTrees.DbAggregate&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbAggregate" RefType="this" />
          <Parameter Name="alias" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <param name="alias">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbAggregate,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="As">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.KeyValuePair&lt;string,System.Data.Common.CommandTrees.DbExpression&gt; As (this System.Data.Common.CommandTrees.DbExpression value, string alias);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Common.CommandTrees.DbExpression&gt; As(class System.Data.Common.CommandTrees.DbExpression value, string alias) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Common.CommandTrees.DbExpression&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="alias" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <param name="alias">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Common.CommandTrees.DbExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Bind">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbExpressionBinding Bind (this System.Data.Common.CommandTrees.DbExpression input);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbExpressionBinding Bind(class System.Data.Common.CommandTrees.DbExpression input) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbExpressionBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="BindAs">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbExpressionBinding BindAs (this System.Data.Common.CommandTrees.DbExpression input, string varName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbExpressionBinding BindAs(class System.Data.Common.CommandTrees.DbExpression input, string varName) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbExpressionBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="varName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="varName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Common.CommandTrees.DbExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="CastTo">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbCastExpression CastTo (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage toType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbCastExpression CastTo(class System.Data.Common.CommandTrees.DbExpression argument, class System.Data.Metadata.Edm.TypeUsage toType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbCastExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="toType" Type="System.Data.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="toType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="Constant">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbConstantExpression Constant (this System.Data.Metadata.Edm.TypeUsage constantType, object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbConstantExpression Constant(class System.Data.Metadata.Edm.TypeUsage constantType, object value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbConstantExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="constantType" Type="System.Data.Metadata.Edm.TypeUsage" RefType="this" />
          <Parameter Name="value" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="constantType">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Metadata.Edm.TypeUsage,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="CreateRef">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Metadata.Edm.EntitySet entitySet, System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbExpression&gt; keyValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Metadata.Edm.EntitySet entitySet, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Common.CommandTrees.DbExpression&gt; keyValues) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="keyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="entitySet">To be added.</param>
          <param name="keyValues">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="CreateRef">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Metadata.Edm.EntitySet entitySet, System.Data.Common.CommandTrees.DbExpression[] keyValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Metadata.Edm.EntitySet entitySet, class System.Data.Common.CommandTrees.DbExpression[] keyValues) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="keyValues" Type="System.Data.Common.CommandTrees.DbExpression[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="entitySet">To be added.</param>
          <param name="keyValues">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Common.CommandTrees.DbExpression[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="CreateRef">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Metadata.Edm.EntitySet entitySet, System.Data.Metadata.Edm.EntityType entityType, System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbExpression&gt; keyValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Metadata.Edm.EntitySet entitySet, class System.Data.Metadata.Edm.EntityType entityType, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Common.CommandTrees.DbExpression&gt; keyValues) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="entityType" Type="System.Data.Metadata.Edm.EntityType" />
          <Parameter Name="keyValues" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="entitySet">To be added.</param>
          <param name="entityType">To be added.</param>
          <param name="keyValues">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="CreateRef">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbRefExpression CreateRef (this System.Data.Metadata.Edm.EntitySet entitySet, System.Data.Metadata.Edm.EntityType entityType, System.Data.Common.CommandTrees.DbExpression[] keyValues);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbRefExpression CreateRef(class System.Data.Metadata.Edm.EntitySet entitySet, class System.Data.Metadata.Edm.EntityType entityType, class System.Data.Common.CommandTrees.DbExpression[] keyValues) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="entityType" Type="System.Data.Metadata.Edm.EntityType" />
          <Parameter Name="keyValues" Type="System.Data.Common.CommandTrees.DbExpression[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="entitySet">To be added.</param>
          <param name="entityType">To be added.</param>
          <param name="keyValues">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Metadata.Edm.EntitySet,System.Data.Metadata.Edm.EntityType,System.Data.Common.CommandTrees.DbExpression[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="CrossApply">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbApplyExpression CrossApply (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;string,System.Data.Common.CommandTrees.DbExpression&gt;&gt; apply);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbApplyExpression CrossApply(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Common.CommandTrees.DbExpression&gt;&gt; apply) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbApplyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="apply" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Common.CommandTrees.DbExpression&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="apply">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="CrossApply">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbApplyExpression CrossApply (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpressionBinding apply);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbApplyExpression CrossApply(class System.Data.Common.CommandTrees.DbExpressionBinding input, class System.Data.Common.CommandTrees.DbExpressionBinding apply) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbApplyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="apply" Type="System.Data.Common.CommandTrees.DbExpressionBinding" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="apply">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Deref">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbDerefExpression Deref (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbDerefExpression Deref(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbDerefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Distinct">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbDistinctExpression Distinct (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbDistinctExpression Distinct(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbDistinctExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Divide">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbArithmeticExpression Divide (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbArithmeticExpression Divide(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Element">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbElementExpression Element (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbElementExpression Element(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbElementExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Equal">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbComparisonExpression Equal (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbComparisonExpression Equal(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Except">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbExceptExpression Except (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbExceptExpression Except(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbExceptExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Exists">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbExpression Exists (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbExpression Exists(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="Filter">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFilterExpression Filter (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpression predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFilterExpression Filter(class System.Data.Common.CommandTrees.DbExpressionBinding input, class System.Data.Common.CommandTrees.DbExpression predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFilterExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="predicate" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="FullOuterJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbJoinExpression FullOuterJoin (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbJoinExpression FullOuterJoin(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right, class System.Func`3&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; joinCondition) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
          <Parameter Name="joinCondition" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <param name="joinCondition">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="FullOuterJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbJoinExpression FullOuterJoin (this System.Data.Common.CommandTrees.DbExpressionBinding left, System.Data.Common.CommandTrees.DbExpressionBinding right, System.Data.Common.CommandTrees.DbExpression joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbJoinExpression FullOuterJoin(class System.Data.Common.CommandTrees.DbExpressionBinding left, class System.Data.Common.CommandTrees.DbExpressionBinding right, class System.Data.Common.CommandTrees.DbExpression joinCondition) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpressionBinding" />
          <Parameter Name="joinCondition" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <param name="joinCondition">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GetEntityRef">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbEntityRefExpression GetEntityRef (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbEntityRefExpression GetEntityRef(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbEntityRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GetRefKey">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbRefKeyExpression GetRefKey (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbRefKeyExpression GetRefKey(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbRefKeyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GreaterThan">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbComparisonExpression GreaterThan (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbComparisonExpression GreaterThan(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GreaterThanOrEqual">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbComparisonExpression GreaterThanOrEqual (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbComparisonExpression GreaterThanOrEqual(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GroupBind">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbGroupExpressionBinding GroupBind (this System.Data.Common.CommandTrees.DbExpression input);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbGroupExpressionBinding GroupBind(class System.Data.Common.CommandTrees.DbExpression input) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbGroupExpressionBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GroupBindAs">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbGroupExpressionBinding GroupBindAs (this System.Data.Common.CommandTrees.DbExpression input, string varName, string groupVarName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbGroupExpressionBinding GroupBindAs(class System.Data.Common.CommandTrees.DbExpression input, string varName, string groupVarName) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbGroupExpressionBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="varName" Type="System.String" />
          <Parameter Name="groupVarName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="varName">To be added.</param>
          <param name="groupVarName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Common.CommandTrees.DbExpression,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />
      </Targets>
      <Member MemberName="GroupBy">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbGroupByExpression GroupBy (this System.Data.Common.CommandTrees.DbGroupExpressionBinding input, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Data.Common.CommandTrees.DbExpression&gt;&gt; keys, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,System.Data.Common.CommandTrees.DbAggregate&gt;&gt; aggregates);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbGroupByExpression GroupBy(class System.Data.Common.CommandTrees.DbGroupExpressionBinding input, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Common.CommandTrees.DbExpression&gt;&gt; keys, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Common.CommandTrees.DbAggregate&gt;&gt; aggregates) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbGroupByExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbGroupExpressionBinding" RefType="this" />
          <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Common.CommandTrees.DbExpression&gt;&gt;" />
          <Parameter Name="aggregates" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Common.CommandTrees.DbAggregate&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="keys">To be added.</param>
          <param name="aggregates">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbAggregate}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="InnerJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbJoinExpression InnerJoin (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbJoinExpression InnerJoin(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right, class System.Func`3&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; joinCondition) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
          <Parameter Name="joinCondition" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <param name="joinCondition">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="InnerJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbJoinExpression InnerJoin (this System.Data.Common.CommandTrees.DbExpressionBinding left, System.Data.Common.CommandTrees.DbExpressionBinding right, System.Data.Common.CommandTrees.DbExpression joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbJoinExpression InnerJoin(class System.Data.Common.CommandTrees.DbExpressionBinding left, class System.Data.Common.CommandTrees.DbExpressionBinding right, class System.Data.Common.CommandTrees.DbExpression joinCondition) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpressionBinding" />
          <Parameter Name="joinCondition" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <param name="joinCondition">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Intersect">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbIntersectExpression Intersect (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbIntersectExpression Intersect(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbIntersectExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbLambda" />
      </Targets>
      <Member MemberName="Invoke">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbLambdaExpression Invoke (this System.Data.Common.CommandTrees.DbLambda lambda, System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbExpression&gt; arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbLambdaExpression Invoke(class System.Data.Common.CommandTrees.DbLambda lambda, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Common.CommandTrees.DbExpression&gt; arguments) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbLambdaExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="lambda" Type="System.Data.Common.CommandTrees.DbLambda" RefType="this" />
          <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="lambda">To be added.</param>
          <param name="arguments">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbLambda" />
      </Targets>
      <Member MemberName="Invoke">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbLambdaExpression Invoke (this System.Data.Common.CommandTrees.DbLambda lambda, System.Data.Common.CommandTrees.DbExpression[] arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbLambdaExpression Invoke(class System.Data.Common.CommandTrees.DbLambda lambda, class System.Data.Common.CommandTrees.DbExpression[] arguments) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbLambdaExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="lambda" Type="System.Data.Common.CommandTrees.DbLambda" RefType="this" />
          <Parameter Name="arguments" Type="System.Data.Common.CommandTrees.DbExpression[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="lambda">To be added.</param>
          <param name="arguments">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Common.CommandTrees.DbLambda,System.Data.Common.CommandTrees.DbExpression[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EdmFunction" />
      </Targets>
      <Member MemberName="Invoke">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Invoke (this System.Data.Metadata.Edm.EdmFunction function, System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbExpression&gt; arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Invoke(class System.Data.Metadata.Edm.EdmFunction function, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Common.CommandTrees.DbExpression&gt; arguments) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="function" Type="System.Data.Metadata.Edm.EdmFunction" RefType="this" />
          <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="function">To be added.</param>
          <param name="arguments">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EdmFunction" />
      </Targets>
      <Member MemberName="Invoke">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Invoke (this System.Data.Metadata.Edm.EdmFunction function, System.Data.Common.CommandTrees.DbExpression[] arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Invoke(class System.Data.Metadata.Edm.EdmFunction function, class System.Data.Common.CommandTrees.DbExpression[] arguments) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="function" Type="System.Data.Metadata.Edm.EdmFunction" RefType="this" />
          <Parameter Name="arguments" Type="System.Data.Common.CommandTrees.DbExpression[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="function">To be added.</param>
          <param name="arguments">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Metadata.Edm.EdmFunction,System.Data.Common.CommandTrees.DbExpression[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsEmpty">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbIsEmptyExpression IsEmpty (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbIsEmptyExpression IsEmpty(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbIsEmptyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsNull">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbIsNullExpression IsNull (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbIsNullExpression IsNull(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbIsNullExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsOf">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbIsOfExpression IsOf (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbIsOfExpression IsOf(class System.Data.Common.CommandTrees.DbExpression argument, class System.Data.Metadata.Edm.TypeUsage type) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbIsOfExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="type" Type="System.Data.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="type">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsOfOnly">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbIsOfExpression IsOfOnly (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbIsOfExpression IsOfOnly(class System.Data.Common.CommandTrees.DbExpression argument, class System.Data.Metadata.Edm.TypeUsage type) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbIsOfExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="type" Type="System.Data.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="type">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Join">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbJoinExpression Join (this System.Data.Common.CommandTrees.DbExpression outer, System.Data.Common.CommandTrees.DbExpression inner, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; outerKey, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; innerKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbJoinExpression Join(class System.Data.Common.CommandTrees.DbExpression outer, class System.Data.Common.CommandTrees.DbExpression inner, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; outerKey, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; innerKey) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="outer" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="inner" Type="System.Data.Common.CommandTrees.DbExpression" />
          <Parameter Name="outerKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="innerKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKey">To be added.</param>
          <param name="innerKey">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Join&lt;TSelector&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbProjectExpression Join&lt;TSelector&gt; (this System.Data.Common.CommandTrees.DbExpression outer, System.Data.Common.CommandTrees.DbExpression inner, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; outerKey, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; innerKey, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbProjectExpression Join&lt;TSelector&gt;(class System.Data.Common.CommandTrees.DbExpression outer, class System.Data.Common.CommandTrees.DbExpression inner, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; outerKey, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; innerKey, class System.Func`3&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression, !!TSelector&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbProjectExpression</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSelector" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="inner" Type="System.Data.Common.CommandTrees.DbExpression" />
          <Parameter Name="outerKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="innerKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="selector" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSelector">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKey">To be added.</param>
          <param name="innerKey">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="LeftOuterJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbJoinExpression LeftOuterJoin (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbJoinExpression LeftOuterJoin(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right, class System.Func`3&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; joinCondition) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
          <Parameter Name="joinCondition" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <param name="joinCondition">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="LeftOuterJoin">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbJoinExpression LeftOuterJoin (this System.Data.Common.CommandTrees.DbExpressionBinding left, System.Data.Common.CommandTrees.DbExpressionBinding right, System.Data.Common.CommandTrees.DbExpression joinCondition);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbJoinExpression LeftOuterJoin(class System.Data.Common.CommandTrees.DbExpressionBinding left, class System.Data.Common.CommandTrees.DbExpressionBinding right, class System.Data.Common.CommandTrees.DbExpression joinCondition) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbJoinExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpressionBinding" />
          <Parameter Name="joinCondition" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <param name="joinCondition">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="LessThan">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbComparisonExpression LessThan (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbComparisonExpression LessThan(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="LessThanOrEqual">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbComparisonExpression LessThanOrEqual (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbComparisonExpression LessThanOrEqual(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Like">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbLikeExpression Like (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Common.CommandTrees.DbExpression pattern);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbLikeExpression Like(class System.Data.Common.CommandTrees.DbExpression argument, class System.Data.Common.CommandTrees.DbExpression pattern) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbLikeExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="pattern" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="pattern">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Like">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbLikeExpression Like (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Common.CommandTrees.DbExpression pattern, System.Data.Common.CommandTrees.DbExpression escape);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbLikeExpression Like(class System.Data.Common.CommandTrees.DbExpression argument, class System.Data.Common.CommandTrees.DbExpression pattern, class System.Data.Common.CommandTrees.DbExpression escape) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbLikeExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="pattern" Type="System.Data.Common.CommandTrees.DbExpression" />
          <Parameter Name="escape" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="pattern">To be added.</param>
          <param name="escape">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Limit">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbLimitExpression Limit (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Common.CommandTrees.DbExpression count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbLimitExpression Limit(class System.Data.Common.CommandTrees.DbExpression argument, class System.Data.Common.CommandTrees.DbExpression count) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbLimitExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="count" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Minus">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbArithmeticExpression Minus (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbArithmeticExpression Minus(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Modulo">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbArithmeticExpression Modulo (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbArithmeticExpression Modulo(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Multiply">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbArithmeticExpression Multiply (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbArithmeticExpression Multiply(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Navigate">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbRelationshipNavigationExpression Navigate (this System.Data.Common.CommandTrees.DbExpression navigateFrom, System.Data.Metadata.Edm.RelationshipEndMember fromEnd, System.Data.Metadata.Edm.RelationshipEndMember toEnd);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbRelationshipNavigationExpression Navigate(class System.Data.Common.CommandTrees.DbExpression navigateFrom, class System.Data.Metadata.Edm.RelationshipEndMember fromEnd, class System.Data.Metadata.Edm.RelationshipEndMember toEnd) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbRelationshipNavigationExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="navigateFrom" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="fromEnd" Type="System.Data.Metadata.Edm.RelationshipEndMember" />
          <Parameter Name="toEnd" Type="System.Data.Metadata.Edm.RelationshipEndMember" />
        </Parameters>
        <Docs>
          <param name="navigateFrom">To be added.</param>
          <param name="fromEnd">To be added.</param>
          <param name="toEnd">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.RelationshipEndMember,System.Data.Metadata.Edm.RelationshipEndMember)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.RelationshipType" />
      </Targets>
      <Member MemberName="Navigate">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbRelationshipNavigationExpression Navigate (this System.Data.Metadata.Edm.RelationshipType type, string fromEndName, string toEndName, System.Data.Common.CommandTrees.DbExpression navigateFrom);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbRelationshipNavigationExpression Navigate(class System.Data.Metadata.Edm.RelationshipType type, string fromEndName, string toEndName, class System.Data.Common.CommandTrees.DbExpression navigateFrom) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbRelationshipNavigationExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Data.Metadata.Edm.RelationshipType" RefType="this" />
          <Parameter Name="fromEndName" Type="System.String" />
          <Parameter Name="toEndName" Type="System.String" />
          <Parameter Name="navigateFrom" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <param name="fromEndName">To be added.</param>
          <param name="toEndName">To be added.</param>
          <param name="navigateFrom">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Negate">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbArithmeticExpression Negate (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbArithmeticExpression Negate(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="New">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbNewInstanceExpression New (this System.Data.Metadata.Edm.TypeUsage instanceType, System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbExpression&gt; arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbNewInstanceExpression New(class System.Data.Metadata.Edm.TypeUsage instanceType, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Common.CommandTrees.DbExpression&gt; arguments) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instanceType" Type="System.Data.Metadata.Edm.TypeUsage" RefType="this" />
          <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="instanceType">To be added.</param>
          <param name="arguments">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="New">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbNewInstanceExpression New (this System.Data.Metadata.Edm.TypeUsage instanceType, System.Data.Common.CommandTrees.DbExpression[] arguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbNewInstanceExpression New(class System.Data.Metadata.Edm.TypeUsage instanceType, class System.Data.Common.CommandTrees.DbExpression[] arguments) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instanceType" Type="System.Data.Metadata.Edm.TypeUsage" RefType="this" />
          <Parameter Name="arguments" Type="System.Data.Common.CommandTrees.DbExpression[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="instanceType">To be added.</param>
          <param name="arguments">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Metadata.Edm.TypeUsage,System.Data.Common.CommandTrees.DbExpression[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="NewEmptyCollection">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbNewInstanceExpression NewEmptyCollection (this System.Data.Metadata.Edm.TypeUsage collectionType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbNewInstanceExpression NewEmptyCollection(class System.Data.Metadata.Edm.TypeUsage collectionType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbNewInstanceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collectionType" Type="System.Data.Metadata.Edm.TypeUsage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collectionType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Not">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbNotExpression Not (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbNotExpression Not(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbNotExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="NotEqual">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbComparisonExpression NotEqual (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbComparisonExpression NotEqual(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbComparisonExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="Null">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbNullExpression Null (this System.Data.Metadata.Edm.TypeUsage nullType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbNullExpression Null(class System.Data.Metadata.Edm.TypeUsage nullType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbNullExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="nullType" Type="System.Data.Metadata.Edm.TypeUsage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="nullType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OfType">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbOfTypeExpression OfType (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbOfTypeExpression OfType(class System.Data.Common.CommandTrees.DbExpression argument, class System.Data.Metadata.Edm.TypeUsage type) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbOfTypeExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="type" Type="System.Data.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="type">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OfTypeOnly">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbOfTypeExpression OfTypeOnly (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbOfTypeExpression OfTypeOnly(class System.Data.Common.CommandTrees.DbExpression argument, class System.Data.Metadata.Edm.TypeUsage type) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbOfTypeExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="type" Type="System.Data.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="type">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Or">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbOrExpression Or (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbOrExpression Or(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbOrExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OrderBy">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortExpression OrderBy (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; sortKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortExpression OrderBy(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="sortKey">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OrderBy">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortExpression OrderBy (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortExpression OrderBy(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="sortKey">To be added.</param>
          <param name="collation">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OrderByDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortExpression OrderByDescending (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; sortKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortExpression OrderByDescending(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="sortKey">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OrderByDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortExpression OrderByDescending (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortExpression OrderByDescending(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="sortKey">To be added.</param>
          <param name="collation">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="OuterApply">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbApplyExpression OuterApply (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;string,System.Data.Common.CommandTrees.DbExpression&gt;&gt; apply);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbApplyExpression OuterApply(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Data.Common.CommandTrees.DbExpression&gt;&gt; apply) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbApplyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="apply" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair&lt;System.String,System.Data.Common.CommandTrees.DbExpression&gt;&gt;" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="apply">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Common.CommandTrees.DbExpression}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="OuterApply">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbApplyExpression OuterApply (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpressionBinding apply);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbApplyExpression OuterApply(class System.Data.Common.CommandTrees.DbExpressionBinding input, class System.Data.Common.CommandTrees.DbExpressionBinding apply) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbApplyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="apply" Type="System.Data.Common.CommandTrees.DbExpressionBinding" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="apply">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpressionBinding)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="Parameter">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbParameterReferenceExpression Parameter (this System.Data.Metadata.Edm.TypeUsage type, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbParameterReferenceExpression Parameter(class System.Data.Metadata.Edm.TypeUsage type, string name) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbParameterReferenceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Data.Metadata.Edm.TypeUsage" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <param name="name">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Metadata.Edm.TypeUsage,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Plus">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbArithmeticExpression Plus (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbArithmeticExpression Plus(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="Project">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbProjectExpression Project (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Data.Common.CommandTrees.DbExpression projection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbProjectExpression Project(class System.Data.Common.CommandTrees.DbExpressionBinding input, class System.Data.Common.CommandTrees.DbExpression projection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbProjectExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="projection" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="projection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Common.CommandTrees.DbExpressionBinding,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Property">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Common.CommandTrees.DbExpression instance, System.Data.Metadata.Edm.EdmProperty propertyMetadata);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Common.CommandTrees.DbExpression instance, class System.Data.Metadata.Edm.EdmProperty propertyMetadata) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbPropertyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instance" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="propertyMetadata" Type="System.Data.Metadata.Edm.EdmProperty" />
        </Parameters>
        <Docs>
          <param name="instance">To be added.</param>
          <param name="propertyMetadata">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.EdmProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Property">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Common.CommandTrees.DbExpression instance, System.Data.Metadata.Edm.NavigationProperty navigationProperty);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Common.CommandTrees.DbExpression instance, class System.Data.Metadata.Edm.NavigationProperty navigationProperty) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbPropertyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instance" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="navigationProperty" Type="System.Data.Metadata.Edm.NavigationProperty" />
        </Parameters>
        <Docs>
          <param name="instance">To be added.</param>
          <param name="navigationProperty">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.NavigationProperty)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Property">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Common.CommandTrees.DbExpression instance, System.Data.Metadata.Edm.RelationshipEndMember relationshipEnd);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Common.CommandTrees.DbExpression instance, class System.Data.Metadata.Edm.RelationshipEndMember relationshipEnd) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbPropertyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instance" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="relationshipEnd" Type="System.Data.Metadata.Edm.RelationshipEndMember" />
        </Parameters>
        <Docs>
          <param name="instance">To be added.</param>
          <param name="relationshipEnd">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.RelationshipEndMember)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Property">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbPropertyExpression Property (this System.Data.Common.CommandTrees.DbExpression instance, string propertyName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbPropertyExpression Property(class System.Data.Common.CommandTrees.DbExpression instance, string propertyName) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbPropertyExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="instance" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="propertyName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="instance">To be added.</param>
          <param name="propertyName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Common.CommandTrees.DbExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="RefFromKey">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbRefExpression RefFromKey (this System.Data.Metadata.Edm.EntitySet entitySet, System.Data.Common.CommandTrees.DbExpression keyRow);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbRefExpression RefFromKey(class System.Data.Metadata.Edm.EntitySet entitySet, class System.Data.Common.CommandTrees.DbExpression keyRow) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="keyRow" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="entitySet">To be added.</param>
          <param name="keyRow">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EntitySet" />
      </Targets>
      <Member MemberName="RefFromKey">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbRefExpression RefFromKey (this System.Data.Metadata.Edm.EntitySet entitySet, System.Data.Common.CommandTrees.DbExpression keyRow, System.Data.Metadata.Edm.EntityType entityType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbRefExpression RefFromKey(class System.Data.Metadata.Edm.EntitySet entitySet, class System.Data.Common.CommandTrees.DbExpression keyRow, class System.Data.Metadata.Edm.EntityType entityType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbRefExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="entitySet" Type="System.Data.Metadata.Edm.EntitySet" RefType="this" />
          <Parameter Name="keyRow" Type="System.Data.Common.CommandTrees.DbExpression" />
          <Parameter Name="entityType" Type="System.Data.Metadata.Edm.EntityType" />
        </Parameters>
        <Docs>
          <param name="entitySet">To be added.</param>
          <param name="keyRow">To be added.</param>
          <param name="entityType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Metadata.Edm.EntitySet,System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.EntityType)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EntitySetBase" />
      </Targets>
      <Member MemberName="Scan">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbScanExpression Scan (this System.Data.Metadata.Edm.EntitySetBase targetSet);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbScanExpression Scan(class System.Data.Metadata.Edm.EntitySetBase targetSet) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbScanExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="targetSet" Type="System.Data.Metadata.Edm.EntitySetBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="targetSet">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Metadata.Edm.EntitySetBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Select&lt;TProjection&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbProjectExpression Select&lt;TProjection&gt; (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,TProjection&gt; projection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbProjectExpression Select&lt;TProjection&gt;(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, !!TProjection&gt; projection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbProjectExpression</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TProjection" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="projection" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,TProjection&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TProjection">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="projection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SelectMany">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbProjectExpression SelectMany (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; apply);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbProjectExpression SelectMany(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; apply) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbProjectExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="apply" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="apply">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSelector&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbProjectExpression SelectMany&lt;TSelector&gt; (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; apply, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbProjectExpression SelectMany&lt;TSelector&gt;(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; apply, class System.Func`3&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression, !!TSelector&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbProjectExpression</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSelector" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="apply" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="selector" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,TSelector&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSelector">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="apply">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="Skip">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSkipExpression Skip (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbSortClause&gt; sortOrder, System.Data.Common.CommandTrees.DbExpression count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSkipExpression Skip(class System.Data.Common.CommandTrees.DbExpressionBinding input, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Common.CommandTrees.DbSortClause&gt; sortOrder, class System.Data.Common.CommandTrees.DbExpression count) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSkipExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="sortOrder" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbSortClause&gt;" />
          <Parameter Name="count" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="sortOrder">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause},System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbSortExpression" />
      </Targets>
      <Member MemberName="Skip">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSkipExpression Skip (this System.Data.Common.CommandTrees.DbSortExpression argument, System.Data.Common.CommandTrees.DbExpression count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSkipExpression Skip(class System.Data.Common.CommandTrees.DbSortExpression argument, class System.Data.Common.CommandTrees.DbExpression count) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSkipExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbSortExpression" RefType="this" />
          <Parameter Name="count" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Common.CommandTrees.DbSortExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpressionBinding" />
      </Targets>
      <Member MemberName="Sort">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortExpression Sort (this System.Data.Common.CommandTrees.DbExpressionBinding input, System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbSortClause&gt; sortOrder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortExpression Sort(class System.Data.Common.CommandTrees.DbExpressionBinding input, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Common.CommandTrees.DbSortClause&gt; sortOrder) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="input" Type="System.Data.Common.CommandTrees.DbExpressionBinding" RefType="this" />
          <Parameter Name="sortOrder" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Common.CommandTrees.DbSortClause&gt;" />
        </Parameters>
        <Docs>
          <param name="input">To be added.</param>
          <param name="sortOrder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Common.CommandTrees.DbSortClause})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Take">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbLimitExpression Take (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Common.CommandTrees.DbExpression count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbLimitExpression Take(class System.Data.Common.CommandTrees.DbExpression argument, class System.Data.Common.CommandTrees.DbExpression count) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbLimitExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="count" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbSortExpression" />
      </Targets>
      <Member MemberName="ThenBy">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortExpression ThenBy (this System.Data.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; sortKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortExpression ThenBy(class System.Data.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbSortExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="sortKey">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbSortExpression" />
      </Targets>
      <Member MemberName="ThenBy">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortExpression ThenBy (this System.Data.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortExpression ThenBy(class System.Data.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbSortExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="sortKey">To be added.</param>
          <param name="collation">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbSortExpression" />
      </Targets>
      <Member MemberName="ThenByDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortExpression ThenByDescending (this System.Data.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; sortKey);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortExpression ThenByDescending(class System.Data.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; sortKey) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbSortExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="sortKey">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbSortExpression" />
      </Targets>
      <Member MemberName="ThenByDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortExpression ThenByDescending (this System.Data.Common.CommandTrees.DbSortExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; sortKey, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortExpression ThenByDescending(class System.Data.Common.CommandTrees.DbSortExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; sortKey, string collation) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbSortExpression" RefType="this" />
          <Parameter Name="sortKey" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="sortKey">To be added.</param>
          <param name="collation">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToSortClause">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortClause ToSortClause (this System.Data.Common.CommandTrees.DbExpression key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortClause ToSortClause(class System.Data.Common.CommandTrees.DbExpression key) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortClause</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToSortClause">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortClause ToSortClause (this System.Data.Common.CommandTrees.DbExpression key, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortClause ToSortClause(class System.Data.Common.CommandTrees.DbExpression key, string collation) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortClause</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="key">To be added.</param>
          <param name="collation">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Common.CommandTrees.DbExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToSortClauseDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortClause ToSortClauseDescending (this System.Data.Common.CommandTrees.DbExpression key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortClause ToSortClauseDescending(class System.Data.Common.CommandTrees.DbExpression key) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortClause</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="key">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToSortClauseDescending">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbSortClause ToSortClauseDescending (this System.Data.Common.CommandTrees.DbExpression key, string collation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbSortClause ToSortClauseDescending(class System.Data.Common.CommandTrees.DbExpression key, string collation) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbSortClause</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="key" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="collation" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="key">To be added.</param>
          <param name="collation">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Common.CommandTrees.DbExpression,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="TreatAs">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbTreatExpression TreatAs (this System.Data.Common.CommandTrees.DbExpression argument, System.Data.Metadata.Edm.TypeUsage treatType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbTreatExpression TreatAs(class System.Data.Common.CommandTrees.DbExpression argument, class System.Data.Metadata.Edm.TypeUsage treatType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbTreatExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="treatType" Type="System.Data.Metadata.Edm.TypeUsage" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <param name="treatType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Common.CommandTrees.DbExpression,System.Data.Metadata.Edm.TypeUsage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="UnaryMinus">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbArithmeticExpression UnaryMinus (this System.Data.Common.CommandTrees.DbExpression argument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbArithmeticExpression UnaryMinus(class System.Data.Common.CommandTrees.DbExpression argument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbArithmeticExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="argument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="argument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Union">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbExpression Union (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbExpression Union(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="UnionAll">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbUnionAllExpression UnionAll (this System.Data.Common.CommandTrees.DbExpression left, System.Data.Common.CommandTrees.DbExpression right);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbUnionAllExpression UnionAll(class System.Data.Common.CommandTrees.DbExpression left, class System.Data.Common.CommandTrees.DbExpression right) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbUnionAllExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="left" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="right" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="left">To be added.</param>
          <param name="right">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.TypeUsage" />
      </Targets>
      <Member MemberName="Variable">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbVariableReferenceExpression Variable (this System.Data.Metadata.Edm.TypeUsage type, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbVariableReferenceExpression Variable(class System.Data.Metadata.Edm.TypeUsage type, string name) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbVariableReferenceExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Data.Metadata.Edm.TypeUsage" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <param name="name">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Metadata.Edm.TypeUsage,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Where">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFilterExpression Where (this System.Data.Common.CommandTrees.DbExpression source, Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFilterExpression Where(class System.Data.Common.CommandTrees.DbExpression source, class System.Func`2&lt;class System.Data.Common.CommandTrees.DbExpression, class System.Data.Common.CommandTrees.DbExpression&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFilterExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression&gt;" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Common.CommandTrees.DbExpression,System.Func{System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Abs">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Abs (this System.Data.Common.CommandTrees.DbExpression value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Abs(class System.Data.Common.CommandTrees.DbExpression value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddDays">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddDays (this System.Data.Common.CommandTrees.DbExpression dateValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddDays(class System.Data.Common.CommandTrees.DbExpression dateValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue">To be added.</param>
          <param name="addValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddHours">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddHours (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddHours(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">To be added.</param>
          <param name="addValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddMicroseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddMicroseconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddMicroseconds(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">To be added.</param>
          <param name="addValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddMilliseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddMilliseconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddMilliseconds(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">To be added.</param>
          <param name="addValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddMinutes">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddMinutes (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddMinutes(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">To be added.</param>
          <param name="addValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddMonths">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddMonths (this System.Data.Common.CommandTrees.DbExpression dateValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddMonths(class System.Data.Common.CommandTrees.DbExpression dateValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue">To be added.</param>
          <param name="addValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddNanoseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddNanoseconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddNanoseconds(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">To be added.</param>
          <param name="addValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddSeconds">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddSeconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddSeconds(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue">To be added.</param>
          <param name="addValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AddYears">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddYears (this System.Data.Common.CommandTrees.DbExpression dateValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddYears(class System.Data.Common.CommandTrees.DbExpression dateValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue">To be added.</param>
          <param name="addValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Average (this System.Data.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Average(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="BitwiseAnd">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseAnd (this System.Data.Common.CommandTrees.DbExpression value1, System.Data.Common.CommandTrees.DbExpression value2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression BitwiseAnd(class System.Data.Common.CommandTrees.DbExpression value1, class System.Data.Common.CommandTrees.DbExpression value2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="value2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="value1">To be added.</param>
          <param name="value2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="BitwiseNot">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseNot (this System.Data.Common.CommandTrees.DbExpression value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression BitwiseNot(class System.Data.Common.CommandTrees.DbExpression value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="BitwiseOr">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseOr (this System.Data.Common.CommandTrees.DbExpression value1, System.Data.Common.CommandTrees.DbExpression value2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression BitwiseOr(class System.Data.Common.CommandTrees.DbExpression value1, class System.Data.Common.CommandTrees.DbExpression value2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="value2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="value1">To be added.</param>
          <param name="value2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="BitwiseXor">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseXor (this System.Data.Common.CommandTrees.DbExpression value1, System.Data.Common.CommandTrees.DbExpression value2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression BitwiseXor(class System.Data.Common.CommandTrees.DbExpression value1, class System.Data.Common.CommandTrees.DbExpression value2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="value2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="value1">To be added.</param>
          <param name="value2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Ceiling">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Ceiling (this System.Data.Common.CommandTrees.DbExpression value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Ceiling(class System.Data.Common.CommandTrees.DbExpression value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Concat">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Concat (this System.Data.Common.CommandTrees.DbExpression string1, System.Data.Common.CommandTrees.DbExpression string2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Concat(class System.Data.Common.CommandTrees.DbExpression string1, class System.Data.Common.CommandTrees.DbExpression string2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="string1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="string2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="string1">To be added.</param>
          <param name="string2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Contains">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbExpression Contains (this System.Data.Common.CommandTrees.DbExpression searchedString, System.Data.Common.CommandTrees.DbExpression searchedForString);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbExpression Contains(class System.Data.Common.CommandTrees.DbExpression searchedString, class System.Data.Common.CommandTrees.DbExpression searchedForString) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="searchedString" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="searchedForString" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="searchedString">To be added.</param>
          <param name="searchedForString">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Count">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Count (this System.Data.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Count(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Day">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Day (this System.Data.Common.CommandTrees.DbExpression dateValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Day(class System.Data.Common.CommandTrees.DbExpression dateValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DayOfYear">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DayOfYear (this System.Data.Common.CommandTrees.DbExpression dateValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DayOfYear(class System.Data.Common.CommandTrees.DbExpression dateValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffDays">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffDays (this System.Data.Common.CommandTrees.DbExpression dateValue1, System.Data.Common.CommandTrees.DbExpression dateValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffDays(class System.Data.Common.CommandTrees.DbExpression dateValue1, class System.Data.Common.CommandTrees.DbExpression dateValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="dateValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue1">To be added.</param>
          <param name="dateValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffHours">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffHours (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffHours(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">To be added.</param>
          <param name="timeValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffMicroseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMicroseconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffMicroseconds(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">To be added.</param>
          <param name="timeValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffMilliseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMilliseconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffMilliseconds(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">To be added.</param>
          <param name="timeValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffMinutes">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMinutes (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffMinutes(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">To be added.</param>
          <param name="timeValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffMonths">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMonths (this System.Data.Common.CommandTrees.DbExpression dateValue1, System.Data.Common.CommandTrees.DbExpression dateValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffMonths(class System.Data.Common.CommandTrees.DbExpression dateValue1, class System.Data.Common.CommandTrees.DbExpression dateValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="dateValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue1">To be added.</param>
          <param name="dateValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffNanoseconds">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffNanoseconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffNanoseconds(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">To be added.</param>
          <param name="timeValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffSeconds">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffSeconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffSeconds(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="timeValue1">To be added.</param>
          <param name="timeValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="DiffYears">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffYears (this System.Data.Common.CommandTrees.DbExpression dateValue1, System.Data.Common.CommandTrees.DbExpression dateValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffYears(class System.Data.Common.CommandTrees.DbExpression dateValue1, class System.Data.Common.CommandTrees.DbExpression dateValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="dateValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="dateValue1">To be added.</param>
          <param name="dateValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="EndsWith">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression EndsWith (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression suffix);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression EndsWith(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression suffix) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="suffix" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <param name="suffix">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Floor">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Floor (this System.Data.Common.CommandTrees.DbExpression value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Floor(class System.Data.Common.CommandTrees.DbExpression value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="GetTotalOffsetMinutes">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GetTotalOffsetMinutes (this System.Data.Common.CommandTrees.DbExpression dateTimeOffsetArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GetTotalOffsetMinutes(class System.Data.Common.CommandTrees.DbExpression dateTimeOffsetArgument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateTimeOffsetArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateTimeOffsetArgument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Hour">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Hour (this System.Data.Common.CommandTrees.DbExpression timeValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Hour(class System.Data.Common.CommandTrees.DbExpression timeValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="timeValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IndexOf">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IndexOf (this System.Data.Common.CommandTrees.DbExpression searchString, System.Data.Common.CommandTrees.DbExpression stringToFind);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IndexOf(class System.Data.Common.CommandTrees.DbExpression searchString, class System.Data.Common.CommandTrees.DbExpression stringToFind) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="searchString" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="stringToFind" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="searchString">To be added.</param>
          <param name="stringToFind">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Left">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Left (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Left(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression length) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="length" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <param name="length">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Length">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Length (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Length(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="LongCount">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression LongCount (this System.Data.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression LongCount(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Max (this System.Data.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Max(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Millisecond">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Millisecond (this System.Data.Common.CommandTrees.DbExpression timeValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Millisecond(class System.Data.Common.CommandTrees.DbExpression timeValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="timeValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Min (this System.Data.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Min(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Minute">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Minute (this System.Data.Common.CommandTrees.DbExpression timeValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Minute(class System.Data.Common.CommandTrees.DbExpression timeValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="timeValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Month">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Month (this System.Data.Common.CommandTrees.DbExpression dateValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Month(class System.Data.Common.CommandTrees.DbExpression dateValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Power">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Power (this System.Data.Common.CommandTrees.DbExpression baseArgument, System.Data.Common.CommandTrees.DbExpression exponent);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Power(class System.Data.Common.CommandTrees.DbExpression baseArgument, class System.Data.Common.CommandTrees.DbExpression exponent) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="baseArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="exponent" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="baseArgument">To be added.</param>
          <param name="exponent">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Replace">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Replace (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression toReplace, System.Data.Common.CommandTrees.DbExpression replacement);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Replace(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression toReplace, class System.Data.Common.CommandTrees.DbExpression replacement) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="toReplace" Type="System.Data.Common.CommandTrees.DbExpression" />
          <Parameter Name="replacement" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <param name="toReplace">To be added.</param>
          <param name="replacement">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Reverse">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Reverse (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Reverse(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Right">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Right (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Right(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression length) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="length" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <param name="length">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Round">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Round (this System.Data.Common.CommandTrees.DbExpression value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Round(class System.Data.Common.CommandTrees.DbExpression value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Round">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Round (this System.Data.Common.CommandTrees.DbExpression value, System.Data.Common.CommandTrees.DbExpression digits);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Round(class System.Data.Common.CommandTrees.DbExpression value, class System.Data.Common.CommandTrees.DbExpression digits) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="digits" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <param name="digits">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Second">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Second (this System.Data.Common.CommandTrees.DbExpression timeValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Second(class System.Data.Common.CommandTrees.DbExpression timeValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="timeValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="StartsWith">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression StartsWith (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression prefix);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression StartsWith(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression prefix) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="prefix" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <param name="prefix">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="StDev">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression StDev (this System.Data.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression StDev(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="StDevP">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression StDevP (this System.Data.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression StDevP(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Substring">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Substring (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression start, System.Data.Common.CommandTrees.DbExpression length);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Substring(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression start, class System.Data.Common.CommandTrees.DbExpression length) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="start" Type="System.Data.Common.CommandTrees.DbExpression" />
          <Parameter Name="length" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <param name="start">To be added.</param>
          <param name="length">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Sum (this System.Data.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Sum(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToLower">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression ToLower (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression ToLower(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ToUpper">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression ToUpper (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression ToUpper(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Trim">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Trim (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Trim(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="TrimEnd">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression TrimEnd (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression TrimEnd(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="TrimStart">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression TrimStart (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression TrimStart(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="stringArgument">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Truncate">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Truncate (this System.Data.Common.CommandTrees.DbExpression value, System.Data.Common.CommandTrees.DbExpression digits);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Truncate(class System.Data.Common.CommandTrees.DbExpression value, class System.Data.Common.CommandTrees.DbExpression digits) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="digits" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <param name="digits">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="TruncateTime">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression TruncateTime (this System.Data.Common.CommandTrees.DbExpression dateValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression TruncateTime(class System.Data.Common.CommandTrees.DbExpression dateValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Var">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Var (this System.Data.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Var(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="VarP">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression VarP (this System.Data.Common.CommandTrees.DbExpression collection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression VarP(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="collection">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Year">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Year (this System.Data.Common.CommandTrees.DbExpression dateValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Year(class System.Data.Common.CommandTrees.DbExpression dateValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="dateValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Area">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Area (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Area(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AsBinary">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AsBinary (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AsBinary(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AsGml">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AsGml (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AsGml(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="AsText">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AsText (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AsText(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Centroid">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Centroid (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Centroid(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="CoordinateSystemId">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression CoordinateSystemId (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression CoordinateSystemId(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Distance">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Distance (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Distance(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">To be added.</param>
          <param name="spatialValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Elevation">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Elevation (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Elevation(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="EndPoint">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression EndPoint (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression EndPoint(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="ExteriorRing">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression ExteriorRing (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression ExteriorRing(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="InteriorRingAt">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression InteriorRingAt (this System.Data.Common.CommandTrees.DbExpression geometryValue, System.Data.Common.CommandTrees.DbExpression indexValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression InteriorRingAt(class System.Data.Common.CommandTrees.DbExpression geometryValue, class System.Data.Common.CommandTrees.DbExpression indexValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="indexValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <param name="indexValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="InteriorRingCount">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression InteriorRingCount (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression InteriorRingCount(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsClosedSpatial">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IsClosedSpatial (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IsClosedSpatial(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsEmptySpatial">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IsEmptySpatial (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IsEmptySpatial(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsRing">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IsRing (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IsRing(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsSimpleGeometry">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IsSimpleGeometry (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IsSimpleGeometry(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="IsValidGeometry">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IsValidGeometry (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IsValidGeometry(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Latitude">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Latitude (this System.Data.Common.CommandTrees.DbExpression geographyValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Latitude(class System.Data.Common.CommandTrees.DbExpression geographyValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geographyValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geographyValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Longitude">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Longitude (this System.Data.Common.CommandTrees.DbExpression geographyValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Longitude(class System.Data.Common.CommandTrees.DbExpression geographyValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geographyValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geographyValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="Measure">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Measure (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Measure(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="PointAt">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression PointAt (this System.Data.Common.CommandTrees.DbExpression spatialValue, System.Data.Common.CommandTrees.DbExpression indexValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression PointAt(class System.Data.Common.CommandTrees.DbExpression spatialValue, class System.Data.Common.CommandTrees.DbExpression indexValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="indexValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <param name="indexValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="PointCount">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression PointCount (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression PointCount(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="PointOnSurface">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression PointOnSurface (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression PointOnSurface(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialBoundary">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialBoundary (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialBoundary(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialBuffer">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialBuffer (this System.Data.Common.CommandTrees.DbExpression spatialValue, System.Data.Common.CommandTrees.DbExpression distance);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialBuffer(class System.Data.Common.CommandTrees.DbExpression spatialValue, class System.Data.Common.CommandTrees.DbExpression distance) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="distance" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <param name="distance">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialContains">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialContains (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialContains(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">To be added.</param>
          <param name="geometryValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialConvexHull">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialConvexHull (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialConvexHull(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialCrosses">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialCrosses (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialCrosses(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">To be added.</param>
          <param name="geometryValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialDifference">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialDifference (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialDifference(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">To be added.</param>
          <param name="spatialValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialDimension">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialDimension (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialDimension(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialDisjoint">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialDisjoint (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialDisjoint(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">To be added.</param>
          <param name="spatialValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialElementAt">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialElementAt (this System.Data.Common.CommandTrees.DbExpression spatialValue, System.Data.Common.CommandTrees.DbExpression indexValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialElementAt(class System.Data.Common.CommandTrees.DbExpression spatialValue, class System.Data.Common.CommandTrees.DbExpression indexValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="indexValue" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <param name="indexValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialElementCount">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialElementCount (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialElementCount(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialEnvelope">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialEnvelope (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialEnvelope(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialEquals">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialEquals (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialEquals(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">To be added.</param>
          <param name="spatialValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialIntersection">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialIntersection (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialIntersection(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">To be added.</param>
          <param name="spatialValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialIntersects">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialIntersects (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialIntersects(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">To be added.</param>
          <param name="spatialValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialLength">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialLength (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialLength(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialOverlaps">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialOverlaps (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialOverlaps(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">To be added.</param>
          <param name="geometryValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialRelate">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialRelate (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2, System.Data.Common.CommandTrees.DbExpression intersectionPatternMatrix);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialRelate(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2, class System.Data.Common.CommandTrees.DbExpression intersectionPatternMatrix) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
          <Parameter Name="intersectionPatternMatrix" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">To be added.</param>
          <param name="geometryValue2">To be added.</param>
          <param name="intersectionPatternMatrix">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialSymmetricDifference">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialSymmetricDifference (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialSymmetricDifference(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">To be added.</param>
          <param name="spatialValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialTouches">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialTouches (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialTouches(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">To be added.</param>
          <param name="geometryValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialTypeName">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialTypeName (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialTypeName(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialUnion">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialUnion (this System.Data.Common.CommandTrees.DbExpression spatialValue1, System.Data.Common.CommandTrees.DbExpression spatialValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialUnion(class System.Data.Common.CommandTrees.DbExpression spatialValue1, class System.Data.Common.CommandTrees.DbExpression spatialValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="spatialValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="spatialValue1">To be added.</param>
          <param name="spatialValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="SpatialWithin">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression SpatialWithin (this System.Data.Common.CommandTrees.DbExpression geometryValue1, System.Data.Common.CommandTrees.DbExpression geometryValue2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression SpatialWithin(class System.Data.Common.CommandTrees.DbExpression geometryValue1, class System.Data.Common.CommandTrees.DbExpression geometryValue2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
          <Parameter Name="geometryValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
        </Parameters>
        <Docs>
          <param name="geometryValue1">To be added.</param>
          <param name="geometryValue2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="StartPoint">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression StartPoint (this System.Data.Common.CommandTrees.DbExpression spatialValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression StartPoint(class System.Data.Common.CommandTrees.DbExpression spatialValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="spatialValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="spatialValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="XCoordinate">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression XCoordinate (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression XCoordinate(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Common.CommandTrees.DbExpression" />
      </Targets>
      <Member MemberName="YCoordinate">
        <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression YCoordinate (this System.Data.Common.CommandTrees.DbExpression geometryValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression YCoordinate(class System.Data.Common.CommandTrees.DbExpression geometryValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="geometryValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        </Parameters>
        <Docs>
          <param name="geometryValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions" Member="M:System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Common.CommandTrees.DbExpression)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataRow" />
      </Targets>
      <Member MemberName="Field&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, System.Data.DataColumn column);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, class System.Data.DataColumn column) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
          <Parameter Name="column" Type="System.Data.DataColumn" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="row">To be added.</param>
          <param name="column">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataRowExtensions" Member="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataRow" />
      </Targets>
      <Member MemberName="Field&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, System.Data.DataColumn column, System.Data.DataRowVersion version);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, class System.Data.DataColumn column, valuetype System.Data.DataRowVersion version) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
          <Parameter Name="column" Type="System.Data.DataColumn" />
          <Parameter Name="version" Type="System.Data.DataRowVersion" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="row">To be added.</param>
          <param name="column">To be added.</param>
          <param name="version">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataRowExtensions" Member="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataRow" />
      </Targets>
      <Member MemberName="Field&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, int columnIndex);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, int32 columnIndex) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
          <Parameter Name="columnIndex" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="row">To be added.</param>
          <param name="columnIndex">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataRowExtensions" Member="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataRow" />
      </Targets>
      <Member MemberName="Field&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, int columnIndex, System.Data.DataRowVersion version);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, int32 columnIndex, valuetype System.Data.DataRowVersion version) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
          <Parameter Name="columnIndex" Type="System.Int32" />
          <Parameter Name="version" Type="System.Data.DataRowVersion" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="row">To be added.</param>
          <param name="columnIndex">To be added.</param>
          <param name="version">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataRowExtensions" Member="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataRow" />
      </Targets>
      <Member MemberName="Field&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, string columnName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, string columnName) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
          <Parameter Name="columnName" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="row">To be added.</param>
          <param name="columnName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataRowExtensions" Member="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataRow" />
      </Targets>
      <Member MemberName="Field&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, string columnName, System.Data.DataRowVersion version);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, string columnName, valuetype System.Data.DataRowVersion version) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
          <Parameter Name="columnName" Type="System.String" />
          <Parameter Name="version" Type="System.Data.DataRowVersion" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="row">To be added.</param>
          <param name="columnName">To be added.</param>
          <param name="version">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataRowExtensions" Member="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataRow" />
      </Targets>
      <Member MemberName="SetField&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void SetField&lt;T&gt; (this System.Data.DataRow row, System.Data.DataColumn column, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetField&lt;T&gt;(class System.Data.DataRow row, class System.Data.DataColumn column, !!T value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
          <Parameter Name="column" Type="System.Data.DataColumn" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="row">To be added.</param>
          <param name="column">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataRowExtensions" Member="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataRow" />
      </Targets>
      <Member MemberName="SetField&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void SetField&lt;T&gt; (this System.Data.DataRow row, int columnIndex, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetField&lt;T&gt;(class System.Data.DataRow row, int32 columnIndex, !!T value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
          <Parameter Name="columnIndex" Type="System.Int32" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="row">To be added.</param>
          <param name="columnIndex">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataRowExtensions" Member="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataRow" />
      </Targets>
      <Member MemberName="SetField&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void SetField&lt;T&gt; (this System.Data.DataRow row, string columnName, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetField&lt;T&gt;(class System.Data.DataRow row, string columnName, !!T value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
          <Parameter Name="columnName" Type="System.String" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="row">To be added.</param>
          <param name="columnName">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataRowExtensions" Member="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataTable" />
      </Targets>
      <Member MemberName="AsDataView">
        <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.DataView</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="table" Type="System.Data.DataTable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="table">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataTableExtensions" Member="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.EnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="AsDataView&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.DataView</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataTableExtensions" Member="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.DataTable" />
      </Targets>
      <Member MemberName="AsEnumerable">
        <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataTableExtensions" Member="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="CopyToDataTable&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.DataTable</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataTableExtensions" Member="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="CopyToDataTable&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="table" Type="System.Data.DataTable" />
          <Parameter Name="options" Type="System.Data.LoadOption" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="table">To be added.</param>
          <param name="options">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataTableExtensions" Member="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="CopyToDataTable&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="table" Type="System.Data.DataTable" />
          <Parameter Name="options" Type="System.Data.LoadOption" />
          <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="table">To be added.</param>
          <param name="options">To be added.</param>
          <param name="errorHandler">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.DataTableExtensions" Member="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.Metadata.Edm.EdmItemCollection" />
      </Targets>
      <Member MemberName="GetPrimitiveTypes">
        <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.PrimitiveType&gt; GetPrimitiveTypes (this System.Data.Metadata.Edm.EdmItemCollection itemCollection, Version edmVersion);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Metadata.Edm.PrimitiveType&gt; GetPrimitiveTypes(class System.Data.Metadata.Edm.EdmItemCollection itemCollection, class System.Version edmVersion) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Metadata.Edm.PrimitiveType&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="itemCollection" Type="System.Data.Metadata.Edm.EdmItemCollection" RefType="this" />
          <Parameter Name="edmVersion" Type="System.Version" />
        </Parameters>
        <Docs>
          <param name="itemCollection">To be added.</param>
          <param name="edmVersion">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.Entity.Design.MetadataExtensionMethods" Member="M:System.Data.Entity.Design.MetadataExtensionMethods.GetPrimitiveTypes(System.Data.Metadata.Edm.EdmItemCollection,System.Version)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.EnumerableRowCollection" />
      </Targets>
      <Member MemberName="Cast&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Data.EnumerableRowCollection source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Data.EnumerableRowCollection source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.EnumerableRowCollection&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.EnumerableRowCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.Cast``1(System.Data.EnumerableRowCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.EnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; OrderBy&lt;TRow,TKey&gt; (this System.Data.EnumerableRowCollection&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; OrderBy&lt;TRow, TKey&gt;(class System.Data.EnumerableRowCollection`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.EnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; OrderBy&lt;TRow,TKey&gt; (this System.Data.EnumerableRowCollection&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; OrderBy&lt;TRow, TKey&gt;(class System.Data.EnumerableRowCollection`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.EnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; OrderByDescending&lt;TRow,TKey&gt; (this System.Data.EnumerableRowCollection&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; OrderByDescending&lt;TRow, TKey&gt;(class System.Data.EnumerableRowCollection`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.EnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; OrderByDescending&lt;TRow,TKey&gt; (this System.Data.EnumerableRowCollection&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; OrderByDescending&lt;TRow, TKey&gt;(class System.Data.EnumerableRowCollection`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.EnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="Select&lt;TRow,S&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;S&gt; Select&lt;TRow,S&gt; (this System.Data.EnumerableRowCollection&lt;TRow&gt; source, Func&lt;TRow,S&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;!!S&gt; Select&lt;TRow, S&gt;(class System.Data.EnumerableRowCollection`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!S&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.EnumerableRowCollection&lt;S&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow" />
          <TypeParameter Name="S" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;TRow&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TRow,S&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="S">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.Select``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.OrderedEnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; ThenBy&lt;TRow,TKey&gt; (this System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; ThenBy&lt;TRow, TKey&gt;(class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.OrderedEnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; ThenBy&lt;TRow,TKey&gt; (this System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; ThenBy&lt;TRow, TKey&gt;(class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.OrderedEnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; ThenByDescending&lt;TRow,TKey&gt; (this System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; ThenByDescending&lt;TRow, TKey&gt;(class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.OrderedEnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; ThenByDescending&lt;TRow,TKey&gt; (this System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; ThenByDescending&lt;TRow, TKey&gt;(class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.EnumerableRowCollection`1" />
      </Targets>
      <Member MemberName="Where&lt;TRow&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;TRow&gt; Where&lt;TRow&gt; (this System.Data.EnumerableRowCollection&lt;TRow&gt; source, Func&lt;TRow,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;!!TRow&gt; Where&lt;TRow&gt;(class System.Data.EnumerableRowCollection`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.EnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;TRow&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TRow,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.EnumerableRowCollectionExtensions" Member="M:System.Data.EnumerableRowCollectionExtensions.Where``1(System.Data.EnumerableRowCollection{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.TypedTableBase`1" />
      </Targets>
      <Member MemberName="AsEnumerable&lt;TRow&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;TRow&gt; AsEnumerable&lt;TRow&gt; (this System.Data.TypedTableBase&lt;TRow&gt; source) where TRow : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;!!TRow&gt; AsEnumerable&lt;(class System.Data.DataRow) TRow&gt;(class System.Data.TypedTableBase`1&lt;!!TRow&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.EnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.TypedTableBase&lt;TRow&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.TypedTableBaseExtensions" Member="M:System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.TypedTableBase`1" />
      </Targets>
      <Member MemberName="ElementAtOrDefault&lt;TRow&gt;">
        <MemberSignature Language="C#" Value="public static TRow ElementAtOrDefault&lt;TRow&gt; (this System.Data.TypedTableBase&lt;TRow&gt; source, int index) where TRow : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TRow ElementAtOrDefault&lt;(class System.Data.DataRow) TRow&gt;(class System.Data.TypedTableBase`1&lt;!!TRow&gt; source, int32 index) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TRow</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.TypedTableBase&lt;TRow&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.TypedTableBaseExtensions" Member="M:System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.TypedTableBase`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; OrderBy&lt;TRow,TKey&gt; (this System.Data.TypedTableBase&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector) where TRow : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; OrderBy&lt;(class System.Data.DataRow) TRow, TKey&gt;(class System.Data.TypedTableBase`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.TypedTableBase&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.TypedTableBaseExtensions" Member="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.TypedTableBase`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; OrderBy&lt;TRow,TKey&gt; (this System.Data.TypedTableBase&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer) where TRow : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; OrderBy&lt;(class System.Data.DataRow) TRow, TKey&gt;(class System.Data.TypedTableBase`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.TypedTableBase&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.TypedTableBaseExtensions" Member="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.TypedTableBase`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; OrderByDescending&lt;TRow,TKey&gt; (this System.Data.TypedTableBase&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector) where TRow : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; OrderByDescending&lt;(class System.Data.DataRow) TRow, TKey&gt;(class System.Data.TypedTableBase`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.TypedTableBase&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.TypedTableBaseExtensions" Member="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.TypedTableBase`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TRow,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.OrderedEnumerableRowCollection&lt;TRow&gt; OrderByDescending&lt;TRow,TKey&gt; (this System.Data.TypedTableBase&lt;TRow&gt; source, Func&lt;TRow,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer) where TRow : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.OrderedEnumerableRowCollection`1&lt;!!TRow&gt; OrderByDescending&lt;(class System.Data.DataRow) TRow, TKey&gt;(class System.Data.TypedTableBase`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.OrderedEnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.TypedTableBase&lt;TRow&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TRow,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.TypedTableBaseExtensions" Member="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.TypedTableBase`1" />
      </Targets>
      <Member MemberName="Select&lt;TRow,S&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;S&gt; Select&lt;TRow,S&gt; (this System.Data.TypedTableBase&lt;TRow&gt; source, Func&lt;TRow,S&gt; selector) where TRow : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;!!S&gt; Select&lt;(class System.Data.DataRow) TRow, S&gt;(class System.Data.TypedTableBase`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, !!S&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.EnumerableRowCollection&lt;S&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
          <TypeParameter Name="S" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.TypedTableBase&lt;TRow&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TRow,S&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <typeparam name="S">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.TypedTableBaseExtensions" Member="M:System.Data.TypedTableBaseExtensions.Select``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Data.TypedTableBase`1" />
      </Targets>
      <Member MemberName="Where&lt;TRow&gt;">
        <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;TRow&gt; Where&lt;TRow&gt; (this System.Data.TypedTableBase&lt;TRow&gt; source, Func&lt;TRow,bool&gt; predicate) where TRow : System.Data.DataRow;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;!!TRow&gt; Where&lt;(class System.Data.DataRow) TRow&gt;(class System.Data.TypedTableBase`1&lt;!!TRow&gt; source, class System.Func`2&lt;!!TRow, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Data.EnumerableRowCollection&lt;TRow&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TRow">
            <Constraints>
              <BaseTypeName>System.Data.DataRow</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Data.TypedTableBase&lt;TRow&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TRow,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TRow">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Data.TypedTableBaseExtensions" Member="M:System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt; func) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
        <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAccumulate</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="All&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Any&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Any&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AsEnumerable&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; AsEnumerable&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static decimal Average (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static float Average (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="Cast&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Concat&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Contains&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Contains&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="value">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Count&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Count&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource defaultValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="defaultValue" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Distinct&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Distinct&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ElementAt&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="First&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="First&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Last&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Last&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LastOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LastOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LongCount&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LongCount&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static decimal Max (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static double Max (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static int Max (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static long Max (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static float Max (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static decimal Min (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static double Min (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static int Min (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static long Min (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static float Min (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="OfType&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Reverse&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, !!TResult&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Single&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Single&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Skip&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SkipWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SkipWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static decimal Sum (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static double Sum (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static int Sum (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static long Sum (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static float Sum (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Take&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="TakeWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="TakeWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToArray&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource[] ToArray&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource[] ToArray&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource[]</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToList&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;!!TSource&gt; ToList&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Where&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Where&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFirst" />
          <TypeParameter Name="TSecond" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TFirst&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TFirst">To be added.</typeparam>
          <typeparam name="TSecond">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt; func) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
        <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAccumulate</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; updateAccumulatorFunc, Func&lt;TAccumulate,TAccumulate,TAccumulate&gt; combineAccumulatorsFunc, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; updateAccumulatorFunc, class System.Func`3&lt;!!TAccumulate, !!TAccumulate, !!TAccumulate&gt; combineAccumulatorsFunc, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="updateAccumulatorFunc" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
          <Parameter Name="combineAccumulatorsFunc" Type="System.Func&lt;TAccumulate,TAccumulate,TAccumulate&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="updateAccumulatorFunc">To be added.</param>
          <param name="combineAccumulatorsFunc">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TAccumulate&gt; seedFactory, Func&lt;TAccumulate,TSource,TAccumulate&gt; updateAccumulatorFunc, Func&lt;TAccumulate,TAccumulate,TAccumulate&gt; combineAccumulatorsFunc, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TAccumulate&gt; seedFactory, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; updateAccumulatorFunc, class System.Func`3&lt;!!TAccumulate, !!TAccumulate, !!TAccumulate&gt; combineAccumulatorsFunc, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seedFactory" Type="System.Func&lt;TAccumulate&gt;" />
          <Parameter Name="updateAccumulatorFunc" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
          <Parameter Name="combineAccumulatorsFunc" Type="System.Func&lt;TAccumulate,TAccumulate,TAccumulate&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seedFactory">To be added.</param>
          <param name="updateAccumulatorFunc">To be added.</param>
          <param name="combineAccumulatorsFunc">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="All&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Any&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Any&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="AsEnumerable&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; AsEnumerable&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery" />
      </Targets>
      <Member MemberName="AsOrdered">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery AsOrdered (this System.Linq.ParallelQuery source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery AsOrdered(class System.Linq.ParallelQuery source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="AsOrdered&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; AsOrdered&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; AsOrdered&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="AsParallel">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery AsParallel (this System.Collections.IEnumerable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery AsParallel(class System.Collections.IEnumerable source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Concurrent.Partitioner`1" />
      </Targets>
      <Member MemberName="AsParallel&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; AsParallel&lt;TSource&gt; (this System.Collections.Concurrent.Partitioner&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; AsParallel&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AsParallel&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; AsParallel&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; AsParallel&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="AsSequential&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsSequential&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; AsSequential&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="AsUnordered&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; AsUnordered&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; AsUnordered&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static decimal Average (this System.Linq.ParallelQuery&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Linq.ParallelQuery`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Linq.ParallelQuery&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Linq.ParallelQuery`1&lt;float64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Linq.ParallelQuery&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Linq.ParallelQuery`1&lt;int32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Linq.ParallelQuery&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Linq.ParallelQuery`1&lt;int64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Linq.ParallelQuery&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.ParallelQuery&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.ParallelQuery&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.ParallelQuery&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Linq.ParallelQuery&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static float Average (this System.Linq.ParallelQuery&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Linq.ParallelQuery`1&lt;float32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery" />
      </Targets>
      <Member MemberName="Cast&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Linq.ParallelQuery source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Linq.ParallelQuery source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Concat&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Concat&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Linq.ParallelQuery&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Linq.ParallelQuery`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Contains&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, TSource value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, !!TSource value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Contains&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="value">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Count&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Count&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, TSource defaultValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="defaultValue" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Distinct&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Distinct&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ElementAt&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, int index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, int32 index) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, int index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, int32 index) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Linq.ParallelQuery&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Linq.ParallelQuery`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Linq.ParallelQuery&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Linq.ParallelQuery`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="First&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="First&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ForAll&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static void ForAll&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Action&lt;TSource&gt; action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForAll&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; action) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="action" Type="System.Action&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="action">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.ParallelQuery&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.ParallelQuery&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.ParallelQuery&lt;TOuter&gt; outer, System.Linq.ParallelQuery&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TOuter&gt; outer, class System.Linq.ParallelQuery`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Linq.ParallelQuery&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.ParallelQuery&lt;TOuter&gt; outer, System.Linq.ParallelQuery&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TOuter&gt; outer, class System.Linq.ParallelQuery`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Linq.ParallelQuery&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Linq.ParallelQuery&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Linq.ParallelQuery`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Linq.ParallelQuery&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Linq.ParallelQuery`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.ParallelQuery&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.ParallelQuery&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.ParallelQuery&lt;TOuter&gt; outer, System.Linq.ParallelQuery&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TOuter&gt; outer, class System.Linq.ParallelQuery`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Linq.ParallelQuery&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.ParallelQuery&lt;TOuter&gt; outer, System.Linq.ParallelQuery&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TOuter&gt; outer, class System.Linq.ParallelQuery`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Linq.ParallelQuery&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Last&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Last&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="LastOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="LastOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="LongCount&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="LongCount&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static decimal Max (this System.Linq.ParallelQuery&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(class System.Linq.ParallelQuery`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static double Max (this System.Linq.ParallelQuery&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(class System.Linq.ParallelQuery`1&lt;float64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static int Max (this System.Linq.ParallelQuery&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(class System.Linq.ParallelQuery`1&lt;int32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static long Max (this System.Linq.ParallelQuery&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(class System.Linq.ParallelQuery`1&lt;int64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max (this System.Linq.ParallelQuery&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max (this System.Linq.ParallelQuery&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max (this System.Linq.ParallelQuery&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max (this System.Linq.ParallelQuery&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max (this System.Linq.ParallelQuery&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static float Max (this System.Linq.ParallelQuery&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(class System.Linq.ParallelQuery`1&lt;float32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Max&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static decimal Min (this System.Linq.ParallelQuery&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(class System.Linq.ParallelQuery`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static double Min (this System.Linq.ParallelQuery&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(class System.Linq.ParallelQuery`1&lt;float64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static int Min (this System.Linq.ParallelQuery&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(class System.Linq.ParallelQuery`1&lt;int32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static long Min (this System.Linq.ParallelQuery&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(class System.Linq.ParallelQuery`1&lt;int64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min (this System.Linq.ParallelQuery&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min (this System.Linq.ParallelQuery&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min (this System.Linq.ParallelQuery&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min (this System.Linq.ParallelQuery&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min (this System.Linq.ParallelQuery&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static float Min (this System.Linq.ParallelQuery&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(class System.Linq.ParallelQuery`1&lt;float32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Min&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery" />
      </Targets>
      <Member MemberName="OfType&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Linq.ParallelQuery source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Linq.ParallelQuery source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.OrderedParallelQuery&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.OrderedParallelQuery&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.OrderedParallelQuery&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.OrderedParallelQuery&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Reverse&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, !!TResult&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Linq.ParallelQuery&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Linq.ParallelQuery`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Linq.ParallelQuery&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Linq.ParallelQuery`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Single&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Single&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SingleOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SingleOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Skip&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, int count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, int32 count) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SkipWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SkipWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static decimal Sum (this System.Linq.ParallelQuery&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Linq.ParallelQuery`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static double Sum (this System.Linq.ParallelQuery&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Linq.ParallelQuery`1&lt;float64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static int Sum (this System.Linq.ParallelQuery&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Linq.ParallelQuery`1&lt;int32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static long Sum (this System.Linq.ParallelQuery&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Linq.ParallelQuery`1&lt;int64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Linq.ParallelQuery&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Linq.ParallelQuery&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Linq.ParallelQuery&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Linq.ParallelQuery&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Linq.ParallelQuery&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Linq.ParallelQuery`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static float Sum (this System.Linq.ParallelQuery&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Linq.ParallelQuery`1&lt;float32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Take&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Take&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, int count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, int32 count) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="TakeWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="TakeWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.OrderedParallelQuery`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.OrderedParallelQuery&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.OrderedParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.OrderedParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.OrderedParallelQuery`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.OrderedParallelQuery&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.OrderedParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.OrderedParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.OrderedParallelQuery`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.OrderedParallelQuery&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.OrderedParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.OrderedParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.OrderedParallelQuery`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.OrderedParallelQuery&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.OrderedParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.OrderedParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.OrderedParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToArray&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource[] ToArray&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource[] ToArray&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource[]</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToList&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;!!TSource&gt; ToList&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Linq.ParallelQuery&lt;TSource&gt; second);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Linq.ParallelQuery`1&lt;!!TSource&gt; second) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; first, System.Linq.ParallelQuery&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; first, class System.Linq.ParallelQuery`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Where&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Where&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Where&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; Where&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="WithCancellation&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; WithCancellation&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; WithCancellation&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="WithDegreeOfParallelism&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; WithDegreeOfParallelism&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, int degreeOfParallelism);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; WithDegreeOfParallelism&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, int32 degreeOfParallelism) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="degreeOfParallelism" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="degreeOfParallelism">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="WithExecutionMode&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; WithExecutionMode&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, System.Linq.ParallelExecutionMode executionMode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; WithExecutionMode&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, valuetype System.Linq.ParallelExecutionMode executionMode) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="executionMode" Type="System.Linq.ParallelExecutionMode" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="executionMode">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="WithMergeOptions&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TSource&gt; WithMergeOptions&lt;TSource&gt; (this System.Linq.ParallelQuery&lt;TSource&gt; source, System.Linq.ParallelMergeOptions mergeOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TSource&gt; WithMergeOptions&lt;TSource&gt;(class System.Linq.ParallelQuery`1&lt;!!TSource&gt; source, valuetype System.Linq.ParallelMergeOptions mergeOptions) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery&lt;TSource&gt;" RefType="this" />
          <Parameter Name="mergeOptions" Type="System.Linq.ParallelMergeOptions" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="mergeOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Linq.ParallelQuery&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFirst" />
          <TypeParameter Name="TSecond" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TFirst&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TFirst">To be added.</typeparam>
          <typeparam name="TSecond">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ParallelQuery&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Linq.ParallelQuery&lt;TFirst&gt; first, System.Linq.ParallelQuery&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ParallelQuery`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Linq.ParallelQuery`1&lt;!!TFirst&gt; first, class System.Linq.ParallelQuery`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFirst" />
          <TypeParameter Name="TSecond" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery&lt;TFirst&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery&lt;TSecond&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TFirst">To be added.</typeparam>
          <typeparam name="TSecond">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.ParallelEnumerable" Member="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TSource,TSource&gt;&gt; func);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt;&gt; func) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TSource,TSource&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
        <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TAccumulate seed, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt; func);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt;&gt; func) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAccumulate</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TAccumulate seed, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt; func, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt;&gt; func, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TAccumulate, !!TResult&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt;" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TAccumulate,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="All&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Any&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Any&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="AsQueryable">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable AsQueryable (this System.Collections.IEnumerable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable AsQueryable(class System.Collections.IEnumerable source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AsQueryable&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TElement&gt; AsQueryable&lt;TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TElement&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TElement&gt; AsQueryable&lt;TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static decimal Average (this System.Linq.IQueryable&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Linq.IQueryable&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Linq.IQueryable`1&lt;float64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Linq.IQueryable&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Linq.IQueryable`1&lt;int32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Linq.IQueryable&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Linq.IQueryable`1&lt;int64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static float Average (this System.Linq.IQueryable&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Linq.IQueryable`1&lt;float32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="Cast&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Linq.IQueryable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Linq.IQueryable source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Concat&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Contains&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource item) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="item" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="item">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Contains&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource item, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="item" Type="TSource" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="item">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Count&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Count&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource defaultValue);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="defaultValue" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Distinct&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Distinct&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ElementAt&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int index);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="First&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="First&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TElement&gt;&gt; elementSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TElement&gt;&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt;&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TElement&gt;&gt; elementSelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt;&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TElement&gt;&gt; elementSelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TOuter, !!TKey&gt;&gt; outerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TInner, !!TKey&gt;&gt; innerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt;&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TOuter, !!TKey&gt;&gt; outerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TInner, !!TKey&gt;&gt; innerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TOuter, !!TKey&gt;&gt; outerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TInner, !!TKey&gt;&gt; innerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt;&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TInner,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TOuter, !!TKey&gt;&gt; outerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TInner, !!TKey&gt;&gt; innerKeySelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt;&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TInner,TResult&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Last&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Last&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LastOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LastOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCount&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCount&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="OfType&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Linq.IQueryable source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Linq.IQueryable source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Reverse&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TResult&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,TResult&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, !!TResult&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt; collectionSelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt;&gt; collectionSelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt;&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="collectionSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TCollection,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt; collectionSelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt;&gt; collectionSelector, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt;&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="collectionSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TCollection,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Single&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Single&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Skip&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SkipWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SkipWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static decimal Sum (this System.Linq.IQueryable&lt;decimal&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Linq.IQueryable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static double Sum (this System.Linq.IQueryable&lt;double&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Linq.IQueryable`1&lt;float64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static int Sum (this System.Linq.IQueryable&lt;int&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Linq.IQueryable`1&lt;int32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static long Sum (this System.Linq.IQueryable&lt;long&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Linq.IQueryable`1&lt;int64&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Linq.IQueryable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static float Sum (this System.Linq.IQueryable&lt;float&gt; source);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Linq.IQueryable`1&lt;float32&gt; source) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, int64&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, float32&gt;&gt; selector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Take&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int count);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="TakeWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="TakeWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, !!TKey&gt;&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source2, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Where&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TSource, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Where&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Linq.IQueryable`1&lt;!!TSource&gt; source, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TSource, int32, bool&gt;&gt; predicate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Linq.IQueryable&lt;TFirst&gt; source1, System.Collections.Generic.IEnumerable&lt;TSecond&gt; source2, System.Linq.Expressions.Expression&lt;Func&lt;TFirst,TSecond,TResult&gt;&gt; resultSelector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IQueryable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Linq.IQueryable`1&lt;!!TFirst&gt; source1, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; source2, class System.Linq.Expressions.Expression`1&lt;class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt;&gt; resultSelector) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFirst" />
          <TypeParameter Name="TSecond" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TFirst&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TFirst,TSecond,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TFirst">To be added.</typeparam>
          <typeparam name="TSecond">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Assembly" />
      </Targets>
      <Member MemberName="GetCustomAttribute">
        <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (this System.Reflection.Assembly element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.Assembly element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Attribute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Assembly" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="GetCustomAttribute">
        <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (this System.Reflection.MemberInfo element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.MemberInfo element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Attribute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="GetCustomAttribute">
        <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (this System.Reflection.MemberInfo element, Type attributeType, bool inherit);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.MemberInfo element, class System.Type attributeType, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Attribute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Module" />
      </Targets>
      <Member MemberName="GetCustomAttribute">
        <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (this System.Reflection.Module element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.Module element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Attribute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Module" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="GetCustomAttribute">
        <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (this System.Reflection.ParameterInfo element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.ParameterInfo element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Attribute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="GetCustomAttribute">
        <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (this System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Attribute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Assembly" />
      </Targets>
      <Member MemberName="GetCustomAttribute&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetCustomAttribute&lt;T&gt; (this System.Reflection.Assembly element) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetCustomAttribute&lt;(class System.Attribute) T&gt;(class System.Reflection.Assembly element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Assembly" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="GetCustomAttribute&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetCustomAttribute&lt;T&gt; (this System.Reflection.MemberInfo element) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetCustomAttribute&lt;(class System.Attribute) T&gt;(class System.Reflection.MemberInfo element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="GetCustomAttribute&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetCustomAttribute&lt;T&gt; (this System.Reflection.MemberInfo element, bool inherit) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetCustomAttribute&lt;(class System.Attribute) T&gt;(class System.Reflection.MemberInfo element, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Module" />
      </Targets>
      <Member MemberName="GetCustomAttribute&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetCustomAttribute&lt;T&gt; (this System.Reflection.Module element) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetCustomAttribute&lt;(class System.Attribute) T&gt;(class System.Reflection.Module element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Module" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="GetCustomAttribute&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetCustomAttribute&lt;T&gt; (this System.Reflection.ParameterInfo element) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetCustomAttribute&lt;(class System.Attribute) T&gt;(class System.Reflection.ParameterInfo element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="GetCustomAttribute&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetCustomAttribute&lt;T&gt; (this System.Reflection.ParameterInfo element, bool inherit) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetCustomAttribute&lt;(class System.Attribute) T&gt;(class System.Reflection.ParameterInfo element, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Assembly" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.Assembly element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.Assembly element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Assembly" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Assembly" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.Assembly element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.Assembly element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Assembly" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.MemberInfo element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.MemberInfo element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.MemberInfo element, bool inherit);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.MemberInfo element, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.MemberInfo element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.MemberInfo element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.MemberInfo element, Type attributeType, bool inherit);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.MemberInfo element, class System.Type attributeType, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Module" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.Module element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.Module element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Module" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Module" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.Module element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.Module element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Module" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.ParameterInfo element);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.ParameterInfo element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.ParameterInfo element, bool inherit);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.ParameterInfo element, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.ParameterInfo element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.ParameterInfo element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Attribute&gt; GetCustomAttributes (this System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Attribute&gt; GetCustomAttributes(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Attribute&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Assembly" />
      </Targets>
      <Member MemberName="GetCustomAttributes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetCustomAttributes&lt;T&gt; (this System.Reflection.Assembly element) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetCustomAttributes&lt;(class System.Attribute) T&gt;(class System.Reflection.Assembly element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Assembly" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetCustomAttributes&lt;T&gt; (this System.Reflection.MemberInfo element) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetCustomAttributes&lt;(class System.Attribute) T&gt;(class System.Reflection.MemberInfo element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetCustomAttributes&lt;T&gt; (this System.Reflection.MemberInfo element, bool inherit) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetCustomAttributes&lt;(class System.Attribute) T&gt;(class System.Reflection.MemberInfo element, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Module" />
      </Targets>
      <Member MemberName="GetCustomAttributes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetCustomAttributes&lt;T&gt; (this System.Reflection.Module element) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetCustomAttributes&lt;(class System.Attribute) T&gt;(class System.Reflection.Module element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Module" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetCustomAttributes&lt;T&gt; (this System.Reflection.ParameterInfo element) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetCustomAttributes&lt;(class System.Attribute) T&gt;(class System.Reflection.ParameterInfo element) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="GetCustomAttributes&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; GetCustomAttributes&lt;T&gt; (this System.Reflection.ParameterInfo element, bool inherit) where T : Attribute;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetCustomAttributes&lt;(class System.Attribute) T&gt;(class System.Reflection.ParameterInfo element, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Attribute</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="element">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Assembly" />
      </Targets>
      <Member MemberName="IsDefined">
        <MemberSignature Language="C#" Value="public static bool IsDefined (this System.Reflection.Assembly element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.Assembly element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Assembly" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="IsDefined">
        <MemberSignature Language="C#" Value="public static bool IsDefined (this System.Reflection.MemberInfo element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.MemberInfo element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MemberInfo" />
      </Targets>
      <Member MemberName="IsDefined">
        <MemberSignature Language="C#" Value="public static bool IsDefined (this System.Reflection.MemberInfo element, Type attributeType, bool inherit);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.MemberInfo element, class System.Type attributeType, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.MemberInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.Module" />
      </Targets>
      <Member MemberName="IsDefined">
        <MemberSignature Language="C#" Value="public static bool IsDefined (this System.Reflection.Module element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.Module element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.Module" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="IsDefined">
        <MemberSignature Language="C#" Value="public static bool IsDefined (this System.Reflection.ParameterInfo element, Type attributeType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.ParameterInfo element, class System.Type attributeType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.ParameterInfo" />
      </Targets>
      <Member MemberName="IsDefined">
        <MemberSignature Language="C#" Value="public static bool IsDefined (this System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="element" Type="System.Reflection.ParameterInfo" RefType="this" />
          <Parameter Name="attributeType" Type="System.Type" />
          <Parameter Name="inherit" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="element">To be added.</param>
          <param name="attributeType">To be added.</param>
          <param name="inherit">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.CustomAttributeExtensions" Member="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetTypeInfo">
        <MemberSignature Language="C#" Value="public static System.Reflection.TypeInfo GetTypeInfo (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.TypeInfo GetTypeInfo(class System.Type type) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.TypeInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.IntrospectionExtensions" Member="M:System.Reflection.IntrospectionExtensions.GetTypeInfo(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Delegate" />
      </Targets>
      <Member MemberName="GetMethodInfo">
        <MemberSignature Language="C#" Value="public static System.Reflection.MethodInfo GetMethodInfo (this Delegate del);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodInfo GetMethodInfo(class System.Delegate del) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.MethodInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="del" Type="System.Delegate" RefType="this" />
        </Parameters>
        <Docs>
          <param name="del">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MethodInfo" />
      </Targets>
      <Member MemberName="GetRuntimeBaseDefinition">
        <MemberSignature Language="C#" Value="public static System.Reflection.MethodInfo GetRuntimeBaseDefinition (this System.Reflection.MethodInfo method);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodInfo GetRuntimeBaseDefinition(class System.Reflection.MethodInfo method) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.MethodInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="method" Type="System.Reflection.MethodInfo" RefType="this" />
        </Parameters>
        <Docs>
          <param name="method">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetRuntimeEvent">
        <MemberSignature Language="C#" Value="public static System.Reflection.EventInfo GetRuntimeEvent (this Type type, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.EventInfo GetRuntimeEvent(class System.Type type, string name) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.EventInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <param name="name">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetRuntimeEvents">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Reflection.EventInfo&gt; GetRuntimeEvents (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.EventInfo&gt; GetRuntimeEvents(class System.Type type) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.EventInfo&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetRuntimeField">
        <MemberSignature Language="C#" Value="public static System.Reflection.FieldInfo GetRuntimeField (this Type type, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.FieldInfo GetRuntimeField(class System.Type type, string name) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.FieldInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <param name="name">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetRuntimeFields">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Reflection.FieldInfo&gt; GetRuntimeFields (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.FieldInfo&gt; GetRuntimeFields(class System.Type type) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.FieldInfo&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.TypeInfo" />
      </Targets>
      <Member MemberName="GetRuntimeInterfaceMap">
        <MemberSignature Language="C#" Value="public static System.Reflection.InterfaceMapping GetRuntimeInterfaceMap (this System.Reflection.TypeInfo typeInfo, Type interfaceType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Reflection.InterfaceMapping GetRuntimeInterfaceMap(class System.Reflection.TypeInfo typeInfo, class System.Type interfaceType) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="typeInfo" Type="System.Reflection.TypeInfo" RefType="this" />
          <Parameter Name="interfaceType" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="typeInfo">To be added.</param>
          <param name="interfaceType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetRuntimeMethod">
        <MemberSignature Language="C#" Value="public static System.Reflection.MethodInfo GetRuntimeMethod (this Type type, string name, Type[] parameters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodInfo GetRuntimeMethod(class System.Type type, string name, class System.Type[] parameters) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.MethodInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="parameters" Type="System.Type[]" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <param name="name">To be added.</param>
          <param name="parameters">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetRuntimeMethods">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Reflection.MethodInfo&gt; GetRuntimeMethods (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MethodInfo&gt; GetRuntimeMethods(class System.Type type) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.MethodInfo&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetRuntimeProperties">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Reflection.PropertyInfo&gt; GetRuntimeProperties (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.PropertyInfo&gt; GetRuntimeProperties(class System.Type type) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.PropertyInfo&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetRuntimeProperty">
        <MemberSignature Language="C#" Value="public static System.Reflection.PropertyInfo GetRuntimeProperty (this Type type, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.PropertyInfo GetRuntimeProperty(class System.Type type, string name) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Reflection.PropertyInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="type">To be added.</param>
          <param name="name">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Reflection.RuntimeReflectionExtensions" Member="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Targets>
      <Member MemberName="GetDSAPrivateKey">
        <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA GetDSAPrivateKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DSA GetDSAPrivateKey(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Security.Cryptography.DSA</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="this" />
        </Parameters>
        <Docs>
          <param name="certificate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Security.Cryptography.X509Certificates.DSACertificateExtensions" Member="M:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Targets>
      <Member MemberName="GetDSAPublicKey">
        <MemberSignature Language="C#" Value="public static System.Security.Cryptography.DSA GetDSAPublicKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.DSA GetDSAPublicKey(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Security.Cryptography.DSA</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="this" />
        </Parameters>
        <Docs>
          <param name="certificate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Security.Cryptography.X509Certificates.DSACertificateExtensions" Member="M:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Targets>
      <Member MemberName="GetECDsaPrivateKey">
        <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa GetECDsaPrivateKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDsa GetECDsaPrivateKey(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="this" />
        </Parameters>
        <Docs>
          <param name="certificate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions" Member="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Targets>
      <Member MemberName="GetECDsaPublicKey">
        <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa GetECDsaPublicKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDsa GetECDsaPublicKey(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="this" />
        </Parameters>
        <Docs>
          <param name="certificate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions" Member="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Targets>
      <Member MemberName="GetRSAPrivateKey">
        <MemberSignature Language="C#" Value="public static System.Security.Cryptography.RSA GetRSAPrivateKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.RSA GetRSAPrivateKey(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Security.Cryptography.RSA</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="this" />
        </Parameters>
        <Docs>
          <param name="certificate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Security.Cryptography.X509Certificates.RSACertificateExtensions" Member="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Targets>
      <Member MemberName="GetRSAPublicKey">
        <MemberSignature Language="C#" Value="public static System.Security.Cryptography.RSA GetRSAPublicKey (this System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.RSA GetRSAPublicKey(class System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Security.Cryptography.RSA</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" RefType="this" />
        </Parameters>
        <Docs>
          <param name="certificate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Security.Cryptography.X509Certificates.RSACertificateExtensions" Member="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.Tasks.Task`1" />
      </Targets>
      <Member MemberName="Unwrap">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Unwrap (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; task);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Unwrap(class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; task) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="task">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Threading.Tasks.TaskExtensions" Member="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.Tasks.Task`1" />
      </Targets>
      <Member MemberName="Unwrap&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Unwrap&lt;TResult&gt; (this System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; task);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Unwrap&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; task) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="task" Type="System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="task">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Threading.Tasks.TaskExtensions" Member="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.WaitHandle" />
      </Targets>
      <Member MemberName="GetSafeWaitHandle">
        <MemberSignature Language="C#" Value="public static Microsoft.Win32.SafeHandles.SafeWaitHandle GetSafeWaitHandle (this System.Threading.WaitHandle waitHandle);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Win32.SafeHandles.SafeWaitHandle GetSafeWaitHandle(class System.Threading.WaitHandle waitHandle) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Win32.SafeHandles.SafeWaitHandle</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="waitHandle" Type="System.Threading.WaitHandle" RefType="this" />
        </Parameters>
        <Docs>
          <param name="waitHandle">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Threading.WaitHandleExtensions" Member="M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.WaitHandle" />
      </Targets>
      <Member MemberName="SetSafeWaitHandle">
        <MemberSignature Language="C#" Value="public static void SetSafeWaitHandle (this System.Threading.WaitHandle waitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSafeWaitHandle(class System.Threading.WaitHandle waitHandle, class Microsoft.Win32.SafeHandles.SafeWaitHandle value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="waitHandle" Type="System.Threading.WaitHandle" RefType="this" />
          <Parameter Name="value" Type="Microsoft.Win32.SafeHandles.SafeWaitHandle" />
        </Parameters>
        <Docs>
          <param name="waitHandle">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Threading.WaitHandleExtensions" Member="M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`1" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1&gt; (this Tuple&lt;T1&gt; value, out T1 item1);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1&gt;(class System.Tuple`1&lt;!!T1&gt; value, !!T1 item1) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``1(System.Tuple{``0},``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`3&lt;!!T8, !!T9, !!T10&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`4&lt;!!T8, !!T9, !!T10, !!T11&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11, out T12 item12);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`5&lt;!!T8, !!T9, !!T10, !!T11, !!T12&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11, !!T12 item12) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
          <Parameter Name="item12" Type="T12&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <param name="item12">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11, out T12 item12, out T13 item13);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`6&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11, !!T12 item12, !!T13 item13) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
          <Parameter Name="item12" Type="T12&amp;" RefType="out" />
          <Parameter Name="item13" Type="T13&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <param name="item12">To be added.</param>
          <param name="item13">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11, out T12 item12, out T13 item13, out T14 item14);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`7&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11, !!T12 item12, !!T13 item13, !!T14 item14) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
          <Parameter Name="item12" Type="T12&amp;" RefType="out" />
          <Parameter Name="item13" Type="T13&amp;" RefType="out" />
          <Parameter Name="item14" Type="T14&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <param name="item12">To be added.</param>
          <param name="item13">To be added.</param>
          <param name="item14">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15&gt;&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11, out T12 item12, out T13 item13, out T14 item14, out T15 item15);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`1&lt;!!T15&gt;&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11, !!T12 item12, !!T13 item13, !!T14 item14, !!T15 item15) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
          <Parameter Name="item12" Type="T12&amp;" RefType="out" />
          <Parameter Name="item13" Type="T13&amp;" RefType="out" />
          <Parameter Name="item14" Type="T14&amp;" RefType="out" />
          <Parameter Name="item15" Type="T15&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <param name="item12">To be added.</param>
          <param name="item13">To be added.</param>
          <param name="item14">To be added.</param>
          <param name="item15">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16&gt;&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11, out T12 item12, out T13 item13, out T14 item14, out T15 item15, out T16 item16);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`2&lt;!!T15, !!T16&gt;&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11, !!T12 item12, !!T13 item13, !!T14 item14, !!T15 item15, !!T16 item16) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
          <Parameter Name="item12" Type="T12&amp;" RefType="out" />
          <Parameter Name="item13" Type="T13&amp;" RefType="out" />
          <Parameter Name="item14" Type="T14&amp;" RefType="out" />
          <Parameter Name="item15" Type="T15&amp;" RefType="out" />
          <Parameter Name="item16" Type="T16&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <param name="item12">To be added.</param>
          <param name="item13">To be added.</param>
          <param name="item14">To be added.</param>
          <param name="item15">To be added.</param>
          <param name="item16">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17&gt;&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11, out T12 item12, out T13 item13, out T14 item14, out T15 item15, out T16 item16, out T17 item17);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`3&lt;!!T15, !!T16, !!T17&gt;&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11, !!T12 item12, !!T13 item13, !!T14 item14, !!T15 item15, !!T16 item16, !!T17 item17) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
          <Parameter Name="item12" Type="T12&amp;" RefType="out" />
          <Parameter Name="item13" Type="T13&amp;" RefType="out" />
          <Parameter Name="item14" Type="T14&amp;" RefType="out" />
          <Parameter Name="item15" Type="T15&amp;" RefType="out" />
          <Parameter Name="item16" Type="T16&amp;" RefType="out" />
          <Parameter Name="item17" Type="T17&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <param name="item12">To be added.</param>
          <param name="item13">To be added.</param>
          <param name="item14">To be added.</param>
          <param name="item15">To be added.</param>
          <param name="item16">To be added.</param>
          <param name="item17">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18&gt;&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11, out T12 item12, out T13 item13, out T14 item14, out T15 item15, out T16 item16, out T17 item17, out T18 item18);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`4&lt;!!T15, !!T16, !!T17, !!T18&gt;&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11, !!T12 item12, !!T13 item13, !!T14 item14, !!T15 item15, !!T16 item16, !!T17 item17, !!T18 item18) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
          <Parameter Name="item12" Type="T12&amp;" RefType="out" />
          <Parameter Name="item13" Type="T13&amp;" RefType="out" />
          <Parameter Name="item14" Type="T14&amp;" RefType="out" />
          <Parameter Name="item15" Type="T15&amp;" RefType="out" />
          <Parameter Name="item16" Type="T16&amp;" RefType="out" />
          <Parameter Name="item17" Type="T17&amp;" RefType="out" />
          <Parameter Name="item18" Type="T18&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <param name="item12">To be added.</param>
          <param name="item13">To be added.</param>
          <param name="item14">To be added.</param>
          <param name="item15">To be added.</param>
          <param name="item16">To be added.</param>
          <param name="item17">To be added.</param>
          <param name="item18">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18,T19&gt;&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11, out T12 item12, out T13 item13, out T14 item14, out T15 item15, out T16 item16, out T17 item17, out T18 item18, out T19 item19);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`5&lt;!!T15, !!T16, !!T17, !!T18, !!T19&gt;&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11, !!T12 item12, !!T13 item13, !!T14 item14, !!T15 item15, !!T16 item16, !!T17 item17, !!T18 item18, !!T19 item19) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
          <TypeParameter Name="T19" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18,T19&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
          <Parameter Name="item12" Type="T12&amp;" RefType="out" />
          <Parameter Name="item13" Type="T13&amp;" RefType="out" />
          <Parameter Name="item14" Type="T14&amp;" RefType="out" />
          <Parameter Name="item15" Type="T15&amp;" RefType="out" />
          <Parameter Name="item16" Type="T16&amp;" RefType="out" />
          <Parameter Name="item17" Type="T17&amp;" RefType="out" />
          <Parameter Name="item18" Type="T18&amp;" RefType="out" />
          <Parameter Name="item19" Type="T19&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <typeparam name="T19">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <param name="item12">To be added.</param>
          <param name="item13">To be added.</param>
          <param name="item14">To be added.</param>
          <param name="item15">To be added.</param>
          <param name="item16">To be added.</param>
          <param name="item17">To be added.</param>
          <param name="item18">To be added.</param>
          <param name="item19">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`2" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2&gt; (this Tuple&lt;T1,T2&gt; value, out T1 item1, out T2 item2);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2&gt;(class System.Tuple`2&lt;!!T1, !!T2&gt; value, !!T1 item1, !!T2 item2) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``2(System.Tuple{``0,``1},``0@,``1@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18,T19,T20&gt;&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11, out T12 item12, out T13 item13, out T14 item14, out T15 item15, out T16 item16, out T17 item17, out T18 item18, out T19 item19, out T20 item20);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`6&lt;!!T15, !!T16, !!T17, !!T18, !!T19, !!T20&gt;&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11, !!T12 item12, !!T13 item13, !!T14 item14, !!T15 item15, !!T16 item16, !!T17 item17, !!T18 item18, !!T19 item19, !!T20 item20) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
          <TypeParameter Name="T19" />
          <TypeParameter Name="T20" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18,T19,T20&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
          <Parameter Name="item12" Type="T12&amp;" RefType="out" />
          <Parameter Name="item13" Type="T13&amp;" RefType="out" />
          <Parameter Name="item14" Type="T14&amp;" RefType="out" />
          <Parameter Name="item15" Type="T15&amp;" RefType="out" />
          <Parameter Name="item16" Type="T16&amp;" RefType="out" />
          <Parameter Name="item17" Type="T17&amp;" RefType="out" />
          <Parameter Name="item18" Type="T18&amp;" RefType="out" />
          <Parameter Name="item19" Type="T19&amp;" RefType="out" />
          <Parameter Name="item20" Type="T20&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <typeparam name="T19">To be added.</typeparam>
          <typeparam name="T20">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <param name="item12">To be added.</param>
          <param name="item13">To be added.</param>
          <param name="item14">To be added.</param>
          <param name="item15">To be added.</param>
          <param name="item16">To be added.</param>
          <param name="item17">To be added.</param>
          <param name="item18">To be added.</param>
          <param name="item19">To be added.</param>
          <param name="item20">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18,T19,T20,T21&gt;&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9, out T10 item10, out T11 item11, out T12 item12, out T13 item13, out T14 item14, out T15 item15, out T16 item16, out T17 item17, out T18 item18, out T19 item19, out T20 item20, out T21 item21);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`7&lt;!!T15, !!T16, !!T17, !!T18, !!T19, !!T20, !!T21&gt;&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9, !!T10 item10, !!T11 item11, !!T12 item12, !!T13 item13, !!T14 item14, !!T15 item15, !!T16 item16, !!T17 item17, !!T18 item18, !!T19 item19, !!T20 item20, !!T21 item21) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
          <TypeParameter Name="T19" />
          <TypeParameter Name="T20" />
          <TypeParameter Name="T21" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18,T19,T20,T21&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
          <Parameter Name="item10" Type="T10&amp;" RefType="out" />
          <Parameter Name="item11" Type="T11&amp;" RefType="out" />
          <Parameter Name="item12" Type="T12&amp;" RefType="out" />
          <Parameter Name="item13" Type="T13&amp;" RefType="out" />
          <Parameter Name="item14" Type="T14&amp;" RefType="out" />
          <Parameter Name="item15" Type="T15&amp;" RefType="out" />
          <Parameter Name="item16" Type="T16&amp;" RefType="out" />
          <Parameter Name="item17" Type="T17&amp;" RefType="out" />
          <Parameter Name="item18" Type="T18&amp;" RefType="out" />
          <Parameter Name="item19" Type="T19&amp;" RefType="out" />
          <Parameter Name="item20" Type="T20&amp;" RefType="out" />
          <Parameter Name="item21" Type="T21&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <typeparam name="T19">To be added.</typeparam>
          <typeparam name="T20">To be added.</typeparam>
          <typeparam name="T21">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <param name="item10">To be added.</param>
          <param name="item11">To be added.</param>
          <param name="item12">To be added.</param>
          <param name="item13">To be added.</param>
          <param name="item14">To be added.</param>
          <param name="item15">To be added.</param>
          <param name="item16">To be added.</param>
          <param name="item17">To be added.</param>
          <param name="item18">To be added.</param>
          <param name="item19">To be added.</param>
          <param name="item20">To be added.</param>
          <param name="item21">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`3" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3&gt; (this Tuple&lt;T1,T2,T3&gt; value, out T1 item1, out T2 item2, out T3 item3);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3&gt;(class System.Tuple`3&lt;!!T1, !!T2, !!T3&gt; value, !!T1 item1, !!T2 item2, !!T3 item3) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``3(System.Tuple{``0,``1,``2},``0@,``1@,``2@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`4" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4&gt; (this Tuple&lt;T1,T2,T3,T4&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4&gt;(class System.Tuple`4&lt;!!T1, !!T2, !!T3, !!T4&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``4(System.Tuple{``0,``1,``2,``3},``0@,``1@,``2@,``3@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`5" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5&gt; (this Tuple&lt;T1,T2,T3,T4,T5&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5&gt;(class System.Tuple`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``5(System.Tuple{``0,``1,``2,``3,``4},``0@,``1@,``2@,``3@,``4@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`6" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6&gt;(class System.Tuple`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``6(System.Tuple{``0,``1,``2,``3,``4,``5},``0@,``1@,``2@,``3@,``4@,``5@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`7" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7&gt;(class System.Tuple`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6},``0@,``1@,``2@,``3@,``4@,``5@,``6@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`1&lt;!!T8&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;">
        <MemberSignature Language="C#" Value="public static void Deconstruct&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9&gt;&gt; value, out T1 item1, out T2 item2, out T3 item3, out T4 item4, out T5 item5, out T6 item6, out T7 item7, out T8 item8, out T9 item9);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Deconstruct&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`2&lt;!!T8, !!T9&gt;&gt; value, !!T1 item1, !!T2 item2, !!T3 item3, !!T4 item4, !!T5 item5, !!T6 item6, !!T7 item7, !!T8 item8, !!T9 item9) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9&gt;&gt;" RefType="this" />
          <Parameter Name="item1" Type="T1&amp;" RefType="out" />
          <Parameter Name="item2" Type="T2&amp;" RefType="out" />
          <Parameter Name="item3" Type="T3&amp;" RefType="out" />
          <Parameter Name="item4" Type="T4&amp;" RefType="out" />
          <Parameter Name="item5" Type="T5&amp;" RefType="out" />
          <Parameter Name="item6" Type="T6&amp;" RefType="out" />
          <Parameter Name="item7" Type="T7&amp;" RefType="out" />
          <Parameter Name="item8" Type="T8&amp;" RefType="out" />
          <Parameter Name="item9" Type="T9&amp;" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <param name="value">To be added.</param>
          <param name="item1">To be added.</param>
          <param name="item2">To be added.</param>
          <param name="item3">To be added.</param>
          <param name="item4">To be added.</param>
          <param name="item5">To be added.</param>
          <param name="item6">To be added.</param>
          <param name="item7">To be added.</param>
          <param name="item8">To be added.</param>
          <param name="item9">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.Deconstruct``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`1" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1&gt; ToTuple&lt;T1&gt; (this ValueTuple&lt;T1&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`1&lt;!!T1&gt; ToTuple&lt;T1&gt;(valuetype System.ValueTuple`1&lt;!!T1&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``1(System.ValueTuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`3&lt;!!T8, !!T9, !!T10&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`3&lt;!!T8, !!T9, !!T10&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``10(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`4&lt;!!T8, !!T9, !!T10, !!T11&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`4&lt;!!T8, !!T9, !!T10, !!T11&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``11(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`5&lt;!!T8, !!T9, !!T10, !!T11, !!T12&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`5&lt;!!T8, !!T9, !!T10, !!T11, !!T12&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``12(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`6&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`6&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``13(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`7&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`7&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``14(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15&gt;&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`1&lt;!!T15&gt;&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`1&lt;!!T15&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``15(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16&gt;&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`2&lt;!!T15, !!T16&gt;&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`2&lt;!!T15, !!T16&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``16(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17&gt;&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16,T17&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`3&lt;!!T15, !!T16, !!T17&gt;&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`3&lt;!!T15, !!T16, !!T17&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16,T17&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``17(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18&gt;&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16,T17,T18&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`4&lt;!!T15, !!T16, !!T17, !!T18&gt;&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`4&lt;!!T15, !!T16, !!T17, !!T18&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16,T17,T18&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``18(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18,T19&gt;&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16,T17,T18,T19&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`5&lt;!!T15, !!T16, !!T17, !!T18, !!T19&gt;&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`5&lt;!!T15, !!T16, !!T17, !!T18, !!T19&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18,T19&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
          <TypeParameter Name="T19" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16,T17,T18,T19&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <typeparam name="T19">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``19(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`2" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2&gt; ToTuple&lt;T1,T2&gt; (this ValueTuple&lt;T1,T2&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`2&lt;!!T1, !!T2&gt; ToTuple&lt;T1, T2&gt;(valuetype System.ValueTuple`2&lt;!!T1, !!T2&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``2(System.ValueTuple{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18,T19,T20&gt;&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16,T17,T18,T19,T20&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`6&lt;!!T15, !!T16, !!T17, !!T18, !!T19, !!T20&gt;&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`6&lt;!!T15, !!T16, !!T17, !!T18, !!T19, !!T20&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18,T19,T20&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
          <TypeParameter Name="T19" />
          <TypeParameter Name="T20" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16,T17,T18,T19,T20&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <typeparam name="T19">To be added.</typeparam>
          <typeparam name="T20">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``20(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18,T19,T20,T21&gt;&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16,T17,T18,T19,T20,T21&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`7&lt;!!T15, !!T16, !!T17, !!T18, !!T19, !!T20, !!T21&gt;&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`7&lt;!!T15, !!T16, !!T17, !!T18, !!T19, !!T20, !!T21&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18,T19,T20,T21&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
          <TypeParameter Name="T19" />
          <TypeParameter Name="T20" />
          <TypeParameter Name="T21" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16,T17,T18,T19,T20,T21&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <typeparam name="T19">To be added.</typeparam>
          <typeparam name="T20">To be added.</typeparam>
          <typeparam name="T21">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``21(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19,``20}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`3" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3&gt; ToTuple&lt;T1,T2,T3&gt; (this ValueTuple&lt;T1,T2,T3&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`3&lt;!!T1, !!T2, !!T3&gt; ToTuple&lt;T1, T2, T3&gt;(valuetype System.ValueTuple`3&lt;!!T1, !!T2, !!T3&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``3(System.ValueTuple{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`4" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4&gt; ToTuple&lt;T1,T2,T3,T4&gt; (this ValueTuple&lt;T1,T2,T3,T4&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`4&lt;!!T1, !!T2, !!T3, !!T4&gt; ToTuple&lt;T1, T2, T3, T4&gt;(valuetype System.ValueTuple`4&lt;!!T1, !!T2, !!T3, !!T4&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``4(System.ValueTuple{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`5" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5&gt; ToTuple&lt;T1,T2,T3,T4,T5&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt; ToTuple&lt;T1, T2, T3, T4, T5&gt;(valuetype System.ValueTuple`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``5(System.ValueTuple{``0,``1,``2,``3,``4})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`6" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6&gt;(valuetype System.ValueTuple`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``6(System.ValueTuple{``0,``1,``2,``3,``4,``5})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`7" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;(valuetype System.ValueTuple`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``7(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`1&lt;!!T8&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`1&lt;!!T8&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``8(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.ValueTuple`8" />
      </Targets>
      <Member MemberName="ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;">
        <MemberSignature Language="C#" Value="public static Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9&gt;&gt; ToTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt; (this ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`2&lt;!!T8, !!T9&gt;&gt; ToTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`2&lt;!!T8, !!T9&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToTuple``9(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`1" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1&gt; ToValueTuple&lt;T1&gt; (this Tuple&lt;T1&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`1&lt;!!T1&gt; ToValueTuple&lt;T1&gt;(class System.Tuple`1&lt;!!T1&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``1(System.Tuple{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`3&lt;!!T8, !!T9, !!T10&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`3&lt;!!T8, !!T9, !!T10&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`4&lt;!!T8, !!T9, !!T10, !!T11&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`4&lt;!!T8, !!T9, !!T10, !!T11&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`5&lt;!!T8, !!T9, !!T10, !!T11, !!T12&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`5&lt;!!T8, !!T9, !!T10, !!T11, !!T12&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`6&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`6&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`7&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`7&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15&gt;&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`1&lt;!!T15&gt;&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`1&lt;!!T15&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16&gt;&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`2&lt;!!T15, !!T16&gt;&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`2&lt;!!T15, !!T16&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16,T17&gt;&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`3&lt;!!T15, !!T16, !!T17&gt;&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`3&lt;!!T15, !!T16, !!T17&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16,T17&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16,T17,T18&gt;&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`4&lt;!!T15, !!T16, !!T17, !!T18&gt;&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`4&lt;!!T15, !!T16, !!T17, !!T18&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16,T17,T18&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16,T17,T18,T19&gt;&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18,T19&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`5&lt;!!T15, !!T16, !!T17, !!T18, !!T19&gt;&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`5&lt;!!T15, !!T16, !!T17, !!T18, !!T19&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16,T17,T18,T19&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
          <TypeParameter Name="T19" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18,T19&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <typeparam name="T19">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`2" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2&gt; ToValueTuple&lt;T1,T2&gt; (this Tuple&lt;T1,T2&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;!!T1, !!T2&gt; ToValueTuple&lt;T1, T2&gt;(class System.Tuple`2&lt;!!T1, !!T2&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``2(System.Tuple{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16,T17,T18,T19,T20&gt;&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18,T19,T20&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`6&lt;!!T15, !!T16, !!T17, !!T18, !!T19, !!T20&gt;&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`6&lt;!!T15, !!T16, !!T17, !!T18, !!T19, !!T20&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16,T17,T18,T19,T20&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
          <TypeParameter Name="T19" />
          <TypeParameter Name="T20" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18,T19,T20&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <typeparam name="T19">To be added.</typeparam>
          <typeparam name="T20">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,ValueTuple&lt;T15,T16,T17,T18,T19,T20,T21&gt;&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9,T10,T11,T12,T13,T14,Tuple&lt;T15,T16,T17,T18,T19,T20,T21&gt;&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, valuetype System.ValueTuple`7&lt;!!T15, !!T16, !!T17, !!T18, !!T19, !!T20, !!T21&gt;&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`8&lt;!!T8, !!T9, !!T10, !!T11, !!T12, !!T13, !!T14, class System.Tuple`7&lt;!!T15, !!T16, !!T17, !!T18, !!T19, !!T20, !!T21&gt;&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9,T10,T11,T12,T13,T14,System.ValueTuple&lt;T15,T16,T17,T18,T19,T20,T21&gt;&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
          <TypeParameter Name="T10" />
          <TypeParameter Name="T11" />
          <TypeParameter Name="T12" />
          <TypeParameter Name="T13" />
          <TypeParameter Name="T14" />
          <TypeParameter Name="T15" />
          <TypeParameter Name="T16" />
          <TypeParameter Name="T17" />
          <TypeParameter Name="T18" />
          <TypeParameter Name="T19" />
          <TypeParameter Name="T20" />
          <TypeParameter Name="T21" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9,T10,T11,T12,T13,T14,System.Tuple&lt;T15,T16,T17,T18,T19,T20,T21&gt;&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <typeparam name="T10">To be added.</typeparam>
          <typeparam name="T11">To be added.</typeparam>
          <typeparam name="T12">To be added.</typeparam>
          <typeparam name="T13">To be added.</typeparam>
          <typeparam name="T14">To be added.</typeparam>
          <typeparam name="T15">To be added.</typeparam>
          <typeparam name="T16">To be added.</typeparam>
          <typeparam name="T17">To be added.</typeparam>
          <typeparam name="T18">To be added.</typeparam>
          <typeparam name="T19">To be added.</typeparam>
          <typeparam name="T20">To be added.</typeparam>
          <typeparam name="T21">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`3" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3&gt; ToValueTuple&lt;T1,T2,T3&gt; (this Tuple&lt;T1,T2,T3&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`3&lt;!!T1, !!T2, !!T3&gt; ToValueTuple&lt;T1, T2, T3&gt;(class System.Tuple`3&lt;!!T1, !!T2, !!T3&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``3(System.Tuple{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`4" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4&gt; ToValueTuple&lt;T1,T2,T3,T4&gt; (this Tuple&lt;T1,T2,T3,T4&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`4&lt;!!T1, !!T2, !!T3, !!T4&gt; ToValueTuple&lt;T1, T2, T3, T4&gt;(class System.Tuple`4&lt;!!T1, !!T2, !!T3, !!T4&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``4(System.Tuple{``0,``1,``2,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`5" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5&gt; ToValueTuple&lt;T1,T2,T3,T4,T5&gt; (this Tuple&lt;T1,T2,T3,T4,T5&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt; ToValueTuple&lt;T1, T2, T3, T4, T5&gt;(class System.Tuple`5&lt;!!T1, !!T2, !!T3, !!T4, !!T5&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``5(System.Tuple{``0,``1,``2,``3,``4})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`6" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6&gt;(class System.Tuple`6&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``6(System.Tuple{``0,``1,``2,``3,``4,``5})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`7" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;(class System.Tuple`7&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`1&lt;!!T8&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`1&lt;!!T8&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Tuple`8" />
      </Targets>
      <Member MemberName="ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,ValueTuple&lt;T8,T9&gt;&gt; ToValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt; (this Tuple&lt;T1,T2,T3,T4,T5,T6,T7,Tuple&lt;T8,T9&gt;&gt; value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, valuetype System.ValueTuple`2&lt;!!T8, !!T9&gt;&gt; ToValueTuple&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9&gt;(class System.Tuple`8&lt;!!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, class System.Tuple`2&lt;!!T8, !!T9&gt;&gt; value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;T1,T2,T3,T4,T5,T6,T7,System.ValueTuple&lt;T8,T9&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
          <TypeParameter Name="T4" />
          <TypeParameter Name="T5" />
          <TypeParameter Name="T6" />
          <TypeParameter Name="T7" />
          <TypeParameter Name="T8" />
          <TypeParameter Name="T9" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="value" Type="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,System.Tuple&lt;T8,T9&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <typeparam name="T4">To be added.</typeparam>
          <typeparam name="T5">To be added.</typeparam>
          <typeparam name="T6">To be added.</typeparam>
          <typeparam name="T7">To be added.</typeparam>
          <typeparam name="T8">To be added.</typeparam>
          <typeparam name="T9">To be added.</typeparam>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.TupleExtensions" Member="M:System.TupleExtensions.ToValueTuple``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
