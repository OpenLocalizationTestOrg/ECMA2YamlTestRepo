### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.VariantWrapper
  id: VariantWrapper
  children:
  - System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)
  - System.Runtime.InteropServices.VariantWrapper.WrappedObject
  langs:
  - csharp
  name: VariantWrapper
  nameWithType: VariantWrapper
  fullName: System.Runtime.InteropServices.VariantWrapper
  type: Class
  summary: Marshals data of type `VT_VARIANT | VT_BYREF` from managed to unmanaged code. This class cannot be inherited.
  remarks: "The purpose of VariantWrapper is to add one level of indirection when marshaling a managed type to the corresponding `VARIANT` type.  \n  \n You can use this class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`. In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type `VT_VARIANT | VT_BYREF` to unmanaged code. The interop marshaler passed a variant of the managed type (for example, `VT_BSTR | VT_BYREF` for <xref:System.String>, or `VT_I4 | VT_BYREF` for <xref:System.Int32>), but not `VT_VARIANT | VT_BYREF`.  \n  \n One advantage of using `VT_VARIANT | VT_BYREF` variant types is that the type of data can be changed during a method call. For example, you can pass a `VT_VARIANT``| VT_BYREF` variant type that contains a `VT_BSTR` and get a variant returned that contains a `VT_I4` after a method call. Because the COM interop marshaler has no way of knowing when to pass `VT_BSTR | VT_BYREF` and when to pass `VT_VARIANT | VT_BYREF`, which points to a variant that contains a `BSTR` for parameters declared as `VARIANT *`, you can instruct the marshaler by using VariantWrapper.  \n  \n Note that early binding is not supported; you can use VariantWrapper only when calling <xref:System.Type.InvokeMember%2A> or with a Dispatch-only interface called in an early bound fashion. In C#, you must also use the `ref` keyword to specify `ByRef` semantics for any parameter of type VariantWrapper. In Visual Basic, `ByRef` semantics are added automatically for every implicit late binding call. Also note that nesting VariantWrapper objects and arrays of VariantWrapper objects is not supported."
  example:
  - "The following code example demonstrates how to use the VariantWrapper class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.  \n  \n [!CODE [System.Runtime.InteropServices.VariantWrapper#1](../CodeSnippet/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper#1)]"
  syntax:
    content: public sealed class VariantWrapper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Runtime.InteropServices.VariantWrapper
  langs:
  - csharp
  name: VariantWrapper(Object)
  nameWithType: VariantWrapper.VariantWrapper(Object)
  fullName: System.Runtime.InteropServices.VariantWrapper.VariantWrapper(Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.VariantWrapper"> class for the specified <xref:System.Object?displayProperty=fullName> parameter.
  remarks: ''
  example:
  - "The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.  \n  \n [!CODE [System.Runtime.InteropServices.VariantWrapper#1](../CodeSnippet/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper#1)]"
  syntax:
    content: public VariantWrapper (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to marshal.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.VariantWrapper.WrappedObject
  id: WrappedObject
  parent: System.Runtime.InteropServices.VariantWrapper
  langs:
  - csharp
  name: WrappedObject
  nameWithType: VariantWrapper.WrappedObject
  fullName: System.Runtime.InteropServices.VariantWrapper.WrappedObject
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper"> object.
  remarks: To be added.
  syntax:
    content: public object WrappedObject { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)
  parent: System.Runtime.InteropServices.VariantWrapper
  isExternal: false
  name: VariantWrapper(Object)
  nameWithType: VariantWrapper.VariantWrapper(Object)
  fullName: System.Runtime.InteropServices.VariantWrapper.VariantWrapper(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.InteropServices.VariantWrapper.WrappedObject
  parent: System.Runtime.InteropServices.VariantWrapper
  isExternal: false
  name: WrappedObject
  nameWithType: VariantWrapper.WrappedObject
  fullName: System.Runtime.InteropServices.VariantWrapper.WrappedObject
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
