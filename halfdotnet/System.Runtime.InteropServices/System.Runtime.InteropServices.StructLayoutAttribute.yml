### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.StructLayoutAttribute
  id: StructLayoutAttribute
  children:
  - System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)
  - System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
  - System.Runtime.InteropServices.StructLayoutAttribute.CharSet
  - System.Runtime.InteropServices.StructLayoutAttribute.Pack
  - System.Runtime.InteropServices.StructLayoutAttribute.Size
  - System.Runtime.InteropServices.StructLayoutAttribute.Value
  langs:
  - csharp
  name: StructLayoutAttribute
  nameWithType: StructLayoutAttribute
  fullName: System.Runtime.InteropServices.StructLayoutAttribute
  type: Class
  summary: Lets you control the physical layout of the data fields of a class or structure in memory.
  remarks: "You can apply this attribute to classes or structures.  \n  \n The common language runtime controls the physical layout of the data fields of a class or structure in managed memory. However, if you want to pass the type to unmanaged code, you can use the StructLayoutAttribute attribute to control the unmanaged layout of the type. Use the attribute with <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> to force the members to be laid out sequentially in the order they appear. For , <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> controls both the layout in managed memory and the layout in unmanaged memory. For non-blittable types, it controls the layout when the class or structure is marshaled to unmanaged code, but does not control the layout in managed memory. Use the attribute with <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> to control the precise position of each data member. This affects both managed and unmanaged layout, for both blittable and non-blittable types. Using <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> requires that you use the <xref:System.Runtime.InteropServices.FieldOffsetAttribute> attribute to indicate the position of each field within the type.  \n  \n C#, Visual Basic, and C++ compilers apply the <xref:System.Runtime.InteropServices.LayoutKind> layout value to structures by default. For classes, you must apply the <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> value explicitly. The [Tlbimp.exe (Type Library Importer)](../Topic/Tlbimp.exe%20\\(Type%20Library%20Importer\\).md) also applies the StructLayoutAttribute attribute; it always applies the <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> value when it imports a type library."
  example:
  - "The following example demonstrates a managed declaration of the `GetSystemTime` function and defines `MySystemTime` class with <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> layout. `GetSystemTime` gets the system time and prints to the console.  \n  \n [!CODE [StructLayoutAttribute#1](../CodeSnippet/VS_Snippets_CLR/StructLayoutAttribute#1)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class StructLayoutAttribute : Attribute
  inheritance:
  - System.Object
  - System.Attribute
  implements: []
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetHashCode
  - System.Attribute.IsDefaultAttribute
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.Match(System.Object)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Attribute.TypeId
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)
  id: '#ctor(System.Int16)'
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  name: StructLayoutAttribute(Int16)
  nameWithType: StructLayoutAttribute.StructLayoutAttribute(Int16)
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.StructLayoutAttribute(Int16)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Initalizes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"> class with the specified <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> enumeration member.
  remarks: This constructor takes an underlying 16-bit integer that represents each <xref:System.Runtime.InteropServices.LayoutKind> enumeration member. The [Tlbimp.exe (Type Library Importer)](../Topic/Tlbimp.exe%20\(Type%20Library%20Importer\).md) uses this constructor.
  syntax:
    content: public StructLayoutAttribute (short layoutKind);
    parameters:
    - id: layoutKind
      type: System.Int16
      description: A 16-bit integer that represents one of the <see cref="T:System.Runtime.InteropServices.LayoutKind"> values that specifes how the class or structure should be arranged.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
  id: '#ctor(System.Runtime.InteropServices.LayoutKind)'
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  name: StructLayoutAttribute(LayoutKind)
  nameWithType: StructLayoutAttribute.StructLayoutAttribute(LayoutKind)
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.StructLayoutAttribute(LayoutKind)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Initalizes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"> class with the specified <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> enumeration member.
  remarks: For readable code that is less prone to error, always use this constructor.
  syntax:
    content: public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);
    parameters:
    - id: layoutKind
      type: System.Runtime.InteropServices.LayoutKind
      description: One of the enumeration values that specifes how the class or structure should be arranged.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.StructLayoutAttribute.CharSet
  id: CharSet
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  name: CharSet
  nameWithType: StructLayoutAttribute.CharSet
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.CharSet
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Indicates whether string data fields within the class should be marshaled as `LPWSTR` or `LPSTR` by default.
  remarks: If the `CharSet` field is set to <xref:System.Runtime.InteropServices.CharSet?displayProperty=fullName>, all string arguments are converted to Unicode characters (`LPWSTR`) before they are passed to the unmanaged implementation. If the field is set to <xref:System.Runtime.InteropServices.CharSet?displayProperty=fullName>, the strings are converted to ANSI strings (`LPSTR`). If the `CharSet` field is set to <xref:System.Runtime.InteropServices.CharSet?displayProperty=fullName>, the conversion is platform-dependent (ANSI on Windows 98 and Windows Me, and Unicode on later versions).
  syntax:
    content: public System.Runtime.InteropServices.CharSet CharSet;
    return:
      type: System.Runtime.InteropServices.CharSet
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.StructLayoutAttribute.Pack
  id: Pack
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  name: Pack
  nameWithType: StructLayoutAttribute.Pack
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.Pack
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Controls the alignment of data fields of a class or structure in memory.
  remarks: "The Pack field controls the alignment of a type's fields in memory.  It affects both <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> and <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>. By default, the value is 0, indicating the default packing size for the current platform. The value of Pack must be 0, 1, 2, 4, 8, 16, 32, 64, or 128:  \n  \n The fields of a type instance are aligned by using the following rules:  \n  \n-   The alignment of the type is the size of its largest element (1, 2, 4, 8, etc., bytes) or the specified packing size, whichever is smaller.  \n  \n-   Each field must align with fields of its own size (1, 2, 4, 8, etc., bytes) or the alignment of the type, whichever is smaller.  Because the default alignment of the type is the size of its largest element, which is greater than or equal to all other field lengths, this usually means that fields are aligned by their size. For example, even if the largest field in a type is a 64-bit (8-byte) integer or the Pack field is set to 8, <xref:System.Byte> fields align on 1-byte boundaries, <xref:System.Int16> fields align on 2-byte boundaries, and <xref:System.Int32> fields align on 4-byte boundaries.  \n  \n-   Padding is added between fields to satisfy the alignment requirements.  \n  \n For example, consider the following structure, which consists of two <xref:System.Byte> fields and one <xref:System.Int32> field, when it is used with various values for the Pack field.  \n  \n [!CODE [System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](../CodeSnippet/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack#1)]  \n  \n> [!IMPORTANT]\n>  To successfully compile the C# examples, you must specify the `/unsafe` compiler switch.  \n  \n If you specify the default packing size, the size of the structure is 8 bytes. The two bytes occupy the first two bytes of memory, because bytes must align on one-byte boundaries. Because the default alignment of the type is 4 bytes, which is the size of its largest fields, `i3`, there are two bytes of padding followed by the integer field.  \n  \n [!CODE [System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](../CodeSnippet/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack#2)]  \n  \n If Pack is set to 2, the size of the structure is 6 bytes. As before, the two bytes occupy the first two bytes of memory. Because fields now align on 2-byte boundaries, there is no padding between the second byte and the integer.  \n  \n [!CODE [System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](../CodeSnippet/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack#3)]  \n  \n If Pack is set to 4, the size of the structure is the same as in the default case, where the type's alignment was defined by the size of its largest field, `i3`, which is 4.  \n  \n [!CODE [System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](../CodeSnippet/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack#4)]  \n  \n If Pack is set to 8, the size of the structure is the still same as in the default case, because the `i3` field aligns on a 4-byte boundary, which is smaller than the 8-byte boundary specified by the Pack field.  \n  \n [!CODE [System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](../CodeSnippet/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack#5)]  \n  \n To take another example, consider the following structure, which consists of two byte fields, one 32-bit signed integer field, one single-element byte array, and a decimal value. With the default packing size, the size of the structure is 28 bytes. The two bytes occupy the first two bytes of memory, followed by two bytes of padding, followed by the integer. Next is the one-byte array, followed by three bytes of padding. Finally, the <xref:System.Decimal> field, d5, aligns on a 4-byte boundary because a decimal value consists of four <xref:System.Int32> fields, so its alignment is based on the size of the largest of its fields rather than on the size of the <xref:System.Decimal> structure as a whole.  \n  \n [!CODE [System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](../CodeSnippet/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack#6)]  \n  \n If Pack is set to 2, the size of the structure is 24 bytes. In comparison with the default alignment, the two bytes of padding between the two bytes and the integer have been removed because the type's alignment is now 4 rather than 2. And the three bytes of padding after `a4` have been replaced by one byte of padding, since `d5` now aligns on a 2-byte boundary rather than a 4-byte boundary.  \n  \n [!CODE [System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](../CodeSnippet/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack#7)]  \n  \n If Pack is set to 8, the size of the structure is the same as in the default case, because all the alignment requirements in this structure are less than 8.  \n  \n [!CODE [System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](../CodeSnippet/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack#8)]  \n  \n The Pack field is frequently used when structures are exported during disk and network write operations. The field is also frequently used during platform invoke and interop operations.  \n  \n Occasionally, the field is used to reduce memory requirements by producing a tighter packing size. However, this usage requires careful consideration of actual hardware constraints, and may actually degrade performance."
  syntax:
    content: public int Pack;
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.StructLayoutAttribute.Size
  id: Size
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  name: Size
  nameWithType: StructLayoutAttribute.Size
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.Size
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Indicates the absolute size of the class or structure.
  remarks: This field must be equal or greater than the total size, in bytes, of the members of the class or structure. This field is primarily for compiler writers who want to extend the memory occupied by a structure for direct, unmanaged access. For example, you can use this field when working with unions that are not represented in metadata directly.
  syntax:
    content: public int Size;
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.StructLayoutAttribute.Value
  id: Value
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  langs:
  - csharp
  name: Value
  nameWithType: StructLayoutAttribute.Value
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.Value
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Gets the <see cref="T:System.Runtime.InteropServices.LayoutKind"> value that specifies how the class or structure is arranged.
  remarks: To be added.
  syntax:
    content: public System.Runtime.InteropServices.LayoutKind Value { get; }
    return:
      type: System.Runtime.InteropServices.LayoutKind
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  isExternal: false
  name: StructLayoutAttribute(Int16)
  nameWithType: StructLayoutAttribute.StructLayoutAttribute(Int16)
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.StructLayoutAttribute(Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  isExternal: false
  name: StructLayoutAttribute(LayoutKind)
  nameWithType: StructLayoutAttribute.StructLayoutAttribute(LayoutKind)
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.StructLayoutAttribute(LayoutKind)
- uid: System.Runtime.InteropServices.LayoutKind
  parent: System.Runtime.InteropServices
  isExternal: false
  name: LayoutKind
  nameWithType: LayoutKind
  fullName: System.Runtime.InteropServices.LayoutKind
- uid: System.Runtime.InteropServices.StructLayoutAttribute.CharSet
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  isExternal: false
  name: CharSet
  nameWithType: StructLayoutAttribute.CharSet
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.CharSet
- uid: System.Runtime.InteropServices.CharSet
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CharSet
  nameWithType: CharSet
  fullName: System.Runtime.InteropServices.CharSet
- uid: System.Runtime.InteropServices.StructLayoutAttribute.Pack
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  isExternal: false
  name: Pack
  nameWithType: StructLayoutAttribute.Pack
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.Pack
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.StructLayoutAttribute.Size
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  isExternal: false
  name: Size
  nameWithType: StructLayoutAttribute.Size
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.Size
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.StructLayoutAttribute.Value
  parent: System.Runtime.InteropServices.StructLayoutAttribute
  isExternal: false
  name: Value
  nameWithType: StructLayoutAttribute.Value
  fullName: System.Runtime.InteropServices.StructLayoutAttribute.Value
- uid: System.Runtime.InteropServices.LayoutKind
  parent: System.Runtime.InteropServices
  isExternal: false
  name: LayoutKind
  nameWithType: LayoutKind
  fullName: System.Runtime.InteropServices.LayoutKind
