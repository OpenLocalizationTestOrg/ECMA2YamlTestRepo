### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.SEHException
  id: SEHException
  children:
  - System.Runtime.InteropServices.SEHException.#ctor
  - System.Runtime.InteropServices.SEHException.#ctor(System.String)
  - System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)
  - System.Runtime.InteropServices.SEHException.CanResume
  langs:
  - csharp
  name: SEHException
  nameWithType: SEHException
  fullName: System.Runtime.InteropServices.SEHException
  type: Class
  summary: Represents structured exception handling (SEH) errors.
  remarks: "The SEHException class handles SEH errors that are thrown from unmanaged code, but that have not been mapped to another .NET Framework exception. The SEHException class also corresponds to the `HRESULT``E_FAIL` (0x80004005).  \n  \n The .NET Framework often encounters unmanaged SEH exceptions that are automatically mapped to managed equivalents. There are two common unmanaged SEH exceptions:  \n  \n-   `STATUS_NO_MEMORY` exceptions are automatically mapped to the <xref:System.OutOfMemoryException> class.  \n  \n-   `STATUS_ACCESS_VIOLATION` exceptions are automatically mapped as follows:  \n  \n    -   If `legacyNullReferencePolicy` is applied, all access violations are mapped to the <xref:System.NullReferenceException> class.  \n  \n    -   If the address at which the read/write was attempted is not in JIT-compiled code, the exception is mapped to the <xref:System.AccessViolationException> class.  \n  \n    -   If the address at which the read/write was attempted is in JIT-compiled code, but it is not in the OS Null partition area, the exception is mapped to the <xref:System.AccessViolationException> class.  \n  \n    -   If there is no `legacyNullReferencePolicy`, and the address at which the read/write was attempted is in JIT-compiled code and in the OS Null partition area, the exception is mapped to the <xref:System.NullReferenceException> class.  \n  \n Any SEH exception that is not automatically mapped to a specific exception is mapped to the SEHException class by default.  \n  \n For more information, search on \"unmanaged exceptions\" and \"Structured Exception Handling\" in the MSDN Library.  \n  \n Note that the SEHException class does not cause unmanaged C++ exception destructors to be called. To ensure that unmanaged C++ exception destructors are called, use the following syntax in the `catch` block.  \n  \n [Visual Basic]  \n  \n```  \nCatch   \n     ' Handle catch here.  \nEnd Try  \n```  \n  \n [C#]  \n  \n```  \ncatch  \n{  \n     // Handle catch here.  \n}  \n```  \n  \n [C++]  \n  \n```  \ncatch(â€¦)  \n{  \n     // Handle catch here.  \n}   \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SEHException : System.Runtime.InteropServices.ExternalException
  inheritance:
  - System.Object
  - System.Exception
  - System.SystemException
  - System.Runtime.InteropServices.ExternalException
  implements: []
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.GetBaseException
  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Exception.GetType
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Message
  - System.Exception.SerializeObjectState
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.TargetSite
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Runtime.InteropServices.ExternalException.ErrorCode
  - System.Runtime.InteropServices.ExternalException.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SEHException.#ctor
  id: '#ctor'
  parent: System.Runtime.InteropServices.SEHException
  langs:
  - csharp
  name: SEHException()
  nameWithType: SEHException.SEHException()
  fullName: System.Runtime.InteropServices.SEHException.SEHException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException"> class.
  remarks: "The <xref:System.Runtime.InteropServices.SEHException> class inherits from the <xref:System.Runtime.InteropServices.ExternalException> class. This constructor sets the properties of the <xref:System.Exception> object to the values in the following table.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|A localized error message string.|"
  syntax:
    content: public SEHException ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SEHException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Runtime.InteropServices.SEHException
  langs:
  - csharp
  name: SEHException(String)
  nameWithType: SEHException.SEHException(String)
  fullName: System.Runtime.InteropServices.SEHException.SEHException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException"> class with a specified message.
  remarks: "<xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>. This constructor sets the properties of the <xref:System.Exception> object as shown in the following table.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|.|"
  syntax:
    content: public SEHException (string message);
    parameters:
    - id: message
      type: System.String
      description: The message that indicates the reason for the exception.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Runtime.InteropServices.SEHException
  langs:
  - csharp
  name: SEHException(SerializationInfo,StreamingContext)
  nameWithType: SEHException.SEHException(SerializationInfo,StreamingContext)
  fullName: System.Runtime.InteropServices.SEHException.SEHException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException"> class from serialization data.
  remarks: "This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see the <xref:System.Runtime.Serialization> namespace.  \n  \n <xref:System.Runtime.InteropServices.SEHException> inherits from <xref:System.Runtime.InteropServices.ExternalException>."
  syntax:
    content: protected SEHException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object that holds the serialized object data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The contextual information about the source or destination.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Runtime.InteropServices.SEHException
  langs:
  - csharp
  name: SEHException(String,Exception)
  nameWithType: SEHException.SEHException(String,Exception)
  fullName: System.Runtime.InteropServices.SEHException.SEHException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException"> class with a specified error message and a reference to the inner exception that is the cause of this exception.
  remarks: "An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.Runtime.InteropServices.SEHException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \n|<xref:System.Exception.Message%2A>|The error message string.|"
  syntax:
    content: public SEHException (string message, Exception inner);
    parameters:
    - id: message
      type: System.String
      description: The error message that explains the reason for the exception.
    - id: inner
      type: System.Exception
      description: The exception that is the cause of the current exception. If the  parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SEHException.CanResume
  id: CanResume
  parent: System.Runtime.InteropServices.SEHException
  langs:
  - csharp
  name: CanResume()
  nameWithType: SEHException.CanResume()
  fullName: System.Runtime.InteropServices.SEHException.CanResume()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.
  remarks: If CanResume returns `true`, then a filtered exception handler can correct the problem that caused the exception, and the code will continue from the point at which the exception was thrown.
  syntax:
    content: public virtual bool CanResume ();
    parameters: []
    return:
      type: System.Boolean
      description: Always `false`, because resumable exceptions are not implemented.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Runtime.InteropServices.ExternalException
  isExternal: false
  name: System.Runtime.InteropServices.ExternalException
- uid: System.Runtime.InteropServices.SEHException.#ctor
  parent: System.Runtime.InteropServices.SEHException
  isExternal: false
  name: SEHException()
  nameWithType: SEHException.SEHException()
  fullName: System.Runtime.InteropServices.SEHException.SEHException()
- uid: System.Runtime.InteropServices.SEHException.#ctor(System.String)
  parent: System.Runtime.InteropServices.SEHException
  isExternal: false
  name: SEHException(String)
  nameWithType: SEHException.SEHException(String)
  fullName: System.Runtime.InteropServices.SEHException.SEHException(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.InteropServices.SEHException
  isExternal: false
  name: SEHException(SerializationInfo,StreamingContext)
  nameWithType: SEHException.SEHException(SerializationInfo,StreamingContext)
  fullName: System.Runtime.InteropServices.SEHException.SEHException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)
  parent: System.Runtime.InteropServices.SEHException
  isExternal: false
  name: SEHException(String,Exception)
  nameWithType: SEHException.SEHException(String,Exception)
  fullName: System.Runtime.InteropServices.SEHException.SEHException(String,Exception)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Runtime.InteropServices.SEHException.CanResume
  parent: System.Runtime.InteropServices.SEHException
  isExternal: false
  name: CanResume()
  nameWithType: SEHException.CanResume()
  fullName: System.Runtime.InteropServices.SEHException.CanResume()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
