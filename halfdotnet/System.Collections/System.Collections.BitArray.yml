### YamlMime:ManagedReference
items:
- uid: System.Collections.BitArray
  id: BitArray
  children:
  - System.Collections.BitArray.#ctor(System.Boolean[])
  - System.Collections.BitArray.#ctor(System.Byte[])
  - System.Collections.BitArray.#ctor(System.Collections.BitArray)
  - System.Collections.BitArray.#ctor(System.Int32)
  - System.Collections.BitArray.#ctor(System.Int32[])
  - System.Collections.BitArray.#ctor(System.Int32,System.Boolean)
  - System.Collections.BitArray.And(System.Collections.BitArray)
  - System.Collections.BitArray.Clone
  - System.Collections.BitArray.CopyTo(System.Array,System.Int32)
  - System.Collections.BitArray.Count
  - System.Collections.BitArray.Get(System.Int32)
  - System.Collections.BitArray.GetEnumerator
  - System.Collections.BitArray.IsReadOnly
  - System.Collections.BitArray.IsSynchronized
  - System.Collections.BitArray.Item(System.Int32)
  - System.Collections.BitArray.Length
  - System.Collections.BitArray.Not
  - System.Collections.BitArray.Or(System.Collections.BitArray)
  - System.Collections.BitArray.Set(System.Int32,System.Boolean)
  - System.Collections.BitArray.SetAll(System.Boolean)
  - System.Collections.BitArray.SyncRoot
  - System.Collections.BitArray.Xor(System.Collections.BitArray)
  langs:
  - csharp
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
  type: Class
  summary: Manages a compact array of bit values, which are represented as Booleans, where `true` indicates that the bit is on (1) and `false` indicates the bit is off (0).
  remarks: "The BitArray class is a collection class in which the capacity is always the same as the count. Elements are added to a BitArray by increasing the <xref:System.Collections.BitArray.Length%2A> property; elements are deleted by decreasing the <xref:System.Collections.BitArray.Length%2A> property. The size of a BitArray is controlled by the client; indexing past the end of the BitArray throws an <xref:System.ArgumentException>.The BitArray class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <xref:System.Collections.BitArray.And%2A>, <xref:System.Collections.BitArray.Or%2A>, <xref:System.Collections.BitArray.Xor%2A> , <xref:System.Collections.BitArray.Not%2A>, and <xref:System.Collections.BitArray.SetAll%2A>.  \n  \n The <xref:System.Collections.Specialized.BitVector32> class is a structure that provides the same functionality as BitArray, but with faster performance. <xref:System.Collections.Specialized.BitVector32> is faster because it is a value type and therefore allocated on the stack, whereas BitArray is a reference type and, therefore, allocated on the heap.  \n  \n <xref:System.Collections.Specialized.BitVector32?displayProperty=fullName> can store exactly 32 bits, whereas BitArray can store a variable number of bits. <xref:System.Collections.Specialized.BitVector32> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user. However, if the number of required bit flags is unknown, is variable, or is greater than 32, use BitArray instead.  \n  \n BitArray is in the <xref:System.Collections> namespace; <xref:System.Collections.Specialized.BitVector32> is in the <xref:System.Collections.Specialized> namespace.  \n  \n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based."
  example:
  - "The following code example shows how to create and initialize a BitArray and how to print out its values.  \n  \n [!CODE [Classic BitArray Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray Example#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class BitArray : ICloneable, System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.#ctor(System.Boolean[])
  id: '#ctor(System.Boolean[])'
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: BitArray(Boolean[])
  nameWithType: BitArray.BitArray(Boolean[])
  fullName: System.Collections.BitArray.BitArray(Boolean[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Initializes a new instance of the <see cref="T:System.Collections.BitArray"> class that contains bit values copied from the specified array of Booleans.
  remarks: This constructor is an O() operation, where  is the number of elements in .
  syntax:
    content: public BitArray (bool[] values);
    parameters:
    - id: values
      type: System.Boolean[]
      description: An array of Booleans to copy.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: BitArray(Byte[])
  nameWithType: BitArray.BitArray(Byte[])
  fullName: System.Collections.BitArray.BitArray(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Initializes a new instance of the <see cref="T:System.Collections.BitArray"> class that contains bit values copied from the specified array of bytes.
  remarks: "The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on. The Least Significant Bit of each byte represents the lowest index value: \"  [0] & 1\" represents bit 0, \"  [0] & 2\" represents bit 1, \"  [0] & 4\" represents bit 2, and so on.  \n  \n This constructor is an O() operation, where  is the number of elements in ."
  syntax:
    content: public BitArray (byte[] bytes);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: An array of bytes containing the values to copy, where each byte represents eight consecutive bits.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.#ctor(System.Collections.BitArray)
  id: '#ctor(System.Collections.BitArray)'
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: BitArray(BitArray)
  nameWithType: BitArray.BitArray(BitArray)
  fullName: System.Collections.BitArray.BitArray(BitArray)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Initializes a new instance of the <see cref="T:System.Collections.BitArray"> class that contains bit values copied from the specified <see cref="T:System.Collections.BitArray">.
  remarks: This constructor is an O() operation, where  is the number of elements in .
  syntax:
    content: public BitArray (System.Collections.BitArray bits);
    parameters:
    - id: bits
      type: System.Collections.BitArray
      description: The <see cref="T:System.Collections.BitArray"> to copy.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: BitArray(Int32)
  nameWithType: BitArray.BitArray(Int32)
  fullName: System.Collections.BitArray.BitArray(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Initializes a new instance of the <see cref="T:System.Collections.BitArray"> class that can hold the specified number of bit values, which are initially set to `false`.
  remarks: This constructor is an O() operation, where  is .
  syntax:
    content: public BitArray (int length);
    parameters:
    - id: length
      type: System.Int32
      description: The number of bit values in the new <see cref="T:System.Collections.BitArray">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.#ctor(System.Int32[])
  id: '#ctor(System.Int32[])'
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: BitArray(Int32[])
  nameWithType: BitArray.BitArray(Int32[])
  fullName: System.Collections.BitArray.BitArray(Int32[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Initializes a new instance of the <see cref="T:System.Collections.BitArray"> class that contains bit values copied from the specified array of 32-bit integers.
  remarks: "The number in the first  array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on. The Least Significant Bit of each integer represents the lowest index value: \"  [0] & 1\" represents bit 0, \"  [0] & 2\" represents bit 1, \"  [0] & 4\" represents bit 2, and so on.  \n  \n This constructor is an O() operation, where  is the number of elements in ."
  syntax:
    content: public BitArray (int[] values);
    parameters:
    - id: values
      type: System.Int32[]
      description: An array of integers containing the values to copy, where each integer represents 32 consecutive bits.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: BitArray(Int32,Boolean)
  nameWithType: BitArray.BitArray(Int32,Boolean)
  fullName: System.Collections.BitArray.BitArray(Int32,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Initializes a new instance of the <see cref="T:System.Collections.BitArray"> class that can hold the specified number of bit values, which are initially set to the specified value.
  remarks: This constructor is an O() operation, where  is .
  syntax:
    content: public BitArray (int length, bool defaultValue);
    parameters:
    - id: length
      type: System.Int32
      description: The number of bit values in the new <see cref="T:System.Collections.BitArray">.
    - id: defaultValue
      type: System.Boolean
      description: The Boolean value to assign to each bit.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.And(System.Collections.BitArray)
  id: And(System.Collections.BitArray)
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: And(BitArray)
  nameWithType: BitArray.And(BitArray)
  fullName: System.Collections.BitArray.And(BitArray)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs the bitwise AND operation between the elements of the current <see cref="T:System.Collections.BitArray"> object and the corresponding elements in the specified array. The current <see cref="T:System.Collections.BitArray"> object will be modified to store the result of the bitwise AND operation.
  remarks: "The bitwise AND operation returns `true` if both operands are `true`, and returns `false` if one or both operands are `false`.  \n  \n This method is an O() operation, where  is <xref:System.Collections.BitArray.Count%2A>."
  example:
  - "The following code example shows how to perform the bitwise AND operation between two <xref:System.Collections.BitArray> objects.  \n  \n [!CODE [Classic BitArray.And Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray.And Example#1)]"
  syntax:
    content: public System.Collections.BitArray And (System.Collections.BitArray value);
    parameters:
    - id: value
      type: System.Collections.BitArray
      description: The array with which to perform the bitwise AND operation.
    return:
      type: System.Collections.BitArray
      description: An array containing the result of the bitwise AND operation, which is a reference to the current <see cref="T:System.Collections.BitArray"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.Clone
  id: Clone
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: Clone()
  nameWithType: BitArray.Clone()
  fullName: System.Collections.BitArray.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Creates a shallow copy of the <see cref="T:System.Collections.BitArray">.
  remarks: "A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.  \n  \n In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.  \n  \n This method is an O() operation, where  is <xref:System.Collections.BitArray.Count%2A>."
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: A shallow copy of the <see cref="T:System.Collections.BitArray">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: BitArray.CopyTo(Array,Int32)
  fullName: System.Collections.BitArray.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Copies the entire <see cref="T:System.Collections.BitArray"> to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array.
  remarks: "The specified array must be of a compatible type. Only `bool`, `int`, and `byte` types of arrays are supported.  \n  \n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n This method is an O() operation, where  is <xref:System.Collections.BitArray.Count%2A>."
  example:
  - "The following code example shows how to copy a <xref:System.Collections.BitArray> into a one-dimensional <xref:System.Array>.  \n  \n [!CODE [Classic BitArray.CopyTo Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray.CopyTo Example#1)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> that is the destination of the elements copied from <xref:System.Collections.BitArray>. The <see cref="T:System.Array"> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in  at which copying begins.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.Count
  id: Count
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: Count
  nameWithType: BitArray.Count
  fullName: System.Collections.BitArray.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets the number of elements contained in the <see cref="T:System.Collections.BitArray">.
  remarks: "<xref:System.Collections.BitArray.Length%2A> and Count return the same value. <xref:System.Collections.BitArray.Length%2A> can be set to a specific value, but Count is read-only.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.Get(System.Int32)
  id: Get(System.Int32)
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: Get(Int32)
  nameWithType: BitArray.Get(Int32)
  fullName: System.Collections.BitArray.Get(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray">.
  remarks: This method is an O(1) operation.
  example:
  - "The following code example shows how to set and get specific elements in a <xref:System.Collections.BitArray>.  \n  \n [!CODE [Classic BitArray.Get Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray.Get Example#1)]"
  syntax:
    content: public bool Get (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the value to get.
    return:
      type: System.Boolean
      description: The value of the bit at position .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: BitArray.GetEnumerator()
  fullName: System.Collections.BitArray.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Returns an enumerator that iterates through the <see cref="T:System.Collections.BitArray">.
  remarks: "The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <see cref="T:System.Collections.IEnumerator"> for the entire <xref:System.Collections.BitArray>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: BitArray.IsReadOnly
  fullName: System.Collections.BitArray.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets a value indicating whether the <see cref="T:System.Collections.BitArray"> is read-only.
  remarks: "<xref:System.Collections.BitArray> implements the IsReadOnly property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface.  \n  \n A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n This method is an O(1) operation."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: BitArray.IsSynchronized
  fullName: System.Collections.BitArray.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets a value indicating whether access to the <see cref="T:System.Collections.BitArray"> is synchronized (thread safe).
  remarks: "<xref:System.Collections.BitArray> implements the IsSynchronized property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.BitArray.SyncRoot%2A> during the entire enumeration.  \n  \n [!CODE [Classic BitArray Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray Example#2)]  \n  \n This method is an O(1) operation."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: BitArray.Item(Int32)
  fullName: System.Collections.BitArray.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets or sets the value of the bit at a specific position in the <see cref="T:System.Collections.BitArray">.
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation."
  syntax:
    content: public bool this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the value to get or set.
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.Length
  id: Length
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: Length
  nameWithType: BitArray.Length
  fullName: System.Collections.BitArray.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets or sets the number of elements in the <see cref="T:System.Collections.BitArray">.
  remarks: "Length and <xref:System.Collections.BitArray.Count%2A> return the same value. Length can be set to a specific value, but <xref:System.Collections.BitArray.Count%2A> is read-only.  \n  \n If Length is set to a value that is less than <xref:System.Collections.BitArray.Count%2A>, the <xref:System.Collections.BitArray> is truncated and the elements after the index  -1 are deleted.  \n  \n If Length is set to a value that is greater than <xref:System.Collections.BitArray.Count%2A>, the new elements are set to `false`.  \n  \n Retrieving the value of this property is an O(1) operation. Setting this property is an O() operation."
  syntax:
    content: public int Length { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.Not
  id: Not
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: Not()
  nameWithType: BitArray.Not()
  fullName: System.Collections.BitArray.Not()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Inverts all the bit values in the current <see cref="T:System.Collections.BitArray">, so that elements set to `true` are changed to `false`, and elements set to `false` are changed to `true`.
  remarks: This method is an O() operation, where  is <xref:System.Collections.BitArray.Count%2A>.
  example:
  - "The following code example shows how to apply NOT to a <xref:System.Collections.BitArray>.  \n  \n [!CODE [Classic BitArray.Not Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray.Not Example#1)]"
  syntax:
    content: public System.Collections.BitArray Not ();
    parameters: []
    return:
      type: System.Collections.BitArray
      description: The current instance with inverted bit values.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.Or(System.Collections.BitArray)
  id: Or(System.Collections.BitArray)
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: Or(BitArray)
  nameWithType: BitArray.Or(BitArray)
  fullName: System.Collections.BitArray.Or(BitArray)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs the bitwise OR operation between the elements of the current <see cref="T:System.Collections.BitArray"> object and the corresponding elements in the specified array. The current <see cref="T:System.Collections.BitArray"> object will be modified to store the result of the bitwise OR operation.
  remarks: "The bitwise OR operation returns `true` if one or both operands are `true`, and returns `false` if both operands are `false`.  \n  \n This method is an O() operation, where  is <xref:System.Collections.BitArray.Count%2A>."
  example:
  - "The following code example shows how to perform the OR operation between two <xref:System.Collections.BitArray> objects.  \n  \n [!CODE [Classic BitArray.Or Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray.Or Example#1)]"
  syntax:
    content: public System.Collections.BitArray Or (System.Collections.BitArray value);
    parameters:
    - id: value
      type: System.Collections.BitArray
      description: The array with which to perform the bitwise OR operation.
    return:
      type: System.Collections.BitArray
      description: An array containing the result of the bitwise OR operation, which is a reference to the current <see cref="T:System.Collections.BitArray"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.Set(System.Int32,System.Boolean)
  id: Set(System.Int32,System.Boolean)
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: Set(Int32,Boolean)
  nameWithType: BitArray.Set(Int32,Boolean)
  fullName: System.Collections.BitArray.Set(Int32,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Sets the bit at a specific position in the <see cref="T:System.Collections.BitArray"> to the specified value.
  remarks: This method is an O(1) operation.
  example:
  - "The following code example shows how to set and get specific elements in a <xref:System.Collections.BitArray>.  \n  \n [!CODE [Classic BitArray.Get Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray.Get Example#1)]"
  syntax:
    content: public void Set (int index, bool value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the bit to set.
    - id: value
      type: System.Boolean
      description: The Boolean value to assign to the bit.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.SetAll(System.Boolean)
  id: SetAll(System.Boolean)
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: SetAll(Boolean)
  nameWithType: BitArray.SetAll(Boolean)
  fullName: System.Collections.BitArray.SetAll(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Sets all bits in the <see cref="T:System.Collections.BitArray"> to the specified value.
  remarks: This method is an O() operation, where  is <xref:System.Collections.BitArray.Count%2A>.
  example:
  - "The following code example shows how to set and get specific elements in a <xref:System.Collections.BitArray>.  \n  \n [!CODE [Classic BitArray.Get Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray.Get Example#1)]"
  syntax:
    content: public void SetAll (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to assign to all bits.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.SyncRoot
  id: SyncRoot
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: SyncRoot
  nameWithType: BitArray.SyncRoot
  fullName: System.Collections.BitArray.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.BitArray">.
  remarks: "Derived classes can provide their own synchronized version of the <xref:System.Collections.BitArray> using the SyncRoot property. The synchronizing code must perform operations on the SyncRoot of the <xref:System.Collections.BitArray>, not directly on the <xref:System.Collections.BitArray>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.BitArray> object.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!CODE [Classic BitArray Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray Example#2)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.BitArray.Xor(System.Collections.BitArray)
  id: Xor(System.Collections.BitArray)
  parent: System.Collections.BitArray
  langs:
  - csharp
  name: Xor(BitArray)
  nameWithType: BitArray.Xor(BitArray)
  fullName: System.Collections.BitArray.Xor(BitArray)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs the bitwise exclusive OR operation between the elements of the current <see cref="T:System.Collections.BitArray"> object against the corresponding elements in the specified array. The current <see cref="T:System.Collections.BitArray"> object will be modified to store the result of the bitwise exclusive OR operation.
  remarks: "The bitwise exclusive OR operation returns `true` if exactly one operand is `true`, and returns `false` if both operands have the same Boolean value.  \n  \n This method is an O() operation, where  is <xref:System.Collections.BitArray.Count%2A>."
  example:
  - "The following code example shows how to perform the XOR operation between two <xref:System.Collections.BitArray> objects.  \n  \n [!CODE [Classic BitArray.Xor Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic BitArray.Xor Example#1)]"
  syntax:
    content: public System.Collections.BitArray Xor (System.Collections.BitArray value);
    parameters:
    - id: value
      type: System.Collections.BitArray
      description: The array with which to perform the bitwise exclusive OR operation.
    return:
      type: System.Collections.BitArray
      description: An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <see cref="T:System.Collections.BitArray"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.BitArray.#ctor(System.Boolean[])
  parent: System.Collections.BitArray
  isExternal: false
  name: BitArray(Boolean[])
  nameWithType: BitArray.BitArray(Boolean[])
  fullName: System.Collections.BitArray.BitArray(Boolean[])
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean[]
- uid: System.Collections.BitArray.#ctor(System.Byte[])
  parent: System.Collections.BitArray
  isExternal: false
  name: BitArray(Byte[])
  nameWithType: BitArray.BitArray(Byte[])
  fullName: System.Collections.BitArray.BitArray(Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Collections.BitArray.#ctor(System.Collections.BitArray)
  parent: System.Collections.BitArray
  isExternal: false
  name: BitArray(BitArray)
  nameWithType: BitArray.BitArray(BitArray)
  fullName: System.Collections.BitArray.BitArray(BitArray)
- uid: System.Collections.BitArray
  parent: System.Collections
  isExternal: false
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
- uid: System.Collections.BitArray.#ctor(System.Int32)
  parent: System.Collections.BitArray
  isExternal: false
  name: BitArray(Int32)
  nameWithType: BitArray.BitArray(Int32)
  fullName: System.Collections.BitArray.BitArray(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.BitArray.#ctor(System.Int32[])
  parent: System.Collections.BitArray
  isExternal: false
  name: BitArray(Int32[])
  nameWithType: BitArray.BitArray(Int32[])
  fullName: System.Collections.BitArray.BitArray(Int32[])
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
- uid: System.Collections.BitArray.#ctor(System.Int32,System.Boolean)
  parent: System.Collections.BitArray
  isExternal: false
  name: BitArray(Int32,Boolean)
  nameWithType: BitArray.BitArray(Int32,Boolean)
  fullName: System.Collections.BitArray.BitArray(Int32,Boolean)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.BitArray.And(System.Collections.BitArray)
  parent: System.Collections.BitArray
  isExternal: false
  name: And(BitArray)
  nameWithType: BitArray.And(BitArray)
  fullName: System.Collections.BitArray.And(BitArray)
- uid: System.Collections.BitArray
  parent: System.Collections
  isExternal: false
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
- uid: System.Collections.BitArray
  parent: System.Collections
  isExternal: false
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
- uid: System.Collections.BitArray.Clone
  parent: System.Collections.BitArray
  isExternal: false
  name: Clone()
  nameWithType: BitArray.Clone()
  fullName: System.Collections.BitArray.Clone()
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.BitArray.CopyTo(System.Array,System.Int32)
  parent: System.Collections.BitArray
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: BitArray.CopyTo(Array,Int32)
  fullName: System.Collections.BitArray.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.BitArray.Count
  parent: System.Collections.BitArray
  isExternal: false
  name: Count
  nameWithType: BitArray.Count
  fullName: System.Collections.BitArray.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.BitArray.Get(System.Int32)
  parent: System.Collections.BitArray
  isExternal: false
  name: Get(Int32)
  nameWithType: BitArray.Get(Int32)
  fullName: System.Collections.BitArray.Get(Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.BitArray.GetEnumerator
  parent: System.Collections.BitArray
  isExternal: false
  name: GetEnumerator()
  nameWithType: BitArray.GetEnumerator()
  fullName: System.Collections.BitArray.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.BitArray.IsReadOnly
  parent: System.Collections.BitArray
  isExternal: false
  name: IsReadOnly
  nameWithType: BitArray.IsReadOnly
  fullName: System.Collections.BitArray.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.BitArray.IsSynchronized
  parent: System.Collections.BitArray
  isExternal: false
  name: IsSynchronized
  nameWithType: BitArray.IsSynchronized
  fullName: System.Collections.BitArray.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.BitArray.Item(System.Int32)
  parent: System.Collections.BitArray
  isExternal: false
  name: Item(Int32)
  nameWithType: BitArray.Item(Int32)
  fullName: System.Collections.BitArray.Item(Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.BitArray.Length
  parent: System.Collections.BitArray
  isExternal: false
  name: Length
  nameWithType: BitArray.Length
  fullName: System.Collections.BitArray.Length
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.BitArray.Not
  parent: System.Collections.BitArray
  isExternal: false
  name: Not()
  nameWithType: BitArray.Not()
  fullName: System.Collections.BitArray.Not()
- uid: System.Collections.BitArray
  parent: System.Collections
  isExternal: false
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
- uid: System.Collections.BitArray.Or(System.Collections.BitArray)
  parent: System.Collections.BitArray
  isExternal: false
  name: Or(BitArray)
  nameWithType: BitArray.Or(BitArray)
  fullName: System.Collections.BitArray.Or(BitArray)
- uid: System.Collections.BitArray
  parent: System.Collections
  isExternal: false
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
- uid: System.Collections.BitArray
  parent: System.Collections
  isExternal: false
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
- uid: System.Collections.BitArray.Set(System.Int32,System.Boolean)
  parent: System.Collections.BitArray
  isExternal: false
  name: Set(Int32,Boolean)
  nameWithType: BitArray.Set(Int32,Boolean)
  fullName: System.Collections.BitArray.Set(Int32,Boolean)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.BitArray.SetAll(System.Boolean)
  parent: System.Collections.BitArray
  isExternal: false
  name: SetAll(Boolean)
  nameWithType: BitArray.SetAll(Boolean)
  fullName: System.Collections.BitArray.SetAll(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.BitArray.SyncRoot
  parent: System.Collections.BitArray
  isExternal: false
  name: SyncRoot
  nameWithType: BitArray.SyncRoot
  fullName: System.Collections.BitArray.SyncRoot
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.BitArray.Xor(System.Collections.BitArray)
  parent: System.Collections.BitArray
  isExternal: false
  name: Xor(BitArray)
  nameWithType: BitArray.Xor(BitArray)
  fullName: System.Collections.BitArray.Xor(BitArray)
- uid: System.Collections.BitArray
  parent: System.Collections
  isExternal: false
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
- uid: System.Collections.BitArray
  parent: System.Collections
  isExternal: false
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
