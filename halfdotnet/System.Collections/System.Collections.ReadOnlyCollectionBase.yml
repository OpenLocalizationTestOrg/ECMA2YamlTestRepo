### YamlMime:ManagedReference
items:
- uid: System.Collections.ReadOnlyCollectionBase
  id: ReadOnlyCollectionBase
  children:
  - System.Collections.ReadOnlyCollectionBase.#ctor
  - System.Collections.ReadOnlyCollectionBase.Count
  - System.Collections.ReadOnlyCollectionBase.GetEnumerator
  - System.Collections.ReadOnlyCollectionBase.InnerList
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: ReadOnlyCollectionBase
  nameWithType: ReadOnlyCollectionBase
  fullName: System.Collections.ReadOnlyCollectionBase
  type: Class
  summary: Provides the `abstract` base class for a strongly typed non-generic read-only collection.
  remarks: A ReadOnlyCollectionBase instance is always read-only. See <xref:System.Collections.CollectionBase> for a modifiable version of this class.
  example:
  - "The following code example implements the ReadOnlyCollectionBase class.  \n  \n [!CODE [System.Collections.ReadOnlyCollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.ReadOnlyCollectionBase#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class ReadOnlyCollectionBase : System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.ReadOnlyCollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: ReadOnlyCollectionBase()
  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()
  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Initializes a new instance of the <see cref="T:System.Collections.ReadOnlyCollectionBase"> class.
  remarks: This constructor is an O(1) operation.
  syntax:
    content: protected ReadOnlyCollectionBase ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.ReadOnlyCollectionBase.Count
  id: Count
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: Count
  nameWithType: ReadOnlyCollectionBase.Count
  fullName: System.Collections.ReadOnlyCollectionBase.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets the number of elements contained in the <see cref="T:System.Collections.ReadOnlyCollectionBase"> instance.
  remarks: ''
  example:
  - "The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \n  \n [!CODE [System.Collections.ReadOnlyCollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.ReadOnlyCollectionBase#1)]"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ReadOnlyCollectionBase.GetEnumerator()
  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Returns an enumerator that iterates through the <see cref="T:System.Collections.ReadOnlyCollectionBase"> instance.
  remarks: "The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \n  \n [!CODE [System.Collections.ReadOnlyCollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.ReadOnlyCollectionBase#1)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <see cref="T:System.Collections.IEnumerator"> for the <xref:System.Collections.ReadOnlyCollectionBase> instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.ReadOnlyCollectionBase.InnerList
  id: InnerList
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: InnerList
  nameWithType: ReadOnlyCollectionBase.InnerList
  fullName: System.Collections.ReadOnlyCollectionBase.InnerList
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets the list of elements contained in the <see cref="T:System.Collections.ReadOnlyCollectionBase"> instance.
  remarks: Retrieving the value of this property is an O(1) operation.
  example:
  - "The following code example implements the <xref:System.Collections.ReadOnlyCollectionBase> class.  \n  \n [!CODE [System.Collections.ReadOnlyCollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.ReadOnlyCollectionBase#1)]"
  syntax:
    content: protected System.Collections.ArrayList InnerList { get; }
    return:
      type: System.Collections.ArrayList
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Copies the entire <see cref="T:System.Collections.ReadOnlyCollectionBase"> to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array.
  remarks: "The specified array must be of a compatible type.  \n  \n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n This method is an O() operation, where  is <xref:System.Collections.ReadOnlyCollectionBase.Count%2A>."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> that is the destination of the elements copied from <xref:System.Collections.ReadOnlyCollectionBase>. The <see cref="T:System.Array"> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in  at which copying begins.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets a value indicating whether access to a <see cref="T:System.Collections.ReadOnlyCollectionBase"> object is synchronized (thread safe).
  remarks: "A <xref:System.Collections.ReadOnlyCollectionBase> object is not synchronized. Derived classes can provide a synchronized version of the <xref:System.Collections.ReadOnlyCollectionBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \n  \n [!CODE [System.Collections.ReadOnlyCollectionBase#2](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.ReadOnlyCollectionBase#2)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.ReadOnlyCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets an object that can be used to synchronize access to a <see cref="T:System.Collections.ReadOnlyCollectionBase"> object.
  remarks: "Derived classes can provide their own synchronized version of the <xref:System.Collections.ReadOnlyCollectionBase> class using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> property of the <xref:System.Collections.ReadOnlyCollectionBase> object, not directly on the <xref:System.Collections.ReadOnlyCollectionBase> object. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.ReadOnlyCollectionBase> object.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \n  \n [!CODE [System.Collections.ReadOnlyCollectionBase#2](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.ReadOnlyCollectionBase#2)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.ReadOnlyCollectionBase.#ctor
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: ReadOnlyCollectionBase()
  nameWithType: ReadOnlyCollectionBase.ReadOnlyCollectionBase()
  fullName: System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase()
- uid: System.Collections.ReadOnlyCollectionBase.Count
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: Count
  nameWithType: ReadOnlyCollectionBase.Count
  fullName: System.Collections.ReadOnlyCollectionBase.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ReadOnlyCollectionBase.GetEnumerator
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: ReadOnlyCollectionBase.GetEnumerator()
  fullName: System.Collections.ReadOnlyCollectionBase.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ReadOnlyCollectionBase.InnerList
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: InnerList
  nameWithType: ReadOnlyCollectionBase.InnerList
  fullName: System.Collections.ReadOnlyCollectionBase.InnerList
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ReadOnlyCollectionBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.ReadOnlyCollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
