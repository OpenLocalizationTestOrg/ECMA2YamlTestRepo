### YamlMime:ManagedReference
items:
- uid: System.Collections.CollectionBase
  id: CollectionBase
  children:
  - System.Collections.CollectionBase.#ctor
  - System.Collections.CollectionBase.#ctor(System.Int32)
  - System.Collections.CollectionBase.Capacity
  - System.Collections.CollectionBase.Clear
  - System.Collections.CollectionBase.Count
  - System.Collections.CollectionBase.GetEnumerator
  - System.Collections.CollectionBase.InnerList
  - System.Collections.CollectionBase.List
  - System.Collections.CollectionBase.OnClear
  - System.Collections.CollectionBase.OnClearComplete
  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnValidate(System.Object)
  - System.Collections.CollectionBase.RemoveAt(System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: CollectionBase
  nameWithType: CollectionBase
  fullName: System.Collections.CollectionBase
  type: Class
  summary: Provides the `abstract` base class for a strongly typed collection.
  remarks: "A CollectionBase instance is always modifiable. See <xref:System.Collections.ReadOnlyCollectionBase> for a read-only version of this class.  \n  \n The capacity of a CollectionBase is the number of elements the CollectionBase can hold. As elements are added to a CollectionBase, the capacity is automatically increased as required through reallocation. The capacity can be decreased by setting the <xref:System.Collections.CollectionBase.Capacity%2A> property explicitly."
  example:
  - "The following code example implements the CollectionBase class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class CollectionBase : System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: CollectionBase()
  nameWithType: CollectionBase.CollectionBase()
  fullName: System.Collections.CollectionBase.CollectionBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Initializes a new instance of the <see cref="T:System.Collections.CollectionBase"> class with the default initial capacity.
  remarks: "The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold. As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.  \n  \n This constructor is an O(1) operation."
  syntax:
    content: protected CollectionBase ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: CollectionBase(Int32)
  nameWithType: CollectionBase.CollectionBase(Int32)
  fullName: System.Collections.CollectionBase.CollectionBase(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Initializes a new instance of the <see cref="T:System.Collections.CollectionBase"> class with the specified capacity.
  remarks: "The capacity of a <xref:System.Collections.CollectionBase> is the number of elements that the <xref:System.Collections.CollectionBase> can hold. As elements are added to a <xref:System.Collections.CollectionBase>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.CollectionBase>.  \n  \n This constructor is an O() operation, where  is ."
  syntax:
    content: protected CollectionBase (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: The number of elements that the new list can initially store.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.Capacity
  id: Capacity
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Capacity
  nameWithType: CollectionBase.Capacity
  fullName: System.Collections.CollectionBase.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets or sets the number of elements that the <see cref="T:System.Collections.CollectionBase"> can contain.
  remarks: "Capacity is the number of elements that the <xref:System.Collections.CollectionBase> can store. <xref:System.Collections.CollectionBase.Count%2A> is the number of elements that are actually in the <xref:System.Collections.CollectionBase>.  \n  \n Capacity is always greater than or equal to <xref:System.Collections.CollectionBase.Count%2A>. If <xref:System.Collections.CollectionBase.Count%2A> exceeds Capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.  \n  \n The capacity can be decreased by setting the Capacity property explicitly. When the value of Capacity is set explicitly, the internal array is also reallocated to accommodate the specified capacity.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is an O() operation, where  is the new capacity."
  syntax:
    content: public int Capacity { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.Clear
  id: Clear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Clear()
  nameWithType: CollectionBase.Clear()
  fullName: System.Collections.CollectionBase.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Removes all objects from the <see cref="T:System.Collections.CollectionBase"> instance. This method cannot be overridden.
  remarks: "<xref:System.Collections.CollectionBase.Count%2A> is set to zero.  \n  \n This method is an O() operation, where  is <xref:System.Collections.CollectionBase.Count%2A>.  \n  \n To perform custom actions before or after the collection is cleared, override the protected <xref:System.Collections.CollectionBase.OnClear%2A> or <xref:System.Collections.CollectionBase.OnClearComplete%2A> method."
  syntax:
    content: public void Clear ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.Count
  id: Count
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Count
  nameWithType: CollectionBase.Count
  fullName: System.Collections.CollectionBase.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets the number of elements contained in the <see cref="T:System.Collections.CollectionBase"> instance. This property cannot be overridden.
  remarks: ''
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: CollectionBase.GetEnumerator()
  fullName: System.Collections.CollectionBase.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Returns an enumerator that iterates through the <see cref="T:System.Collections.CollectionBase"> instance.
  remarks: "[Visual Basic, C#]  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n While the GetEnumerator method is not visible to COM clients by default, inheriting the <xref:System.Collections.CollectionBase> class can expose it and can cause undesirable behavior in COM clients.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <see cref="T:System.Collections.IEnumerator"> for the <xref:System.Collections.CollectionBase> instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.InnerList
  id: InnerList
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: InnerList
  nameWithType: CollectionBase.InnerList
  fullName: System.Collections.CollectionBase.InnerList
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets an <see cref="T:System.Collections.ArrayList"> containing the list of elements in the <xref:System.Collections.CollectionBase> instance.
  remarks: The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the InnerList property.
  syntax:
    content: protected System.Collections.ArrayList InnerList { get; }
    return:
      type: System.Collections.ArrayList
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.List
  id: List
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: List
  nameWithType: CollectionBase.List
  fullName: System.Collections.CollectionBase.List
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets an <see cref="T:System.Collections.IList"> containing the list of elements in the <xref:System.Collections.CollectionBase> instance.
  remarks: "The On* methods are invoked only on the instance returned by the List property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: protected System.Collections.IList List { get; }
    return:
      type: System.Collections.IList
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.OnClear
  id: OnClear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnClear()
  nameWithType: CollectionBase.OnClear()
  fullName: System.Collections.CollectionBase.OnClear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs additional custom processes when clearing the contents of the <see cref="T:System.Collections.CollectionBase"> instance.
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.  \n  \n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \n  \n If the process fails, the collection reverts back to its previous state.  \n  \n The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual void OnClear ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.OnClearComplete
  id: OnClearComplete
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnClearComplete()
  nameWithType: CollectionBase.OnClearComplete()
  fullName: System.Collections.CollectionBase.OnClearComplete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.CollectionBase"> instance.
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.  \n  \n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \n  \n The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual void OnClearComplete ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  id: OnInsert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnInsert(Int32,Object)
  nameWithType: CollectionBase.OnInsert(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs additional custom processes before inserting a new element into the <see cref="T:System.Collections.CollectionBase"> instance.
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.  \n  \n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \n  \n If the process fails, the collection reverts back to its previous state.  \n  \n The default implementation of this method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: protected virtual void OnInsert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which to insert .
    - id: value
      type: System.Object
      description: The new value of the element at .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  id: OnInsertComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnInsertComplete(Int32,Object)
  nameWithType: CollectionBase.OnInsertComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsertComplete(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.CollectionBase"> instance.
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.  \n  \n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \n  \n The collection reverts back to its previous state if one of the following occurs:  \n  \n-   The process fails.  \n  \n-   This method is overridden to throw an exception.  \n  \n The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual void OnInsertComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which to insert .
    - id: value
      type: System.Object
      description: The new value of the element at .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  id: OnRemove(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnRemove(Int32,Object)
  nameWithType: CollectionBase.OnRemove(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemove(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs additional custom processes when removing an element from the <see cref="T:System.Collections.CollectionBase"> instance.
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.  \n  \n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \n  \n If the process fails, the collection reverts back to its previous state.  \n  \n The default implementation of this method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: protected virtual void OnRemove (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which  can be found.
    - id: value
      type: System.Object
      description: The value of the element to remove from .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  id: OnRemoveComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnRemoveComplete(Int32,Object)
  nameWithType: CollectionBase.OnRemoveComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemoveComplete(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs additional custom processes after removing an element from the <see cref="T:System.Collections.CollectionBase"> instance.
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.  \n  \n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \n  \n The collection reverts back to its previous state if one of the following occurs:  \n  \n-   The process fails.  \n  \n-   This method is overridden to throw an exception.  \n  \n The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual void OnRemoveComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which  can be found.
    - id: value
      type: System.Object
      description: The value of the element to remove from .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  id: OnSet(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnSet(Int32,Object,Object)
  nameWithType: CollectionBase.OnSet(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSet(Int32,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs additional custom processes before setting a value in the <see cref="T:System.Collections.CollectionBase"> instance.
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.  \n  \n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \n  \n If the process fails, the collection reverts back to its previous state.  \n  \n The default implementation of this method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: protected virtual void OnSet (int index, object oldValue, object newValue);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which  can be found.
    - id: oldValue
      type: System.Object
      description: The value to replace with .
    - id: newValue
      type: System.Object
      description: The new value of the element at .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  id: OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnSetComplete(Int32,Object,Object)
  nameWithType: CollectionBase.OnSetComplete(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSetComplete(Int32,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs additional custom processes after setting a value in the <see cref="T:System.Collections.CollectionBase"> instance.
  remarks: "The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.  \n  \n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \n  \n The collection reverts back to its previous state if one of the following occurs:  \n  \n-   The process fails.  \n  \n-   This method is overridden to throw an exception.  \n  \n The default implementation of this method is an O(1) operation."
  syntax:
    content: protected virtual void OnSetComplete (int index, object oldValue, object newValue);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which  can be found.
    - id: oldValue
      type: System.Object
      description: The value to replace with .
    - id: newValue
      type: System.Object
      description: The new value of the element at .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.OnValidate(System.Object)
  id: OnValidate(System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnValidate(Object)
  nameWithType: CollectionBase.OnValidate(Object)
  fullName: System.Collections.CollectionBase.OnValidate(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Performs additional custom processes when validating a value.
  remarks: "The default implementation of this method determines whether  is `null`, and, if so, throws <xref:System.ArgumentNullException>. It is intended to be overridden by a derived class to perform additional action when the specified element is validated.  \n  \n The On* methods are invoked only on the instance returned by the <xref:System.Collections.CollectionBase.List%2A> property, but not on the instance returned by the <xref:System.Collections.CollectionBase.InnerList%2A> property.  \n  \n The default implementation of this method is an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: protected virtual void OnValidate (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to validate.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: CollectionBase.RemoveAt(Int32)
  fullName: System.Collections.CollectionBase.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Removes the element at the specified index of the <see cref="T:System.Collections.CollectionBase"> instance. This method is not overridable.
  remarks: "In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \n  \n This method is an O() operation, where  is <xref:System.Collections.CollectionBase.Count%2A>."
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to remove.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Copies the entire <see cref="T:System.Collections.CollectionBase"> to a compatible one-dimensional <xref:System.Array>, starting at the specified index of the target array.
  remarks: "The specified array must be of a compatible type.  \n  \n This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n This method is an O() operation, where  is <xref:System.Collections.CollectionBase.Count%2A>."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> that is the destination of the elements copied from <xref:System.Collections.CollectionBase>. The <see cref="T:System.Array"> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in  at which copying begins.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets a value indicating whether access to the <see cref="T:System.Collections.CollectionBase"> is synchronized (thread safe).
  remarks: "A <xref:System.Collections.CollectionBase> instance is not synchronized. Derived classes can provide a synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property.  \n  \n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \n  \n [!CODE [System.Collections.CollectionBase#2](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#2)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.CollectionBase">.
  remarks: "Derived classes can provide their own synchronized version of the <xref:System.Collections.CollectionBase> using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the <xref:System.Collections.CollectionBase>, not directly on the <xref:System.Collections.CollectionBase>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.CollectionBase> object.  \n  \n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \n  \n [!CODE [System.Collections.CollectionBase#2](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#2)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: CollectionBase.System.Collections.IList.Add(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Adds an object to the end of the <see cref="T:System.Collections.CollectionBase">.
  remarks: "If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added.  \n  \n If <xref:System.Collections.CollectionBase.Count%2A> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O() operation, where  is <xref:System.Collections.CollectionBase.Count%2A>."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <see cref="T:System.Object"> to be added to the end of the <xref:System.Collections.CollectionBase>.
    return:
      type: System.Int32
      description: The <see cref="T:System.Collections.CollectionBase"> index at which the  has been added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: CollectionBase.System.Collections.IList.Contains(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Determines whether the <see cref="T:System.Collections.CollectionBase"> contains a specific element.
  remarks: "This method performs a linear search; therefore, this method is an O() operation, where  is <xref:System.Collections.CollectionBase.Count%2A>.  \n  \n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on  to determine whether  exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the  parameter on the objects in the collection."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <see cref="T:System.Object"> to locate in the <xref:System.Collections.CollectionBase>.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Collections.CollectionBase"> contains the specified ; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: CollectionBase.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Searches for the specified <see cref="T:System.Object"> and returns the zero-based index of the first occurrence within the entire <xref:System.Collections.CollectionBase>.
  remarks: "This method performs a linear search; therefore, this method is an O() operation, where  is <xref:System.Collections.CollectionBase.Count%2A>.  \n  \n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on  to determine whether  exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the  parameter on the objects in the collection."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <see cref="T:System.Object"> to locate in the <xref:System.Collections.CollectionBase>.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of  within the entire <see cref="T:System.Collections.CollectionBase">, if found; otherwise, -1.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: CollectionBase.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Inserts an element into the <see cref="T:System.Collections.CollectionBase"> at the specified index.
  remarks: "If <xref:System.Collections.CollectionBase.Count%2A> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.  \n  \n If  is equal to <xref:System.Collections.CollectionBase.Count%2A>,  is added to the end of <xref:System.Collections.CollectionBase>.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.  \n  \n This method is an O() operation, where  is <xref:System.Collections.CollectionBase.Count%2A>."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which  should be inserted.
    - id: value
      type: System.Object
      description: The <see cref="T:System.Object"> to insert.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets a value indicating whether the <see cref="T:System.Collections.CollectionBase"> has a fixed size.
  remarks: "A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets a value indicating whether the <see cref="T:System.Collections.CollectionBase"> is read-only.
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: CollectionBase.System.Collections.IList.Item(Int32)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets or sets the element at the specified index.
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: CollectionBase.System.Collections.IList.Remove(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Removes the first occurrence of a specific object from the <see cref="T:System.Collections.CollectionBase">.
  remarks: "If the <xref:System.Collections.CollectionBase> does not contain the specified object, the <xref:System.Collections.CollectionBase> remains unchanged. No exception is thrown.  \n  \n This method performs a linear search; therefore, this method is an O() operation, where  is <xref:System.Collections.CollectionBase.Count%2A>.  \n  \n This method determines equality by calling <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!CODE [System.Collections.CollectionBase#1](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.CollectionBase#1)]"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <see cref="T:System.Object"> to remove from the <xref:System.Collections.CollectionBase>.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.CollectionBase.#ctor
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase()
  nameWithType: CollectionBase.CollectionBase()
  fullName: System.Collections.CollectionBase.CollectionBase()
- uid: System.Collections.CollectionBase.#ctor(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase(Int32)
  nameWithType: CollectionBase.CollectionBase(Int32)
  fullName: System.Collections.CollectionBase.CollectionBase(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.CollectionBase.Capacity
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Capacity
  nameWithType: CollectionBase.Capacity
  fullName: System.Collections.CollectionBase.Capacity
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.CollectionBase.Clear
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Clear()
  nameWithType: CollectionBase.Clear()
  fullName: System.Collections.CollectionBase.Clear()
- uid: System.Collections.CollectionBase.Count
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Count
  nameWithType: CollectionBase.Count
  fullName: System.Collections.CollectionBase.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.CollectionBase.GetEnumerator
  parent: System.Collections.CollectionBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: CollectionBase.GetEnumerator()
  fullName: System.Collections.CollectionBase.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.CollectionBase.InnerList
  parent: System.Collections.CollectionBase
  isExternal: false
  name: InnerList
  nameWithType: CollectionBase.InnerList
  fullName: System.Collections.CollectionBase.InnerList
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.CollectionBase.List
  parent: System.Collections.CollectionBase
  isExternal: false
  name: List
  nameWithType: CollectionBase.List
  fullName: System.Collections.CollectionBase.List
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.CollectionBase.OnClear
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClear()
  nameWithType: CollectionBase.OnClear()
  fullName: System.Collections.CollectionBase.OnClear()
- uid: System.Collections.CollectionBase.OnClearComplete
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClearComplete()
  nameWithType: CollectionBase.OnClearComplete()
  fullName: System.Collections.CollectionBase.OnClearComplete()
- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsert(Int32,Object)
  nameWithType: CollectionBase.OnInsert(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsert(Int32,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsertComplete(Int32,Object)
  nameWithType: CollectionBase.OnInsertComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsertComplete(Int32,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemove(Int32,Object)
  nameWithType: CollectionBase.OnRemove(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemove(Int32,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemoveComplete(Int32,Object)
  nameWithType: CollectionBase.OnRemoveComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemoveComplete(Int32,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSet(Int32,Object,Object)
  nameWithType: CollectionBase.OnSet(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSet(Int32,Object,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSetComplete(Int32,Object,Object)
  nameWithType: CollectionBase.OnSetComplete(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSetComplete(Int32,Object,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.OnValidate(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnValidate(Object)
  nameWithType: CollectionBase.OnValidate(Object)
  fullName: System.Collections.CollectionBase.OnValidate(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: CollectionBase.RemoveAt(Int32)
  fullName: System.Collections.CollectionBase.RemoveAt(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: CollectionBase.System.Collections.IList.Add(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: CollectionBase.System.Collections.IList.Contains(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: CollectionBase.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: CollectionBase.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(Int32,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: CollectionBase.System.Collections.IList.Item(Int32)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Item(Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: CollectionBase.System.Collections.IList.Remove(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
