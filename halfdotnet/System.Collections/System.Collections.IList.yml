### YamlMime:ManagedReference
items:
- uid: System.Collections.IList
  id: IList
  children:
  - System.Collections.IList.Add(System.Object)
  - System.Collections.IList.Clear
  - System.Collections.IList.Contains(System.Object)
  - System.Collections.IList.IndexOf(System.Object)
  - System.Collections.IList.Insert(System.Int32,System.Object)
  - System.Collections.IList.IsFixedSize
  - System.Collections.IList.IsReadOnly
  - System.Collections.IList.Item(System.Int32)
  - System.Collections.IList.Remove(System.Object)
  - System.Collections.IList.RemoveAt(System.Int32)
  langs:
  - csharp
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
  type: Interface
  summary: Represents a non-generic collection of objects that can be individually accessed by index.
  remarks: "IList is a descendant of the <xref:System.Collections.ICollection> interface and is the base interface of all non-generic lists. IList implementations fall into three categories: read-only, fixed-size, and variable-size. A read-only IList cannot be modified. A fixed-size IList does not allow the addition or removal of elements, but it allows the modification of existing elements. A variable-size IList allows the addition, removal, and modification of elements.  \n  \n For the generic version of this interface, see <xref:System.Collections.Generic.IList%601?displayProperty=fullName>."
  example:
  - "The following example demonstrates the implementation of the IList interface to create a simple list, fixed-size list.  \n  \n [!CODE [System.Collections.IList_Implementation#01](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#01)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IList : System.Collections.ICollection
  implements:
  - System.Collections.ICollection
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.IList
  langs:
  - csharp
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Adds an item to the <see cref="T:System.Collections.IList">.
  remarks: ''
  example:
  - "The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple, fixed-size list. This code is part of a larger example for the <xref:System.Collections.IList> interface.  \n  \n [!CODE [System.Collections.IList_Implementation#02](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#02)]"
  syntax:
    content: public int Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to add to the <see cref="T:System.Collections.IList">.
    return:
      type: System.Int32
      description: The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IList.Clear
  id: Clear
  parent: System.Collections.IList
  langs:
  - csharp
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Removes all items from the <see cref="T:System.Collections.IList">.
  remarks: Implementations of this method can vary in how they handle the <xref:System.Collections.ICollection.Count%2A?displayProperty=fullName> and the capacity of a collection. Typically, the count is set to zero, and references to other objects from elements of the collection are also released. The capacity can be set to zero or a default value, or it can remain unchanged.
  example:
  - "The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref:System.Collections.IList> interface.  \n  \n [!CODE [System.Collections.IList_Implementation#02](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#02)]"
  syntax:
    content: public void Clear ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.IList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Determines whether the <see cref="T:System.Collections.IList"> contains a specific value.
  remarks: Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on  to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the  parameter on the objects in the collection.
  example:
  - "The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref:System.Collections.IList> interface.  \n  \n [!CODE [System.Collections.IList_Implementation#02](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#02)]"
  syntax:
    content: public bool Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the <see cref="T:System.Collections.IList">.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Object"> is found in the <xref:System.Collections.IList>; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.IList
  langs:
  - csharp
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Determines the index of a specific item in the <see cref="T:System.Collections.IList">.
  remarks: Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on  to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the  parameter on the objects in the collection.
  example:
  - "The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref:System.Collections.IList> interface.  \n  \n [!CODE [System.Collections.IList_Implementation#02](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#02)]"
  syntax:
    content: public int IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the <see cref="T:System.Collections.IList">.
    return:
      type: System.Int32
      description: The index of  if found in the list; otherwise, -1.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: IList.Insert(Int32,Object)
  fullName: System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Inserts an item to the <see cref="T:System.Collections.IList"> at the specified index.
  remarks: "If  equals the number of items in the <xref:System.Collections.IList>, then  is appended to the end.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table."
  example:
  - "The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref:System.Collections.IList> interface.  \n  \n [!CODE [System.Collections.IList_Implementation#02](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#02)]"
  syntax:
    content: public void Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which  should be inserted.
    - id: value
      type: System.Object
      description: The object to insert into the <see cref="T:System.Collections.IList">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.IList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets a value indicating whether the <see cref="T:System.Collections.IList"> has a fixed size.
  remarks: A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.
  example:
  - "The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref:System.Collections.IList> interface.  \n  \n [!CODE [System.Collections.IList_Implementation#02](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#02)]"
  syntax:
    content: public bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.IList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets a value indicating whether the <see cref="T:System.Collections.IList"> is read-only.
  remarks: A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.
  example:
  - "The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref:System.Collections.IList> interface.  \n  \n [!CODE [System.Collections.IList_Implementation#02](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#02)]"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.IList
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: IList.Item(Int32)
  fullName: System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets or sets the element at the specified index.
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality."
  example:
  - "The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref:System.Collections.IList> interface.  \n  \n [!CODE [System.Collections.IList_Implementation#02](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#02)]"
  syntax:
    content: public object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.IList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList">.
  remarks: In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table. If  is not found in the <xref:System.Collections.IList>, the <xref:System.Collections.IList> remains unchanged and no exception is thrown.
  example:
  - "The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref:System.Collections.IList> interface.  \n  \n [!CODE [System.Collections.IList_Implementation#02](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#02)]"
  syntax:
    content: public void Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to remove from the <see cref="T:System.Collections.IList">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.IList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Removes the <see cref="T:System.Collections.IList"> item at the specified index.
  remarks: In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.
  example:
  - "The following example demonstrates the implementation of the <xref:System.Collections.IList> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref:System.Collections.IList> interface.  \n  \n [!CODE [System.Collections.IList_Implementation#02](../CodeSnippet/VS_Snippets_CLR_System/system.Collections.IList_Implementation#02)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: false
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
- uid: System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: IList.Insert(Int32,Object)
  fullName: System.Collections.IList.Insert(Int32,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: false
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: false
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: false
  name: Item(Int32)
  nameWithType: IList.Item(Int32)
  fullName: System.Collections.IList.Item(Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
