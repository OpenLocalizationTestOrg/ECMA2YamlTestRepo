### YamlMime:ManagedReference
items:
- uid: System.Collections.IStructuralComparable
  id: IStructuralComparable
  children:
  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  langs:
  - csharp
  name: IStructuralComparable
  nameWithType: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
  type: Interface
  summary: Supports the structural comparison of collection objects.
  remarks: "The IStructuralComparable interface enables you to implement customized comparisons for collection members. That is, you can define precisely what it means for one collection object to precede, follow, or occur in the same position in the sort order as a second collection object. You can then specify that this definition be used with a collection type that accepts the IStructuralComparable interface.  \n  \n The interface has a single member, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, which determines whether the current collection object is less than, equal to, or greater than a second object in the sort order. The actual comparison of the members or elements in the current instance with those in a second object is performed by an <xref:System.Collections.IComparer> interface implementation, which contains the definition of your custom comparison.  \n  \n> [!NOTE]\n>  The IStructuralComparable interface supports only structural comparisons for sorting or ordering. The <xref:System.Collections.IStructuralEquatable> interface supports custom comparisons for structural equality.  \n  \n The .NET Framework provides two default comparers. One is returned by the <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=fullName> property; the other is returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property.  \n  \n The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the IStructuralComparable interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an IStructuralComparable interface value and providing your <xref:System.Collections.IComparer> implementation as an argument to the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method, you can define a custom sort order for the array or collection. However, you do not call the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method directly in most cases. Instead, the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method is called by sorting methods such as <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>. In this case, you define your <xref:System.Collections.IComparer> implementation and pass it as an argument to a sorting method or collection object's class constructor. The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method with your custom comparer is then called automatically whenever the collection is sorted."
  example:
  - "The following example creates an array of <xref:System.Tuple%606> objects that contains population data for three U.S. cities from 1960 to 2000. The sextuple's first component is the city name. The remaining five components represent the population at ten-year intervals from 1960 to 2000.  \n  \n The `PopulationComparer` class provides an <xref:System.Collections.IComparer> implementation that allows the array of sextuples to be sorted by any one of its components. Two values are provided to the `PopulationComparer` class in its constructor: the position of the component that defines the sort order, and a Boolean value that indicates whether the tuple objects should be sorted in ascending or descending order.  \n  \n The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1970) and displays them, and then sorts them by the sixth component (the population in 2000) and displays them. Note that the example does not directly call the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method. The method is called implicitly by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> method for each tuple object in the array.  \n  \n [!CODE [System.Tuple`6.CompareTo#2](../CodeSnippet/VS_Snippets_CLR_System/system.tuple`6.compareto#2)]"
  syntax:
    content: public interface IStructuralComparable
  implements: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  id: CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.IStructuralComparable
  langs:
  - csharp
  name: CompareTo(Object,IComparer)
  nameWithType: IStructuralComparable.CompareTo(Object,IComparer)
  fullName: System.Collections.IStructuralComparable.CompareTo(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.
  remarks: "The CompareTo method supports custom structural comparison and sorting of array and tuple objects. The CompareTo method calls the  object's <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> end and the CompareTo method returns a value when one of the following conditions becomes true:  \n  \n-   The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method returns -1.  \n  \n-   The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method returns 1.  \n  \n-   The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method is called for the last element or component in the collection object."
  example:
  - "The following example creates an array of <xref:System.Tuple%606> objects that contains population data for three U.S. cities from 1960 to 2000. The sextuple's first component is the city name. The remaining five components represent the population at ten-year intervals from 1960 to 2000.  \n  \n The `PopulationComparer` class provides an <xref:System.Collections.IComparer> implementation that allows the array of sextuples to be sorted by any one of its components. Two values are provided to the `PopulationComparer` class in its constructor: the position of the component that defines the sort order, and a <xref:System.Boolean> value that indicates whether the tuple objects should be sorted in ascending or descending order.  \n  \n The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1970) and displays them, and then sorts them by the sixth component (the population in 2000) and displays them. Note that the example does not directly call the CompareTo implementation. The method is called implicitly by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> method for each tuple object in the array.  \n  \n [!CODE [System.Tuple`6.CompareTo#2](../CodeSnippet/VS_Snippets_CLR_System/system.tuple`6.compareto#2)]"
  syntax:
    content: public int CompareTo (object other, System.Collections.IComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with the current instance.
    - id: comparer
      type: System.Collections.IComparer
      description: An object that compares members of the current collection object with the corresponding members of .
    return:
      type: System.Int32
      description: "An integer that indicates the relationship of the current collection object to , as shown in the following table.  \n  \n|Return value|Description|  \n|------------------|-----------------|  \n|-1|The current instance precedes .|  \n|0|The current instance and  are equal.|  \n|1|The current instance follows .|"
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.IStructuralComparable
  isExternal: false
  name: CompareTo(Object,IComparer)
  nameWithType: IStructuralComparable.CompareTo(Object,IComparer)
  fullName: System.Collections.IStructuralComparable.CompareTo(Object,IComparer)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
