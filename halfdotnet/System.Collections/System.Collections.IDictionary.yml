### YamlMime:ManagedReference
items:
- uid: System.Collections.IDictionary
  id: IDictionary
  children:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  - System.Collections.IDictionary.Clear
  - System.Collections.IDictionary.Contains(System.Object)
  - System.Collections.IDictionary.GetEnumerator
  - System.Collections.IDictionary.IsFixedSize
  - System.Collections.IDictionary.IsReadOnly
  - System.Collections.IDictionary.Item(System.Object)
  - System.Collections.IDictionary.Keys
  - System.Collections.IDictionary.Remove(System.Object)
  - System.Collections.IDictionary.Values
  langs:
  - csharp
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
  type: Interface
  summary: Represents a nongeneric collection of key/value pairs.
  remarks: "The IDictionary interface is the base interface for nongeneric collections of key/value pairs. For the generic version of this interface, see <xref:System.Collections.Generic.IDictionary%602?displayProperty=fullName>.  \n  \n Each element is a key/value pair stored in a <xref:System.Collections.DictionaryEntry> object.  \n  \n Each pair must have a unique key. Implementations can vary in whether they allow the key to be null.  The value can be null and does not have to be unique. The IDictionary interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.  \n  \n IDictionary implementations fall into three categories: read-only, fixed-size, variable-size. A read-only IDictionary object cannot be modified. A fixed-size IDictionary object does not allow the addition or removal of elements, but does allow the modification of existing elements. A variable-size IDictionary object allows the addition, removal, and modification of elements.  \n  \n The `foreach` statement of the C# language (`For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the IDictionary object is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.DictionaryEntry>. For example:  \n  \n [!CODE [Dictionary#14](../CodeSnippet/VS_Snippets_CLR/Dictionary#14)]  \n  \n The `foreach` statement is a wrapper around the enumerator, which allows only reading from but not writing to the collection."
  example:
  - "The following code example demonstrates how to define a simple dictionary class that implements the IDictionary interface.  \n  \n [!CODE [Dictionary#1](../CodeSnippet/VS_Snippets_CLR/Dictionary#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IDictionary : System.Collections.ICollection
  implements:
  - System.Collections.ICollection
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: IDictionary.Add(Object,Object)
  fullName: System.Collections.IDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"> object.
  remarks: "You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the Add method does not modify existing elements.  \n  \n Implementations can vary in whether they allow the key to be `null`."
  example:
  - "The following code example demonstrates how to implement the Add method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!CODE [Dictionary#9](../CodeSnippet/VS_Snippets_CLR/Dictionary#9)]"
  syntax:
    content: public void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: The <see cref="T:System.Object"> to use as the key of the element to add.
    - id: value
      type: System.Object
      description: The <see cref="T:System.Object"> to use as the value of the element to add.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IDictionary.Clear
  id: Clear
  parent: System.Collections.IDictionary
  langs:
  - csharp
  name: Clear()
  nameWithType: IDictionary.Clear()
  fullName: System.Collections.IDictionary.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Removes all elements from the <see cref="T:System.Collections.IDictionary"> object.
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the Clear method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!CODE [Dictionary#8](../CodeSnippet/VS_Snippets_CLR/Dictionary#8)]"
  syntax:
    content: public void Clear ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.IDictionary
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: IDictionary.Contains(Object)
  fullName: System.Collections.IDictionary.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Determines whether the <see cref="T:System.Collections.IDictionary"> object contains an element with the specified key.
  remarks: "Implementations can vary in whether they allow the key to be `null`.  \n  \n Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on  to determine whether  exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the  parameter on the objects in the collection."
  example:
  - "The following code example demonstrates how to implement the Contains method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!CODE [Dictionary#5](../CodeSnippet/VS_Snippets_CLR/Dictionary#5)]"
  syntax:
    content: public bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: The key to locate in the <see cref="T:System.Collections.IDictionary"> object.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Collections.IDictionary"> contains an element with the key; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.IDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: IDictionary.GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Returns an <see cref="T:System.Collections.IDictionaryEnumerator"> object for the <xref:System.Collections.IDictionary> object.
  remarks: "[Visual Basic, C#]  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization."
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: An <see cref="T:System.Collections.IDictionaryEnumerator"> object for the <xref:System.Collections.IDictionary> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IDictionary.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.IDictionary
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: IDictionary.IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"> object has a fixed size.
  remarks: "A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes."
  example:
  - "The following code example demonstrates how to implement the IsFixedSize property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!CODE [Dictionary#6](../CodeSnippet/VS_Snippets_CLR/Dictionary#6)]"
  syntax:
    content: public bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.IDictionary
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: IDictionary.IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"> object is read-only.
  remarks: A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.
  example:
  - "The following code example demonstrates how to implement the IsReadOnly property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!CODE [Dictionary#4](../CodeSnippet/VS_Snippets_CLR/Dictionary#4)]"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.IDictionary
  langs:
  - csharp
  name: Item(Object)
  nameWithType: IDictionary.Item(Object)
  fullName: System.Collections.IDictionary.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets or sets the element with the specified key.
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.  \n  \n You can also use the Item property to add new elements by setting the value of a key that does not exist in the dictionary (for example, `myCollection[\"myNonexistentKey\"] = myValue`). However, if the specified key already exists in the dictionary, setting the Item property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  \n  \n Implementations can vary in whether they allow the key to be `null`.  \n  \n The C# language uses the `this`[this](../Topic/this%20\\(C%23%20Reference\\).md) keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality."
  example:
  - "The following code example demonstrates how to implement the Item property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!CODE [Dictionary#13](../CodeSnippet/VS_Snippets_CLR/Dictionary#13)]"
  syntax:
    content: public object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: The key of the element to get or set.
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IDictionary.Keys
  id: Keys
  parent: System.Collections.IDictionary
  langs:
  - csharp
  name: Keys
  nameWithType: IDictionary.Keys
  fullName: System.Collections.IDictionary.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets an <see cref="T:System.Collections.ICollection"> object containing the keys of the <xref:System.Collections.IDictionary> object.
  remarks: The order of the keys in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.
  example:
  - "The following code example demonstrates how to implement the Keys property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!CODE [Dictionary#10](../CodeSnippet/VS_Snippets_CLR/Dictionary#10)]"
  syntax:
    content: public System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.IDictionary
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: IDictionary.Remove(Object)
  fullName: System.Collections.IDictionary.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"> object.
  remarks: If the <xref:System.Collections.IDictionary> object does not contain an element with the specified key, the <xref:System.Collections.IDictionary> remains unchanged. No exception is thrown.
  example:
  - "The following code example demonstrates how to implement the Remove method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!CODE [Dictionary#7](../CodeSnippet/VS_Snippets_CLR/Dictionary#7)]"
  syntax:
    content: public void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: The key of the element to remove.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.IDictionary.Values
  id: Values
  parent: System.Collections.IDictionary
  langs:
  - csharp
  name: Values
  nameWithType: IDictionary.Values
  fullName: System.Collections.IDictionary.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: Gets an <see cref="T:System.Collections.ICollection"> object containing the values in the <xref:System.Collections.IDictionary> object.
  remarks: The order of the values in the returned <xref:System.Collections.ICollection> object is unspecified, but is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Keys%2A> property.
  example:
  - "The following code example demonstrates how to implement the Values property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!CODE [Dictionary#11](../CodeSnippet/VS_Snippets_CLR/Dictionary#11)]"
  syntax:
    content: public System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: false
  name: Add(Object,Object)
  nameWithType: IDictionary.Add(Object,Object)
  fullName: System.Collections.IDictionary.Add(Object,Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: false
  name: Clear()
  nameWithType: IDictionary.Clear()
  fullName: System.Collections.IDictionary.Clear()
- uid: System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: false
  name: Contains(Object)
  nameWithType: IDictionary.Contains(Object)
  fullName: System.Collections.IDictionary.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: IDictionary.GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: IDictionary.IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: IDictionary.IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: false
  name: Item(Object)
  nameWithType: IDictionary.Item(Object)
  fullName: System.Collections.IDictionary.Item(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: false
  name: Keys
  nameWithType: IDictionary.Keys
  fullName: System.Collections.IDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: false
  name: Remove(Object)
  nameWithType: IDictionary.Remove(Object)
  fullName: System.Collections.IDictionary.Remove(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: false
  name: Values
  nameWithType: IDictionary.Values
  fullName: System.Collections.IDictionary.Values
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
