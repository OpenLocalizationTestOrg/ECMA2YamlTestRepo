### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.ModuleBuilder
  id: ModuleBuilder
  children:
  - System.Reflection.Emit.ModuleBuilder.Assembly
  - System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  - System.Reflection.Emit.ModuleBuilder.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)
  - System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefineManifestResource(System.String,System.IO.Stream,System.Reflection.ResourceAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
  - System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
  - System.Reflection.Emit.ModuleBuilder.DefineResource(System.String,System.String)
  - System.Reflection.Emit.ModuleBuilder.DefineResource(System.String,System.String,System.Reflection.ResourceAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  - System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.Byte[])
  - System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.String)
  - System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  - System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  - System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo)
  - System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Type})
  - System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)
  - System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData
  - System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.Emit.ModuleBuilder.GetFieldToken(System.Reflection.FieldInfo)
  - System.Reflection.Emit.ModuleBuilder.GetHashCode
  - System.Reflection.Emit.ModuleBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)
  - System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Type})
  - System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  - System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Reflection.Emit.SignatureHelper)
  - System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Byte[],System.Int32)
  - System.Reflection.Emit.ModuleBuilder.GetSignerCertificate
  - System.Reflection.Emit.ModuleBuilder.GetStringConstant(System.String)
  - System.Reflection.Emit.ModuleBuilder.GetSymWriter
  - System.Reflection.Emit.ModuleBuilder.GetType(System.String)
  - System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)
  - System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Emit.ModuleBuilder.GetTypes
  - System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.String)
  - System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.Type)
  - System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Emit.ModuleBuilder.IsResource
  - System.Reflection.Emit.ModuleBuilder.IsTransient
  - System.Reflection.Emit.ModuleBuilder.MDStreamVersion
  - System.Reflection.Emit.ModuleBuilder.MetadataToken
  - System.Reflection.Emit.ModuleBuilder.ModuleVersionId
  - System.Reflection.Emit.ModuleBuilder.Name
  - System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)
  - System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)
  - System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Emit.ModuleBuilder.ScopeName
  - System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute(System.String,System.Byte[])
  - System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(System.Reflection.MethodInfo)
  - System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: ModuleBuilder
  nameWithType: ModuleBuilder
  fullName: System.Reflection.Emit.ModuleBuilder
  type: Class
  summary: Defines and represents a module in a dynamic assembly.
  remarks: To get an instance of ModuleBuilder, use the <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A?displayProperty=fullName> method.
  example:
  - "The following code sample demonstrates the use of `ModuleBuilder` to create a dynamic module. Note that the ModuleBuilder is created by calling <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A> in <xref:System.Reflection.Emit.AssemblyBuilder>, rather than through a constructor.  \n  \n [!CODE [ModuleBuilder_Class#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_Class#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ModuleBuilder))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ModuleBuilder : System.Reflection.Module, System.Runtime.InteropServices._ModuleBuilder
  inheritance:
  - System.Object
  - System.Reflection.Module
  implements:
  - System.Runtime.InteropServices._ModuleBuilder
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Reflection.Module.CustomAttributes
  - System.Reflection.Module.FilterTypeName
  - System.Reflection.Module.FilterTypeNameIgnoreCase
  - System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
  - System.Reflection.Module.GetField(System.String)
  - System.Reflection.Module.GetFields
  - System.Reflection.Module.GetMethod(System.String)
  - System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Module.GetMethod(System.String,System.Type[])
  - System.Reflection.Module.GetMethods
  - System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Reflection.Module.ModuleHandle
  - System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)
  - System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)
  - System.Reflection.Module.ResolveField(System.Int32)
  - System.Reflection.Module.ResolveMember(System.Int32)
  - System.Reflection.Module.ResolveMethod(System.Int32)
  - System.Reflection.Module.ResolveType(System.Int32)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.Module.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.Assembly
  id: Assembly
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: Assembly
  nameWithType: ModuleBuilder.Assembly
  fullName: System.Reflection.Emit.ModuleBuilder.Assembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the dynamic assembly that defined this instance of <see cref="T:System.Reflection.Emit.ModuleBuilder">.
  remarks: The <xref:System.Reflection.Assembly> object that is returned is the <xref:System.Reflection.Emit.AssemblyBuilder> that defined this instance of <xref:System.Reflection.Emit.ModuleBuilder>.
  syntax:
    content: public override System.Reflection.Assembly Assembly { get; }
    return:
      type: System.Reflection.Assembly
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  id: CreateGlobalFunctions
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: CreateGlobalFunctions()
  nameWithType: ModuleBuilder.CreateGlobalFunctions()
  fullName: System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Completes the global function definitions and global data definitions for this dynamic module.
  remarks: "This method should be called when the user is done with defining all the global functions within this dynamic module. After calling this function, no more new global functions or new global data are allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following sample illustrates the use of `CreateGlobalFunctions` to create a static global method from a <xref:System.Reflection.Emit.MethodBuilder> implemented with <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A>.  \n  \n [!CODE [ModuleBuilder_CreateGlobalFunctions#2](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_CreateGlobalFunctions#2)]"
  syntax:
    content: public void CreateGlobalFunctions ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)
  id: DefineDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineDocument(String,Guid,Guid,Guid)
  nameWithType: ModuleBuilder.DefineDocument(String,Guid,Guid,Guid)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineDocument(String,Guid,Guid,Guid)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a document for source.
  remarks: >-
    > [!IMPORTANT]

    >  Earlier versions of the .NET Framework throw <xref:System.ArgumentException> instead of <xref:System.ArgumentNullException> when  is `null`.
  example:
  - "The following code sample illustrates the use of `DefineDocument` to attach an external symbol document (in this case, a raw IL file) to a dynamic module.  \n  \n [!CODE [ModuleBuilder_DefineDocument#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_DefineDocument#1)]"
  syntax:
    content: public System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument (string url, Guid language, Guid languageVendor, Guid documentType);
    parameters:
    - id: url
      type: System.String
      description: The URL for the document.
    - id: language
      type: System.Guid
      description: The GUID that identifies the document language. This can be <xref:System.Guid?displayProperty=fullName>.
    - id: languageVendor
      type: System.Guid
      description: The GUID that identifies the document language vendor. This can be <xref:System.Guid?displayProperty=fullName>.
    - id: documentType
      type: System.Guid
      description: The GUID that identifies the document type. This can be <xref:System.Guid?displayProperty=fullName>.
    return:
      type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
      description: The defined document.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  id: DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineEnum(String,TypeAttributes,Type)
  nameWithType: ModuleBuilder.DefineEnum(String,TypeAttributes,Type)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineEnum(String,TypeAttributes,Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines an enumeration type that is a value type with a single non-static field called  of the specified type.
  remarks: "The defined enum is a derived class of <xref:System.Enum>. The  field has <xref:System.Reflection.FieldAttributes> and <xref:System.Reflection.FieldAttributes> attributes set.  \n  \n For more information about the built-in integer types that can be specified as the underlying types of enumerations, see [Class Library Overview](../Topic/.NET%20Framework%20Class%20Library%20Overview.md).  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example illustrates the use of `DefineEnum` to implement an enumeration class in a dynamic module. The example defines an enumeration named `Elevation` that has an underlying type of <xref:System.Int32>, and creates two elements: `Low`, with a value of 0, and `High`, with a value of 1. After the type has been created, the assembly is saved with the name `TempAssembly.dll`. You can use the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) to examine the contents of this assembly.  \n  \n> [!NOTE]\n>  Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.  \n  \n [!CODE [ModuleBuilder_DefineEnum#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_DefineEnum#1)]"
  syntax:
    content: public System.Reflection.Emit.EnumBuilder DefineEnum (string name, System.Reflection.TypeAttributes visibility, Type underlyingType);
    parameters:
    - id: name
      type: System.String
      description: The full path of the enumeration type.  cannot contain embedded nulls.
    - id: visibility
      type: System.Reflection.TypeAttributes
      description: The type attributes for the enumeration. The attributes are any bits defined by <see cref="T:System.Reflection.TypeAttributes">.
    - id: underlyingType
      type: System.Type
      description: The underlying type for the enumeration. This must be a built-in integer type.
    return:
      type: System.Reflection.Emit.EnumBuilder
      description: The defined enumeration.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineGlobalMethod(String,MethodAttributes,Type,Type[])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,Type,Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,Type,Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a global method with the specified name, attributes, return type, and parameter types.
  remarks: "The global method that this method defines is not usable until you call <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A>.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example illustrates the use of `DefineGlobalMethod` to create a type-independent method tied to the current <xref:System.Reflection.Emit.ModuleBuilder>. After building the global method, <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A> must be called in order to complete it.  \n  \n [!CODE [ModuleBuilder_CreateGlobalFunctions#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_CreateGlobalFunctions#1)]"
  syntax:
    content: public System.Reflection.Emit.MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);
    parameters:
    - id: name
      type: System.String
      description: The name of the method.  cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the method.  must include <see cref="T:System.Reflection.MethodAttributes">.
    - id: returnType
      type: System.Type
      description: The return type of the method.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the method's parameters.
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: The defined global method.
  overload: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.
  remarks: "You cannot use the global method that this method defines until you call <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A>.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following code sample illustrates the use of `DefineGlobalMethod` to create a type-independent method tied to the current <xref:System.Reflection.Emit.ModuleBuilder>. After building the global method, <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A> must be called in order to complete it.  \n  \n [!CODE [ModuleBuilder_CreateGlobalFunctions#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_CreateGlobalFunctions#1)]"
  syntax:
    content: public System.Reflection.Emit.MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    parameters:
    - id: name
      type: System.String
      description: The name of the method.  cannot contain embedded nulls.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the method.  must include <see cref="T:System.Reflection.MethodAttributes">.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention for the method.
    - id: returnType
      type: System.Type
      description: The return type of the method.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the method's parameters.
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: The defined global method.
  overload: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.
  remarks: "This overload is provided for designers of managed compilers.  \n  \n You cannot use the global method that this method defines until you call <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A>.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public System.Reflection.Emit.MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);
    parameters:
    - id: name
      type: System.String
      description: The name of the method.  cannot contain embedded null characters.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the method.  must include <see cref="T:System.Reflection.MethodAttributes">.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention for the method.
    - id: returnType
      type: System.Type
      description: The return type of the method.
    - id: requiredReturnTypeCustomModifiers
      type: System.Type[]
      description: An array of types representing the required custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst"> or <xref:System.Runtime.CompilerServices.IsBoxed>. If the return type has no required custom modifiers, specify `null`.
    - id: optionalReturnTypeCustomModifiers
      type: System.Type[]
      description: An array of types representing the optional custom modifiers for the return type, such as <see cref="T:System.Runtime.CompilerServices.IsConst"> or <xref:System.Runtime.CompilerServices.IsBoxed>. If the return type has no optional custom modifiers, specify `null`.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the method's parameters.
    - id: requiredParameterTypeCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.
    - id: optionalParameterTypeCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: The defined global method.
  overload: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  id: DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineInitializedData(String,Byte[],FieldAttributes)
  nameWithType: ModuleBuilder.DefineInitializedData(String,Byte[],FieldAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(String,Byte[],FieldAttributes)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines an initialized data field in the .sdata section of the portable executable (PE) file.
  remarks: "<xref:System.Reflection.FieldAttributes> is automatically included in .  \n  \n The data defined by this method is not created until the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A> method is called.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example uses the DefineInitializedData method to define an initialized data field in the `.sdata` section of the portable executable (PE) file.  \n  \n [!CODE [ModuleBuilder_DefineInitializedData#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_DefineInitializedData#1)]"
  syntax:
    content: public System.Reflection.Emit.FieldBuilder DefineInitializedData (string name, byte[] data, System.Reflection.FieldAttributes attributes);
    parameters:
    - id: name
      type: System.String
      description: The name used to refer to the data.  cannot contain embedded nulls.
    - id: data
      type: System.Byte[]
      description: The binary large object (BLOB) of data.
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: The attributes for the field. The default is `Static`.
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: A field to reference the data.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineManifestResource(System.String,System.IO.Stream,System.Reflection.ResourceAttributes)
  id: DefineManifestResource(System.String,System.IO.Stream,System.Reflection.ResourceAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineManifestResource(String,Stream,ResourceAttributes)
  nameWithType: ModuleBuilder.DefineManifestResource(String,Stream,ResourceAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineManifestResource(String,Stream,ResourceAttributes)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a binary large object (BLOB) that represents a manifest resource to be embedded in the dynamic assembly.
  remarks: "Resources that are recorded in the assembly manifest can be managed resources or manifest resource BLOBs, and each of these can be included in the assembly either by linking or by embedding. All four scenarios are supported for dynamic assemblies.  \n  \n-   This method allows you to embed a manifest resource BLOB into a dynamic assembly.  \n  \n-   To embed a managed resource into the manifest module of a dynamic assembly or into a satellite module, use the <xref:System.Reflection.Emit.ModuleBuilder.DefineResource%2A?displayProperty=fullName> method to get a resource writer, and use the <xref:System.Resources.ResourceWriter.AddResource%2A?displayProperty=fullName> method to add the resource.  \n  \n-   To link a managed resource into a dynamic assembly, use the <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A?displayProperty=fullName> method to get a resource writer, and use the <xref:System.Resources.ResourceWriter.AddResource%2A?displayProperty=fullName> method to add the linked resource.  \n  \n-   To link a manifest resource BLOB into a dynamic assembly, use the <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A?displayProperty=fullName> method to add the linked resource.  \n  \n In addition, a single Win32 resource can be attached to an assembly by using the <xref:System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource%2A?displayProperty=fullName> method or the <xref:System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource%2A?displayProperty=fullName> method. This resource does not appear in the assembly manifest."
  example:
  - "The following example generates and saves a dynamic assembly named `EmittedManifestResourceAssembly.exe`, which contains an embedded unmanaged resource. The example creates the assembly, which consists of one module, and opens a memory stream to contain the unmanaged resource. The code then calls the DefineManifestResource method to define the resource.  \n  \n> [!NOTE]\n>  You can use any kind of stream for your resource; for example, you can read the unmanaged binary data from a file.  \n  \n The example defines a type in the dynamic module with a `Main` method, and generates MSIL for the method body. After the body for the `Main` method has been generated and the type has been created, the code example writes five bytes to the stream associated with the manifest resource. When the assembly is saved, the resource is appended to it.  \n  \n After running the example, you can run the emitted assembly. The code in the emitted assembly's `Main` method reads the embedded manifest resource and prints the byte values to the console. You can use the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) to view the information in the assembly manifest.  \n  \n [!CODE [DefineManifestResource#1](../CodeSnippet/VS_Snippets_CLR/DefineManifestResource#1)]"
  syntax:
    content: public void DefineManifestResource (string name, System.IO.Stream stream, System.Reflection.ResourceAttributes attribute);
    parameters:
    - id: name
      type: System.String
      description: The case-sensitive name for the resource.
    - id: stream
      type: System.IO.Stream
      description: A stream that contains the bytes for the resource.
    - id: attribute
      type: System.Reflection.ResourceAttributes
      description: An enumeration value that specifies whether the resource is public or private.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
  id: DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefinePInvokeMethod(String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
  nameWithType: ModuleBuilder.DefinePInvokeMethod(String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
  fullName: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a `PInvoke` method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the `PInvoke` flags.
  remarks: "Some DLL import attributes (see the description of System.Runtime.InteropServices.DllImportAttribute) cannot be specified as arguments to this method. Such attributes should be set by emitting a custom attribute for the method. For example, the DLL import attribute `PreserveSig` is set by emitting a custom attribute.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example illustrates the use of the `DefinePInvokeMethod` method to create a <xref:System.Reflection.Emit.MethodBuilder> for an external unmanaged method, `MessageBoxA`, in the Win32 API. The example displays a message box with **Retry** and **Cancel** buttons, and displays the return value from the message box.  \n  \n> [!IMPORTANT]\n>  To get a non-zero return value, you must add <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=fullName> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=fullName> methods.  \n  \n [!CODE [ModuleBuilder_DefinePInvokeMethod1#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_DefinePInvokeMethod1#1)]"
  syntax:
    content: public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);
    parameters:
    - id: name
      type: System.String
      description: The name of the `PInvoke` method.  cannot contain embedded nulls.
    - id: dllName
      type: System.String
      description: The name of the DLL in which the `PInvoke` method is defined.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the method.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The method's calling convention.
    - id: returnType
      type: System.Type
      description: The method's return type.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the method's parameters.
    - id: nativeCallConv
      type: System.Runtime.InteropServices.CallingConvention
      description: The native calling convention.
    - id: nativeCharSet
      type: System.Runtime.InteropServices.CharSet
      description: The method's native character set.
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: The defined `PInvoke` method.
  overload: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
  id: DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
  nameWithType: ModuleBuilder.DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
  fullName: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a `PInvoke` method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the `PInvoke` flags.
  remarks: "Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method. Such attributes should be set by emitting a custom attribute for the method. For example, the DLL import attribute `PreserveSig` is set by emitting a custom attribute.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example illustrates the use of the `DefinePInvokeMethod` method to create a <xref:System.Reflection.Emit.MethodBuilder> for an external unmanaged method, `MessageBoxA`, in the Win32 API. The example displays a message box with **Retry** and **Cancel** buttons, and displays the return value from the message box.  \n  \n> [!IMPORTANT]\n>  To get a non-zero return value, you must add <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=fullName> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=fullName> methods.  \n  \n This example uses a different overload of the DefinePInvokeMethod method, but the technique is the same.  \n  \n [!CODE [ModuleBuilder_DefinePInvokeMethod1#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_DefinePInvokeMethod1#1)]"
  syntax:
    content: public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);
    parameters:
    - id: name
      type: System.String
      description: The name of the `PInvoke` method.  cannot contain embedded nulls.
    - id: dllName
      type: System.String
      description: The name of the DLL in which the `PInvoke` method is defined.
    - id: entryName
      type: System.String
      description: The name of the entry point in the DLL.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: The attributes of the method.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The method's calling convention.
    - id: returnType
      type: System.Type
      description: The method's return type.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the method's parameters.
    - id: nativeCallConv
      type: System.Runtime.InteropServices.CallingConvention
      description: The native calling convention.
    - id: nativeCharSet
      type: System.Runtime.InteropServices.CharSet
      description: The method's native character set.
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: The defined `PInvoke` method.
  overload: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineResource(System.String,System.String)
  id: DefineResource(System.String,System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineResource(String,String)
  nameWithType: ModuleBuilder.DefineResource(String,String)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineResource(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines the named managed embedded resource to be stored in this module.
  remarks: "The caller must not call the `ResourceWriter.Generate()` and `ResourceWriter.Close()` methods, because these methods are called by `ModuleBuilder.Save` when the dynamic assembly is written to disk.  \n  \n Use this method to embed a managed resource. To embed a manifest resource blob, use the <xref:System.Reflection.Emit.ModuleBuilder.DefineManifestResource%2A> method. For a summary of embedding and linking managed resources and manifest resource blobs, see the <xref:System.Reflection.Emit.ModuleBuilder.DefineManifestResource%2A> method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example illustrates the use of `DefineResource` to add an external resource to the current <xref:System.Reflection.Emit.ModuleBuilder>.  \n  \n [!CODE [ModuleBuilder_DefineResource1#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_DefineResource1#1)]"
  syntax:
    content: public System.Resources.IResourceWriter DefineResource (string name, string description);
    parameters:
    - id: name
      type: System.String
      description: The name of the resource.  cannot contain embedded nulls.
    - id: description
      type: System.String
      description: The description of the resource.
    return:
      type: System.Resources.IResourceWriter
      description: A resource writer for the defined resource.
  overload: System.Reflection.Emit.ModuleBuilder.DefineResource*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineResource(System.String,System.String,System.Reflection.ResourceAttributes)
  id: DefineResource(System.String,System.String,System.Reflection.ResourceAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineResource(String,String,ResourceAttributes)
  nameWithType: ModuleBuilder.DefineResource(String,String,ResourceAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineResource(String,String,ResourceAttributes)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines the named managed embedded resource with the given attributes that is to be stored in this module.
  remarks: "The caller must not call the `ResourceWriter.Generate()` and `ResourceWriter.Close()` methods, because these methods are called by `ModuleBuilder.Save` when the dynamic assembly is written to disk.  \n  \n Use this method to embed a managed resource. To embed a manifest resource blob, use the <xref:System.Reflection.Emit.ModuleBuilder.DefineManifestResource%2A> method. For a summary of embedding and linking managed resources and manifest resource blobs, see the <xref:System.Reflection.Emit.ModuleBuilder.DefineManifestResource%2A> method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example illustrates the use of DefineResource to add an external resource to the current <xref:System.Reflection.Emit.ModuleBuilder>.  \n  \n [!CODE [ModuleBuilder_DefineResource2#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_DefineResource2#1)]"
  syntax:
    content: public System.Resources.IResourceWriter DefineResource (string name, string description, System.Reflection.ResourceAttributes attribute);
    parameters:
    - id: name
      type: System.String
      description: The name of the resource.  cannot contain embedded nulls.
    - id: description
      type: System.String
      description: The description of the resource.
    - id: attribute
      type: System.Reflection.ResourceAttributes
      description: The resource attributes.
    return:
      type: System.Resources.IResourceWriter
      description: A resource writer for the defined resource.
  overload: System.Reflection.Emit.ModuleBuilder.DefineResource*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  id: DefineType(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineType(String)
  nameWithType: ModuleBuilder.DefineType(String)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Constructs a `TypeBuilder` for a private type with the specified name in this module.
  remarks: "Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example creates a <xref:System.Reflection.Emit.TypeBuilder> in the current dynamic module using `CreateType`, builds and completes the type, and saves the assembly.  \n  \n [!CODE [Classic ModuleBuilder.DefineType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic ModuleBuilder.DefineType Example#1)]"
  syntax:
    content: public System.Reflection.Emit.TypeBuilder DefineType (string name);
    parameters:
    - id: name
      type: System.String
      description: The full path of the type, including the namespace.  cannot contain embedded nulls.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: A private type with the specified name.
  overload: System.Reflection.Emit.ModuleBuilder.DefineType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  id: DefineType(System.String,System.Reflection.TypeAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineType(String,TypeAttributes)
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Constructs a `TypeBuilder` given the type name and the type attributes.
  remarks: "Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example creates a <xref:System.Reflection.Emit.TypeBuilder> in the current dynamic module using `CreateType`, builds and completes the type, and saves the assembly.  \n  \n [!CODE [Classic ModuleBuilder.DefineType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic ModuleBuilder.DefineType Example#1)]"
  syntax:
    content: public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr);
    parameters:
    - id: name
      type: System.String
      description: The full path of the type.  cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes of the defined type.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: A `TypeBuilder` created with all of the requested attributes.
  overload: System.Reflection.Emit.ModuleBuilder.DefineType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineType(String,TypeAttributes,Type)
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes,Type)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes,Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Constructs a `TypeBuilder` given type name, its attributes, and the type that the defined type extends.
  remarks: "Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example creates a <xref:System.Reflection.Emit.TypeBuilder> in the current dynamic module using `CreateType`, builds and completes the type, and saves the assembly.  \n  \n [!CODE [Classic ModuleBuilder.DefineType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic ModuleBuilder.DefineType Example#1)]"
  syntax:
    content: public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent);
    parameters:
    - id: name
      type: System.String
      description: The full path of the type.  cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attribute to be associated with the type.
    - id: parent
      type: System.Type
      description: The type that the defined type extends.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: A `TypeBuilder` created with all of the requested attributes.
  overload: System.Reflection.Emit.ModuleBuilder.DefineType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineType(String,TypeAttributes,Type,Int32)
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes,Type,Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes,Type,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Constructs a `TypeBuilder` given the type name, the attributes, the type that the defined type extends, and the total size of the type.
  remarks: "Type names must be unique within an assembly. It is forbidden to have two types with the same name in two different modules of an assembly.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example creates a <xref:System.Reflection.Emit.TypeBuilder> in the current dynamic module using `CreateType`, builds and completes the type, and saves the assembly.  \n  \n [!CODE [Classic ModuleBuilder.DefineType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic ModuleBuilder.DefineType Example#1)]"
  syntax:
    content: public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, int typesize);
    parameters:
    - id: name
      type: System.String
      description: The full path of the type.  cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes of the defined type.
    - id: parent
      type: System.Type
      description: The type that the defined type extends.
    - id: typesize
      type: System.Int32
      description: The total size of the type.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: A `TypeBuilder` object.
  overload: System.Reflection.Emit.ModuleBuilder.DefineType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineType(String,TypeAttributes,Type,PackingSize)
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes,Type,PackingSize)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes,Type,PackingSize)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Constructs a `TypeBuilder` given the type name, the attributes, the type that the defined type extends, and the packing size of the type.
  remarks: "Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example creates a <xref:System.Reflection.Emit.TypeBuilder> in the current dynamic module using `CreateType`, builds and completes the type, and saves the assembly.  \n  \n [!CODE [Classic ModuleBuilder.DefineType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic ModuleBuilder.DefineType Example#1)]"
  syntax:
    content: public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packsize);
    parameters:
    - id: name
      type: System.String
      description: The full path of the type.  cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes of the defined type.
    - id: parent
      type: System.Type
      description: The type that the defined type extends.
    - id: packsize
      type: System.Reflection.Emit.PackingSize
      description: The packing size of the type.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: A `TypeBuilder` object.
  overload: System.Reflection.Emit.ModuleBuilder.DefineType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineType(String,TypeAttributes,Type,Type[])
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes,Type,Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes,Type,Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Constructs a `TypeBuilder` given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.
  remarks: "Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example creates a <xref:System.Reflection.Emit.TypeBuilder> in the current dynamic module using `CreateType`, builds and completes the type, and saves the assembly.  \n  \n [!CODE [Classic ModuleBuilder.DefineType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic ModuleBuilder.DefineType Example#1)]"
  syntax:
    content: public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);
    parameters:
    - id: name
      type: System.String
      description: The full path of the type.  cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes to be associated with the type.
    - id: parent
      type: System.Type
      description: The type that the defined type extends.
    - id: interfaces
      type: System.Type[]
      description: The list of interfaces that the type implements.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: A `TypeBuilder` created with all of the requested attributes.
  overload: System.Reflection.Emit.ModuleBuilder.DefineType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineType(String,TypeAttributes,Type,PackingSize,Int32)
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes,Type,PackingSize,Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes,Type,PackingSize,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Constructs a `TypeBuilder` given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.
  remarks: "Type names must be unique within an assembly. You cannot have two types with the same name in two different modules of an assembly.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example creates a <xref:System.Reflection.Emit.TypeBuilder> in the current dynamic module using `CreateType`, builds and completes the type, and saves the assembly.  \n  \n [!CODE [Classic ModuleBuilder.DefineType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic ModuleBuilder.DefineType Example#1)]"
  syntax:
    content: public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packingSize, int typesize);
    parameters:
    - id: name
      type: System.String
      description: The full path of the type.  cannot contain embedded nulls.
    - id: attr
      type: System.Reflection.TypeAttributes
      description: The attributes of the defined type.
    - id: parent
      type: System.Type
      description: The type that the defined type extends.
    - id: packingSize
      type: System.Reflection.Emit.PackingSize
      description: The packing size of the type.
    - id: typesize
      type: System.Int32
      description: The total size of the type.
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: A `TypeBuilder` created with all of the requested attributes.
  overload: System.Reflection.Emit.ModuleBuilder.DefineType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  id: DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineUninitializedData(String,Int32,FieldAttributes)
  nameWithType: ModuleBuilder.DefineUninitializedData(String,Int32,FieldAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(String,Int32,FieldAttributes)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.
  remarks: "<xref:System.Reflection.FieldAttributes> is automatically included in .  \n  \n The data defined by this method is not created until the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A> method is called.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public System.Reflection.Emit.FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);
    parameters:
    - id: name
      type: System.String
      description: The name used to refer to the data.  cannot contain embedded nulls.
    - id: size
      type: System.Int32
      description: The size of the data field.
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: The attributes for the field.
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: A field to reference the data.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.Byte[])
  id: DefineUnmanagedResource(System.Byte[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineUnmanagedResource(Byte[])
  nameWithType: ModuleBuilder.DefineUnmanagedResource(Byte[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines an unmanaged embedded resource given an opaque binary large object (BLOB) of bytes.
  remarks: "An assembly can be associated with only one unmanaged resource. This means that calling `DefineVersionInfoResource` or `DefineUnmanagedResource` after either one of the methods was called previously throws <xref:System.ArgumentException>. Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public void DefineUnmanagedResource (byte[] resource);
    parameters:
    - id: resource
      type: System.Byte[]
      description: An opaque BLOB that represents an unmanaged resource
  overload: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.String)
  id: DefineUnmanagedResource(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: DefineUnmanagedResource(String)
  nameWithType: ModuleBuilder.DefineUnmanagedResource(String)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines an unmanaged resource given the name of Win32 resource file.
  remarks: "An assembly can be associated with only one unmanaged resource. This means that calling `DefineVersionInfoResource` or `DefineUnmanagedResource` after either one of the methods was called previously throws <xref:System.ArgumentException>. Multiple unmanaged resources need to be merged with a tool such as the Microsoft ResMerge utility (not supplied with the common language runtime).  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public void DefineUnmanagedResource (string resourceFileName);
    parameters:
    - id: resourceFileName
      type: System.String
      description: The name of the unmanaged resource file.
  overload: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ModuleBuilder.Equals(Object)
  fullName: System.Reflection.Emit.ModuleBuilder.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a value that indicates whether this instance is equal to the specified object.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or `null`.
    return:
      type: System.Boolean
      description: '`true` if  equals the type and value of this instance; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  id: FullyQualifiedName
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: FullyQualifiedName
  nameWithType: ModuleBuilder.FullyQualifiedName
  fullName: System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a `String` representing the fully qualified name and path to this module.
  remarks: "To get the name without the path, use `Name`.  \n  \n> [!NOTE]\n>  The case of a module name is platform dependent."
  syntax:
    content: public override string FullyQualifiedName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetArrayMethod(Type,String,CallingConventions,Type,Type[])
  nameWithType: ModuleBuilder.GetArrayMethod(Type,String,CallingConventions,Type,Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(Type,String,CallingConventions,Type,Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the named method on an array class.
  remarks: '`GetArrayMethod` is useful when you have an array of a type whose definition has not been completed and you want to access methods defined on <xref:System.Array>. For example, you might define a type and want to define a method that takes an array of the type as a parameter. In order to access the elements of the array, you will need to call methods of the <xref:System.Array> class.'
  example:
  - "The following example demonstrates how to use GetArrayMethod to obtain the <xref:System.Reflection.MethodInfo> corresponding to a method that returns an array value.  \n  \n [!CODE [ModuleBuilder_GetArrayMethod#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_GetArrayMethod#1)]"
  syntax:
    content: public System.Reflection.MethodInfo GetArrayMethod (Type arrayClass, string methodName, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    parameters:
    - id: arrayClass
      type: System.Type
      description: An array class.
    - id: methodName
      type: System.String
      description: The name of a method on the array class.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The method's calling convention.
    - id: returnType
      type: System.Type
      description: The return type of the method.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the method's parameters.
    return:
      type: System.Reflection.MethodInfo
      description: The named method on an array class.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetArrayMethodToken(Type,String,CallingConventions,Type,Type[])
  nameWithType: ModuleBuilder.GetArrayMethodToken(Type,String,CallingConventions,Type,Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(Type,String,CallingConventions,Type,Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the token for the named method on an array class.
  remarks: This method is similar to <xref:System.Reflection.Emit.ModuleBuilder.GetArrayMethod%2A>, except that it returns the token of the array method instead of the method itself.
  example:
  - "The following example demonstrates how to use <xref:System.Reflection.Emit.ModuleBuilder.GetArrayMethod%2A> to obtain the <xref:System.Reflection.Emit.MethodToken> corresponding to a method that returns an array value.  \n  \n [!CODE [ModuleBuilder_GetArrayMethod#2](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_GetArrayMethod#2)]"
  syntax:
    content: public System.Reflection.Emit.MethodToken GetArrayMethodToken (Type arrayClass, string methodName, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    parameters:
    - id: arrayClass
      type: System.Type
      description: The object for the array.
    - id: methodName
      type: System.String
      description: A string that contains the name of the method.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention for the method.
    - id: returnType
      type: System.Type
      description: The return type of the method.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the parameters of the method.
    return:
      type: System.Reflection.Emit.MethodToken
      description: The token for the named method on an array class.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo)
  id: GetConstructorToken(System.Reflection.ConstructorInfo)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetConstructorToken(ConstructorInfo)
  nameWithType: ModuleBuilder.GetConstructorToken(ConstructorInfo)
  fullName: System.Reflection.Emit.ModuleBuilder.GetConstructorToken(ConstructorInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the token used to identify the specified constructor within this module.
  remarks: To be added.
  syntax:
    content: public System.Reflection.Emit.MethodToken GetConstructorToken (System.Reflection.ConstructorInfo con);
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: The constructor to get a token for.
    return:
      type: System.Reflection.Emit.MethodToken
      description: The token used to identify the specified constructor within this module.
  overload: System.Reflection.Emit.ModuleBuilder.GetConstructorToken*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Type})
  id: GetConstructorToken(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Type})
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetConstructorToken(ConstructorInfo,IEnumerable<Type>)
  nameWithType: ModuleBuilder.GetConstructorToken(ConstructorInfo,IEnumerable<Type>)
  fullName: System.Reflection.Emit.ModuleBuilder.GetConstructorToken(ConstructorInfo,IEnumerable<Type>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the token used to identify the constructor that has the specified attributes and parameter types within this module.
  remarks: To be added.
  syntax:
    content: public System.Reflection.Emit.MethodToken GetConstructorToken (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<Type> optionalParameterTypes);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The constructor to get a token for.
    - id: optionalParameterTypes
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: A collection of the types of the optional parameters to the constructor.
    return:
      type: System.Reflection.Emit.MethodToken
      description: The token used to identify the specified constructor within this module.
  overload: System.Reflection.Emit.ModuleBuilder.GetConstructorToken*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: ModuleBuilder.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.ModuleBuilder">.
  remarks: To be added.
  syntax:
    content: public override object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of this type.
    return:
      type: System.Object[]
      description: An array that contains the custom attributes; the array is empty if there are no attributes.
  overload: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: ModuleBuilder.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all the custom attributes that have been applied to the current <see cref="T:System.Reflection.Emit.ModuleBuilder">, and that derive from a specified attribute type.
  remarks: To be added.
  syntax:
    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The base type from which attributes derive.
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of this type.
    return:
      type: System.Object[]
      description: An array that contains the custom attributes that are derived, at any level, from ; the array is empty if there are no such attributes.
  overload: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData
  id: GetCustomAttributesData
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetCustomAttributesData()
  nameWithType: ModuleBuilder.GetCustomAttributesData()
  fullName: System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns information about the attributes that have been applied to the current <see cref="T:System.Reflection.Emit.ModuleBuilder">, expressed as <xref:System.Reflection.CustomAttributeData> objects.
  remarks: Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.
  syntax:
    content: public override System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: A generic list of <see cref="T:System.Reflection.CustomAttributeData"> objects representing data about the attributes that have been applied to the current module.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: ModuleBuilder.GetField(String,BindingFlags)
  fullName: System.Reflection.Emit.ModuleBuilder.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.
  remarks: "When you emit dynamic assemblies, fields in the .sdata region of the portable executable (PE) file are defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineInitializedData%2A> or <xref:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData%2A> methods.  \n  \n> [!IMPORTANT]\n>  Module-level fields cannot be retrieved until after the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A> method has been called for the module."
  syntax:
    content: public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The field name.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of the `BindingFlags` bit flags used to control the search.
    return:
      type: System.Reflection.FieldInfo
      description: A field that has the specified name and binding attributes, or `null` if the field does not exist.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: ModuleBuilder.GetFields(BindingFlags)
  fullName: System.Reflection.Emit.ModuleBuilder.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.
  remarks: "When you emit dynamic assemblies, fields in the .sdata region of the portable executable (PE) file are defined by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineInitializedData%2A> or <xref:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData%2A> methods.  \n  \n> [!IMPORTANT]\n>  Module-level fields cannot be retrieved until after the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A> method has been called for the module."
  syntax:
    content: public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingFlags);
    parameters:
    - id: bindingFlags
      type: System.Reflection.BindingFlags
      description: A combination of the `BindingFlags` bit flags used to control the search.
    return:
      type: System.Reflection.FieldInfo[]
      description: An array of fields that match the specified flags; the array is empty if no such fields exist.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetFieldToken(System.Reflection.FieldInfo)
  id: GetFieldToken(System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetFieldToken(FieldInfo)
  nameWithType: ModuleBuilder.GetFieldToken(FieldInfo)
  fullName: System.Reflection.Emit.ModuleBuilder.GetFieldToken(FieldInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the token used to identify the specified field within this module.
  remarks: To be added.
  syntax:
    content: public System.Reflection.Emit.FieldToken GetFieldToken (System.Reflection.FieldInfo field);
    parameters:
    - id: field
      type: System.Reflection.FieldInfo
      description: The field to get a token for.
    return:
      type: System.Reflection.Emit.FieldToken
      description: The token used to identify the specified field within this module.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ModuleBuilder.GetHashCode()
  fullName: System.Reflection.Emit.ModuleBuilder.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the hash code for this instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: ModuleBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.ModuleBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the module-level method that matches the specified criteria.
  remarks: "This method provides the implementation for all overloads of the inherited <xref:System.Reflection.Module.GetMethod%2A?displayProperty=fullName> method. Use the inherited <xref:System.Reflection.Module.GetMethod%2A?displayProperty=fullName> method to get methods that have been declared at the module level. Module-level methods are defined in emitted code by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A> method.  \n  \n> [!IMPORTANT]\n>  Module-level methods cannot be retrieved until after the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A> method has been called for the module."
  syntax:
    content: protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: The method name.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of `BindingFlags` bit flags used to control the search.
    - id: binder
      type: System.Reflection.Binder
      description: An object that implements `Binder`, containing properties related to this method.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The calling convention for the method.
    - id: types
      type: System.Type[]
      description: The parameter types of the method.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of parameter modifiers used to make binding work with parameter signatures in which the types have been modified.
    return:
      type: System.Reflection.MethodInfo
      description: A method that is defined at the module level, and matches the specified criteria; or `null` if such a method does not exist.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: ModuleBuilder.GetMethods(BindingFlags)
  fullName: System.Reflection.Emit.ModuleBuilder.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all the methods that have been defined at the module level for the current <see cref="T:System.Reflection.Emit.ModuleBuilder">, and that match the specified binding flags.
  remarks: "Module-level methods are defined in emitted code by using the <xref:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod%2A> method.  \n  \n> [!IMPORTANT]\n>  Module-level methods cannot be retrieved until after the <xref:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions%2A> method has been called for the module."
  syntax:
    content: public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingFlags);
    parameters:
    - id: bindingFlags
      type: System.Reflection.BindingFlags
      description: A combination of `BindingFlags` bit flags used to control the search.
    return:
      type: System.Reflection.MethodInfo[]
      description: An array that contains all the module-level methods that match .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)
  id: GetMethodToken(System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetMethodToken(MethodInfo)
  nameWithType: ModuleBuilder.GetMethodToken(MethodInfo)
  fullName: System.Reflection.Emit.ModuleBuilder.GetMethodToken(MethodInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the token used to identify the specified method within this module.
  remarks: To be added.
  syntax:
    content: public System.Reflection.Emit.MethodToken GetMethodToken (System.Reflection.MethodInfo method);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: The method to get a token for.
    return:
      type: System.Reflection.Emit.MethodToken
      description: The token used to identify the specified method within this module.
  overload: System.Reflection.Emit.ModuleBuilder.GetMethodToken*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Type})
  id: GetMethodToken(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Type})
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetMethodToken(MethodInfo,IEnumerable<Type>)
  nameWithType: ModuleBuilder.GetMethodToken(MethodInfo,IEnumerable<Type>)
  fullName: System.Reflection.Emit.ModuleBuilder.GetMethodToken(MethodInfo,IEnumerable<Type>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the token used to identify the method that has the specified attributes and parameter types within this module.
  remarks: To be added.
  syntax:
    content: public System.Reflection.Emit.MethodToken GetMethodToken (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<Type> optionalParameterTypes);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: The method to get a token for.
    - id: optionalParameterTypes
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: A collection of the types of the optional parameters to the method.
    return:
      type: System.Reflection.Emit.MethodToken
      description: The token used to identify the specified method within this module.
  overload: System.Reflection.Emit.ModuleBuilder.GetMethodToken*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  id: GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetPEKind(PortableExecutableKinds,ImageFileMachine)
  nameWithType: ModuleBuilder.GetPEKind(PortableExecutableKinds,ImageFileMachine)
  fullName: System.Reflection.Emit.ModuleBuilder.GetPEKind(PortableExecutableKinds,ImageFileMachine)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.
  remarks: For dynamic modules,  is always <xref:System.Reflection.PortableExecutableKinds?displayProperty=fullName> and  is always 0 (zero).
  syntax:
    content: public override void GetPEKind (out System.Reflection.PortableExecutableKinds peKind, out System.Reflection.ImageFileMachine machine);
    parameters:
    - id: peKind
      type: System.Reflection.PortableExecutableKinds
      description: When this method returns, a combination of the <see cref="T:System.Reflection.PortableExecutableKinds"> values indicating the nature of the code in the module.
    - id: machine
      type: System.Reflection.ImageFileMachine
      description: When this method returns, one of the <see cref="T:System.Reflection.ImageFileMachine"> values indicating the platform targeted by the module.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Reflection.Emit.SignatureHelper)
  id: GetSignatureToken(System.Reflection.Emit.SignatureHelper)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetSignatureToken(SignatureHelper)
  nameWithType: ModuleBuilder.GetSignatureToken(SignatureHelper)
  fullName: System.Reflection.Emit.ModuleBuilder.GetSignatureToken(SignatureHelper)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a token for the signature that is defined by the specified <see cref="T:System.Reflection.Emit.SignatureHelper">.
  remarks: This method defines a metadata token for the signature described by .
  syntax:
    content: public System.Reflection.Emit.SignatureToken GetSignatureToken (System.Reflection.Emit.SignatureHelper sigHelper);
    parameters:
    - id: sigHelper
      type: System.Reflection.Emit.SignatureHelper
      description: The signature.
    return:
      type: System.Reflection.Emit.SignatureToken
      description: A token for the defined signature.
  overload: System.Reflection.Emit.ModuleBuilder.GetSignatureToken*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Byte[],System.Int32)
  id: GetSignatureToken(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetSignatureToken(Byte[],Int32)
  nameWithType: ModuleBuilder.GetSignatureToken(Byte[],Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.GetSignatureToken(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a token for the signature that has the specified character array and signature length.
  remarks: To be added.
  syntax:
    content: public System.Reflection.Emit.SignatureToken GetSignatureToken (byte[] sigBytes, int sigLength);
    parameters:
    - id: sigBytes
      type: System.Byte[]
      description: The signature binary large object (BLOB).
    - id: sigLength
      type: System.Int32
      description: The length of the signature BLOB.
    return:
      type: System.Reflection.Emit.SignatureToken
      description: A token for the specified signature.
  overload: System.Reflection.Emit.ModuleBuilder.GetSignatureToken*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetSignerCertificate
  id: GetSignerCertificate
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetSignerCertificate()
  nameWithType: ModuleBuilder.GetSignerCertificate()
  fullName: System.Reflection.Emit.ModuleBuilder.GetSignerCertificate()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"> object corresponding to the certificate included in the Authenticode signature of the assembly which this module belongs to. If the assembly has not been Authenticode signed, `null` is returned.
  remarks: To be added.
  syntax:
    content: public override System.Security.Cryptography.X509Certificates.X509Certificate GetSignerCertificate ();
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: A certificate, or `null` if the assembly to which this module belongs has not been Authenticode signed.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetStringConstant(System.String)
  id: GetStringConstant(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetStringConstant(String)
  nameWithType: ModuleBuilder.GetStringConstant(String)
  fullName: System.Reflection.Emit.ModuleBuilder.GetStringConstant(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the token of the given string in the module’s constant pool.
  remarks: If  has already been defined, the existing token will be returned.
  syntax:
    content: public System.Reflection.Emit.StringToken GetStringConstant (string str);
    parameters:
    - id: str
      type: System.String
      description: The string to add to the module's constant pool.
    return:
      type: System.Reflection.Emit.StringToken
      description: The token of the string in the constant pool.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetSymWriter
  id: GetSymWriter
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetSymWriter()
  nameWithType: ModuleBuilder.GetSymWriter()
  fullName: System.Reflection.Emit.ModuleBuilder.GetSymWriter()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the symbol writer associated with this dynamic module.
  remarks: >-
    > [!NOTE]

    >  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later.
  syntax:
    content: public System.Diagnostics.SymbolStore.ISymbolWriter GetSymWriter ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolWriter
      description: The symbol writer associated with this dynamic module.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetType(System.String)
  id: GetType(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetType(String)
  nameWithType: ModuleBuilder.GetType(String)
  fullName: System.Reflection.Emit.ModuleBuilder.GetType(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the named type defined in the module.
  remarks: "Do not use this method to generate array types, pointer types, or byref types. Use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A?displayProperty=fullName>, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A?displayProperty=fullName>, and <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A?displayProperty=fullName> methods instead.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public override Type GetType (string className);
    parameters:
    - id: className
      type: System.String
      description: The name of the <see cref="T:System.Type"> to get.
    return:
      type: System.Type
      description: The requested type, if the type is defined in this module; otherwise, `null`.
  overload: System.Reflection.Emit.ModuleBuilder.GetType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)
  id: GetType(System.String,System.Boolean)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetType(String,Boolean)
  nameWithType: ModuleBuilder.GetType(String,Boolean)
  fullName: System.Reflection.Emit.ModuleBuilder.GetType(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the named type defined in the module, optionally ignoring the case of the type name.
  remarks: "Do not use this method to generate array types, pointer types, or byref types. Use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A?displayProperty=fullName>, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A?displayProperty=fullName>, and <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A?displayProperty=fullName> methods instead.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public override Type GetType (string className, bool ignoreCase);
    parameters:
    - id: className
      type: System.String
      description: The name of the <see cref="T:System.Type"> to get.
    - id: ignoreCase
      type: System.Boolean
      description: If `true`, the search is case-insensitive. If `false`, the search is case-sensitive.
    return:
      type: System.Type
      description: The requested type, if the type is defined in this module; otherwise, `null`.
  overload: System.Reflection.Emit.ModuleBuilder.GetType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetType(String,Boolean,Boolean)
  nameWithType: ModuleBuilder.GetType(String,Boolean,Boolean)
  fullName: System.Reflection.Emit.ModuleBuilder.GetType(String,Boolean,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.
  remarks: "The  parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if  is `false`.  \n  \n Do not use this method to generate array types, pointer types, or byref types. Use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A?displayProperty=fullName>, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A?displayProperty=fullName>, and <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A?displayProperty=fullName> methods instead.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public override Type GetType (string className, bool throwOnError, bool ignoreCase);
    parameters:
    - id: className
      type: System.String
      description: The name of the <see cref="T:System.Type"> to get.
    - id: throwOnError
      type: System.Boolean
      description: '`true` to throw an exception if the type cannot be found; `false` to return `null`.'
    - id: ignoreCase
      type: System.Boolean
      description: If `true`, the search is case-insensitive. If `false`, the search is case-sensitive.
    return:
      type: System.Type
      description: The specified type, if the type is declared in this module; otherwise, `null`.
  overload: System.Reflection.Emit.ModuleBuilder.GetType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetTypes
  id: GetTypes
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetTypes()
  nameWithType: ModuleBuilder.GetTypes()
  fullName: System.Reflection.Emit.ModuleBuilder.GetTypes()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all the classes defined within this module.
  remarks: "`ReflectionTypeLoadException` is a special class load exception. The `ReflectionTypeLoadException.Types` property contains the array of classes that were defined in the module and loaded. This array can contain some null values. The `ReflectionTypeLoadException.LoaderExceptions` property is an array of exceptions that represent the exceptions that were thrown by the class loader. The holes in the class array line up with the exceptions.  \n  \n For example, if the class initializers of one of the classes throws an exception while it is being loaded, a `TargetInvocationException` is stored in the corresponding element of the `LoaderExceptions` array.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public override Type[] GetTypes ();
    parameters: []
    return:
      type: System.Type[]
      description: An array that contains the types defined within the module that is reflected by this instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.String)
  id: GetTypeToken(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetTypeToken(String)
  nameWithType: ModuleBuilder.GetTypeToken(String)
  fullName: System.Reflection.Emit.ModuleBuilder.GetTypeToken(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the token used to identify the type with the specified name.
  remarks: This method is useful for clients of the <xref:System.Reflection.Emit.MethodRental> class who want to directly modify the body of a method.
  syntax:
    content: public System.Reflection.Emit.TypeToken GetTypeToken (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of the class, including the namespace.
    return:
      type: System.Reflection.Emit.TypeToken
      description: The token used to identify the type with the specified name within this module.
  overload: System.Reflection.Emit.ModuleBuilder.GetTypeToken*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.Type)
  id: GetTypeToken(System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: GetTypeToken(Type)
  nameWithType: ModuleBuilder.GetTypeToken(Type)
  fullName: System.Reflection.Emit.ModuleBuilder.GetTypeToken(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the token used to identify the specified type within this module.
  remarks: Tokens are used in Microsoft intermediate language (MSIL) instructions to identify objects. Tokens are relative to the module in which they are contained. For example, the token value for `String` is likely to be different from module to module. When `GetTypeToken` is invoked, a reference is added to the module. The reference becomes a permanent part of the module; multiple calls with the same argument have no additional effect.
  syntax:
    content: public System.Reflection.Emit.TypeToken GetTypeToken (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type object that represents the class type.
    return:
      type: System.Reflection.Emit.TypeToken
      description: The token used to identify the given type within this module.
  overload: System.Reflection.Emit.ModuleBuilder.GetTypeToken*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: IsDefined(Type,Boolean)
  nameWithType: ModuleBuilder.IsDefined(Type,Boolean)
  fullName: System.Reflection.Emit.ModuleBuilder.IsDefined(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a value that indicates whether the specified attribute type has been applied to this module.
  remarks: To be added.
  syntax:
    content: public override bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The type of custom attribute to test for.
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of this type.
    return:
      type: System.Boolean
      description: '`true` if one or more instances of  have been applied to this module; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.IsResource
  id: IsResource
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: IsResource()
  nameWithType: ModuleBuilder.IsResource()
  fullName: System.Reflection.Emit.ModuleBuilder.IsResource()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the object is a resource.
  remarks: To be added.
  syntax:
    content: public override bool IsResource ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the object is a resource; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.IsTransient
  id: IsTransient
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: IsTransient()
  nameWithType: ModuleBuilder.IsTransient()
  fullName: System.Reflection.Emit.ModuleBuilder.IsTransient()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a value that indicates whether this dynamic module is transient.
  remarks: To be added.
  syntax:
    content: public bool IsTransient ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if this dynamic module is transient; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.MDStreamVersion
  id: MDStreamVersion
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: MDStreamVersion
  nameWithType: ModuleBuilder.MDStreamVersion
  fullName: System.Reflection.Emit.ModuleBuilder.MDStreamVersion
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the metadata stream version.
  remarks: >-
    > [!NOTE]

    >  For more information on the metadata header, see "Partition II: Metadata Definition and Semantics" in the Common Language Infrastructure (CLI) documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.
  syntax:
    content: public override int MDStreamVersion { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.MetadataToken
  id: MetadataToken
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: MetadataToken
  nameWithType: ModuleBuilder.MetadataToken
  fullName: System.Reflection.Emit.ModuleBuilder.MetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a token that identifies the current dynamic module in metadata.
  remarks: "The tokens obtained using this property can be passed to the unmanaged Reflection API. For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."
  syntax:
    content: public override int MetadataToken { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.ModuleVersionId
  id: ModuleVersionId
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: ModuleVersionId
  nameWithType: ModuleBuilder.ModuleVersionId
  fullName: System.Reflection.Emit.ModuleBuilder.ModuleVersionId
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.
  remarks: "In unmanaged metadata, the GUID returned by the <xref:System.Reflection.Module.ModuleVersionId%2A> property is referred to as the `mvid`, and is stored in the GUID heap.  \n  \n> [!NOTE]\n>  More information about metadata can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site."
  syntax:
    content: public override Guid ModuleVersionId { get; }
    return:
      type: System.Guid
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.Name
  id: Name
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: Name
  nameWithType: ModuleBuilder.Name
  fullName: System.Reflection.Emit.ModuleBuilder.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: A string that indicates that this is an in-memory module.
  remarks: The name of a dynamic module cannot be obtained until the module has been saved and reloaded from disk.
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])
  id: ResolveField(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: ResolveField(Int32,Type[],Type[])
  nameWithType: ModuleBuilder.ResolveField(Int32,Type[],Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveField(Int32,Type[],Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.
  remarks: "Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where  is in scope to obtain an array of generic type arguments for . Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where  is in scope to obtain an array of generic type arguments for . It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [Module.ResolveMethod(Int32, Type\\[\\], Type\\[\\])](assetId:///M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])?qualifyHint=True&autoUpgrade=False) method."
  syntax:
    content: public override System.Reflection.FieldInfo ResolveField (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a field in the module.
    - id: genericTypeArguments
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: genericMethodArguments
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.Reflection.FieldInfo
      description: A <see cref="T:System.Reflection.FieldInfo"> object representing the field that is identified by the specified metadata token.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])
  id: ResolveMember(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: ResolveMember(Int32,Type[],Type[])
  nameWithType: ModuleBuilder.ResolveMember(Int32,Type[],Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveMember(Int32,Type[],Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.
  remarks: "Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where  is in scope to obtain an array of generic type arguments for . Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where  is in scope to obtain an array of generic type arguments for . It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [Module.ResolveMethod(Int32, Type\\[\\], Type\\[\\])](assetId:///M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])?qualifyHint=True&autoUpgrade=False) method."
  syntax:
    content: public override System.Reflection.MemberInfo ResolveMember (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a type or member in the module.
    - id: genericTypeArguments
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: genericMethodArguments
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.Reflection.MemberInfo
      description: A <see cref="T:System.Reflection.MemberInfo"> object representing the type or member that is identified by the specified metadata token.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])
  id: ResolveMethod(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: ResolveMethod(Int32,Type[],Type[])
  nameWithType: ModuleBuilder.ResolveMethod(Int32,Type[],Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveMethod(Int32,Type[],Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.
  remarks: "Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where  is in scope to obtain an array of generic type arguments for . Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where  is in scope to obtain an array of generic type arguments for . It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [Module.ResolveMethod(Int32, Type\\[\\], Type\\[\\])](assetId:///M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])?qualifyHint=True&autoUpgrade=False) method."
  syntax:
    content: public override System.Reflection.MethodBase ResolveMethod (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a method or constructor in the module.
    - id: genericTypeArguments
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: genericMethodArguments
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.Reflection.MethodBase
      description: A <see cref="T:System.Reflection.MethodBase"> object representing the method that is identified by the specified metadata token.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)
  id: ResolveSignature(System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: ResolveSignature(Int32)
  nameWithType: ModuleBuilder.ResolveSignature(Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveSignature(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the signature blob identified by a metadata token.
  remarks: >-
    > [!NOTE]

    >  Information about metadata tokens and signatures can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.
  syntax:
    content: public override byte[] ResolveSignature (int metadataToken);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a signature in the module.
    return:
      type: System.Byte[]
      description: An array of bytes representing the signature blob.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)
  id: ResolveString(System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: ResolveString(Int32)
  nameWithType: ModuleBuilder.ResolveString(Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveString(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the string identified by the specified metadata token.
  remarks: >-
    > [!NOTE]

    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.
  syntax:
    content: public override string ResolveString (int metadataToken);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a string in the string heap of the module.
    return:
      type: System.String
      description: A <see cref="T:System.String"> containing a string value from the metadata string heap.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])
  id: ResolveType(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: ResolveType(Int32,Type[],Type[])
  nameWithType: ModuleBuilder.ResolveType(Int32,Type[],Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveType(Int32,Type[],Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.
  remarks: "Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method on the type where  is in scope to obtain an array of generic type arguments for . Use the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName> method on the method where  is in scope to obtain an array of generic type arguments for . It is always safe to provide these arguments, even when they are not needed.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the ECMA Web site.  \n  \n For code that demonstrates token resolution using the generic context (that is, the generic type parameters of the generic type and/or the generic method in which the token is embedded) see the [Module.ResolveMethod(Int32, Type\\[\\], Type\\[\\])](assetId:///M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])?qualifyHint=True&autoUpgrade=False) method."
  syntax:
    content: public override Type ResolveType (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);
    parameters:
    - id: metadataToken
      type: System.Int32
      description: A metadata token that identifies a type in the module.
    - id: genericTypeArguments
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: genericMethodArguments
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object representing the type that is identified by the specified metadata token.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.ScopeName
  id: ScopeName
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: ScopeName
  nameWithType: ModuleBuilder.ScopeName
  fullName: System.Reflection.Emit.ModuleBuilder.ScopeName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a string that represents the name of the dynamic module.
  remarks: To be added.
  syntax:
    content: public override string ScopeName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: ModuleBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(CustomAttributeBuilder)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Applies a custom attribute to this module by using a custom attribute builder.
  remarks: >-
    > [!NOTE]

    >  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later.
  syntax:
    content: public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: An instance of a helper class that specifies the custom attribute to apply.
  overload: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: SetCustomAttribute(ConstructorInfo,Byte[])
  nameWithType: ModuleBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  fullName: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.
  remarks: "For more information about how to format , see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: The constructor for the custom attribute.
    - id: binaryAttribute
      type: System.Byte[]
      description: A byte BLOB representing the attribute.
  overload: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute(System.String,System.Byte[])
  id: SetSymCustomAttribute(System.String,System.Byte[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: SetSymCustomAttribute(String,Byte[])
  nameWithType: ModuleBuilder.SetSymCustomAttribute(String,Byte[])
  fullName: System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute(String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: This method does nothing.
  remarks: "This method does nothing.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public void SetSymCustomAttribute (string name, byte[] data);
    parameters:
    - id: name
      type: System.String
      description: The name of the custom attribute
    - id: data
      type: System.Byte[]
      description: An opaque binary large object (BLOB) of bytes that represents the value of the custom attribute.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(System.Reflection.MethodInfo)
  id: SetUserEntryPoint(System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: SetUserEntryPoint(MethodInfo)
  nameWithType: ModuleBuilder.SetUserEntryPoint(MethodInfo)
  fullName: System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(MethodInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the user entry point.
  remarks: "The compiler might generate a startup stub before calling user main. The startup stub will be the entry point. While the user main will be the user entry point so that debugger will not step into the compiler entry point.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public void SetUserEntryPoint (System.Reflection.MethodInfo entryPoint);
    parameters:
    - id: entryPoint
      type: System.Reflection.MethodInfo
      description: The user entry point.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_ModuleBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames%2A?displayProperty=fullName>.
  remarks: "This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.Emit.ModuleBuilder> instance is cast to an <xref:System.Runtime.InteropServices._ModuleBuilder> interface."
  syntax:
    content: void _ModuleBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array which receives the IDs corresponding to the names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo%2A?displayProperty=fullName>.
  remarks: "This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.Emit.ModuleBuilder> instance is cast to an <xref:System.Runtime.InteropServices._ModuleBuilder> interface."
  syntax:
    content: void _ModuleBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: A pointer to the requested type information object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(UInt32)
  nameWithType: ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount%2A?displayProperty=fullName>.
  remarks: "This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.Emit.ModuleBuilder> instance is cast to an <xref:System.Runtime.InteropServices._ModuleBuilder> interface."
  syntax:
    content: void _ModuleBuilder.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: The location that receives the number of type information interfaces provided by the object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_ModuleBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._ModuleBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._ModuleBuilder.Invoke%2A?displayProperty=fullName>.
  remarks: "This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.Emit.ModuleBuilder> instance is cast to an <xref:System.Runtime.InteropServices._ModuleBuilder> interface."
  syntax:
    content: void _ModuleBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: The member ID.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Reflection.Module
  isExternal: false
  name: System.Reflection.Module
- uid: System.Reflection.Emit.ModuleBuilder.Assembly
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: Assembly
  nameWithType: ModuleBuilder.Assembly
  fullName: System.Reflection.Emit.ModuleBuilder.Assembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: CreateGlobalFunctions()
  nameWithType: ModuleBuilder.CreateGlobalFunctions()
  fullName: System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions()
- uid: System.Reflection.Emit.ModuleBuilder.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineDocument(String,Guid,Guid,Guid)
  nameWithType: ModuleBuilder.DefineDocument(String,Guid,Guid,Guid)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineDocument(String,Guid,Guid,Guid)
- uid: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocumentWriter
  nameWithType: ISymbolDocumentWriter
  fullName: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineEnum(String,TypeAttributes,Type)
  nameWithType: ModuleBuilder.DefineEnum(String,TypeAttributes,Type)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineEnum(String,TypeAttributes,Type)
- uid: System.Reflection.Emit.EnumBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: EnumBuilder
  nameWithType: EnumBuilder
  fullName: System.Reflection.Emit.EnumBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineGlobalMethod(String,MethodAttributes,Type,Type[])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,Type,Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,Type,Type[])
- uid: System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodBuilder
  nameWithType: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[])
- uid: System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodBuilder
  nameWithType: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type[],Type[],Type[][],Type[][])
- uid: System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodBuilder
  nameWithType: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[][]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[][]
- uid: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineInitializedData(String,Byte[],FieldAttributes)
  nameWithType: ModuleBuilder.DefineInitializedData(String,Byte[],FieldAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(String,Byte[],FieldAttributes)
- uid: System.Reflection.Emit.FieldBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: FieldBuilder
  nameWithType: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  nameWithType: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Reflection.Emit.ModuleBuilder.DefineManifestResource(System.String,System.IO.Stream,System.Reflection.ResourceAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineManifestResource(String,Stream,ResourceAttributes)
  nameWithType: ModuleBuilder.DefineManifestResource(String,Stream,ResourceAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineManifestResource(String,Stream,ResourceAttributes)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Reflection.ResourceAttributes
  parent: System.Reflection
  isExternal: false
  name: ResourceAttributes
  nameWithType: ResourceAttributes
  fullName: System.Reflection.ResourceAttributes
- uid: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefinePInvokeMethod(String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
  nameWithType: ModuleBuilder.DefinePInvokeMethod(String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
  fullName: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
- uid: System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodBuilder
  nameWithType: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Runtime.InteropServices.CallingConvention
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CallingConvention
  nameWithType: CallingConvention
  fullName: System.Runtime.InteropServices.CallingConvention
- uid: System.Runtime.InteropServices.CharSet
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CharSet
  nameWithType: CharSet
  fullName: System.Runtime.InteropServices.CharSet
- uid: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
  nameWithType: ModuleBuilder.DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
  fullName: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(String,String,String,MethodAttributes,CallingConventions,Type,Type[],CallingConvention,CharSet)
- uid: System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodBuilder
  nameWithType: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Runtime.InteropServices.CallingConvention
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CallingConvention
  nameWithType: CallingConvention
  fullName: System.Runtime.InteropServices.CallingConvention
- uid: System.Runtime.InteropServices.CharSet
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CharSet
  nameWithType: CharSet
  fullName: System.Runtime.InteropServices.CharSet
- uid: System.Reflection.Emit.ModuleBuilder.DefineResource(System.String,System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineResource(String,String)
  nameWithType: ModuleBuilder.DefineResource(String,String)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineResource(String,String)
- uid: System.Resources.IResourceWriter
  parent: System.Resources
  isExternal: false
  name: IResourceWriter
  nameWithType: IResourceWriter
  fullName: System.Resources.IResourceWriter
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ModuleBuilder.DefineResource(System.String,System.String,System.Reflection.ResourceAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineResource(String,String,ResourceAttributes)
  nameWithType: ModuleBuilder.DefineResource(String,String,ResourceAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineResource(String,String,ResourceAttributes)
- uid: System.Resources.IResourceWriter
  parent: System.Resources
  isExternal: false
  name: IResourceWriter
  nameWithType: IResourceWriter
  fullName: System.Resources.IResourceWriter
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.ResourceAttributes
  parent: System.Reflection
  isExternal: false
  name: ResourceAttributes
  nameWithType: ResourceAttributes
  fullName: System.Reflection.ResourceAttributes
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineType(String)
  nameWithType: ModuleBuilder.DefineType(String)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String)
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineType(String,TypeAttributes)
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes)
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineType(String,TypeAttributes,Type)
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes,Type)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes,Type)
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineType(String,TypeAttributes,Type,Int32)
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes,Type,Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes,Type,Int32)
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineType(String,TypeAttributes,Type,PackingSize)
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes,Type,PackingSize)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes,Type,PackingSize)
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.PackingSize
  parent: System.Reflection.Emit
  isExternal: false
  name: PackingSize
  nameWithType: PackingSize
  fullName: System.Reflection.Emit.PackingSize
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineType(String,TypeAttributes,Type,Type[])
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes,Type,Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes,Type,Type[])
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineType(String,TypeAttributes,Type,PackingSize,Int32)
  nameWithType: ModuleBuilder.DefineType(String,TypeAttributes,Type,PackingSize,Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(String,TypeAttributes,Type,PackingSize,Int32)
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.PackingSize
  parent: System.Reflection.Emit
  isExternal: false
  name: PackingSize
  nameWithType: PackingSize
  fullName: System.Reflection.Emit.PackingSize
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineUninitializedData(String,Int32,FieldAttributes)
  nameWithType: ModuleBuilder.DefineUninitializedData(String,Int32,FieldAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(String,Int32,FieldAttributes)
- uid: System.Reflection.Emit.FieldBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: FieldBuilder
  nameWithType: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  nameWithType: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.Byte[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineUnmanagedResource(Byte[])
  nameWithType: ModuleBuilder.DefineUnmanagedResource(Byte[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: DefineUnmanagedResource(String)
  nameWithType: ModuleBuilder.DefineUnmanagedResource(String)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: Equals(Object)
  nameWithType: ModuleBuilder.Equals(Object)
  fullName: System.Reflection.Emit.ModuleBuilder.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: FullyQualifiedName
  nameWithType: ModuleBuilder.FullyQualifiedName
  fullName: System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetArrayMethod(Type,String,CallingConventions,Type,Type[])
  nameWithType: ModuleBuilder.GetArrayMethod(Type,String,CallingConventions,Type,Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(Type,String,CallingConventions,Type,Type[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetArrayMethodToken(Type,String,CallingConventions,Type,Type[])
  nameWithType: ModuleBuilder.GetArrayMethodToken(Type,String,CallingConventions,Type,Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(Type,String,CallingConventions,Type,Type[])
- uid: System.Reflection.Emit.MethodToken
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodToken
  nameWithType: MethodToken
  fullName: System.Reflection.Emit.MethodToken
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetConstructorToken(ConstructorInfo)
  nameWithType: ModuleBuilder.GetConstructorToken(ConstructorInfo)
  fullName: System.Reflection.Emit.ModuleBuilder.GetConstructorToken(ConstructorInfo)
- uid: System.Reflection.Emit.MethodToken
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodToken
  nameWithType: MethodToken
  fullName: System.Reflection.Emit.MethodToken
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Type})
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetConstructorToken(ConstructorInfo,IEnumerable<Type>)
  nameWithType: ModuleBuilder.GetConstructorToken(ConstructorInfo,IEnumerable<Type>)
  fullName: System.Reflection.Emit.ModuleBuilder.GetConstructorToken(ConstructorInfo,IEnumerable<Type>)
- uid: System.Reflection.Emit.MethodToken
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodToken
  nameWithType: MethodToken
  fullName: System.Reflection.Emit.MethodToken
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
- uid: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: ModuleBuilder.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: ModuleBuilder.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(Type,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetCustomAttributesData()
  nameWithType: ModuleBuilder.GetCustomAttributesData()
  fullName: System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData()
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeData>
  nameWithType: IList<CustomAttributeData>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
- uid: System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: ModuleBuilder.GetField(String,BindingFlags)
  fullName: System.Reflection.Emit.ModuleBuilder.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: ModuleBuilder.GetFields(BindingFlags)
  fullName: System.Reflection.Emit.ModuleBuilder.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.ModuleBuilder.GetFieldToken(System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetFieldToken(FieldInfo)
  nameWithType: ModuleBuilder.GetFieldToken(FieldInfo)
  fullName: System.Reflection.Emit.ModuleBuilder.GetFieldToken(FieldInfo)
- uid: System.Reflection.Emit.FieldToken
  parent: System.Reflection.Emit
  isExternal: false
  name: FieldToken
  nameWithType: FieldToken
  fullName: System.Reflection.Emit.FieldToken
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.Emit.ModuleBuilder.GetHashCode
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetHashCode()
  nameWithType: ModuleBuilder.GetHashCode()
  fullName: System.Reflection.Emit.ModuleBuilder.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ModuleBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: ModuleBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.ModuleBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.ParameterModifier
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
- uid: System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: ModuleBuilder.GetMethods(BindingFlags)
  fullName: System.Reflection.Emit.ModuleBuilder.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetMethodToken(MethodInfo)
  nameWithType: ModuleBuilder.GetMethodToken(MethodInfo)
  fullName: System.Reflection.Emit.ModuleBuilder.GetMethodToken(MethodInfo)
- uid: System.Reflection.Emit.MethodToken
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodToken
  nameWithType: MethodToken
  fullName: System.Reflection.Emit.MethodToken
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Type})
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetMethodToken(MethodInfo,IEnumerable<Type>)
  nameWithType: ModuleBuilder.GetMethodToken(MethodInfo,IEnumerable<Type>)
  fullName: System.Reflection.Emit.ModuleBuilder.GetMethodToken(MethodInfo,IEnumerable<Type>)
- uid: System.Reflection.Emit.MethodToken
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodToken
  nameWithType: MethodToken
  fullName: System.Reflection.Emit.MethodToken
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
- uid: System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetPEKind(PortableExecutableKinds,ImageFileMachine)
  nameWithType: ModuleBuilder.GetPEKind(PortableExecutableKinds,ImageFileMachine)
  fullName: System.Reflection.Emit.ModuleBuilder.GetPEKind(PortableExecutableKinds,ImageFileMachine)
- uid: System.Reflection.PortableExecutableKinds
  parent: System.Reflection
  isExternal: false
  name: PortableExecutableKinds
  nameWithType: PortableExecutableKinds
  fullName: System.Reflection.PortableExecutableKinds
- uid: System.Reflection.ImageFileMachine
  parent: System.Reflection
  isExternal: false
  name: ImageFileMachine
  nameWithType: ImageFileMachine
  fullName: System.Reflection.ImageFileMachine
- uid: System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Reflection.Emit.SignatureHelper)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetSignatureToken(SignatureHelper)
  nameWithType: ModuleBuilder.GetSignatureToken(SignatureHelper)
  fullName: System.Reflection.Emit.ModuleBuilder.GetSignatureToken(SignatureHelper)
- uid: System.Reflection.Emit.SignatureToken
  parent: System.Reflection.Emit
  isExternal: false
  name: SignatureToken
  nameWithType: SignatureToken
  fullName: System.Reflection.Emit.SignatureToken
- uid: System.Reflection.Emit.SignatureHelper
  parent: System.Reflection.Emit
  isExternal: false
  name: SignatureHelper
  nameWithType: SignatureHelper
  fullName: System.Reflection.Emit.SignatureHelper
- uid: System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetSignatureToken(Byte[],Int32)
  nameWithType: ModuleBuilder.GetSignatureToken(Byte[],Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.GetSignatureToken(Byte[],Int32)
- uid: System.Reflection.Emit.SignatureToken
  parent: System.Reflection.Emit
  isExternal: false
  name: SignatureToken
  nameWithType: SignatureToken
  fullName: System.Reflection.Emit.SignatureToken
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ModuleBuilder.GetSignerCertificate
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetSignerCertificate()
  nameWithType: ModuleBuilder.GetSignerCertificate()
  fullName: System.Reflection.Emit.ModuleBuilder.GetSignerCertificate()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Reflection.Emit.ModuleBuilder.GetStringConstant(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetStringConstant(String)
  nameWithType: ModuleBuilder.GetStringConstant(String)
  fullName: System.Reflection.Emit.ModuleBuilder.GetStringConstant(String)
- uid: System.Reflection.Emit.StringToken
  parent: System.Reflection.Emit
  isExternal: false
  name: StringToken
  nameWithType: StringToken
  fullName: System.Reflection.Emit.StringToken
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ModuleBuilder.GetSymWriter
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetSymWriter()
  nameWithType: ModuleBuilder.GetSymWriter()
  fullName: System.Reflection.Emit.ModuleBuilder.GetSymWriter()
- uid: System.Diagnostics.SymbolStore.ISymbolWriter
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolWriter
  nameWithType: ISymbolWriter
  fullName: System.Diagnostics.SymbolStore.ISymbolWriter
- uid: System.Reflection.Emit.ModuleBuilder.GetType(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetType(String)
  nameWithType: ModuleBuilder.GetType(String)
  fullName: System.Reflection.Emit.ModuleBuilder.GetType(String)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetType(String,Boolean)
  nameWithType: ModuleBuilder.GetType(String,Boolean)
  fullName: System.Reflection.Emit.ModuleBuilder.GetType(String,Boolean)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetType(String,Boolean,Boolean)
  nameWithType: ModuleBuilder.GetType(String,Boolean,Boolean)
  fullName: System.Reflection.Emit.ModuleBuilder.GetType(String,Boolean,Boolean)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ModuleBuilder.GetTypes
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetTypes()
  nameWithType: ModuleBuilder.GetTypes()
  fullName: System.Reflection.Emit.ModuleBuilder.GetTypes()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetTypeToken(String)
  nameWithType: ModuleBuilder.GetTypeToken(String)
  fullName: System.Reflection.Emit.ModuleBuilder.GetTypeToken(String)
- uid: System.Reflection.Emit.TypeToken
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeToken
  nameWithType: TypeToken
  fullName: System.Reflection.Emit.TypeToken
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: GetTypeToken(Type)
  nameWithType: ModuleBuilder.GetTypeToken(Type)
  fullName: System.Reflection.Emit.ModuleBuilder.GetTypeToken(Type)
- uid: System.Reflection.Emit.TypeToken
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeToken
  nameWithType: TypeToken
  fullName: System.Reflection.Emit.TypeToken
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: IsDefined(Type,Boolean)
  nameWithType: ModuleBuilder.IsDefined(Type,Boolean)
  fullName: System.Reflection.Emit.ModuleBuilder.IsDefined(Type,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ModuleBuilder.IsResource
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: IsResource()
  nameWithType: ModuleBuilder.IsResource()
  fullName: System.Reflection.Emit.ModuleBuilder.IsResource()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ModuleBuilder.IsTransient
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: IsTransient()
  nameWithType: ModuleBuilder.IsTransient()
  fullName: System.Reflection.Emit.ModuleBuilder.IsTransient()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ModuleBuilder.MDStreamVersion
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: MDStreamVersion
  nameWithType: ModuleBuilder.MDStreamVersion
  fullName: System.Reflection.Emit.ModuleBuilder.MDStreamVersion
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ModuleBuilder.MetadataToken
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: MetadataToken
  nameWithType: ModuleBuilder.MetadataToken
  fullName: System.Reflection.Emit.ModuleBuilder.MetadataToken
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ModuleBuilder.ModuleVersionId
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: ModuleVersionId
  nameWithType: ModuleBuilder.ModuleVersionId
  fullName: System.Reflection.Emit.ModuleBuilder.ModuleVersionId
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Reflection.Emit.ModuleBuilder.Name
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: Name
  nameWithType: ModuleBuilder.Name
  fullName: System.Reflection.Emit.ModuleBuilder.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: ResolveField(Int32,Type[],Type[])
  nameWithType: ModuleBuilder.ResolveField(Int32,Type[],Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveField(Int32,Type[],Type[])
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: ResolveMember(Int32,Type[],Type[])
  nameWithType: ModuleBuilder.ResolveMember(Int32,Type[],Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveMember(Int32,Type[],Type[])
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: ResolveMethod(Int32,Type[],Type[])
  nameWithType: ModuleBuilder.ResolveMethod(Int32,Type[],Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveMethod(Int32,Type[],Type[])
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: ResolveSignature(Int32)
  nameWithType: ModuleBuilder.ResolveSignature(Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveSignature(Int32)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: ResolveString(Int32)
  nameWithType: ModuleBuilder.ResolveString(Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveString(Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: ResolveType(Int32,Type[],Type[])
  nameWithType: ModuleBuilder.ResolveType(Int32,Type[],Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.ResolveType(Int32,Type[],Type[])
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ModuleBuilder.ScopeName
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: ScopeName
  nameWithType: ModuleBuilder.ScopeName
  fullName: System.Reflection.Emit.ModuleBuilder.ScopeName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: ModuleBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(CustomAttributeBuilder)
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: SetCustomAttribute(ConstructorInfo,Byte[])
  nameWithType: ModuleBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  fullName: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute(System.String,System.Byte[])
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: SetSymCustomAttribute(String,Byte[])
  nameWithType: ModuleBuilder.SetSymCustomAttribute(String,Byte[])
  fullName: System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute(String,Byte[])
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: SetUserEntryPoint(MethodInfo)
  nameWithType: ModuleBuilder.SetUserEntryPoint(MethodInfo)
  fullName: System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(MethodInfo)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(UInt32)
  nameWithType: ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.Emit.ModuleBuilder.System#Runtime#InteropServices#_ModuleBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  name: System.Runtime.InteropServices._ModuleBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.DefineResource*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.DefineType*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.GetConstructorToken*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.GetCustomAttributes*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.GetMethodToken*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.GetSignatureToken*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.GetType*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.GetTypeToken*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute*
  parent: System.Reflection.Emit.ModuleBuilder
  isExternal: false
  nameWithType: ModuleBuilder.
