### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.ConstructorBuilder
  id: ConstructorBuilder
  children:
  - System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)
  - System.Reflection.Emit.ConstructorBuilder.Attributes
  - System.Reflection.Emit.ConstructorBuilder.CallingConvention
  - System.Reflection.Emit.ConstructorBuilder.DeclaringType
  - System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  - System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)
  - System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Emit.ConstructorBuilder.GetILGenerator
  - System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)
  - System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags
  - System.Reflection.Emit.ConstructorBuilder.GetModule
  - System.Reflection.Emit.ConstructorBuilder.GetParameters
  - System.Reflection.Emit.ConstructorBuilder.GetToken
  - System.Reflection.Emit.ConstructorBuilder.InitLocals
  - System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Emit.ConstructorBuilder.MethodHandle
  - System.Reflection.Emit.ConstructorBuilder.Module
  - System.Reflection.Emit.ConstructorBuilder.Name
  - System.Reflection.Emit.ConstructorBuilder.ReflectedType
  - System.Reflection.Emit.ConstructorBuilder.ReturnType
  - System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  - System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})
  - System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])
  - System.Reflection.Emit.ConstructorBuilder.Signature
  - System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.Emit.ConstructorBuilder.ToString
  langs:
  - csharp
  name: ConstructorBuilder
  nameWithType: ConstructorBuilder
  fullName: System.Reflection.Emit.ConstructorBuilder
  type: Class
  summary: Defines and represents a constructor of a dynamic class.
  remarks: "ConstructorBuilder is used to fully describe a constructor in Microsoft intermediate language (MSIL), including the name, attributes, signature, and constructor body. It is used in conjunction with the <xref:System.Reflection.Emit.TypeBuilder> class to create classes at run time. Call <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A> to get an instance of ConstructorBuilder.  \n  \n If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.  \n  \n If you use ConstructorBuilder to define a constructor for your dynamic type, a default constructor is not provided. You have the following options for providing a default constructor in addition to the constructor you defined:  \n  \n-   If you want a default constructor that simply calls the default constructor of the base class, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A?displayProperty=fullName> method to create one (and optionally restrict access to it). Do not provide an implementation for this default constructor. If you do, an exception is thrown when you try to use the constructor. No exception is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName> method is called.  \n  \n-   If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=fullName> method to create a ConstructorBuilder, and provide your own implementation."
  example:
  - "The following code sample illustrates the contextual usage of a `ConstructorBuilder`.  \n  \n [!CODE [System.Reflection.Emit.ConstructorBuilder Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ConstructorBuilder Example#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ConstructorBuilder))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ConstructorBuilder : System.Reflection.ConstructorInfo, System.Runtime.InteropServices._ConstructorBuilder
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  - System.Reflection.MethodBase
  - System.Reflection.ConstructorInfo
  implements:
  - System.Runtime.InteropServices._ConstructorBuilder
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Reflection.ConstructorInfo.ConstructorName
  - System.Reflection.ConstructorInfo.Equals(System.Object)
  - System.Reflection.ConstructorInfo.GetHashCode
  - System.Reflection.ConstructorInfo.Invoke(System.Object[])
  - System.Reflection.ConstructorInfo.MemberType
  - System.Reflection.ConstructorInfo.op_Equality(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)
  - System.Reflection.ConstructorInfo.op_Inequality(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)
  - System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#GetType
  - System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#Invoke_2(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#Invoke_3(System.Object,System.Object[])
  - System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#Invoke_4(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Reflection.ConstructorInfo.System#Runtime#InteropServices#_ConstructorInfo#Invoke_5(System.Object[])
  - System.Reflection.ConstructorInfo.TypeConstructorName
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodBase.ContainsGenericParameters
  - System.Reflection.MethodBase.GetCurrentMethod
  - System.Reflection.MethodBase.GetGenericArguments
  - System.Reflection.MethodBase.GetMethodBody
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  - System.Reflection.MethodBase.IsAbstract
  - System.Reflection.MethodBase.IsAssembly
  - System.Reflection.MethodBase.IsConstructor
  - System.Reflection.MethodBase.IsFamily
  - System.Reflection.MethodBase.IsFamilyAndAssembly
  - System.Reflection.MethodBase.IsFamilyOrAssembly
  - System.Reflection.MethodBase.IsFinal
  - System.Reflection.MethodBase.IsGenericMethod
  - System.Reflection.MethodBase.IsGenericMethodDefinition
  - System.Reflection.MethodBase.IsHideBySig
  - System.Reflection.MethodBase.IsPrivate
  - System.Reflection.MethodBase.IsPublic
  - System.Reflection.MethodBase.IsSecurityCritical
  - System.Reflection.MethodBase.IsSecuritySafeCritical
  - System.Reflection.MethodBase.IsSecurityTransparent
  - System.Reflection.MethodBase.IsSpecialName
  - System.Reflection.MethodBase.IsStatic
  - System.Reflection.MethodBase.IsVirtual
  - System.Reflection.MethodBase.MethodImplementationFlags
  - System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  - System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)
  id: AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: AddDeclarativeSecurity(SecurityAction,PermissionSet)
  nameWithType: ConstructorBuilder.AddDeclarativeSecurity(SecurityAction,PermissionSet)
  fullName: System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(SecurityAction,PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Adds declarative security to this constructor.
  remarks: "AddDeclarativeSecurity can be called several times, with each call specifying a security action (such as `Demand`, `Assert`, and `Deny`) and a set of permissions that the action applies to.  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a constructor by using this method are stored in the old XML metadata format. See Emitting Declarative Security Attributes."
  example:
  - "The following code sample illustrates the use of `AddDeclarativeSecurity`.  \n  \n [!CODE [ConstructorBuilder_Attributes_4#1](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_Attributes_4#1)]"
  syntax:
    content: public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: The security action to be taken, such as Demand, Assert, and so on.
    - id: pset
      type: System.Security.PermissionSet
      description: The set of permissions the action applies to.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: Attributes
  nameWithType: ConstructorBuilder.Attributes
  fullName: System.Reflection.Emit.ConstructorBuilder.Attributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the attributes for this constructor.
  remarks: "The following code sample illustrates the use of `Attributes`.  \n  \n [!CODE [ConstructorBuilder_Attributes_4#2](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_Attributes_4#2)]"
  syntax:
    content: public override System.Reflection.MethodAttributes Attributes { get; }
    return:
      type: System.Reflection.MethodAttributes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.CallingConvention
  id: CallingConvention
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: CallingConvention
  nameWithType: ConstructorBuilder.CallingConvention
  fullName: System.Reflection.Emit.ConstructorBuilder.CallingConvention
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a <see cref="T:System.Reflection.CallingConventions"> value that depends on whether the declaring type is generic.
  remarks: To be added.
  syntax:
    content: public override System.Reflection.CallingConventions CallingConvention { get; }
    return:
      type: System.Reflection.CallingConventions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: DeclaringType
  nameWithType: ConstructorBuilder.DeclaringType
  fullName: System.Reflection.Emit.ConstructorBuilder.DeclaringType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves a reference to the <see cref="T:System.Type"> object for the type that declares this member.
  remarks: "A member of a class (or interface) is either declared or inherited from a base class (or interface).  \n  \n The following code sample illustrates the use of `DeclaringType`.  \n  \n [!CODE [ConstructorBuilder_Attributes_4#2](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_Attributes_4#2)]"
  syntax:
    content: public override Type DeclaringType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  id: DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: DefineParameter(Int32,ParameterAttributes,String)
  nameWithType: ConstructorBuilder.DefineParameter(Int32,ParameterAttributes,String)
  fullName: System.Reflection.Emit.ConstructorBuilder.DefineParameter(Int32,ParameterAttributes,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a parameter of this constructor.
  remarks: If you specify 0 (zero) for , this method returns a <xref:System.Reflection.Emit.ParameterBuilder> instead of throwing an exception. There is nothing useful that you can do with this <xref:System.Reflection.Emit.ParameterBuilder>.
  syntax:
    content: public System.Reflection.Emit.ParameterBuilder DefineParameter (int iSequence, System.Reflection.ParameterAttributes attributes, string strParamName);
    parameters:
    - id: iSequence
      type: System.Int32
      description: The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.
    - id: attributes
      type: System.Reflection.ParameterAttributes
      description: The attributes of the parameter.
    - id: strParamName
      type: System.String
      description: The name of the parameter. The name can be the null string.
    return:
      type: System.Reflection.Emit.ParameterBuilder
      description: Returns a `ParameterBuilder` object that represents the new parameter of this constructor.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: ConstructorBuilder.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all the custom attributes defined for this constructor.
  remarks: "The  parameter is ignored because a class never inherits constructors from base classes.  \n  \n To get the custom attributes, finish building the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>, retrieve the constructor by calling the <xref:System.Type.GetConstructor%2A> method on the returned type, and then call the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method on the returned <xref:System.Reflection.ConstructorInfo>."
  syntax:
    content: public override object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: Controls inheritance of custom attributes from base classes. This parameter is ignored.
    return:
      type: System.Object[]
      description: Returns an array of objects representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder"> instance.
  overload: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: ConstructorBuilder.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the custom attributes identified by the given type.
  remarks: "The  parameter is ignored because a class never inherits constructors from base classes.  \n  \n To get the custom attributes, finish building the type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A>, retrieve the constructor by calling the <xref:System.Type.GetConstructor%2A> method on the returned type, and then call the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method on the returned <xref:System.Reflection.ConstructorInfo>."
  syntax:
    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The custom attribute type.
    - id: inherit
      type: System.Boolean
      description: Controls inheritance of custom attributes from base classes. This parameter is ignored.
    return:
      type: System.Object[]
      description: Returns an array of type <see cref="T:System.Object"> representing the attributes of this constructor.
  overload: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.GetILGenerator
  id: GetILGenerator
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: GetILGenerator()
  nameWithType: ConstructorBuilder.GetILGenerator()
  fullName: System.Reflection.Emit.ConstructorBuilder.GetILGenerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets an <see cref="T:System.Reflection.Emit.ILGenerator"> for this constructor.
  remarks: The runtime generates the code for default constructors. Therefore, if an attempt is made to obtain an `ILGenerator`, an exception will be thrown.
  example:
  - "The following code sample illustrates the use of the `GetILGenerator` method.  \n  \n [!CODE [System.Reflection.Emit.ConstructorBuilder Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ConstructorBuilder Example#1)]"
  syntax:
    content: public System.Reflection.Emit.ILGenerator GetILGenerator ();
    parameters: []
    return:
      type: System.Reflection.Emit.ILGenerator
      description: Returns an <see cref="T:System.Reflection.Emit.ILGenerator"> object for this constructor.
  overload: System.Reflection.Emit.ConstructorBuilder.GetILGenerator*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)
  id: GetILGenerator(System.Int32)
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: GetILGenerator(Int32)
  nameWithType: ConstructorBuilder.GetILGenerator(Int32)
  fullName: System.Reflection.Emit.ConstructorBuilder.GetILGenerator(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets an <see cref="T:System.Reflection.Emit.ILGenerator"> object, with the specified MSIL stream size, that can be used to build a method body for this constructor.
  remarks: The runtime generates the code for default constructors. Therefore, if an attempt is made to obtain an `ILGenerator` for a default constructor, an exception is thrown.
  syntax:
    content: public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);
    parameters:
    - id: streamSize
      type: System.Int32
      description: The size of the MSIL stream, in bytes.
    return:
      type: System.Reflection.Emit.ILGenerator
      description: An <see cref="T:System.Reflection.Emit.ILGenerator"> for this constructor.
  overload: System.Reflection.Emit.ConstructorBuilder.GetILGenerator*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags
  id: GetMethodImplementationFlags
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: GetMethodImplementationFlags()
  nameWithType: ConstructorBuilder.GetMethodImplementationFlags()
  fullName: System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the method implementation flags for this constructor.
  remarks: "The following code sample illustrates the use of `GetMethodImplementationFlags`.  \n  \n [!CODE [ConstructorBuilder_GetModule_4#3](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_GetModule_4#3)]"
  syntax:
    content: public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();
    parameters: []
    return:
      type: System.Reflection.MethodImplAttributes
      description: The method implementation flags for this constructor.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.GetModule
  id: GetModule
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: GetModule()
  nameWithType: ConstructorBuilder.GetModule()
  fullName: System.Reflection.Emit.ConstructorBuilder.GetModule()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a reference to the module that contains this constructor.
  remarks: "The following code sample illustrates the usage of `GetModule`.  \n  \n [!CODE [System.Reflection.Emit.MethodBuilder.GetModule#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.MethodBuilder.GetModule#1)]"
  syntax:
    content: public System.Reflection.Module GetModule ();
    parameters: []
    return:
      type: System.Reflection.Module
      description: The module that contains this constructor.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.GetParameters
  id: GetParameters
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: GetParameters()
  nameWithType: ConstructorBuilder.GetParameters()
  fullName: System.Reflection.Emit.ConstructorBuilder.GetParameters()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the parameters of this constructor.
  remarks: This property is not supported until after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName> method has been called. In the .NET Framework versions 1.0 and 1.1, <xref:System.InvalidOperationException> is thrown. In the .NET Framework version 2.0, <xref:System.NotSupportedException> is thrown.
  example:
  - "The code sample illustrates the use of `GetParameters`.  \n  \n [!CODE [ConstructorBuilder_GetModule_4#4](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_GetModule_4#4)]"
  syntax:
    content: public override System.Reflection.ParameterInfo[] GetParameters ();
    parameters: []
    return:
      type: System.Reflection.ParameterInfo[]
      description: Returns an array of <see cref="T:System.Reflection.ParameterInfo"> objects that represent the parameters of this constructor.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.GetToken
  id: GetToken
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: GetToken()
  nameWithType: ConstructorBuilder.GetToken()
  fullName: System.Reflection.Emit.ConstructorBuilder.GetToken()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the <see cref="T:System.Reflection.Emit.MethodToken"> that represents the token for this constructor.
  remarks: "This code sample illustrates the use of `GetToken`.  \n  \n [!CODE [ConstructorBuilder_GetModule_4#2](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_GetModule_4#2)]"
  syntax:
    content: public System.Reflection.Emit.MethodToken GetToken ();
    parameters: []
    return:
      type: System.Reflection.Emit.MethodToken
      description: Returns the <see cref="T:System.Reflection.Emit.MethodToken"> of this constructor.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.InitLocals
  id: InitLocals
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: InitLocals
  nameWithType: ConstructorBuilder.InitLocals
  fullName: System.Reflection.Emit.ConstructorBuilder.InitLocals
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets or sets whether the local variables in this constructor should be zero-initialized.
  remarks: To be added.
  syntax:
    content: public bool InitLocals { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  id: Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: Invoke(BindingFlags,Binder,Object[],CultureInfo)
  nameWithType: ConstructorBuilder.Invoke(BindingFlags,Binder,Object[],CultureInfo)
  fullName: System.Reflection.Emit.ConstructorBuilder.Invoke(BindingFlags,Binder,Object[],CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Invokes the constructor dynamically reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.
  remarks: "If the constructor has no parameters, the value of the  parameter should be `null`. Otherwise, the number, type, and order of elements in the  array should be identical to the number, type, and order of parameters for the constructor reflected by this instance.  \n  \n For example, if the constructor reflected by this instance is declared as public class taking two strings, then the  parameter should be an array of <xref:System.Object> with length 2.  \n  \n> [!NOTE]\n>  Access restrictions are ignored for fully-trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted."
  syntax:
    content: public override object Invoke (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
    parameters:
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: This must be a bit flag from <see cref="T:System.Reflection.BindingFlags">, such as InvokeMethod, NonPublic, and so on.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If binder is `null`, the default binder is used. See <see cref="T:System.Reflection.Binder">.
    - id: parameters
      type: System.Object[]
      description: An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be `null`.
    - id: culture
      type: System.Globalization.CultureInfo
      description: An instance of <see cref="T:System.Globalization.CultureInfo"> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used. (For example, this is necessary to convert a <xref:System.String> that represents 1000 to a <xref:System.Double> value, since 1000 is represented differently by different cultures.)
    return:
      type: System.Object
      description: Returns an <see cref="T:System.Object"> that is the return value of the invoked constructor.
  overload: System.Reflection.Emit.ConstructorBuilder.Invoke*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  id: Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  nameWithType: ConstructorBuilder.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  fullName: System.Reflection.Emit.ConstructorBuilder.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified `Binder`.
  remarks: "The number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters for the constructor reflected by this instance.  \n  \n Before calling the constructor, `Invoke` ensures that the caller has access permission, and that the parameters are of the correct number, order and type.  \n  \n Access restrictions are ignored for fully-trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted."
  syntax:
    content: public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
    parameters:
    - id: obj
      type: System.Object
      description: The object that needs to be reinitialized.
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: One of the `BindingFlags` values that specifies the type of binding that is desired.
    - id: binder
      type: System.Reflection.Binder
      description: A `Binder` that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If  is `null`, then Binder.DefaultBinding is used.
    - id: parameters
      type: System.Object[]
      description: An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (`Nothing` in Visual Basic).
    - id: culture
      type: System.Globalization.CultureInfo
      description: A <see cref="T:System.Globalization.CultureInfo"> used to govern the coercion of types. If this is null, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    return:
      type: System.Object
      description: An instance of the class associated with the constructor.
  overload: System.Reflection.Emit.ConstructorBuilder.Invoke*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: IsDefined(Type,Boolean)
  nameWithType: ConstructorBuilder.IsDefined(Type,Boolean)
  fullName: System.Reflection.Emit.ConstructorBuilder.IsDefined(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Checks if the specified custom attribute type is defined.
  remarks: See the metadata specification for details on how to format .
  syntax:
    content: public override bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: A custom attribute type.
    - id: inherit
      type: System.Boolean
      description: Controls inheritance of custom attributes from base classes. This parameter is ignored.
    return:
      type: System.Boolean
      description: '`true` if the specified custom attribute type is defined; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.MethodHandle
  id: MethodHandle
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: MethodHandle
  nameWithType: ConstructorBuilder.MethodHandle
  fullName: System.Reflection.Emit.ConstructorBuilder.MethodHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.
  remarks: To be added.
  syntax:
    content: public override RuntimeMethodHandle MethodHandle { get; }
    return:
      type: System.RuntimeMethodHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.Module
  id: Module
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: Module
  nameWithType: ConstructorBuilder.Module
  fullName: System.Reflection.Emit.ConstructorBuilder.Module
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the dynamic module in which this constructor is defined.
  remarks: This property returns the same value as the <xref:System.Reflection.Emit.ConstructorBuilder.GetModule%2A> method.
  syntax:
    content: public override System.Reflection.Module Module { get; }
    return:
      type: System.Reflection.Module
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.Name
  id: Name
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: Name
  nameWithType: ConstructorBuilder.Name
  fullName: System.Reflection.Emit.ConstructorBuilder.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the name of this constructor.
  remarks: "The following code sample illustrates the use of `Name`.  \n  \n [!CODE [ConstructorBuilder_Name_5#2](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_Name_5#2)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.ReflectedType
  id: ReflectedType
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: ReflectedType
  nameWithType: ConstructorBuilder.ReflectedType
  fullName: System.Reflection.Emit.ConstructorBuilder.ReflectedType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Holds a reference to the <see cref="T:System.Type"> object from which this object was obtained.
  remarks: A <xref:System.Reflection.Emit.ConstructorBuilder> object represents a constructor on a particular class. In order to obtain a <xref:System.Reflection.ConstructorInfo> object, the <xref:System.Type> object that represents the class that supports the constructor is queried. This property holds a reference to that <xref:System.Type> object.
  syntax:
    content: public override Type ReflectedType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.ReturnType
  id: ReturnType
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: ReturnType
  nameWithType: ConstructorBuilder.ReturnType
  fullName: System.Reflection.Emit.ConstructorBuilder.ReturnType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets `null`.
  remarks: This property might be removed in a future version.
  syntax:
    content: public Type ReturnType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: ConstructorBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(CustomAttributeBuilder)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Set a custom attribute using a custom attribute builder.
  remarks: ''
  example:
  - "The following code sample illustrates the use of `SetCustomAttribute` of the context of a <xref:System.Reflection.Emit.ConstructorBuilder>, passing a <xref:System.Reflection.Emit.CustomAttributeBuilder>.  \n  \n [!CODE [ConstructorBuilder_SetCustomAttribute1#1](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_SetCustomAttribute1#1)]"
  syntax:
    content: public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: An instance of a helper class to define the custom attribute.
  overload: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: SetCustomAttribute(ConstructorInfo,Byte[])
  nameWithType: ConstructorBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  fullName: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Set a custom attribute using a specified custom attribute blob.
  remarks: See the metadata specification in the ECMA Partition II documentation for details on how to format . The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  example:
  - "The following code sample illustrates the use of `SetCustomAttribute` of the context of a <xref:System.Reflection.Emit.ConstructorBuilder>, passing a byte blob.  \n  \n [!CODE [ConstructorBuilder_SetCustomAttribute2#1](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_SetCustomAttribute2#1)]"
  syntax:
    content: public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: The constructor for the custom attribute.
    - id: binaryAttribute
      type: System.Byte[]
      description: A byte blob representing the attributes.
  overload: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  id: SetImplementationFlags(System.Reflection.MethodImplAttributes)
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: SetImplementationFlags(MethodImplAttributes)
  nameWithType: ConstructorBuilder.SetImplementationFlags(MethodImplAttributes)
  fullName: System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(MethodImplAttributes)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the method implementation flags for this constructor.
  remarks: "The following code sample illustrates the use of `SetImplementationFlags`.  \n  \n [!CODE [ConstructorBuilder_SetImplementationFlags#1](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_SetImplementationFlags#1)]"
  syntax:
    content: public void SetImplementationFlags (System.Reflection.MethodImplAttributes attributes);
    parameters:
    - id: attributes
      type: System.Reflection.MethodImplAttributes
      description: The method implementation flags.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})
  id: SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: SetMethodBody(Byte[],Int32,Byte[],IEnumerable<ExceptionHandler>,IEnumerable<Int32>)
  nameWithType: ConstructorBuilder.SetMethodBody(Byte[],Int32,Byte[],IEnumerable<ExceptionHandler>,IEnumerable<Int32>)
  fullName: System.Reflection.Emit.ConstructorBuilder.SetMethodBody(Byte[],Int32,Byte[],IEnumerable<ExceptionHandler>,IEnumerable<Int32>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates the body of the constructor by using a specified byte array of Microsoft intermediate language (MSIL) instructions.
  remarks: To be added.
  syntax:
    content: public void SetMethodBody (byte[] il, int maxStack, byte[] localSignature, System.Collections.Generic.IEnumerable<System.Reflection.Emit.ExceptionHandler> exceptionHandlers, System.Collections.Generic.IEnumerable<int> tokenFixups);
    parameters:
    - id: il
      type: System.Byte[]
      description: An array that contains valid MSIL instructions.
    - id: maxStack
      type: System.Int32
      description: The maximum stack evaluation depth.
    - id: localSignature
      type: System.Byte[]
      description: An array of bytes that contain the serialized local variable structure. Specify `null` if the constructor has no local variables.
    - id: exceptionHandlers
      type: System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler}
      description: A collection that contains the exception handlers for the constructor. Specify `null` if the constructor has no exception handlers.
    - id: tokenFixups
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: A collection of values that represent offsets in , each of which specifies the beginning of a token that may be modified. Specify `null` if the constructor has no tokens that have to be modified.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])
  id: SetSymCustomAttribute(System.String,System.Byte[])
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: SetSymCustomAttribute(String,Byte[])
  nameWithType: ConstructorBuilder.SetSymCustomAttribute(String,Byte[])
  fullName: System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(String,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets this constructor's custom attribute associated with symbolic information.
  remarks: "The following code sample illustrates the use of `SetSymCustomAttributes`.  \n  \n [!CODE [ConstructorBuilder_SetSymCustomAttribute#1](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_SetSymCustomAttribute#1)]"
  syntax:
    content: public void SetSymCustomAttribute (string name, byte[] data);
    parameters:
    - id: name
      type: System.String
      description: The name of the custom attribute.
    - id: data
      type: System.Byte[]
      description: The value of the custom attribute.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.Signature
  id: Signature
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: Signature
  nameWithType: ConstructorBuilder.Signature
  fullName: System.Reflection.Emit.ConstructorBuilder.Signature
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the signature of the field in the form of a string.
  remarks: To be added.
  syntax:
    content: public string Signature { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _ConstructorBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array which receives the IDs corresponding to the names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _ConstructorBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(UInt32)
  nameWithType: ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _ConstructorBuilder.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._ConstructorBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _ConstructorBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ConstructorBuilder.ToString
  id: ToString
  parent: System.Reflection.Emit.ConstructorBuilder
  langs:
  - csharp
  name: ToString()
  nameWithType: ConstructorBuilder.ToString()
  fullName: System.Reflection.Emit.ConstructorBuilder.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns this <see cref="T:System.Reflection.Emit.ConstructorBuilder"> instance as a <xref:System.String>.
  remarks: To be added.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: Returns a <see cref="T:System.String"> containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Reflection.ConstructorInfo
  isExternal: false
  name: System.Reflection.ConstructorInfo
- uid: System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: AddDeclarativeSecurity(SecurityAction,PermissionSet)
  nameWithType: ConstructorBuilder.AddDeclarativeSecurity(SecurityAction,PermissionSet)
  fullName: System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(SecurityAction,PermissionSet)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Reflection.Emit.ConstructorBuilder.Attributes
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: Attributes
  nameWithType: ConstructorBuilder.Attributes
  fullName: System.Reflection.Emit.ConstructorBuilder.Attributes
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.Emit.ConstructorBuilder.CallingConvention
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: CallingConvention
  nameWithType: ConstructorBuilder.CallingConvention
  fullName: System.Reflection.Emit.ConstructorBuilder.CallingConvention
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Reflection.Emit.ConstructorBuilder.DeclaringType
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: DeclaringType
  nameWithType: ConstructorBuilder.DeclaringType
  fullName: System.Reflection.Emit.ConstructorBuilder.DeclaringType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: DefineParameter(Int32,ParameterAttributes,String)
  nameWithType: ConstructorBuilder.DefineParameter(Int32,ParameterAttributes,String)
  fullName: System.Reflection.Emit.ConstructorBuilder.DefineParameter(Int32,ParameterAttributes,String)
- uid: System.Reflection.Emit.ParameterBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: ParameterBuilder
  nameWithType: ParameterBuilder
  fullName: System.Reflection.Emit.ParameterBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: ParameterAttributes
  nameWithType: ParameterAttributes
  fullName: System.Reflection.ParameterAttributes
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: ConstructorBuilder.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: ConstructorBuilder.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(Type,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ConstructorBuilder.GetILGenerator
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: GetILGenerator()
  nameWithType: ConstructorBuilder.GetILGenerator()
  fullName: System.Reflection.Emit.ConstructorBuilder.GetILGenerator()
- uid: System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: false
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: GetILGenerator(Int32)
  nameWithType: ConstructorBuilder.GetILGenerator(Int32)
  fullName: System.Reflection.Emit.ConstructorBuilder.GetILGenerator(Int32)
- uid: System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: false
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: GetMethodImplementationFlags()
  nameWithType: ConstructorBuilder.GetMethodImplementationFlags()
  fullName: System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags()
- uid: System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodImplAttributes
  nameWithType: MethodImplAttributes
  fullName: System.Reflection.MethodImplAttributes
- uid: System.Reflection.Emit.ConstructorBuilder.GetModule
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: GetModule()
  nameWithType: ConstructorBuilder.GetModule()
  fullName: System.Reflection.Emit.ConstructorBuilder.GetModule()
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Emit.ConstructorBuilder.GetParameters
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: GetParameters()
  nameWithType: ConstructorBuilder.GetParameters()
  fullName: System.Reflection.Emit.ConstructorBuilder.GetParameters()
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo[]
- uid: System.Reflection.Emit.ConstructorBuilder.GetToken
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: GetToken()
  nameWithType: ConstructorBuilder.GetToken()
  fullName: System.Reflection.Emit.ConstructorBuilder.GetToken()
- uid: System.Reflection.Emit.MethodToken
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodToken
  nameWithType: MethodToken
  fullName: System.Reflection.Emit.MethodToken
- uid: System.Reflection.Emit.ConstructorBuilder.InitLocals
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: InitLocals
  nameWithType: ConstructorBuilder.InitLocals
  fullName: System.Reflection.Emit.ConstructorBuilder.InitLocals
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: Invoke(BindingFlags,Binder,Object[],CultureInfo)
  nameWithType: ConstructorBuilder.Invoke(BindingFlags,Binder,Object[],CultureInfo)
  fullName: System.Reflection.Emit.ConstructorBuilder.Invoke(BindingFlags,Binder,Object[],CultureInfo)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  nameWithType: ConstructorBuilder.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  fullName: System.Reflection.Emit.ConstructorBuilder.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: IsDefined(Type,Boolean)
  nameWithType: ConstructorBuilder.IsDefined(Type,Boolean)
  fullName: System.Reflection.Emit.ConstructorBuilder.IsDefined(Type,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ConstructorBuilder.MethodHandle
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: MethodHandle
  nameWithType: ConstructorBuilder.MethodHandle
  fullName: System.Reflection.Emit.ConstructorBuilder.MethodHandle
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.ConstructorBuilder.Module
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: Module
  nameWithType: ConstructorBuilder.Module
  fullName: System.Reflection.Emit.ConstructorBuilder.Module
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Emit.ConstructorBuilder.Name
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: Name
  nameWithType: ConstructorBuilder.Name
  fullName: System.Reflection.Emit.ConstructorBuilder.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ConstructorBuilder.ReflectedType
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: ReflectedType
  nameWithType: ConstructorBuilder.ReflectedType
  fullName: System.Reflection.Emit.ConstructorBuilder.ReflectedType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ConstructorBuilder.ReturnType
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: ReturnType
  nameWithType: ConstructorBuilder.ReturnType
  fullName: System.Reflection.Emit.ConstructorBuilder.ReturnType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: ConstructorBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(CustomAttributeBuilder)
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: SetCustomAttribute(ConstructorInfo,Byte[])
  nameWithType: ConstructorBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  fullName: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: SetImplementationFlags(MethodImplAttributes)
  nameWithType: ConstructorBuilder.SetImplementationFlags(MethodImplAttributes)
  fullName: System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(MethodImplAttributes)
- uid: System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodImplAttributes
  nameWithType: MethodImplAttributes
  fullName: System.Reflection.MethodImplAttributes
- uid: System.Reflection.Emit.ConstructorBuilder.SetMethodBody(System.Byte[],System.Int32,System.Byte[],System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler},System.Collections.Generic.IEnumerable{System.Int32})
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: SetMethodBody(Byte[],Int32,Byte[],IEnumerable<ExceptionHandler>,IEnumerable<Int32>)
  nameWithType: ConstructorBuilder.SetMethodBody(Byte[],Int32,Byte[],IEnumerable<ExceptionHandler>,IEnumerable<Int32>)
  fullName: System.Reflection.Emit.ConstructorBuilder.SetMethodBody(Byte[],Int32,Byte[],IEnumerable<ExceptionHandler>,IEnumerable<Int32>)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Emit.ExceptionHandler}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ExceptionHandler>
  nameWithType: IEnumerable<ExceptionHandler>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Emit.ExceptionHandler>
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Int32>
  nameWithType: IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
- uid: System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(System.String,System.Byte[])
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: SetSymCustomAttribute(String,Byte[])
  nameWithType: ConstructorBuilder.SetSymCustomAttribute(String,Byte[])
  fullName: System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(String,Byte[])
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.Emit.ConstructorBuilder.Signature
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: Signature
  nameWithType: ConstructorBuilder.Signature
  fullName: System.Reflection.Emit.ConstructorBuilder.Signature
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(UInt32)
  nameWithType: ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.Emit.ConstructorBuilder.System#Runtime#InteropServices#_ConstructorBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: System.Runtime.InteropServices._ConstructorBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.ConstructorBuilder.ToString
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  name: ToString()
  nameWithType: ConstructorBuilder.ToString()
  fullName: System.Reflection.Emit.ConstructorBuilder.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes*
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  nameWithType: ConstructorBuilder.
- uid: System.Reflection.Emit.ConstructorBuilder.GetILGenerator*
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  nameWithType: ConstructorBuilder.
- uid: System.Reflection.Emit.ConstructorBuilder.Invoke*
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  nameWithType: ConstructorBuilder.
- uid: System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute*
  parent: System.Reflection.Emit.ConstructorBuilder
  isExternal: false
  nameWithType: ConstructorBuilder.
