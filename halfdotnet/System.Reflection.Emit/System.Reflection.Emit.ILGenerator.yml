### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.ILGenerator
  id: ILGenerator
  children:
  - System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  - System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  - System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  - System.Reflection.Emit.ILGenerator.BeginFaultBlock
  - System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  - System.Reflection.Emit.ILGenerator.BeginScope
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  - System.Reflection.Emit.ILGenerator.DefineLabel
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  - System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  - System.Reflection.Emit.ILGenerator.EndExceptionBlock
  - System.Reflection.Emit.ILGenerator.EndScope
  - System.Reflection.Emit.ILGenerator.ILOffset
  - System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  - System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  langs:
  - csharp
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
  type: Class
  summary: Generates Microsoft intermediate language (MSIL) instructions.
  remarks: "ILGenerator is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <xref:System.Reflection.Emit.MethodBuilder> and <xref:System.Reflection.Emit.ConstructorBuilder> classes) and for standalone dynamic methods (represented by the <xref:System.Reflection.Emit.DynamicMethod> class). To obtain an ILGenerator, use the <xref:System.Reflection.Emit.ConstructorBuilder.GetILGenerator%2A?displayProperty=fullName>, <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A?displayProperty=fullName>, and <xref:System.Reflection.Emit.MethodBuilder.GetILGenerator%2A?displayProperty=fullName> methods.  \n  \n MSIL is used as input to a just-in-time (JIT) compiler."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ILGenerator))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ILGenerator : System.Runtime.InteropServices._ILGenerator
  inheritance:
  - System.Object
  implements:
  - System.Runtime.InteropServices._ILGenerator
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  id: BeginCatchBlock(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginCatchBlock(Type)
  nameWithType: ILGenerator.BeginCatchBlock(Type)
  fullName: System.Reflection.Emit.ILGenerator.BeginCatchBlock(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Begins a catch block.
  remarks: "Emits a branch instruction to the end of the current exception block.  \n  \n> [!NOTE]\n>  If the filter exception block returns the `constant exception_execute_handler` (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the `BeginCatchBlock` is not checked."
  example:
  - "The code sample below demonstrates the contextual usage of the `BeginCatchBlock` method.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.ThrowException Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example#1)]"
  syntax:
    content: public virtual void BeginCatchBlock (Type exceptionType);
    parameters:
    - id: exceptionType
      type: System.Type
      description: The <see cref="T:System.Type"> object that represents the exception.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  id: BeginExceptFilterBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginExceptFilterBlock()
  nameWithType: ILGenerator.BeginExceptFilterBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Begins an exception block for a filtered exception.
  remarks: "Emits a branch instruction to the end of the current exception block.  \n  \n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting filtered exception blocks is not supported. <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses filtered exception blocks."
  syntax:
    content: public virtual void BeginExceptFilterBlock ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  id: BeginExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginExceptionBlock()
  nameWithType: ILGenerator.BeginExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptionBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Begins an exception block for a non-filtered exception.
  remarks: Creating an exception block records some information, but does not actually emit any Microsoft intermediate language (MSIL) onto the stream.
  example:
  - "The code sample below demonstrates the contextual usage of the `BeginExceptionBlock` method.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.ThrowException Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example#1)]"
  syntax:
    content: public virtual System.Reflection.Emit.Label BeginExceptionBlock ();
    parameters: []
    return:
      type: System.Reflection.Emit.Label
      description: The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock
  id: BeginFaultBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginFaultBlock()
  nameWithType: ILGenerator.BeginFaultBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFaultBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.
  remarks: If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, emitting exception fault blocks is not supported. <xref:System.Reflection.Emit.DynamicILInfo> can be used to construct a dynamic method that uses exception fault blocks.
  example:
  - "The following code sample illustrates the use of `BeginFaultBlock`.  \n  \n [!CODE [ILGenerator_BeginFaultBlock#1](../CodeSnippet/VS_Snippets_CLR/ILGenerator_BeginFaultBlock#1)]"
  syntax:
    content: public virtual void BeginFaultBlock ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  id: BeginFinallyBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginFinallyBlock()
  nameWithType: ILGenerator.BeginFinallyBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFinallyBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.
  remarks: ''
  example:
  - "The following code sample illustrates the use of `BeginFinallyBlock`.  \n  \n [!CODE [ILGenerator_BeginFinallyBlock_2#2](../CodeSnippet/VS_Snippets_CLR/ILGenerator_BeginFinallyBlock_2#2)]"
  syntax:
    content: public virtual void BeginFinallyBlock ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginScope
  id: BeginScope
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginScope()
  nameWithType: ILGenerator.BeginScope()
  fullName: System.Reflection.Emit.ILGenerator.BeginScope()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Begins a lexical scope.
  remarks: "This method is used to emit symbolic information. Local variables declared after BeginScope are scoped until the corresponding <xref:System.Reflection.Emit.ILGenerator.EndScope%2A> is called.  \n  \n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information."
  example:
  - "The following code sample illustrates the use of `BeginScope` and `EndScope`.  \n  \n [!CODE [ILGenerator_Begin_EndScope#2](../CodeSnippet/VS_Snippets_CLR/ILGenerator_Begin_EndScope#2)]"
  syntax:
    content: public virtual void BeginScope ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  id: DeclareLocal(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: DeclareLocal(Type)
  nameWithType: ILGenerator.DeclareLocal(Type)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Declares a local variable of the specified type.
  remarks: "The local variable is created in the current lexical scope; for example, if code is being emitted in a `for` loop (`For` loop in Visual Basic), the scope of the variable is the loop.  \n  \n A local variable created with this overload is not pinned. To create a pinned variable for use with unmanaged pointers, use the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%28System.Type%2CSystem.Boolean%29> method overload."
  example:
  - "The following code example demonstrates the use of the `DeclareLocal` method. This code is part of a larger code example for the <xref:System.Reflection.Emit.LocalBuilder> class.  \n  \n [!CODE [LocalBuilder_Sample_SetLocalSymInfo#2](../CodeSnippet/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo#2)]"
  syntax:
    content: public virtual System.Reflection.Emit.LocalBuilder DeclareLocal (Type localType);
    parameters:
    - id: localType
      type: System.Type
      description: A <see cref="T:System.Type"> object that represents the type of the local variable.
    return:
      type: System.Reflection.Emit.LocalBuilder
      description: The declared local variable.
  overload: System.Reflection.Emit.ILGenerator.DeclareLocal*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  id: DeclareLocal(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: DeclareLocal(Type,Boolean)
  nameWithType: ILGenerator.DeclareLocal(Type,Boolean)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Declares a local variable of the specified type, optionally pinning the object referred to by the variable.
  remarks: "The local variable is created in the current lexical scope; for example, if code is being emitted in a `for` loop (`For` loop in Visual Basic), the scope of the variable is the loop.  \n  \n In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection."
  syntax:
    content: public virtual System.Reflection.Emit.LocalBuilder DeclareLocal (Type localType, bool pinned);
    parameters:
    - id: localType
      type: System.Type
      description: A <see cref="T:System.Type"> object that represents the type of the local variable.
    - id: pinned
      type: System.Boolean
      description: '`true` to pin the object in memory; otherwise, `false`.'
    return:
      type: System.Reflection.Emit.LocalBuilder
      description: A <see cref="T:System.Reflection.Emit.LocalBuilder"> object that represents the local variable.
  overload: System.Reflection.Emit.ILGenerator.DeclareLocal*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.DefineLabel
  id: DefineLabel
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: DefineLabel()
  nameWithType: ILGenerator.DefineLabel()
  fullName: System.Reflection.Emit.ILGenerator.DefineLabel()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Declares a new label.
  remarks: "To set the position of the label within the stream, you must call <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>.  \n  \n This is just a token and does not yet represent any particular location within the stream."
  example:
  - "The code sample below demonstrates the contextual usage of the `DefineLabel` method.  \n  \n [!CODE [System.Reflection.Emit.Label Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.Label Example#1)]"
  syntax:
    content: public virtual System.Reflection.Emit.Label DefineLabel ();
    parameters: []
    return:
      type: System.Reflection.Emit.Label
      description: Returns a new label that can be used as a token for branching.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  id: Emit(System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode)
  nameWithType: ILGenerator.Emit(OpCode)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the stream of instructions.
  remarks: "If the  parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter. Otherwise, results will be unpredictable. For example, if the Emit instruction requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime will emit two additional bytes to the instruction stream. These extra bytes will be <xref:System.Reflection.Emit.OpCodes.Nop> instructions.  \n  \n The instruction values are defined in <xref:System.Reflection.Emit.OpCodes>."
  example:
  - "The code sample below demonstrates the use of `Emit` to generate MSIL output via an instance of <xref:System.Reflection.Emit.ILGenerator>.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.Emit Example 2#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2#1)]"
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  id: Emit(System.Reflection.Emit.OpCode,System.Byte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Byte)
  nameWithType: ILGenerator.Emit(OpCode,Byte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  remarks: The instruction values are defined in the `OpCodes` enumeration.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, byte arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be put onto the stream.
    - id: arg
      type: System.Byte
      description: The character argument pushed onto the stream immediately after the instruction.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  id: Emit(System.Reflection.Emit.OpCode,System.Double)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Double)
  nameWithType: ILGenerator.Emit(OpCode,Double)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  remarks: The instruction values are defined in the `OpCodes` enumeration.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, double arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be put onto the stream. Defined in the `OpCodes` enumeration.
    - id: arg
      type: System.Double
      description: The numerical argument pushed onto the stream immediately after the instruction.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  id: Emit(System.Reflection.Emit.OpCode,System.Int16)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Int16)
  nameWithType: ILGenerator.Emit(OpCode,Int16)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  remarks: The instruction values are defined in the `OpCodes` enumeration.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, short arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream.
    - id: arg
      type: System.Int16
      description: The `Int` argument pushed onto the stream immediately after the instruction.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  id: Emit(System.Reflection.Emit.OpCode,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Int32)
  nameWithType: ILGenerator.Emit(OpCode,Int32)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  remarks: The instruction values are defined in the `OpCodes` enumeration.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, int arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be put onto the stream.
    - id: arg
      type: System.Int32
      description: The numerical argument pushed onto the stream immediately after the instruction.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  id: Emit(System.Reflection.Emit.OpCode,System.Int64)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Int64)
  nameWithType: ILGenerator.Emit(OpCode,Int64)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  remarks: The instruction values are defined in the `OpCodes` enumeration.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, long arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be put onto the stream.
    - id: arg
      type: System.Int64
      description: The numerical argument pushed onto the stream immediately after the instruction.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,ConstructorInfo)
  nameWithType: ILGenerator.Emit(OpCode,ConstructorInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,ConstructorInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.
  remarks: "The instruction values are defined in the `OpCodes` enumeration.  \n  \n The location of  is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file."
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo con);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream.
    - id: con
      type: System.Reflection.ConstructorInfo
      description: A `ConstructorInfo` representing a constructor.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Label)
  nameWithType: ILGenerator.Emit(OpCode,Label)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Label)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.
  remarks: "The instruction values are defined in the `OpCodes` enumeration.  \n  \n Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A>, and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>. If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.  must represent a branch instruction. Because branches are relative instructions,  will be replaced with the correct offset to branch during the fixup process."
  example:
  - "The code sample below illustrates the creation of a dynamic method with a jump table. The jump table is built using an array of <xref:System.Reflection.Emit.Label>.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.Emit Example 2#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2#1)]"
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream.
    - id: label
      type: System.Reflection.Emit.Label
      description: The label to which to branch from this location.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Label[])
  nameWithType: ILGenerator.Emit(OpCode,Label[])
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Label[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.
  remarks: "Emits a switch table.  \n  \n The instruction values are defined in the `OpCodes` enumeration.  \n  \n Labels are created using <xref:System.Reflection.Emit.ILGenerator.DefineLabel%2A> and their location within the stream is fixed by using <xref:System.Reflection.Emit.ILGenerator.MarkLabel%2A>. If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream.  must represent a branch instruction. Because branches are relative instructions,  will be replaced with the correct offset to branch during the fixup process."
  example:
  - "The code sample below illustrates the creation of a dynamic method with a jump table. The jump table is built using an array of <xref:System.Reflection.Emit.Label>.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.Emit Example 2#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2#1)]"
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[] labels);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream.
    - id: labels
      type: System.Reflection.Emit.Label[]
      description: The array of label objects to which to branch from this location. All of the labels will be used.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,LocalBuilder)
  nameWithType: ILGenerator.Emit(OpCode,LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,LocalBuilder)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.
  remarks: The instruction values are defined in the `OpCodes` enumeration.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder local);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream.
    - id: local
      type: System.Reflection.Emit.LocalBuilder
      description: A local variable.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,SignatureHelper)
  nameWithType: ILGenerator.Emit(OpCode,SignatureHelper)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,SignatureHelper)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.
  remarks: The instruction values are defined in the `OpCodes` enumeration.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.SignatureHelper signature);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream.
    - id: signature
      type: System.Reflection.Emit.SignatureHelper
      description: A helper for constructing a signature token.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,FieldInfo)
  nameWithType: ILGenerator.Emit(OpCode,FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,FieldInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.
  remarks: The instruction values are defined in the `OpCodes` enumeration. The location of  is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream.
    - id: field
      type: System.Reflection.FieldInfo
      description: A `FieldInfo` representing a field.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,MethodInfo)
  nameWithType: ILGenerator.Emit(OpCode,MethodInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,MethodInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.
  remarks: "The instruction values are defined in the `OpCodes` enumeration.  \n  \n The location of  is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.  \n  \n If  represents a generic method, it must be a generic method definition. That is, its <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A?displayProperty=fullName> property must be `true`."
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo meth);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream.
    - id: meth
      type: System.Reflection.MethodInfo
      description: A `MethodInfo` representing a method.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  id: Emit(System.Reflection.Emit.OpCode,System.SByte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,SByte)
  nameWithType: ILGenerator.Emit(OpCode,SByte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,SByte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  remarks: The instruction values are defined in the `OpCodes` enumeration.
  syntax:
    content: public void Emit (System.Reflection.Emit.OpCode opcode, sbyte arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be put onto the stream.
    - id: arg
      type: System.SByte
      description: The character argument pushed onto the stream immediately after the instruction.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  id: Emit(System.Reflection.Emit.OpCode,System.Single)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Single)
  nameWithType: ILGenerator.Emit(OpCode,Single)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  remarks: The instruction values are defined in the `OpCodes` enumeration.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, float arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be put onto the stream.
    - id: arg
      type: System.Single
      description: The `Single` argument pushed onto the stream immediately after the instruction.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  id: Emit(System.Reflection.Emit.OpCode,System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,String)
  nameWithType: ILGenerator.Emit(OpCode,String)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.
  remarks: The instruction values are defined in the `OpCodes` enumeration. The location of  is recorded for future fixups if the module is persisted to a portable executable (PE) file.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, string str);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream.
    - id: str
      type: System.String
      description: The `String` to be emitted.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  id: Emit(System.Reflection.Emit.OpCode,System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Type)
  nameWithType: ILGenerator.Emit(OpCode,Type)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.
  remarks: The instruction values are defined in the `OpCodes` enumeration. The location of  is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, Type cls);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be put onto the stream.
    - id: cls
      type: System.Type
      description: A `Type`.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  id: EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitCall(OpCode,MethodInfo,Type[])
  nameWithType: ILGenerator.EmitCall(OpCode,MethodInfo,Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCall(OpCode,MethodInfo,Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts a `call` or `callvirt` instruction onto the Microsoft intermediate language (MSIL) stream to call a `varargs` method.
  remarks: "The EmitCall method is used to emit calls to `varargs` methods because there is no overload of the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method that specifies the parameter types of the variable arguments.  \n  \n To emit calls to methods that do not use the <xref:System.Reflection.CallingConventions> calling convention, use the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.MethodInfo%29> method overload.  \n  \n## Version Information  \n Beginning with the .NET Framework version 2.0, the EmitCall method does not throw an exception when optional parameter types are specified for a method that is not `varargs`. <xref:System.InvalidProgramException> is thrown when the call is executed."
  example:
  - "The following code example emits two methods, a `varargs` method and a method that calls the `varargs` method. The `EmitCall` method is used to emit the call to the `varargs` method.  \n  \n [!CODE [Emit.ArgIterator#1](../CodeSnippet/VS_Snippets_CLR/Emit.ArgIterator#1)]"
  syntax:
    content: public virtual void EmitCall (System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo methodInfo, Type[] optionalParameterTypes);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream. Must be <xref:System.Reflection.Emit.OpCodes.Call?displayProperty=fullName>, <xref:System.Reflection.Emit.OpCodes.Callvirt?displayProperty=fullName>, or <xref:System.Reflection.Emit.OpCodes.Newobj?displayProperty=fullName>.
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: The `varargs` method to be called.
    - id: optionalParameterTypes
      type: System.Type[]
      description: The types of the optional arguments if the method is a `varargs` method; otherwise, `null`.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])
  id: EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitCalli(OpCode,CallingConvention,Type,Type[])
  nameWithType: ILGenerator.EmitCalli(OpCode,CallingConvention,Type,Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(OpCode,CallingConvention,Type,Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts a <see cref="F:System.Reflection.Emit.OpCodes.Calli"> instruction onto the Microsoft intermediate language (MSIL) stream, specifying an unmanaged calling convention for the indirect call.
  remarks: Use<xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream. Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.
  example:
  - "The following code sample demonstrates the contextual usage of the <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> method to call an unmanaged type method external to the dynamic class.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.EmitCalli Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.EmitCalli Example#1)]"
  syntax:
    content: public virtual void EmitCalli (System.Reflection.Emit.OpCode opcode, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream. Must be <xref:System.Reflection.Emit.OpCodes.Calli?displayProperty=fullName>.
    - id: unmanagedCallConv
      type: System.Runtime.InteropServices.CallingConvention
      description: The unmanaged calling convention to be used.
    - id: returnType
      type: System.Type
      description: The <see cref="T:System.Type"> of the result.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the required arguments to the instruction.
  overload: System.Reflection.Emit.ILGenerator.EmitCalli*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  id: EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
  nameWithType: ILGenerator.EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Puts a <see cref="F:System.Reflection.Emit.OpCodes.Calli"> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.
  remarks: "Use EmitCalli to put a <xref:System.Reflection.Emit.OpCodes.Calli> instruction onto the stream. Do not use <xref:System.Reflection.Emit.ILGenerator.Emit%2A>.  \n  \n If  specifies optional arguments,  must include the <xref:System.Reflection.CallingConventions?displayProperty=fullName> flag."
  syntax:
    content: public virtual void EmitCalli (System.Reflection.Emit.OpCode opcode, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream. Must be <xref:System.Reflection.Emit.OpCodes.Calli?displayProperty=fullName>.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The managed calling convention to be used.
    - id: returnType
      type: System.Type
      description: The <see cref="T:System.Type"> of the result.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the required arguments to the instruction.
    - id: optionalParameterTypes
      type: System.Type[]
      description: The types of the optional arguments for `varargs` calls.
  overload: System.Reflection.Emit.ILGenerator.EmitCalli*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  id: EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitWriteLine(LocalBuilder)
  nameWithType: ILGenerator.EmitWriteLine(LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(LocalBuilder)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Emits the Microsoft intermediate language (MSIL) necessary to call <xref:System.Console.WriteLine%2A?displayProperty=fullName> with the given local variable.
  remarks: The type of  must match the parameter type of an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method.
  example:
  - "The code sample below demonstrates the contextual usage of the EmitWriteLine method to write a string to the console in a dynamic method.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.OpCodes Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example#1)]"
  syntax:
    content: public virtual void EmitWriteLine (System.Reflection.Emit.LocalBuilder localBuilder);
    parameters:
    - id: localBuilder
      type: System.Reflection.Emit.LocalBuilder
      description: The local variable whose value is to be written to the console.
  overload: System.Reflection.Emit.ILGenerator.EmitWriteLine*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  id: EmitWriteLine(System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitWriteLine(FieldInfo)
  nameWithType: ILGenerator.EmitWriteLine(FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(FieldInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Emits the Microsoft intermediate language (MSIL) necessary to call <xref:System.Console.WriteLine%2A?displayProperty=fullName> with the given field.
  remarks: The type of  must match the parameter type of an overload of the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method.
  example:
  - "The following code sample demonstrates the use of the EmitWriteLine method to write a string to the console in a dynamic method.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.OpCodes Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example#1)]"
  syntax:
    content: public virtual void EmitWriteLine (System.Reflection.FieldInfo fld);
    parameters:
    - id: fld
      type: System.Reflection.FieldInfo
      description: The field whose value is to be written to the console.
  overload: System.Reflection.Emit.ILGenerator.EmitWriteLine*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  id: EmitWriteLine(System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitWriteLine(String)
  nameWithType: ILGenerator.EmitWriteLine(String)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Emits the Microsoft intermediate language (MSIL) to call <xref:System.Console.WriteLine%2A?displayProperty=fullName> with a string.
  remarks: The string must have already been defined.
  example:
  - "The code sample below demonstrates the contextual usage of the `EmitWriteLine` method to write a string to the console in a dynamic method.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.OpCodes Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example#1)]"
  syntax:
    content: public virtual void EmitWriteLine (string value);
    parameters:
    - id: value
      type: System.String
      description: The string to be printed.
  overload: System.Reflection.Emit.ILGenerator.EmitWriteLine*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock
  id: EndExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EndExceptionBlock()
  nameWithType: ILGenerator.EndExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.EndExceptionBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Ends an exception block.
  remarks: ''
  example:
  - "The code sample below demonstrates the contextual usage of the `EndExceptionBlock` method.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.ThrowException Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example#1)]"
  syntax:
    content: public virtual void EndExceptionBlock ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EndScope
  id: EndScope
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EndScope()
  nameWithType: ILGenerator.EndScope()
  fullName: System.Reflection.Emit.ILGenerator.EndScope()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Ends a lexical scope.
  remarks: "This method is used to emit symbolic information. It is used with <xref:System.Reflection.Emit.ILGenerator.BeginScope%2A>.  \n  \n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information."
  example:
  - "The following code sample illustrates the use of `BeginScope` and `EndScope`.  \n  \n [!CODE [ILGenerator_Begin_EndScope#2](../CodeSnippet/VS_Snippets_CLR/ILGenerator_Begin_EndScope#2)]"
  syntax:
    content: public virtual void EndScope ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.ILOffset
  id: ILOffset
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: ILOffset
  nameWithType: ILGenerator.ILOffset
  fullName: System.Reflection.Emit.ILGenerator.ILOffset
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <see cref="T:System.Reflection.Emit.ILGenerator">.
  remarks: "This method is transparent, and can be called from partially trusted code.  \n  \n If the ILOffset property is accessed before any MSIL instructions have been emitted, it returns 0 (zero).  \n  \n When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers. The resulting information can be used to provide stack traces when exceptions are thrown."
  syntax:
    content: public virtual int ILOffset { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  id: MarkLabel(System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: MarkLabel(Label)
  nameWithType: ILGenerator.MarkLabel(Label)
  fullName: System.Reflection.Emit.ILGenerator.MarkLabel(Label)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.
  remarks: A label cannot be defined more than once.
  example:
  - "The code sample below demonstrates the contextual usage of `MarkLabel` to implement MSIL branching in a dynamic method.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.Emit Example 2#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2#1)]"
  syntax:
    content: public virtual void MarkLabel (System.Reflection.Emit.Label loc);
    parameters:
    - id: loc
      type: System.Reflection.Emit.Label
      description: The label for which to set an index.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)
  id: MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
  nameWithType: ILGenerator.MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
  fullName: System.Reflection.Emit.ILGenerator.MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Marks a sequence point in the Microsoft intermediate language (MSIL) stream.
  remarks: "Line numbers are indexed from 1. Columns are indexed from 0.  \n  \n The symbolic information normally includes at least one MSIL offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. These MSIL offsets are called *sequence points*.  \n  \n If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, it does not support symbolic information."
  syntax:
    content: public virtual void MarkSequencePoint (System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
      description: The document for which the sequence point is being defined.
    - id: startLine
      type: System.Int32
      description: The line where the sequence point begins.
    - id: startColumn
      type: System.Int32
      description: The column in the line where the sequence point begins.
    - id: endLine
      type: System.Int32
      description: The line where the sequence point ends.
    - id: endColumn
      type: System.Int32
      description: The column in the line where the sequence point ends.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _ILGenerator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array that receives the IDs corresponding to the names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _ILGenerator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _ILGenerator.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for accessing managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _ILGenerator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  id: ThrowException(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: ThrowException(Type)
  nameWithType: ILGenerator.ThrowException(Type)
  fullName: System.Reflection.Emit.ILGenerator.ThrowException(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Emits an instruction to throw an exception.
  remarks: ''
  example:
  - "The following code sample demonstrates the contextual usage of `ThrowException` to throw an exception inside the MSIL of a dynamic method.  \n  \n [!CODE [System.Reflection.Emit.ILGenerator.ThrowException Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.ThrowException Example#1)]"
  syntax:
    content: public virtual void ThrowException (Type excType);
    parameters:
    - id: excType
      type: System.Type
      description: The class of the type of exception to throw.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  id: UsingNamespace(System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: UsingNamespace(String)
  nameWithType: ILGenerator.UsingNamespace(String)
  fullName: System.Reflection.Emit.ILGenerator.UsingNamespace(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.
  remarks: If the current <xref:System.Reflection.Emit.ILGenerator> is associated with a <xref:System.Reflection.Emit.DynamicMethod> object, this method is not supported.
  syntax:
    content: public virtual void UsingNamespace (string usingNamespace);
    parameters:
    - id: usingNamespace
      type: System.String
      description: The namespace to be used in evaluating locals and watches for the current active lexical scope
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginCatchBlock(Type)
  nameWithType: ILGenerator.BeginCatchBlock(Type)
  fullName: System.Reflection.Emit.ILGenerator.BeginCatchBlock(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginExceptFilterBlock()
  nameWithType: ILGenerator.BeginExceptFilterBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock()
- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginExceptionBlock()
  nameWithType: ILGenerator.BeginExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptionBlock()
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginFaultBlock()
  nameWithType: ILGenerator.BeginFaultBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFaultBlock()
- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginFinallyBlock()
  nameWithType: ILGenerator.BeginFinallyBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFinallyBlock()
- uid: System.Reflection.Emit.ILGenerator.BeginScope
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginScope()
  nameWithType: ILGenerator.BeginScope()
  fullName: System.Reflection.Emit.ILGenerator.BeginScope()
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: DeclareLocal(Type)
  nameWithType: ILGenerator.DeclareLocal(Type)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(Type)
- uid: System.Reflection.Emit.LocalBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: LocalBuilder
  nameWithType: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: DeclareLocal(Type,Boolean)
  nameWithType: ILGenerator.DeclareLocal(Type,Boolean)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(Type,Boolean)
- uid: System.Reflection.Emit.LocalBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: LocalBuilder
  nameWithType: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ILGenerator.DefineLabel
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: DefineLabel()
  nameWithType: ILGenerator.DefineLabel()
  fullName: System.Reflection.Emit.ILGenerator.DefineLabel()
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode)
  nameWithType: ILGenerator.Emit(OpCode)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Byte)
  nameWithType: ILGenerator.Emit(OpCode,Byte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Byte)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Double)
  nameWithType: ILGenerator.Emit(OpCode,Double)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Double)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Int16)
  nameWithType: ILGenerator.Emit(OpCode,Int16)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int16)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Int32)
  nameWithType: ILGenerator.Emit(OpCode,Int32)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int32)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Int64)
  nameWithType: ILGenerator.Emit(OpCode,Int64)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int64)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,ConstructorInfo)
  nameWithType: ILGenerator.Emit(OpCode,ConstructorInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,ConstructorInfo)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Label)
  nameWithType: ILGenerator.Emit(OpCode,Label)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Label)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Label[])
  nameWithType: ILGenerator.Emit(OpCode,Label[])
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Label[])
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label[]
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,LocalBuilder)
  nameWithType: ILGenerator.Emit(OpCode,LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,LocalBuilder)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.Emit.LocalBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: LocalBuilder
  nameWithType: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,SignatureHelper)
  nameWithType: ILGenerator.Emit(OpCode,SignatureHelper)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,SignatureHelper)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.Emit.SignatureHelper
  parent: System.Reflection.Emit
  isExternal: false
  name: SignatureHelper
  nameWithType: SignatureHelper
  fullName: System.Reflection.Emit.SignatureHelper
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,FieldInfo)
  nameWithType: ILGenerator.Emit(OpCode,FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,FieldInfo)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,MethodInfo)
  nameWithType: ILGenerator.Emit(OpCode,MethodInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,MethodInfo)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,SByte)
  nameWithType: ILGenerator.Emit(OpCode,SByte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,SByte)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Single)
  nameWithType: ILGenerator.Emit(OpCode,Single)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Single)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,String)
  nameWithType: ILGenerator.Emit(OpCode,String)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,String)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Type)
  nameWithType: ILGenerator.Emit(OpCode,Type)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Type)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitCall(OpCode,MethodInfo,Type[])
  nameWithType: ILGenerator.EmitCall(OpCode,MethodInfo,Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCall(OpCode,MethodInfo,Type[])
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitCalli(OpCode,CallingConvention,Type,Type[])
  nameWithType: ILGenerator.EmitCalli(OpCode,CallingConvention,Type,Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(OpCode,CallingConvention,Type,Type[])
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Runtime.InteropServices.CallingConvention
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CallingConvention
  nameWithType: CallingConvention
  fullName: System.Runtime.InteropServices.CallingConvention
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
  nameWithType: ILGenerator.EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitWriteLine(LocalBuilder)
  nameWithType: ILGenerator.EmitWriteLine(LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(LocalBuilder)
- uid: System.Reflection.Emit.LocalBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: LocalBuilder
  nameWithType: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitWriteLine(FieldInfo)
  nameWithType: ILGenerator.EmitWriteLine(FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(FieldInfo)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitWriteLine(String)
  nameWithType: ILGenerator.EmitWriteLine(String)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EndExceptionBlock()
  nameWithType: ILGenerator.EndExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.EndExceptionBlock()
- uid: System.Reflection.Emit.ILGenerator.EndScope
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EndScope()
  nameWithType: ILGenerator.EndScope()
  fullName: System.Reflection.Emit.ILGenerator.EndScope()
- uid: System.Reflection.Emit.ILGenerator.ILOffset
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: ILOffset
  nameWithType: ILGenerator.ILOffset
  fullName: System.Reflection.Emit.ILGenerator.ILOffset
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: MarkLabel(Label)
  nameWithType: ILGenerator.MarkLabel(Label)
  fullName: System.Reflection.Emit.ILGenerator.MarkLabel(Label)
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
  nameWithType: ILGenerator.MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
  fullName: System.Reflection.Emit.ILGenerator.MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocumentWriter
  nameWithType: ISymbolDocumentWriter
  fullName: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: ThrowException(Type)
  nameWithType: ILGenerator.ThrowException(Type)
  fullName: System.Reflection.Emit.ILGenerator.ThrowException(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: UsingNamespace(String)
  nameWithType: ILGenerator.UsingNamespace(String)
  fullName: System.Reflection.Emit.ILGenerator.UsingNamespace(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  nameWithType: ILGenerator.
- uid: System.Reflection.Emit.ILGenerator.Emit*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  nameWithType: ILGenerator.
- uid: System.Reflection.Emit.ILGenerator.EmitCalli*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  nameWithType: ILGenerator.
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  nameWithType: ILGenerator.
