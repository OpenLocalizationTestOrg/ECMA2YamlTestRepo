### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.EnumBuilder
  id: EnumBuilder
  children:
  - System.Reflection.Emit.EnumBuilder.Assembly
  - System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName
  - System.Reflection.Emit.EnumBuilder.BaseType
  - System.Reflection.Emit.EnumBuilder.CreateType
  - System.Reflection.Emit.EnumBuilder.CreateTypeInfo
  - System.Reflection.Emit.EnumBuilder.DeclaringType
  - System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)
  - System.Reflection.Emit.EnumBuilder.FullName
  - System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl
  - System.Reflection.Emit.EnumBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)
  - System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Emit.EnumBuilder.GetElementType
  - System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType
  - System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetEvents
  - System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)
  - System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)
  - System.Reflection.Emit.EnumBuilder.GetInterfaces
  - System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)
  - System.Reflection.Emit.EnumBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Emit.EnumBuilder.GUID
  - System.Reflection.Emit.EnumBuilder.HasElementTypeImpl
  - System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Reflection.Emit.EnumBuilder.IsArrayImpl
  - System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  - System.Reflection.Emit.EnumBuilder.IsByRefImpl
  - System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl
  - System.Reflection.Emit.EnumBuilder.IsConstructedGenericType
  - System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Emit.EnumBuilder.IsPointerImpl
  - System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl
  - System.Reflection.Emit.EnumBuilder.IsValueTypeImpl
  - System.Reflection.Emit.EnumBuilder.MakeArrayType
  - System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)
  - System.Reflection.Emit.EnumBuilder.MakeByRefType
  - System.Reflection.Emit.EnumBuilder.MakePointerType
  - System.Reflection.Emit.EnumBuilder.Module
  - System.Reflection.Emit.EnumBuilder.Name
  - System.Reflection.Emit.EnumBuilder.Namespace
  - System.Reflection.Emit.EnumBuilder.ReflectedType
  - System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.Emit.EnumBuilder.TypeHandle
  - System.Reflection.Emit.EnumBuilder.TypeToken
  - System.Reflection.Emit.EnumBuilder.UnderlyingField
  - System.Reflection.Emit.EnumBuilder.UnderlyingSystemType
  langs:
  - csharp
  name: EnumBuilder
  nameWithType: EnumBuilder
  fullName: System.Reflection.Emit.EnumBuilder
  type: Class
  summary: Describes and represents an enumeration type.
  remarks: >-
    > [!NOTE]

    >  In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because EnumBuilder emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, EnumBuilder emits enumerations whose elements have the correct type.
  example:
  - "The following code example demonstrates the construction of an enumeration within a dynamic assembly, using `EnumBuilder`. The example defines an enumeration named `Elevation`, with an underlying type of <xref:System.Int32>, and creates two elements: `Low`, with a value of 0, and `High`, with a value of 1. After the type has been created, the assembly is saved with the name `TempAssembly.dll`. You can use the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) to examine the contents of this assembly.  \n  \n> [!NOTE]\n>  Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.  \n  \n [!CODE [ModuleBuilder_DefineEnum#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_DefineEnum#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._EnumBuilder))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class EnumBuilder : System.Reflection.TypeInfo, System.Runtime.InteropServices._EnumBuilder
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  - System.Type
  - System.Reflection.TypeInfo
  implements:
  - System.Runtime.InteropServices._EnumBuilder
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.TypeInfo.AsType
  - System.Reflection.TypeInfo.DeclaredConstructors
  - System.Reflection.TypeInfo.DeclaredEvents
  - System.Reflection.TypeInfo.DeclaredFields
  - System.Reflection.TypeInfo.DeclaredMembers
  - System.Reflection.TypeInfo.DeclaredMethods
  - System.Reflection.TypeInfo.DeclaredNestedTypes
  - System.Reflection.TypeInfo.DeclaredProperties
  - System.Reflection.TypeInfo.GenericTypeParameters
  - System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  - System.Reflection.TypeInfo.GetDeclaredField(System.String)
  - System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  - System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  - System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  - System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  - System.Reflection.TypeInfo.ImplementedInterfaces
  - System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo
  - System.Type.Attributes
  - System.Type.ContainsGenericParameters
  - System.Type.DeclaringMethod
  - System.Type.DefaultBinder
  - System.Type.Delimiter
  - System.Type.EmptyTypes
  - System.Type.Equals(System.Object)
  - System.Type.Equals(System.Type)
  - System.Type.FilterAttribute
  - System.Type.FilterName
  - System.Type.FilterNameIgnoreCase
  - System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  - System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  - System.Type.GenericParameterAttributes
  - System.Type.GenericParameterPosition
  - System.Type.GenericTypeArguments
  - System.Type.GetArrayRank
  - System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetConstructor(System.Type[])
  - System.Type.GetConstructors
  - System.Type.GetDefaultMembers
  - System.Type.GetEnumName(System.Object)
  - System.Type.GetEnumNames
  - System.Type.GetEnumValues
  - System.Type.GetEvent(System.String)
  - System.Type.GetField(System.String)
  - System.Type.GetFields
  - System.Type.GetGenericArguments
  - System.Type.GetGenericParameterConstraints
  - System.Type.GetGenericTypeDefinition
  - System.Type.GetHashCode
  - System.Type.GetInterface(System.String)
  - System.Type.GetMember(System.String)
  - System.Type.GetMember(System.String,System.Reflection.BindingFlags)
  - System.Type.GetMembers
  - System.Type.GetMethod(System.String)
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags)
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethod(System.String,System.Type[])
  - System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethods
  - System.Type.GetNestedType(System.String)
  - System.Type.GetNestedTypes
  - System.Type.GetProperties
  - System.Type.GetProperty(System.String)
  - System.Type.GetProperty(System.String,System.Reflection.BindingFlags)
  - System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetProperty(System.String,System.Type)
  - System.Type.GetProperty(System.String,System.Type,System.Type[])
  - System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetProperty(System.String,System.Type[])
  - System.Type.GetType
  - System.Type.GetType(System.String)
  - System.Type.GetType(System.String,System.Boolean)
  - System.Type.GetType(System.String,System.Boolean,System.Boolean)
  - System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})
  - System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)
  - System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)
  - System.Type.GetTypeArray(System.Object[])
  - System.Type.GetTypeCode(System.Type)
  - System.Type.GetTypeCodeImpl
  - System.Type.GetTypeFromCLSID(System.Guid)
  - System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)
  - System.Type.GetTypeFromCLSID(System.Guid,System.String)
  - System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)
  - System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  - System.Type.GetTypeFromProgID(System.String)
  - System.Type.GetTypeFromProgID(System.String,System.Boolean)
  - System.Type.GetTypeFromProgID(System.String,System.String)
  - System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)
  - System.Type.GetTypeHandle(System.Object)
  - System.Type.HasElementType
  - System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])
  - System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)
  - System.Type.IsAbstract
  - System.Type.IsAnsiClass
  - System.Type.IsArray
  - System.Type.IsAssignableFrom(System.Type)
  - System.Type.IsAutoClass
  - System.Type.IsAutoLayout
  - System.Type.IsByRef
  - System.Type.IsClass
  - System.Type.IsCOMObject
  - System.Type.IsContextful
  - System.Type.IsContextfulImpl
  - System.Type.IsEnum
  - System.Type.IsEnumDefined(System.Object)
  - System.Type.IsEquivalentTo(System.Type)
  - System.Type.IsExplicitLayout
  - System.Type.IsGenericParameter
  - System.Type.IsGenericType
  - System.Type.IsGenericTypeDefinition
  - System.Type.IsImport
  - System.Type.IsInstanceOfType(System.Object)
  - System.Type.IsInterface
  - System.Type.IsLayoutSequential
  - System.Type.IsMarshalByRef
  - System.Type.IsMarshalByRefImpl
  - System.Type.IsNested
  - System.Type.IsNestedAssembly
  - System.Type.IsNestedFamANDAssem
  - System.Type.IsNestedFamily
  - System.Type.IsNestedFamORAssem
  - System.Type.IsNestedPrivate
  - System.Type.IsNestedPublic
  - System.Type.IsNotPublic
  - System.Type.IsPointer
  - System.Type.IsPrimitive
  - System.Type.IsPublic
  - System.Type.IsSealed
  - System.Type.IsSecurityCritical
  - System.Type.IsSecuritySafeCritical
  - System.Type.IsSecurityTransparent
  - System.Type.IsSerializable
  - System.Type.IsSpecialName
  - System.Type.IsSubclassOf(System.Type)
  - System.Type.IsUnicodeClass
  - System.Type.IsValueType
  - System.Type.IsVisible
  - System.Type.MakeGenericType(System.Type[])
  - System.Type.MemberType
  - System.Type.Missing
  - System.Type.op_Equality(System.Type,System.Type)
  - System.Type.op_Inequality(System.Type,System.Type)
  - System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  - System.Type.StructLayoutAttribute
  - System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)
  - System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Type.ToString
  - System.Type.TypeInitializer
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.Assembly
  id: Assembly
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: Assembly
  nameWithType: EnumBuilder.Assembly
  fullName: System.Reflection.Emit.EnumBuilder.Assembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the dynamic assembly that contains this enum definition.
  remarks: ''
  example:
  - "The following code sample demonstrates the use of the `Assembly` property to reference the parent assembly of the current `EnumBuilder`.  \n  \n [!CODE [EnumBuilder_Properties_5#1](../CodeSnippet/VS_Snippets_CLR/EnumBuilder_Properties_5#1)]"
  syntax:
    content: public override System.Reflection.Assembly Assembly { get; }
    return:
      type: System.Reflection.Assembly
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: AssemblyQualifiedName
  nameWithType: EnumBuilder.AssemblyQualifiedName
  fullName: System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the full path of this enum qualified by the display name of the parent assembly.
  remarks: "The format of the returned string is:  \n  \n \\<FullTypeName>, \\<AssemblyDisplayName>  \n  \n See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \n  \n## Version Information  \n In the .NET Framework version 1.1 and earlier, the return value of this property did not include the culture or public key."
  example:
  - "The following code sample demonstrates the use of the `AssemblyQualifiedName` property to reference the qualified parent assembly name of the current `EnumBuilder`.  \n  \n [!CODE [EnumBuilder_Properties_5#2](../CodeSnippet/VS_Snippets_CLR/EnumBuilder_Properties_5#2)]"
  syntax:
    content: public override string AssemblyQualifiedName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.BaseType
  id: BaseType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: BaseType
  nameWithType: EnumBuilder.BaseType
  fullName: System.Reflection.Emit.EnumBuilder.BaseType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the parent <see cref="T:System.Type"> of this type which is always <xref:System.Enum>.
  remarks: To be added.
  syntax:
    content: public override Type BaseType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.CreateType
  id: CreateType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: CreateType()
  nameWithType: EnumBuilder.CreateType()
  fullName: System.Reflection.Emit.EnumBuilder.CreateType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates a <see cref="T:System.Type"> object for this enum.
  remarks: To be added.
  syntax:
    content: public Type CreateType ();
    parameters: []
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object for this enum.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.CreateTypeInfo
  id: CreateTypeInfo
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: CreateTypeInfo()
  nameWithType: EnumBuilder.CreateTypeInfo()
  fullName: System.Reflection.Emit.EnumBuilder.CreateTypeInfo()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a <see cref="T:System.Reflection.TypeInfo"> object that represents this enumeration.
  remarks: To be added.
  syntax:
    content: public System.Reflection.TypeInfo CreateTypeInfo ();
    parameters: []
    return:
      type: System.Reflection.TypeInfo
      description: An object that represents this enumeration.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: DeclaringType
  nameWithType: EnumBuilder.DeclaringType
  fullName: System.Reflection.Emit.EnumBuilder.DeclaringType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the type that declared this <see cref="T:System.Reflection.Emit.EnumBuilder">.
  remarks: To be added.
  syntax:
    content: public override Type DeclaringType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)
  id: DefineLiteral(System.String,System.Object)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: DefineLiteral(String,Object)
  nameWithType: EnumBuilder.DefineLiteral(String,Object)
  fullName: System.Reflection.Emit.EnumBuilder.DefineLiteral(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines the named static field in an enumeration type with the specified constant value.
  remarks: "The defined field will have the field attributes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.FieldAttributes>, and <xref:System.Reflection.FieldAttributes> set.  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type."
  example:
  - "The following code example demonstrates the construction of an enumeration within a dynamic assembly, using `EnumBuilder`. The example defines an enumeration named `Elevation`, with an underlying type of <xref:System.Int32>, and creates two elements: `Low`, with a value of 0, and `High`, with a value of 1. After the type has been created, the assembly is saved with the name `TempAssembly.dll`. You can use the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) to examine the contents of this assembly.  \n  \n> [!NOTE]\n>  Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.  \n  \n [!CODE [ModuleBuilder_DefineEnum#1](../CodeSnippet/VS_Snippets_CLR/ModuleBuilder_DefineEnum#1)]"
  syntax:
    content: public System.Reflection.Emit.FieldBuilder DefineLiteral (string literalName, object literalValue);
    parameters:
    - id: literalName
      type: System.String
      description: The name of the static field.
    - id: literalValue
      type: System.Object
      description: The constant value of the literal.
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: The defined field.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.FullName
  id: FullName
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: FullName
  nameWithType: EnumBuilder.FullName
  fullName: System.Reflection.Emit.EnumBuilder.FullName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the full path of this enum.
  remarks: The returned format is "enclosingTypeFullName+nestedTypeName" for nested types and "typeName" for non-nested types.
  syntax:
    content: public override string FullName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl
  id: GetAttributeFlagsImpl
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetAttributeFlagsImpl()
  nameWithType: EnumBuilder.GetAttributeFlagsImpl()
  fullName: System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: EnumBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.EnumBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    - id: binder
      type: System.Reflection.Binder
      description: To be added.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: To be added.
    - id: types
      type: System.Type[]
      description: To be added.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: To be added.
    return:
      type: System.Reflection.ConstructorInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)
  id: GetConstructors(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetConstructors(BindingFlags)
  nameWithType: EnumBuilder.GetConstructors(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetConstructors(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns an array of <see cref="T:System.Reflection.ConstructorInfo"> objects representing the public and non-public constructors defined for this class, as specified.
  remarks: As a workaround, to retrieve the constructor of a finished type, you can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: 'This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"> : `InvokeMethod`, `NonPublic`, and so on.'
    return:
      type: System.Reflection.ConstructorInfo[]
      description: Returns an array of <see cref="T:System.Reflection.ConstructorInfo"> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: EnumBuilder.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all the custom attributes defined for this constructor.
  remarks: "As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>.  \n  \n The following code sample illustrates the use of `GetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>.  \n  \n [!CODE [EnumBuilder_SetCustomAttribute2#1](../CodeSnippet/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2#1)]"
  syntax:
    content: public override object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: Specifies whether to search this member's inheritance chain to find the attributes.
    return:
      type: System.Object[]
      description: Returns an array of objects representing all the custom attributes of the constructor represented by this <see cref="T:System.Reflection.Emit.ConstructorBuilder"> instance.
  overload: System.Reflection.Emit.EnumBuilder.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: EnumBuilder.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the custom attributes identified by the given type.
  remarks: "As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName> on the returned <xref:System.Type>.  \n  \n The following code sample illustrates the use of `GetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>.  \n  \n [!CODE [EnumBuilder_SetCustomAttribute1#2](../CodeSnippet/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1#2)]"
  syntax:
    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The `Type` object to which the custom attributes are applied.
    - id: inherit
      type: System.Boolean
      description: Specifies whether to search this member's inheritance chain to find the attributes.
    return:
      type: System.Object[]
      description: Returns an array of objects representing the attributes of this constructor that are of <see cref="T:System.Type">.
  overload: System.Reflection.Emit.EnumBuilder.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetElementType
  id: GetElementType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetElementType()
  nameWithType: EnumBuilder.GetElementType()
  fullName: System.Reflection.Emit.EnumBuilder.GetElementType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Calling this method always throws <see cref="T:System.NotSupportedException">.
  remarks: To be added.
  syntax:
    content: public override Type GetElementType ();
    parameters: []
    return:
      type: System.Type
      description: This method is not supported. No value is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType
  id: GetEnumUnderlyingType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetEnumUnderlyingType()
  nameWithType: EnumBuilder.GetEnumUnderlyingType()
  fullName: System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.
  remarks: To be added.
  syntax:
    content: public override Type GetEnumUnderlyingType ();
    parameters: []
    return:
      type: System.Type
      description: The underlying type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)
  id: GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetEvent(String,BindingFlags)
  nameWithType: EnumBuilder.GetEvent(String,BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetEvent(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the event with the specified name.
  remarks: As a workaround, to retrieve the event of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The name of the event to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: 'This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"> : `InvokeMethod`, `NonPublic`, and so on.'
    return:
      type: System.Reflection.EventInfo
      description: Returns an <see cref="T:System.Reflection.EventInfo"> object representing the event declared or inherited by this type with the specified name. If there are no matches, `null` is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetEvents
  id: GetEvents
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetEvents()
  nameWithType: EnumBuilder.GetEvents()
  fullName: System.Reflection.Emit.EnumBuilder.GetEvents()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the events for the public events declared or inherited by this type.
  remarks: As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.EventInfo[] GetEvents ();
    parameters: []
    return:
      type: System.Reflection.EventInfo[]
      description: Returns an array of <see cref="T:System.Reflection.EventInfo"> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.
  overload: System.Reflection.Emit.EnumBuilder.GetEvents*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)
  id: GetEvents(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetEvents(BindingFlags)
  nameWithType: EnumBuilder.GetEvents(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetEvents(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the public and non-public events that are declared by this type.
  remarks: As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type to retrieve the events.
  syntax:
    content: public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: This must be a bit flag from <see cref="T:System.Reflection.BindingFlags">, such as `InvokeMethod`, `NonPublic`, and so on.
    return:
      type: System.Reflection.EventInfo[]
      description: Returns an array of <see cref="T:System.Reflection.EventInfo"> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.
  overload: System.Reflection.Emit.EnumBuilder.GetEvents*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: EnumBuilder.GetField(String,BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the field specified by the given name.
  remarks: As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The name of the field to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: 'This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"> : `InvokeMethod`, `NonPublic`, and so on.'
    return:
      type: System.Reflection.FieldInfo
      description: Returns the <see cref="T:System.Reflection.FieldInfo"> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: EnumBuilder.GetFields(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the public and non-public fields that are declared by this type.
  remarks: "As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.  \n  \n The GetFields method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary."
  syntax:
    content: public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: This must be a bit flag from <see cref="T:System.Reflection.BindingFlags">, such as InvokeMethod, NonPublic, and so on.
    return:
      type: System.Reflection.FieldInfo[]
      description: Returns an array of <see cref="T:System.Reflection.FieldInfo"> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)
  id: GetInterface(System.String,System.Boolean)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetInterface(String,Boolean)
  nameWithType: EnumBuilder.GetInterface(String,Boolean)
  fullName: System.Reflection.Emit.EnumBuilder.GetInterface(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.
  remarks: As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override Type GetInterface (string name, bool ignoreCase);
    parameters:
    - id: name
      type: System.String
      description: The name of the interface.
    - id: ignoreCase
      type: System.Boolean
      description: If `true`, the search is case-insensitive. If `false`, the search is case-sensitive.
    return:
      type: System.Type
      description: Returns a <see cref="T:System.Type"> object representing the implemented interface. Returns null if no interface matching name is found.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)
  id: GetInterfaceMap(System.Type)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetInterfaceMap(Type)
  nameWithType: EnumBuilder.GetInterfaceMap(Type)
  fullName: System.Reflection.Emit.EnumBuilder.GetInterfaceMap(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns an interface mapping for the interface requested.
  remarks: As a workaround, to retrieve the interface mapping types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);
    parameters:
    - id: interfaceType
      type: System.Type
      description: The type of the interface for which the interface mapping is to be retrieved.
    return:
      type: System.Reflection.InterfaceMapping
      description: The requested interface mapping.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetInterfaces
  id: GetInterfaces
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetInterfaces()
  nameWithType: EnumBuilder.GetInterfaces()
  fullName: System.Reflection.Emit.EnumBuilder.GetInterfaces()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns an array of all the interfaces implemented on this a class and its base classes.
  remarks: As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override Type[] GetInterfaces ();
    parameters: []
    return:
      type: System.Type[]
      description: Returns an array of <see cref="T:System.Type"> objects representing the implemented interfaces. If none are defined, an empty array is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetMember(String,MemberTypes,BindingFlags)
  nameWithType: EnumBuilder.GetMember(String,MemberTypes,BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetMember(String,MemberTypes,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all members with the specified name, type, and binding that are declared or inherited by this type.
  remarks: As a workaround, to retrieve the member of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The name of the member.
    - id: type
      type: System.Reflection.MemberTypes
      description: The type of member that is to be returned.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: 'This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"> : `InvokeMethod`, `NonPublic`, and so on.'
    return:
      type: System.Reflection.MemberInfo[]
      description: Returns an array of <see cref="T:System.Reflection.MemberInfo"> objects representing the public and non-public members defined on this type if  is used; otherwise, only the public members are returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: EnumBuilder.GetMembers(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the specified members declared or inherited by this type,.
  remarks: As a workaround, to retrieve the members of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: 'This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"> : `InvokeMethod`, `NonPublic`, and so on.'
    return:
      type: System.Reflection.MemberInfo[]
      description: Returns an array of <see cref="T:System.Reflection.MemberInfo"> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: EnumBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.EnumBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    - id: binder
      type: System.Reflection.Binder
      description: To be added.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: To be added.
    - id: types
      type: System.Type[]
      description: To be added.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: To be added.
    return:
      type: System.Reflection.MethodInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: EnumBuilder.GetMethods(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all the public and non-public methods declared or inherited by this type, as specified.
  remarks: As a workaround, to retrieve the methods of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: This must be a bit flag from <see cref="T:System.Reflection.BindingFlags">, such as `InvokeMethod`, `NonPublic`, and so on.
    return:
      type: System.Reflection.MethodInfo[]
      description: Returns an array of <see cref="T:System.Reflection.MethodInfo"> objects representing the public and non-public methods defined on this type if  is used; otherwise, only the public methods are returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)
  id: GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetNestedType(String,BindingFlags)
  nameWithType: EnumBuilder.GetNestedType(String,BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetNestedType(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the specified nested type that is declared by this type.
  remarks: As a workaround, to retrieve the nested type of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The <see cref="T:System.String"> containing the name of the nested type to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <see cref=\"T:System.Reflection.BindingFlags\"> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to conduct a case-sensitive search for public methods."
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object representing the nested type that matches the specified requirements, if found; otherwise, `null`.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)
  id: GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetNestedTypes(BindingFlags)
  nameWithType: EnumBuilder.GetNestedTypes(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetNestedTypes(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the public and non-public nested types that are declared or inherited by this type.
  remarks: As a workaround, to retrieve the nested types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: This must be a bit flag from <see cref="T:System.Reflection.BindingFlags">, such as `InvokeMethod`, `NonPublic`, and so on.
    return:
      type: System.Type[]
      description: "An array of <see cref=\"T:System.Type\"> objects representing all the types nested within the current <see cref=\"T:System.Type\"> that match the specified binding constraints.  \n  \n An empty array of type <see cref=\"T:System.Type\">, if no types are nested within the current <see cref=\"T:System.Type\">, or if none of the nested types match the binding constraints."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: EnumBuilder.GetProperties(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all the public and non-public properties declared or inherited by this type, as specified.
  remarks: As a workaround, to retrieve the properties of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: 'This invocation attribute. This must be a bit flag from <see cref="T:System.Reflection.BindingFlags"> : `InvokeMethod`, `NonPublic`, and so on.'
    return:
      type: System.Reflection.PropertyInfo[]
      description: Returns an array of <see cref="T:System.Reflection.PropertyInfo"> objects representing the public and non-public properties defined on this type if  is used; otherwise, only the public properties are returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: EnumBuilder.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.EnumBuilder.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    - id: binder
      type: System.Reflection.Binder
      description: To be added.
    - id: returnType
      type: System.Type
      description: To be added.
    - id: types
      type: System.Type[]
      description: To be added.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.GUID
  id: GUID
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: GUID
  nameWithType: EnumBuilder.GUID
  fullName: System.Reflection.Emit.EnumBuilder.GUID
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the GUID of this enum.
  remarks: ''
  example:
  - "The following code sample demonstrates the use of the `GUID` property to reference the associated <xref:System.Guid> of the current `EnumBuilder`.  \n  \n [!CODE [EnumBuilder_Properties_4.cs#4](../CodeSnippet/VS_Snippets_CLR/EnumBuilder_Properties_4.cs#4)]"
  syntax:
    content: public override Guid GUID { get; }
    return:
      type: System.Guid
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.HasElementTypeImpl
  id: HasElementTypeImpl
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: HasElementTypeImpl()
  nameWithType: EnumBuilder.HasElementTypeImpl()
  fullName: System.Reflection.Emit.EnumBuilder.HasElementTypeImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool HasElementTypeImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: EnumBuilder.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.Emit.EnumBuilder.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.
  remarks: You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.
  syntax:
    content: public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: The invocation attribute. This must be a bit flag from `BindingFlags`.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If binder is `null`, the default binder is used. See <see cref="T:System.Reflection.Binder">.
    - id: target
      type: System.Object
      description: The object on which to invoke the specified member. If the member is static, this parameter is ignored.
    - id: args
      type: System.Object[]
      description: An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of the same length as  with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.
    - id: culture
      type: System.Globalization.CultureInfo
      description: An instance of `CultureInfo` used to govern the coercion of types. If this is null, the `CultureInfo` for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)
    - id: namedParameters
      type: System.String[]
      description: Each parameter in the  array gets the value in the corresponding element in the  array. If the length of  is greater than the length of , the remaining argument values are passed in order.
    return:
      type: System.Object
      description: Returns the return value of the invoked member.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.IsArrayImpl
  id: IsArrayImpl
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: IsArrayImpl()
  nameWithType: EnumBuilder.IsArrayImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsArrayImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsArrayImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  id: IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: IsAssignableFrom(TypeInfo)
  nameWithType: EnumBuilder.IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.Emit.EnumBuilder.IsAssignableFrom(TypeInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a value that indicates whether a specified <see cref="T:System.Reflection.TypeInfo"> object can be assigned to this object.
  remarks: To be added.
  syntax:
    content: public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The object to test.
    return:
      type: System.Boolean
      description: '`true` if  can be assigned to this object; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.IsByRefImpl
  id: IsByRefImpl
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: IsByRefImpl()
  nameWithType: EnumBuilder.IsByRefImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsByRefImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsByRefImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl
  id: IsCOMObjectImpl
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: IsCOMObjectImpl()
  nameWithType: EnumBuilder.IsCOMObjectImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsCOMObjectImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.IsConstructedGenericType
  id: IsConstructedGenericType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: IsConstructedGenericType
  nameWithType: EnumBuilder.IsConstructedGenericType
  fullName: System.Reflection.Emit.EnumBuilder.IsConstructedGenericType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a value that indicates whether this object represents a constructed generic type.
  remarks: To be added.
  syntax:
    content: public override bool IsConstructedGenericType { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: IsDefined(Type,Boolean)
  nameWithType: EnumBuilder.IsDefined(Type,Boolean)
  fullName: System.Reflection.Emit.EnumBuilder.IsDefined(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Checks if the specified custom attribute type is defined.
  remarks: As a workaround, to check if a custom attribute is defined for a finished type, retrieve the type using <xref:System.Type.GetType%2A> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>.
  syntax:
    content: public override bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The `Type` object to which the custom attributes are applied.
    - id: inherit
      type: System.Boolean
      description: Specifies whether to search this member's inheritance chain to find the attributes.
    return:
      type: System.Boolean
      description: '`true` if one or more instance of  is defined on this member; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.IsPointerImpl
  id: IsPointerImpl
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: IsPointerImpl()
  nameWithType: EnumBuilder.IsPointerImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsPointerImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsPointerImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl
  id: IsPrimitiveImpl
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: IsPrimitiveImpl()
  nameWithType: EnumBuilder.IsPrimitiveImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsPrimitiveImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.IsValueTypeImpl
  id: IsValueTypeImpl
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: IsValueTypeImpl()
  nameWithType: EnumBuilder.IsValueTypeImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsValueTypeImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsValueTypeImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType
  id: MakeArrayType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: MakeArrayType()
  nameWithType: EnumBuilder.MakeArrayType()
  fullName: System.Reflection.Emit.EnumBuilder.MakeArrayType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a <see cref="T:System.Type"> object representing a one-dimensional array of the current type, with a lower bound of zero.
  remarks: To be added.
  syntax:
    content: public override Type MakeArrayType ();
    parameters: []
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object representing a one-dimensional array of the current type, with a lower bound of zero.
  overload: System.Reflection.Emit.EnumBuilder.MakeArrayType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: MakeArrayType(Int32)
  nameWithType: EnumBuilder.MakeArrayType(Int32)
  fullName: System.Reflection.Emit.EnumBuilder.MakeArrayType(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a <see cref="T:System.Type"> object representing an array of the current type, with the specified number of dimensions.
  remarks: To be added.
  syntax:
    content: public override Type MakeArrayType (int rank);
    parameters:
    - id: rank
      type: System.Int32
      description: The number of dimensions for the array. This number must be less than or equal to 32.
    return:
      type: System.Type
      description: An object representing an array of the current type, with the specified number of dimensions.
  overload: System.Reflection.Emit.EnumBuilder.MakeArrayType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.MakeByRefType
  id: MakeByRefType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: MakeByRefType()
  nameWithType: EnumBuilder.MakeByRefType()
  fullName: System.Reflection.Emit.EnumBuilder.MakeByRefType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a <see cref="T:System.Type"> object that represents the current type when passed as a **ref** parameter (**ByRef** parameter in Visual Basic).
  remarks: To be added.
  syntax:
    content: public override Type MakeByRefType ();
    parameters: []
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object that represents the current type when passed as a **ref** parameter (**ByRef** parameter in Visual Basic).
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.MakePointerType
  id: MakePointerType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: MakePointerType()
  nameWithType: EnumBuilder.MakePointerType()
  fullName: System.Reflection.Emit.EnumBuilder.MakePointerType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a <see cref="T:System.Type"> object that represents a pointer to the current type.
  remarks: To be added.
  syntax:
    content: public override Type MakePointerType ();
    parameters: []
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object that represents a pointer to the current type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.Module
  id: Module
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: Module
  nameWithType: EnumBuilder.Module
  fullName: System.Reflection.Emit.EnumBuilder.Module
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the dynamic module that contains this <see cref="T:System.Reflection.Emit.EnumBuilder"> definition.
  remarks: ''
  example:
  - "The following code sample demonstrates the use of the `Module` property to reference the parent module of the current `EnumBuilder`.  \n  \n [!CODE [EnumBuilder_Properties_5#3](../CodeSnippet/VS_Snippets_CLR/EnumBuilder_Properties_5#3)]"
  syntax:
    content: public override System.Reflection.Module Module { get; }
    return:
      type: System.Reflection.Module
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.Name
  id: Name
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: Name
  nameWithType: EnumBuilder.Name
  fullName: System.Reflection.Emit.EnumBuilder.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the name of this enum.
  remarks: ''
  example:
  - "The following code sample demonstrates the use of the `Name` property to reference the name of the current `EnumBuilder`.  \n  \n [!CODE [EnumBuilder_Properties_5#4](../CodeSnippet/VS_Snippets_CLR/EnumBuilder_Properties_5#4)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.Namespace
  id: Namespace
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: Namespace
  nameWithType: EnumBuilder.Namespace
  fullName: System.Reflection.Emit.EnumBuilder.Namespace
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the namespace of this enum.
  remarks: ''
  example:
  - "The following code sample demonstrates the use of the `Namespace` property to reference the associated namespace of the current `EnumBuilder`.  \n  \n [!CODE [EnumBuilder_Properties_5#5](../CodeSnippet/VS_Snippets_CLR/EnumBuilder_Properties_5#5)]"
  syntax:
    content: public override string Namespace { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.ReflectedType
  id: ReflectedType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: ReflectedType
  nameWithType: EnumBuilder.ReflectedType
  fullName: System.Reflection.Emit.EnumBuilder.ReflectedType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the type that was used to obtain this <see cref="T:System.Reflection.Emit.EnumBuilder">.
  remarks: To be added.
  syntax:
    content: public override Type ReflectedType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: EnumBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(CustomAttributeBuilder)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets a custom attribute using a custom attribute builder.
  remarks: ''
  example:
  - "The following code sample illustrates the use of `SetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>, passing a <xref:System.Reflection.Emit.CustomAttributeBuilder>.  \n  \n [!CODE [EnumBuilder_SetCustomAttribute2#2](../CodeSnippet/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2#2)]"
  syntax:
    content: public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: An instance of a helper class to define the custom attribute.
  overload: System.Reflection.Emit.EnumBuilder.SetCustomAttribute*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: SetCustomAttribute(ConstructorInfo,Byte[])
  nameWithType: EnumBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  fullName: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets a custom attribute using a specified custom attribute blob.
  remarks: See the metadata specification in the ECMA Partition II documentation for details on how to format . The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  example:
  - "The following code sample illustrates the use of `SetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>, passing a byte blob.  \n  \n [!CODE [EnumBuilder_SetCustomAttribute2#2](../CodeSnippet/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2#2)]"
  syntax:
    content: public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: The constructor for the custom attribute.
    - id: binaryAttribute
      type: System.Byte[]
      description: A byte blob representing the attributes.
  overload: System.Reflection.Emit.EnumBuilder.SetCustomAttribute*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _EnumBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array which receives the IDs corresponding to the names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _EnumBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(UInt32)
  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _EnumBuilder.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._EnumBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _EnumBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.TypeHandle
  id: TypeHandle
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: TypeHandle
  nameWithType: EnumBuilder.TypeHandle
  fullName: System.Reflection.Emit.EnumBuilder.TypeHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the internal handle for this enum.
  remarks: "You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.  \n  \n Use this handle to access the underlying metadata handle."
  syntax:
    content: public override RuntimeTypeHandle TypeHandle { get; }
    return:
      type: System.RuntimeTypeHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.TypeToken
  id: TypeToken
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: TypeToken
  nameWithType: EnumBuilder.TypeToken
  fullName: System.Reflection.Emit.EnumBuilder.TypeToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the internal metadata type token of this enum.
  remarks: To be added.
  syntax:
    content: public System.Reflection.Emit.TypeToken TypeToken { get; }
    return:
      type: System.Reflection.Emit.TypeToken
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.UnderlyingField
  id: UnderlyingField
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: UnderlyingField
  nameWithType: EnumBuilder.UnderlyingField
  fullName: System.Reflection.Emit.EnumBuilder.UnderlyingField
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the underlying field for this enum.
  remarks: To be added.
  syntax:
    content: public System.Reflection.Emit.FieldBuilder UnderlyingField { get; }
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.EnumBuilder.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.Emit.EnumBuilder
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: EnumBuilder.UnderlyingSystemType
  fullName: System.Reflection.Emit.EnumBuilder.UnderlyingSystemType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the underlying system type for this enum.
  remarks: To be added.
  syntax:
    content: public override Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Reflection.TypeInfo
  isExternal: false
  name: System.Reflection.TypeInfo
- uid: System.Reflection.Emit.EnumBuilder.Assembly
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: Assembly
  nameWithType: EnumBuilder.Assembly
  fullName: System.Reflection.Emit.EnumBuilder.Assembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: AssemblyQualifiedName
  nameWithType: EnumBuilder.AssemblyQualifiedName
  fullName: System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.EnumBuilder.BaseType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: BaseType
  nameWithType: EnumBuilder.BaseType
  fullName: System.Reflection.Emit.EnumBuilder.BaseType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.CreateType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: CreateType()
  nameWithType: EnumBuilder.CreateType()
  fullName: System.Reflection.Emit.EnumBuilder.CreateType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.CreateTypeInfo
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: CreateTypeInfo()
  nameWithType: EnumBuilder.CreateTypeInfo()
  fullName: System.Reflection.Emit.EnumBuilder.CreateTypeInfo()
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.Emit.EnumBuilder.DeclaringType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: DeclaringType
  nameWithType: EnumBuilder.DeclaringType
  fullName: System.Reflection.Emit.EnumBuilder.DeclaringType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: DefineLiteral(String,Object)
  nameWithType: EnumBuilder.DefineLiteral(String,Object)
  fullName: System.Reflection.Emit.EnumBuilder.DefineLiteral(String,Object)
- uid: System.Reflection.Emit.FieldBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: FieldBuilder
  nameWithType: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.Emit.EnumBuilder.FullName
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: FullName
  nameWithType: EnumBuilder.FullName
  fullName: System.Reflection.Emit.EnumBuilder.FullName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetAttributeFlagsImpl()
  nameWithType: EnumBuilder.GetAttributeFlagsImpl()
  fullName: System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl()
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Reflection.Emit.EnumBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: EnumBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.EnumBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.ParameterModifier
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
- uid: System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetConstructors(BindingFlags)
  nameWithType: EnumBuilder.GetConstructors(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetConstructors(BindingFlags)
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: EnumBuilder.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: EnumBuilder.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(Type,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.GetElementType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetElementType()
  nameWithType: EnumBuilder.GetElementType()
  fullName: System.Reflection.Emit.EnumBuilder.GetElementType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetEnumUnderlyingType()
  nameWithType: EnumBuilder.GetEnumUnderlyingType()
  fullName: System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetEvent(String,BindingFlags)
  nameWithType: EnumBuilder.GetEvent(String,BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetEvent(String,BindingFlags)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetEvents
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetEvents()
  nameWithType: EnumBuilder.GetEvents()
  fullName: System.Reflection.Emit.EnumBuilder.GetEvents()
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo[]
- uid: System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetEvents(BindingFlags)
  nameWithType: EnumBuilder.GetEvents(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetEvents(BindingFlags)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: EnumBuilder.GetField(String,BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: EnumBuilder.GetFields(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetInterface(String,Boolean)
  nameWithType: EnumBuilder.GetInterface(String,Boolean)
  fullName: System.Reflection.Emit.EnumBuilder.GetInterface(String,Boolean)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetInterfaceMap(Type)
  nameWithType: EnumBuilder.GetInterfaceMap(Type)
  fullName: System.Reflection.Emit.EnumBuilder.GetInterfaceMap(Type)
- uid: System.Reflection.InterfaceMapping
  parent: System.Reflection
  isExternal: false
  name: InterfaceMapping
  nameWithType: InterfaceMapping
  fullName: System.Reflection.InterfaceMapping
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.GetInterfaces
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetInterfaces()
  nameWithType: EnumBuilder.GetInterfaces()
  fullName: System.Reflection.Emit.EnumBuilder.GetInterfaces()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetMember(String,MemberTypes,BindingFlags)
  nameWithType: EnumBuilder.GetMember(String,MemberTypes,BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetMember(String,MemberTypes,BindingFlags)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: EnumBuilder.GetMembers(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetMembers(BindingFlags)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: EnumBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.EnumBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.ParameterModifier
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
- uid: System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: EnumBuilder.GetMethods(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetNestedType(String,BindingFlags)
  nameWithType: EnumBuilder.GetNestedType(String,BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetNestedType(String,BindingFlags)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetNestedTypes(BindingFlags)
  nameWithType: EnumBuilder.GetNestedTypes(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetNestedTypes(BindingFlags)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: EnumBuilder.GetProperties(BindingFlags)
  fullName: System.Reflection.Emit.EnumBuilder.GetProperties(BindingFlags)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.EnumBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: EnumBuilder.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.EnumBuilder.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.ParameterModifier
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
- uid: System.Reflection.Emit.EnumBuilder.GUID
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: GUID
  nameWithType: EnumBuilder.GUID
  fullName: System.Reflection.Emit.EnumBuilder.GUID
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Reflection.Emit.EnumBuilder.HasElementTypeImpl
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: HasElementTypeImpl()
  nameWithType: EnumBuilder.HasElementTypeImpl()
  fullName: System.Reflection.Emit.EnumBuilder.HasElementTypeImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: EnumBuilder.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.Emit.EnumBuilder.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Reflection.ParameterModifier
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.Reflection.Emit.EnumBuilder.IsArrayImpl
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: IsArrayImpl()
  nameWithType: EnumBuilder.IsArrayImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsArrayImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: IsAssignableFrom(TypeInfo)
  nameWithType: EnumBuilder.IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.Emit.EnumBuilder.IsAssignableFrom(TypeInfo)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.Emit.EnumBuilder.IsByRefImpl
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: IsByRefImpl()
  nameWithType: EnumBuilder.IsByRefImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsByRefImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: IsCOMObjectImpl()
  nameWithType: EnumBuilder.IsCOMObjectImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.IsConstructedGenericType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: IsConstructedGenericType
  nameWithType: EnumBuilder.IsConstructedGenericType
  fullName: System.Reflection.Emit.EnumBuilder.IsConstructedGenericType
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: IsDefined(Type,Boolean)
  nameWithType: EnumBuilder.IsDefined(Type,Boolean)
  fullName: System.Reflection.Emit.EnumBuilder.IsDefined(Type,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.IsPointerImpl
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: IsPointerImpl()
  nameWithType: EnumBuilder.IsPointerImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsPointerImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: IsPrimitiveImpl()
  nameWithType: EnumBuilder.IsPrimitiveImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.IsValueTypeImpl
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: IsValueTypeImpl()
  nameWithType: EnumBuilder.IsValueTypeImpl()
  fullName: System.Reflection.Emit.EnumBuilder.IsValueTypeImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: MakeArrayType()
  nameWithType: EnumBuilder.MakeArrayType()
  fullName: System.Reflection.Emit.EnumBuilder.MakeArrayType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: MakeArrayType(Int32)
  nameWithType: EnumBuilder.MakeArrayType(Int32)
  fullName: System.Reflection.Emit.EnumBuilder.MakeArrayType(Int32)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.EnumBuilder.MakeByRefType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: MakeByRefType()
  nameWithType: EnumBuilder.MakeByRefType()
  fullName: System.Reflection.Emit.EnumBuilder.MakeByRefType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.MakePointerType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: MakePointerType()
  nameWithType: EnumBuilder.MakePointerType()
  fullName: System.Reflection.Emit.EnumBuilder.MakePointerType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.Module
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: Module
  nameWithType: EnumBuilder.Module
  fullName: System.Reflection.Emit.EnumBuilder.Module
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Emit.EnumBuilder.Name
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: Name
  nameWithType: EnumBuilder.Name
  fullName: System.Reflection.Emit.EnumBuilder.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.EnumBuilder.Namespace
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: Namespace
  nameWithType: EnumBuilder.Namespace
  fullName: System.Reflection.Emit.EnumBuilder.Namespace
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.EnumBuilder.ReflectedType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: ReflectedType
  nameWithType: EnumBuilder.ReflectedType
  fullName: System.Reflection.Emit.EnumBuilder.ReflectedType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: EnumBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(CustomAttributeBuilder)
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: SetCustomAttribute(ConstructorInfo,Byte[])
  nameWithType: EnumBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  fullName: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(UInt32)
  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: System.Runtime.InteropServices._EnumBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.EnumBuilder.TypeHandle
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: TypeHandle
  nameWithType: EnumBuilder.TypeHandle
  fullName: System.Reflection.Emit.EnumBuilder.TypeHandle
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.EnumBuilder.TypeToken
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: TypeToken
  nameWithType: EnumBuilder.TypeToken
  fullName: System.Reflection.Emit.EnumBuilder.TypeToken
- uid: System.Reflection.Emit.TypeToken
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeToken
  nameWithType: TypeToken
  fullName: System.Reflection.Emit.TypeToken
- uid: System.Reflection.Emit.EnumBuilder.UnderlyingField
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: UnderlyingField
  nameWithType: EnumBuilder.UnderlyingField
  fullName: System.Reflection.Emit.EnumBuilder.UnderlyingField
- uid: System.Reflection.Emit.FieldBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: FieldBuilder
  nameWithType: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
- uid: System.Reflection.Emit.EnumBuilder.UnderlyingSystemType
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: EnumBuilder.UnderlyingSystemType
  fullName: System.Reflection.Emit.EnumBuilder.UnderlyingSystemType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder.GetCustomAttributes*
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  nameWithType: EnumBuilder.
- uid: System.Reflection.Emit.EnumBuilder.GetEvents*
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  nameWithType: EnumBuilder.
- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType*
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  nameWithType: EnumBuilder.
- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute*
  parent: System.Reflection.Emit.EnumBuilder
  isExternal: false
  nameWithType: EnumBuilder.
