### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.GenericTypeParameterBuilder
  id: GenericTypeParameterBuilder
  children:
  - System.Reflection.Emit.GenericTypeParameterBuilder.Assembly
  - System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName
  - System.Reflection.Emit.GenericTypeParameterBuilder.BaseType
  - System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters
  - System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod
  - System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType
  - System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)
  - System.Reflection.Emit.GenericTypeParameterBuilder.FullName
  - System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes
  - System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)
  - System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Emit.GenericTypeParameterBuilder.GUID
  - System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl
  - System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)
  - System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl
  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)
  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
  - System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])
  - System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
  - System.Reflection.Emit.GenericTypeParameterBuilder.Module
  - System.Reflection.Emit.GenericTypeParameterBuilder.Name
  - System.Reflection.Emit.GenericTypeParameterBuilder.Namespace
  - System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType
  - System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)
  - System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
  - System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])
  - System.Reflection.Emit.GenericTypeParameterBuilder.ToString
  - System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle
  - System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType
  langs:
  - csharp
  name: GenericTypeParameterBuilder
  nameWithType: GenericTypeParameterBuilder
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder
  type: Class
  summary: Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.
  remarks: "You can get an array of GenericTypeParameterBuilder objects by using the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic type, thus making it a generic type, or by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName> method to add type parameters to a dynamic method. Use the GenericTypeParameterBuilder objects to add constraints to the type parameters. Constraints are of three kinds:  \n  \n-   The base type constraint specifies that any type assigned to the generic type parameter must derive from a particular base type. Set this constraint by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.  \n  \n-   An interface constraint specifies that any type assigned to the generic type parameter must implement a particular interface. Set the interface constraints by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints%2A> method.  \n  \n-   Special constraints specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type. Set the special constraints for a type parameter by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method.  \n  \n Interface constraints and special constraints cannot be retrieved using methods of the GenericTypeParameterBuilder class. Once you have created the generic type that contains the type parameters, you can use its <xref:System.Type> object to reflect the constraints. Use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method to get the type parameters, and for each type parameter use the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method to get the base type constraint and interface constraints, and the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property to get the special constraints."
  example:
  - "The following code example creates a generic type with two type parameters, and saves them in the assembly GenericEmitExample1.dll. You can use the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](../Topic/How%20to:%20Define%20a%20Generic%20Type%20with%20Reflection%20Emit.md).  \n  \n [!CODE [EmitGenericType#1](../CodeSnippet/VS_Snippets_CLR/EmitGenericType#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class GenericTypeParameterBuilder : System.Reflection.TypeInfo
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  - System.Type
  - System.Reflection.TypeInfo
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.TypeInfo.AsType
  - System.Reflection.TypeInfo.DeclaredConstructors
  - System.Reflection.TypeInfo.DeclaredEvents
  - System.Reflection.TypeInfo.DeclaredFields
  - System.Reflection.TypeInfo.DeclaredMembers
  - System.Reflection.TypeInfo.DeclaredMethods
  - System.Reflection.TypeInfo.DeclaredNestedTypes
  - System.Reflection.TypeInfo.DeclaredProperties
  - System.Reflection.TypeInfo.GenericTypeParameters
  - System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  - System.Reflection.TypeInfo.GetDeclaredField(System.String)
  - System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  - System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  - System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  - System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  - System.Reflection.TypeInfo.ImplementedInterfaces
  - System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo
  - System.Type.Attributes
  - System.Type.DefaultBinder
  - System.Type.Delimiter
  - System.Type.EmptyTypes
  - System.Type.Equals(System.Type)
  - System.Type.FilterAttribute
  - System.Type.FilterName
  - System.Type.FilterNameIgnoreCase
  - System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  - System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  - System.Type.GenericTypeArguments
  - System.Type.GetArrayRank
  - System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetConstructor(System.Type[])
  - System.Type.GetConstructors
  - System.Type.GetDefaultMembers
  - System.Type.GetEnumName(System.Object)
  - System.Type.GetEnumNames
  - System.Type.GetEnumUnderlyingType
  - System.Type.GetEnumValues
  - System.Type.GetEvent(System.String)
  - System.Type.GetField(System.String)
  - System.Type.GetFields
  - System.Type.GetGenericParameterConstraints
  - System.Type.GetInterface(System.String)
  - System.Type.GetMember(System.String)
  - System.Type.GetMember(System.String,System.Reflection.BindingFlags)
  - System.Type.GetMembers
  - System.Type.GetMethod(System.String)
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags)
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethod(System.String,System.Type[])
  - System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethods
  - System.Type.GetNestedType(System.String)
  - System.Type.GetNestedTypes
  - System.Type.GetProperties
  - System.Type.GetProperty(System.String)
  - System.Type.GetProperty(System.String,System.Reflection.BindingFlags)
  - System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetProperty(System.String,System.Type)
  - System.Type.GetProperty(System.String,System.Type,System.Type[])
  - System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetProperty(System.String,System.Type[])
  - System.Type.GetType
  - System.Type.GetType(System.String)
  - System.Type.GetType(System.String,System.Boolean)
  - System.Type.GetType(System.String,System.Boolean,System.Boolean)
  - System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})
  - System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)
  - System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)
  - System.Type.GetTypeArray(System.Object[])
  - System.Type.GetTypeCode(System.Type)
  - System.Type.GetTypeCodeImpl
  - System.Type.GetTypeFromCLSID(System.Guid)
  - System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)
  - System.Type.GetTypeFromCLSID(System.Guid,System.String)
  - System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)
  - System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  - System.Type.GetTypeFromProgID(System.String)
  - System.Type.GetTypeFromProgID(System.String,System.Boolean)
  - System.Type.GetTypeFromProgID(System.String,System.String)
  - System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)
  - System.Type.GetTypeHandle(System.Object)
  - System.Type.HasElementType
  - System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])
  - System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)
  - System.Type.IsAbstract
  - System.Type.IsAnsiClass
  - System.Type.IsArray
  - System.Type.IsAutoClass
  - System.Type.IsAutoLayout
  - System.Type.IsByRef
  - System.Type.IsClass
  - System.Type.IsCOMObject
  - System.Type.IsContextful
  - System.Type.IsContextfulImpl
  - System.Type.IsEnum
  - System.Type.IsEnumDefined(System.Object)
  - System.Type.IsEquivalentTo(System.Type)
  - System.Type.IsExplicitLayout
  - System.Type.IsImport
  - System.Type.IsInstanceOfType(System.Object)
  - System.Type.IsInterface
  - System.Type.IsLayoutSequential
  - System.Type.IsMarshalByRef
  - System.Type.IsMarshalByRefImpl
  - System.Type.IsNested
  - System.Type.IsNestedAssembly
  - System.Type.IsNestedFamANDAssem
  - System.Type.IsNestedFamily
  - System.Type.IsNestedFamORAssem
  - System.Type.IsNestedPrivate
  - System.Type.IsNestedPublic
  - System.Type.IsNotPublic
  - System.Type.IsPointer
  - System.Type.IsPrimitive
  - System.Type.IsPublic
  - System.Type.IsSealed
  - System.Type.IsSecurityCritical
  - System.Type.IsSecuritySafeCritical
  - System.Type.IsSecurityTransparent
  - System.Type.IsSerializable
  - System.Type.IsSpecialName
  - System.Type.IsUnicodeClass
  - System.Type.IsValueType
  - System.Type.IsVisible
  - System.Type.MemberType
  - System.Type.Missing
  - System.Type.op_Equality(System.Type,System.Type)
  - System.Type.op_Inequality(System.Type,System.Type)
  - System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  - System.Type.StructLayoutAttribute
  - System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)
  - System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Type.TypeInitializer
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Assembly
  id: Assembly
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: Assembly
  nameWithType: GenericTypeParameterBuilder.Assembly
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Assembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets an <see cref="T:System.Reflection.Assembly"> object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.
  remarks: To be added.
  syntax:
    content: public override System.Reflection.Assembly Assembly { get; }
    return:
      type: System.Reflection.Assembly
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: AssemblyQualifiedName
  nameWithType: GenericTypeParameterBuilder.AssemblyQualifiedName
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets `null` in all cases.
  remarks: There is no assembly-qualified name for type parameters because their scope is limited to the generic type that declares them.
  syntax:
    content: public override string AssemblyQualifiedName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.BaseType
  id: BaseType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: BaseType
  nameWithType: GenericTypeParameterBuilder.BaseType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.BaseType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the base type constraint of the current generic type parameter.
  remarks: To set the base type constraint, use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint%2A> method.
  syntax:
    content: public override Type BaseType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: ContainsGenericParameters
  nameWithType: GenericTypeParameterBuilder.ContainsGenericParameters
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets `true` in all cases.
  remarks: A <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object always represents a generic type parameter. The value of the ContainsGenericParameters property reflects that fact and does not imply anything about any generic type argument that might be assigned to the type parameter.
  syntax:
    content: public override bool ContainsGenericParameters { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod
  id: DeclaringMethod
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: DeclaringMethod
  nameWithType: GenericTypeParameterBuilder.DeclaringMethod
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a <see cref="T:System.Reflection.MethodInfo"> that represents the declaring method, if the current <xref:System.Reflection.Emit.GenericTypeParameterBuilder> represents a type parameter of a generic method.
  remarks: If the DeclaringMethod property is not `null`, then the declaring method is a generic method definition and `DeclaringMethod.IsGenericMethodDefinition` is `true`.
  syntax:
    content: public override System.Reflection.MethodBase DeclaringMethod { get; }
    return:
      type: System.Reflection.MethodBase
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: DeclaringType
  nameWithType: GenericTypeParameterBuilder.DeclaringType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the generic type definition or generic method definition to which the generic type parameter belongs.
  remarks: The declaring type is not necessarily a generic type. If the current type parameter belongs to a generic method, the type in which the method is declared might not be generic.
  syntax:
    content: public override Type DeclaringType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: GenericTypeParameterBuilder.Equals(Object)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Tests whether the given object is an instance of `EventToken` and is equal to the current instance.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object to be compared with the current instance.
    return:
      type: System.Boolean
      description: Returns `true` if  is an instance of `EventToken` and equals the current instance; otherwise, `false`.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.FullName
  id: FullName
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: FullName
  nameWithType: GenericTypeParameterBuilder.FullName
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.FullName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets `null` in all cases.
  remarks: A generic type parameter does not have a full name, because its scope is limited to the generic type that declares it.
  syntax:
    content: public override string FullName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes
  id: GenericParameterAttributes
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GenericParameterAttributes
  nameWithType: GenericTypeParameterBuilder.GenericParameterAttributes
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes"> flags that describe the covariance and special constraints of the current generic type parameter.
  remarks: To be added.
  syntax:
    content: public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }
    return:
      type: System.Reflection.GenericParameterAttributes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GenericParameterPosition
  nameWithType: GenericTypeParameterBuilder.GenericParameterPosition
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.
  remarks: To be added.
  syntax:
    content: public override int GenericParameterPosition { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl
  id: GetAttributeFlagsImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetAttributeFlagsImpl()
  nameWithType: GenericTypeParameterBuilder.GetAttributeFlagsImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: GenericTypeParameterBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    - id: binder
      type: System.Reflection.Binder
      description: To be added.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: To be added.
    - id: types
      type: System.Type[]
      description: To be added.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: To be added.
    return:
      type: System.Reflection.ConstructorInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)
  id: GetConstructors(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetConstructors(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetConstructors(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Reflection.ConstructorInfo[]
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: GenericTypeParameterBuilder.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: Specifies whether to search this member's inheritance chain to find the attributes.
    return:
      type: System.Object[]
      description: Not supported for incomplete generic type parameters.
  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: GenericTypeParameterBuilder.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The type of attribute to search for. Only attributes that are assignable to this type are returned.
    - id: inherit
      type: System.Boolean
      description: Specifies whether to search this member's inheritance chain to find the attributes.
    return:
      type: System.Object[]
      description: Not supported for incomplete generic type parameters.
  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType
  id: GetElementType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetElementType()
  nameWithType: GenericTypeParameterBuilder.GetElementType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Throws a <see cref="T:System.NotSupportedException"> in all cases.
  remarks: A generic type parameter is a placeholder for a type. Because that type cannot be known in advance, there is no way to know whether it has an element type or what that element type might be. Any return value would be misleading, so the method throws a <xref:System.NotSupportedException>.
  syntax:
    content: public override Type GetElementType ();
    parameters: []
    return:
      type: System.Type
      description: The type referred to by the current array type, pointer type, or `ByRef` type; or `null` if the current type is not an array type, is not a pointer type, and is not passed by reference.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)
  id: GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetEvent(String,BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetEvent(String,BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: Not supported.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Reflection.EventInfo
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents
  id: GetEvents
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetEvents()
  nameWithType: GenericTypeParameterBuilder.GetEvents()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.EventInfo[] GetEvents ();
    parameters: []
    return:
      type: System.Reflection.EventInfo[]
      description: Not supported for incomplete generic type parameters.
  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)
  id: GetEvents(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetEvents(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetEvents(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Reflection.EventInfo[]
      description: Not supported for incomplete generic type parameters.
  overload: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetField(String,BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: Not supported.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Reflection.FieldInfo
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetFields(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Reflection.FieldInfo[]
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments
  id: GetGenericArguments
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetGenericArguments()
  nameWithType: GenericTypeParameterBuilder.GetGenericArguments()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not valid for generic type parameters.
  remarks: In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.
  syntax:
    content: public override Type[] GetGenericArguments ();
    parameters: []
    return:
      type: System.Type[]
      description: Not valid for generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetGenericTypeDefinition()
  nameWithType: GenericTypeParameterBuilder.GetGenericTypeDefinition()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not valid for generic type parameters.
  remarks: In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.
  syntax:
    content: public override Type GetGenericTypeDefinition ();
    parameters: []
    return:
      type: System.Type
      description: Not valid for generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: GenericTypeParameterBuilder.GetHashCode()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a 32-bit integer hash code for the current instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit integer hash code.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)
  id: GetInterface(System.String,System.Boolean)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetInterface(String,Boolean)
  nameWithType: GenericTypeParameterBuilder.GetInterface(String,Boolean)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override Type GetInterface (string name, bool ignoreCase);
    parameters:
    - id: name
      type: System.String
      description: The name of the interface.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to search without regard for case; `false` to make a case-sensitive search.'
    return:
      type: System.Type
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)
  id: GetInterfaceMap(System.Type)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetInterfaceMap(Type)
  nameWithType: GenericTypeParameterBuilder.GetInterfaceMap(Type)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);
    parameters:
    - id: interfaceType
      type: System.Type
      description: A <see cref="T:System.Type"> object that represents the interface type for which the mapping is to be retrieved.
    return:
      type: System.Reflection.InterfaceMapping
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces
  id: GetInterfaces
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetInterfaces()
  nameWithType: GenericTypeParameterBuilder.GetInterfaces()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override Type[] GetInterfaces ();
    parameters: []
    return:
      type: System.Type[]
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetMember(String,MemberTypes,BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetMember(String,MemberTypes,BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(String,MemberTypes,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: Not supported.
    - id: type
      type: System.Reflection.MemberTypes
      description: Not supported.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Reflection.MemberInfo[]
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetMembers(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Reflection.MemberInfo[]
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: GenericTypeParameterBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    - id: binder
      type: System.Reflection.Binder
      description: To be added.
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: To be added.
    - id: types
      type: System.Type[]
      description: To be added.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: To be added.
    return:
      type: System.Reflection.MethodInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetMethods(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Reflection.MethodInfo[]
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)
  id: GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetNestedType(String,BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetNestedType(String,BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: Not supported.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Type
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)
  id: GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetNestedTypes(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetNestedTypes(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Type[]
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetProperties(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    return:
      type: System.Reflection.PropertyInfo[]
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: GenericTypeParameterBuilder.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: To be added.
    - id: binder
      type: System.Reflection.Binder
      description: To be added.
    - id: returnType
      type: System.Type
      description: To be added.
    - id: types
      type: System.Type[]
      description: To be added.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: To be added.
    return:
      type: System.Reflection.PropertyInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GUID
  id: GUID
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: GUID
  nameWithType: GenericTypeParameterBuilder.GUID
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GUID
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override Guid GUID { get; }
    return:
      type: System.Guid
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl
  id: HasElementTypeImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: HasElementTypeImpl()
  nameWithType: GenericTypeParameterBuilder.HasElementTypeImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool HasElementTypeImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: GenericTypeParameterBuilder.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: Not supported.
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: Not supported.
    - id: binder
      type: System.Reflection.Binder
      description: Not supported.
    - id: target
      type: System.Object
      description: Not supported.
    - id: args
      type: System.Object[]
      description: Not supported.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: Not supported.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Not supported.
    - id: namedParameters
      type: System.String[]
      description: Not supported.
    return:
      type: System.Object
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl
  id: IsArrayImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsArrayImpl()
  nameWithType: GenericTypeParameterBuilder.IsArrayImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsArrayImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  id: IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsAssignableFrom(TypeInfo)
  nameWithType: GenericTypeParameterBuilder.IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(TypeInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Throws a <see cref="T:System.NotSupportedException"> exception in all cases.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: The object to test.
    return:
      type: System.Boolean
      description: Throws a <see cref="T:System.NotSupportedException"> exception in all cases.
  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)
  id: IsAssignableFrom(System.Type)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsAssignableFrom(Type)
  nameWithType: GenericTypeParameterBuilder.IsAssignableFrom(Type)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Throws a <see cref="T:System.NotSupportedException"> exception in all cases.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override bool IsAssignableFrom (Type c);
    parameters:
    - id: c
      type: System.Type
      description: The object to test.
    return:
      type: System.Boolean
      description: Throws a <see cref="T:System.NotSupportedException"> exception in all cases.
  overload: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl
  id: IsByRefImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsByRefImpl()
  nameWithType: GenericTypeParameterBuilder.IsByRefImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsByRefImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl
  id: IsCOMObjectImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsCOMObjectImpl()
  nameWithType: GenericTypeParameterBuilder.IsCOMObjectImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsCOMObjectImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType
  id: IsConstructedGenericType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsConstructedGenericType
  nameWithType: GenericTypeParameterBuilder.IsConstructedGenericType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a value that indicates whether this object represents a constructed generic type.
  remarks: To be added.
  syntax:
    content: public override bool IsConstructedGenericType { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsDefined(Type,Boolean)
  nameWithType: GenericTypeParameterBuilder.IsDefined(Type,Boolean)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: Not supported.
    - id: inherit
      type: System.Boolean
      description: Not supported.
    return:
      type: System.Boolean
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter
  id: IsGenericParameter
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsGenericParameter
  nameWithType: GenericTypeParameterBuilder.IsGenericParameter
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets `true` in all cases.
  remarks: To be added.
  syntax:
    content: public override bool IsGenericParameter { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType
  id: IsGenericType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsGenericType
  nameWithType: GenericTypeParameterBuilder.IsGenericType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns `false` in all cases.
  remarks: In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.
  syntax:
    content: public override bool IsGenericType { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition
  id: IsGenericTypeDefinition
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsGenericTypeDefinition
  nameWithType: GenericTypeParameterBuilder.IsGenericTypeDefinition
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets `false` in all cases.
  remarks: In a constructed type, the type that is assigned to a generic type parameter can be a generic type, but the type parameter itself is not generic.
  syntax:
    content: public override bool IsGenericTypeDefinition { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl
  id: IsPointerImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsPointerImpl()
  nameWithType: GenericTypeParameterBuilder.IsPointerImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsPointerImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl
  id: IsPrimitiveImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsPrimitiveImpl()
  nameWithType: GenericTypeParameterBuilder.IsPrimitiveImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsPrimitiveImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)
  id: IsSubclassOf(System.Type)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsSubclassOf(Type)
  nameWithType: GenericTypeParameterBuilder.IsSubclassOf(Type)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override bool IsSubclassOf (Type c);
    parameters:
    - id: c
      type: System.Type
      description: Not supported.
    return:
      type: System.Boolean
      description: Not supported for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl
  id: IsValueTypeImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: IsValueTypeImpl()
  nameWithType: GenericTypeParameterBuilder.IsValueTypeImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override bool IsValueTypeImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
  id: MakeArrayType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: MakeArrayType()
  nameWithType: GenericTypeParameterBuilder.MakeArrayType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the type of a one-dimensional array whose element type is the generic type parameter.
  remarks: The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists.
  example:
  - "The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`. This method returns a two-dimensional array of `T`. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  \n  \n [!CODE [MakeXxxGenericTypeParameterBuilder#1](../CodeSnippet/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder#1)]"
  syntax:
    content: public override Type MakeArrayType ();
    parameters: []
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object that represents the type of a one-dimensional array whose element type is the generic type parameter.
  overload: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: MakeArrayType(Int32)
  nameWithType: GenericTypeParameterBuilder.MakeArrayType(Int32)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.
  remarks: The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types for parameter lists.
  example:
  - "The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`. This method returns a two-dimensional array of `T`. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  \n  \n [!CODE [MakeXxxGenericTypeParameterBuilder#1](../CodeSnippet/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder#1)]"
  syntax:
    content: public override Type MakeArrayType (int rank);
    parameters:
    - id: rank
      type: System.Int32
      description: The number of dimensions for the array.
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.
  overload: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
  id: MakeByRefType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: MakeByRefType()
  nameWithType: GenericTypeParameterBuilder.MakeByRefType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a <see cref="T:System.Type"> object that represents the current generic type parameter when passed as a reference parameter.
  remarks: The MakeByRefType method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.
  example:
  - "The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`. This method returns a two-dimensional array of `T`. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  \n  \n [!CODE [MakeXxxGenericTypeParameterBuilder#1](../CodeSnippet/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder#1)]"
  syntax:
    content: public override Type MakeByRefType ();
    parameters: []
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object that represents the current generic type parameter when passed as a reference parameter.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: MakeGenericType(Type[])
  nameWithType: GenericTypeParameterBuilder.MakeGenericType(Type[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not valid for incomplete generic type parameters.
  remarks: To be added.
  syntax:
    content: public override Type MakeGenericType (Type[] typeArguments);
    parameters:
    - id: typeArguments
      type: System.Type[]
      description: An array of type arguments.
    return:
      type: System.Type
      description: This method is invalid for incomplete generic type parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
  id: MakePointerType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: MakePointerType()
  nameWithType: GenericTypeParameterBuilder.MakePointerType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a <see cref="T:System.Type"> object that represents a pointer to the current generic type parameter.
  remarks: The MakePointerType method provides a way to generate pointer types for parameter lists.
  example:
  - "The following code example creates a dynamic module, an abstract generic type named `Sample` with one type parameter, `T`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `T`, a pointer to type `T`, and an array of `T`. This method returns a two-dimensional array of `T`. The code example saves the dynamic module to disk, so you can examine it using the MSIL Disassembler (Ildasm.exe).  \n  \n [!CODE [MakeXxxGenericTypeParameterBuilder#1](../CodeSnippet/VS_Snippets_CLR/MakeXxxGenericTypeParameterBuilder#1)]"
  syntax:
    content: public override Type MakePointerType ();
    parameters: []
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object that represents a pointer to the current generic type parameter.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Module
  id: Module
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: Module
  nameWithType: GenericTypeParameterBuilder.Module
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Module
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the dynamic module that contains the generic type parameter.
  remarks: To be added.
  syntax:
    content: public override System.Reflection.Module Module { get; }
    return:
      type: System.Reflection.Module
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Name
  id: Name
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: Name
  nameWithType: GenericTypeParameterBuilder.Name
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the name of the generic type parameter.
  remarks: To be added.
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Namespace
  id: Namespace
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: Namespace
  nameWithType: GenericTypeParameterBuilder.Namespace
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Namespace
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets `null` in all cases.
  remarks: To be added.
  syntax:
    content: public override string Namespace { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType
  id: ReflectedType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: ReflectedType
  nameWithType: GenericTypeParameterBuilder.ReflectedType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the <see cref="T:System.Type"> object that was used to obtain the <xref:System.Reflection.Emit.GenericTypeParameterBuilder>.
  remarks: To be added.
  syntax:
    content: public override Type ReflectedType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)
  id: SetBaseTypeConstraint(System.Type)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: SetBaseTypeConstraint(Type)
  nameWithType: GenericTypeParameterBuilder.SetBaseTypeConstraint(Type)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the base type that a type must inherit in order to be substituted for the type parameter.
  remarks: "To retrieve the base type constraint use the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType%2A> property.  \n  \n Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameter and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method, and get the special constraints by using the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property."
  example:
  - "The following code example creates a generic type with two type parameters, the second of which has a base type constraint, and saves them in the assembly GenericEmitExample1.dll. You can use the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](../Topic/How%20to:%20Define%20a%20Generic%20Type%20with%20Reflection%20Emit.md).  \n  \n [!CODE [EmitGenericType#1](../CodeSnippet/VS_Snippets_CLR/EmitGenericType#1)]"
  syntax:
    content: public void SetBaseTypeConstraint (Type baseTypeConstraint);
    parameters:
    - id: baseTypeConstraint
      type: System.Type
      description: The <see cref="T:System.Type"> that must be inherited by any type that is to be substituted for the type parameter.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: GenericTypeParameterBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(CustomAttributeBuilder)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Set a custom attribute using a custom attribute builder.
  remarks: To be added.
  syntax:
    content: public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: An instance of a helper class that defines the custom attribute.
  overload: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: SetCustomAttribute(ConstructorInfo,Byte[])
  nameWithType: GenericTypeParameterBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets a custom attribute using a specified custom attribute blob.
  remarks: >-
    > [!NOTE]

    >  For details on how to format , see the documentation for Partition II: Metadata Definition and Semantics. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: The constructor for the custom attribute.
    - id: binaryAttribute
      type: System.Byte[]
      description: A byte blob representing the attribute.
  overload: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
  id: SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: SetGenericParameterAttributes(GenericParameterAttributes)
  nameWithType: GenericTypeParameterBuilder.SetGenericParameterAttributes(GenericParameterAttributes)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(GenericParameterAttributes)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.
  remarks: "Special constraints can specify that any type assigned to the generic type parameter must have a default constructor, must be a reference type, or must be a value type.  \n  \n Special constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. To get the special constraints for each type parameter, use the <xref:System.Type.GenericParameterAttributes%2A?displayProperty=fullName> property.  \n  \n The <xref:System.Reflection.GenericParameterAttributes> enumeration values that refer to the variance characteristics of a type parameter are relevant only in languages that support covariance and contravariance, such as Microsoft intermediate language (MSIL). Visual Basic and C# currently do not support covariance and contravariance."
  example:
  - "The following code example creates a generic type with two type parameters, the first of which is constrained to have a default constructor and to be a reference type, and saves them in the assembly GenericEmitExample1.dll. You can use the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](../Topic/How%20to:%20Define%20a%20Generic%20Type%20with%20Reflection%20Emit.md).  \n  \n [!CODE [EmitGenericType#1](../CodeSnippet/VS_Snippets_CLR/EmitGenericType#1)]"
  syntax:
    content: public void SetGenericParameterAttributes (System.Reflection.GenericParameterAttributes genericParameterAttributes);
    parameters:
    - id: genericParameterAttributes
      type: System.Reflection.GenericParameterAttributes
      description: A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes"> values that represent the variance characteristics and special constraints of the generic type parameter.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])
  id: SetInterfaceConstraints(System.Type[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: SetInterfaceConstraints(Type[])
  nameWithType: GenericTypeParameterBuilder.SetInterfaceConstraints(Type[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the interfaces a type must implement in order to be substituted for the type parameter.
  remarks: Interface constraints cannot be retrieved using methods of the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> class. Once you have created the generic type that contains the type parameter, you can use its <xref:System.Type> object to reflect the type parameters and their constraints. To get the type parameters of a completed generic type, use the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. For each type parameter, get the base type constraint and interface constraints by using the <xref:System.Type.GetGenericParameterConstraints%2A?displayProperty=fullName> method.
  example:
  - "The following code example creates a generic type with two type parameters, the second of which has two interface constraints, and saves them in the assembly GenericEmitExample1.dll. You can use the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](../Topic/How%20to:%20Define%20a%20Generic%20Type%20with%20Reflection%20Emit.md).  \n  \n [!CODE [EmitGenericType#1](../CodeSnippet/VS_Snippets_CLR/EmitGenericType#1)]"
  syntax:
    content: public void SetInterfaceConstraints (Type[] interfaceConstraints);
    parameters:
    - id: interfaceConstraints
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects that represent the interfaces a type must implement in order to be substituted for the type parameter.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ToString
  id: ToString
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: ToString()
  nameWithType: GenericTypeParameterBuilder.ToString()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a string representation of the current generic type parameter.
  remarks: To be added.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string that contains the name of the generic type parameter.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle
  id: TypeHandle
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: TypeHandle
  nameWithType: GenericTypeParameterBuilder.TypeHandle
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for incomplete generic type parameters.
  remarks: This property is not supported for incomplete generic type parameters. Retrieve the type parameter from the completed generic type definition and then use reflection on the retrieved type.
  syntax:
    content: public override RuntimeTypeHandle TypeHandle { get; }
    return:
      type: System.RuntimeTypeHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: GenericTypeParameterBuilder.UnderlyingSystemType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the current generic type parameter.
  remarks: To be added.
  syntax:
    content: public override Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Reflection.TypeInfo
  isExternal: false
  name: System.Reflection.TypeInfo
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Assembly
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: Assembly
  nameWithType: GenericTypeParameterBuilder.Assembly
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Assembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: AssemblyQualifiedName
  nameWithType: GenericTypeParameterBuilder.AssemblyQualifiedName
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.BaseType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: BaseType
  nameWithType: GenericTypeParameterBuilder.BaseType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.BaseType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: ContainsGenericParameters
  nameWithType: GenericTypeParameterBuilder.ContainsGenericParameters
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: DeclaringMethod
  nameWithType: GenericTypeParameterBuilder.DeclaringMethod
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: DeclaringType
  nameWithType: GenericTypeParameterBuilder.DeclaringType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: Equals(Object)
  nameWithType: GenericTypeParameterBuilder.Equals(Object)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.FullName
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: FullName
  nameWithType: GenericTypeParameterBuilder.FullName
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.FullName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GenericParameterAttributes
  nameWithType: GenericTypeParameterBuilder.GenericParameterAttributes
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes
- uid: System.Reflection.GenericParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: GenericParameterAttributes
  nameWithType: GenericParameterAttributes
  fullName: System.Reflection.GenericParameterAttributes
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GenericParameterPosition
  nameWithType: GenericTypeParameterBuilder.GenericParameterPosition
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetAttributeFlagsImpl()
  nameWithType: GenericTypeParameterBuilder.GetAttributeFlagsImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl()
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: GenericTypeParameterBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.ParameterModifier
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetConstructors(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetConstructors(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(BindingFlags)
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: GenericTypeParameterBuilder.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: GenericTypeParameterBuilder.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(Type,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetElementType()
  nameWithType: GenericTypeParameterBuilder.GetElementType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetEvent(String,BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetEvent(String,BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(String,BindingFlags)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetEvents()
  nameWithType: GenericTypeParameterBuilder.GetEvents()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents()
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo[]
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetEvents(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetEvents(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(BindingFlags)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetField(String,BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetFields(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetGenericArguments()
  nameWithType: GenericTypeParameterBuilder.GetGenericArguments()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetGenericTypeDefinition()
  nameWithType: GenericTypeParameterBuilder.GetGenericTypeDefinition()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetHashCode()
  nameWithType: GenericTypeParameterBuilder.GetHashCode()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetInterface(String,Boolean)
  nameWithType: GenericTypeParameterBuilder.GetInterface(String,Boolean)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(String,Boolean)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetInterfaceMap(Type)
  nameWithType: GenericTypeParameterBuilder.GetInterfaceMap(Type)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(Type)
- uid: System.Reflection.InterfaceMapping
  parent: System.Reflection
  isExternal: false
  name: InterfaceMapping
  nameWithType: InterfaceMapping
  fullName: System.Reflection.InterfaceMapping
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetInterfaces()
  nameWithType: GenericTypeParameterBuilder.GetInterfaces()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetMember(String,MemberTypes,BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetMember(String,MemberTypes,BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(String,MemberTypes,BindingFlags)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetMembers(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(BindingFlags)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  nameWithType: GenericTypeParameterBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(String,BindingFlags,Binder,CallingConventions,Type[],ParameterModifier[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.ParameterModifier
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetMethods(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetNestedType(String,BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetNestedType(String,BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(String,BindingFlags)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetNestedTypes(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetNestedTypes(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(BindingFlags)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: GenericTypeParameterBuilder.GetProperties(BindingFlags)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(BindingFlags)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: GenericTypeParameterBuilder.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.ParameterModifier
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GUID
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: GUID
  nameWithType: GenericTypeParameterBuilder.GUID
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.GUID
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: HasElementTypeImpl()
  nameWithType: GenericTypeParameterBuilder.HasElementTypeImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: GenericTypeParameterBuilder.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Reflection.ParameterModifier
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsArrayImpl()
  nameWithType: GenericTypeParameterBuilder.IsArrayImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsAssignableFrom(TypeInfo)
  nameWithType: GenericTypeParameterBuilder.IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(TypeInfo)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsAssignableFrom(Type)
  nameWithType: GenericTypeParameterBuilder.IsAssignableFrom(Type)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(Type)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsByRefImpl()
  nameWithType: GenericTypeParameterBuilder.IsByRefImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsCOMObjectImpl()
  nameWithType: GenericTypeParameterBuilder.IsCOMObjectImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsConstructedGenericType
  nameWithType: GenericTypeParameterBuilder.IsConstructedGenericType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsDefined(Type,Boolean)
  nameWithType: GenericTypeParameterBuilder.IsDefined(Type,Boolean)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(Type,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsGenericParameter
  nameWithType: GenericTypeParameterBuilder.IsGenericParameter
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsGenericType
  nameWithType: GenericTypeParameterBuilder.IsGenericType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsGenericTypeDefinition
  nameWithType: GenericTypeParameterBuilder.IsGenericTypeDefinition
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsPointerImpl()
  nameWithType: GenericTypeParameterBuilder.IsPointerImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsPrimitiveImpl()
  nameWithType: GenericTypeParameterBuilder.IsPrimitiveImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsSubclassOf(Type)
  nameWithType: GenericTypeParameterBuilder.IsSubclassOf(Type)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(Type)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: IsValueTypeImpl()
  nameWithType: GenericTypeParameterBuilder.IsValueTypeImpl()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: MakeArrayType()
  nameWithType: GenericTypeParameterBuilder.MakeArrayType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: MakeArrayType(Int32)
  nameWithType: GenericTypeParameterBuilder.MakeArrayType(Int32)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(Int32)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: MakeByRefType()
  nameWithType: GenericTypeParameterBuilder.MakeByRefType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: MakeGenericType(Type[])
  nameWithType: GenericTypeParameterBuilder.MakeGenericType(Type[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(Type[])
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: MakePointerType()
  nameWithType: GenericTypeParameterBuilder.MakePointerType()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Module
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: Module
  nameWithType: GenericTypeParameterBuilder.Module
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Module
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Name
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: Name
  nameWithType: GenericTypeParameterBuilder.Name
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.Namespace
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: Namespace
  nameWithType: GenericTypeParameterBuilder.Namespace
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.Namespace
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: ReflectedType
  nameWithType: GenericTypeParameterBuilder.ReflectedType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: SetBaseTypeConstraint(Type)
  nameWithType: GenericTypeParameterBuilder.SetBaseTypeConstraint(Type)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: GenericTypeParameterBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(CustomAttributeBuilder)
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: SetCustomAttribute(ConstructorInfo,Byte[])
  nameWithType: GenericTypeParameterBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(ConstructorInfo,Byte[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: SetGenericParameterAttributes(GenericParameterAttributes)
  nameWithType: GenericTypeParameterBuilder.SetGenericParameterAttributes(GenericParameterAttributes)
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(GenericParameterAttributes)
- uid: System.Reflection.GenericParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: GenericParameterAttributes
  nameWithType: GenericParameterAttributes
  fullName: System.Reflection.GenericParameterAttributes
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: SetInterfaceConstraints(Type[])
  nameWithType: GenericTypeParameterBuilder.SetInterfaceConstraints(Type[])
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(Type[])
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.ToString
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: ToString()
  nameWithType: GenericTypeParameterBuilder.ToString()
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: TypeHandle
  nameWithType: GenericTypeParameterBuilder.TypeHandle
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: GenericTypeParameterBuilder.UnderlyingSystemType
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes*
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  nameWithType: GenericTypeParameterBuilder.
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents*
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  nameWithType: GenericTypeParameterBuilder.
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom*
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  nameWithType: GenericTypeParameterBuilder.
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType*
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  nameWithType: GenericTypeParameterBuilder.
- uid: System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute*
  parent: System.Reflection.Emit.GenericTypeParameterBuilder
  isExternal: false
  nameWithType: GenericTypeParameterBuilder.
