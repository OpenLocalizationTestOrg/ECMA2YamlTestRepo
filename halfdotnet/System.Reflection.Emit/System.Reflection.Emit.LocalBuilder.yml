### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.LocalBuilder
  id: LocalBuilder
  children:
  - System.Reflection.Emit.LocalBuilder.IsPinned
  - System.Reflection.Emit.LocalBuilder.LocalIndex
  - System.Reflection.Emit.LocalBuilder.LocalType
  - System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)
  - System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)
  - System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: LocalBuilder
  nameWithType: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
  type: Class
  summary: Represents a local variable within a method or constructor.
  remarks: A `LocalBuilder` object can be defined using the <xref:System.Reflection.Emit.ILGenerator.DeclareLocal%2A> method.
  example:
  - "The following example creates a `static` method (`Shared` in Visual Basic) named `Function1` that returns a string and has a parameter of type <xref:System.Int32>. In the body of the method, the code example creates LocalBuilder objects representing two local variables, and sets symbol information for the local variables. The method does not do anything significant, but the method body demonstrates storing a parameter to a local variable, storing a literal string to a local variable, and loading a local variable.  \n  \n [!CODE [LocalBuilder_Sample_SetLocalSymInfo#1](../CodeSnippet/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._LocalBuilder))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class LocalBuilder : System.Reflection.LocalVariableInfo, System.Runtime.InteropServices._LocalBuilder
  inheritance:
  - System.Object
  - System.Reflection.LocalVariableInfo
  implements:
  - System.Runtime.InteropServices._LocalBuilder
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Reflection.LocalVariableInfo.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.LocalBuilder.IsPinned
  id: IsPinned
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  name: IsPinned
  nameWithType: LocalBuilder.IsPinned
  fullName: System.Reflection.Emit.LocalBuilder.IsPinned
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the object referred to by the local variable is pinned in memory.
  remarks: In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.
  syntax:
    content: public override bool IsPinned { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.LocalBuilder.LocalIndex
  id: LocalIndex
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  name: LocalIndex
  nameWithType: LocalBuilder.LocalIndex
  fullName: System.Reflection.Emit.LocalBuilder.LocalIndex
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the zero-based index of the local variable within the method body.
  remarks: Index numbers are assigned to local variables in the order in which they are declared or emitted, beginning with zero.
  syntax:
    content: public override int LocalIndex { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.LocalBuilder.LocalType
  id: LocalType
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  name: LocalType
  nameWithType: LocalBuilder.LocalType
  fullName: System.Reflection.Emit.LocalBuilder.LocalType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the type of the local variable.
  remarks: ''
  example:
  - "The following code sample illustrates the use of `LocalType`. This code is part of a larger example for the <xref:System.Reflection.Emit.LocalBuilder> class.  \n  \n [!CODE [LocalBuilder_Sample_SetLocalSymInfo#2](../CodeSnippet/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo#2)]"
  syntax:
    content: public override Type LocalType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)
  id: SetLocalSymInfo(System.String)
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  name: SetLocalSymInfo(String)
  nameWithType: LocalBuilder.SetLocalSymInfo(String)
  fullName: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the name of this local variable.
  remarks: The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types. It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class.
  example:
  - "The following code sample illustrates the use of the SetLocalSymInfo method. This code is part of a larger example for the <xref:System.Reflection.Emit.LocalBuilder> class.  \n  \n [!CODE [LocalBuilder_Sample_SetLocalSymInfo#2](../CodeSnippet/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo#2)]"
  syntax:
    content: public void SetLocalSymInfo (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of the local variable.
  overload: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)
  id: SetLocalSymInfo(System.String,System.Int32,System.Int32)
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  name: SetLocalSymInfo(String,Int32,Int32)
  nameWithType: LocalBuilder.SetLocalSymInfo(String,Int32,Int32)
  fullName: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Sets the name and lexical scope of this local variable.
  remarks: The <xref:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo%2A> method is supported for methods defined in dynamic types. It is not supported for dynamic methods defined using the <xref:System.Reflection.Emit.DynamicMethod> class.
  example:
  - "The following code sample illustrates the use of the SetLocalSymInfo method. This code is part of a larger example for the <xref:System.Reflection.Emit.LocalBuilder> class.  \n  \n [!CODE [LocalBuilder_Sample_SetLocalSymInfo#2](../CodeSnippet/VS_Snippets_CLR/LocalBuilder_Sample_SetLocalSymInfo#2)]"
  syntax:
    content: public void SetLocalSymInfo (string name, int startOffset, int endOffset);
    parameters:
    - id: name
      type: System.String
      description: The name of the local variable.
    - id: startOffset
      type: System.Int32
      description: The beginning offset of the lexical scope of the local variable.
    - id: endOffset
      type: System.Int32
      description: The ending offset of the lexical scope of the local variable.
  overload: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _LocalBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array which receives the IDs corresponding to the names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _LocalBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(UInt32)
  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _LocalBuilder.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_LocalBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.LocalBuilder
  langs:
  - csharp
  name: System.Runtime.InteropServices._LocalBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _LocalBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Reflection.LocalVariableInfo
  isExternal: false
  name: System.Reflection.LocalVariableInfo
- uid: System.Reflection.Emit.LocalBuilder.IsPinned
  parent: System.Reflection.Emit.LocalBuilder
  isExternal: false
  name: IsPinned
  nameWithType: LocalBuilder.IsPinned
  fullName: System.Reflection.Emit.LocalBuilder.IsPinned
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.LocalBuilder.LocalIndex
  parent: System.Reflection.Emit.LocalBuilder
  isExternal: false
  name: LocalIndex
  nameWithType: LocalBuilder.LocalIndex
  fullName: System.Reflection.Emit.LocalBuilder.LocalIndex
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.LocalBuilder.LocalType
  parent: System.Reflection.Emit.LocalBuilder
  isExternal: false
  name: LocalType
  nameWithType: LocalBuilder.LocalType
  fullName: System.Reflection.Emit.LocalBuilder.LocalType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)
  parent: System.Reflection.Emit.LocalBuilder
  isExternal: false
  name: SetLocalSymInfo(String)
  nameWithType: LocalBuilder.SetLocalSymInfo(String)
  fullName: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)
  parent: System.Reflection.Emit.LocalBuilder
  isExternal: false
  name: SetLocalSymInfo(String,Int32,Int32)
  nameWithType: LocalBuilder.SetLocalSymInfo(String,Int32,Int32)
  fullName: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(String,Int32,Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.LocalBuilder
  isExternal: false
  name: System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.LocalBuilder
  isExternal: false
  name: System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Emit.LocalBuilder
  isExternal: false
  name: System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(UInt32)
  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.Emit.LocalBuilder.System#Runtime#InteropServices#_LocalBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Emit.LocalBuilder
  isExternal: false
  name: System.Runtime.InteropServices._LocalBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: LocalBuilder.System.Runtime.InteropServices._LocalBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.Emit.LocalBuilder.SetLocalSymInfo*
  parent: System.Reflection.Emit.LocalBuilder
  isExternal: false
  nameWithType: LocalBuilder.
