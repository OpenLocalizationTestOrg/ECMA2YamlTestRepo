### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicMethod
  id: DynamicMethod
  children:
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.Attributes
  - System.Reflection.Emit.DynamicMethod.CallingConvention
  - System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  - System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)
  - System.Reflection.Emit.DynamicMethod.DeclaringType
  - System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  - System.Reflection.Emit.DynamicMethod.GetBaseDefinition
  - System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)
  - System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.GetDynamicILInfo
  - System.Reflection.Emit.DynamicMethod.GetILGenerator
  - System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  - System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags
  - System.Reflection.Emit.DynamicMethod.GetParameters
  - System.Reflection.Emit.DynamicMethod.InitLocals
  - System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.IsSecurityCritical
  - System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical
  - System.Reflection.Emit.DynamicMethod.IsSecurityTransparent
  - System.Reflection.Emit.DynamicMethod.MethodHandle
  - System.Reflection.Emit.DynamicMethod.Module
  - System.Reflection.Emit.DynamicMethod.Name
  - System.Reflection.Emit.DynamicMethod.ReflectedType
  - System.Reflection.Emit.DynamicMethod.ReturnParameter
  - System.Reflection.Emit.DynamicMethod.ReturnType
  - System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes
  - System.Reflection.Emit.DynamicMethod.ToString
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
  type: Class
  summary: Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.
  remarks: "You can use the DynamicMethod class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method. The executable code created by the just-in-time (JIT) compiler is reclaimed when the DynamicMethod object is reclaimed. Dynamic methods are the most efficient way to generate and execute small amounts of code.  \n  \n A dynamic method can be anonymously hosted, or it can belogically associated with a module or with a type.  \n  \n-   If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code. By default, it does not have access to any non-public data. An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method. For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](../Topic/Walkthrough:%20Emitting%20Code%20in%20Partial%20Trust%20Scenarios.md).  \n  \n-   If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module. It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types. You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag> flag can be satisfied by the call stack that includes your code. If the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.  \n  \n    > [!NOTE]\n    >  When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.  \n  \n-   If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level. In addition, JIT visibility checks can be skipped. This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly. You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag> and <xref:System.Security.Permissions.ReflectionPermissionFlag> flags.  \n  \n The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag> flag is granted.  \n  \n||||  \n|-|-|-|  \n||Without <xref:System.Security.Permissions.ReflectionPermissionFlag>|With <xref:System.Security.Permissions.ReflectionPermissionFlag>|  \n|Without skipping JIT visibility checks|Public members of public types in any assembly.|Public members of public types in any assembly.|  \n|Skipping JIT visibility checks, with restrictions|Public members of public types in any assembly.|All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.|  \n  \n> [!NOTE]\n>  Prior to the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set. Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag>. Such libraries require careful security review because coding errors could result in security holes. The [!INCLUDE[net_v20SP1_short](../../add/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation. That is, the generated code has no more permissions than the assembly that emits it. This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag>, which simplifies the task of writing a secure library. To use this feature, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later.  \n  \n The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.  \n  \n||||  \n|-|-|-|  \n||Associated with module|Associated with type|  \n|Without skipping JIT visibility checks|Public and internal members of public, internal, and private types in the module.<br /><br /> Public members of public types in any assembly.|All members of the associated type. Public and internal members of all the other types in the module.<br /><br /> Public members of public types in any assembly.|  \n|Skipping JIT visibility checks|All members of all types in any assembly.|All members of all types in any assembly.|  \n  \n A dynamic method that is associated with a module has the permissions of that module. A dynamic method that is associated with a type has the permissions of the module containing that type.  \n  \n Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging. Custom attributes are not supported on dynamic methods or their parameters.  \n  \n Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](../../add/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance. An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.  \n  \n> [!NOTE]\n>  In the [!INCLUDE[dnprdnlong](../../add/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping. This limitation might be removed in a future version. You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.  \n  \n## Verification  \n The following list summarizes the conditions under which dynamic methods can contain unverifiable code. (For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)  \n  \n-   A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification. For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime. If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.  \n  \n-   If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand. The demand succeeds only if the dynamic method is executed by fully trusted code. See [Security-Transparent Code, Level 1](../Topic/Security-Transparent%20Code,%20Level%201.md).  \n  \n-   If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand. See [Security-Transparent Code, Level 2](../Topic/Security-Transparent%20Code,%20Level%202.md).  \n  \n-   An anonymously hosted dynamic method that contains unverifiable code always throws an exception. It can never skip verification, even if it is created and executed by fully trusted code.  \n  \n The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked. If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown. If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>."
  example:
  - "The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.  \n  \n [!CODE [Reflection.DynamicMethod.All#1](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class DynamicMethod : System.Reflection.MethodInfo
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  - System.Reflection.MethodBase
  - System.Reflection.MethodInfo
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodBase.ContainsGenericParameters
  - System.Reflection.MethodBase.GetCurrentMethod
  - System.Reflection.MethodBase.GetMethodBody
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  - System.Reflection.MethodBase.IsAbstract
  - System.Reflection.MethodBase.IsAssembly
  - System.Reflection.MethodBase.IsConstructor
  - System.Reflection.MethodBase.IsFamily
  - System.Reflection.MethodBase.IsFamilyAndAssembly
  - System.Reflection.MethodBase.IsFamilyOrAssembly
  - System.Reflection.MethodBase.IsFinal
  - System.Reflection.MethodBase.IsGenericMethod
  - System.Reflection.MethodBase.IsGenericMethodDefinition
  - System.Reflection.MethodBase.IsHideBySig
  - System.Reflection.MethodBase.IsPrivate
  - System.Reflection.MethodBase.IsPublic
  - System.Reflection.MethodBase.IsSpecialName
  - System.Reflection.MethodBase.IsStatic
  - System.Reflection.MethodBase.IsVirtual
  - System.Reflection.MethodBase.MethodImplementationFlags
  - System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  - System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual
  - System.Reflection.MethodInfo.Equals(System.Object)
  - System.Reflection.MethodInfo.GetGenericArguments
  - System.Reflection.MethodInfo.GetGenericMethodDefinition
  - System.Reflection.MethodInfo.GetHashCode
  - System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  - System.Reflection.MethodInfo.MemberType
  - System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  - System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])
  id: '#ctor(System.String,System.Type,System.Type[])'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: DynamicMethod(String,Type,Type[])
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[])
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.
  remarks: "The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.  \n  \n This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method. That is, the code in the dynamic method has access to public methods of public classes. Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic). To create a dynamic method that has restricted ability to skip JIT visibility checks, use the [DynamicMethod(String, Type, Type\\[\\], Boolean)](assetId:///M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)?qualifyHint=False&autoUpgrade=False) constructor.  \n  \n When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.  \n  \n This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and the calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  This constructor was introduced in the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes);
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.
    - id: returnType
      type: System.Type
      description: A <see cref="T:System.Type"> object that specifies the return type of the dynamic method, or `null` if the method has no return type.
    - id: parameterTypes
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)
  id: '#ctor(System.String,System.Type,System.Type[],System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: DynamicMethod(String,Type,Type[],Boolean)
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[],Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[],Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.
  remarks: "The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.  \n  \n Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic). This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.  \n  \n Specify `true` for  if your dynamic method has to access types or members that are `private`, `protected`, or `internal`. This gives the dynamic method restricted access to these members. That is, the members can be accessed only if the following conditions are met:  \n  \n-   The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.  \n  \n-   The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. This is always true when the code is executed with full trust. For partially trusted code, it is true only if the host explicitly grants the permission.  \n  \n    > [!IMPORTANT]\n    >  If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called. No special permissions are required to emit the dynamic method.  \n  \n For example, a dynamic method that is created with  set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access. If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.  \n  \n If  is `false`, JIT visibility checks are enforced. The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.  \n  \n When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.  \n  \n This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and the calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  This constructor was introduced in the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.
    - id: returnType
      type: System.Type
      description: A <see cref="T:System.Type"> object that specifies the return type of the dynamic method, or `null` if the method has no return type.
    - id: parameterTypes
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.
    - id: restrictedSkipVisibility
      type: System.Boolean
      description: '`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)
  id: '#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: DynamicMethod(String,Type,Type[],Module)
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[],Module)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[],Module)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.
  remarks: "This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>, and does not skip just-in-time (JIT) visibility checks.  \n  \n The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module .  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true:  is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the [Invoke(Object, BindingFlags, Binder, Object\\[\\], CultureInfo)](assetId:///M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)?qualifyHint=False&autoUpgrade=False) method.  \n  \n [!CODE [Reflection.DynamicMethod.ctor1#1](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1#1)]"
  syntax:
    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.
    - id: returnType
      type: System.Type
      description: A <see cref="T:System.Type"> object that specifies the return type of the dynamic method, or `null` if the method has no return type.
    - id: parameterTypes
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.
    - id: m
      type: System.Reflection.Module
      description: A <see cref="T:System.Reflection.Module"> representing the module with which the dynamic method is to be logically associated.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)
  id: '#ctor(System.String,System.Type,System.Type[],System.Type)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: DynamicMethod(String,Type,Type[],Type)
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[],Type)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[],Type)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.
  remarks: "The dynamic method created with this constructor has access to all members of the type , and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains .  \n  \n This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>, and does not skip just-in-time (JIT) visibility checks.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true:  is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type. This association gives it access to the private members of that type.  \n  \n The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.  \n  \n The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.  \n  \n> [!NOTE]\n>  In general, changing the internal fields of classes is not good object-oriented coding practice.  \n  \n The example code creates an instance of `Example` and then creates two delegates. The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method. The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`). This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate. Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.  \n  \n> [!NOTE]\n>  This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](../../add/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=fullName> method. For more information, see the <xref:System.Delegate> class.  \n  \n The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate. Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`. The changes in the values of the internal field are displayed after each call. Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.  \n  \n [!CODE [Reflection.DynamicMethod.ClosedOver#1](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver#1)]"
  syntax:
    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.
    - id: returnType
      type: System.Type
      description: A <see cref="T:System.Type"> object that specifies the return type of the dynamic method, or `null` if the method has no return type.
    - id: parameterTypes
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.
    - id: owner
      type: System.Type
      description: A <see cref="T:System.Type"> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  id: '#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: DynamicMethod(String,Type,Type[],Module,Boolean)
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[],Module,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[],Module,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.
  remarks: "This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \n  \n The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module . Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true:  is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.
    - id: returnType
      type: System.Type
      description: A <see cref="T:System.Type"> object that specifies the return type of the dynamic method, or `null` if the method has no return type.
    - id: parameterTypes
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.
    - id: m
      type: System.Reflection.Module
      description: A <see cref="T:System.Reflection.Module"> representing the module with which the dynamic method is to be logically associated.
    - id: skipVisibility
      type: System.Boolean
      description: '`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)
  id: '#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: DynamicMethod(String,Type,Type[],Type,Boolean)
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[],Type,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[],Type,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.
  remarks: "The dynamic method created with this constructor has access to all members of the type , and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains . Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  \n  \n This constructor specifies method attributes <xref:System.Reflection.MethodAttributes?displayProperty=fullName> and <xref:System.Reflection.MethodAttributes?displayProperty=fullName>, and calling convention <xref:System.Reflection.CallingConventions?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true:  is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.
    - id: returnType
      type: System.Type
      description: A <see cref="T:System.Type"> object that specifies the return type of the dynamic method, or `null` if the method has no return type.
    - id: parameterTypes
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.
    - id: owner
      type: System.Type
      description: A <see cref="T:System.Type"> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.
    - id: skipVisibility
      type: System.Boolean
      description: '`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  id: '#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Module,Boolean)
  nameWithType: DynamicMethod.DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Module,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Module,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.
  remarks: "The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module .  \n  \n Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well. This is useful, for example, when writing code to serialize objects.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true:  is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: A bitwise combination of <see cref="T:System.Reflection.MethodAttributes"> values that specifies the attributes of the dynamic method. The only combination allowed is <see cref="T:System.Reflection.MethodAttributes"> and <see cref="T:System.Reflection.MethodAttributes">.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention for the dynamic method. Must be <see cref="T:System.Reflection.CallingConventions">.
    - id: returnType
      type: System.Type
      description: A <see cref="T:System.Type"> object that specifies the return type of the dynamic method, or `null` if the method has no return type.
    - id: parameterTypes
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.
    - id: m
      type: System.Reflection.Module
      description: To be added.
    - id: skipVisibility
      type: System.Boolean
      description: '`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)
  id: '#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type,Boolean)
  nameWithType: DynamicMethod.DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.
  remarks: "The dynamic method is global to the module that contains the type . It has access to all members of the type .  \n  \n The dynamic method created with this constructor has access to all members of the type , and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains . Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.  \n  \n> [!NOTE]\n>  For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag if the following conditions are both true:  is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag has failed. If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic method. This can be a zero-length string, but it cannot be `null`.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: A bitwise combination of <see cref="T:System.Reflection.MethodAttributes"> values that specifies the attributes of the dynamic method. The only combination allowed is <see cref="T:System.Reflection.MethodAttributes"> and <see cref="T:System.Reflection.MethodAttributes">.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention for the dynamic method. Must be <see cref="T:System.Reflection.CallingConventions">.
    - id: returnType
      type: System.Type
      description: A <see cref="T:System.Type"> object that specifies the return type of the dynamic method, or `null` if the method has no return type.
    - id: parameterTypes
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects specifying the types of the parameters of the dynamic method, or `null` if the method has no parameters.
    - id: owner
      type: System.Type
      description: A <see cref="T:System.Type"> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.
    - id: skipVisibility
      type: System.Boolean
      description: '`true` to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.Attributes
  id: Attributes
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: Attributes
  nameWithType: DynamicMethod.Attributes
  fullName: System.Reflection.Emit.DynamicMethod.Attributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the attributes specified when the dynamic method was created.
  remarks: Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes> and <xref:System.Reflection.MethodAttributes>.
  example:
  - "The following code example displays the method attributes of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#21](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#21)]"
  syntax:
    content: public override System.Reflection.MethodAttributes Attributes { get; }
    return:
      type: System.Reflection.MethodAttributes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.CallingConvention
  id: CallingConvention
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: CallingConvention
  nameWithType: DynamicMethod.CallingConvention
  fullName: System.Reflection.Emit.DynamicMethod.CallingConvention
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the calling convention specified when the dynamic method was created.
  remarks: Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions>.
  example:
  - "The following code example displays the calling convention of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#22](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#22)]"
  syntax:
    content: public override System.Reflection.CallingConventions CallingConvention { get; }
    return:
      type: System.Reflection.CallingConventions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  id: CreateDelegate(System.Type)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: CreateDelegate(Type)
  nameWithType: DynamicMethod.CreateDelegate(Type)
  fullName: System.Reflection.Emit.DynamicMethod.CreateDelegate(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Completes the dynamic method and creates a delegate that can be used to execute it.
  remarks: "Calling the CreateDelegate method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  \n  \n To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object. If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body."
  example:
  - "The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.  \n  \n [!CODE [Reflection.DynamicMethod.ctor1#1](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1#1)]"
  syntax:
    content: public override sealed Delegate CreateDelegate (Type delegateType);
    parameters:
    - id: delegateType
      type: System.Type
      description: A delegate type whose signature matches that of the dynamic method.
    return:
      type: System.Delegate
      description: A delegate of the specified type, which can be used to execute the dynamic method.
  overload: System.Reflection.Emit.DynamicMethod.CreateDelegate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)
  id: CreateDelegate(System.Type,System.Object)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: CreateDelegate(Type,Object)
  nameWithType: DynamicMethod.CreateDelegate(Type,Object)
  fullName: System.Reflection.Emit.DynamicMethod.CreateDelegate(Type,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.
  remarks: "This method overload creates a delegate bound to a particular object. Such a delegate is said to be closed over its first argument. Although the method is static, it acts as if it were an instance method; the instance is .  \n  \n This method overload requires  to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).  The signature of  has all the parameters of the dynamic method except the first. For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then  has the parameters <xref:System.Int32> and <xref:System.Byte>;  is of type <xref:System.String>.  \n  \n Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  \n  \n To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object. If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body."
  example:
  - "The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.  \n  \n The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.  \n  \n The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.  \n  \n> [!NOTE]\n>  In general, changing the internal fields of classes is not good object-oriented coding practice.  \n  \n The example code creates an instance of `Example` and then creates two delegates. The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method. The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`). This delegate is created using the CreateDelegate method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate. Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.  \n  \n> [!NOTE]\n>  This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=fullName> method. For more information, see the <xref:System.Delegate> class.  \n  \n The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate. Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`. The changes in the values of the internal field are displayed after each call. Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.  \n  \n [!CODE [Reflection.DynamicMethod.ClosedOver#1](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver#1)]"
  syntax:
    content: public override sealed Delegate CreateDelegate (Type delegateType, object target);
    parameters:
    - id: delegateType
      type: System.Type
      description: A delegate type whose signature matches that of the dynamic method, minus the first parameter.
    - id: target
      type: System.Object
      description: An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method.
    return:
      type: System.Delegate
      description: A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.
  overload: System.Reflection.Emit.DynamicMethod.CreateDelegate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: DeclaringType
  nameWithType: DynamicMethod.DeclaringType
  fullName: System.Reflection.Emit.DynamicMethod.DeclaringType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the type that declares the method, which is always `null` for dynamic methods.
  remarks: This property always returns `null` for dynamic methods. Even when a dynamic method is logically associated with a type, it is not declared by the type.
  example:
  - "The following code example displays the declaring type of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#23](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#23)]"
  syntax:
    content: public override Type DeclaringType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  id: DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: DefineParameter(Int32,ParameterAttributes,String)
  nameWithType: DynamicMethod.DefineParameter(Int32,ParameterAttributes,String)
  fullName: System.Reflection.Emit.DynamicMethod.DefineParameter(Int32,ParameterAttributes,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Defines a parameter of the dynamic method.
  remarks: "If  is 0, the DefineParameter method refers to the return value. Setting parameter information has no effect on the return value.  \n  \n If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the DefineParameter method has no effect. No exception is thrown."
  example:
  - "The following code example shows how to define parameter information for a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#33](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#33)]"
  syntax:
    content: public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);
    parameters:
    - id: position
      type: System.Int32
      description: The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.
    - id: attributes
      type: System.Reflection.ParameterAttributes
      description: A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes"> values that specifies the attributes of the parameter.
    - id: parameterName
      type: System.String
      description: The name of the parameter. The name can be a zero-length string.
    return:
      type: System.Reflection.Emit.ParameterBuilder
      description: Always returns `null`.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.GetBaseDefinition
  id: GetBaseDefinition
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: GetBaseDefinition()
  nameWithType: DynamicMethod.GetBaseDefinition()
  fullName: System.Reflection.Emit.DynamicMethod.GetBaseDefinition()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the base implementation for the method.
  remarks: This method always returns the current `DynamicMethod` object.
  syntax:
    content: public override System.Reflection.MethodInfo GetBaseDefinition ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: The base implementation of the method.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: DynamicMethod.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns all the custom attributes defined for the method.
  remarks: "For dynamic methods, specifying `true` for  has no effect, because the method is not declared in a type.  \n  \n> [!NOTE]\n>  Custom attributes are not currently supported on dynamic methods. The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method."
  syntax:
    content: public override object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: '`true` to search the method''s inheritance chain to find the custom attributes; `false` to check only the current method.'
    return:
      type: System.Object[]
      description: An array of objects representing all the custom attributes of the method.
  overload: System.Reflection.Emit.DynamicMethod.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: DynamicMethod.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the custom attributes of the specified type that have been applied to the method.
  remarks: "For dynamic methods, specifying `true` for  has no effect, because the method is not declared in a type.  \n  \n> [!NOTE]\n>  Custom attributes are not currently supported on dynamic methods. The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method."
  syntax:
    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: A <see cref="T:System.Type"> representing the type of custom attribute to return.
    - id: inherit
      type: System.Boolean
      description: '`true` to search the method''s inheritance chain to find the custom attributes; `false` to check only the current method.'
    return:
      type: System.Object[]
      description: An array of objects representing the attributes of the method that are of type  or derive from type .
  overload: System.Reflection.Emit.DynamicMethod.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.GetDynamicILInfo
  id: GetDynamicILInfo
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: GetDynamicILInfo()
  nameWithType: DynamicMethod.GetDynamicILInfo()
  fullName: System.Reflection.Emit.DynamicMethod.GetDynamicILInfo()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo"> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.
  remarks: The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.
  syntax:
    content: public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();
    parameters: []
    return:
      type: System.Reflection.Emit.DynamicILInfo
      description: A <see cref="T:System.Reflection.Emit.DynamicILInfo"> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator
  id: GetILGenerator
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: GetILGenerator()
  nameWithType: DynamicMethod.GetILGenerator()
  fullName: System.Reflection.Emit.DynamicMethod.GetILGenerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.
  remarks: "After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored. No exception is thrown.  \n  \n> [!NOTE]\n>  There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \"Verification\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>."
  example:
  - "The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.  \n  \n [!CODE [Reflection.DynamicMethod.ctor1#1](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1#1)]"
  syntax:
    content: public System.Reflection.Emit.ILGenerator GetILGenerator ();
    parameters: []
    return:
      type: System.Reflection.Emit.ILGenerator
      description: An <see cref="T:System.Reflection.Emit.ILGenerator"> object for the method.
  overload: System.Reflection.Emit.DynamicMethod.GetILGenerator*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  id: GetILGenerator(System.Int32)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: GetILGenerator(Int32)
  nameWithType: DynamicMethod.GetILGenerator(Int32)
  fullName: System.Reflection.Emit.DynamicMethod.GetILGenerator(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.
  remarks: "After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored. No exception is thrown.  \n  \n> [!NOTE]\n>  There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \"Verification\" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>."
  example:
  - "The following code example demonstrates this method overload. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#2](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#2)]"
  syntax:
    content: public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);
    parameters:
    - id: streamSize
      type: System.Int32
      description: The size of the MSIL stream, in bytes.
    return:
      type: System.Reflection.Emit.ILGenerator
      description: An <see cref="T:System.Reflection.Emit.ILGenerator"> object for the method, with the specified MSIL stream size.
  overload: System.Reflection.Emit.DynamicMethod.GetILGenerator*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags
  id: GetMethodImplementationFlags
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: GetMethodImplementationFlags()
  nameWithType: DynamicMethod.GetMethodImplementationFlags()
  fullName: System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the implementation flags for the method.
  remarks: Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes> and <xref:System.Reflection.MethodImplAttributes>.
  syntax:
    content: public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();
    parameters: []
    return:
      type: System.Reflection.MethodImplAttributes
      description: A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes"> values representing the implementation flags for the method.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.GetParameters
  id: GetParameters
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: GetParameters()
  nameWithType: DynamicMethod.GetParameters()
  fullName: System.Reflection.Emit.DynamicMethod.GetParameters()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the parameters of the dynamic method.
  remarks: The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only. Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.
  example:
  - "The following code example displays the parameters of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#34](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#34)]"
  syntax:
    content: public override System.Reflection.ParameterInfo[] GetParameters ();
    parameters: []
    return:
      type: System.Reflection.ParameterInfo[]
      description: An array of <see cref="T:System.Reflection.ParameterInfo"> objects that represent the parameters of the dynamic method.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.InitLocals
  id: InitLocals
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: InitLocals
  nameWithType: DynamicMethod.InitLocals
  fullName: System.Reflection.Emit.DynamicMethod.InitLocals
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets or sets a value indicating whether the local variables in the method are zero-initialized.
  remarks: If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables. If it is set to `false`, local variables are not initialized and the generated code is unverifiable.
  example:
  - "The following code example displays the InitLocals property of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#24](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#24)]"
  syntax:
    content: public bool InitLocals { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  id: Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  nameWithType: DynamicMethod.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  fullName: System.Reflection.Emit.DynamicMethod.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.
  remarks: "In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.  \n  \n Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the Invoke method.  \n  \n Calling the Invoke method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.  \n  \n All dynamic methods are static, so the  parameter is always ignored. To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.  \n  \n If the dynamic method has no parameters, the value of  should be `null`. Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.  \n  \n> [!NOTE]\n>  This method overload is called by the [Invoke(Object, Object\\[\\])](assetId:///M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])?qualifyHint=False&autoUpgrade=False) method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.  \n  \n This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method. For example, no demands are made for anonymously hosted dynamic methods that are created with the  parameter set to `false`. On the other hand, if you create a method with  set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.  \n  \n> [!NOTE]\n>  Prior to the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag> flag."
  example:
  - "The following code example invokes a dynamic method with exact binding, using the US-English culture. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#4](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#4)]"
  syntax:
    content: public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
    parameters:
    - id: obj
      type: System.Object
      description: This parameter is ignored for dynamic methods, because they are static. Specify `null`.
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: A bitwise combination of <see cref="T:System.Reflection.BindingFlags"> values.
    - id: binder
      type: System.Reflection.Binder
      description: A <see cref="T:System.Reflection.Binder"> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <xref:System.Reflection.MemberInfo> objects through reflection. If  is `null`, the default binder is used. For more details, see <see cref="T:System.Reflection.Binder">.
    - id: parameters
      type: System.Object[]
      description: An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this parameter should be `null`.
    - id: culture
      type: System.Globalization.CultureInfo
      description: An instance of <see cref="T:System.Globalization.CultureInfo"> used to govern the coercion of types. If this is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used. For example, this information is needed to correctly convert a <xref:System.String> that represents 1000 to a <xref:System.Double> value, because 1000 is represented differently by different cultures.
    return:
      type: System.Object
      description: A <see cref="T:System.Object"> containing the return value of the invoked method.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: IsDefined(Type,Boolean)
  nameWithType: DynamicMethod.IsDefined(Type,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.IsDefined(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Indicates whether the specified custom attribute type is defined.
  remarks: "For dynamic methods, specifying `true` for  has no effect. Dynamic methods have no inheritance chain.  \n  \n> [!NOTE]\n>  Custom attributes are not currently supported on dynamic methods."
  syntax:
    content: public override bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: A <see cref="T:System.Type"> representing the type of custom attribute to search for.
    - id: inherit
      type: System.Boolean
      description: '`true` to search the method''s inheritance chain to find the custom attributes; `false` to check only the current method.'
    return:
      type: System.Boolean
      description: '`true` if the specified custom attribute type is defined; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.IsSecurityCritical
  id: IsSecurityCritical
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: IsSecurityCritical
  nameWithType: DynamicMethod.IsSecurityCritical
  fullName: System.Reflection.Emit.DynamicMethod.IsSecurityCritical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.
  remarks: "The IsSecurityCritical, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  \n  \n-   Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  \n  \n-   The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  \n  \n    |Assembly annotation|Level 1 transparency|Level 2 transparency|  \n    |-------------------------|--------------------------|--------------------------|  \n    |Fully transparent|Transparent|Transparent|  \n    |Fully critical|Critical|Critical|  \n    |Mixed transparency|Transparent|Transparent|  \n    |Security-agnostic|Safe-critical|Critical|  \n  \n     For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](../Topic/Security-Transparent%20Code,%20Level%201.md) and [Security-Transparent Code, Level 2](../Topic/Security-Transparent%20Code,%20Level%202.md).  \n  \n    > [!NOTE]\n    >  Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.  \n  \n-   The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.  \n  \n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md). For information about transparency, see [Security Changes](../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public override bool IsSecurityCritical { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical
  id: IsSecuritySafeCritical
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: IsSecuritySafeCritical
  nameWithType: DynamicMethod.IsSecuritySafeCritical
  fullName: System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.
  remarks: "The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, IsSecuritySafeCritical, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  \n  \n-   Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  \n  \n-   The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  \n  \n    |Assembly annotation|Level 1 transparency|Level 2 transparency|  \n    |-------------------------|--------------------------|--------------------------|  \n    |Fully transparent|Transparent|Transparent|  \n    |Fully critical|Critical|Critical|  \n    |Mixed transparency|Transparent|Transparent|  \n    |Security-agnostic|Safe-critical|Critical|  \n  \n     For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](../Topic/Security-Transparent%20Code,%20Level%201.md) and [Security-Transparent Code, Level 2](../Topic/Security-Transparent%20Code,%20Level%202.md).  \n  \n    > [!NOTE]\n    >  Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.  \n  \n-   The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.  \n  \n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md). For information about transparency, see [Security Changes](../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public override bool IsSecuritySafeCritical { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.IsSecurityTransparent
  id: IsSecurityTransparent
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: IsSecurityTransparent
  nameWithType: DynamicMethod.IsSecurityTransparent
  fullName: System.Reflection.Emit.DynamicMethod.IsSecurityTransparent
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.
  remarks: "The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and IsSecurityTransparent properties report the transparency level of the dynamic method as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n The transparency of a dynamic method depends on the module it is associated with. If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type. Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.  \n  \n-   Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.  \n  \n-   The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.  \n  \n    |Assembly annotation|Level 1 transparency|Level 2 transparency|  \n    |-------------------------|--------------------------|--------------------------|  \n    |Fully transparent|Transparent|Transparent|  \n    |Fully critical|Critical|Critical|  \n    |Mixed transparency|Transparent|Transparent|  \n    |Security-agnostic|Safe-critical|Critical|  \n  \n     For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code. For information about transparency levels, see [Security-Transparent Code, Level 1](../Topic/Security-Transparent%20Code,%20Level%201.md) and [Security-Transparent Code, Level 2](../Topic/Security-Transparent%20Code,%20Level%202.md).  \n  \n    > [!NOTE]\n    >  Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust. If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.  \n  \n-   The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded. If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types and members, including dynamic methods, are treated as transparent. The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application). In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.  \n  \n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](../Topic/Security%20Issues%20in%20Reflection%20Emit.md). For information about transparency, see [Security Changes](../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public override bool IsSecurityTransparent { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.MethodHandle
  id: MethodHandle
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: MethodHandle
  nameWithType: DynamicMethod.MethodHandle
  fullName: System.Reflection.Emit.DynamicMethod.MethodHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Not supported for dynamic methods.
  remarks: To be added.
  syntax:
    content: public override RuntimeMethodHandle MethodHandle { get; }
    return:
      type: System.RuntimeMethodHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.Module
  id: Module
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: Module
  nameWithType: DynamicMethod.Module
  fullName: System.Reflection.Emit.DynamicMethod.Module
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the module with which the dynamic method is logically associated.
  remarks: If a module was specified when the dynamic method was created, this property returns that module. If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.
  example:
  - "The following code example displays the Module property of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#26](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#26)]"
  syntax:
    content: public override System.Reflection.Module Module { get; }
    return:
      type: System.Reflection.Module
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.Name
  id: Name
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: Name
  nameWithType: DynamicMethod.Name
  fullName: System.Reflection.Emit.DynamicMethod.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the name of the dynamic method.
  remarks: >-
    > [!NOTE]

    >  It is not necessary to name dynamic methods.
  example:
  - "The following code example displays the name of a dynamic method. This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#27](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#27)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.ReflectedType
  id: ReflectedType
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: ReflectedType
  nameWithType: DynamicMethod.ReflectedType
  fullName: System.Reflection.Emit.DynamicMethod.ReflectedType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the class that was used in reflection to obtain the method.
  remarks: This property always returns `null` for dynamic methods.
  example:
  - "The following code example displays the reflected type of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#28](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#28)]"
  syntax:
    content: public override Type ReflectedType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.ReturnParameter
  id: ReturnParameter
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: ReturnParameter
  nameWithType: DynamicMethod.ReturnParameter
  fullName: System.Reflection.Emit.DynamicMethod.ReturnParameter
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the return parameter of the dynamic method.
  remarks: This property always returns `null` for dynamic methods.
  syntax:
    content: public override System.Reflection.ParameterInfo ReturnParameter { get; }
    return:
      type: System.Reflection.ParameterInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.ReturnType
  id: ReturnType
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: ReturnType
  nameWithType: DynamicMethod.ReturnType
  fullName: System.Reflection.Emit.DynamicMethod.ReturnType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the type of return value for the dynamic method.
  remarks: If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=fullName>.
  example:
  - "The following code example displays the return type of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#30](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#30)]"
  syntax:
    content: public override Type ReturnType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes
  id: ReturnTypeCustomAttributes
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: ReturnTypeCustomAttributes
  nameWithType: DynamicMethod.ReturnTypeCustomAttributes
  fullName: System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets the custom attributes of the return type for the dynamic method.
  remarks: Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.
  example:
  - "The following code example shows how to display the custom attributes of the return type of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#31](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#31)]"
  syntax:
    content: public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicMethod.ToString
  id: ToString
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  name: ToString()
  nameWithType: DynamicMethod.ToString()
  fullName: System.Reflection.Emit.DynamicMethod.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns the signature of the method, represented as a string.
  remarks: The signature includes only types and the method name, if any. Parameter names are not included.
  example:
  - "The following code example displays the ToString method of a dynamic method. This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.  \n  \n [!CODE [Reflection.DynamicMethod.All#32](../CodeSnippet/VS_Snippets_CLR/Reflection.DynamicMethod.All#32)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string representing the method signature.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Reflection.MethodInfo
  isExternal: false
  name: System.Reflection.MethodInfo
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: DynamicMethod(String,Type,Type[])
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[])
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[])
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: DynamicMethod(String,Type,Type[],Boolean)
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[],Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[],Boolean)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: DynamicMethod(String,Type,Type[],Module)
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[],Module)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[],Module)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: DynamicMethod(String,Type,Type[],Type)
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[],Type)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[],Type)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: DynamicMethod(String,Type,Type[],Module,Boolean)
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[],Module,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[],Module,Boolean)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: DynamicMethod(String,Type,Type[],Type,Boolean)
  nameWithType: DynamicMethod.DynamicMethod(String,Type,Type[],Type,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,Type,Type[],Type,Boolean)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Module,Boolean)
  nameWithType: DynamicMethod.DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Module,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Module,Boolean)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type,Boolean)
  nameWithType: DynamicMethod.DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(String,MethodAttributes,CallingConventions,Type,Type[],Type,Boolean)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.Attributes
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: Attributes
  nameWithType: DynamicMethod.Attributes
  fullName: System.Reflection.Emit.DynamicMethod.Attributes
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.Emit.DynamicMethod.CallingConvention
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: CallingConvention
  nameWithType: DynamicMethod.CallingConvention
  fullName: System.Reflection.Emit.DynamicMethod.CallingConvention
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: CreateDelegate(Type)
  nameWithType: DynamicMethod.CreateDelegate(Type)
  fullName: System.Reflection.Emit.DynamicMethod.CreateDelegate(Type)
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: CreateDelegate(Type,Object)
  nameWithType: DynamicMethod.CreateDelegate(Type,Object)
  fullName: System.Reflection.Emit.DynamicMethod.CreateDelegate(Type,Object)
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.Emit.DynamicMethod.DeclaringType
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: DeclaringType
  nameWithType: DynamicMethod.DeclaringType
  fullName: System.Reflection.Emit.DynamicMethod.DeclaringType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: DefineParameter(Int32,ParameterAttributes,String)
  nameWithType: DynamicMethod.DefineParameter(Int32,ParameterAttributes,String)
  fullName: System.Reflection.Emit.DynamicMethod.DefineParameter(Int32,ParameterAttributes,String)
- uid: System.Reflection.Emit.ParameterBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: ParameterBuilder
  nameWithType: ParameterBuilder
  fullName: System.Reflection.Emit.ParameterBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: ParameterAttributes
  nameWithType: ParameterAttributes
  fullName: System.Reflection.ParameterAttributes
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicMethod.GetBaseDefinition
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: GetBaseDefinition()
  nameWithType: DynamicMethod.GetBaseDefinition()
  fullName: System.Reflection.Emit.DynamicMethod.GetBaseDefinition()
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: DynamicMethod.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: DynamicMethod.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.GetCustomAttributes(Type,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.GetDynamicILInfo
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: GetDynamicILInfo()
  nameWithType: DynamicMethod.GetDynamicILInfo()
  fullName: System.Reflection.Emit.DynamicMethod.GetDynamicILInfo()
- uid: System.Reflection.Emit.DynamicILInfo
  parent: System.Reflection.Emit
  isExternal: false
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: GetILGenerator()
  nameWithType: DynamicMethod.GetILGenerator()
  fullName: System.Reflection.Emit.DynamicMethod.GetILGenerator()
- uid: System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: false
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: GetILGenerator(Int32)
  nameWithType: DynamicMethod.GetILGenerator(Int32)
  fullName: System.Reflection.Emit.DynamicMethod.GetILGenerator(Int32)
- uid: System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: false
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: GetMethodImplementationFlags()
  nameWithType: DynamicMethod.GetMethodImplementationFlags()
  fullName: System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags()
- uid: System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodImplAttributes
  nameWithType: MethodImplAttributes
  fullName: System.Reflection.MethodImplAttributes
- uid: System.Reflection.Emit.DynamicMethod.GetParameters
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: GetParameters()
  nameWithType: DynamicMethod.GetParameters()
  fullName: System.Reflection.Emit.DynamicMethod.GetParameters()
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo[]
- uid: System.Reflection.Emit.DynamicMethod.InitLocals
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: InitLocals
  nameWithType: DynamicMethod.InitLocals
  fullName: System.Reflection.Emit.DynamicMethod.InitLocals
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  nameWithType: DynamicMethod.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  fullName: System.Reflection.Emit.DynamicMethod.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: IsDefined(Type,Boolean)
  nameWithType: DynamicMethod.IsDefined(Type,Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.IsDefined(Type,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.IsSecurityCritical
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: IsSecurityCritical
  nameWithType: DynamicMethod.IsSecurityCritical
  fullName: System.Reflection.Emit.DynamicMethod.IsSecurityCritical
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: IsSecuritySafeCritical
  nameWithType: DynamicMethod.IsSecuritySafeCritical
  fullName: System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.IsSecurityTransparent
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: IsSecurityTransparent
  nameWithType: DynamicMethod.IsSecurityTransparent
  fullName: System.Reflection.Emit.DynamicMethod.IsSecurityTransparent
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.DynamicMethod.MethodHandle
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: MethodHandle
  nameWithType: DynamicMethod.MethodHandle
  fullName: System.Reflection.Emit.DynamicMethod.MethodHandle
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicMethod.Module
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: Module
  nameWithType: DynamicMethod.Module
  fullName: System.Reflection.Emit.DynamicMethod.Module
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Emit.DynamicMethod.Name
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: Name
  nameWithType: DynamicMethod.Name
  fullName: System.Reflection.Emit.DynamicMethod.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicMethod.ReflectedType
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: ReflectedType
  nameWithType: DynamicMethod.ReflectedType
  fullName: System.Reflection.Emit.DynamicMethod.ReflectedType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.DynamicMethod.ReturnParameter
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: ReturnParameter
  nameWithType: DynamicMethod.ReturnParameter
  fullName: System.Reflection.Emit.DynamicMethod.ReturnParameter
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Reflection.Emit.DynamicMethod.ReturnType
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: ReturnType
  nameWithType: DynamicMethod.ReturnType
  fullName: System.Reflection.Emit.DynamicMethod.ReturnType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: ReturnTypeCustomAttributes
  nameWithType: DynamicMethod.ReturnTypeCustomAttributes
  fullName: System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Reflection.Emit.DynamicMethod.ToString
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  name: ToString()
  nameWithType: DynamicMethod.ToString()
  fullName: System.Reflection.Emit.DynamicMethod.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate*
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  nameWithType: DynamicMethod.
- uid: System.Reflection.Emit.DynamicMethod.GetCustomAttributes*
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  nameWithType: DynamicMethod.
- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator*
  parent: System.Reflection.Emit.DynamicMethod
  isExternal: false
  nameWithType: DynamicMethod.
