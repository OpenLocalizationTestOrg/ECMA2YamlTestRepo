### YamlMime:ManagedReference
items:
- uid: System.Threading.Mutex
  id: Mutex
  children:
  - System.Threading.Mutex.#ctor
  - System.Threading.Mutex.#ctor(System.Boolean)
  - System.Threading.Mutex.#ctor(System.Boolean,System.String)
  - System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  - System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)
  - System.Threading.Mutex.GetAccessControl
  - System.Threading.Mutex.OpenExisting(System.String)
  - System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)
  - System.Threading.Mutex.ReleaseMutex
  - System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)
  - System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  - System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)
  langs:
  - csharp
  - vb
  name: Mutex
  nameWithType: Mutex
  fullName: System.Threading.Mutex
  type: Class
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class Mutex : System.Threading.WaitHandle
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Threading.WaitHandle
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Threading.WaitHandle.Close
  - System.Threading.WaitHandle.Dispose
  - System.Threading.WaitHandle.Dispose(System.Boolean)
  - System.Threading.WaitHandle.Handle
  - System.Threading.WaitHandle.InvalidHandle
  - System.Threading.WaitHandle.SafeWaitHandle
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitOne
  - System.Threading.WaitHandle.WaitOne(System.Int32)
  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitTimeout
- uid: System.Threading.Mutex.#ctor
  id: '#ctor'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: Mutex..ctor
  fullName: System.Threading.Mutex..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public Mutex ();
    parameters: []
- uid: System.Threading.Mutex.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: Mutex..ctor
  fullName: System.Threading.Mutex..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public Mutex (bool initiallyOwned);
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: Parameter description to be filled
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String)
  id: '#ctor(System.Boolean,System.String)'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: Mutex..ctor
  fullName: System.Threading.Mutex..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public Mutex (bool initiallyOwned, string name);
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: Parameter description to be filled
    - id: name
      type: System.String
      description: Parameter description to be filled
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  id: '#ctor(System.Boolean,System.String,System.Boolean@)'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: Mutex..ctor
  fullName: System.Threading.Mutex..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public Mutex (bool initiallyOwned, string name, out bool createdNew);
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: Parameter description to be filled
    - id: name
      type: System.String
      description: Parameter description to be filled
    - id: createdNew
      type: System.Boolean
      description: Parameter description to be filled
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)
  id: '#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: Mutex..ctor
  fullName: System.Threading.Mutex..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public Mutex (bool initiallyOwned, string name, out bool createdNew, System.Security.AccessControl.MutexSecurity mutexSecurity);
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: Parameter description to be filled
    - id: name
      type: System.String
      description: Parameter description to be filled
    - id: createdNew
      type: System.Boolean
      description: Parameter description to be filled
    - id: mutexSecurity
      type: System.Security.AccessControl.MutexSecurity
      description: Parameter description to be filled
- uid: System.Threading.Mutex.GetAccessControl
  id: GetAccessControl
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: GetAccessControl
  nameWithType: Mutex.GetAccessControl
  fullName: System.Threading.Mutex.GetAccessControl
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public System.Security.AccessControl.MutexSecurity GetAccessControl ();
    parameters: []
    return:
      type: System.Security.AccessControl.MutexSecurity
      description: Return description to be filled
- uid: System.Threading.Mutex.OpenExisting(System.String)
  id: OpenExisting(System.String)
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: OpenExisting
  nameWithType: Mutex.OpenExisting
  fullName: System.Threading.Mutex.OpenExisting
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public static System.Threading.Mutex OpenExisting (string name);
    parameters:
    - id: name
      type: System.String
      description: Parameter description to be filled
    return:
      type: System.Threading.Mutex
      description: Return description to be filled
  overload: System.Threading.Mutex.OpenExisting*
- uid: System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)
  id: OpenExisting(System.String,System.Security.AccessControl.MutexRights)
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: OpenExisting
  nameWithType: Mutex.OpenExisting
  fullName: System.Threading.Mutex.OpenExisting
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public static System.Threading.Mutex OpenExisting (string name, System.Security.AccessControl.MutexRights rights);
    parameters:
    - id: name
      type: System.String
      description: Parameter description to be filled
    - id: rights
      type: System.Security.AccessControl.MutexRights
      description: Parameter description to be filled
    return:
      type: System.Threading.Mutex
      description: Return description to be filled
  overload: System.Threading.Mutex.OpenExisting*
- uid: System.Threading.Mutex.ReleaseMutex
  id: ReleaseMutex
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: ReleaseMutex
  nameWithType: Mutex.ReleaseMutex
  fullName: System.Threading.Mutex.ReleaseMutex
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public void ReleaseMutex ();
    parameters: []
    return:
      type: System.Void
      description: Return description to be filled
- uid: System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)
  id: SetAccessControl(System.Security.AccessControl.MutexSecurity)
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: SetAccessControl
  nameWithType: Mutex.SetAccessControl
  fullName: System.Threading.Mutex.SetAccessControl
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public void SetAccessControl (System.Security.AccessControl.MutexSecurity mutexSecurity);
    parameters:
    - id: mutexSecurity
      type: System.Security.AccessControl.MutexSecurity
      description: Parameter description to be filled
    return:
      type: System.Void
      description: Return description to be filled
- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  id: TryOpenExisting(System.String,System.Threading.Mutex@)
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: TryOpenExisting
  nameWithType: Mutex.TryOpenExisting
  fullName: System.Threading.Mutex.TryOpenExisting
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public static bool TryOpenExisting (string name, out System.Threading.Mutex result);
    parameters:
    - id: name
      type: System.String
      description: Parameter description to be filled
    - id: result
      type: System.Threading.Mutex
      description: Parameter description to be filled
    return:
      type: System.Boolean
      description: Return description to be filled
  overload: System.Threading.Mutex.TryOpenExisting*
- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)
  id: TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: TryOpenExisting
  nameWithType: Mutex.TryOpenExisting
  fullName: System.Threading.Mutex.TryOpenExisting
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: public static bool TryOpenExisting (string name, System.Security.AccessControl.MutexRights rights, out System.Threading.Mutex result);
    parameters:
    - id: name
      type: System.String
      description: Parameter description to be filled
    - id: rights
      type: System.Security.AccessControl.MutexRights
      description: Parameter description to be filled
    - id: result
      type: System.Threading.Mutex
      description: Parameter description to be filled
    return:
      type: System.Boolean
      description: Return description to be filled
  overload: System.Threading.Mutex.TryOpenExisting*
references:
- uid: System.Threading.WaitHandle
  isExternal: false
  name: System.Threading.WaitHandle
- uid: System.Threading.Mutex.#ctor
  parent: System.Threading.Mutex
  isExternal: false
  name: .ctor
  nameWithType: Mutex..ctor
  fullName: System.Threading.Mutex..ctor
- uid: System.Threading.Mutex.#ctor(System.Boolean)
  parent: System.Threading.Mutex
  isExternal: false
  name: .ctor
  nameWithType: Mutex..ctor
  fullName: System.Threading.Mutex..ctor
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String)
  parent: System.Threading.Mutex
  isExternal: false
  name: .ctor
  nameWithType: Mutex..ctor
  fullName: System.Threading.Mutex..ctor
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  parent: System.Threading.Mutex
  isExternal: false
  name: .ctor
  nameWithType: Mutex..ctor
  fullName: System.Threading.Mutex..ctor
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@,System.Security.AccessControl.MutexSecurity)
  parent: System.Threading.Mutex
  isExternal: false
  name: .ctor
  nameWithType: Mutex..ctor
  fullName: System.Threading.Mutex..ctor
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.MutexSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexSecurity
  nameWithType: MutexSecurity
  fullName: System.Security.AccessControl.MutexSecurity
- uid: System.Threading.Mutex.GetAccessControl
  parent: System.Threading.Mutex
  isExternal: false
  name: GetAccessControl
  nameWithType: Mutex.GetAccessControl
  fullName: System.Threading.Mutex.GetAccessControl
- uid: System.Security.AccessControl.MutexSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexSecurity
  nameWithType: MutexSecurity
  fullName: System.Security.AccessControl.MutexSecurity
- uid: System.Threading.Mutex.OpenExisting(System.String)
  parent: System.Threading.Mutex
  isExternal: false
  name: OpenExisting
  nameWithType: Mutex.OpenExisting
  fullName: System.Threading.Mutex.OpenExisting
- uid: System.Threading.Mutex
  parent: System.Threading
  isExternal: false
  name: Mutex
  nameWithType: Mutex
  fullName: System.Threading.Mutex
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Mutex.OpenExisting(System.String,System.Security.AccessControl.MutexRights)
  parent: System.Threading.Mutex
  isExternal: false
  name: OpenExisting
  nameWithType: Mutex.OpenExisting
  fullName: System.Threading.Mutex.OpenExisting
- uid: System.Threading.Mutex
  parent: System.Threading
  isExternal: false
  name: Mutex
  nameWithType: Mutex
  fullName: System.Threading.Mutex
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.MutexRights
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexRights
  nameWithType: MutexRights
  fullName: System.Security.AccessControl.MutexRights
- uid: System.Threading.Mutex.ReleaseMutex
  parent: System.Threading.Mutex
  isExternal: false
  name: ReleaseMutex
  nameWithType: Mutex.ReleaseMutex
  fullName: System.Threading.Mutex.ReleaseMutex
- uid: System.Void
  parent: System
  isExternal: false
  name: Void
  nameWithType: Void
  fullName: System.Void
- uid: System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)
  parent: System.Threading.Mutex
  isExternal: false
  name: SetAccessControl
  nameWithType: Mutex.SetAccessControl
  fullName: System.Threading.Mutex.SetAccessControl
- uid: System.Void
  parent: System
  isExternal: false
  name: Void
  nameWithType: Void
  fullName: System.Void
- uid: System.Security.AccessControl.MutexSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexSecurity
  nameWithType: MutexSecurity
  fullName: System.Security.AccessControl.MutexSecurity
- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  parent: System.Threading.Mutex
  isExternal: false
  name: TryOpenExisting
  nameWithType: Mutex.TryOpenExisting
  fullName: System.Threading.Mutex.TryOpenExisting
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Mutex
  parent: System.Threading
  isExternal: false
  name: Mutex
  nameWithType: Mutex
  fullName: System.Threading.Mutex
- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Security.AccessControl.MutexRights,System.Threading.Mutex@)
  parent: System.Threading.Mutex
  isExternal: false
  name: TryOpenExisting
  nameWithType: Mutex.TryOpenExisting
  fullName: System.Threading.Mutex.TryOpenExisting
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.MutexRights
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexRights
  nameWithType: MutexRights
  fullName: System.Security.AccessControl.MutexRights
- uid: System.Threading.Mutex
  parent: System.Threading
  isExternal: false
  name: Mutex
  nameWithType: Mutex
  fullName: System.Threading.Mutex
- uid: System.Threading.Mutex.OpenExisting
  parent: System.Threading.Mutex
  isExternal: false
  name: GetAccessControl
  nameWithType: Mutex.GetAccessControl
- uid: System.Threading.Mutex.TryOpenExisting
  parent: System.Threading.Mutex
  isExternal: false
  name: GetAccessControl
  nameWithType: Mutex.GetAccessControl
