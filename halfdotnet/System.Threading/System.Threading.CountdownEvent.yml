### YamlMime:ManagedReference
items:
- uid: System.Threading.CountdownEvent
  id: CountdownEvent
  children:
  - System.Threading.CountdownEvent.#ctor(System.Int32)
  - System.Threading.CountdownEvent.AddCount
  - System.Threading.CountdownEvent.AddCount(System.Int32)
  - System.Threading.CountdownEvent.CurrentCount
  - System.Threading.CountdownEvent.Dispose
  - System.Threading.CountdownEvent.Dispose(System.Boolean)
  - System.Threading.CountdownEvent.InitialCount
  - System.Threading.CountdownEvent.IsSet
  - System.Threading.CountdownEvent.Reset
  - System.Threading.CountdownEvent.Reset(System.Int32)
  - System.Threading.CountdownEvent.Signal
  - System.Threading.CountdownEvent.Signal(System.Int32)
  - System.Threading.CountdownEvent.TryAddCount
  - System.Threading.CountdownEvent.TryAddCount(System.Int32)
  - System.Threading.CountdownEvent.Wait
  - System.Threading.CountdownEvent.Wait(System.Int32)
  - System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)
  - System.Threading.CountdownEvent.Wait(System.TimeSpan)
  - System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.CountdownEvent.WaitHandle
  langs:
  - csharp
  name: CountdownEvent
  nameWithType: CountdownEvent
  fullName: System.Threading.CountdownEvent
  type: Class
  summary: Represents a synchronization primitive that is signaled when its count reaches zero.
  remarks: To be added.
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Initial Count={InitialCount}, Current Count={CurrentCount}")]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class CountdownEvent : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: CountdownEvent(Int32)
  nameWithType: CountdownEvent.CountdownEvent(Int32)
  fullName: System.Threading.CountdownEvent.CountdownEvent(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Initializes a new instance of <see cref="T:System.Threading.CountdownEvent"> class with the specified count.
  remarks: iI  is 0, the event is created in a signaled state.
  syntax:
    content: public CountdownEvent (int initialCount);
    parameters:
    - id: initialCount
      type: System.Int32
      description: The number of signals initially required to set the <see cref="T:System.Threading.CountdownEvent">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.AddCount
  id: AddCount
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: AddCount()
  nameWithType: CountdownEvent.AddCount()
  fullName: System.Threading.CountdownEvent.AddCount()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Increments the <see cref="T:System.Threading.CountdownEvent">'s current count by one.
  remarks: To be added.
  syntax:
    content: public void AddCount ();
    parameters: []
  overload: System.Threading.CountdownEvent.AddCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.AddCount(System.Int32)
  id: AddCount(System.Int32)
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: AddCount(Int32)
  nameWithType: CountdownEvent.AddCount(Int32)
  fullName: System.Threading.CountdownEvent.AddCount(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Increments the <see cref="T:System.Threading.CountdownEvent">'s current count by a specified value.
  remarks: To be added.
  syntax:
    content: public void AddCount (int signalCount);
    parameters:
    - id: signalCount
      type: System.Int32
      description: The value by which to increase <xref:System.Threading.CountdownEvent.CurrentCount%2A>.
  overload: System.Threading.CountdownEvent.AddCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.CurrentCount
  id: CurrentCount
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: CurrentCount
  nameWithType: CountdownEvent.CurrentCount
  fullName: System.Threading.CountdownEvent.CurrentCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets the number of remaining signals required to set the event.
  remarks: To be added.
  syntax:
    content: public int CurrentCount { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Dispose
  id: Dispose
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Dispose()
  nameWithType: CountdownEvent.Dispose()
  fullName: System.Threading.CountdownEvent.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases all resources used by the current instance of the <see cref="T:System.Threading.CountdownEvent"> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.Threading.CountdownEvent>. The `Dispose` method leaves the <xref:System.Threading.CountdownEvent> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.CountdownEvent> so the garbage collector can reclaim the memory that the <xref:System.Threading.CountdownEvent> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md) and [Implementing a Dispose Method](../Topic/Implementing%20a%20Dispose%20Method.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.CountdownEvent>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.CountdownEvent> object's `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.CountdownEvent.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: CountdownEvent.Dispose(Boolean)
  fullName: System.Threading.CountdownEvent.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases the unmanaged resources used by the <see cref="T:System.Threading.CountdownEvent">, and optionally releases the managed resources.
  remarks: Unlike most of the members of <xref:System.Threading.CountdownEvent>, <xref:System.Threading.CountdownEvent.Dispose%2A> is not thread-safe and may not be used concurrently with other members of this instance.
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
  overload: System.Threading.CountdownEvent.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.InitialCount
  id: InitialCount
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: InitialCount
  nameWithType: CountdownEvent.InitialCount
  fullName: System.Threading.CountdownEvent.InitialCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets the numbers of signals initially required to set the event.
  remarks: To be added.
  syntax:
    content: public int InitialCount { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.IsSet
  id: IsSet
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: IsSet
  nameWithType: CountdownEvent.IsSet
  fullName: System.Threading.CountdownEvent.IsSet
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Indicates whether the <see cref="T:System.Threading.CountdownEvent"> object's current count has reached zero..
  remarks: The <xref:System.Threading.CountdownEvent> does not raise an event when the countdown has reached zero. Instead, the <xref:System.Threading.CountdownEvent.CurrentCount%2A> property equals zero, and the IsSet property equals `true`.
  syntax:
    content: public bool IsSet { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Reset
  id: Reset
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Reset()
  nameWithType: CountdownEvent.Reset()
  fullName: System.Threading.CountdownEvent.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Resets the <xref:System.Threading.CountdownEvent.CurrentCount%2A> to the value of <xref:System.Threading.CountdownEvent.InitialCount%2A>.
  remarks: Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance.
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Threading.CountdownEvent.Reset*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Reset(System.Int32)
  id: Reset(System.Int32)
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Reset(Int32)
  nameWithType: CountdownEvent.Reset(Int32)
  fullName: System.Threading.CountdownEvent.Reset(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Resets the <xref:System.Threading.CountdownEvent.InitialCount%2A> property to a specified value.
  remarks: This method resets <xref:System.Threading.CountdownEvent.InitialCount%2A> for all subsequent accesses of the property on the current instance. Unlike most of the members of <xref:System.Threading.CountdownEvent>, Reset is not thread-safe and may not be used concurrently with other members of this instance.
  syntax:
    content: public void Reset (int count);
    parameters:
    - id: count
      type: System.Int32
      description: The number of signals required to set the <see cref="T:System.Threading.CountdownEvent">.
  overload: System.Threading.CountdownEvent.Reset*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Signal
  id: Signal
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Signal()
  nameWithType: CountdownEvent.Signal()
  fullName: System.Threading.CountdownEvent.Signal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Registers a signal with the <see cref="T:System.Threading.CountdownEvent">, decrementing the value of <xref:System.Threading.CountdownEvent.CurrentCount%2A>.
  remarks: To be added.
  syntax:
    content: public bool Signal ();
    parameters: []
    return:
      type: System.Boolean
      description: true if the signal caused the count to reach zero and the event was set; otherwise, false.
  overload: System.Threading.CountdownEvent.Signal*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Signal(System.Int32)
  id: Signal(System.Int32)
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Signal(Int32)
  nameWithType: CountdownEvent.Signal(Int32)
  fullName: System.Threading.CountdownEvent.Signal(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Registers multiple signals with the <see cref="T:System.Threading.CountdownEvent">, decrementing the value of <xref:System.Threading.CountdownEvent.CurrentCount%2A> by the specified amount.
  remarks: To be added.
  syntax:
    content: public bool Signal (int signalCount);
    parameters:
    - id: signalCount
      type: System.Int32
      description: The number of signals to register.
    return:
      type: System.Boolean
      description: true if the signals caused the count to reach zero and the event was set; otherwise, false.
  overload: System.Threading.CountdownEvent.Signal*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.TryAddCount
  id: TryAddCount
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: TryAddCount()
  nameWithType: CountdownEvent.TryAddCount()
  fullName: System.Threading.CountdownEvent.TryAddCount()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Attempts to increment <xref:System.Threading.CountdownEvent.CurrentCount%2A> by one.
  remarks: To be added.
  syntax:
    content: public bool TryAddCount ();
    parameters: []
    return:
      type: System.Boolean
      description: true if the increment succeeded; otherwise, false. If <xref:System.Threading.CountdownEvent.CurrentCount%2A> is already at zero, this method will return false.
  overload: System.Threading.CountdownEvent.TryAddCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.TryAddCount(System.Int32)
  id: TryAddCount(System.Int32)
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: TryAddCount(Int32)
  nameWithType: CountdownEvent.TryAddCount(Int32)
  fullName: System.Threading.CountdownEvent.TryAddCount(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Attempts to increment <xref:System.Threading.CountdownEvent.CurrentCount%2A> by a specified value.
  remarks: To be added.
  syntax:
    content: public bool TryAddCount (int signalCount);
    parameters:
    - id: signalCount
      type: System.Int32
      description: The value by which to increase <xref:System.Threading.CountdownEvent.CurrentCount%2A>.
    return:
      type: System.Boolean
      description: true if the increment succeeded; otherwise, false. If <xref:System.Threading.CountdownEvent.CurrentCount%2A> is already at zero this will return false.
  overload: System.Threading.CountdownEvent.TryAddCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Wait
  id: Wait
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Wait()
  nameWithType: CountdownEvent.Wait()
  fullName: System.Threading.CountdownEvent.Wait()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent"> is set.
  remarks: The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.
  syntax:
    content: public void Wait ();
    parameters: []
  overload: System.Threading.CountdownEvent.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Wait(Int32)
  nameWithType: CountdownEvent.Wait(Int32)
  fullName: System.Threading.CountdownEvent.Wait(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent"> is set, using a 32-bit signed integer to measure the timeout.
  remarks: To be added.
  syntax:
    content: public bool Wait (int millisecondsTimeout);
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite">(-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Threading.CountdownEvent"> was set; otherwise, false.
  overload: System.Threading.CountdownEvent.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Wait(CancellationToken)
  nameWithType: CountdownEvent.Wait(CancellationToken)
  fullName: System.Threading.CountdownEvent.Wait(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent"> is set, while observing a <xref:System.Threading.CancellationToken>.
  remarks: The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state. If the <xref:System.Threading.CancellationToken> being observed is canceled during the wait operation, an <xref:System.OperationCanceledException> will be thrown.
  syntax:
    content: public void Wait (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken"> to observe.
  overload: System.Threading.CountdownEvent.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Wait(TimeSpan)
  nameWithType: CountdownEvent.Wait(TimeSpan)
  fullName: System.Threading.CountdownEvent.Wait(TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent"> is set, using a <xref:System.TimeSpan> to measure the timeout.
  remarks: To be added.
  syntax:
    content: public bool Wait (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan"> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Threading.CountdownEvent"> was set; otherwise, false.
  overload: System.Threading.CountdownEvent.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Wait(Int32,CancellationToken)
  nameWithType: CountdownEvent.Wait(Int32,CancellationToken)
  fullName: System.Threading.CountdownEvent.Wait(Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent"> is set, using a 32-bit signed integer to measure the timeout, while observing a <xref:System.Threading.CancellationToken>.
  remarks: To be added.
  syntax:
    content: public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite">(-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken"> to observe.
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Threading.CountdownEvent"> was set; otherwise, false.
  overload: System.Threading.CountdownEvent.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)
  id: Wait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: Wait(TimeSpan,CancellationToken)
  nameWithType: CountdownEvent.Wait(TimeSpan,CancellationToken)
  fullName: System.Threading.CountdownEvent.Wait(TimeSpan,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the <see cref="T:System.Threading.CountdownEvent"> is set, using a <xref:System.TimeSpan> to measure the timeout, while observing a <xref:System.Threading.CancellationToken>.
  remarks: To be added.
  syntax:
    content: public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan"> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"> that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken"> to observe.
    return:
      type: System.Boolean
      description: true if the <see cref="T:System.Threading.CountdownEvent"> was set; otherwise, false.
  overload: System.Threading.CountdownEvent.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.CountdownEvent.WaitHandle
  id: WaitHandle
  parent: System.Threading.CountdownEvent
  langs:
  - csharp
  name: WaitHandle
  nameWithType: CountdownEvent.WaitHandle
  fullName: System.Threading.CountdownEvent.WaitHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets a <see cref="T:System.Threading.WaitHandle"> that is used to wait for the event to be set.
  remarks: WaitHandle should only be used if it's needed for integration with code bases that rely on having a WaitHandle. If all that's needed is to wait for the <xref:System.Threading.CountdownEvent> to be set, the <xref:System.Threading.CountdownEvent.Wait%2A> method should be preferred.
  syntax:
    content: public System.Threading.WaitHandle WaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.CountdownEvent.#ctor(System.Int32)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: CountdownEvent(Int32)
  nameWithType: CountdownEvent.CountdownEvent(Int32)
  fullName: System.Threading.CountdownEvent.CountdownEvent(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CountdownEvent.AddCount
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: AddCount()
  nameWithType: CountdownEvent.AddCount()
  fullName: System.Threading.CountdownEvent.AddCount()
- uid: System.Threading.CountdownEvent.AddCount(System.Int32)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: AddCount(Int32)
  nameWithType: CountdownEvent.AddCount(Int32)
  fullName: System.Threading.CountdownEvent.AddCount(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CountdownEvent.CurrentCount
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: CurrentCount
  nameWithType: CountdownEvent.CurrentCount
  fullName: System.Threading.CountdownEvent.CurrentCount
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CountdownEvent.Dispose
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Dispose()
  nameWithType: CountdownEvent.Dispose()
  fullName: System.Threading.CountdownEvent.Dispose()
- uid: System.Threading.CountdownEvent.Dispose(System.Boolean)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: CountdownEvent.Dispose(Boolean)
  fullName: System.Threading.CountdownEvent.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CountdownEvent.InitialCount
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: InitialCount
  nameWithType: CountdownEvent.InitialCount
  fullName: System.Threading.CountdownEvent.InitialCount
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CountdownEvent.IsSet
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: IsSet
  nameWithType: CountdownEvent.IsSet
  fullName: System.Threading.CountdownEvent.IsSet
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CountdownEvent.Reset
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Reset()
  nameWithType: CountdownEvent.Reset()
  fullName: System.Threading.CountdownEvent.Reset()
- uid: System.Threading.CountdownEvent.Reset(System.Int32)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Reset(Int32)
  nameWithType: CountdownEvent.Reset(Int32)
  fullName: System.Threading.CountdownEvent.Reset(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CountdownEvent.Signal
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Signal()
  nameWithType: CountdownEvent.Signal()
  fullName: System.Threading.CountdownEvent.Signal()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CountdownEvent.Signal(System.Int32)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Signal(Int32)
  nameWithType: CountdownEvent.Signal(Int32)
  fullName: System.Threading.CountdownEvent.Signal(Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CountdownEvent.TryAddCount
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: TryAddCount()
  nameWithType: CountdownEvent.TryAddCount()
  fullName: System.Threading.CountdownEvent.TryAddCount()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CountdownEvent.TryAddCount(System.Int32)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: TryAddCount(Int32)
  nameWithType: CountdownEvent.TryAddCount(Int32)
  fullName: System.Threading.CountdownEvent.TryAddCount(Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CountdownEvent.Wait
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Wait()
  nameWithType: CountdownEvent.Wait()
  fullName: System.Threading.CountdownEvent.Wait()
- uid: System.Threading.CountdownEvent.Wait(System.Int32)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Wait(Int32)
  nameWithType: CountdownEvent.Wait(Int32)
  fullName: System.Threading.CountdownEvent.Wait(Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Wait(CancellationToken)
  nameWithType: CountdownEvent.Wait(CancellationToken)
  fullName: System.Threading.CountdownEvent.Wait(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.CountdownEvent.Wait(System.TimeSpan)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Wait(TimeSpan)
  nameWithType: CountdownEvent.Wait(TimeSpan)
  fullName: System.Threading.CountdownEvent.Wait(TimeSpan)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Wait(Int32,CancellationToken)
  nameWithType: CountdownEvent.Wait(Int32,CancellationToken)
  fullName: System.Threading.CountdownEvent.Wait(Int32,CancellationToken)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: Wait(TimeSpan,CancellationToken)
  nameWithType: CountdownEvent.Wait(TimeSpan,CancellationToken)
  fullName: System.Threading.CountdownEvent.Wait(TimeSpan,CancellationToken)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.CountdownEvent.WaitHandle
  parent: System.Threading.CountdownEvent
  isExternal: false
  name: WaitHandle
  nameWithType: CountdownEvent.WaitHandle
  fullName: System.Threading.CountdownEvent.WaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Threading.CountdownEvent.AddCount*
  parent: System.Threading.CountdownEvent
  isExternal: false
  nameWithType: CountdownEvent.
- uid: System.Threading.CountdownEvent.Dispose*
  parent: System.Threading.CountdownEvent
  isExternal: false
  nameWithType: CountdownEvent.
- uid: System.Threading.CountdownEvent.Reset*
  parent: System.Threading.CountdownEvent
  isExternal: false
  nameWithType: CountdownEvent.
- uid: System.Threading.CountdownEvent.Signal*
  parent: System.Threading.CountdownEvent
  isExternal: false
  nameWithType: CountdownEvent.
- uid: System.Threading.CountdownEvent.TryAddCount*
  parent: System.Threading.CountdownEvent
  isExternal: false
  nameWithType: CountdownEvent.
- uid: System.Threading.CountdownEvent.Wait*
  parent: System.Threading.CountdownEvent
  isExternal: false
  nameWithType: CountdownEvent.
