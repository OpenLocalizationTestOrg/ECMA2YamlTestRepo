### YamlMime:ManagedReference
items:
- uid: System.Threading.ManualResetEventSlim
  id: ManualResetEventSlim
  children:
  - System.Threading.ManualResetEventSlim.#ctor
  - System.Threading.ManualResetEventSlim.#ctor(System.Boolean)
  - System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)
  - System.Threading.ManualResetEventSlim.Dispose
  - System.Threading.ManualResetEventSlim.Dispose(System.Boolean)
  - System.Threading.ManualResetEventSlim.IsSet
  - System.Threading.ManualResetEventSlim.Reset
  - System.Threading.ManualResetEventSlim.Set
  - System.Threading.ManualResetEventSlim.SpinCount
  - System.Threading.ManualResetEventSlim.Wait
  - System.Threading.ManualResetEventSlim.Wait(System.Int32)
  - System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)
  - System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)
  - System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.ManualResetEventSlim.WaitHandle
  langs:
  - csharp
  name: ManualResetEventSlim
  nameWithType: ManualResetEventSlim
  fullName: System.Threading.ManualResetEventSlim
  type: Class
  summary: Provides a slimmed down version of <see cref="T:System.Threading.ManualResetEvent">.
  remarks: You can use this class for better performance than <xref:System.Threading.ManualResetEvent> when wait times are expected to be very short, and when the event does not cross a process boundary. ManualResetEventSlim uses busy spinning for a short time while it waits for the event to become signaled. When wait times are short, spinning can be much less expensive than waiting by using wait handles. However, if the event does not become signaled within a certain period of time, ManualResetEventSlim resorts to a regular event handle wait.
  example:
  - "The following example shows how to use a ManualResetEventSlim. For more information about the use of `SpinCount` and other best practices concerning the use of this type, see [ManualResetEvent and ManualResetEventSlim](../Topic/ManualResetEvent%20and%20ManualResetEventSlim.md).  \n  \n [!CODE [System.Threading.ManualResetEventSlim#01](../CodeSnippet/VS_Snippets_CLR_System/system.threading.manualreseteventslim#01)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Set = {IsSet}")]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class ManualResetEventSlim : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.#ctor
  id: '#ctor'
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: ManualResetEventSlim()
  nameWithType: ManualResetEventSlim.ManualResetEventSlim()
  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim"> class with an initial state of nonsignaled.
  remarks: To be added.
  syntax:
    content: public ManualResetEventSlim ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: ManualResetEventSlim(Boolean)
  nameWithType: ManualResetEventSlim.ManualResetEventSlim(Boolean)
  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim"> class with a Boolean value indicating whether to set the intial state to signaled.
  remarks: To be added.
  syntax:
    content: public ManualResetEventSlim (bool initialState);
    parameters:
    - id: initialState
      type: System.Boolean
      description: true to set the initial state signaled; false to set the initial state to nonsignaled.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)
  id: '#ctor(System.Boolean,System.Int32)'
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: ManualResetEventSlim(Boolean,Int32)
  nameWithType: ManualResetEventSlim.ManualResetEventSlim(Boolean,Int32)
  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim(Boolean,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Initializes a new instance of the <see cref="T:System.Threading.ManualResetEventSlim"> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count.
  remarks: To be added.
  syntax:
    content: public ManualResetEventSlim (bool initialState, int spinCount);
    parameters:
    - id: initialState
      type: System.Boolean
      description: true to set the initial state to signaled; false to set the initial state to nonsignaled.
    - id: spinCount
      type: System.Int32
      description: The number of spin waits that will occur before falling back to a kernel-based wait operation.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.Dispose
  id: Dispose
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: Dispose()
  nameWithType: ManualResetEventSlim.Dispose()
  fullName: System.Threading.ManualResetEventSlim.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases all resources used by the current instance of the <see cref="T:System.Threading.ManualResetEventSlim"> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.Threading.ManualResetEventSlim>. The `Dispose` method leaves the <xref:System.Threading.ManualResetEventSlim> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.ManualResetEventSlim> so the garbage collector can reclaim the memory that the <xref:System.Threading.ManualResetEventSlim> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md) and [Implementing a Dispose Method](../Topic/Implementing%20a%20Dispose%20Method.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.ManualResetEventSlim>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ManualResetEventSlim> object's `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.ManualResetEventSlim.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ManualResetEventSlim.Dispose(Boolean)
  fullName: System.Threading.ManualResetEventSlim.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases the unmanaged resources used by the <see cref="T:System.Threading.ManualResetEventSlim">, and optionally releases the managed resources.
  remarks: Unlike most of the members of <xref:System.Threading.ManualResetEventSlim>, Dispose is not thread-safe and may not be used concurrently with other members of this instance.
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
  overload: System.Threading.ManualResetEventSlim.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.IsSet
  id: IsSet
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: IsSet
  nameWithType: ManualResetEventSlim.IsSet
  fullName: System.Threading.ManualResetEventSlim.IsSet
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets whether the event is set.
  remarks: To be added.
  syntax:
    content: public bool IsSet { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.Reset
  id: Reset
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: Reset()
  nameWithType: ManualResetEventSlim.Reset()
  fullName: System.Threading.ManualResetEventSlim.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Sets the state of the event to nonsignaled, which causes threads to block.
  remarks: Reset can be called concurrently with all members except <xref:System.Threading.ManualResetEventSlim.WaitHandle%2A>.
  syntax:
    content: public void Reset ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.Set
  id: Set
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: Set()
  nameWithType: ManualResetEventSlim.Set()
  fullName: System.Threading.ManualResetEventSlim.Set()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.
  remarks: To be added.
  syntax:
    content: public void Set ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.SpinCount
  id: SpinCount
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: SpinCount
  nameWithType: ManualResetEventSlim.SpinCount
  fullName: System.Threading.ManualResetEventSlim.SpinCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.
  remarks: To be added.
  syntax:
    content: public int SpinCount { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.Wait
  id: Wait
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: Wait()
  nameWithType: ManualResetEventSlim.Wait()
  fullName: System.Threading.ManualResetEventSlim.Wait()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"> is set.
  remarks: The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.
  syntax:
    content: public void Wait ();
    parameters: []
  overload: System.Threading.ManualResetEventSlim.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: Wait(Int32)
  nameWithType: ManualResetEventSlim.Wait(Int32)
  fullName: System.Threading.ManualResetEventSlim.Wait(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"> is set, using a 32-bit signed integer to measure the time interval.
  remarks: To be added.
  syntax:
    content: public bool Wait (int millisecondsTimeout);
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite">(-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Threading.ManualResetEventSlim"> was set; otherwise, `false`.'
  overload: System.Threading.ManualResetEventSlim.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: Wait(CancellationToken)
  nameWithType: ManualResetEventSlim.Wait(CancellationToken)
  fullName: System.Threading.ManualResetEventSlim.Wait(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"> receives a signal, while observing a <xref:System.Threading.CancellationToken>.
  remarks: The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.
  syntax:
    content: public void Wait (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken"> to observe.
  overload: System.Threading.ManualResetEventSlim.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: Wait(TimeSpan)
  nameWithType: ManualResetEventSlim.Wait(TimeSpan)
  fullName: System.Threading.ManualResetEventSlim.Wait(TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"> is set, using a <xref:System.TimeSpan> to measure the time interval.
  remarks: To be added.
  syntax:
    content: public bool Wait (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan"> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Threading.ManualResetEventSlim"> was set; otherwise, `false`.'
  overload: System.Threading.ManualResetEventSlim.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: Wait(Int32,CancellationToken)
  nameWithType: ManualResetEventSlim.Wait(Int32,CancellationToken)
  fullName: System.Threading.ManualResetEventSlim.Wait(Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"> is set, using a 32-bit signed integer to measure the time interval, while observing a <xref:System.Threading.CancellationToken>.
  remarks: To be added.
  syntax:
    content: public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite">(-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken"> to observe.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Threading.ManualResetEventSlim"> was set; otherwise, `false`.'
  overload: System.Threading.ManualResetEventSlim.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  id: Wait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: Wait(TimeSpan,CancellationToken)
  nameWithType: ManualResetEventSlim.Wait(TimeSpan,CancellationToken)
  fullName: System.Threading.ManualResetEventSlim.Wait(TimeSpan,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Blocks the current thread until the current <see cref="T:System.Threading.ManualResetEventSlim"> is set, using a <xref:System.TimeSpan> to measure the time interval, while observing a <xref:System.Threading.CancellationToken>.
  remarks: To be added.
  syntax:
    content: public bool Wait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan"> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"> that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken"> to observe.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Threading.ManualResetEventSlim"> was set; otherwise, `false`.'
  overload: System.Threading.ManualResetEventSlim.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEventSlim.WaitHandle
  id: WaitHandle
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  name: WaitHandle
  nameWithType: ManualResetEventSlim.WaitHandle
  fullName: System.Threading.ManualResetEventSlim.WaitHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets the underlying <see cref="T:System.Threading.WaitHandle"> object for this <xref:System.Threading.ManualResetEventSlim>.
  remarks: Accessing this property forces initialization of an underlying event object if one hasn't already been created. To simply wait on this <xref:System.Threading.ManualResetEventSlim>, the public Wait methods should be preferred. It is recommended to dispose the <xref:System.Threading.ManualResetEventSlim> instance after accessing this property, in order to prevent a resource leak.
  syntax:
    content: public System.Threading.WaitHandle WaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.ManualResetEventSlim.#ctor
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: ManualResetEventSlim()
  nameWithType: ManualResetEventSlim.ManualResetEventSlim()
  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim()
- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean)
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: ManualResetEventSlim(Boolean)
  nameWithType: ManualResetEventSlim.ManualResetEventSlim(Boolean)
  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: ManualResetEventSlim(Boolean,Int32)
  nameWithType: ManualResetEventSlim.ManualResetEventSlim(Boolean,Int32)
  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim(Boolean,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.ManualResetEventSlim.Dispose
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: Dispose()
  nameWithType: ManualResetEventSlim.Dispose()
  fullName: System.Threading.ManualResetEventSlim.Dispose()
- uid: System.Threading.ManualResetEventSlim.Dispose(System.Boolean)
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ManualResetEventSlim.Dispose(Boolean)
  fullName: System.Threading.ManualResetEventSlim.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.ManualResetEventSlim.IsSet
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: IsSet
  nameWithType: ManualResetEventSlim.IsSet
  fullName: System.Threading.ManualResetEventSlim.IsSet
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.ManualResetEventSlim.Reset
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: Reset()
  nameWithType: ManualResetEventSlim.Reset()
  fullName: System.Threading.ManualResetEventSlim.Reset()
- uid: System.Threading.ManualResetEventSlim.Set
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: Set()
  nameWithType: ManualResetEventSlim.Set()
  fullName: System.Threading.ManualResetEventSlim.Set()
- uid: System.Threading.ManualResetEventSlim.SpinCount
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: SpinCount
  nameWithType: ManualResetEventSlim.SpinCount
  fullName: System.Threading.ManualResetEventSlim.SpinCount
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.ManualResetEventSlim.Wait
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: Wait()
  nameWithType: ManualResetEventSlim.Wait()
  fullName: System.Threading.ManualResetEventSlim.Wait()
- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32)
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: Wait(Int32)
  nameWithType: ManualResetEventSlim.Wait(Int32)
  fullName: System.Threading.ManualResetEventSlim.Wait(Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: Wait(CancellationToken)
  nameWithType: ManualResetEventSlim.Wait(CancellationToken)
  fullName: System.Threading.ManualResetEventSlim.Wait(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: Wait(TimeSpan)
  nameWithType: ManualResetEventSlim.Wait(TimeSpan)
  fullName: System.Threading.ManualResetEventSlim.Wait(TimeSpan)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: Wait(Int32,CancellationToken)
  nameWithType: ManualResetEventSlim.Wait(Int32,CancellationToken)
  fullName: System.Threading.ManualResetEventSlim.Wait(Int32,CancellationToken)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: Wait(TimeSpan,CancellationToken)
  nameWithType: ManualResetEventSlim.Wait(TimeSpan,CancellationToken)
  fullName: System.Threading.ManualResetEventSlim.Wait(TimeSpan,CancellationToken)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.ManualResetEventSlim.WaitHandle
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  name: WaitHandle
  nameWithType: ManualResetEventSlim.WaitHandle
  fullName: System.Threading.ManualResetEventSlim.WaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Threading.ManualResetEventSlim.Dispose*
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  nameWithType: ManualResetEventSlim.
- uid: System.Threading.ManualResetEventSlim.Wait*
  parent: System.Threading.ManualResetEventSlim
  isExternal: false
  nameWithType: ManualResetEventSlim.
