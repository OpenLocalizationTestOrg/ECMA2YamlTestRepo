### YamlMime:ManagedReference
items:
- uid: System.Threading.EventResetMode
  id: EventResetMode
  children:
  - System.Threading.EventResetMode.AutoReset
  - System.Threading.EventResetMode.ManualReset
  langs:
  - csharp
  name: EventResetMode
  nameWithType: EventResetMode
  fullName: System.Threading.EventResetMode
  type: Enum
  summary: Indicates whether an <see cref="T:System.Threading.EventWaitHandle"> is reset automatically or manually after receiving a signal.
  remarks: ''
  example:
  - "The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.  \n  \n The example starts five threads and allows them to block on an <xref:System.Threading.EventWaitHandle> created with the F:System.Threading.EventResetMode.AutoReset?qualifyHint=True&autoUpgrade=True flag, then releases one thread each time the user presses the ENTER key. The example then queues another five threads and releases them all using an T:System.Threading.EventWaitHandle?qualifyHint=False&autoUpgrade=True created with the F:System.Threading.EventResetMode.ManualReset?qualifyHint=True&autoUpgrade=True flag.  \n  \n [!CODE [System.Threading.WaitHandle.SignalAndWait#1](../CodeSnippet/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public enum EventResetMode
  inheritance:
  - System.Object
  - System.ValueType
  - System.Enum
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventResetMode.AutoReset
  id: AutoReset
  parent: System.Threading.EventResetMode
  langs:
  - csharp
  name: AutoReset
  nameWithType: EventResetMode.AutoReset
  fullName: System.Threading.EventResetMode.AutoReset
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: When signaled, the T:System.Threading.EventWaitHandle?qualifyHint=False&autoUpgrade=True resets automatically after releasing a single thread. If no threads are waiting, the T:System.Threading.EventWaitHandle?qualifyHint=False&autoUpgrade=True remains signaled until a thread blocks, and resets after releasing the thread.
  syntax:
    content: AutoReset
    return:
      type: System.Threading.EventResetMode
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventResetMode.ManualReset
  id: ManualReset
  parent: System.Threading.EventResetMode
  langs:
  - csharp
  name: ManualReset
  nameWithType: EventResetMode.ManualReset
  fullName: System.Threading.EventResetMode.ManualReset
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: When signaled, the T:System.Threading.EventWaitHandle?qualifyHint=False&autoUpgrade=True releases all waiting threads and remains signaled until it is manually reset.
  syntax:
    content: ManualReset
    return:
      type: System.Threading.EventResetMode
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Threading.EventResetMode.AutoReset
  parent: System.Threading.EventResetMode
  isExternal: false
  name: AutoReset
  nameWithType: EventResetMode.AutoReset
  fullName: System.Threading.EventResetMode.AutoReset
- uid: System.Threading.EventResetMode
  parent: System.Threading
  isExternal: false
  name: EventResetMode
  nameWithType: EventResetMode
  fullName: System.Threading.EventResetMode
- uid: System.Threading.EventResetMode.ManualReset
  parent: System.Threading.EventResetMode
  isExternal: false
  name: ManualReset
  nameWithType: EventResetMode.ManualReset
  fullName: System.Threading.EventResetMode.ManualReset
- uid: System.Threading.EventResetMode
  parent: System.Threading
  isExternal: false
  name: EventResetMode
  nameWithType: EventResetMode
  fullName: System.Threading.EventResetMode
