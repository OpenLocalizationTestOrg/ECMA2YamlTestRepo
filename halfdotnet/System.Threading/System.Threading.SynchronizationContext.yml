### YamlMime:ManagedReference
items:
- uid: System.Threading.SynchronizationContext
  id: SynchronizationContext
  children:
  - System.Threading.SynchronizationContext.#ctor
  - System.Threading.SynchronizationContext.CreateCopy
  - System.Threading.SynchronizationContext.Current
  - System.Threading.SynchronizationContext.IsWaitNotificationRequired
  - System.Threading.SynchronizationContext.OperationCompleted
  - System.Threading.SynchronizationContext.OperationStarted
  - System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
  - System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)
  - System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  - System.Threading.SynchronizationContext.SetWaitNotificationRequired
  - System.Threading.SynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)
  - System.Threading.SynchronizationContext.WaitHelper(System.IntPtr[],System.Boolean,System.Int32)
  langs:
  - csharp
  name: SynchronizationContext
  nameWithType: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
  type: Class
  summary: Provides the basic functionality for propagating a synchronization context in various synchronization models.
  remarks: "The SynchronizationContext class is a base class that provides a free-threaded context with no synchronization.  \n  \n The purpose of the synchronization model implemented by this class is to allow the internal asynchronous/synchronous operations of the common language runtime to behave properly with different synchronization models. This model also simplifies some of the requirements that managed applications have had to follow in order to work correctly under different synchronization environments.  \n  \n Providers of synchronization models can extend this class and provide their own implementations for these methods.  \n  \n For more information about synchronization contexts, see the article [It's All About the SynchronizationContext](http://msdn.microsoft.com/magazine/gg598924.aspx) in the MSDN Magazine."
  syntax:
    content: public class SynchronizationContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.#ctor
  id: '#ctor'
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: SynchronizationContext()
  nameWithType: SynchronizationContext.SynchronizationContext()
  fullName: System.Threading.SynchronizationContext.SynchronizationContext()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Creates a new instance of the <see cref="T:System.Threading.SynchronizationContext"> class.
  remarks: The default constructor performs no parameter initialization.
  syntax:
    content: public SynchronizationContext ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: SynchronizationContext.CreateCopy()
  fullName: System.Threading.SynchronizationContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: When overridden in a derived class, creates a copy of the synchronization context.
  remarks: The default implementation returns an empty <xref:System.Threading.SynchronizationContext> object.
  syntax:
    content: public virtual System.Threading.SynchronizationContext CreateCopy ();
    parameters: []
    return:
      type: System.Threading.SynchronizationContext
      description: A new <see cref="T:System.Threading.SynchronizationContext"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.Current
  id: Current
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: Current
  nameWithType: SynchronizationContext.Current
  fullName: System.Threading.SynchronizationContext.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Gets the synchronization context for the current thread.
  remarks: This property is useful for propagating a synchronization context from one thread to another.
  syntax:
    content: public static System.Threading.SynchronizationContext Current { get; }
    return:
      type: System.Threading.SynchronizationContext
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.IsWaitNotificationRequired
  id: IsWaitNotificationRequired
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: IsWaitNotificationRequired()
  nameWithType: SynchronizationContext.IsWaitNotificationRequired()
  fullName: System.Threading.SynchronizationContext.IsWaitNotificationRequired()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Determines if wait notification is required.
  remarks: To be added.
  syntax:
    content: public bool IsWaitNotificationRequired ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if wait notification is required; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.OperationCompleted
  id: OperationCompleted
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: OperationCompleted()
  nameWithType: SynchronizationContext.OperationCompleted()
  fullName: System.Threading.SynchronizationContext.OperationCompleted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: When overridden in a derived class, responds to the notification that an operation has completed.
  remarks: The default implementation contains no code. You can optionally override this method to provide code that executes when an operation is complete.
  syntax:
    content: public virtual void OperationCompleted ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.OperationStarted
  id: OperationStarted
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: OperationStarted()
  nameWithType: SynchronizationContext.OperationStarted()
  fullName: System.Threading.SynchronizationContext.OperationStarted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: When overridden in a derived class, responds to the notification that an operation has started.
  remarks: The default implementation contains no code. You can optionally override this method to provide code that executes when an operation starts.
  syntax:
    content: public virtual void OperationStarted ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
  id: Post(System.Threading.SendOrPostCallback,System.Object)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: Post(SendOrPostCallback,Object)
  nameWithType: SynchronizationContext.Post(SendOrPostCallback,Object)
  fullName: System.Threading.SynchronizationContext.Post(SendOrPostCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: When overridden in a derived class, dispatches an asynchronous message to a synchronization context.
  remarks: The Post method starts an asynchronous request to post a message.
  syntax:
    content: public virtual void Post (System.Threading.SendOrPostCallback d, object state);
    parameters:
    - id: d
      type: System.Threading.SendOrPostCallback
      description: The <see cref="T:System.Threading.SendOrPostCallback"> delegate to call.
    - id: state
      type: System.Object
      description: The object passed to the delegate.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)
  id: Send(System.Threading.SendOrPostCallback,System.Object)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: Send(SendOrPostCallback,Object)
  nameWithType: SynchronizationContext.Send(SendOrPostCallback,Object)
  fullName: System.Threading.SynchronizationContext.Send(SendOrPostCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: When overridden in a derived class, dispatches a synchronous message to a synchronization context.
  remarks: The Send method starts a synchronous request to send a message.
  syntax:
    content: public virtual void Send (System.Threading.SendOrPostCallback d, object state);
    parameters:
    - id: d
      type: System.Threading.SendOrPostCallback
      description: The <see cref="T:System.Threading.SendOrPostCallback"> delegate to call.
    - id: state
      type: System.Object
      description: The object passed to the delegate.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  id: SetSynchronizationContext(System.Threading.SynchronizationContext)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: SetSynchronizationContext(SynchronizationContext)
  nameWithType: SynchronizationContext.SetSynchronizationContext(SynchronizationContext)
  fullName: System.Threading.SynchronizationContext.SetSynchronizationContext(SynchronizationContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Sets the current synchronization context.
  remarks: To be added.
  syntax:
    content: public static void SetSynchronizationContext (System.Threading.SynchronizationContext syncContext);
    parameters:
    - id: syncContext
      type: System.Threading.SynchronizationContext
      description: The <see cref="T:System.Threading.SynchronizationContext"> object to be set.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.SetWaitNotificationRequired
  id: SetWaitNotificationRequired
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: SetWaitNotificationRequired()
  nameWithType: SynchronizationContext.SetWaitNotificationRequired()
  fullName: System.Threading.SynchronizationContext.SetWaitNotificationRequired()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Sets notification that wait notification is required and prepares the callback method so it can be called more reliably when a wait occurs.
  remarks: To be added.
  syntax:
    content: protected void SetWaitNotificationRequired ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)
  id: Wait(System.IntPtr[],System.Boolean,System.Int32)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: Wait(IntPtr[],Boolean,Int32)
  nameWithType: SynchronizationContext.Wait(IntPtr[],Boolean,Int32)
  fullName: System.Threading.SynchronizationContext.Wait(IntPtr[],Boolean,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Waits for any or all the elements in the specified array to receive a signal.
  remarks: The Wait method calls the external declaration <xref:System.Threading.SynchronizationContext.WaitHelper%2A> to perform the wait activity.  Override the Wait method to change the wait behavior for the synchronization context.
  syntax:
    content: public virtual int Wait (IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout);
    parameters:
    - id: waitHandles
      type: System.IntPtr[]
      description: An array of type <see cref="T:System.IntPtr"> that contains the native operating system handles.
    - id: waitAll
      type: System.Boolean
      description: '`true` to wait for all handles; `false` to wait for any handle.'
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: The array index of the object that satisfied the wait.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.SynchronizationContext.WaitHelper(System.IntPtr[],System.Boolean,System.Int32)
  id: WaitHelper(System.IntPtr[],System.Boolean,System.Int32)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: WaitHelper(IntPtr[],Boolean,Int32)
  nameWithType: SynchronizationContext.WaitHelper(IntPtr[],Boolean,Int32)
  fullName: System.Threading.SynchronizationContext.WaitHelper(IntPtr[],Boolean,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Helper function that waits for any or all the elements in the specified array to receive a signal.
  remarks: WaitHelper is a declaration for an unmanaged external helper function. WaitHelper is called by the <xref:System.Threading.SynchronizationContext.Wait%2A> method to wait for a signal for the specified operating system handles.
  syntax:
    content: protected static int WaitHelper (IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout);
    parameters:
    - id: waitHandles
      type: System.IntPtr[]
      description: An array of type <see cref="T:System.IntPtr"> that contains the native operating system handles.
    - id: waitAll
      type: System.Boolean
      description: '`true` to wait for all handles;  `false` to wait for any handle.'
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref:System.Threading.Timeout.Infinite?displayProperty=fullName> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: The array index of the object that satisfied the wait.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.SynchronizationContext.#ctor
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SynchronizationContext()
  nameWithType: SynchronizationContext.SynchronizationContext()
  fullName: System.Threading.SynchronizationContext.SynchronizationContext()
- uid: System.Threading.SynchronizationContext.CreateCopy
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: CreateCopy()
  nameWithType: SynchronizationContext.CreateCopy()
  fullName: System.Threading.SynchronizationContext.CreateCopy()
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  name: SynchronizationContext
  nameWithType: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
- uid: System.Threading.SynchronizationContext.Current
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Current
  nameWithType: SynchronizationContext.Current
  fullName: System.Threading.SynchronizationContext.Current
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  name: SynchronizationContext
  nameWithType: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
- uid: System.Threading.SynchronizationContext.IsWaitNotificationRequired
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: IsWaitNotificationRequired()
  nameWithType: SynchronizationContext.IsWaitNotificationRequired()
  fullName: System.Threading.SynchronizationContext.IsWaitNotificationRequired()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.SynchronizationContext.OperationCompleted
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: OperationCompleted()
  nameWithType: SynchronizationContext.OperationCompleted()
  fullName: System.Threading.SynchronizationContext.OperationCompleted()
- uid: System.Threading.SynchronizationContext.OperationStarted
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: OperationStarted()
  nameWithType: SynchronizationContext.OperationStarted()
  fullName: System.Threading.SynchronizationContext.OperationStarted()
- uid: System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Post(SendOrPostCallback,Object)
  nameWithType: SynchronizationContext.Post(SendOrPostCallback,Object)
  fullName: System.Threading.SynchronizationContext.Post(SendOrPostCallback,Object)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: false
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Send(SendOrPostCallback,Object)
  nameWithType: SynchronizationContext.Send(SendOrPostCallback,Object)
  fullName: System.Threading.SynchronizationContext.Send(SendOrPostCallback,Object)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: false
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SetSynchronizationContext(SynchronizationContext)
  nameWithType: SynchronizationContext.SetSynchronizationContext(SynchronizationContext)
  fullName: System.Threading.SynchronizationContext.SetSynchronizationContext(SynchronizationContext)
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  name: SynchronizationContext
  nameWithType: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
- uid: System.Threading.SynchronizationContext.SetWaitNotificationRequired
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SetWaitNotificationRequired()
  nameWithType: SynchronizationContext.SetWaitNotificationRequired()
  fullName: System.Threading.SynchronizationContext.SetWaitNotificationRequired()
- uid: System.Threading.SynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Wait(IntPtr[],Boolean,Int32)
  nameWithType: SynchronizationContext.Wait(IntPtr[],Boolean,Int32)
  fullName: System.Threading.SynchronizationContext.Wait(IntPtr[],Boolean,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr[]
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.SynchronizationContext.WaitHelper(System.IntPtr[],System.Boolean,System.Int32)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: WaitHelper(IntPtr[],Boolean,Int32)
  nameWithType: SynchronizationContext.WaitHelper(IntPtr[],Boolean,Int32)
  fullName: System.Threading.SynchronizationContext.WaitHelper(IntPtr[],Boolean,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr[]
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
