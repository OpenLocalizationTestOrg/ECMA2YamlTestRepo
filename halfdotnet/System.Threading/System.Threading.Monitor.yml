### YamlMime:ManagedReference
items:
- uid: System.Threading.Monitor
  id: Monitor
  children:
  - System.Threading.Monitor.Enter(System.Object)
  - System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  - System.Threading.Monitor.Exit(System.Object)
  - System.Threading.Monitor.IsEntered(System.Object)
  - System.Threading.Monitor.Pulse(System.Object)
  - System.Threading.Monitor.PulseAll(System.Object)
  - System.Threading.Monitor.TryEnter(System.Object)
  - System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  - System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  - System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  - System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  - System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  - System.Threading.Monitor.Wait(System.Object)
  - System.Threading.Monitor.Wait(System.Object,System.Int32)
  - System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  - System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)
  - System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)
  langs:
  - csharp
  name: Monitor
  nameWithType: Monitor
  fullName: System.Threading.Monitor
  type: Class
  summary: Provides a mechanism that synchronizes access to objects.
  remarks: "The Monitor class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName>, <xref:System.Threading.Monitor.TryEnter%2A?displayProperty=fullName>, and <xref:System.Threading.Monitor.Exit%2A?displayProperty=fullName> methods. Object locks provide the ability to restrict access to a block of code, commonly called a critical section. While a thread owns the lock for an object, no other thread can acquire that lock. You can also use the Monitor class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.  \n  \n In this article:  \n  \n [The Monitor class: An overview](#Overview)   \n [The lock object](#Lock)   \n [The critical section](#CriticalSection)   \n [Pulse, PulseAll, and Wait](#Pulse)   \n [Monitors and wait handles](#WaitHandles)  \n  \n<a name=\"Overview\"></a>   \n## The Monitor class: An overview  \n Monitor has the following features:  \n  \n-   It is associated with an object on demand.  \n  \n-   It is unbound, which means it can be called directly from any context.  \n  \n-   An instance of the Monitor class cannot be created; the methods of the Monitor class are all static. Each method is passed the synchronized object that controls access to the critical section.  \n  \n> [!NOTE]\n>  Use the Monitor class to lock objects other than strings (that is, reference types other than <xref:System.String>), not value types. For details, see the overloads of the <xref:System.Threading.Monitor.Enter%2A> method and [The lock object](#Lock) section later in this article.  \n  \n The following table describes the actions that can be taken by threads that access synchronized objects:  \n  \n|Action|Description|  \n|------------|-----------------|  \n|<xref:System.Threading.Monitor.Enter%2A>, <xref:System.Threading.Monitor.TryEnter%2A>|Acquires a lock for an object. This action also marks the beginning of a critical section. No other thread can enter the critical section unless it is executing the instructions in the critical section using a different locked object.|  \n|<xref:System.Threading.Monitor.Wait%2A>|Releases the lock on an object in order to permit other threads to lock and access the object. The calling thread waits while another thread accesses the object. Pulse signals are used to notify waiting threads about changes to an object's state.|  \n|<xref:System.Threading.Monitor.Pulse%2A> (signal), <xref:System.Threading.Monitor.PulseAll%2A>|Sends a signal to one or more waiting threads. The signal notifies a waiting thread that the state of the locked object has changed, and the owner of the lock is ready to release the lock. The waiting thread is placed in the object's ready queue so that it might eventually receive the lock for the object. Once the thread has the lock, it can check the new state of the object to see if the required state has been reached.|  \n|<xref:System.Threading.Monitor.Exit%2A>|Releases the lock on an object. This action also marks the end of a critical section protected by the locked object.|  \n  \n Beginning with the [!INCLUDE[net_v40_long](../../add/includes/net-v40-long-md.md)], there are two sets of overloads for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.TryEnter%2A> methods. One set of overloads has a `ref` (in C#) or `ByRef` (in Visual Basic) <xref:System.Boolean> parameter that is atomically set to `true` if the lock is acquired, even if an exception is thrown when acquiring the lock. Use these overloads if it is critical to release the lock in all cases, even when the resources the lock is protecting might not be in a consistent state.  \n  \n<a name=\"Lock\"></a>   \n## The lock object  \n The Monitor class consists of `static` (in C#) or  `Shared` (in Visual Basic) methods that operate on an object that controls access to the critical section.  The following information is maintained for each synchronized object:  \n  \n-   A reference to the thread that currently holds the lock.  \n  \n-   A reference to a ready queue, which contains the threads that are ready to obtain the lock.  \n  \n-   A reference to a waiting queue, which contains the threads that are waiting for notification of a change in the state of the locked object.  \n  \n Monitor locks objects (that is, reference types), not value types. While you can pass a value type to <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, it is boxed separately for each call. Since each call creates a separate object, <xref:System.Threading.Monitor.Enter%2A> never blocks, and the code it is supposedly protecting is not really synchronized. In addition, the object passed to <xref:System.Threading.Monitor.Exit%2A> is different from the object passed to <xref:System.Threading.Monitor.Enter%2A>, so Monitor throws <xref:System.Threading.SynchronizationLockException> exception with the message \"Object synchronization method was called from an unsynchronized block of code.\"  \n  \n The following example illustrates this problem. It launches ten tasks, each of which just sleeps for 250 milliseconds. Each task then updates a counter variable, `nTasks`, which is intended to count the number of tasks that actually launched and executed. Because `nTasks` is a global variable that can be updated by multiple tasks simultaneously, a monitor is used to protect it from simultaneous modification by multiple tasks. However, as the output from the example shows, each of the tasks throws a <xref:System.Threading.SynchronizationLockException> exception.  \n  \n [!CODE [Conceptual.Monitors#2](../CodeSnippet/VS_Snippets_CLR/conceptual.monitors#2)]  \n  \n Each task throws a <xref:System.Threading.SynchronizationLockException> exception because the `nTasks` variable is boxed before the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName> method in each task. In other words, each method call is passed a separate variable that is independent of the others. `nTasks` is boxed again in the call to the <xref:System.Threading.Monitor.Exit%2A?displayProperty=fullName> method. Once again, this creates ten new boxed variables, which are independent of each other, `nTasks`, and the ten boxed variables created in the call to the <xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName> method. The exception is thrown, then, because our code is attempting to release a lock on a newly created variable that was not previously locked.  \n  \n Although you can box a value type variable before calling <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A>, as shown in the following example, and pass the same boxed object to both methods, there is no advantage to doing this. Changes to the unboxed variable are not reflected in the boxed copy, and there is no way to change the value of the boxed copy.  \n  \n [!CODE [Conceptual.Monitors#3](../CodeSnippet/VS_Snippets_CLR/conceptual.monitors#3)]  \n  \n When selecting an object on which to synchronize, you should lock only on private or internal objects. Locking on external objects might result in deadlocks, because unrelated code could choose the same objects to lock on for different purposes.  \n  \n Note that you can synchronize on an object in multiple application domains if the object used for the lock derives from <xref:System.MarshalByRefObject>.  \n  \n<a name=\"CriticalSection\"></a>   \n## The critical section  \n Use the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods to mark the beginning and end of a critical section.  \n  \n> [!NOTE]\n>  The functionality provided by the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> methods is identical to that provided by the [lock](../Topic/lock%20Statement%20\\(C%23%20Reference\\).md) statement in C# and the [SyncLock](../Topic/SyncLock%20Statement.md) statement in Visual Basic, except that the language constructs wrap the <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29?displayProperty=fullName> method overload and the <xref:System.Threading.Monitor.Exit%2A?displayProperty=fullName> method in a `try`â€¦`finally` block to ensure that the monitor is released.  \n  \n If the critical section is a set of contiguous instructions, then the lock acquired by the <xref:System.Threading.Monitor.Enter%2A> method guarantees that only a single thread can execute the enclosed code with the locked object. In this case, we recommend that you place that code in a `try` block and place the call to the <xref:System.Threading.Monitor.Exit%2A> method in a `finally` block. This ensures that the lock is released even if an exception occurs. The following code fragment illustrates this pattern.  \n  \n [!CODE [System.Threading.Monitor.Class#2](../CodeSnippet/VS_Snippets_CLR_System/system.threading.monitor.class#2)]  \n  \n This facility is typically used to synchronize access to a static or instance method of a class.  \n  \n If a critical section spans an entire method, the locking facility can be achieved by placing the <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=fullName> on the method, and specifying the <xref:System.Runtime.CompilerServices.MethodImplOptions> value in the constructor of <xref:System.Runtime.CompilerServices.MethodImplAttribute?displayProperty=fullName>. When you use this attribute, the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> method calls are not needed. The following code fragment illustrates this pattern:  \n  \n [!CODE [System.Threading.Monitor.Class#3](../CodeSnippet/VS_Snippets_CLR_System/system.threading.monitor.class#3)]  \n  \n Note that the attribute causes the current thread to hold the lock until the method returns; if the lock can be released sooner, use the Monitor class, the C# [lock](../Topic/lock%20Statement%20\\(C%23%20Reference\\).md) statement, or the Visual Basic [SyncLock](../Topic/SyncLock%20Statement.md) statement inside of the method instead of the attribute.  \n  \n While it is possible for the <xref:System.Threading.Monitor.Enter%2A> and <xref:System.Threading.Monitor.Exit%2A> statements that lock and release a given object to cross member or class boundaries or both, this practice is not recommended.  \n  \n<a name=\"Pulse\"></a>   \n## Pulse, PulseAll, and Wait  \n Once a thread owns the lock and has entered the critical section that the lock protects, it can call the <xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName>, <xref:System.Threading.Monitor.Pulse%2A?displayProperty=fullName>, and <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=fullName> methods.  \n  \n <xref:System.Threading.Monitor.Wait%2A> releases the lock if it is held, allows a waiting thread or threads to obtain the lock and enter the critical section,   and waits to be notified by a call to the <xref:System.Threading.Monitor.Pulse%2A?displayProperty=fullName> or <xref:System.Threading.Monitor.PulseAll%2A?displayProperty=fullName> method. When <xref:System.Threading.Monitor.Wait%2A> is notified, it returns and obtains the lock again.  \n  \n Both <xref:System.Threading.Monitor.Pulse%2A> and <xref:System.Threading.Monitor.PulseAll%2A> signal for the next thread in the wait queue to proceed.  \n  \n<a name=\"WaitHandles\"></a>   \n## Monitors and wait handles  \n It is important to note the distinction between the use of the Monitor class and <xref:System.Threading.WaitHandle> objects.  \n  \n-   The Monitor class is purely managed, fully portable, and might be more efficient in terms of operating-system resource requirements.  \n  \n-   <xref:System.Threading.WaitHandle> objects represent operating-system waitable objects, are useful for synchronizing between managed and unmanaged code, and expose some advanced operating-system features like the ability to wait on many objects at once."
  example:
  - "The following example uses the Monitor class to synchronize access to a single instance of a random number generator represented by the <xref:System.Random> class. The example creates ten tasks, each of which executes asynchronously on a thread pool thread. Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum. After all tasks have executed, these two values are then used to calculate the overall mean.  \n  \n [!CODE [System.Threading.Monitor.Class#1](../CodeSnippet/VS_Snippets_CLR_System/system.threading.monitor.class#1)]  \n  \n Because they can be accessed from any task running on a thread pool thread, access to the variables `total` and `n` must also be synchronized. The <xref:System.Threading.Interlocked.Add%2A?displayProperty=fullName> method is used for this purpose.  \n  \n The following example demonstrates the combined use of the Monitor class (implemented with the `lock` or `SyncLock` language construct), the <xref:System.Threading.Interlocked> class, and the <xref:System.Threading.AutoResetEvent> class. It defines two `internal` (in C#) or `Friend` (in Visual Basic) classes, `SyncResource` and `UnSyncResource`, that respectively provide synchronized and unsynchronized access to a resource. To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName> property is even, the method calls <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> to introduce a delay of 2,000 milliseconds. Note that, because the `SyncResource` class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock. This prevents malicious code from taking a lock on a public object.  \n  \n [!CODE [Conceptual.Monitors#1](../CodeSnippet/VS_Snippets_CLR/conceptual.monitors#1)]  \n  \n The example defines a variable, `numOps`, that defines the number of threads that will attempt to access the resource. The application thread calls the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method for synchronized and unsynchronized access five times each. The <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method has a single parameter, a delegate that accepts no parameters and returns no value. For synchronized access, it invokes the `SyncUpdateResource` method; for unsynchronized access, it invokes the `UnSyncUpdateResource` method. After each set of method calls, the application thread calls the [AutoResetEvent.WaitOne](https://msdn.microsoft.com/library/58195swd.aspx) method so that it blocks until the <xref:System.Threading.AutoResetEvent> instance is signaled.  \n  \n Each call to the `SyncUpdateResource` method calls the internal `SyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=fullName> method to decrement the `numOps` counter. The <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=fullName> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread's decremented value has been stored in the variable. When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the `SyncUpdateResource` method calls the [EventWaitHandle.Set](https://msdn.microsoft.com/library/system.threading.eventwaithandle.set.aspx) method, which signals the main thread to continue execution.  \n  \n Each call to the `UnSyncUpdateResource` method calls the internal `UnSyncResource.Access` method and then calls the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=fullName> method to decrement the `numOps` counter. Once again, the <xref:System.Threading.Interlocked.Decrement%2A?displayProperty=fullName> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread's decremented value has been assigned to the variable. When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the `UnSyncUpdateResource` method calls the [EventWaitHandle.Set](https://msdn.microsoft.com/library/system.threading.eventwaithandle.set.aspx) method, which signals the main thread to continue execution.  \n  \n As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor. On the other hand, without the lock, the `UnSyncResource.Access` method is called in the order in which threads reach it."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Monitor
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.Enter(System.Object)
  id: Enter(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: Enter(Object)
  nameWithType: Monitor.Enter(Object)
  fullName: System.Threading.Monitor.Enter(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Acquires an exclusive lock on the specified object.
  remarks: "Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the parameter. If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object. It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.  \n  \n Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types. When you pass a value type variable to `Enter`, it is boxed as an object. If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block. In this case, the code that `Monitor` is supposedly protecting is not protected. Furthermore, when you pass the variable to `Exit`, still another separate object is created. Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>. For more information, see the conceptual topic [Monitors](../Topic/Monitors.md).  \n  \n <xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object. A <xref:System.Threading.ThreadInterruptedException> will be thrown.  \n  \n Use a C# `try`â€¦`finally` block (`Try`â€¦`Finally` in Visual Basic) to ensure that you release the monitor, or use the C# `lock` statement (`SyncLock` statement in Visual Basic), which wraps the Enter and <xref:System.Threading.Monitor.Exit%2A> methods in a `try`â€¦`finally` block."
  example:
  - "The following example demonstrates how to use the `Enter` method.  \n  \n [!CODE [MonitorExmpl2#1](../CodeSnippet/VS_Snippets_CLR/MonitorExmpl2#1)]"
  syntax:
    content: public static void Enter (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to acquire the monitor lock.
  overload: System.Threading.Monitor.Enter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  id: Enter(System.Object,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: Enter(Object,Boolean)
  nameWithType: Monitor.Enter(Object,Boolean)
  fullName: System.Threading.Monitor.Enter(Object,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
  remarks: "Use `Enter` to acquire the <xref:System.Threading.Monitor> on the object passed as the  parameter. If another thread has executed an `Enter` on the object but has not yet executed the corresponding <xref:System.Threading.Monitor.Exit%2A>, the current thread will block until the other thread releases the object. It is legal for the same thread to invoke `Enter` more than once without it blocking; however, an equal number of `Exit` calls must be invoked before other threads waiting on the object will unblock.  \n  \n If the lock was not taken because an exception was thrown, the variable specified for the  parameter is `false` after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock. If this method returns without throwing an exception, the variable specified for the  parameter is always `true`, and there is no need to test it.  \n  \n Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types. When you pass a value type variable to `Enter`, it is boxed as an object. If you pass the same variable to `Enter` again, it is boxed as a separate object, and the thread does not block. In this case, the code that `Monitor` is supposedly protecting is not protected. Furthermore, when you pass the variable to `Exit`, another separate object is created. Because the object passed to `Exit` is different from the object passed to `Enter`, `Monitor` throws <xref:System.Threading.SynchronizationLockException>. For more information, see the conceptual topic [Monitors](../Topic/Monitors.md).  \n  \n <xref:System.Threading.Thread.Interrupt%2A> can interrupt threads that are waiting to enter a `Monitor` on an object. A <xref:System.Threading.ThreadInterruptedException> will be thrown."
  example:
  - "The following code shows the basic pattern for using the Enter method overload. This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) , even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.  \n  \n [!CODE [System.Threading.Monitor.Enter#2](../CodeSnippet/VS_Snippets_CLR_System/system.threading.monitor.enter#2)]"
  syntax:
    content: public static void Enter (object obj, ref bool lockTaken);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to wait.
    - id: lockTaken
      type: System.Boolean
      description: "The result of the attempt to acquire the lock, passed by reference. The input must be `false`. The output is `true` if the lock is acquired; otherwise, the output is `false`. The output is set even if an exception occurs during the attempt to acquire the lock.  \n  \n Note   If no exception occurs, the output of this method is always `true`."
  overload: System.Threading.Monitor.Enter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.Exit(System.Object)
  id: Exit(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: Exit(Object)
  nameWithType: Monitor.Exit(Object)
  fullName: System.Threading.Monitor.Exit(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases an exclusive lock on the specified object.
  remarks: "The calling thread must own the lock on the  parameter. If the calling thread owns the lock on the specified object, and has made an equal number of `Exit` and <xref:System.Threading.Monitor.Enter%2A> calls for the object, then the lock is released. If the calling thread has not invoked `Exit` as many times as `Enter`, the lock is not released.  \n  \n If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock. If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls `Exit`. To move one or more waiting threads into the ready queue, call <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> before invoking `Exit`."
  example:
  - "The following example demonstrates how to use the `Exit` method.  \n  \n [!CODE [MonitorExmpl2#1](../CodeSnippet/VS_Snippets_CLR/MonitorExmpl2#1)]"
  syntax:
    content: public static void Exit (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to release the lock.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.IsEntered(System.Object)
  id: IsEntered(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: IsEntered(Object)
  nameWithType: Monitor.IsEntered(Object)
  fullName: System.Threading.Monitor.IsEntered(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Determines whether the current thread holds the lock on the specified object.
  remarks: "This method works only for locks that are acquired by using the methods of the <xref:System.Threading.Monitor> class, or by using the C# `lock` statement or the Visual Basic `SyncLock` statement, which are implemented with <xref:System.Threading.Monitor>.  \n  \n Use this method with diagnostic tools, such as the <xref:System.Diagnostics.Debug.Assert%2A> method and the <xref:System.Diagnostics.Contracts.Contract> class, to debug locking issues that involve the <xref:System.Threading.Monitor>class."
  syntax:
    content: public static bool IsEntered (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to test.
    return:
      type: System.Boolean
      description: '`true` if the current thread holds the lock on ; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.Pulse(System.Object)
  id: Pulse(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: Pulse(Object)
  nameWithType: Monitor.Pulse(Object)
  fullName: System.Threading.Monitor.Pulse(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Notifies a thread in the waiting queue of a change in the locked object's state.
  remarks: "Only the current owner of the lock can signal a waiting object using `Pulse`.  \n  \n The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock. Upon receiving the pulse, the waiting thread is moved to the ready queue. When the thread that invoked `Pulse` releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.  \n  \n> [!IMPORTANT]\n>  The <xref:System.Threading.Monitor> class does not maintain state indicating that the Pulse method has been called. Thus, if you call Pulse when no threads are waiting, the next thread that calls <xref:System.Threading.Monitor.Wait%2A> blocks as if Pulse had never been called. If two threads are using Pulse and <xref:System.Threading.Monitor.Wait%2A> to interact, this could result in a deadlock. Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class: If you signal an <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, and there are no threads waiting, the <xref:System.Threading.AutoResetEvent> remains in a signaled state until a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, or <xref:System.Threading.WaitHandle.WaitAll%2A>. The <xref:System.Threading.AutoResetEvent> releases that thread and returns to the unsignaled state.  \n  \n Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.  \n  \n The `Pulse`, <xref:System.Threading.Monitor.PulseAll%2A>, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.  \n  \n To signal multiple threads, use the <xref:System.Threading.Monitor.PulseAll%2A> method."
  syntax:
    content: public static void Pulse (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object a thread is waiting for.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.PulseAll(System.Object)
  id: PulseAll(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: PulseAll(Object)
  nameWithType: Monitor.PulseAll(Object)
  fullName: System.Threading.Monitor.PulseAll(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Notifies all waiting threads of a change in the object's state.
  remarks: "The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object. After the signal is sent, the waiting threads are moved to the ready queue. When the thread that invoked `PulseAll` releases the lock, the next thread in the ready queue acquires the lock.  \n  \n Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.  \n  \n The <xref:System.Threading.Monitor.Pulse%2A>, `PulseAll`, and <xref:System.Threading.Monitor.Wait%2A> methods must be invoked from within a synchronized block of code.  \n  \n The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.  \n  \n To signal a single thread, use the `Pulse` method."
  syntax:
    content: public static void PulseAll (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object that sends the pulse.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.TryEnter(System.Object)
  id: TryEnter(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: TryEnter(Object)
  nameWithType: Monitor.TryEnter(Object)
  fullName: System.Threading.Monitor.TryEnter(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Attempts to acquire an exclusive lock on the specified object.
  remarks: "If successful, this method acquires an exclusive lock on the  parameter. This method returns immediately, whether or not the lock is available.  \n  \n This method is similar to <xref:System.Threading.Monitor.Enter%2A>, but it will never block the current thread. If the thread cannot enter without blocking, the method returns `false,`.  \n  \n> [!NOTE]\n>  Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types. For details, see the <xref:System.Threading.Monitor> article.  \n  \n To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`. The following code fragment shows the pattern used to call this method. Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  \n  \n [!CODE [System.Threading.Monitor.TryEnter#1](../CodeSnippet/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter#1)]"
  example:
  - "The following code example demonstrates how to use the `TryEnter` method.  \n  \n [!CODE [MonitorExmpl2#1](../CodeSnippet/VS_Snippets_CLR/MonitorExmpl2#1)]"
  syntax:
    content: public static bool TryEnter (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to acquire the lock.
    return:
      type: System.Boolean
      description: '`true` if the current thread acquires the lock; otherwise, `false`.'
  overload: System.Threading.Monitor.TryEnter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  id: TryEnter(System.Object,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: TryEnter(Object,Boolean)
  nameWithType: Monitor.TryEnter(Object,Boolean)
  fullName: System.Threading.Monitor.TryEnter(Object,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
  remarks: "If successful, this method acquires an exclusive lock on the  parameter. This method returns immediately, whether or not the lock is available.  \n  \n If the lock was not taken because an exception was thrown, the variable specified for the  parameter is `false` after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock.  \n  \n This method is similar to <xref:System.Threading.Monitor.Enter%28System.Object%2CSystem.Boolean%40%29>, but it will never block the current thread. If the thread cannot enter without blocking, the  argument is set to `false` when the method returns.  \n  \n> [!NOTE]\n>  Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types. For more information, see the <xref:System.Threading.Monitor> article.  \n  \n To ensure that the thread does not enter the critical section, you should examine the value of  and  execute code in the critical section only if its value is `true`. The following code fragment shows the pattern used to call this method. Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  \n  \n [!CODE [System.Threading.Monitor.TryEnter#2](../CodeSnippet/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter#2)]"
  example:
  - "The following code shows the basic pattern for using the TryEnter method overload. This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) , even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.  \n  \n [!CODE [System.Threading.Monitor.Enter#3](../CodeSnippet/VS_Snippets_CLR_System/system.threading.monitor.enter#3)]"
  syntax:
    content: public static void TryEnter (object obj, ref bool lockTaken);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to acquire the lock.
    - id: lockTaken
      type: System.Boolean
      description: The result of the attempt to acquire the lock, passed by reference. The input must be `false`. The output is `true` if the lock is acquired; otherwise, the output is `false`. The output is set even if an exception occurs during the attempt to acquire the lock.
  overload: System.Threading.Monitor.TryEnter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  id: TryEnter(System.Object,System.Int32)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: TryEnter(Object,Int32)
  nameWithType: Monitor.TryEnter(Object,Int32)
  fullName: System.Threading.Monitor.TryEnter(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.
  remarks: "If the  parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>. If  equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.  \n  \n> [!NOTE]\n>  Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types. For details, see the <xref:System.Threading.Monitor> article.  \n  \n To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`. The following code fragment shows the pattern used to call this method. Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  \n  \n [!CODE [System.Threading.Monitor.TryEnter#3](../CodeSnippet/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter#3)]"
  syntax:
    content: public static bool TryEnter (object obj, int millisecondsTimeout);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to acquire the lock.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait for the lock.
    return:
      type: System.Boolean
      description: '`true` if the current thread acquires the lock; otherwise, `false`.'
  overload: System.Threading.Monitor.TryEnter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  id: TryEnter(System.Object,System.TimeSpan)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: TryEnter(Object,TimeSpan)
  nameWithType: Monitor.TryEnter(Object,TimeSpan)
  fullName: System.Threading.Monitor.TryEnter(Object,TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.
  remarks: "If the value of the  parameter converted to milliseconds equals â€“1, this method is equivalent to <xref:System.Threading.Monitor.Enter%2A>. If the value of  equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%2A>.  \n  \n> [!NOTE]\n>  Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types. For details, see the <xref:System.Threading.Monitor> class topic.  \n  \n To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is `true`. The following code fragment shows the pattern used to call this method. Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  \n  \n [!CODE [System.Threading.Monitor.TryEnter#5](../CodeSnippet/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter#5)]"
  syntax:
    content: public static bool TryEnter (object obj, TimeSpan timeout);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to acquire the lock.
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan"> representing the amount of time to wait for the lock. A value of â€“1 millisecond specifies an infinite wait.
    return:
      type: System.Boolean
      description: '`true` if the current thread acquires the lock; otherwise, `false`.'
  overload: System.Threading.Monitor.TryEnter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  id: TryEnter(System.Object,System.Int32,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: TryEnter(Object,Int32,Boolean)
  nameWithType: Monitor.TryEnter(Object,Int32,Boolean)
  fullName: System.Threading.Monitor.TryEnter(Object,Int32,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
  remarks: "If the  parameter equals <xref:System.Threading.Timeout.Infinite>, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>. If  equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.  \n  \n If the lock was not taken because an exception was thrown, the variable specified for the  parameter is `false` after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock.  \n  \n> [!NOTE]\n>  Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types. For more information, see the <xref:System.Threading.Monitor> class topic.  \n  \n To ensure that the thread does not enter the critical section, you should examine the value of  and  execute code in the critical section only if its value is `true`. The following code fragment shows the pattern used to call this method. Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  \n  \n [!CODE [System.Threading.Monitor.TryEnter#4](../CodeSnippet/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter#4)]"
  example:
  - "The following code shows the basic pattern for using the <xref:System.Threading.Monitor.TryEnter%28System.Object%2CSystem.Boolean%40%29> method overload. This overload always sets the value of the variable that is passed to the `ref` parameter (`ByRef` in Visual Basic) , even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.  \n  \n [!CODE [System.Threading.Monitor.Enter#4](../CodeSnippet/VS_Snippets_CLR_System/system.threading.monitor.enter#4)]"
  syntax:
    content: public static void TryEnter (object obj, int millisecondsTimeout, ref bool lockTaken);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to acquire the lock.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait for the lock.
    - id: lockTaken
      type: System.Boolean
      description: The result of the attempt to acquire the lock, passed by reference. The input must be `false`. The output is `true` if the lock is acquired; otherwise, the output is `false`. The output is set even if an exception occurs during the attempt to acquire the lock.
  overload: System.Threading.Monitor.TryEnter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  id: TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: TryEnter(Object,TimeSpan,Boolean)
  nameWithType: Monitor.TryEnter(Object,TimeSpan,Boolean)
  fullName: System.Threading.Monitor.TryEnter(Object,TimeSpan,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
  remarks: "If the value of the  parameter converted to milliseconds equals â€“1, this method is equivalent to <xref:System.Threading.Monitor.Enter%28System.Object%29>. If the value of  equals 0, this method is equivalent to <xref:System.Threading.Monitor.TryEnter%28System.Object%29>.  \n  \n If the lock was not taken because an exception was thrown, the variable specified for the  parameter is `false` after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock.  \n  \n> [!NOTE]\n>  Use <xref:System.Threading.Monitor> to lock objects (that is, reference types), not value types. For more information, see the <xref:System.Threading.Monitor> class topic.  \n  \n To ensure that the thread does not enter the critical section, you should examine the value of  and  execute code in the critical section only if its value is `true`. The following code fragment shows the pattern used to call this method. Note that you should call <xref:System.Threading.Monitor.Exit%2A> in a `finally` block to ensure that the calling thread releases its lock on the critical section if an exception occurs.  \n  \n [!CODE [System.Threading.Monitor.TryEnter#6](../CodeSnippet/VS_Snippets_CLR_System/System.Threading.Monitor.TryEnter#6)]"
  syntax:
    content: public static void TryEnter (object obj, TimeSpan timeout, ref bool lockTaken);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to acquire the lock.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the lock. A value of â€“1 millisecond specifies an infinite wait.
    - id: lockTaken
      type: System.Boolean
      description: The result of the attempt to acquire the lock, passed by reference. The input must be `false`. The output is `true` if the lock is acquired; otherwise, the output is `false`. The output is set even if an exception occurs during the attempt to acquire the lock.
  overload: System.Threading.Monitor.TryEnter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.Wait(System.Object)
  id: Wait(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: Wait(Object)
  nameWithType: Monitor.Wait(Object)
  fullName: System.Threading.Monitor.Wait(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases the lock on an object and blocks the current thread until it reacquires the lock.
  remarks: "The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.  \n  \n When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue. The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object. All threads that call `Wait` remain in the waiting queue until they receive a signal from <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>, sent by the owner of the lock. If `Pulse` is sent, only the thread at the head of the waiting queue is affected. If `PulseAll` is sent, all threads that are waiting for the object are affected. When the signal is received, one or more threads leave the waiting queue and enter the ready queue. A thread in the ready queue is permitted to reacquire the lock.  \n  \n This method returns when the calling thread reacquires the lock on the object. Note that this method blocks indefinitely if the holder of the lock does not call `Pulse` or `PulseAll`.  \n  \n The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object. Conceptually, the `Wait` method stores the number of times the caller invoked `Enter` on the object and invokes `Exit` as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls `Enter` as many times as necessary to restore the saved `Enter` count for the caller. Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.  \n  \n Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.  \n  \n The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.  \n  \n The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting."
  syntax:
    content: public static bool Wait (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to wait.
    return:
      type: System.Boolean
      description: '`true` if the call returned because the caller reacquired the lock for the specified object. This method does not return if the lock is not reacquired.'
  overload: System.Threading.Monitor.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.Wait(System.Object,System.Int32)
  id: Wait(System.Object,System.Int32)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: Wait(Object,Int32)
  nameWithType: Monitor.Wait(Object,Int32)
  fullName: System.Threading.Monitor.Wait(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.
  remarks: "This method does not return until it reacquires an exclusive lock on the  parameter.  \n  \n The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.  \n  \n The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method. It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner. The thread can test the return value of the Wait method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the Wait method again.  \n  \n When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue. The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object. The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>. However, if  elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.  \n  \n> [!NOTE]\n>  If <xref:System.Threading.Timeout.Infinite> is specified for the  parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>. If  equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.  \n  \n The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object. Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller. Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.  \n  \n> [!NOTE]\n>  A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.  \n  \n The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.  \n  \n The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting."
  syntax:
    content: public static bool Wait (object obj, int millisecondsTimeout);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait before the thread enters the ready queue.
    return:
      type: System.Boolean
      description: '`true` if the lock was reacquired before the specified time elapsed; `false` if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.'
  overload: System.Threading.Monitor.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  id: Wait(System.Object,System.TimeSpan)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: Wait(Object,TimeSpan)
  nameWithType: Monitor.Wait(Object,TimeSpan)
  fullName: System.Threading.Monitor.Wait(Object,TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.
  remarks: "This method does not return until it reacquires an exclusive lock on the  parameter.  \n  \n The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.  \n  \n The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method. It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner. The thread can test the return value of the Wait method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the Wait method again.  \n  \n When a thread calls `Wait`, it releases the lock on the object and enters the object's waiting queue. The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object. The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>. However, if  elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.  \n  \n> [!NOTE]\n>  If a <xref:System.TimeSpan> representing â€“1 millisecond is specified for the  parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>. If  is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.  \n  \n The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object. Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller. Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.  \n  \n> [!NOTE]\n>  A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.  \n  \n The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.  \n  \n The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting."
  syntax:
    content: public static bool Wait (object obj, TimeSpan timeout);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to wait.
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan"> representing the amount of time to wait before the thread enters the ready queue.
    return:
      type: System.Boolean
      description: '`true` if the lock was reacquired before the specified time elapsed; `false` if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.'
  overload: System.Threading.Monitor.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)
  id: Wait(System.Object,System.Int32,System.Boolean)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: Wait(Object,Int32,Boolean)
  nameWithType: Monitor.Wait(Object,Int32,Boolean)
  fullName: System.Threading.Monitor.Wait(Object,Int32,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue. This method also specifies whether the synchronization domain for the context (if in a synchronized context) is exited before the wait and reacquired afterward.
  remarks: "This method does not return until it reacquires an exclusive lock on the  parameter.  \n  \n The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.  \n  \n The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method. It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner. The thread can test the return value of the Wait method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the Wait method again.  \n  \n When a thread calls `Wait`, it releases the lock and enters the waiting queue. At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock. The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>. However, if  elapses before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.  \n  \n> [!NOTE]\n>  If <xref:System.Threading.Timeout.Infinite> is specified for the  parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>. If  equals 0, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.  \n  \n The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object. Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller. Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.  \n  \n> [!NOTE]\n>  A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.  \n  \n The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.  \n  \n The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.  \n  \n## Notes on Exiting the Context  \n The parameter has no effect unless the Wait method is called from inside a nondefault managed context. This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>. Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.  \n  \n When your code is executing in a nondefault context, specifying `true` for  causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the Wait method. It returns to the original nondefault context after the call to the Wait method completes.  \n  \n This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied. In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class. If code in the call stack of a member calls the Wait method and specifies `true` for , the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed. When the Wait method returns, the thread that made the call must wait to reenter the synchronization domain."
  syntax:
    content: public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait before the thread enters the ready queue.
    - id: exitContext
      type: System.Boolean
      description: '`true` to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, `false`.'
    return:
      type: System.Boolean
      description: '`true` if the lock was reacquired before the specified time elapsed; `false` if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.'
  overload: System.Threading.Monitor.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)
  id: Wait(System.Object,System.TimeSpan,System.Boolean)
  parent: System.Threading.Monitor
  langs:
  - csharp
  name: Wait(Object,TimeSpan,Boolean)
  nameWithType: Monitor.Wait(Object,TimeSpan,Boolean)
  fullName: System.Threading.Monitor.Wait(Object,TimeSpan,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue. Optionally exits the synchronization domain for the synchronized context before the wait and reacquires the domain afterward.
  remarks: "This method does not return until it reacquires an exclusive lock on the  parameter.  \n  \n The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.  \n  \n The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method. It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner. The thread can test the return value of the Wait method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the Wait method again.  \n  \n When a thread calls `Wait`, it releases the lock and enters the waiting queue. At this point, the next thread in the ready queue (if there is one) is allowed to take control of the lock. The thread that invoked `Wait` remains in the waiting queue until either a thread that holds the lock invokes <xref:System.Threading.Monitor.PulseAll%2A>, or it is the next in the queue and a thread that holds the lock invokes <xref:System.Threading.Monitor.Pulse%2A>. However, if  milliseconds elapse before another thread invokes this object's <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A> method, the original thread is moved to the ready queue in order to regain the lock.  \n  \n> [!NOTE]\n>  If a <xref:System.TimeSpan> representing -1 millisecond is specified for the  parameter, this method blocks indefinitely unless the holder of the lock calls <xref:System.Threading.Monitor.Pulse%2A> or <xref:System.Threading.Monitor.PulseAll%2A>. If  is 0 milliseconds, the thread that calls `Wait` releases the lock and then immediately enters the ready queue in order to regain the lock.  \n  \n The caller executes `Wait` once, regardless of the number of times <xref:System.Threading.Monitor.Enter%2A> has been invoked for the specified object. Conceptually, the `Wait` method stores the number of times the caller invoked <xref:System.Threading.Monitor.Enter%2A> on the object and invokes <xref:System.Threading.Monitor.Exit%2A> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <xref:System.Threading.Monitor.Enter%2A> as many times as necessary to restore the saved <xref:System.Threading.Monitor.Enter%2A> count for the caller. Calling `Wait` releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.  \n  \n> [!NOTE]\n>  A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.  \n  \n The <xref:System.Threading.Monitor.Pulse%2A>, <xref:System.Threading.Monitor.PulseAll%2A>, and `Wait` methods must be invoked from within a synchronized block of code.  \n  \n The remarks for the <xref:System.Threading.Monitor.Pulse%2A> method explain what happens if <xref:System.Threading.Monitor.Pulse%2A> is called when no threads are waiting.  \n  \n## Notes on Exiting the Context  \n The parameter has no effect unless the Wait method is called from inside a nondefault managed context. This can happen if your thread is inside a call to an instance of a class derived from <xref:System.ContextBoundObject>. Even if you are currently executing a method on a class that is not derived from <xref:System.ContextBoundObject>, like <xref:System.String>, you can be in a nondefault context if a <xref:System.ContextBoundObject> is on your stack in the current application domain.  \n  \n When your code is executing in a nondefault context, specifying `true` for  causes the thread to exit the nondefault managed context (that is, to transition to the default context) before executing the Wait method. It returns to the original nondefault context after the call to the Wait method completes.  \n  \n This can be useful when the context-bound class has the <xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute> attribute applied. In that case, all calls to members of the class are automatically synchronized, and the synchronization domain is the entire body of code for the class. If code in the call stack of a member calls the Wait method and specifies `true` for , the thread exits the synchronization domain, allowing a thread that is blocked on a call to any member of the object to proceed. When the Wait method returns, the thread that made the call must wait to reenter the synchronization domain."
  syntax:
    content: public static bool Wait (object obj, TimeSpan timeout, bool exitContext);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to wait.
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan"> representing the amount of time to wait before the thread enters the ready queue.
    - id: exitContext
      type: System.Boolean
      description: '`true` to exit and reacquire the synchronization domain for the context (if in a synchronized context) before the wait; otherwise, `false`.'
    return:
      type: System.Boolean
      description: '`true` if the lock was reacquired before the specified time elapsed; `false` if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.'
  overload: System.Threading.Monitor.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.Monitor.Enter(System.Object)
  parent: System.Threading.Monitor
  isExternal: false
  name: Enter(Object)
  nameWithType: Monitor.Enter(Object)
  fullName: System.Threading.Monitor.Enter(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  parent: System.Threading.Monitor
  isExternal: false
  name: Enter(Object,Boolean)
  nameWithType: Monitor.Enter(Object,Boolean)
  fullName: System.Threading.Monitor.Enter(Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Monitor.Exit(System.Object)
  parent: System.Threading.Monitor
  isExternal: false
  name: Exit(Object)
  nameWithType: Monitor.Exit(Object)
  fullName: System.Threading.Monitor.Exit(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Monitor.IsEntered(System.Object)
  parent: System.Threading.Monitor
  isExternal: false
  name: IsEntered(Object)
  nameWithType: Monitor.IsEntered(Object)
  fullName: System.Threading.Monitor.IsEntered(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Monitor.Pulse(System.Object)
  parent: System.Threading.Monitor
  isExternal: false
  name: Pulse(Object)
  nameWithType: Monitor.Pulse(Object)
  fullName: System.Threading.Monitor.Pulse(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Monitor.PulseAll(System.Object)
  parent: System.Threading.Monitor
  isExternal: false
  name: PulseAll(Object)
  nameWithType: Monitor.PulseAll(Object)
  fullName: System.Threading.Monitor.PulseAll(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Monitor.TryEnter(System.Object)
  parent: System.Threading.Monitor
  isExternal: false
  name: TryEnter(Object)
  nameWithType: Monitor.TryEnter(Object)
  fullName: System.Threading.Monitor.TryEnter(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  parent: System.Threading.Monitor
  isExternal: false
  name: TryEnter(Object,Boolean)
  nameWithType: Monitor.TryEnter(Object,Boolean)
  fullName: System.Threading.Monitor.TryEnter(Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  parent: System.Threading.Monitor
  isExternal: false
  name: TryEnter(Object,Int32)
  nameWithType: Monitor.TryEnter(Object,Int32)
  fullName: System.Threading.Monitor.TryEnter(Object,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  parent: System.Threading.Monitor
  isExternal: false
  name: TryEnter(Object,TimeSpan)
  nameWithType: Monitor.TryEnter(Object,TimeSpan)
  fullName: System.Threading.Monitor.TryEnter(Object,TimeSpan)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  parent: System.Threading.Monitor
  isExternal: false
  name: TryEnter(Object,Int32,Boolean)
  nameWithType: Monitor.TryEnter(Object,Int32,Boolean)
  fullName: System.Threading.Monitor.TryEnter(Object,Int32,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  parent: System.Threading.Monitor
  isExternal: false
  name: TryEnter(Object,TimeSpan,Boolean)
  nameWithType: Monitor.TryEnter(Object,TimeSpan,Boolean)
  fullName: System.Threading.Monitor.TryEnter(Object,TimeSpan,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Monitor.Wait(System.Object)
  parent: System.Threading.Monitor
  isExternal: false
  name: Wait(Object)
  nameWithType: Monitor.Wait(Object)
  fullName: System.Threading.Monitor.Wait(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Monitor.Wait(System.Object,System.Int32)
  parent: System.Threading.Monitor
  isExternal: false
  name: Wait(Object,Int32)
  nameWithType: Monitor.Wait(Object,Int32)
  fullName: System.Threading.Monitor.Wait(Object,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  parent: System.Threading.Monitor
  isExternal: false
  name: Wait(Object,TimeSpan)
  nameWithType: Monitor.Wait(Object,TimeSpan)
  fullName: System.Threading.Monitor.Wait(Object,TimeSpan)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)
  parent: System.Threading.Monitor
  isExternal: false
  name: Wait(Object,Int32,Boolean)
  nameWithType: Monitor.Wait(Object,Int32,Boolean)
  fullName: System.Threading.Monitor.Wait(Object,Int32,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Monitor.Wait(System.Object,System.TimeSpan,System.Boolean)
  parent: System.Threading.Monitor
  isExternal: false
  name: Wait(Object,TimeSpan,Boolean)
  nameWithType: Monitor.Wait(Object,TimeSpan,Boolean)
  fullName: System.Threading.Monitor.Wait(Object,TimeSpan,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Monitor.Enter*
  parent: System.Threading.Monitor
  isExternal: false
  nameWithType: Monitor.
- uid: System.Threading.Monitor.TryEnter*
  parent: System.Threading.Monitor
  isExternal: false
  nameWithType: Monitor.
- uid: System.Threading.Monitor.Wait*
  parent: System.Threading.Monitor
  isExternal: false
  nameWithType: Monitor.
