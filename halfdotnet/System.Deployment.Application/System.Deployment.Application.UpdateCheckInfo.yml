### YamlMime:ManagedReference
items:
- uid: System.Deployment.Application.UpdateCheckInfo
  id: UpdateCheckInfo
  children:
  - System.Deployment.Application.UpdateCheckInfo.AvailableVersion
  - System.Deployment.Application.UpdateCheckInfo.IsUpdateRequired
  - System.Deployment.Application.UpdateCheckInfo.MinimumRequiredVersion
  - System.Deployment.Application.UpdateCheckInfo.UpdateAvailable
  - System.Deployment.Application.UpdateCheckInfo.UpdateSizeBytes
  langs:
  - csharp
  name: UpdateCheckInfo
  nameWithType: UpdateCheckInfo
  fullName: System.Deployment.Application.UpdateCheckInfo
  type: Class
  summary: Represents detailed update information obtained through a call to <xref:System.Deployment.Application.ApplicationDeployment.CheckForDetailedUpdate%2A>.
  remarks: "With UpdateCheckInfo, you can decide whether to upgrade your ClickOnce application based on information about the newest version. <xref:System.Deployment.Application.UpdateCheckInfo.UpdateAvailable%2A> will return a Boolean value indicating whether there is a new update at all. The <xref:System.Deployment.Application.UpdateCheckInfo.AvailableVersion%2A> property provides the version number of the new version, while <xref:System.Deployment.Application.UpdateCheckInfo.MinimumRequiredVersion%2A> provides the earliest version that the user should have installed. <xref:System.Deployment.Application.UpdateCheckInfo.IsUpdateRequired%2A> expresses whether the latest available update is required of the user. Finally, <xref:System.Deployment.Application.UpdateCheckInfo.UpdateSizeBytes%2A> expresses the total size of the update.  \n  \n> [!NOTE]\n>  Visual Studio adds the `<deploymentProvider>` element to the manifest only if the application is set to check for updates, so you either have to check **The application should check for updates** or specify an update URL in **Update location** in the [Application Updates Dialog Box](http://msdn.microsoft.com/en-us/8eca8743-8e68-4d04-bfd5-4dc0a9b2934f)."
  example:
  - "The following code example uses <xref:System.Deployment.Application.UpdateCheckInfo.UpdateAvailable%2A> to determine if there is a new application update, and <xref:System.Deployment.Application.UpdateCheckInfo.IsUpdateRequired%2A> to determine whether to ask the user to install the update.  \n  \n [!CODE [ClickOnceAPI#6](../CodeSnippet/VS_Snippets_Winforms/ClickOnceAPI#6)]"
  syntax:
    content: public class UpdateCheckInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Deployment.Application.UpdateCheckInfo.AvailableVersion
  id: AvailableVersion
  parent: System.Deployment.Application.UpdateCheckInfo
  langs:
  - csharp
  name: AvailableVersion
  nameWithType: UpdateCheckInfo.AvailableVersion
  fullName: System.Deployment.Application.UpdateCheckInfo.AvailableVersion
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets the version number of the latest uninstalled version.
  remarks: You can use AvailableVersion to decide whether to install the update based on the severity of the update. For example, if only the <xref:System.Version.Build%2A> or <xref:System.Version.Revision%2A> version properties have changed, your application may not need to update until either the <xref:System.Version.Minor%2A> or <xref:System.Version.Major%2A> properties change.
  syntax:
    content: public Version AvailableVersion { get; }
    return:
      type: System.Version
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Deployment.Application.UpdateCheckInfo.IsUpdateRequired
  id: IsUpdateRequired
  parent: System.Deployment.Application.UpdateCheckInfo
  langs:
  - csharp
  name: IsUpdateRequired
  nameWithType: UpdateCheckInfo.IsUpdateRequired
  fullName: System.Deployment.Application.UpdateCheckInfo.IsUpdateRequired
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets a value indicating whether the update must be installed.
  remarks: When you deploy an update to your ClickOnce application, you can mark it as a required update, signaling to your application that it should upgrade immediately. You want to mark the application if the latest version contains a critical update, or if it is incompatible with file formats or back-end data sources used by the former version.
  example:
  - "The following code example uses IsUpdateRequired to determine whether to ask the user to install the update, or to install it without prompting.  \n  \n [!CODE [ClickOnceAPI#6](../CodeSnippet/VS_Snippets_Winforms/ClickOnceAPI#6)]"
  syntax:
    content: public bool IsUpdateRequired { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Deployment.Application.UpdateCheckInfo.MinimumRequiredVersion
  id: MinimumRequiredVersion
  parent: System.Deployment.Application.UpdateCheckInfo
  langs:
  - csharp
  name: MinimumRequiredVersion
  nameWithType: UpdateCheckInfo.MinimumRequiredVersion
  fullName: System.Deployment.Application.UpdateCheckInfo.MinimumRequiredVersion
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets the minimum version that the user must have installed on the computer.
  remarks: "Applications can miss required updates when the user takes on a special assignment or is away from the computer for weeks or months. Use  \n  \n MinimumRequiredVersion to determine if the user has not upgraded the application in a while, and has missed one or more required updates."
  example:
  - "The following code example demonstrates displaying the MinimumRequiredVersion property to the user when there is a required update available.  \n  \n [!CODE [ClickOnceAPI#6](../CodeSnippet/VS_Snippets_Winforms/ClickOnceAPI#6)]"
  syntax:
    content: public Version MinimumRequiredVersion { get; }
    return:
      type: System.Version
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Deployment.Application.UpdateCheckInfo.UpdateAvailable
  id: UpdateAvailable
  parent: System.Deployment.Application.UpdateCheckInfo
  langs:
  - csharp
  name: UpdateAvailable
  nameWithType: UpdateCheckInfo.UpdateAvailable
  fullName: System.Deployment.Application.UpdateCheckInfo.UpdateAvailable
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets whether an uninstalled update is available.
  remarks: ''
  example:
  - "The following code example inspects UpdateAvailable to determine whether there is an update to install.  \n  \n [!CODE [ClickOnceAPI#6](../CodeSnippet/VS_Snippets_Winforms/ClickOnceAPI#6)]"
  syntax:
    content: public bool UpdateAvailable { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Deployment.Application.UpdateCheckInfo.UpdateSizeBytes
  id: UpdateSizeBytes
  parent: System.Deployment.Application.UpdateCheckInfo
  langs:
  - csharp
  name: UpdateSizeBytes
  nameWithType: UpdateCheckInfo.UpdateSizeBytes
  fullName: System.Deployment.Application.UpdateCheckInfo.UpdateSizeBytes
  type: Property
  assemblies:
  - System.Deployment
  namespace: System.Deployment.Application
  summary: Gets the size of the available update.
  remarks: To be added.
  syntax:
    content: public long UpdateSizeBytes { get; }
    return:
      type: System.Int64
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Deployment.Application.UpdateCheckInfo.AvailableVersion
  parent: System.Deployment.Application.UpdateCheckInfo
  isExternal: false
  name: AvailableVersion
  nameWithType: UpdateCheckInfo.AvailableVersion
  fullName: System.Deployment.Application.UpdateCheckInfo.AvailableVersion
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Deployment.Application.UpdateCheckInfo.IsUpdateRequired
  parent: System.Deployment.Application.UpdateCheckInfo
  isExternal: false
  name: IsUpdateRequired
  nameWithType: UpdateCheckInfo.IsUpdateRequired
  fullName: System.Deployment.Application.UpdateCheckInfo.IsUpdateRequired
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Deployment.Application.UpdateCheckInfo.MinimumRequiredVersion
  parent: System.Deployment.Application.UpdateCheckInfo
  isExternal: false
  name: MinimumRequiredVersion
  nameWithType: UpdateCheckInfo.MinimumRequiredVersion
  fullName: System.Deployment.Application.UpdateCheckInfo.MinimumRequiredVersion
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Deployment.Application.UpdateCheckInfo.UpdateAvailable
  parent: System.Deployment.Application.UpdateCheckInfo
  isExternal: false
  name: UpdateAvailable
  nameWithType: UpdateCheckInfo.UpdateAvailable
  fullName: System.Deployment.Application.UpdateCheckInfo.UpdateAvailable
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Deployment.Application.UpdateCheckInfo.UpdateSizeBytes
  parent: System.Deployment.Application.UpdateCheckInfo
  isExternal: false
  name: UpdateSizeBytes
  nameWithType: UpdateCheckInfo.UpdateSizeBytes
  fullName: System.Deployment.Application.UpdateCheckInfo.UpdateSizeBytes
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
