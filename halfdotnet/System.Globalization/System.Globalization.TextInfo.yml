### YamlMime:ManagedReference
items:
- uid: System.Globalization.TextInfo
  id: TextInfo
  children:
  - System.Globalization.TextInfo.ANSICodePage
  - System.Globalization.TextInfo.Clone
  - System.Globalization.TextInfo.CultureName
  - System.Globalization.TextInfo.EBCDICCodePage
  - System.Globalization.TextInfo.Equals(System.Object)
  - System.Globalization.TextInfo.GetHashCode
  - System.Globalization.TextInfo.IsReadOnly
  - System.Globalization.TextInfo.IsRightToLeft
  - System.Globalization.TextInfo.LCID
  - System.Globalization.TextInfo.ListSeparator
  - System.Globalization.TextInfo.MacCodePage
  - System.Globalization.TextInfo.OEMCodePage
  - System.Globalization.TextInfo.ReadOnly(System.Globalization.TextInfo)
  - System.Globalization.TextInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Globalization.TextInfo.ToLower(System.Char)
  - System.Globalization.TextInfo.ToLower(System.String)
  - System.Globalization.TextInfo.ToString
  - System.Globalization.TextInfo.ToTitleCase(System.String)
  - System.Globalization.TextInfo.ToUpper(System.Char)
  - System.Globalization.TextInfo.ToUpper(System.String)
  langs:
  - csharp
  name: TextInfo
  nameWithType: TextInfo
  fullName: System.Globalization.TextInfo
  type: Class
  summary: Defines text properties and behaviors, such as casing, that are specific to a writing system.
  remarks: "A writing system is the collection of scripts and orthographic rules required to represent a language as text. The TextInfo class represents a writing system.  \n  \n The application should use the <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=fullName> property to obtain the TextInfo object for a particular <xref:System.Globalization.CultureInfo> object. If a security decision depends on a string comparison or a case-change operation, the application should use the <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=fullName> property of the object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property to ensure that the behavior of the operation is consistent regardless of the operating system culture settings.  \n  \n## Overrides  \n The user might use the regional and language options portion of Control Panel to override the values associated with the current culture of Windows. For example, the user might choose to display the date in a different format or to use a currency other than the default for the culture. If the <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=fullName> property is set to `true`, the property values of the objects returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>, <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName>, and <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=fullName> properties are also retrieved from the user settings. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo>, for example, if the selected calendar is not one of the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, the results of the methods and the values of the properties are undefined."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class TextInfo : ICloneable, System.Runtime.Serialization.IDeserializationCallback
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Runtime.Serialization.IDeserializationCallback
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.ANSICodePage
  id: ANSICodePage
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: ANSICodePage
  nameWithType: TextInfo.ANSICodePage
  fullName: System.Globalization.TextInfo.ANSICodePage
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the American National Standards Institute (ANSI) code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo">.
  remarks: To be added.
  syntax:
    content: public virtual int ANSICodePage { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.Clone
  id: Clone
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: Clone()
  nameWithType: TextInfo.Clone()
  fullName: System.Globalization.TextInfo.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Creates a new object that is a copy of the current <see cref="T:System.Globalization.TextInfo"> object.
  remarks: The new memberwise clone is not read-only.
  example:
  - "The following code example demonstrates the Clone and <xref:System.Globalization.TextInfo.ReadOnly%2A> methods.  \n  \n [!CODE [sys.glob.textinfo.clone#1](../CodeSnippet/VS_Snippets_CLR/sys.glob.textinfo.clone#1)]"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: A new instance of <xref:System.Object?displayProperty=fullName> that is the memberwise clone of the current <xref:System.Globalization.TextInfo> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.CultureName
  id: CultureName
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: CultureName
  nameWithType: TextInfo.CultureName
  fullName: System.Globalization.TextInfo.CultureName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the name of the culture associated with the current <see cref="T:System.Globalization.TextInfo"> object.
  remarks: "A <xref:System.Globalization.TextInfo> object is created from a specific culture, and the CultureName property returns the name of that culture.  \n  \n The CultureName property always reflects a specific culture rather than a neutral culture. If <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=fullName> has a neutral culture as its value, then the corresponding CultureName has as its value an arbitrary specific culture that uses the same language. For example, the <xref:System.Globalization.CultureInfo.Name%2A> property returns \"en\" for the English neutral culture, but the corresponding CultureName property might return \"en-US\" for the English (United States) culture. If the<xref:System.Globalization.TextInfo> object is associated with a specific culture instead of a neutral culture, the value of its CultureName property is always identical to the <xref:System.Globalization.CultureInfo.Name%2A> property value of its associated <xref:System.Globalization.CultureInfo> object.  \n  \n Similarly, the CultureName property never reflects a particular sort. It always corresponds to a default sort order. For example, the default sort order for Spanish (Spain) is the international sort order. If <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=fullName> is es-ES_tradnl (Spanish with the traditional sort order) then the corresponding CultureName is es-ES (Spanish with the default international sort order)."
  syntax:
    content: public string CultureName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.EBCDICCodePage
  id: EBCDICCodePage
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: EBCDICCodePage
  nameWithType: TextInfo.EBCDICCodePage
  fullName: System.Globalization.TextInfo.EBCDICCodePage
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the Extended Binary Coded Decimal Interchange Code (EBCDIC) code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo">.
  remarks: To be added.
  syntax:
    content: public virtual int EBCDICCodePage { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: TextInfo.Equals(Object)
  fullName: System.Globalization.TextInfo.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Determines whether the specified object represents the same writing system as the current <see cref="T:System.Globalization.TextInfo"> object.
  remarks: This method overrides <xref:System.Object.Equals%2A?displayProperty=fullName>.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current <see cref="T:System.Globalization.TextInfo">.
    return:
      type: System.Boolean
      description: '`true` if  represents the same writing system as the current <see cref="T:System.Globalization.TextInfo">; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.GetHashCode
  id: GetHashCode
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: TextInfo.GetHashCode()
  fullName: System.Globalization.TextInfo.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Serves as a hash function for the current <see cref="T:System.Globalization.TextInfo">, suitable for hashing algorithms and data structures, such as a hash table.
  remarks: "This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \n  \n This method generates the same hash code for two objects that are equal according to the <xref:System.Globalization.TextInfo.Equals%2A> method."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A hash code for the current <see cref="T:System.Globalization.TextInfo">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.IsReadOnly
  id: IsReadOnly
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: TextInfo.IsReadOnly
  fullName: System.Globalization.TextInfo.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets a value indicating whether the current <see cref="T:System.Globalization.TextInfo"> object is read-only.
  remarks: If the IsReadOnly property is `true`, the application cannot change any of the properties of the current <xref:System.Globalization.TextInfo> object.
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.IsRightToLeft
  id: IsRightToLeft
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: IsRightToLeft
  nameWithType: TextInfo.IsRightToLeft
  fullName: System.Globalization.TextInfo.IsRightToLeft
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets a value indicating whether the current <see cref="T:System.Globalization.TextInfo"> object represents a writing system where text flows from right to left.
  remarks: The IsRightToLeft property indicates the dominant direction of written text and the relative position of user interface elements such as buttons and scroll bars.
  syntax:
    content: public bool IsRightToLeft { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.LCID
  id: LCID
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: LCID
  nameWithType: TextInfo.LCID
  fullName: System.Globalization.TextInfo.LCID
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the culture identifier for the culture associated with the current <see cref="T:System.Globalization.TextInfo"> object.
  remarks: "Certain predefined culture names and identifiers are used by this and other classes in the <xref:System.Globalization?displayProperty=fullName> namespace, as well as the Windows API. The detailed culture information is defined in the [National Language Support (NLS) API Reference topic at the Go Global Developer Center](http://msdn.microsoft.com/goglobal/bb896001.aspx).  \n  \n The LCID property always reflects a specific culture identifier instead of a neutral culture identifier. If <xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=fullName> is set to a neutral culture identifier, the corresponding LCID has as its value an arbitrary specific culture identifier that uses the same language. For example, the <xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=fullName> property returns 0x0009 for the English neutral culture, named \"en\". However, the corresponding LCID property might return 0x0409 for the English (United States) culture, named en-US.  \n  \n Similarly, the LCID property always corresponds to a default sort order, and never reflects a specific sort order. For example, the default sort order for Spanish (Spain) is the international sort order. If <xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=fullName> is set to \"0x040A\" (Spanish with the traditional sort order), the corresponding LCID value is \"0x0C0A\" (Spanish with the default international sort order)."
  syntax:
    content: public int LCID { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.ListSeparator
  id: ListSeparator
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: ListSeparator
  nameWithType: TextInfo.ListSeparator
  fullName: System.Globalization.TextInfo.ListSeparator
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string that separates items in a list.
  remarks: To be added.
  syntax:
    content: public virtual string ListSeparator { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.MacCodePage
  id: MacCodePage
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: MacCodePage
  nameWithType: TextInfo.MacCodePage
  fullName: System.Globalization.TextInfo.MacCodePage
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the Macintosh code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo">.
  remarks: To be added.
  syntax:
    content: public virtual int MacCodePage { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.OEMCodePage
  id: OEMCodePage
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: OEMCodePage
  nameWithType: TextInfo.OEMCodePage
  fullName: System.Globalization.TextInfo.OEMCodePage
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the original equipment manufacturer (OEM) code page used by the writing system represented by the current <see cref="T:System.Globalization.TextInfo">.
  remarks: To be added.
  syntax:
    content: public virtual int OEMCodePage { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.ReadOnly(System.Globalization.TextInfo)
  id: ReadOnly(System.Globalization.TextInfo)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: ReadOnly(TextInfo)
  nameWithType: TextInfo.ReadOnly(TextInfo)
  fullName: System.Globalization.TextInfo.ReadOnly(TextInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Returns a read-only version of the specified <see cref="T:System.Globalization.TextInfo"> object.
  remarks: ''
  example:
  - "The following code example demonstrates the <xref:System.Globalization.TextInfo.Clone%2A> and ReadOnly methods.  \n  \n [!CODE [sys.glob.textinfo.clone#1](../CodeSnippet/VS_Snippets_CLR/sys.glob.textinfo.clone#1)]"
  syntax:
    content: public static System.Globalization.TextInfo ReadOnly (System.Globalization.TextInfo textInfo);
    parameters:
    - id: textInfo
      type: System.Globalization.TextInfo
      description: A <see cref="T:System.Globalization.TextInfo"> object.
    return:
      type: System.Globalization.TextInfo
      description: "The <see cref=\"T:System.Globalization.TextInfo\"> object specified by the  parameter, if  is read-only.  \n  \n -or-  \n  \n A read-only memberwise clone of the <see cref=\"T:System.Globalization.TextInfo\"> object specified by , if  is not read-only."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: TextInfo.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Globalization.TextInfo.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Raises the deserialization event when deserialization is complete.
  remarks: To be added.
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: The source of the deserialization event.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.ToLower(System.Char)
  id: ToLower(System.Char)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: ToLower(Char)
  nameWithType: TextInfo.ToLower(Char)
  fullName: System.Globalization.TextInfo.ToLower(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Converts the specified character to lowercase.
  remarks: "Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.  \n  \n If a security decision depends on a string comparison or a case-change operation, the application should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.  \n  \n For more information on cultures, see <xref:System.Globalization.CultureInfo>."
  example:
  - "The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.  \n  \n [!CODE [System.Globalization.TextInfo_casing#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing#1)]"
  syntax:
    content: public virtual char ToLower (char c);
    parameters:
    - id: c
      type: System.Char
      description: The character to convert to lowercase.
    return:
      type: System.Char
      description: The specified character converted to lowercase.
  overload: System.Globalization.TextInfo.ToLower*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.ToLower(System.String)
  id: ToLower(System.String)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: ToLower(String)
  nameWithType: TextInfo.ToLower(String)
  fullName: System.Globalization.TextInfo.ToLower(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Converts the specified string to lowercase.
  remarks: "The returned string might differ in length from the input string. For more information on casing, refer to the Unicode Technical Report #21 \"Case Mappings,\" published by the Unicode Consortium (http://www.unicode.org). The current implementation preserves the length of the string. However, this behavior is not guaranteed and could change in future implementations.  \n  \n Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.  \n  \n If a security decision depends on a string comparison or a case-change operation, the application should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.  \n  \n For more information on cultures, see <xref:System.Globalization.CultureInfo>."
  example:
  - "The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.  \n  \n [!CODE [System.Globalization.TextInfo_casing#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing#1)]"
  syntax:
    content: public virtual string ToLower (string str);
    parameters:
    - id: str
      type: System.String
      description: The string to convert to lowercase.
    return:
      type: System.String
      description: The specified string converted to lowercase.
  overload: System.Globalization.TextInfo.ToLower*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.ToString
  id: ToString
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: TextInfo.ToString()
  fullName: System.Globalization.TextInfo.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Returns a string that represents the current <see cref="T:System.Globalization.TextInfo">.
  remarks: This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string that represents the current <see cref="T:System.Globalization.TextInfo">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.ToTitleCase(System.String)
  id: ToTitleCase(System.String)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: ToTitleCase(String)
  nameWithType: TextInfo.ToTitleCase(String)
  fullName: System.Globalization.TextInfo.ToTitleCase(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Converts the specified string to title case (except for words that are entirely in uppercase, which are considered to be acronyms).
  remarks: "Generally, title casing converts the first character of a word to uppercase and the rest of the characters to lowercase. However, this method does not currently provide proper casing to convert a word that is entirely uppercase, such as an acronym. The following table shows the way the method renders several strings.  \n  \n|Input|Language|Expected result|Actual result|  \n|-----------|--------------|---------------------|-------------------|  \n|war and peace|English|War and Peace|War And Peace|  \n|Per anhalter durch die Galaxis|German|Per Anhalter durch die Galaxis|Per Anhalter Durch Die Galaxis|  \n|les naufragés d'ythaq|French|Les Naufragés d'Ythaq|Les Naufragés D'ythaq|  \n  \n As illustrated above, the ToTitleCase method provides an arbitrary casing behavior which is not necessarily linguistically correct. A linguistically correct solution would require additional rules, and the current algorithm is somewhat simpler and faster. We reserve the right to make this API slower in the future.  \n  \n The current implementation of the ToTitleCase method yields an output string that is the same length as the input string. However, this behavior is not guaranteed and could change in a future implementation."
  example:
  - "The following example changes the casing of a string based on the English (United States) culture, with the culture name en-US.  \n  \n [!CODE [System.Globalization.TextInfo_casing#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing#1)]  \n  \n The following example passes each string in an array to the ToTitleCase method. The strings include proper title strings as well as acronyms. The strings are converted to title case by using the conventions of the en-US culture.  \n  \n [!CODE [System.Globalization.TextInfo.ToTitleCase#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.textinfo.totitlecase#1)]"
  syntax:
    content: public string ToTitleCase (string str);
    parameters:
    - id: str
      type: System.String
      description: The string to convert to title case.
    return:
      type: System.String
      description: The specified string converted to title case.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.ToUpper(System.Char)
  id: ToUpper(System.Char)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: ToUpper(Char)
  nameWithType: TextInfo.ToUpper(Char)
  fullName: System.Globalization.TextInfo.ToUpper(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Converts the specified character to uppercase.
  remarks: "Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.  \n  \n If a security decision depends on a string comparison or a case-change operation, the application should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.  \n  \n For more information on cultures, see <xref:System.Globalization.CultureInfo>."
  example:
  - "The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.  \n  \n [!CODE [System.Globalization.TextInfo_casing#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing#1)]"
  syntax:
    content: public virtual char ToUpper (char c);
    parameters:
    - id: c
      type: System.Char
      description: The character to convert to uppercase.
    return:
      type: System.Char
      description: The specified character converted to uppercase.
  overload: System.Globalization.TextInfo.ToUpper*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.TextInfo.ToUpper(System.String)
  id: ToUpper(System.String)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  name: ToUpper(String)
  nameWithType: TextInfo.ToUpper(String)
  fullName: System.Globalization.TextInfo.ToUpper(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Converts the specified string to uppercase.
  remarks: "The returned string might differ in length from the input string. For more information on casing, refer to the Unicode Technical Report #21 \"Case Mappings,\" published by the Unicode Consortium (http://www.unicode.org). The current implementation preserves the length of the string. However, this behavior is not guaranteed and could change in future implementations.  \n  \n Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.  \n  \n If a security decision depends on a string comparison or a case-change operation, the application should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.  \n  \n For more information on cultures, see <xref:System.Globalization.CultureInfo>."
  example:
  - "The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.  \n  \n [!CODE [System.Globalization.TextInfo_casing#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing#1)]"
  syntax:
    content: public virtual string ToUpper (string str);
    parameters:
    - id: str
      type: System.String
      description: The string to convert to uppercase.
    return:
      type: System.String
      description: The specified string converted to uppercase.
  overload: System.Globalization.TextInfo.ToUpper*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Globalization.TextInfo.ANSICodePage
  parent: System.Globalization.TextInfo
  isExternal: false
  name: ANSICodePage
  nameWithType: TextInfo.ANSICodePage
  fullName: System.Globalization.TextInfo.ANSICodePage
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.TextInfo.Clone
  parent: System.Globalization.TextInfo
  isExternal: false
  name: Clone()
  nameWithType: TextInfo.Clone()
  fullName: System.Globalization.TextInfo.Clone()
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Globalization.TextInfo.CultureName
  parent: System.Globalization.TextInfo
  isExternal: false
  name: CultureName
  nameWithType: TextInfo.CultureName
  fullName: System.Globalization.TextInfo.CultureName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.TextInfo.EBCDICCodePage
  parent: System.Globalization.TextInfo
  isExternal: false
  name: EBCDICCodePage
  nameWithType: TextInfo.EBCDICCodePage
  fullName: System.Globalization.TextInfo.EBCDICCodePage
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.TextInfo.Equals(System.Object)
  parent: System.Globalization.TextInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: TextInfo.Equals(Object)
  fullName: System.Globalization.TextInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Globalization.TextInfo.GetHashCode
  parent: System.Globalization.TextInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: TextInfo.GetHashCode()
  fullName: System.Globalization.TextInfo.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.TextInfo.IsReadOnly
  parent: System.Globalization.TextInfo
  isExternal: false
  name: IsReadOnly
  nameWithType: TextInfo.IsReadOnly
  fullName: System.Globalization.TextInfo.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.TextInfo.IsRightToLeft
  parent: System.Globalization.TextInfo
  isExternal: false
  name: IsRightToLeft
  nameWithType: TextInfo.IsRightToLeft
  fullName: System.Globalization.TextInfo.IsRightToLeft
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.TextInfo.LCID
  parent: System.Globalization.TextInfo
  isExternal: false
  name: LCID
  nameWithType: TextInfo.LCID
  fullName: System.Globalization.TextInfo.LCID
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.TextInfo.ListSeparator
  parent: System.Globalization.TextInfo
  isExternal: false
  name: ListSeparator
  nameWithType: TextInfo.ListSeparator
  fullName: System.Globalization.TextInfo.ListSeparator
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.TextInfo.MacCodePage
  parent: System.Globalization.TextInfo
  isExternal: false
  name: MacCodePage
  nameWithType: TextInfo.MacCodePage
  fullName: System.Globalization.TextInfo.MacCodePage
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.TextInfo.OEMCodePage
  parent: System.Globalization.TextInfo
  isExternal: false
  name: OEMCodePage
  nameWithType: TextInfo.OEMCodePage
  fullName: System.Globalization.TextInfo.OEMCodePage
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.TextInfo.ReadOnly(System.Globalization.TextInfo)
  parent: System.Globalization.TextInfo
  isExternal: false
  name: ReadOnly(TextInfo)
  nameWithType: TextInfo.ReadOnly(TextInfo)
  fullName: System.Globalization.TextInfo.ReadOnly(TextInfo)
- uid: System.Globalization.TextInfo
  parent: System.Globalization
  isExternal: false
  name: TextInfo
  nameWithType: TextInfo
  fullName: System.Globalization.TextInfo
- uid: System.Globalization.TextInfo
  parent: System.Globalization
  isExternal: false
  name: TextInfo
  nameWithType: TextInfo
  fullName: System.Globalization.TextInfo
- uid: System.Globalization.TextInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Globalization.TextInfo
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: TextInfo.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Globalization.TextInfo.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Globalization.TextInfo.ToLower(System.Char)
  parent: System.Globalization.TextInfo
  isExternal: false
  name: ToLower(Char)
  nameWithType: TextInfo.ToLower(Char)
  fullName: System.Globalization.TextInfo.ToLower(Char)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Globalization.TextInfo.ToLower(System.String)
  parent: System.Globalization.TextInfo
  isExternal: false
  name: ToLower(String)
  nameWithType: TextInfo.ToLower(String)
  fullName: System.Globalization.TextInfo.ToLower(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.TextInfo.ToString
  parent: System.Globalization.TextInfo
  isExternal: false
  name: ToString()
  nameWithType: TextInfo.ToString()
  fullName: System.Globalization.TextInfo.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.TextInfo.ToTitleCase(System.String)
  parent: System.Globalization.TextInfo
  isExternal: false
  name: ToTitleCase(String)
  nameWithType: TextInfo.ToTitleCase(String)
  fullName: System.Globalization.TextInfo.ToTitleCase(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.TextInfo.ToUpper(System.Char)
  parent: System.Globalization.TextInfo
  isExternal: false
  name: ToUpper(Char)
  nameWithType: TextInfo.ToUpper(Char)
  fullName: System.Globalization.TextInfo.ToUpper(Char)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Globalization.TextInfo.ToUpper(System.String)
  parent: System.Globalization.TextInfo
  isExternal: false
  name: ToUpper(String)
  nameWithType: TextInfo.ToUpper(String)
  fullName: System.Globalization.TextInfo.ToUpper(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.TextInfo.ToLower*
  parent: System.Globalization.TextInfo
  isExternal: false
  nameWithType: TextInfo.
- uid: System.Globalization.TextInfo.ToUpper*
  parent: System.Globalization.TextInfo
  isExternal: false
  nameWithType: TextInfo.
