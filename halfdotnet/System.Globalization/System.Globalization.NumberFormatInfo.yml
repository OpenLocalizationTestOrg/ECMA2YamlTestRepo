### YamlMime:ManagedReference
items:
- uid: System.Globalization.NumberFormatInfo
  id: NumberFormatInfo
  children:
  - System.Globalization.NumberFormatInfo.#ctor
  - System.Globalization.NumberFormatInfo.Clone
  - System.Globalization.NumberFormatInfo.CurrencyDecimalDigits
  - System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator
  - System.Globalization.NumberFormatInfo.CurrencyGroupSeparator
  - System.Globalization.NumberFormatInfo.CurrencyGroupSizes
  - System.Globalization.NumberFormatInfo.CurrencyNegativePattern
  - System.Globalization.NumberFormatInfo.CurrencyPositivePattern
  - System.Globalization.NumberFormatInfo.CurrencySymbol
  - System.Globalization.NumberFormatInfo.CurrentInfo
  - System.Globalization.NumberFormatInfo.DigitSubstitution
  - System.Globalization.NumberFormatInfo.GetFormat(System.Type)
  - System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)
  - System.Globalization.NumberFormatInfo.InvariantInfo
  - System.Globalization.NumberFormatInfo.IsReadOnly
  - System.Globalization.NumberFormatInfo.NaNSymbol
  - System.Globalization.NumberFormatInfo.NativeDigits
  - System.Globalization.NumberFormatInfo.NegativeInfinitySymbol
  - System.Globalization.NumberFormatInfo.NegativeSign
  - System.Globalization.NumberFormatInfo.NumberDecimalDigits
  - System.Globalization.NumberFormatInfo.NumberDecimalSeparator
  - System.Globalization.NumberFormatInfo.NumberGroupSeparator
  - System.Globalization.NumberFormatInfo.NumberGroupSizes
  - System.Globalization.NumberFormatInfo.NumberNegativePattern
  - System.Globalization.NumberFormatInfo.PercentDecimalDigits
  - System.Globalization.NumberFormatInfo.PercentDecimalSeparator
  - System.Globalization.NumberFormatInfo.PercentGroupSeparator
  - System.Globalization.NumberFormatInfo.PercentGroupSizes
  - System.Globalization.NumberFormatInfo.PercentNegativePattern
  - System.Globalization.NumberFormatInfo.PercentPositivePattern
  - System.Globalization.NumberFormatInfo.PercentSymbol
  - System.Globalization.NumberFormatInfo.PerMilleSymbol
  - System.Globalization.NumberFormatInfo.PositiveInfinitySymbol
  - System.Globalization.NumberFormatInfo.PositiveSign
  - System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)
  langs:
  - csharp
  name: NumberFormatInfo
  nameWithType: NumberFormatInfo
  fullName: System.Globalization.NumberFormatInfo
  type: Class
  summary: Provides culture-specific information for formatting and parsing numeric values.
  remarks: "The NumberFormatInfo class contains culture-specific information that is used when you format and parse numeric values. This information includes the currency symbol, the decimal symbol, the group separator symbol, and the symbols for positive and negative signs.  \n  \n-   [Instantiating a NumberFormatInfo object](#Instantiating)  \n  \n    -   [For the current culture](#Instantiating_Current)  \n  \n    -   [For the invariant culture](#Instantiating_Invariant)  \n  \n    -   [For a specific culture](#Instantiating_Specific)  \n  \n    -   [For a neutral culture](#Instantiating_Neutral)  \n  \n-   [NumberFormatInfo and dynamic data](#dynamic)  \n  \n-   [IFormatProvider, NumberFormatInfo, and numeric formatting](#formatProvider)  \n  \n-   [Format strings and NumberFormatInfo properties](#properties)  \n  \n-   [Modifying NumberFormatInfo properties](#modifying)  \n  \n    -   [Modifying the currency symbol and pattern](#currency)  \n  \n    -   [Formatting a national identification number](#id)  \n  \n-   [Parsing numeric strings](#parsing)  \n  \n    -   [Parsing user strings](#ParseUser)  \n  \n    -   [Serializing and deserializing numeric data](#ParseSerial)  \n  \n<a name=\"Instantiating\"></a>   \n## Instantiating a NumberFormatInfo object  \n You can instantiate a NumberFormatInfo object that represents the formatting conventions of the current culture, the invariant culture, a specific culture, or a neutral culture.  \n  \n<a name=\"Instantiating_Current\"></a>   \n## Instantiating a NumberFormatInfo object for the current culture  \n You can instantiate a NumberFormatInfo object for the current thread culture in any of the following ways. In each case, the returned NumberFormatInfo object is read-only.  \n  \n-   By retrieving a <xref:System.Globalization.CultureInfo> object that represents the current thread culture from the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property, and retrieving the <xref:System.Globalization.CultureInfo> object from its <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName> property.  \n  \n-   By retrieving the NumberFormatInfo object returned by the `static` (`Shared` in Visual Basic) <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> property.  \n  \n-   By calling the <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> method with a <xref:System.Globalization.CultureInfo> object that represents the current culture.  \n  \n The following example uses these three ways to create NumberFormatInfo objects that represent the formatting conventions of the current culture. It also retrieves the value of the <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> property to illustrate that each object is read-only.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class.Instantiate#1](../../add/codesnippet/system.globalization.numberformatinfo.class.md)]  \n  \n You can create a writable NumberFormatInfo object that represents the conventions of the current thread culture in any of the following ways:  \n  \n-   By retrieving a NumberFormatInfo object in any of the ways illustrated in the previous code example, and calling the <xref:System.Globalization.NumberFormatInfo.Clone%2A> method on the returned NumberFormatInfo object. This creates a copy of the original NumberFormatInfo object, except that its <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> property is `false`.  \n  \n-   By calling the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> method to create a <xref:System.Globalization.CultureInfo> object that represents the current culture, and then using its <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName> property to retrieve the NumberFormatInfo object.  \n  \n The following example illustrates these two ways of instantiating a NumberFormatInfo object, and displays the value of its <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> property to illustrate that the object is not read-only.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class.Instantiate#2](../../add/codesnippet/system.globalization.numberformatinfo.class.md)]  \n  \n Note that the Windows operating system allows the user to override some of the NumberFormatInfo property values used in numeric formatting and parsing operations through the **Region and Language** item in Control Panel. For example, a user whose culture is English (United States) might choose to display currency values as 1.1 USD instead of the default of $1.1. The NumberFormatInfo objects retrieved in the ways discussed previously all reflect these user overrides. If this is undesirable, you can create a NumberFormatInfo object that does not reflect user overrides (and that is also read/write rather than read-only) by calling the <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=fullName> constructor and supplying a value of `false` for the  argument. The following example provides an illustration for a system whose current culture is English (United States) and whose currency symbol has been changed from the default of $ to USD.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class.Instantiate#3](../../add/codesnippet/system.globalization.numberformatinfo.class.md)]  \n  \n If the <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=fullName> property is set to `true`, the properties <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>, <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName>, and <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=fullName> are also retrieved from the user settings. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo> object (for example, if the selected calendar is not one of the calendars listed by the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property), the results of the methods and the values of the properties are undefined.  \n  \n<a name=\"Instantiating_Invariant\"></a>   \n## Instantiating a NumberFormatInfo object for the invariant culture  \n The invariant culture represents a culture that is culture-insensitive. It is based on the English language but not on any specific English-speaking country/region. Although the data of specific cultures can be dynamic and can change to reflect new cultural conventions or user preferences, the data of the invariant culture does not change. A NumberFormatInfo object that represents the formatting conventions of the invariant culture can be used for formatting operations in which result strings should not vary by culture.  \n  \n You can instantiate a NumberFormatInfo object that represents the formatting conventions of the invariant culture in the following ways:  \n  \n-   By retrieving the value of the <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A> property. The returned  NumberFormatInfo object is read-only.  \n  \n-   By retrieving the value of the <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName> property from the <xref:System.Globalization.CultureInfo> object that is returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property. The returned NumberFormatInfo object is read-only.  \n  \n-   By calling the parameterless <xref:System.Globalization.NumberFormatInfo.%23ctor%2A> class constructor. The returned NumberFormatInfo object is read/write.  \n  \n The following example uses each of these methods to instantiate a NumberFormatInfo object that represents the invariant culture. It then indicates whether the object is read-only,  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class.Instantiate#4](../../add/codesnippet/system.globalization.numberformatinfo.class.md)]  \n  \n<a name=\"Instantiating_Specific\"></a>   \n## Instantiating a NumberFormatInfo object for a specific culture  \n A specific culture represents a language that is spoken in a particular country/region. For example, en-US is a specific culture that represents the English language spoken in the United States, and en-CA is a specific culture that represents the English language spoken in Canada. You can instantiate a NumberFormatInfo object that represents the formatting conventions of a specific culture in the following ways:  \n  \n-   By calling the <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=fullName> method and retrieving the value of the returned <xref:System.Globalization.CultureInfo> object's <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. The returned NumberFormatInfo object is read-only.  \n  \n-   By passing a <xref:System.Globalization.CultureInfo> object that represents the culture whose NumberFormatInfo object you want to retrieve to the static <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> method. The returned NumberFormatInfo object is read/write.  \n  \n-   By calling the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> method and retrieving the value of the returned <xref:System.Globalization.CultureInfo> object's <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. The returned NumberFormatInfo object is read/write.  \n  \n-   By calling one of the <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=fullName> class constructors and retrieving the value of the returned <xref:System.Globalization.CultureInfo> object's <xref:System.Globalization.CultureInfo.NumberFormat%2A> property. The returned NumberFormatInfo object is read/write.  \n  \n The following example uses these four ways to create a NumberFormatInfo object that reflects the formatting conventions of the Indonesian (Indonesia) culture. It also indicates whether each object is read-only.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class.Instantiate#5](../../add/codesnippet/system.globalization.numberformatinfo.class.md)]  \n  \n<a name=\"Instantiating_Neutral\"></a>   \n## Instantiating a NumberFormatInfo object for a neutral culture  \n A neutral culture represents a culture or language that is independent of a country/region. It is typically the parent of one or more specific cultures. For example, fr is a neutral culture for the French language and the parent of the fr-FR culture. You create a NumberFormatInfo object that represents the formatting conventions of a neutral culture in the same way that you create a NumberFormatInfo object that represents the formatting conventions of a specific culture.  \n  \n> [!NOTE]\n>  In the [!INCLUDE[net_v35_short](../../add/includes/net-v35-short-md.md)] and earlier versions, trying to retrieve a NumberFormatInfo object that reflects the formatting conventions of a neutral culture throws a <xref:System.NotSupportedException> exception.  \n  \n However, because it is independent of a specific country/region, a neutral culture lacks culture-specific formatting information. Rather than populating the NumberFormatInfo object with generic values, the .NET Framework returns a NumberFormatInfo object that reflects the formatting conventions of a specific culture that is a child of the neutral culture. For example, the NumberFormatInfo object for the neutral en culture reflects the formatting conventions of the en-US culture, and the NumberFormatInfo object for the fr culture reflects the formatting conventions of the fr-FR culture.  \n  \n You can use code like the following to determine which specific culture's formatting conventions each neutral culture represents.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class.Instantiate#6](../../add/codesnippet/system.globalization.numberformatinfo.class.md)]  \n  \n<a name=\"dynamic\"></a>   \n## NumberFormatInfo and dynamic data  \n The culture-specific data for formatting numeric values provided by the NumberFormatInfo class is dynamic, just like the cultural data provided by the <xref:System.Globalization.CultureInfo> class. You should not make any assumptions about the stability of values for NumberFormatInfo objects that are associated with particular <xref:System.Globalization.CultureInfo> objects. Only the data provided by the invariant culture and its associated NumberFormatInfo object is stable. Other data can change between application sessions, or even within a single session, for the following reasons:  \n  \n-   **System updates.** Cultural preferences such as the currency symbol or currency formats change over time. When this happens, Windows Update includes changes to the NumberFormatInfo property value for a particular culture.  \n  \n-   **Replacement cultures.** The <xref:System.Globalization.CultureAndRegionInfoBuilder> class can be used to replace the data of an existing culture.  \n  \n-   **Cascading changes to property values.** A number of culture-related properties can change at run time, which, in turn, causes NumberFormatInfo data to change. For example, the current culture can be changed either programmatically or through user action. When this happens, the NumberFormatInfo object returned by the <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> property changes to an object associated with the current culture.  \n  \n-   **User preferences.** Users of your application might override some of the values associated with the current system culture through the region and language options in Control Panel. For example, users might choose a different currency symbol or a different decimal separator symbol. If the <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=fullName> property is set to `true` (its default value), the properties of the NumberFormatInfo object are also retrieved from the user settings.  \n  \n Starting with the .NET Framework 2.0, all user-overridable properties of a NumberFormatInfo object are initialized when the object is created. There is still a possibility of inconsistency, because neither object creation nor the user override process is atomic, and the relevant values may change during object creation. However, these inconsistencies should be extremely rare.  \n  \n You can control whether user overrides are reflected in NumberFormatInfo objects that represent the same culture as the current thread culture. The following table lists the ways in which a NumberFormatInfo object can be retrieved and indicates whether the resulting object reflects user overrides.  \n  \n|Source of CultureInfo and NumberFormatInfo object|Reflects user overrides|  \n|-------------------------------------------------------|-----------------------------|  \n|`CultureInfo.CurrentCulture.NumberFormat` property|Yes|  \n|<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName> property|Yes|  \n|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> method|Yes|  \n|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=fullName> method|No|  \n|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> constructor|Yes|  \n|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=fullName> constructor|Depends on value of  parameter|  \n  \n Unless there is a compelling reason to do otherwise, you should respect user overrides when you use the NumberFormatInfo object in client applications to format and parse user input or to display numeric data. For server applications or unattended applications, you should not respect user overrides. However, if you are using the NumberFormatInfo object either explicitly or implicitly to persist numeric data in string form, you should either use a NumberFormatInfo object that reflects the formatting conventions of the invariant culture, or you should specify a custom numeric format string that you use regardless of culture.  \n  \n<a name=\"formatProvider\"></a>   \n## IFormatProvider, NumberFormatInfo, and numeric formatting  \n A NumberFormatInfo object is used implicitly or explicitly in all numeric formatting operations. These include calls to the following methods:  \n  \n-   All numeric formatting methods, such as <xref:System.Int32.ToString%2A?displayProperty=fullName>, <xref:System.Double.ToString%2A?displayProperty=fullName>, and <xref:System.Convert.ToString%28System.Int32%29?displayProperty=fullName>.  \n  \n-   The major composite formatting method, <xref:System.String.Format%2A?displayProperty=fullName>.  \n  \n-   Other composite formatting methods, such as [Console.WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False) and [StringBuilder.AppendFormat(String, Object\\[\\])](assetId:///M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \n  \n All numeric formatting operations make use of an <xref:System.IFormatProvider> implementation. The <xref:System.IFormatProvider> interface includes a single method, <xref:System.IFormatProvider.GetFormat%28System.Type%29>. This is a callback method that is passed a <xref:System.Type> object that represents the type needed to provide formatting information. The method is responsible for returning either an instance of that type or `null`, if it cannot provide an instance of the type. The .NET Framework provides two <xref:System.IFormatProvider> implementations for formatting numbers:  \n  \n-   The <xref:System.Globalization.CultureInfo> class, which represents a specific culture (or a specific language in a specific country/region). In a numeric formatting operation, the <xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=fullName> method returns the NumberFormatInfo object associated with its <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName> property.  \n  \n-   The NumberFormatInfo class, which provides information about the formatting conventions of its associated culture. The <xref:System.Globalization.NumberFormatInfo.GetFormat%2A?displayProperty=fullName> method returns an instance of itself.  \n  \n If an <xref:System.IFormatProvider> implementation is not provided to a formatting method explicitly, a <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property that represents the current thread culture is used.  \n  \n The following example illustrates the relationship between the <xref:System.IFormatProvider> interface and the NumberFormatInfo class in formatting operations by defining a custom <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method displays the type name of the object requested by the formatting operation. If the interface is requesting a NumberFormatInfo object, this method provides the NumberFormatInfo object for the current thread culture. As the output from the example shows, the <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName> method requests a NumberFormatInfo object to provide formatting information, whereas the [String.Format(IFormatProvider, String, Object\\[\\])](assetId:///M:System.String.Format(System.IFormatProvider,System.String,System.Object[])?qualifyHint=True&autoUpgrade=False) method requests NumberFormatInfo and <xref:System.Globalization.DateTimeFormatInfo> objects as well as an <xref:System.ICustomFormatter> implementation.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class#1)]  \n  \n If an <xref:System.IFormatProvider> implementation is not explicitly provided in a numeric formatting method call, the method calls the `CultureInfo.CurrentCulture.GetFormat` method, which returns the NumberFormatInfo object that corresponds to the current thread culture.  \n  \n<a name=\"properties\"></a>   \n## Format strings and NumberFormatInfo properties  \n Every formatting operation uses either a standard or a custom numeric format string to produce a result string from a number. In some cases, the use of a format string to produce a result string is explicit, as in the following example. This code calls the <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to convert a <xref:System.Decimal> value to a number of different string representations by using the formatting conventions of the en-US culture.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class#2](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class#2)]  \n  \n In other cases, the use of a format string is implicit. For example, in the following method calls to the default or parameterless <xref:System.Decimal.ToString?displayProperty=fullName> method, the value of the <xref:System.Decimal> instance is formatted by using the general (\"G\") format specifier and the conventions of the current culture, which in this case is the en-US culture.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class#3](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class#3)]  \n  \n Each standard numeric format string uses one or more NumberFormatInfo properties to determine the pattern or the symbols used in the result string. Similarly, each custom numeric format specifier except \"0\" and \"#\" insert symbols in the result string that are defined by NumberFormatInfo properties. The following table lists the standard and custom numeric format specifiers and their associated NumberFormatInfo properties.  To change the appearance of the result string for a particular culture, see the [Modifying NumberFormatInfo properties](#modifying) section. For details about the use of these format specifiers, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md).  \n  \n|Format specifier|Associated properties|  \n|----------------------|---------------------------|  \n|\"C\" or \"c\" (currency format specifier)|<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, to define the default number of fractional digits.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, to define the decimal separator symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, to define the group or thousands separator.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>, to define the sizes of integral groups.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>, to define the pattern of negative currency values.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>, to define the pattern of positive currency values.<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, to define the currency symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, to define the negative sign symbol.|  \n|\"D\" or \"d\" (decimal format specifier)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, to define the negative sign symbol.|  \n|\"E\" or \"e\" (exponential or scientific format specifier)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, to define the negative sign symbol in the mantissa and exponent.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, to define the decimal separator symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, to define the positive sign symbol in the exponent.|  \n|\"F\" or \"f\" (fixed-point format specifier)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, to define the negative sign symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, to define the default number of fractional digits.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, to define the decimal separator symbol.|  \n|\"G\" or \"g\" (general format specifier)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, to define the negative sign symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, to define the decimal separator symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, to define the positive sign symbol for result strings in exponential format.|  \n|\"N\" or \"n\" (number format specifier)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, to define the negative sign symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, to define the default number of fractional digits.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, to define the decimal separator symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, to define the group separator (thousands) symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>, to define the number of integral digits in a group.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>, to define the format of negative values.|  \n|\"P\" or \"p\" (percent format specifier)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, to define the negative sign symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>, to define the default number of fractional digits.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>, to define the decimal separator symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>, to define the group separator symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>, to define the number of integral digits in a group.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>, to define the placement of the percent symbol and the negative symbol for negative values.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>, to define the placement of the percent symbol for positive values.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, to define the percent symbol.|  \n|\"R\" or \"r\" (round-trip format specifier)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, to define the negative sign symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, to define the decimal separator symbol.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, to define the positive sign symbol in an exponent.|  \n|\"X\" or \"x\" (hexadecimal format specifier)|None.|  \n|\".\" (decimal point custom format specifier)|<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, to define the decimal separator symbol.|  \n|\",\" (group separator custom format specifier)|<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, to define the group (thousands) separator symbol.|  \n|\"%\" (percentage placeholder custom format specifier)|<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, to define the percent symbol.|  \n|\"‰\" (per mille placeholder custom format specifier)|<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>, to define the per mille symbol.|  \n|\"E\" (exponential notation custom format specifier)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, to define the negative sign symbol in the mantissa and exponent.<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, to define the positive sign symbol in the exponent.|  \n  \n Note that the NumberFormatInfo class includes a <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> property that specifies the base 10 digits used by a specific culture. However, the property is not used in formatting operations; only the Basic Latin digits 0 (U+0030) through 9 (U+0039) are used in the result string. In addition, for <xref:System.Single> and <xref:System.Double> values of `NaN`, `PositiveInfinity`, and `NegativeInfinity`, the result string consists exclusively of the symbols defined by the <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, and <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> properties, respectively.  \n  \n<a name=\"modifying\"></a>   \n## Modifying NumberFormatInfo properties  \n You can modify the properties of a NumberFormatInfo object to customize the result string produced in a numeric formatting operation. To do this:  \n  \n1.  Create a read/write copy of a NumberFormatInfo object whose formatting conventions you want to modify. For more information, see the [Instantiating a NumberFormatInfo object](#Instantiating) section.  \n  \n2.  Modify the property or properties that are used to produce the desired result string. For information about how formatting methods use NumberFormatInfo properties to define result strings, see the [Format strings and NumberFormatInfo properties](#properties) section.  \n  \n3.  Use the custom NumberFormatInfo object as the <xref:System.IFormatProvider> argument in calls to formatting methods.  \n  \n> [!NOTE]\n>  Instead of dynamically modifying a culture's property values each time an application is started, you can use the <xref:System.Globalization.CultureAndRegionInfoBuilder> class to define either a custom culture (a culture that has a unique name and that supplements existing cultures) or a replacement culture (one that is used instead of a specific culture).  \n  \n The following sections provide some examples.  \n  \n<a name=\"currency\"></a>   \n### Modifying the currency symbol and pattern  \n The following example modifies a NumberFormatInfo object that that represents the formatting conventions of the en-US culture. It assigns the ISO-4217 currency symbol to the <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> property and defines a pattern for currency values that consists of the currency symbol followed by a space and a numeric value.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Customize#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize#1)]  \n  \n<a name=\"id\"></a>   \n### Formatting a national identification number  \n Many national identification numbers consist exclusively of digits and so can easily be formatted by modifying the properties of a NumberFormatInfo object. For example, a social security number in the United States consists of 9 digits arranged as follows: `XXX-XX-XXXX`. The following example assumes that social security numbers are stored as integer values and formats them appropriately.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Customize#2](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize#2)]  \n  \n<a name=\"parsing\"></a>   \n## Parsing numeric strings  \n Parsing involves converting the string representation of a number to a number. Each numeric type in the .NET Framework includes two overloaded parsing methods: `Parse` and `TryParse`. The `Parse` method converts a string to a number and throws an exception if the conversion fails. The `TryParse` method converts a string to a number, assigns the number to an `out` argument, and returns a <xref:System.Boolean> value that indicates whether the conversion succeeded.  \n  \n The parsing methods implicitly or explicitly use a <xref:System.Globalization.NumberStyles> enumeration value to determine what style elements (such as group separators, a decimal separator, or a currency symbol) can be present in a string if the parsing operation is to succeed. If a <xref:System.Globalization.NumberStyles> value is not provided in the method call, the default is a <xref:System.Globalization.NumberStyles> value that includes the <xref:System.Globalization.NumberStyles> and <xref:System.Globalization.NumberStyles> flags, which specifies that the parsed string can include group symbols, a decimal separator, a negative sign, and white-space characters, or it can be the string representation of a number in exponential notation.  \n  \n The parsing methods also implicitly or explicitly use a NumberFormatInfo object that defines the specific symbols and patterns that can occur in the string to be parsed. If a NumberFormatInfo object is not provided, the default is the NumberFormatInfo for the current thread culture. For more information about parsing, see the individual parsing methods, such as <xref:System.Int16.Parse%28System.String%29?displayProperty=fullName>, <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>, <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>, <xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName>, <xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29?displayProperty=fullName>, and <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29?displayProperty=fullName>.  \n  \n The following example illustrates the culture-sensitive nature of parsing strings. It tries to parse a string that include thousands separators by using the conventions of the en-US, fr-FR, and invariant cultures. A string that includes the comma as a group separator and the period as a decimal separator fails to parse in the fr-FR culture, and a string with white space as a group separator and a comma as a decimal separator fails to parse in the en-US and invariant cultures.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class#4](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class#4)]  \n  \n Parsing generally occurs in two contexts:  \n  \n-   As an operation that is designed to convert user input into a numeric value.  \n  \n-   As an operation that is designed to round-trip a numeric value; that is, to deserialize a numeric value that was previously serialized as a string.  \n  \n The following sections discuss these two operations in greater detail.  \n  \n<a name=\"ParseUser\"></a>   \n### Parsing user strings  \n When you are parsing numeric strings input by the user, you should always instantiate a NumberFormatInfo object that reflects the user's cultural settings. For information about how to instantiate a NumberFormatInfo object that reflects user customizations, see the [NumberFormatInfo and dynamic data](#dynamic) section.  \n  \n The following example illustrates the difference between a parsing operation that reflects user cultural settings and one that does not. In this case, the default system culture is en-US, but the user has defined \",\" as the decimal symbol and \".\" as the group separator in Control Panel, **Region and Language**. Ordinarily, these symbols are reversed in the default en-US culture. When the user enters a string that reflects user settings, and the string is parsed by a NumberFormatInfo object that also reflects user settings (overrides), the parsing operation returns a correct result. However, when the string is parsed by a NumberFormatInfo object that reflects standard en-US cultural settings, it mistakes the comma symbol for a group separator and returns an incorrect result.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class#5](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class#5)]  \n  \n<a name=\"ParseSerial\"></a>   \n### Serializing and deserializing numeric data  \n When numeric data is serialized in string format and later deserialized and parsed, the strings should be generated and parsed by using the conventions of the invariant culture. The formatting and parsing operations should never reflect the conventions of a specific culture. If culture-specific settings are used, the portability of the data is strictly limited; it can be successfully deserialized only on a thread whose culture-specific settings are identical to those of the thread on which it was serialized. In some cases, this means that the data cannot even be successfully deserialized on the same system on which it was serialized.  \n  \n The following example illustrates what can happen when this principle is violated. Floating-point values in an array are converted to strings when the current thread uses the culture-specific settings of the en-US culture. The data is then parsed by a thread that uses the culture-specific settings of the en-GB culture. In this case, although each parsing operation succeeds, the data does not round-trip successfully and data corruption occurs. In other cases, a parsing operation could fail and a <xref:System.FormatException> exception could be thrown.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.Class#6](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class#6)]"
  example:
  - "The following example shows how to retrieve a NumberFormatInfo object for a corresponding <xref:System.Globalization.CultureInfo> object, and use the retrieved object to query number formatting information for the particular culture.  \n  \n [!CODE [NumberFormatInfo#1](../CodeSnippet/VS_Snippets_CLR/NumberFormatInfo#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class NumberFormatInfo : ICloneable, IFormatProvider
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.IFormatProvider
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.#ctor
  id: '#ctor'
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: NumberFormatInfo()
  nameWithType: NumberFormatInfo.NumberFormatInfo()
  fullName: System.Globalization.NumberFormatInfo.NumberFormatInfo()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Initializes a new writable instance of the <see cref="T:System.Globalization.NumberFormatInfo"> class that is culture-independent (invariant).
  remarks: The properties of the new instance can be modified if your application needs user-defined formatting.
  syntax:
    content: public NumberFormatInfo ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.Clone
  id: Clone
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: Clone()
  nameWithType: NumberFormatInfo.Clone()
  fullName: System.Globalization.NumberFormatInfo.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Creates a shallow copy of the <see cref="T:System.Globalization.NumberFormatInfo"> object.
  remarks: "The clone is writable even if the original <xref:System.Globalization.NumberFormatInfo> object is read-only. Therefore, the properties of the clone can be modified with user-defined patterns.  \n  \n A shallow copy of an object is a copy of the object only. If the object contains references to other objects, the shallow copy will not create copies of the referred objects. It will refer to the original objects instead. On the other hand, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. In the case of a <xref:System.Globalization.NumberFormatInfo> object, a shallow copy is sufficient for copying all instance properties, because all properties that return object references are `static` (`Shared` in Visual Basic)."
  example:
  - "The following example uses the Clone method to create a read/write copy of a <xref:System.Globalization.NumberFormatInfo> object that represents the numeric formatting conventions of the current thread culture.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.IsReadOnly#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly#1)]"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: A new object copied from the original <see cref="T:System.Globalization.NumberFormatInfo"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.CurrencyDecimalDigits
  id: CurrencyDecimalDigits
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: CurrencyDecimalDigits
  nameWithType: NumberFormatInfo.CurrencyDecimalDigits
  fullName: System.Globalization.NumberFormatInfo.CurrencyDecimalDigits
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the number of decimal places to use in currency values.
  remarks: The CurrencyDecimalDigits property is used with the "C" standard format string without a precision specifier in numeric formatting operations. It defines the default number of fractional digits that appear after the decimal separator. This value is overridden if a precision specifier is used. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md).
  example:
  - "The following example demonstrates the effect of changing the CurrencyDecimalDigits property.  \n  \n [!CODE [CurrencyDecimalDigits#1](../CodeSnippet/VS_Snippets_CLR/CurrencyDecimalDigits#1)]"
  syntax:
    content: public int CurrencyDecimalDigits { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator
  id: CurrencyDecimalSeparator
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: CurrencyDecimalSeparator
  nameWithType: NumberFormatInfo.CurrencyDecimalSeparator
  fullName: System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string to use as the decimal separator in currency values.
  remarks: "The initial value of this property is derived from the settings in the **Region and Language** item in Control Panel.  \n  \n The CurrencyDecimalSeparator property is used with the \"C\" standard format string to define the symbol that separates integral from fractional digits. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md)."
  example:
  - "The following example demonstrates the effect of changing the CurrencyDecimalSeparator property.  \n  \n [!CODE [CurrencyDecimalSeparator#1](../CodeSnippet/VS_Snippets_CLR/CurrencyDecimalSeparator#1)]"
  syntax:
    content: public string CurrencyDecimalSeparator { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.CurrencyGroupSeparator
  id: CurrencyGroupSeparator
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: CurrencyGroupSeparator
  nameWithType: NumberFormatInfo.CurrencyGroupSeparator
  fullName: System.Globalization.NumberFormatInfo.CurrencyGroupSeparator
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string that separates groups of digits to the left of the decimal in currency values.
  remarks: "The initial value of this property is derived from the settings in the **Regional and Language** item in Control Panel.  \n  \n The CurrencyGroupSeparator property is used with the \"C\" standard format string to define the symbol that separates groups of integral digits. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md)."
  example:
  - "The following example demonstrates the effect of changing the CurrencyGroupSeparator property.  \n  \n [!CODE [CurrencyGroupSeparator#1](../CodeSnippet/VS_Snippets_CLR/CurrencyGroupSeparator#1)]"
  syntax:
    content: public string CurrencyGroupSeparator { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.CurrencyGroupSizes
  id: CurrencyGroupSizes
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: CurrencyGroupSizes
  nameWithType: NumberFormatInfo.CurrencyGroupSizes
  fullName: System.Globalization.NumberFormatInfo.CurrencyGroupSizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the number of digits in each group to the left of the decimal in currency values.
  remarks: "The CurrencyGroupSizes property is used with the \"C\" standard format string to define the number of digits that appear in integral groups. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md). Every element in the one-dimensional array must be an integer from 1 through 9. The last element can be 0.  \n  \n The first element of the array defines the number of elements in the least significant group of digits immediately to the left of the <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>. Each subsequent element refers to the next significant group of digits to the left of the previous group. If the last element of the array is not 0, the remaining digits are grouped based on the last element of the array. If the last element is 0, the remaining digits are not grouped.  \n  \n For example, if the array contains { 3, 4, 5 }, the digits are grouped similar to \"$55,55555,55555,55555,4444,333.00\". If the array contains { 3, 4, 0 }, the digits are grouped similar to \"$55555555555555555,4444,333.00\"."
  example:
  - "The following example demonstrates the effect of changing the CurrencyGroupSizes property.  \n  \n [!CODE [CurrencyGroupSizes#1](../CodeSnippet/VS_Snippets_CLR/CurrencyGroupSizes#1)]"
  syntax:
    content: public int[] CurrencyGroupSizes { get; set; }
    return:
      type: System.Int32[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.CurrencyNegativePattern
  id: CurrencyNegativePattern
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: CurrencyNegativePattern
  nameWithType: NumberFormatInfo.CurrencyNegativePattern
  fullName: System.Globalization.NumberFormatInfo.CurrencyNegativePattern
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the format pattern for negative currency values.
  remarks: "The CurrencyNegativePattern property is used with the \"C\" standard format string to define the pattern of negative currency values. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md). This property has one of the values in the following table. The symbol \"$\" is the <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, the symbol \"-\" is the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, and  is a number.  \n  \n|Value|Associated pattern|  \n|-----------|------------------------|  \n|0|($n)|  \n|1|-$n|  \n|2|$-n|  \n|3|$n-|  \n|4|(n$)|  \n|5|-n$|  \n|6|n-$|  \n|7|n$-|  \n|8|-n $|  \n|9|-$ n|  \n|10|n $-|  \n|11|$ n-|  \n|12|$ -n|  \n|13|n- $|  \n|14|($ n)|  \n|15|(n $)|"
  example:
  - "The following example shows how the CurrencyNegativePattern property defines the format of negative currency values.  It retrieves all the specific cultures that are defined on the host computer and displays each culture's CurrencyNegativePattern property value, its associated pattern, and a number formatted as a currency value.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.CurrencyNegativePattern#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern#1)]"
  syntax:
    content: public int CurrencyNegativePattern { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.CurrencyPositivePattern
  id: CurrencyPositivePattern
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: CurrencyPositivePattern
  nameWithType: NumberFormatInfo.CurrencyPositivePattern
  fullName: System.Globalization.NumberFormatInfo.CurrencyPositivePattern
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the format pattern for positive currency values.
  remarks: "The CurrencyPositivePattern property is used with the \"C\" standard format string to define pattern of positive currency values. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md). This property has one of the values in the following table. The symbol \"$\" is the <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> and  is a number.  \n  \n|Value|Associated pattern|  \n|-----------|------------------------|  \n|0|$n|  \n|1|n$|  \n|2|$ n|  \n|3|n $|  \n  \n Note that the pattern does not support a positive sign."
  syntax:
    content: public int CurrencyPositivePattern { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.CurrencySymbol
  id: CurrencySymbol
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: CurrencySymbol
  nameWithType: NumberFormatInfo.CurrencySymbol
  fullName: System.Globalization.NumberFormatInfo.CurrencySymbol
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string to use as the currency symbol.
  remarks: The string assigned to the CurrencySymbol property is included in the result string when a numeric value is formatted with the "C" [standard numeric format string](../Topic/Standard%20Numeric%20Format%20Strings.md).
  example:
  - "The following example displays the currency symbol for the current culture and uses the \"C\" standard numeric format string to format a currency value.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.CurrencySymbol#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol#1)]"
  syntax:
    content: public string CurrencySymbol { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.CurrentInfo
  id: CurrentInfo
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: CurrentInfo
  nameWithType: NumberFormatInfo.CurrentInfo
  fullName: System.Globalization.NumberFormatInfo.CurrentInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets a read-only <see cref="T:System.Globalization.NumberFormatInfo"> that formats values based on the current culture.
  remarks: Retrieving a <xref:System.Globalization.NumberFormatInfo> object from the CurrentInfo property is equivalent to retrieving a <xref:System.Globalization.NumberFormatInfo> object from the `CultureInfo.CurrentCulture.NumberFormat` property.
  example:
  - "The following example shows that the objects returned by the CurrentInfo and   `CultureInfo.CurrentCulture.NumberFormat` properties are identical. It then uses reflection to display the property values of the <xref:System.Globalization.NumberFormatInfo> object returned by the CurrentInfo property on a system whose current culture is en-US.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.CurrentInfo#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo#1)]"
  syntax:
    content: public static System.Globalization.NumberFormatInfo CurrentInfo { get; }
    return:
      type: System.Globalization.NumberFormatInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.DigitSubstitution
  id: DigitSubstitution
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: DigitSubstitution
  nameWithType: NumberFormatInfo.DigitSubstitution
  fullName: System.Globalization.NumberFormatInfo.DigitSubstitution
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets a value that specifies how the graphical user interface displays the shape of a digit.
  remarks: >-
    > [!IMPORTANT]

    >  The DigitSubstitution property is reserved for future use. Currently, it is not used in either parsing or formatting operations for the current <xref:System.Globalization.NumberFormatInfo> object.
  syntax:
    content: public System.Globalization.DigitShapes DigitSubstitution { get; set; }
    return:
      type: System.Globalization.DigitShapes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.GetFormat(System.Type)
  id: GetFormat(System.Type)
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: GetFormat(Type)
  nameWithType: NumberFormatInfo.GetFormat(Type)
  fullName: System.Globalization.NumberFormatInfo.GetFormat(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets an object of the specified type that provides a number formatting service.
  remarks: The `Format(String, IFormatProvider)` methods supported by the base data types invoke this method when the current <xref:System.Globalization.NumberFormatInfo> is passed as the <xref:System.IFormatProvider> parameter. This method implements <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName>.
  syntax:
    content: public object GetFormat (Type formatType);
    parameters:
    - id: formatType
      type: System.Type
      description: The <see cref="T:System.Type"> of the required formatting service.
    return:
      type: System.Object
      description: The current <see cref="T:System.Globalization.NumberFormatInfo">, if  is the same as the type of the current <see cref="T:System.Globalization.NumberFormatInfo">; otherwise, `null`.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)
  id: GetInstance(System.IFormatProvider)
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: GetInstance(IFormatProvider)
  nameWithType: NumberFormatInfo.GetInstance(IFormatProvider)
  fullName: System.Globalization.NumberFormatInfo.GetInstance(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the <see cref="T:System.Globalization.NumberFormatInfo"> associated with the specified <xref:System.IFormatProvider>.
  remarks: "This method uses the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method of  using <xref:System.Globalization.NumberFormatInfo> as the Type parameter. If  is `null` or if <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> returns `null`, this method returns <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.  \n  \n Your application gets a <xref:System.Globalization.NumberFormatInfo> object for a specific culture using one of the following methods:  \n  \n-   Through the <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName> property.  \n  \n-   Through the GetInstance method where  is a <xref:System.Globalization.CultureInfo>.  \n  \n A <xref:System.Globalization.NumberFormatInfo> object is created only for the invariant culture or for specific cultures, not for neutral cultures. For more information about the invariant culture, specific cultures, and neutral cultures, see the <xref:System.Globalization.CultureInfo> class."
  syntax:
    content: public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);
    parameters:
    - id: formatProvider
      type: System.IFormatProvider
      description: "The <see cref=\"T:System.IFormatProvider\"> used to get the <xref:System.Globalization.NumberFormatInfo>.  \n  \n -or-  \n  \n `null` to get <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>."
    return:
      type: System.Globalization.NumberFormatInfo
      description: The <see cref="T:System.Globalization.NumberFormatInfo"> associated with the specified <xref:System.IFormatProvider>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.InvariantInfo
  id: InvariantInfo
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: InvariantInfo
  nameWithType: NumberFormatInfo.InvariantInfo
  fullName: System.Globalization.NumberFormatInfo.InvariantInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets a read-only <see cref="T:System.Globalization.NumberFormatInfo"> object that is culture-independent (invariant).
  remarks: This <xref:System.Globalization.NumberFormatInfo> object returned by this property does not change, regardless of the current culture. It represents the formatting conventions of the invariant culture, which is a culture associated with the English language but not with any country/region. The invariant culture is used in formatting operations that are culture-independent or that produce result strings suitable for display across multiple cultures.
  example:
  - "The following example displays the default property values of the InvariantInfo.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.InvariantInfo#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo#1)]"
  syntax:
    content: public static System.Globalization.NumberFormatInfo InvariantInfo { get; }
    return:
      type: System.Globalization.NumberFormatInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.IsReadOnly
  id: IsReadOnly
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: NumberFormatInfo.IsReadOnly
  fullName: System.Globalization.NumberFormatInfo.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets a value that indicates whether this <see cref="T:System.Globalization.NumberFormatInfo"> object is read-only.
  remarks: "Attempting to perform an assignment to a property of a read-only <xref:System.Globalization.NumberFormatInfo> causes an <xref:System.InvalidOperationException>.  \n  \n You can call the <xref:System.Globalization.NumberFormatInfo.Clone%2A> method to create a read/write <xref:System.Globalization.NumberFormatInfo> object from a read-only object, as the following example illustrates.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.IsReadOnly#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly#1)]"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.NaNSymbol
  id: NaNSymbol
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: NaNSymbol
  nameWithType: NumberFormatInfo.NaNSymbol
  fullName: System.Globalization.NumberFormatInfo.NaNSymbol
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string that represents the IEEE NaN (not a number) value.
  remarks: For more information on NaN values, see <xref:System.Double> or <xref:System.Single>.
  syntax:
    content: public string NaNSymbol { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.NativeDigits
  id: NativeDigits
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: NativeDigits
  nameWithType: NumberFormatInfo.NativeDigits
  fullName: System.Globalization.NumberFormatInfo.NativeDigits
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets a string array of native digits equivalent to the Western digits 0 through 9.
  remarks: >-
    > [!IMPORTANT]

    >  The character set that is specified by the NativeDigits property has no effect on parsing or formatting operations. Only the Basic Latin digits 0 (U+0030) through 9 (U+0039) are used when formatting or parsing numeric values or date and time values.
  example:
  - "The following example demonstrates the NativeDigits property.  \n  \n [!CODE [sys.glob.NFI.nativeDigits#1](../CodeSnippet/VS_Snippets_CLR/sys.glob.NFI.nativeDigits#1)]"
  syntax:
    content: public string[] NativeDigits { get; set; }
    return:
      type: System.String[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.NegativeInfinitySymbol
  id: NegativeInfinitySymbol
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: NegativeInfinitySymbol
  nameWithType: NumberFormatInfo.NegativeInfinitySymbol
  fullName: System.Globalization.NumberFormatInfo.NegativeInfinitySymbol
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string that represents negative infinity.
  remarks: For more information on negative infinity, see <xref:System.Double> or <xref:System.Single>.
  syntax:
    content: public string NegativeInfinitySymbol { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.NegativeSign
  id: NegativeSign
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: NegativeSign
  nameWithType: NumberFormatInfo.NegativeSign
  fullName: System.Globalization.NumberFormatInfo.NegativeSign
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string that denotes that the associated number is negative.
  remarks: This property is used in both formatting and parsing operations. For more information on its use in formatting operations, see the [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md) topics.
  example:
  - "The following example instantiates a read-write <xref:System.Globalization.CultureInfo> object that represents the invariant culture and assigns the OVERLINE character (U+203E) to its NegativeSign property. It then uses this <xref:System.Globalization.CultureInfo> object to format an array of negative floating-point numbers.  \n  \n [!CODE [System.Globalization.NumberFormatInfo.NegativeSign#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign#1)]"
  syntax:
    content: public string NegativeSign { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.NumberDecimalDigits
  id: NumberDecimalDigits
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: NumberDecimalDigits
  nameWithType: NumberFormatInfo.NumberDecimalDigits
  fullName: System.Globalization.NumberFormatInfo.NumberDecimalDigits
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the number of decimal places to use in numeric values.
  remarks: The NumberDecimalDigits property is used with the "F" and "N" standard format strings without a precision specifier in numeric formatting operations. It defines the default number of fractional digits that appear after the decimal separator. This value is overridden if a precision specifier is used. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md).
  example:
  - "The following example demonstrates the effect of changing the NumberDecimalDigits property.  \n  \n [!CODE [NumberDecimalDigits#1](../CodeSnippet/VS_Snippets_CLR/NumberDecimalDigits#1)]"
  syntax:
    content: public int NumberDecimalDigits { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.NumberDecimalSeparator
  id: NumberDecimalSeparator
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: NumberDecimalSeparator
  nameWithType: NumberFormatInfo.NumberDecimalSeparator
  fullName: System.Globalization.NumberFormatInfo.NumberDecimalSeparator
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string to use as the decimal separator in numeric values.
  remarks: "The NumberDecimalSeparator property is used with the \"E\", \"F\", \"G\", \"N\", and \"R\" standard format strings to define the symbol that separates integral from fractional digits. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md).  \n  \n The initial value of this property is derived from the settings in the **Region and Language** item in Control Panel."
  example:
  - "The following example demonstrates the effect of changing the NumberDecimalSeparator property.  \n  \n [!CODE [NumberDecimalSeparator#1](../CodeSnippet/VS_Snippets_CLR/NumberDecimalSeparator#1)]"
  syntax:
    content: public string NumberDecimalSeparator { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.NumberGroupSeparator
  id: NumberGroupSeparator
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: NumberGroupSeparator
  nameWithType: NumberFormatInfo.NumberGroupSeparator
  fullName: System.Globalization.NumberFormatInfo.NumberGroupSeparator
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string that separates groups of digits to the left of the decimal in numeric values.
  remarks: "The NumberGroupSeparator property is used with the \"N\" standard format string to define the symbol that separates groups of integral digits. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md).  \n  \n The initial value of this property is derived from the settings in the **Region and Language** item in Control Panel."
  example:
  - "The following example demonstrates the effect of changing the NumberGroupSeparator property.  \n  \n [!CODE [NumberGroupSeparator#1](../CodeSnippet/VS_Snippets_CLR/NumberGroupSeparator#1)]"
  syntax:
    content: public string NumberGroupSeparator { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.NumberGroupSizes
  id: NumberGroupSizes
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: NumberGroupSizes
  nameWithType: NumberFormatInfo.NumberGroupSizes
  fullName: System.Globalization.NumberFormatInfo.NumberGroupSizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the number of digits in each group to the left of the decimal in numeric values.
  remarks: "The value of the NumberGroupSizes property affects the result of number values that are formatted by using the \"N\" . If a custom numeric format string or other standard numeric format strings are used, the value of the NumberGroupSizes property is ignored.  \n  \n Every element in the one-dimensional array must be an integer from 1 through 9. The last element can be 0.  \n  \n The first element of the array defines the number of elements in the least significant group of digits immediately to the left of the <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>. Each subsequent element refers to the next significant group of digits to the left of the previous group. If the last element of the array is not 0, the remaining digits are grouped based on the last element of the array. If the last element is 0, the remaining digits are not grouped.  \n  \n For example, if the array contains { 3, 4, 5 }, the digits are grouped similar to \"55,55555,55555,55555,4444,333.00\". If the array contains { 3, 4, 0 }, the digits are grouped similar to \"55555555555555555,4444,333.00\"."
  example:
  - "The following example demonstrates the effect of changing the NumberGroupSizes property.  \n  \n [!CODE [NumberGroupSizes#1](../CodeSnippet/VS_Snippets_CLR/NumberGroupSizes#1)]  \n  \n The following example prints a value using different NumberGroupSizes arrays.  \n  \n [!CODE [Classic NumberFormatInfo.NumberGroupSizes Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example#1)]"
  syntax:
    content: public int[] NumberGroupSizes { get; set; }
    return:
      type: System.Int32[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.NumberNegativePattern
  id: NumberNegativePattern
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: NumberNegativePattern
  nameWithType: NumberFormatInfo.NumberNegativePattern
  fullName: System.Globalization.NumberFormatInfo.NumberNegativePattern
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the format pattern for negative numeric values.
  remarks: "The NumberNegativePattern property defines the format of negative values formatted with the \"N\" standard numeric format string. This property has one of the values in the following table. The symbol \"-\" is the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> and  is a number.  \n  \n|Value|Associated pattern|  \n|-----------|------------------------|  \n|0|(n)|  \n|1|-n|  \n|2|- n|  \n|3|n-|  \n|4|n -|  \n  \n The default value for the invariant culture returned by the <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A> property is 1, which represents \"-n\", where *n* is a number."
  example:
  - "The following example displays a value using different NumberNegativePattern patterns.  \n  \n [!CODE [Classic NumberFormatInfo.NumberNegativePattern Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example#1)]"
  syntax:
    content: public int NumberNegativePattern { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.PercentDecimalDigits
  id: PercentDecimalDigits
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: PercentDecimalDigits
  nameWithType: NumberFormatInfo.PercentDecimalDigits
  fullName: System.Globalization.NumberFormatInfo.PercentDecimalDigits
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the number of decimal places to use in percent values.
  remarks: The PercentDecimalDigits property is used with the "P" standard format string without a precision specifier in numeric formatting operations. It defines the default number of fractional digits that appear after the decimal separator. This value is overridden if a precision specifier is used. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md).
  example:
  - "The following example demonstrates the effect of changing the PercentDecimalDigits property.  \n  \n [!CODE [PercentDecimalDigits#1](../CodeSnippet/VS_Snippets_CLR/PercentDecimalDigits#1)]"
  syntax:
    content: public int PercentDecimalDigits { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.PercentDecimalSeparator
  id: PercentDecimalSeparator
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: PercentDecimalSeparator
  nameWithType: NumberFormatInfo.PercentDecimalSeparator
  fullName: System.Globalization.NumberFormatInfo.PercentDecimalSeparator
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string to use as the decimal separator in percent values.
  remarks: The PercentDecimalSeparator property is used with the "P" standard format string to define the symbol that separates integral from fractional digits. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md).
  example:
  - "The following example demonstrates the effect of changing the PercentDecimalSeparator property.  \n  \n [!CODE [PercentDecimalSeparator#1](../CodeSnippet/VS_Snippets_CLR/PercentDecimalSeparator#1)]"
  syntax:
    content: public string PercentDecimalSeparator { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.PercentGroupSeparator
  id: PercentGroupSeparator
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: PercentGroupSeparator
  nameWithType: NumberFormatInfo.PercentGroupSeparator
  fullName: System.Globalization.NumberFormatInfo.PercentGroupSeparator
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string that separates groups of digits to the left of the decimal in percent values.
  remarks: The PercentGroupSeparator property is used with the "P" standard format string to define the symbol that separates groups of integers. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md).
  example:
  - "The following example demonstrates the effect of changing the PercentGroupSeparator property.  \n  \n [!CODE [PercentGroupSeparator#1](../CodeSnippet/VS_Snippets_CLR/PercentGroupSeparator#1)]"
  syntax:
    content: public string PercentGroupSeparator { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.PercentGroupSizes
  id: PercentGroupSizes
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: PercentGroupSizes
  nameWithType: NumberFormatInfo.PercentGroupSizes
  fullName: System.Globalization.NumberFormatInfo.PercentGroupSizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the number of digits in each group to the left of the decimal in percent values.
  remarks: "The PercentGroupSizes property is used with the \"P\" standard format string to define the number of digits that appear in integral groups. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md). Every element in the one-dimensional array must be an integer from 1 through 9. The last element can be 0.  \n  \n The first element of the array defines the number of elements in the least significant group of digits immediately to the left of the <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>. Each subsequent element refers to the next significant group of digits to the left of the previous group. If the last element of the array is not 0, the remaining digits are grouped based on the last element of the array. If the last element is 0, the remaining digits are not grouped.  \n  \n For example, if the array contains { 3, 4, 5 }, the digits are grouped similar to \"55,55555,55555,55555,4444,333.00%\". If the array contains { 3, 4, 0 }, the digits are grouped similar to \"55555555555555555,4444,333.00%\"."
  example:
  - "The following example demonstrates the effect of changing the PercentGroupSizes property.  \n  \n [!CODE [PercentGroupSizes#1](../CodeSnippet/VS_Snippets_CLR/PercentGroupSizes#1)]"
  syntax:
    content: public int[] PercentGroupSizes { get; set; }
    return:
      type: System.Int32[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.PercentNegativePattern
  id: PercentNegativePattern
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: PercentNegativePattern
  nameWithType: NumberFormatInfo.PercentNegativePattern
  fullName: System.Globalization.NumberFormatInfo.PercentNegativePattern
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the format pattern for negative percent values.
  remarks: "The PercentNegativePattern property is used with the \"P\" standard format string to define the pattern of negative percentage values. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md). This property has one of the values in the following table. The symbol \"%\" is the <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, the symbol \"-\" is the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, and  is a number. Values 3-11 were introduced in the .NET Framework 2.0 and cannot be used in earlier versions.  \n  \n|Value|Associated pattern|  \n|-----------|------------------------|  \n|0|-n %|  \n|1|-n%|  \n|2|-%n|  \n|3|%-n|  \n|4|%n-|  \n|5|n-%|  \n|6|n%-|  \n|7|-% n|  \n|8|n %-|  \n|9|% n-|  \n|10|% -n|  \n|11|n- %|"
  syntax:
    content: public int PercentNegativePattern { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.PercentPositivePattern
  id: PercentPositivePattern
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: PercentPositivePattern
  nameWithType: NumberFormatInfo.PercentPositivePattern
  fullName: System.Globalization.NumberFormatInfo.PercentPositivePattern
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the format pattern for positive percent values.
  remarks: "The PercentPositivePattern property is used with the \"P\" standard format string to define pattern of positive percentage values. For more information, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md). This property has one of the values in the following table. The symbol \"%\" is the <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> and  is a number.  \n  \n|Value|Associated pattern|  \n|-----------|------------------------|  \n|0|n %|  \n|1|n%|  \n|2|%n|  \n|3|% n|"
  syntax:
    content: public int PercentPositivePattern { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.PercentSymbol
  id: PercentSymbol
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: PercentSymbol
  nameWithType: NumberFormatInfo.PercentSymbol
  fullName: System.Globalization.NumberFormatInfo.PercentSymbol
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string to use as the percent symbol.
  remarks: The string assigned to the PercentSymbol property is included in the result string when a numeric value is formatted with the "P"  or with a format string that includes the "%" .
  syntax:
    content: public string PercentSymbol { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.PerMilleSymbol
  id: PerMilleSymbol
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: PerMilleSymbol
  nameWithType: NumberFormatInfo.PerMilleSymbol
  fullName: System.Globalization.NumberFormatInfo.PerMilleSymbol
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string to use as the per mille symbol.
  remarks: The string assigned to the PerMilleSymbol property is included in the result string when a numeric value is formatted with a format string that includes the "‰" .
  syntax:
    content: public string PerMilleSymbol { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.PositiveInfinitySymbol
  id: PositiveInfinitySymbol
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: PositiveInfinitySymbol
  nameWithType: NumberFormatInfo.PositiveInfinitySymbol
  fullName: System.Globalization.NumberFormatInfo.PositiveInfinitySymbol
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string that represents positive infinity.
  remarks: For more information on positive infinity, see <xref:System.Double> or <xref:System.Single>.
  syntax:
    content: public string PositiveInfinitySymbol { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.PositiveSign
  id: PositiveSign
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: PositiveSign
  nameWithType: NumberFormatInfo.PositiveSign
  fullName: System.Globalization.NumberFormatInfo.PositiveSign
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets or sets the string that denotes that the associated number is positive.
  remarks: This property is used only for parsing numeric strings, not for formatting.
  syntax:
    content: public string PositiveSign { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)
  id: ReadOnly(System.Globalization.NumberFormatInfo)
  parent: System.Globalization.NumberFormatInfo
  langs:
  - csharp
  name: ReadOnly(NumberFormatInfo)
  nameWithType: NumberFormatInfo.ReadOnly(NumberFormatInfo)
  fullName: System.Globalization.NumberFormatInfo.ReadOnly(NumberFormatInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Returns a read-only <see cref="T:System.Globalization.NumberFormatInfo"> wrapper.
  remarks: "This wrapper prevents any modifications to .  \n  \n Attempting to perform an assignment to a property of a read-only <xref:System.Globalization.NumberFormatInfo> causes an <xref:System.InvalidOperationException>."
  syntax:
    content: public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);
    parameters:
    - id: nfi
      type: System.Globalization.NumberFormatInfo
      description: The <see cref="T:System.Globalization.NumberFormatInfo"> to wrap.
    return:
      type: System.Globalization.NumberFormatInfo
      description: A read-only <see cref="T:System.Globalization.NumberFormatInfo"> wrapper around .
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Globalization.NumberFormatInfo.#ctor
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: NumberFormatInfo()
  nameWithType: NumberFormatInfo.NumberFormatInfo()
  fullName: System.Globalization.NumberFormatInfo.NumberFormatInfo()
- uid: System.Globalization.NumberFormatInfo.Clone
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: Clone()
  nameWithType: NumberFormatInfo.Clone()
  fullName: System.Globalization.NumberFormatInfo.Clone()
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Globalization.NumberFormatInfo.CurrencyDecimalDigits
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: CurrencyDecimalDigits
  nameWithType: NumberFormatInfo.CurrencyDecimalDigits
  fullName: System.Globalization.NumberFormatInfo.CurrencyDecimalDigits
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: CurrencyDecimalSeparator
  nameWithType: NumberFormatInfo.CurrencyDecimalSeparator
  fullName: System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.CurrencyGroupSeparator
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: CurrencyGroupSeparator
  nameWithType: NumberFormatInfo.CurrencyGroupSeparator
  fullName: System.Globalization.NumberFormatInfo.CurrencyGroupSeparator
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.CurrencyGroupSizes
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: CurrencyGroupSizes
  nameWithType: NumberFormatInfo.CurrencyGroupSizes
  fullName: System.Globalization.NumberFormatInfo.CurrencyGroupSizes
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
- uid: System.Globalization.NumberFormatInfo.CurrencyNegativePattern
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: CurrencyNegativePattern
  nameWithType: NumberFormatInfo.CurrencyNegativePattern
  fullName: System.Globalization.NumberFormatInfo.CurrencyNegativePattern
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.NumberFormatInfo.CurrencyPositivePattern
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: CurrencyPositivePattern
  nameWithType: NumberFormatInfo.CurrencyPositivePattern
  fullName: System.Globalization.NumberFormatInfo.CurrencyPositivePattern
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.NumberFormatInfo.CurrencySymbol
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: CurrencySymbol
  nameWithType: NumberFormatInfo.CurrencySymbol
  fullName: System.Globalization.NumberFormatInfo.CurrencySymbol
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.CurrentInfo
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: CurrentInfo
  nameWithType: NumberFormatInfo.CurrentInfo
  fullName: System.Globalization.NumberFormatInfo.CurrentInfo
- uid: System.Globalization.NumberFormatInfo
  parent: System.Globalization
  isExternal: false
  name: NumberFormatInfo
  nameWithType: NumberFormatInfo
  fullName: System.Globalization.NumberFormatInfo
- uid: System.Globalization.NumberFormatInfo.DigitSubstitution
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: DigitSubstitution
  nameWithType: NumberFormatInfo.DigitSubstitution
  fullName: System.Globalization.NumberFormatInfo.DigitSubstitution
- uid: System.Globalization.DigitShapes
  parent: System.Globalization
  isExternal: false
  name: DigitShapes
  nameWithType: DigitShapes
  fullName: System.Globalization.DigitShapes
- uid: System.Globalization.NumberFormatInfo.GetFormat(System.Type)
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: GetFormat(Type)
  nameWithType: NumberFormatInfo.GetFormat(Type)
  fullName: System.Globalization.NumberFormatInfo.GetFormat(Type)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: GetInstance(IFormatProvider)
  nameWithType: NumberFormatInfo.GetInstance(IFormatProvider)
  fullName: System.Globalization.NumberFormatInfo.GetInstance(IFormatProvider)
- uid: System.Globalization.NumberFormatInfo
  parent: System.Globalization
  isExternal: false
  name: NumberFormatInfo
  nameWithType: NumberFormatInfo
  fullName: System.Globalization.NumberFormatInfo
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Globalization.NumberFormatInfo.InvariantInfo
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: InvariantInfo
  nameWithType: NumberFormatInfo.InvariantInfo
  fullName: System.Globalization.NumberFormatInfo.InvariantInfo
- uid: System.Globalization.NumberFormatInfo
  parent: System.Globalization
  isExternal: false
  name: NumberFormatInfo
  nameWithType: NumberFormatInfo
  fullName: System.Globalization.NumberFormatInfo
- uid: System.Globalization.NumberFormatInfo.IsReadOnly
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: IsReadOnly
  nameWithType: NumberFormatInfo.IsReadOnly
  fullName: System.Globalization.NumberFormatInfo.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.NumberFormatInfo.NaNSymbol
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: NaNSymbol
  nameWithType: NumberFormatInfo.NaNSymbol
  fullName: System.Globalization.NumberFormatInfo.NaNSymbol
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.NativeDigits
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: NativeDigits
  nameWithType: NumberFormatInfo.NativeDigits
  fullName: System.Globalization.NumberFormatInfo.NativeDigits
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.Globalization.NumberFormatInfo.NegativeInfinitySymbol
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: NegativeInfinitySymbol
  nameWithType: NumberFormatInfo.NegativeInfinitySymbol
  fullName: System.Globalization.NumberFormatInfo.NegativeInfinitySymbol
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.NegativeSign
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: NegativeSign
  nameWithType: NumberFormatInfo.NegativeSign
  fullName: System.Globalization.NumberFormatInfo.NegativeSign
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.NumberDecimalDigits
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: NumberDecimalDigits
  nameWithType: NumberFormatInfo.NumberDecimalDigits
  fullName: System.Globalization.NumberFormatInfo.NumberDecimalDigits
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.NumberFormatInfo.NumberDecimalSeparator
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: NumberDecimalSeparator
  nameWithType: NumberFormatInfo.NumberDecimalSeparator
  fullName: System.Globalization.NumberFormatInfo.NumberDecimalSeparator
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.NumberGroupSeparator
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: NumberGroupSeparator
  nameWithType: NumberFormatInfo.NumberGroupSeparator
  fullName: System.Globalization.NumberFormatInfo.NumberGroupSeparator
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.NumberGroupSizes
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: NumberGroupSizes
  nameWithType: NumberFormatInfo.NumberGroupSizes
  fullName: System.Globalization.NumberFormatInfo.NumberGroupSizes
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
- uid: System.Globalization.NumberFormatInfo.NumberNegativePattern
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: NumberNegativePattern
  nameWithType: NumberFormatInfo.NumberNegativePattern
  fullName: System.Globalization.NumberFormatInfo.NumberNegativePattern
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.NumberFormatInfo.PercentDecimalDigits
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: PercentDecimalDigits
  nameWithType: NumberFormatInfo.PercentDecimalDigits
  fullName: System.Globalization.NumberFormatInfo.PercentDecimalDigits
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.NumberFormatInfo.PercentDecimalSeparator
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: PercentDecimalSeparator
  nameWithType: NumberFormatInfo.PercentDecimalSeparator
  fullName: System.Globalization.NumberFormatInfo.PercentDecimalSeparator
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.PercentGroupSeparator
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: PercentGroupSeparator
  nameWithType: NumberFormatInfo.PercentGroupSeparator
  fullName: System.Globalization.NumberFormatInfo.PercentGroupSeparator
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.PercentGroupSizes
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: PercentGroupSizes
  nameWithType: NumberFormatInfo.PercentGroupSizes
  fullName: System.Globalization.NumberFormatInfo.PercentGroupSizes
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
- uid: System.Globalization.NumberFormatInfo.PercentNegativePattern
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: PercentNegativePattern
  nameWithType: NumberFormatInfo.PercentNegativePattern
  fullName: System.Globalization.NumberFormatInfo.PercentNegativePattern
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.NumberFormatInfo.PercentPositivePattern
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: PercentPositivePattern
  nameWithType: NumberFormatInfo.PercentPositivePattern
  fullName: System.Globalization.NumberFormatInfo.PercentPositivePattern
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.NumberFormatInfo.PercentSymbol
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: PercentSymbol
  nameWithType: NumberFormatInfo.PercentSymbol
  fullName: System.Globalization.NumberFormatInfo.PercentSymbol
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.PerMilleSymbol
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: PerMilleSymbol
  nameWithType: NumberFormatInfo.PerMilleSymbol
  fullName: System.Globalization.NumberFormatInfo.PerMilleSymbol
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.PositiveInfinitySymbol
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: PositiveInfinitySymbol
  nameWithType: NumberFormatInfo.PositiveInfinitySymbol
  fullName: System.Globalization.NumberFormatInfo.PositiveInfinitySymbol
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.PositiveSign
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: PositiveSign
  nameWithType: NumberFormatInfo.PositiveSign
  fullName: System.Globalization.NumberFormatInfo.PositiveSign
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)
  parent: System.Globalization.NumberFormatInfo
  isExternal: false
  name: ReadOnly(NumberFormatInfo)
  nameWithType: NumberFormatInfo.ReadOnly(NumberFormatInfo)
  fullName: System.Globalization.NumberFormatInfo.ReadOnly(NumberFormatInfo)
- uid: System.Globalization.NumberFormatInfo
  parent: System.Globalization
  isExternal: false
  name: NumberFormatInfo
  nameWithType: NumberFormatInfo
  fullName: System.Globalization.NumberFormatInfo
- uid: System.Globalization.NumberFormatInfo
  parent: System.Globalization
  isExternal: false
  name: NumberFormatInfo
  nameWithType: NumberFormatInfo
  fullName: System.Globalization.NumberFormatInfo
