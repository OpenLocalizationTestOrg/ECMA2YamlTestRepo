### YamlMime:ManagedReference
items:
- uid: System.Globalization.RegionInfo
  id: RegionInfo
  children:
  - System.Globalization.RegionInfo.#ctor(System.Int32)
  - System.Globalization.RegionInfo.#ctor(System.String)
  - System.Globalization.RegionInfo.CurrencyEnglishName
  - System.Globalization.RegionInfo.CurrencyNativeName
  - System.Globalization.RegionInfo.CurrencySymbol
  - System.Globalization.RegionInfo.CurrentRegion
  - System.Globalization.RegionInfo.DisplayName
  - System.Globalization.RegionInfo.EnglishName
  - System.Globalization.RegionInfo.Equals(System.Object)
  - System.Globalization.RegionInfo.GeoId
  - System.Globalization.RegionInfo.GetHashCode
  - System.Globalization.RegionInfo.IsMetric
  - System.Globalization.RegionInfo.ISOCurrencySymbol
  - System.Globalization.RegionInfo.Name
  - System.Globalization.RegionInfo.NativeName
  - System.Globalization.RegionInfo.ThreeLetterISORegionName
  - System.Globalization.RegionInfo.ThreeLetterWindowsRegionName
  - System.Globalization.RegionInfo.ToString
  - System.Globalization.RegionInfo.TwoLetterISORegionName
  langs:
  - csharp
  name: RegionInfo
  nameWithType: RegionInfo
  fullName: System.Globalization.RegionInfo
  type: Class
  summary: Contains information about the country/region.
  remarks: "Unlike the <xref:System.Globalization.CultureInfo> class, the RegionInfo class does not represent user preferences and does not depend on the user's language or culture.  \n  \n## Names Associated with a RegionInfo Object  \n The name of a RegionInfo object is one of the two-letter codes defined in ISO 3166 for country/region. Case is not significant. The <xref:System.Globalization.RegionInfo.Name%2A>, <xref:System.Globalization.RegionInfo.TwoLetterISORegionName%2A>, and <xref:System.Globalization.RegionInfo.ThreeLetterISORegionName%2A> properties return the appropriate codes in uppercase. For the current list of RegionInfo names, see [English country names and code elements](http://go.microsoft.com/fwlink/?LinkId=190591) on the ISO website.  \n  \n## Instantiating a RegionInfo Object  \n To instantiate a RegionInfo object, you pass the <xref:System.Globalization.RegionInfo.%23ctor%28System.String%29> constructor either a two-letter region name, such as \"US\" for the United States, or the name of a specific culture, such as \"en-US\" for English (United States). However, we recommend that you use a specific culture name instead of a two-letter region name, because a RegionInfo object is not completely language-independent. Several RegionInfo properties, including <xref:System.Globalization.RegionInfo.DisplayName%2A>, <xref:System.Globalization.RegionInfo.NativeName%2A>, and <xref:System.Globalization.RegionInfo.CurrencyNativeName%2A>, depend on culture names.  \n  \n The following example illustrates the difference in RegionInfo property values for three objects that represent Belgium. The first is instantiated from a region name (BE) only, while the second and third are instantiated from culture names (fr-BE for French (Belgium) and and nl-BE for Dutch (Belgium), respectively). The example uses reflection to retrieve the property values of each RegionInfo object.  \n  \n [!CODE [System.Globalization.RegionInfo#2](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo#2)]  \n  \n In scenarios such as the following, use culture names instead of country/region names when you instantiate a RegionInfo object:  \n  \n-   When the language name is of primary importance. For example, for the es-US culture name, you'll probably want your application to display \"Estados Unidos\" instead of \"United States\". Using the country/region name (US) alone yields \"United States\" regardless of the language, so you should work with the culture name instead.  \n  \n-   When script differences must be considered. For example, the country/region AZ deals with Azerbaijani cultures that have the names az-Latn-AZ and az-Cyrl-AZ, and the Latin and Cyrillic scripts can be very different for this country/region.  \n  \n-   When maintenance of detail is important. The values returned by RegionInfo members can differ depending on whether the RegionInfo object was instantiated by using a culture name or a region name. For example, the following table lists the differences in return values when a RegionInfo object is instantiated by using the \"US\" region, the \"en-US\" culture, and the \"es-US\" culture.  \n  \n    |Member|\"US\"|\"en-US\"|\"es-US\"|  \n    |------------|----------|--------------|--------------|  \n    |<xref:System.Globalization.RegionInfo.CurrencyNativeName%2A>|US Dollar|US Dollar|DÃ³lar de EE.UU.|  \n    |<xref:System.Globalization.RegionInfo.Name%2A>|US|en-US|es-US|  \n    |<xref:System.Globalization.RegionInfo.NativeName%2A>|United States|United States|Estados Unidos|  \n    |<xref:System.Globalization.RegionInfo.ToString%2A>|US|en-US|es-US|"
  example:
  - "The following example demonstrates several members of the RegionInfo class.  \n  \n [!CODE [System.Globalization.RegionInfo#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class RegionInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: RegionInfo(Int32)
  nameWithType: RegionInfo.RegionInfo(Int32)
  fullName: System.Globalization.RegionInfo.RegionInfo(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Initializes a new instance of the <see cref="T:System.Globalization.RegionInfo"> class based on the country/region associated with the specified culture identifier.
  remarks: "<xref:System.Globalization.RegionInfo.%23ctor%28System.String%29> is the recommended constructor for instantiating a <xref:System.Globalization.RegionInfo> object. Unlike the RegionInfo constructor that requires a numeric culture identifier as a parameter, its parameter is a more readable culture name or country code.  \n  \n The culture identifier is mapped to the corresponding National Language Support (NLS) locale identifier. Detailed culture information appears in the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center.  \n  \n The value of the <xref:System.Globalization.RegionInfo.Name%2A> property of the new <xref:System.Globalization.RegionInfo> object instantiated by calling this constructor is the ISO 3166 2-letter code for the country/region, not the combined language and country/region code. For example, if a <xref:System.Globalization.RegionInfo> object is instantiated with the culture identifier 0x0409 for the English (United States) culture, the value of the <xref:System.Globalization.RegionInfo.Name%2A> property is \"US\". In contrast, if a <xref:System.Globalization.RegionInfo> object is instantiated with the combined language and country/region code en-US for the English (United States) culture, the value of the <xref:System.Globalization.RegionInfo.Name%2A> property is \"en-US\"."
  example:
  - "The following code example compares two instances of <xref:System.Globalization.RegionInfo> that were created differently.  \n  \n [!CODE [System.Globalization.RegionInfo_Equals#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Equals#1)]"
  syntax:
    content: public RegionInfo (int culture);
    parameters:
    - id: culture
      type: System.Int32
      description: A culture identifier.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: RegionInfo(String)
  nameWithType: RegionInfo.RegionInfo(String)
  fullName: System.Globalization.RegionInfo.RegionInfo(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Initializes a new instance of the <see cref="T:System.Globalization.RegionInfo"> class based on the country/region or specific culture, specified by name.
  remarks: "The  parameter is either one of the codes defined for country/region, or a specific, custom, or Windows-only culture name. Case is not significant. However, the <xref:System.Globalization.RegionInfo.Name%2A>, the <xref:System.Globalization.RegionInfo.TwoLetterISORegionName%2A>, and the <xref:System.Globalization.RegionInfo.ThreeLetterISORegionName%2A> properties return the specified code or culture name in uppercase.  \n  \n The predefined <xref:System.Globalization.RegionInfo> names are listed in [Country names and code elements](http://go.microsoft.com/fwlink/?LinkId=190591) on the ISO website.  \n  \n You should provide the name of a specific culture rather than just a country/region name in the  parameter. For example, en-US for English (United States) or es-US for Spanish (United States) is preferable to US because properties such as <xref:System.Globalization.RegionInfo.NativeName%2A> and <xref:System.Globalization.RegionInfo.CurrencyNativeName%2A> reflect a specific language. az-Latn-AZ or az-Cyrl-AZ is preferable to AZ because properties such as <xref:System.Globalization.RegionInfo.NativeName%2A>, <xref:System.Globalization.RegionInfo.CurrencyNativeName%2A>, and <xref:System.Globalization.RegionInfo.CurrencySymbol%2A> reflect a specific script.  The predefined culture names are listed in the [National Language Support (NLS) API Reference](http://go.microsoft.com/fwlink/?LinkId=200048) at the Go Global Developer Center. Note that a call to this constructor throws an <xref:System.ArgumentException> if  is a neutral culture (such as en for English)."
  example:
  - "The following code example compares two instances of <xref:System.Globalization.RegionInfo> that were created differently.  \n  \n [!CODE [System.Globalization.RegionInfo_Equals#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Equals#1)]  \n  \n The following code example creates instances of <xref:System.Globalization.RegionInfo> using culture names.  \n  \n [!CODE [System.Globalization.RegionInfo.ctorCultureName#1](../../add/codesnippet/system.globalization.regioninfo.md)]"
  syntax:
    content: public RegionInfo (string name);
    parameters:
    - id: name
      type: System.String
      description: "A string that contains a two-letter code defined in ISO 3166 for country/region.  \n  \n -or-  \n  \n A string that contains the culture name for a specific culture, custom culture, or Windows-only culture. If the culture name is not in RFC 4646 format, your application should specify the entire culture name instead of just the country/region."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.CurrencyEnglishName
  id: CurrencyEnglishName
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: CurrencyEnglishName
  nameWithType: RegionInfo.CurrencyEnglishName
  fullName: System.Globalization.RegionInfo.CurrencyEnglishName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the name, in English, of the currency used in the country/region.
  remarks: ''
  example:
  - "The following code example demonstrates the CurrencyEnglishName property.  \n  \n [!CODE [sys.glob.regioninfo.rgn5props#1](../CodeSnippet/VS_Snippets_CLR/sys.glob.regioninfo.rgn5props#1)]"
  syntax:
    content: public virtual string CurrencyEnglishName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.CurrencyNativeName
  id: CurrencyNativeName
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: CurrencyNativeName
  nameWithType: RegionInfo.CurrencyNativeName
  fullName: System.Globalization.RegionInfo.CurrencyNativeName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the name of the currency used in the country/region, formatted in the native language of the country/region.
  remarks: "If the current <xref:System.Globalization.RegionInfo> object is created with a specific culture and more than one language is used in the corresponding country/region, the CurrencyNativeName property retrieves the currency name associated with the specific culture.  \n  \n The value of this property depends on the language that is associated with a particular country/region. Therefore, if you intend to use the CurrencyNativeName property, you should instantiate the <xref:System.Globalization.RegionInfo> object by passing the <xref:System.Globalization.RegionInfo.%23ctor%28System.String%29> constructor a combined language and country/region code. For example, if a <xref:System.Globalization.RegionInfo> object is instantiated with a combined language and country/region code of \"en-CA\" for English (Canada), the value of its CurrencyNativeName property is \"Canadian Dollar\". If it is instantiated with a combined language and country/region code of \"fr-CA\" for French (Canada), the value of its CurrencyNativeName property is \"Dollar canadien\". Therefore, creating the `RegionInfo` object with only a country/region name (\"CA\" in this case) is not specific enough to distinguish the appropriate native currency name."
  example:
  - "The following code example demonstrates the CurrencyNativeName property.  \n  \n [!CODE [sys.glob.regioninfo.rgn5props#1](../CodeSnippet/VS_Snippets_CLR/sys.glob.regioninfo.rgn5props#1)]"
  syntax:
    content: public virtual string CurrencyNativeName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.CurrencySymbol
  id: CurrencySymbol
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: CurrencySymbol
  nameWithType: RegionInfo.CurrencySymbol
  fullName: System.Globalization.RegionInfo.CurrencySymbol
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the currency symbol associated with the country/region.
  remarks: "For example, the currency symbol for the United States is \"$\".  \n  \n If the current <xref:System.Globalization.RegionInfo> object is created with a specific culture and more than one language is used in the corresponding country/region, the CurrencySymbol property returns the currency symbol associated with the specific culture."
  example:
  - "The following code example displays the properties of the <xref:System.Globalization.RegionInfo> class.  \n  \n [!CODE [System.Globalization.RegionInfo_Properties#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Properties#1)]"
  syntax:
    content: public virtual string CurrencySymbol { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.CurrentRegion
  id: CurrentRegion
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: CurrentRegion
  nameWithType: RegionInfo.CurrentRegion
  fullName: System.Globalization.RegionInfo.CurrentRegion
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the <see cref="T:System.Globalization.RegionInfo"> that represents the country/region used by the current thread.
  remarks: The value of this property is based on the culture selected through the regional and language options portion of Control Panel. However, that information can change during the life of the <xref:System.AppDomain>. The <xref:System.Globalization.RegionInfo> class does not automatically detect changes in the system settings, but the CurrentRegion property is updated when you call the <xref:System.Globalization.CultureInfo.ClearCachedData%2A> method.
  syntax:
    content: public static System.Globalization.RegionInfo CurrentRegion { get; }
    return:
      type: System.Globalization.RegionInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.DisplayName
  id: DisplayName
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: DisplayName
  nameWithType: RegionInfo.DisplayName
  fullName: System.Globalization.RegionInfo.DisplayName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the full name of the country/region in the language of the localized version of .NET Framework.
  remarks: "The DisplayName property displays the country/region name in the language of the localized version of .NET Framework. For example, the DisplayName property displays the country/region in English on the English version of the .NET Framework, and in Spanish on the Spanish version of the .NET Framework.  \n  \n The value of the DisplayName property is taken from the resource files in the language of the current user interface culture, represented by <xref:System.Globalization.CultureInfo.CurrentUICulture%2A>. Custom regions or those synthesized from the operating system might not have resource information, in which case the value for DisplayName is the same as the value of the <xref:System.Globalization.RegionInfo.NativeName%2A> property."
  example:
  - "The following code example displays the properties of the <xref:System.Globalization.RegionInfo> class.  \n  \n [!CODE [System.Globalization.RegionInfo_Properties#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Properties#1)]"
  syntax:
    content: public virtual string DisplayName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.EnglishName
  id: EnglishName
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: EnglishName
  nameWithType: RegionInfo.EnglishName
  fullName: System.Globalization.RegionInfo.EnglishName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the full name of the country/region in English.
  remarks: For example, a <xref:System.Globalization.RegionInfo> object created for the English (United States) culture displays "United States".
  example:
  - "The following code example displays the properties of the <xref:System.Globalization.RegionInfo> class.  \n  \n [!CODE [System.Globalization.RegionInfo_Properties#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Properties#1)]"
  syntax:
    content: public virtual string EnglishName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: RegionInfo.Equals(Object)
  fullName: System.Globalization.RegionInfo.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Determines whether the specified object is the same instance as the current <see cref="T:System.Globalization.RegionInfo">.
  remarks: This method overrides <xref:System.Object.Equals%2A?displayProperty=fullName>.
  example:
  - "The following code example compares two instances of <xref:System.Globalization.RegionInfo> that were created differently.  \n  \n [!CODE [System.Globalization.RegionInfo_Equals#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Equals#1)]"
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to compare with the current <see cref="T:System.Globalization.RegionInfo">.
    return:
      type: System.Boolean
      description: '`true` if the  parameter is a <see cref="T:System.Globalization.RegionInfo"> object and its <xref:System.Globalization.RegionInfo.Name%2A> property is the same as the <xref:System.Globalization.RegionInfo.Name%2A> property of the current <see cref="T:System.Globalization.RegionInfo"> object; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.GeoId
  id: GeoId
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: GeoId
  nameWithType: RegionInfo.GeoId
  fullName: System.Globalization.RegionInfo.GeoId
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets a unique identification number for a geographical region, country, city, or location.
  remarks: "The application should use the GeoId property to provide culture-specific services to customers. For example, the GeoId property can be used as a key to access a database record that contains specific information about a country/region.  \n  \n This property value corresponds to the Windows `GetUserGeoID` function. For a list of geographical identifiers, see [Table of Geographical Locations](http://go.microsoft.com/fwlink/?LinkId=191287) in the MSDN Library."
  example:
  - "The following code example demonstrates the GeoId property.  \n  \n [!CODE [sys.glob.regioninfo.rgn5props#1](../CodeSnippet/VS_Snippets_CLR/sys.glob.regioninfo.rgn5props#1)]"
  syntax:
    content: public virtual int GeoId { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.GetHashCode
  id: GetHashCode
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: RegionInfo.GetHashCode()
  fullName: System.Globalization.RegionInfo.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Serves as a hash function for the current <see cref="T:System.Globalization.RegionInfo">, suitable for hashing algorithms and data structures, such as a hash table.
  remarks: "This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \n  \n This method generates the same hash code for two objects that are equal according to the <xref:System.Globalization.RegionInfo.Equals%2A> method."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A hash code for the current <see cref="T:System.Globalization.RegionInfo">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.IsMetric
  id: IsMetric
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: IsMetric
  nameWithType: RegionInfo.IsMetric
  fullName: System.Globalization.RegionInfo.IsMetric
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets a value indicating whether the country/region uses the metric system for measurements.
  remarks: ''
  example:
  - "The following code example displays the properties of the <xref:System.Globalization.RegionInfo> class.  \n  \n [!CODE [System.Globalization.RegionInfo_Properties#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Properties#1)]"
  syntax:
    content: public virtual bool IsMetric { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.ISOCurrencySymbol
  id: ISOCurrencySymbol
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: ISOCurrencySymbol
  nameWithType: RegionInfo.ISOCurrencySymbol
  fullName: System.Globalization.RegionInfo.ISOCurrencySymbol
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the three-character ISO 4217 currency symbol associated with the country/region.
  remarks: "The following example lists some of the ISO 4217 currency symbols returned by the ISOCurrencySymbol property.  \n  \n|Country/region|Currency name|ISO 4217 currency symbol|  \n|---------------------|-------------------|------------------------------|  \n|Albania|Albanian Lek|ALL|  \n|Algeria|Algerian Dinar|DZD|  \n|Argentina|Argentine Peso|ARS|  \n|Armenia|Armenian Dram|AMD|  \n|Australia|Australian Dollar|AUD|  \n|Austria|Euro|EUR|  \n|Azerbaijan|Azerbaijanian Manat|AZN|  \n|Bahrain|Bahraini Dinar|BHD|  \n|Belarus|Belarussian Ruble|BYR|  \n|Belgium|Euro|EUR|  \n|Belize|Belize Dollar|BZD|  \n|Bolivarian Republic of Venezuela|Venezuelan Bolivar|VEF|  \n|Bolivia|Boliviano|BOB|  \n|Brazil|Real|BRL|  \n|Brunei|Brunei Dollar|BND|  \n|Bulgaria|Bulgarian Lev|BGN|  \n|Canada|Canadian Dollar|CAD|  \n|Caribbean|US Dollar|USD|  \n|Chile|Chilean Peso|CLP|  \n|Colombia|Colombian Peso|COP|  \n|Costa Rica|Costa Rican Colon|CRC|  \n|Croatia|Croatian Kuna|HRK|  \n|Czech Republic|Czech Koruna|CZK|  \n|Denmark|Danish Krone|DKK|  \n|Dominican Republic|Dominican Peso|DOP|  \n|Ecuador|US Dollar|USD|  \n|Egypt|Egyptian Pound|EGP|  \n|El Salvador|U.S. Dollar|USD|  \n|Estonia|Estonian Kroon|EEK|  \n|Ethiopia|Ethiopian Birr|ETB|  \n|Faroe Islands|Danish Krone|DKK|  \n|Finland|Euro|EUR|  \n|France|Euro|EUR|  \n|Georgia|Lari|GEL|  \n|Germany|Euro|EUR|  \n|Greece|Euro|EUR|  \n|Guatemala|Guatemalan Quetzal|GTQ|  \n|Honduras|Honduran Lempira|HNL|  \n|Hong Kong SAR|Hong Kong Dollar|HKD|  \n|Hungary|Hungarian Forint|HUF|  \n|Iceland|Icelandic Krona|ISK|  \n|India|Indian Rupee|INR|  \n|Indonesia|Indonesian Rupiah|IDR|  \n|Iran|Iranian Rial|IRR|  \n|Iraq|Iraqi Dinar|IQD|  \n|Ireland|Euro|EUR|  \n|Islamic Republic of Pakistan|Pakistan Rupee|PKR|  \n|Israel|Israeli New Shekel|ILS|  \n|Italy|Euro|EUR|  \n|Jamaica|Jamaican Dollar|JMD|  \n|Japan|Japanese Yen|JPY|  \n|Jordan|Jordanian Dinar|JOD|  \n|Kazakhstan|Tenge|KZT|  \n|Kenya|Kenyan Shilling|KES|  \n|Korea|Korean Won|KRW|  \n|Kuwait|Kuwaiti Dinar|KWD|  \n|Kyrgyzstan|som|KGS|  \n|Latvia|Latvian Lats|LVL|  \n|Lebanon|Lebanese Pound|LBP|  \n|Libya|Libyan Dinar|LYD|  \n|Liechtenstein|Swiss Franc|CHF|  \n|Lithuania|Lithuanian Litas|LTL|  \n|Luxembourg|Euro|EUR|  \n|Macao SAR|Macao Pataca|MOP|  \n|Macedonia (FYROM)|Macedonian Denar|MKD|  \n|Malaysia|Malaysian Ringgit|MYR|  \n|Maldives|Rufiyaa|MVR|  \n|Mexico|Mexican Peso|MXN|  \n|Mongolia|Tugrik|MNT|  \n|Morocco|Moroccan Dirham|MAD|  \n|Netherlands|Euro|EUR|  \n|New Zealand|New Zealand Dollar|NZD|  \n|Nicaragua|Nicaraguan Cordoba Oro|NIO|  \n|Norway|Norwegian Krone|NOK|  \n|Oman|Omani Rial|OMR|  \n|Panama|Panamanian Balboa|PAB|  \n|Paraguay|Paraguay Guarani|PYG|  \n|People's Republic of China|PRC Renminbi|CNY|  \n|Peru|Peruvian Nuevo Sol|PEN|  \n|Philippines|Philippine Peso|PHP|  \n|Poland|Polish Zloty|PLN|  \n|Portugal|Euro|EUR|  \n|Principality of Monaco|Euro|EUR|  \n|Puerto Rico|US Dollar|USD|  \n|Qatar|Qatari Rial|QAR|  \n|Romania|Romanian Leu|RON|  \n|Russia|Russian Ruble|RUB|  \n|Saudi Arabia|Saudi Riyal|SAR|  \n|Serbia|Serbian Dinar|RSD|  \n|Singapore|Singapore Dollar|SGD|  \n|Slovakia|Euro|EUR|  \n|Slovenia|Euro|EUR|  \n|South Africa|South African Rand|ZAR|  \n|Spain|Euro|EUR|  \n|Sweden|Swedish Krona|SEK|  \n|Switzerland|Swiss Franc|CHF|  \n|Syria|Syrian Pound|SYP|  \n|Taiwan|New Taiwan Dollar|TWD|  \n|Thailand|Thai Baht|THB|  \n|Trinidad and Tobago|Trinidad Dollar|TTD|  \n|Tunisia|Tunisian Dinar|TND|  \n|Turkey|Turkish Lira|TRY|  \n|Ukraine|Ukrainian Hryvnia|UAH|  \n|United Arab Emirates|UAE Dirham|AED|  \n|United Kingdom|UK Pound Sterling|GBP|  \n|United States|US Dollar|USD|  \n|Uruguay|Peso Uruguayo|UYU|  \n|Uzbekistan|Uzbekistan Som|UZS|  \n|Vietnam|Vietnamese Dong|VND|  \n|Yemen|Yemeni Rial|YER|  \n|Zimbabwe|Zimbabwe Dollar|ZWL|"
  example:
  - "The following code example displays the properties of the <xref:System.Globalization.RegionInfo> class.  \n  \n [!CODE [System.Globalization.RegionInfo_Properties#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Properties#1)]"
  syntax:
    content: public virtual string ISOCurrencySymbol { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.Name
  id: Name
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: Name
  nameWithType: RegionInfo.Name
  fullName: System.Globalization.RegionInfo.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the name or ISO 3166 two-letter country/region code for the current <see cref="T:System.Globalization.RegionInfo"> object.
  remarks: "If the current <xref:System.Globalization.RegionInfo> object is created with the <xref:System.Globalization.RegionInfo.%23ctor%28System.Int32%29?displayProperty=fullName> constructor that takes a culture identifier parameter, the Name property value is one of the two-letter codes defined in ISO 3166 for the country/region and is formatted in uppercase. For example, the two-letter code for the United States is \"US\".  \n  \n If the current <xref:System.Globalization.RegionInfo> object is created with the <xref:System.Globalization.RegionInfo.%23ctor%28System.String%29?displayProperty=fullName> constructor and is passed a full culture name such as \"en-US\", the Name property value is a full culture name and not just the region name."
  example:
  - "The following code example displays the properties of the <xref:System.Globalization.RegionInfo> class.  \n  \n [!CODE [System.Globalization.RegionInfo_Properties#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Properties#1)]"
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.NativeName
  id: NativeName
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: NativeName
  nameWithType: RegionInfo.NativeName
  fullName: System.Globalization.RegionInfo.NativeName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the name of a country/region formatted in the native language of the country/region.
  remarks: "> [!NOTE]\n>  The NativeName property retrieves a full culture name if the `RegionInfo` object is constructed using a full culture name.  \n  \n We recommend that you use the culture nameâfor example, \"en-US\" for English (United States)âto access the NativeName property. The string used for this property depends on the language associated with the country/region. For example, the culture names en-US for English (United States) and es-US for Spanish (United States) can retrieve different values on Windows Vista. Therefore, creating the `RegionInfo` object with only a country/region name of US is not specific enough to distinguish the appropriate string."
  example:
  - "The following code example demonstrates the NativeName property.  \n  \n [!CODE [sys.glob.regioninfo.rgn5props#1](../CodeSnippet/VS_Snippets_CLR/sys.glob.regioninfo.rgn5props#1)]"
  syntax:
    content: public virtual string NativeName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.ThreeLetterISORegionName
  id: ThreeLetterISORegionName
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: ThreeLetterISORegionName
  nameWithType: RegionInfo.ThreeLetterISORegionName
  fullName: System.Globalization.RegionInfo.ThreeLetterISORegionName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the three-letter code defined in ISO 3166 for the country/region.
  remarks: "The ThreeLetterISORegionName property contains the three-letter code defined in ISO 3166 for this country/region. For example, the three-letter code for United States is \"USA\".  \n  \n Case is not significant. However, the <xref:System.Globalization.RegionInfo.Name%2A>, the <xref:System.Globalization.RegionInfo.TwoLetterISORegionName%2A>, and the ThreeLetterISORegionName properties return the appropriate code in uppercase."
  example:
  - "The following code example displays the properties of the <xref:System.Globalization.RegionInfo> class.  \n  \n [!CODE [System.Globalization.RegionInfo_Properties#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Properties#1)]"
  syntax:
    content: public virtual string ThreeLetterISORegionName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.ThreeLetterWindowsRegionName
  id: ThreeLetterWindowsRegionName
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: ThreeLetterWindowsRegionName
  nameWithType: RegionInfo.ThreeLetterWindowsRegionName
  fullName: System.Globalization.RegionInfo.ThreeLetterWindowsRegionName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the three-letter code assigned by Windows to the country/region represented by this <see cref="T:System.Globalization.RegionInfo">.
  remarks: For example, the three-letter code for United States is "USA".
  example:
  - "The following code example displays the properties of the <xref:System.Globalization.RegionInfo> class.  \n  \n [!CODE [System.Globalization.RegionInfo_Properties#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Properties#1)]"
  syntax:
    content: public virtual string ThreeLetterWindowsRegionName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.ToString
  id: ToString
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: RegionInfo.ToString()
  fullName: System.Globalization.RegionInfo.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Returns a string containing the culture name or ISO 3166 two-letter country/region codes specified for the current <see cref="T:System.Globalization.RegionInfo">.
  remarks: "This method overrides <xref:System.Object.ToString%2A?displayProperty=fullName>.  \n  \n This method returns the value of the <xref:System.Globalization.RegionInfo.Name%2A> property.  \n  \n Case is not significant. However, the <xref:System.Globalization.RegionInfo.Name%2A>, the <xref:System.Globalization.RegionInfo.TwoLetterISORegionName%2A>, and the <xref:System.Globalization.RegionInfo.ThreeLetterISORegionName%2A> properties return the appropriate code in uppercase.  \n  \n The predefined <xref:System.Globalization.RegionInfo> names are listed in the <xref:System.Globalization.RegionInfo> class topic."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string containing the culture name or ISO 3166 two-letter country/region codes defined for the current <see cref="T:System.Globalization.RegionInfo">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.RegionInfo.TwoLetterISORegionName
  id: TwoLetterISORegionName
  parent: System.Globalization.RegionInfo
  langs:
  - csharp
  name: TwoLetterISORegionName
  nameWithType: RegionInfo.TwoLetterISORegionName
  fullName: System.Globalization.RegionInfo.TwoLetterISORegionName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the two-letter code defined in ISO 3166 for the country/region.
  remarks: "The <xref:System.Globalization.RegionInfo> name is one of the two-letter codes defined in ISO 3166 for country/region. For example, the two-letter code for United States is \"US\".  \n  \n> [!IMPORTANT]\n>  In some cases, the TwoLetterISORegionName property may have more than two characters. For example, the value of the TwoLetterISORegionName property for the Caribbean region is \"029\".  \n  \n Case is not significant. However, the <xref:System.Globalization.RegionInfo.Name%2A>, the TwoLetterISORegionName, and the <xref:System.Globalization.RegionInfo.ThreeLetterISORegionName%2A> properties return the appropriate code in uppercase.  \n  \n> [!WARNING]\n>  If you want to persist a <xref:System.Globalization.RegionInfo> object or communicate it between processes, you should instantiate it by using a full culture name rather than a two-letter ISO region code. Because <xref:System.Globalization.RegionInfo> properties depend on script and language, instantiating a <xref:System.Globalization.RegionInfo> object by using only a region code loses context and data.  \n  \n The predefined <xref:System.Globalization.RegionInfo> names are listed in [English country names and code elements](http://go.microsoft.com/fwlink/?LinkId=190591) on the ISO website."
  example:
  - "The following code example displays the properties of the <xref:System.Globalization.RegionInfo> class.  \n  \n [!CODE [System.Globalization.RegionInfo_Properties#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.RegionInfo_Properties#1)]"
  syntax:
    content: public virtual string TwoLetterISORegionName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Globalization.RegionInfo.#ctor(System.Int32)
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: RegionInfo(Int32)
  nameWithType: RegionInfo.RegionInfo(Int32)
  fullName: System.Globalization.RegionInfo.RegionInfo(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.RegionInfo.#ctor(System.String)
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: RegionInfo(String)
  nameWithType: RegionInfo.RegionInfo(String)
  fullName: System.Globalization.RegionInfo.RegionInfo(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.CurrencyEnglishName
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: CurrencyEnglishName
  nameWithType: RegionInfo.CurrencyEnglishName
  fullName: System.Globalization.RegionInfo.CurrencyEnglishName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.CurrencyNativeName
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: CurrencyNativeName
  nameWithType: RegionInfo.CurrencyNativeName
  fullName: System.Globalization.RegionInfo.CurrencyNativeName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.CurrencySymbol
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: CurrencySymbol
  nameWithType: RegionInfo.CurrencySymbol
  fullName: System.Globalization.RegionInfo.CurrencySymbol
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.CurrentRegion
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: CurrentRegion
  nameWithType: RegionInfo.CurrentRegion
  fullName: System.Globalization.RegionInfo.CurrentRegion
- uid: System.Globalization.RegionInfo
  parent: System.Globalization
  isExternal: false
  name: RegionInfo
  nameWithType: RegionInfo
  fullName: System.Globalization.RegionInfo
- uid: System.Globalization.RegionInfo.DisplayName
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: DisplayName
  nameWithType: RegionInfo.DisplayName
  fullName: System.Globalization.RegionInfo.DisplayName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.EnglishName
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: EnglishName
  nameWithType: RegionInfo.EnglishName
  fullName: System.Globalization.RegionInfo.EnglishName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.Equals(System.Object)
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: RegionInfo.Equals(Object)
  fullName: System.Globalization.RegionInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Globalization.RegionInfo.GeoId
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: GeoId
  nameWithType: RegionInfo.GeoId
  fullName: System.Globalization.RegionInfo.GeoId
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.RegionInfo.GetHashCode
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: RegionInfo.GetHashCode()
  fullName: System.Globalization.RegionInfo.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.RegionInfo.IsMetric
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: IsMetric
  nameWithType: RegionInfo.IsMetric
  fullName: System.Globalization.RegionInfo.IsMetric
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.RegionInfo.ISOCurrencySymbol
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: ISOCurrencySymbol
  nameWithType: RegionInfo.ISOCurrencySymbol
  fullName: System.Globalization.RegionInfo.ISOCurrencySymbol
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.Name
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: Name
  nameWithType: RegionInfo.Name
  fullName: System.Globalization.RegionInfo.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.NativeName
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: NativeName
  nameWithType: RegionInfo.NativeName
  fullName: System.Globalization.RegionInfo.NativeName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.ThreeLetterISORegionName
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: ThreeLetterISORegionName
  nameWithType: RegionInfo.ThreeLetterISORegionName
  fullName: System.Globalization.RegionInfo.ThreeLetterISORegionName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.ThreeLetterWindowsRegionName
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: ThreeLetterWindowsRegionName
  nameWithType: RegionInfo.ThreeLetterWindowsRegionName
  fullName: System.Globalization.RegionInfo.ThreeLetterWindowsRegionName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.ToString
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: ToString()
  nameWithType: RegionInfo.ToString()
  fullName: System.Globalization.RegionInfo.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.RegionInfo.TwoLetterISORegionName
  parent: System.Globalization.RegionInfo
  isExternal: false
  name: TwoLetterISORegionName
  nameWithType: RegionInfo.TwoLetterISORegionName
  fullName: System.Globalization.RegionInfo.TwoLetterISORegionName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
