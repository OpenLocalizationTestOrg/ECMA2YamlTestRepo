### YamlMime:ManagedReference
items:
- uid: System.Globalization.CharUnicodeInfo
  id: CharUnicodeInfo
  children:
  - System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)
  - System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)
  - System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)
  - System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)
  - System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  - System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)
  - System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  - System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)
  langs:
  - csharp
  name: CharUnicodeInfo
  nameWithType: CharUnicodeInfo
  fullName: System.Globalization.CharUnicodeInfo
  type: Class
  summary: Retrieves information about a Unicode character. This class cannot be inherited.
  remarks: "The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) defines a number of Unicode character categories. For example, a character might be categorized as an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a paragraph separator, a math symbol, or a currency symbol. Your application can use the character category to govern string-based operations, such as parsing or extracting substring with regular expressions. The <xref:System.Globalization.UnicodeCategory> enumeration defines the possible character categories.  \n  \n You use the CharUnicodeInfo class to obtain the <xref:System.Globalization.UnicodeCategory> value for a specific character. The CharUnicodeInfo class defines methods that return the following Unicode character values:  \n  \n-   The specific category to which a character or surrogate pair belongs. The value returned is a member of the <xref:System.Globalization.UnicodeCategory> enumeration.  \n  \n-   Numeric value. Applies only to numeric characters, including fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.  \n  \n-   Digit value. Applies to numeric characters that can be combined with other numeric characters to represent a whole number in a numbering system.  \n  \n-   Decimal digit value. Applies only to characters that represent decimal digits in the decimal (base 10) system. A decimal digit can be one of ten digits, from zero through nine. These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n In addition, the CharUnicodeInfo class is used internally by a number of other .NET Framework types and methods that rely on character classification. These include:  \n  \n-   The <xref:System.Globalization.StringInfo> class, which works with textual elements instead of single characters in a string.  \n  \n-   The overloads of the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method, which determine the category to which a character or surrogate pair belongs.  \n  \n-   The [character classes](../Topic/Character%20Classes%20in%20Regular%20Expressions.md) recognized by <xref:System.Text.RegularExpressions.Regex>, the .NET Framework's regular expression engine.  \n  \n When using this class in your applications, keep in mind the following programming considerations for using the <xref:System.Char> type. The type can be difficult to use, and strings are generally preferable for representing linguistic content.  \n  \n-   A <xref:System.Char> object does not always correspond to a single character. Although the <xref:System.Char> type represents a single 16-bit value, some characters (such as grapheme clusters and surrogate pairs) consist of two or more UTF-16 code units. For more information, see \"Char Objects and Unicode Characters\" in the <xref:System.String> class.  \n  \n-   The notion of a \"character\" is also flexible. A character is often thought of as a glyph, but many glyphs require multiple code points. For example, ä can be represented either by two code points (\"a\" plus U+0308, which is the combining diaeresis), or by a single code point (\"ä\" or U+00A4). Some languages have many letters, characters, and glyphs that require multiple code points, which can cause confusion in linguistic content representation. For example, there is a ΰ (U+03B0, Greek small letter upsilon with dialytika and tonos), but there is no equivalent capital letter. Uppercasing such a value simply retrieves the original value."
  example:
  - "The following code example shows the values returned by each method for different types of characters.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo_Char#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char#1)]"
  syntax:
    content: public static class CharUnicodeInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)
  id: GetDecimalDigitValue(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  name: GetDecimalDigitValue(Char)
  nameWithType: CharUnicodeInfo.GetDecimalDigitValue(Char)
  fullName: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the decimal digit value of the specified numeric character.
  remarks: "This method converts characters that represent decimal digits to their equivalent integral values. Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine. It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).  \n  \n For more information about Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."
  example:
  - "The following code example shows the values returned by each method for different types of characters.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo_Char#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char#1)]"
  syntax:
    content: public static int GetDecimalDigitValue (char ch);
    parameters:
    - id: ch
      type: System.Char
      description: The Unicode character for which to get the decimal digit value.
    return:
      type: System.Int32
      description: "The decimal digit value of the specified numeric character.  \n  \n -or-  \n  \n -1, if the specified character is not a decimal digit."
  overload: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)
  id: GetDecimalDigitValue(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  name: GetDecimalDigitValue(String,Int32)
  nameWithType: CharUnicodeInfo.GetDecimalDigitValue(String,Int32)
  fullName: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the decimal digit value of the numeric character at the specified index of the specified string.
  remarks: "This method converts characters that represent decimal digits to their equivalent integral values. Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine. It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).  \n  \n For more information about Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."
  example:
  - "The following code example shows the values returned by each method for different types of characters.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo_String#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String#1)]"
  syntax:
    content: public static int GetDecimalDigitValue (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: The <see cref="T:System.String"> containing the Unicode character for which to get the decimal digit value.
    - id: index
      type: System.Int32
      description: The index of the Unicode character for which to get the decimal digit value.
    return:
      type: System.Int32
      description: "The decimal digit value of the numeric character at the specified index of the specified string.  \n  \n -or-  \n  \n -1, if the character at the specified index of the specified string is not a decimal digit."
  overload: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)
  id: GetDigitValue(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  name: GetDigitValue(Char)
  nameWithType: CharUnicodeInfo.GetDigitValue(Char)
  fullName: System.Globalization.CharUnicodeInfo.GetDigitValue(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the digit value of the specified numeric character.
  remarks: "Digit value is a property that applies only to numeric characters that can be used as digits. A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.  \n  \n For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."
  example:
  - "The following code example shows the values returned by each method for different types of characters.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo_Char#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char#1)]"
  syntax:
    content: public static int GetDigitValue (char ch);
    parameters:
    - id: ch
      type: System.Char
      description: The Unicode character for which to get the digit value.
    return:
      type: System.Int32
      description: "The digit value of the specified numeric character.  \n  \n -or-  \n  \n -1, if the specified character is not a digit."
  overload: System.Globalization.CharUnicodeInfo.GetDigitValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)
  id: GetDigitValue(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  name: GetDigitValue(String,Int32)
  nameWithType: CharUnicodeInfo.GetDigitValue(String,Int32)
  fullName: System.Globalization.CharUnicodeInfo.GetDigitValue(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the digit value of the numeric character at the specified index of the specified string.
  remarks: "Digit value is a property that applies only to numeric characters that can be used as digits. A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.  \n  \n For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."
  example:
  - "The following code example shows the values returned by each method for different types of characters.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo_String#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String#1)]"
  syntax:
    content: public static int GetDigitValue (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: The <see cref="T:System.String"> containing the Unicode character for which to get the digit value.
    - id: index
      type: System.Int32
      description: The index of the Unicode character for which to get the digit value.
    return:
      type: System.Int32
      description: "The digit value of the numeric character at the specified index of the specified string.  \n  \n -or-  \n  \n -1, if the character at the specified index of the specified string is not a digit."
  overload: System.Globalization.CharUnicodeInfo.GetDigitValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  id: GetNumericValue(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  name: GetNumericValue(Char)
  nameWithType: CharUnicodeInfo.GetNumericValue(Char)
  fullName: System.Globalization.CharUnicodeInfo.GetNumericValue(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the numeric value associated with the specified character.
  remarks: "Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \n  \n The GetNumericValue method assumes that  corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit. However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the GetNumericValue method returns -1 if it is passed either a high surrogate or a low surrogate of this character.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo.GetNumericValue#2](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue#2)]"
  example:
  - "The following code example shows the values returned by each method for different types of characters.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo_Char#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char#1)]"
  syntax:
    content: public static double GetNumericValue (char ch);
    parameters:
    - id: ch
      type: System.Char
      description: The Unicode character for which to get the numeric value.
    return:
      type: System.Double
      description: "The numeric value associated with the specified character.  \n  \n -or-  \n  \n -1, if the specified character is not a numeric character."
  overload: System.Globalization.CharUnicodeInfo.GetNumericValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)
  id: GetNumericValue(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  name: GetNumericValue(String,Int32)
  nameWithType: CharUnicodeInfo.GetNumericValue(String,Int32)
  fullName: System.Globalization.CharUnicodeInfo.GetNumericValue(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the numeric value associated with the character at the specified index of the specified string.
  remarks: "Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \n  \n If the <xref:System.Char> object at position  is the first character of a valid surrogate pair, the GetNumericValue method determines whether the surrogate pair forms a numeric digit, and, if it does, returns its numeric value. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number. As the output from the example shows, the GetNumericValue method returns the correct numeric value if it is passed the high surrogate of an Aegean number. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo.GetNumericValue#3](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue#3)]"
  example:
  - "The following code example shows the values returned by each method for different types of characters.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo_String#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String#1)]"
  syntax:
    content: public static double GetNumericValue (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: The <see cref="T:System.String"> containing the Unicode character for which to get the numeric value.
    - id: index
      type: System.Int32
      description: The index of the Unicode character for which to get the numeric value.
    return:
      type: System.Double
      description: "The numeric value associated with the character at the specified index of the specified string.  \n  \n -or-  \n  \n -1, if the character at the specified index of the specified string is not a numeric character."
  overload: System.Globalization.CharUnicodeInfo.GetNumericValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  id: GetUnicodeCategory(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  name: GetUnicodeCategory(Char)
  nameWithType: CharUnicodeInfo.GetUnicodeCategory(Char)
  fullName: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the Unicode category of the specified character.
  remarks: "The Unicode characters are divided into categories. A character's category is one of its properties. For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol. The <xref:System.Globalization.UnicodeCategory> class returns the category of a Unicode character. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \n  \n The GetUnicodeCategory method assumes that  corresponds to a single linguistic character and returns its category. This means that, for surrogate pairs, it returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> instead of the category to which the surrogate belongs. For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet. As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either the high surrogate or the low surrogate of this character.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory#1)]  \n  \n Note that GetUnicodeCategory does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter. The GetUnicodeCategory method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility."
  example:
  - "The following code example shows the values returned by each method for different types of characters.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo_Char#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char#1)]"
  syntax:
    content: public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);
    parameters:
    - id: ch
      type: System.Char
      description: The Unicode character for which to get the Unicode category.
    return:
      type: System.Globalization.UnicodeCategory
      description: A <see cref="T:System.Globalization.UnicodeCategory"> value indicating the category of the specified character.
  overload: System.Globalization.CharUnicodeInfo.GetUnicodeCategory*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)
  id: GetUnicodeCategory(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  name: GetUnicodeCategory(String,Int32)
  nameWithType: CharUnicodeInfo.GetUnicodeCategory(String,Int32)
  fullName: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Gets the Unicode category of the character at the specified index of the specified string.
  remarks: "The Unicode characters are divided into categories. A character's category is one of its properties. For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol. The <xref:System.Globalization.UnicodeCategory> class returns the category of a Unicode character. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \n  \n If the <xref:System.Char> object at position  is the first character of a valid surrogate pair, the GetUnicodeCategory method returns the Unicode category of the surrogate pair instead of returning <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>. For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet. As the output from the example shows, the GetUnicodeCategory method returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> if it is passed the high surrogate of this character, which indicates that it considers the surrogate pair. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory#2)]  \n  \n Note that GetUnicodeCategory method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter. The GetUnicodeCategory method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility."
  example:
  - "The following code example shows the values returned by each method for different types of characters.  \n  \n [!CODE [System.Globalization.CharUnicodeInfo_String#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String#1)]"
  syntax:
    content: public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: The <see cref="T:System.String"> containing the Unicode character for which to get the Unicode category.
    - id: index
      type: System.Int32
      description: The index of the Unicode character for which to get the Unicode category.
    return:
      type: System.Globalization.UnicodeCategory
      description: A <see cref="T:System.Globalization.UnicodeCategory"> value indicating the category of the character at the specified index of the specified string.
  overload: System.Globalization.CharUnicodeInfo.GetUnicodeCategory*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  name: GetDecimalDigitValue(Char)
  nameWithType: CharUnicodeInfo.GetDecimalDigitValue(Char)
  fullName: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(Char)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  name: GetDecimalDigitValue(String,Int32)
  nameWithType: CharUnicodeInfo.GetDecimalDigitValue(String,Int32)
  fullName: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  name: GetDigitValue(Char)
  nameWithType: CharUnicodeInfo.GetDigitValue(Char)
  fullName: System.Globalization.CharUnicodeInfo.GetDigitValue(Char)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  name: GetDigitValue(String,Int32)
  nameWithType: CharUnicodeInfo.GetDigitValue(String,Int32)
  fullName: System.Globalization.CharUnicodeInfo.GetDigitValue(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  name: GetNumericValue(Char)
  nameWithType: CharUnicodeInfo.GetNumericValue(Char)
  fullName: System.Globalization.CharUnicodeInfo.GetNumericValue(Char)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  name: GetNumericValue(String,Int32)
  nameWithType: CharUnicodeInfo.GetNumericValue(String,Int32)
  fullName: System.Globalization.CharUnicodeInfo.GetNumericValue(String,Int32)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  name: GetUnicodeCategory(Char)
  nameWithType: CharUnicodeInfo.GetUnicodeCategory(Char)
  fullName: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(Char)
- uid: System.Globalization.UnicodeCategory
  parent: System.Globalization
  isExternal: false
  name: UnicodeCategory
  nameWithType: UnicodeCategory
  fullName: System.Globalization.UnicodeCategory
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  name: GetUnicodeCategory(String,Int32)
  nameWithType: CharUnicodeInfo.GetUnicodeCategory(String,Int32)
  fullName: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(String,Int32)
- uid: System.Globalization.UnicodeCategory
  parent: System.Globalization
  isExternal: false
  name: UnicodeCategory
  nameWithType: UnicodeCategory
  fullName: System.Globalization.UnicodeCategory
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue*
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  nameWithType: CharUnicodeInfo.
- uid: System.Globalization.CharUnicodeInfo.GetDigitValue*
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  nameWithType: CharUnicodeInfo.
- uid: System.Globalization.CharUnicodeInfo.GetNumericValue*
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  nameWithType: CharUnicodeInfo.
- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory*
  parent: System.Globalization.CharUnicodeInfo
  isExternal: false
  nameWithType: CharUnicodeInfo.
