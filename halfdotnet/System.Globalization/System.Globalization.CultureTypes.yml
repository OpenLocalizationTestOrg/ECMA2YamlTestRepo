### YamlMime:ManagedReference
items:
- uid: System.Globalization.CultureTypes
  id: CultureTypes
  children:
  - System.Globalization.CultureTypes.AllCultures
  - System.Globalization.CultureTypes.FrameworkCultures
  - System.Globalization.CultureTypes.InstalledWin32Cultures
  - System.Globalization.CultureTypes.NeutralCultures
  - System.Globalization.CultureTypes.ReplacementCultures
  - System.Globalization.CultureTypes.SpecificCultures
  - System.Globalization.CultureTypes.UserCustomCulture
  - System.Globalization.CultureTypes.WindowsOnlyCultures
  langs:
  - csharp
  name: CultureTypes
  nameWithType: CultureTypes
  fullName: System.Globalization.CultureTypes
  type: Enum
  summary: Defines the types of culture lists that can be retrieved using the <xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=fullName> method.
  remarks: "These culture type values are returned by the <xref:System.Globalization.CultureInfo.CultureTypes%2A?displayProperty=fullName> property, and also serve as a filter that limits the cultures returned by the <xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=fullName> method. For more information on cultures, see <xref:System.Globalization.CultureInfo>.  \n  \n Generally, your application should enumerate all cultures, using the F:System.Globalization.CultureTypes.AllCultures?qualifyHint=False&autoUpgrade=True value. This allows enumeration of custom cultures, as well as the other culture types.  \n  \n Note that the F:System.Globalization.CultureTypes.FrameworkCultures?qualifyHint=False&autoUpgrade=True and F:System.Globalization.CultureTypes.WindowsOnlyCultures?qualifyHint=False&autoUpgrade=True members have been deprecated."
  example:
  - "The following example demonstrates the CultureTypes enumeration and the P:System.Globalization.CultureInfo.CultureTypes?qualifyHint=False&autoUpgrade=True property.  \n  \n [!CODE [System.Globalization.CultureTypes#1](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.cultureTypes#1)]  \n  \n The following example displays several properties of the neutral cultures.  \n  \n [!CODE [System.Globalization.CultureInfo.GetCultures#1](../CodeSnippet/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures#1)]"
  syntax:
    content: >-
      [System.Flags]

      [System.Runtime.InteropServices.ComVisible(true)]

      public enum CultureTypes
  inheritance:
  - System.Object
  - System.ValueType
  - System.Enum
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CultureTypes.AllCultures
  id: AllCultures
  parent: System.Globalization.CultureTypes
  langs:
  - csharp
  name: AllCultures
  nameWithType: CultureTypes.AllCultures
  fullName: System.Globalization.CultureTypes.AllCultures
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "All cultures that ship with the .NET Framework, including neutral and specific cultures, cultures installed in the Windows operating system, and custom cultures created by the user.  \n  \n F:System.Globalization.CultureTypes.AllCultures?qualifyHint=True&autoUpgrade=True is a composite field that includes the F:System.Globalization.CultureTypes.NeutralCultures?qualifyHint=True&autoUpgrade=True, F:System.Globalization.CultureTypes.SpecificCultures?qualifyHint=True&autoUpgrade=True, and F:System.Globalization.CultureTypes.InstalledWin32Cultures?qualifyHint=True&autoUpgrade=True values."
  syntax:
    content: AllCultures
    return:
      type: System.Globalization.CultureTypes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CultureTypes.FrameworkCultures
  id: FrameworkCultures
  parent: System.Globalization.CultureTypes
  langs:
  - csharp
  name: FrameworkCultures
  nameWithType: CultureTypes.FrameworkCultures
  fullName: System.Globalization.CultureTypes.FrameworkCultures
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: This member is deprecated; using this value with M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)?qualifyHint=True&autoUpgrade=True returns neutral and specific cultures shipped with the .NET Framework 2.0.
  syntax:
    content: FrameworkCultures
    return:
      type: System.Globalization.CultureTypes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CultureTypes.InstalledWin32Cultures
  id: InstalledWin32Cultures
  parent: System.Globalization.CultureTypes
  langs:
  - csharp
  name: InstalledWin32Cultures
  nameWithType: CultureTypes.InstalledWin32Cultures
  fullName: System.Globalization.CultureTypes.InstalledWin32Cultures
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: All cultures that are installed in the Windows operating system. Note that not all cultures supported by the .NET Framework are installed in the operating system.
  syntax:
    content: InstalledWin32Cultures
    return:
      type: System.Globalization.CultureTypes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CultureTypes.NeutralCultures
  id: NeutralCultures
  parent: System.Globalization.CultureTypes
  langs:
  - csharp
  name: NeutralCultures
  nameWithType: CultureTypes.NeutralCultures
  fullName: System.Globalization.CultureTypes.NeutralCultures
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: 'Cultures that are associated with a language but are not specific to a country/region. The names of .NET Framework cultures consist of the lowercase two-letter code derived from ISO 639-1. For example: "en" (English) is a neutral culture.'
  remarks: "Custom cultures can have any user-specified name, not just a two-letter code.  \n  \n The invariant culture is included in the array of cultures returned by the M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)?qualifyHint=True&autoUpgrade=True method that specifies this value."
  syntax:
    content: NeutralCultures
    return:
      type: System.Globalization.CultureTypes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CultureTypes.ReplacementCultures
  id: ReplacementCultures
  parent: System.Globalization.CultureTypes
  langs:
  - csharp
  name: ReplacementCultures
  nameWithType: CultureTypes.ReplacementCultures
  fullName: System.Globalization.CultureTypes.ReplacementCultures
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Custom cultures created by the user that replace cultures shipped with the .NET Framework.
  syntax:
    content: ReplacementCultures
    return:
      type: System.Globalization.CultureTypes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CultureTypes.SpecificCultures
  id: SpecificCultures
  parent: System.Globalization.CultureTypes
  langs:
  - csharp
  name: SpecificCultures
  nameWithType: CultureTypes.SpecificCultures
  fullName: System.Globalization.CultureTypes.SpecificCultures
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Cultures that are specific to a country/region. The names of these cultures follow RFC 4646 (Windows Vista and later). The format is "\<languagecode2>-\<country/regioncode2>", where \<languagecode2> is a lowercase two-letter code derived from ISO 639-1 and \<country/regioncode2> is an uppercase two-letter code derived from ISO 3166. For example, "en-US" for English (United States) is a specific culture.
  remarks: Custom cultures can have any user-specified name, not just a standard-compliant name.
  syntax:
    content: SpecificCultures
    return:
      type: System.Globalization.CultureTypes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CultureTypes.UserCustomCulture
  id: UserCustomCulture
  parent: System.Globalization.CultureTypes
  langs:
  - csharp
  name: UserCustomCulture
  nameWithType: CultureTypes.UserCustomCulture
  fullName: System.Globalization.CultureTypes.UserCustomCulture
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: Custom cultures created by the user.
  remarks: "In Windows versions prior to Windows 10, the F:System.Globalization.CultureTypes.UserCustomCulture?qualifyHint=True&autoUpgrade=True value is assigned to custom cultures created by the developer. In Windows 10, the F:System.Globalization.CultureTypes.UserCustomCulture?qualifyHint=True&autoUpgrade=True value is also assigned to system cultures that are not backed by a complete set of cultural data and that do not have unique local identifiers. (All cultures of type F:System.Globalization.CultureTypes.UserCustomCulture?qualifyHint=False&autoUpgrade=True share a P:System.Globalization.CultureInfo.LCID?qualifyHint=True&autoUpgrade=True value of `LOCALE_CUSTOM_UNSPECIFIED` (0x1000, or 4096). As a result, code such as  \n  \n [!CODE [System.Globalization.CultureTypes#2](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.cultureTypes#2)]  \n  \n or  \n  \n [!CODE [System.Globalization.CultureTypes#3](../CodeSnippet/VS_Snippets_CLR_System/system.globalization.cultureTypes#3)]  \n  \n will return different sets of cultures on different Windows versions."
  syntax:
    content: UserCustomCulture
    return:
      type: System.Globalization.CultureTypes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Globalization.CultureTypes.WindowsOnlyCultures
  id: WindowsOnlyCultures
  parent: System.Globalization.CultureTypes
  langs:
  - csharp
  name: WindowsOnlyCultures
  nameWithType: CultureTypes.WindowsOnlyCultures
  fullName: System.Globalization.CultureTypes.WindowsOnlyCultures
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: This member is deprecated. If it is used as an argument to the M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)?qualifyHint=True&autoUpgrade=True method, the method returns an empty array.
  syntax:
    content: WindowsOnlyCultures
    return:
      type: System.Globalization.CultureTypes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Globalization.CultureTypes.AllCultures
  parent: System.Globalization.CultureTypes
  isExternal: false
  name: AllCultures
  nameWithType: CultureTypes.AllCultures
  fullName: System.Globalization.CultureTypes.AllCultures
- uid: System.Globalization.CultureTypes
  parent: System.Globalization
  isExternal: false
  name: CultureTypes
  nameWithType: CultureTypes
  fullName: System.Globalization.CultureTypes
- uid: System.Globalization.CultureTypes.FrameworkCultures
  parent: System.Globalization.CultureTypes
  isExternal: false
  name: FrameworkCultures
  nameWithType: CultureTypes.FrameworkCultures
  fullName: System.Globalization.CultureTypes.FrameworkCultures
- uid: System.Globalization.CultureTypes
  parent: System.Globalization
  isExternal: false
  name: CultureTypes
  nameWithType: CultureTypes
  fullName: System.Globalization.CultureTypes
- uid: System.Globalization.CultureTypes.InstalledWin32Cultures
  parent: System.Globalization.CultureTypes
  isExternal: false
  name: InstalledWin32Cultures
  nameWithType: CultureTypes.InstalledWin32Cultures
  fullName: System.Globalization.CultureTypes.InstalledWin32Cultures
- uid: System.Globalization.CultureTypes
  parent: System.Globalization
  isExternal: false
  name: CultureTypes
  nameWithType: CultureTypes
  fullName: System.Globalization.CultureTypes
- uid: System.Globalization.CultureTypes.NeutralCultures
  parent: System.Globalization.CultureTypes
  isExternal: false
  name: NeutralCultures
  nameWithType: CultureTypes.NeutralCultures
  fullName: System.Globalization.CultureTypes.NeutralCultures
- uid: System.Globalization.CultureTypes
  parent: System.Globalization
  isExternal: false
  name: CultureTypes
  nameWithType: CultureTypes
  fullName: System.Globalization.CultureTypes
- uid: System.Globalization.CultureTypes.ReplacementCultures
  parent: System.Globalization.CultureTypes
  isExternal: false
  name: ReplacementCultures
  nameWithType: CultureTypes.ReplacementCultures
  fullName: System.Globalization.CultureTypes.ReplacementCultures
- uid: System.Globalization.CultureTypes
  parent: System.Globalization
  isExternal: false
  name: CultureTypes
  nameWithType: CultureTypes
  fullName: System.Globalization.CultureTypes
- uid: System.Globalization.CultureTypes.SpecificCultures
  parent: System.Globalization.CultureTypes
  isExternal: false
  name: SpecificCultures
  nameWithType: CultureTypes.SpecificCultures
  fullName: System.Globalization.CultureTypes.SpecificCultures
- uid: System.Globalization.CultureTypes
  parent: System.Globalization
  isExternal: false
  name: CultureTypes
  nameWithType: CultureTypes
  fullName: System.Globalization.CultureTypes
- uid: System.Globalization.CultureTypes.UserCustomCulture
  parent: System.Globalization.CultureTypes
  isExternal: false
  name: UserCustomCulture
  nameWithType: CultureTypes.UserCustomCulture
  fullName: System.Globalization.CultureTypes.UserCustomCulture
- uid: System.Globalization.CultureTypes
  parent: System.Globalization
  isExternal: false
  name: CultureTypes
  nameWithType: CultureTypes
  fullName: System.Globalization.CultureTypes
- uid: System.Globalization.CultureTypes.WindowsOnlyCultures
  parent: System.Globalization.CultureTypes
  isExternal: false
  name: WindowsOnlyCultures
  nameWithType: CultureTypes.WindowsOnlyCultures
  fullName: System.Globalization.CultureTypes.WindowsOnlyCultures
- uid: System.Globalization.CultureTypes
  parent: System.Globalization
  isExternal: false
  name: CultureTypes
  nameWithType: CultureTypes
  fullName: System.Globalization.CultureTypes
