### YamlMime:ManagedReference
items:
- uid: System.IO.Pipes.PipeStream
  id: PipeStream
  children:
  - System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)
  - System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)
  - System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Pipes.PipeStream.CanRead
  - System.IO.Pipes.PipeStream.CanSeek
  - System.IO.Pipes.PipeStream.CanWrite
  - System.IO.Pipes.PipeStream.CheckPipePropertyOperations
  - System.IO.Pipes.PipeStream.CheckReadOperations
  - System.IO.Pipes.PipeStream.CheckWriteOperations
  - System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  - System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)
  - System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)
  - System.IO.Pipes.PipeStream.Flush
  - System.IO.Pipes.PipeStream.GetAccessControl
  - System.IO.Pipes.PipeStream.InBufferSize
  - System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)
  - System.IO.Pipes.PipeStream.IsAsync
  - System.IO.Pipes.PipeStream.IsConnected
  - System.IO.Pipes.PipeStream.IsHandleExposed
  - System.IO.Pipes.PipeStream.IsMessageComplete
  - System.IO.Pipes.PipeStream.Length
  - System.IO.Pipes.PipeStream.OutBufferSize
  - System.IO.Pipes.PipeStream.Position
  - System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.Pipes.PipeStream.ReadByte
  - System.IO.Pipes.PipeStream.ReadMode
  - System.IO.Pipes.PipeStream.SafePipeHandle
  - System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)
  - System.IO.Pipes.PipeStream.SetLength(System.Int64)
  - System.IO.Pipes.PipeStream.TransmissionMode
  - System.IO.Pipes.PipeStream.WaitForPipeDrain
  - System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  langs:
  - csharp
  name: PipeStream
  nameWithType: PipeStream
  fullName: System.IO.Pipes.PipeStream
  type: Class
  summary: Exposes a <see cref="T:System.IO.Stream"> object around a pipe, which supports both anonymous and named pipes.
  remarks: "The PipeStream class provides the base class for named and anonymous pipes operations in the .NET Framework. Use the <xref:System.IO.Pipes.NamedPipeServerStream> and <xref:System.IO.Pipes.NamedPipeClientStream> classes for named pipe operations. Use the <xref:System.IO.Pipes.AnonymousPipeServerStream> and <xref:System.IO.Pipes.AnonymousPipeClientStream> classes for anonymous pipe operations.  \n  \n For more information about pipes, see [Pipes](../Topic/Pipe%20Operations%20in%20the%20.NET%20Framework.md). For an example of anonymous pipes, see [How to: Use Anonymous Pipes for Local Interprocess Communication](../Topic/How%20to:%20Use%20Anonymous%20Pipes%20for%20Local%20Interprocess%20Communication.md). For an example of named pipes, see [How to: Use Named Pipes for Network Interprocess Communication](../Topic/How%20to:%20Use%20Named%20Pipes%20for%20Network%20Interprocess%20Communication.md)."
  syntax:
    content: 'public abstract class PipeStream : System.IO.Stream'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.Stream
  implements: []
  inheritedMembers:
  - System.IO.Stream.CanTimeout
  - System.IO.Stream.Close
  - System.IO.Stream.CopyTo(System.IO.Stream)
  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.CreateWaitHandle
  - System.IO.Stream.Dispose
  - System.IO.Stream.FlushAsync
  - System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.Stream.Null
  - System.IO.Stream.ObjectInvariant
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.ReadTimeout
  - System.IO.Stream.Synchronized(System.IO.Stream)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.WriteTimeout
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)
  id: '#ctor(System.IO.Pipes.PipeDirection,System.Int32)'
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: PipeStream(PipeDirection,Int32)
  nameWithType: PipeStream.PipeStream(PipeDirection,Int32)
  fullName: System.IO.Pipes.PipeStream.PipeStream(PipeDirection,Int32)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeStream"> class using the specified <xref:System.IO.Pipes.PipeDirection> value and buffer size.
  remarks: This constructor uses a pipe transmission mode of <xref:System.IO.Pipes.PipeTransmissionMode>.
  syntax:
    content: protected PipeStream (System.IO.Pipes.PipeDirection direction, int bufferSize);
    parameters:
    - id: direction
      type: System.IO.Pipes.PipeDirection
      description: One of the <see cref="T:System.IO.Pipes.PipeDirection"> values that indicates the direction of the pipe object.
    - id: bufferSize
      type: System.Int32
      description: A positive <see cref="T:System.Int32"> value greater than or equal to 0 that indicates the buffer size.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)
  id: '#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)'
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: PipeStream(PipeDirection,PipeTransmissionMode,Int32)
  nameWithType: PipeStream.PipeStream(PipeDirection,PipeTransmissionMode,Int32)
  fullName: System.IO.Pipes.PipeStream.PipeStream(PipeDirection,PipeTransmissionMode,Int32)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeStream"> class using the specified <xref:System.IO.Pipes.PipeDirection>, <xref:System.IO.Pipes.PipeTransmissionMode>, and buffer size.
  remarks: To be added.
  syntax:
    content: protected PipeStream (System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeTransmissionMode transmissionMode, int outBufferSize);
    parameters:
    - id: direction
      type: System.IO.Pipes.PipeDirection
      description: One of the <see cref="T:System.IO.Pipes.PipeDirection"> values that indicates the direction of the pipe object.
    - id: transmissionMode
      type: System.IO.Pipes.PipeTransmissionMode
      description: One of the <see cref="T:System.IO.Pipes.PipeTransmissionMode"> values that indicates the transmission mode of the pipe object.
    - id: outBufferSize
      type: System.Int32
      description: A positive <see cref="T:System.Int32"> value greater than or equal to 0 that indicates the buffer size.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: PipeStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.Pipes.PipeStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Begins an asynchronous read operation.
  remarks: "Pass the returned <xref:System.IAsyncResult> object to the <xref:System.IO.Pipes.PipeStream.EndRead%2A> method to determine how many bytes were read and to release operating system resources used for reading. <xref:System.IO.Pipes.PipeStream.EndRead%2A> must be called once for every call to BeginRead. This can be done either in the same code that called BeginRead or in a callback that is passed to BeginRead.  \n  \n Use the <xref:System.IO.Pipes.PipeStream.CanRead%2A> property to determine whether the current <xref:System.IO.Pipes.PipeStream> object supports read operations.  \n  \n If the pipe is closed or an invalid argument is passed to BeginRead, the appropriate exceptions are raised immediately. Errors that occur during an asynchronous read request occur on the thread pool thread that is performing the request. The exceptions are raised when the code calls the <xref:System.IO.Pipes.PipeStream.EndRead%2A> method."
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to read data into.
    - id: offset
      type: System.Int32
      description: The byte offset in  at which to begin reading.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    - id: callback
      type: System.AsyncCallback
      description: The method to call when the asynchronous read operation is completed.
    - id: state
      type: System.Object
      description: A user-provided object that distinguishes this particular asynchronous read request from other requests.
    return:
      type: System.IAsyncResult
      description: An <see cref="T:System.IAsyncResult"> object that references the asynchronous read.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: PipeStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.Pipes.PipeStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Begins an asynchronous write operation.
  remarks: "<xref:System.IO.Pipes.PipeStream.EndWrite%2A> must be called once for every call to BeginWrite. This can be done either in the same code that called BeginWrite or in a callback that is passed to BeginWrite.  \n  \n Use the <xref:System.IO.Pipes.PipeStream.CanWrite%2A> property to determine whether the current <xref:System.IO.Pipes.PipeStream> object supports write operations.  \n  \n If the pipe is closed or an invalid argument is passed to BeginWrite, the appropriate exceptions are raised immediately. Errors that occur during an asynchronous write request occur on the thread pool thread that is performing the request. The exceptions are raised when the code calls the  <xref:System.IO.Pipes.PipeStream.EndWrite%2A> method."
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer that contains the data to write to the current stream.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in  at which to begin copying bytes to the current stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write.
    - id: callback
      type: System.AsyncCallback
      description: The method to call when the asynchronous write operation is completed.
    - id: state
      type: System.Object
      description: A user-provided object that distinguishes this particular asynchronous write request from other requests.
    return:
      type: System.IAsyncResult
      description: An <see cref="T:System.IAsyncResult"> object that references the asynchronous write operation.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.CanRead
  id: CanRead
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: CanRead
  nameWithType: PipeStream.CanRead
  fullName: System.IO.Pipes.PipeStream.CanRead
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets a value indicating whether the current stream supports read operations.
  remarks: If the <xref:System.IO.Pipes.PipeStream> object is closed, this property returns `false`.
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.CanSeek
  id: CanSeek
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: PipeStream.CanSeek
  fullName: System.IO.Pipes.PipeStream.CanSeek
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets a value indicating whether the current stream supports seek operations.
  remarks: If the <xref:System.IO.Pipes.PipeStream> object is closed, this property returns `false`.
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.CanWrite
  id: CanWrite
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: PipeStream.CanWrite
  fullName: System.IO.Pipes.PipeStream.CanWrite
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets a value indicating whether the current stream supports write operations.
  remarks: If the <xref:System.IO.Pipes.PipeStream> object is closed, this property returns `false`.
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.CheckPipePropertyOperations
  id: CheckPipePropertyOperations
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: CheckPipePropertyOperations()
  nameWithType: PipeStream.CheckPipePropertyOperations()
  fullName: System.IO.Pipes.PipeStream.CheckPipePropertyOperations()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Verifies that the pipe is in a proper state for getting or setting properties.
  remarks: To be added.
  syntax:
    content: protected virtual void CheckPipePropertyOperations ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.CheckReadOperations
  id: CheckReadOperations
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: CheckReadOperations()
  nameWithType: PipeStream.CheckReadOperations()
  fullName: System.IO.Pipes.PipeStream.CheckReadOperations()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Verifies that the pipe is in a connected state for read operations.
  remarks: To be added.
  syntax:
    content: protected void CheckReadOperations ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.CheckWriteOperations
  id: CheckWriteOperations
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: CheckWriteOperations()
  nameWithType: PipeStream.CheckWriteOperations()
  fullName: System.IO.Pipes.PipeStream.CheckWriteOperations()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Verifies that the pipe is in a connected state for write operations.
  remarks: To be added.
  syntax:
    content: protected void CheckWriteOperations ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: PipeStream.Dispose(Boolean)
  fullName: System.IO.Pipes.PipeStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Releases the unmanaged resources used by the <see cref="T:System.IO.Pipes.PipeStream"> class and optionally releases the managed resources.
  remarks: This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected Dispose method with the  parameter set to `true`. <xref:System.Object.Finalize%2A> invokes Dispose with  set to `false`. When the disposing parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.Pipes.PipeStream> object references. This method invokes the Dispose method of each referenced object.
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: PipeStream.EndRead(IAsyncResult)
  fullName: System.IO.Pipes.PipeStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Ends a pending asynchronous read request.
  remarks: "This method returns the number of bytes read into the byte array specified by the earlier call to <xref:System.IO.Pipes.PipeStream.BeginRead%2A>.  \n  \n Pass the returned <xref:System.IAsyncResult> object to the EndRead method to determine how many bytes were read and to release operating system resources used for reading. EndRead must be called once for every call to <xref:System.IO.Pipes.PipeStream.BeginRead%2A>. This can be done either in the same code that called <xref:System.IO.Pipes.PipeStream.BeginRead%2A> or in a callback that is passed to <xref:System.IO.Pipes.PipeStream.BeginRead%2A>.  \n  \n Use the <xref:System.IO.Pipes.PipeStream.CanRead%2A> property to determine whether the current <xref:System.IO.Pipes.PipeStream> object supports read operations.  \n  \n If the pipe is closed or an invalid argument is passed to <xref:System.IO.Pipes.PipeStream.BeginRead%2A>, the appropriate exceptions are raised immediately. Errors that occur during an asynchronous read request occur on the thread pool thread that is performing the request. The exceptions are raised when the code calls the EndRead method."
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The reference to the pending asynchronous request.
    return:
      type: System.Int32
      description: The number of bytes that were read. A return value of 0 indicates the end of the stream (the pipe has been closed).
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: PipeStream.EndWrite(IAsyncResult)
  fullName: System.IO.Pipes.PipeStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Ends a pending asynchronous write request.
  remarks: "EndWrite must be called once for every call to <xref:System.IO.Pipes.PipeStream.BeginWrite%2A>. This can be done either in the same code that called <xref:System.IO.Pipes.PipeStream.BeginWrite%2A> or in a callback that is passed to <xref:System.IO.Pipes.PipeStream.BeginWrite%2A>.  \n  \n Use the <xref:System.IO.Pipes.PipeStream.CanWrite%2A> property to determine whether the current <xref:System.IO.Pipes.PipeStream> object supports write operations.  \n  \n If the pipe is closed or an invalid argument is passed to <xref:System.IO.Pipes.PipeStream.BeginWrite%2A>, the appropriate exceptions are raised immediately. Errors that occur during an asynchronous write request occur on the thread pool thread that is performing the request. The exceptions are raised when the code the calls EndWrite method."
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The reference to the pending asynchronous request.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.Flush
  id: Flush
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: Flush()
  nameWithType: PipeStream.Flush()
  fullName: System.IO.Pipes.PipeStream.Flush()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Clears the buffer for the current stream and causes any buffered data to be written to the underlying device.
  remarks: The Flush method is not supported in the <xref:System.IO.Pipes.PipeStream> class and does nothing when it is called.
  syntax:
    content: public override void Flush ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.GetAccessControl
  id: GetAccessControl
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: GetAccessControl()
  nameWithType: PipeStream.GetAccessControl()
  fullName: System.IO.Pipes.PipeStream.GetAccessControl()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets a <see cref="T:System.IO.Pipes.PipeSecurity"> object that encapsulates the access control list (ACL) entries for the pipe described by the current <xref:System.IO.Pipes.PipeStream> object.
  remarks: 'An access control list (ACL) describes individuals and/or groups that have, or do not have, rights to perform specific actions on a specified file. For more information, see [How to: Add or Remove Access Control List Entries](../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md).'
  syntax:
    content: public System.IO.Pipes.PipeSecurity GetAccessControl ();
    parameters: []
    return:
      type: System.IO.Pipes.PipeSecurity
      description: A <see cref="T:System.IO.Pipes.PipeSecurity"> object that encapsulates the access control list (ACL) entries for the pipe described by the current <xref:System.IO.Pipes.PipeStream> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.InBufferSize
  id: InBufferSize
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: InBufferSize
  nameWithType: PipeStream.InBufferSize
  fullName: System.IO.Pipes.PipeStream.InBufferSize
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets the size, in bytes, of the inbound buffer for a pipe.
  remarks: If InBufferSize is 0, the buffer size is allocated as needed.
  syntax:
    content: public virtual int InBufferSize { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)
  id: InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: InitializeHandle(SafePipeHandle,Boolean,Boolean)
  nameWithType: PipeStream.InitializeHandle(SafePipeHandle,Boolean,Boolean)
  fullName: System.IO.Pipes.PipeStream.InitializeHandle(SafePipeHandle,Boolean,Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Initializes a <see cref="T:System.IO.Pipes.PipeStream"> object from the specified <xref:Microsoft.Win32.SafeHandles.SafePipeHandle> object.
  remarks: If the pipe is in a connected state, this method also sets the <xref:System.IO.Pipes.PipeStream.IsConnected%2A> property to `true`.
  syntax:
    content: protected void InitializeHandle (Microsoft.Win32.SafeHandles.SafePipeHandle handle, bool isExposed, bool isAsync);
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafePipeHandle
      description: The <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle"> object of the pipe to initialize.
    - id: isExposed
      type: System.Boolean
      description: '`true` to expose the handle; otherwise, `false`.'
    - id: isAsync
      type: System.Boolean
      description: '`true` to indicate that the handle was opened asynchronously; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.IsAsync
  id: IsAsync
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: IsAsync
  nameWithType: PipeStream.IsAsync
  fullName: System.IO.Pipes.PipeStream.IsAsync
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets a value indicating whether a <see cref="T:System.IO.Pipes.PipeStream"> object was opened asynchronously or synchronously.
  remarks: This property enables your code to use the <xref:System.IO.Pipes.PipeStream.SafePipeHandle%2A> property correctly.
  syntax:
    content: public bool IsAsync { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.IsConnected
  id: IsConnected
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: IsConnected
  nameWithType: PipeStream.IsConnected
  fullName: System.IO.Pipes.PipeStream.IsConnected
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets or sets a value indicating whether a <see cref="T:System.IO.Pipes.PipeStream"> object is connected.
  remarks: The IsConnected property returns `true` only if the <xref:System.IO.Pipes.PipeStream> object is connected. If this property returns `false`, the pipe may be waiting to connect, or may be disconnected, closed, or broken.
  syntax:
    content: public bool IsConnected { get; protected set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.IsHandleExposed
  id: IsHandleExposed
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: IsHandleExposed
  nameWithType: PipeStream.IsHandleExposed
  fullName: System.IO.Pipes.PipeStream.IsHandleExposed
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets a value indicating whether a handle to a <see cref="T:System.IO.Pipes.PipeStream"> object is exposed.
  remarks: The value of this property is set when obtaining a handle to the pipe that is encapsulated by the current <xref:System.IO.Pipes.PipeStream> object.
  syntax:
    content: protected bool IsHandleExposed { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.IsMessageComplete
  id: IsMessageComplete
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: IsMessageComplete
  nameWithType: PipeStream.IsMessageComplete
  fullName: System.IO.Pipes.PipeStream.IsMessageComplete
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets a value indicating whether there is more data in the message returned from the most recent read operation.
  remarks: This property is relevant if the pipe's <xref:System.IO.Pipes.PipeStream.ReadMode%2A> property was set to <xref:System.IO.Pipes.PipeTransmissionMode> by the most recent call to <xref:System.IO.Pipes.PipeStream.Read%2A> or <xref:System.IO.Pipes.PipeStream.EndRead%2A>.
  syntax:
    content: public bool IsMessageComplete { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.Length
  id: Length
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: Length
  nameWithType: PipeStream.Length
  fullName: System.IO.Pipes.PipeStream.Length
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets the length of a stream, in bytes.
  remarks: The <xref:System.IO.Pipes.PipeStream> class does not support the Length property.
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.OutBufferSize
  id: OutBufferSize
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: OutBufferSize
  nameWithType: PipeStream.OutBufferSize
  fullName: System.IO.Pipes.PipeStream.OutBufferSize
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets the size, in bytes, of the outbound buffer for a pipe.
  remarks: If OutBufferSize is 0, the buffer size is allocated as needed.
  syntax:
    content: public virtual int OutBufferSize { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.Position
  id: Position
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: Position
  nameWithType: PipeStream.Position
  fullName: System.IO.Pipes.PipeStream.Position
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets or sets the current position of the current stream.
  remarks: The <xref:System.IO.Pipes.PipeStream> class does not support the Position property.
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: PipeStream.Read(Byte[],Int32,Int32)
  fullName: System.IO.Pipes.PipeStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Reads a block of bytes from a stream and writes the data to a specified buffer.
  remarks: "Use the <xref:System.IO.Pipes.PipeStream.CanRead%2A> property to determine whether the current <xref:System.IO.Pipes.PipeStream> object supports read operations.  \n  \n Calling the Read method blocks until  bytes are read or the end of the stream is reached. For asynchronous read operations, see <xref:System.IO.Pipes.PipeStream.BeginRead%2A> and <xref:System.IO.Pipes.PipeStream.EndRead%2A>."
  example:
  - "The following example creates an anonymous pipe client and pipe server. The pipe server uses the Read method to read a series of bytes from the pipe client as a validation code. Both the pipe client and the pipe server are part of the same example. The server portion of the example creates a client process and passes it an anonymous pipe handle as an argument.  \n  \n [!CODE [System.IO.Pipes.PipeStream#1](../CodeSnippet/VS_Snippets_CLR_System/system.io.pipes.pipestream#1)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: When this method returns, contains the specified byte array with the values between  and ( +  - 1) replaced by the bytes read from the current source.
    - id: offset
      type: System.Int32
      description: The byte offset in the  array at which the bytes that are read will be placed.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    return:
      type: System.Int32
      description: The total number of bytes that are read into . This might be less than the number of bytes requested if that number of bytes is not currently available, or 0 if the end of the stream is reached.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.ReadByte
  id: ReadByte
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: ReadByte()
  nameWithType: PipeStream.ReadByte()
  fullName: System.IO.Pipes.PipeStream.ReadByte()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Reads a byte from a pipe.
  remarks: Use the <xref:System.IO.Pipes.PipeStream.CanRead%2A> property to determine whether the current <xref:System.IO.Pipes.PipeStream> object supports read operations.
  syntax:
    content: public override int ReadByte ();
    parameters: []
    return:
      type: System.Int32
      description: The byte, cast to <see cref="T:System.Int32">, or -1 indicates the end of the stream (the pipe has been closed).
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.ReadMode
  id: ReadMode
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: ReadMode
  nameWithType: PipeStream.ReadMode
  fullName: System.IO.Pipes.PipeStream.ReadMode
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets or sets the reading mode for a <see cref="T:System.IO.Pipes.PipeStream"> object.
  remarks: Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> mode message transmission.
  syntax:
    content: public virtual System.IO.Pipes.PipeTransmissionMode ReadMode { get; set; }
    return:
      type: System.IO.Pipes.PipeTransmissionMode
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.SafePipeHandle
  id: SafePipeHandle
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: SafePipeHandle
  nameWithType: PipeStream.SafePipeHandle
  fullName: System.IO.Pipes.PipeStream.SafePipeHandle
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets the safe handle for the local end of the pipe that the current <see cref="T:System.IO.Pipes.PipeStream"> object encapsulates.
  remarks: To be added.
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafePipeHandle SafePipeHandle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafePipeHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: PipeStream.Seek(Int64,SeekOrigin)
  fullName: System.IO.Pipes.PipeStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Sets the current position of the current stream to the specified value.
  remarks: The Seek method is not supported in pipes and raises a <xref:System.NotSupportedException> when it is called.
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: The point, relative to , to begin seeking from.
    - id: origin
      type: System.IO.SeekOrigin
      description: Specifies the beginning, the end, or the current position as a reference point for , using a value of type <see cref="T:System.IO.SeekOrigin">.
    return:
      type: System.Int64
      description: The new position in the stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)
  id: SetAccessControl(System.IO.Pipes.PipeSecurity)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: SetAccessControl(PipeSecurity)
  nameWithType: PipeStream.SetAccessControl(PipeSecurity)
  fullName: System.IO.Pipes.PipeStream.SetAccessControl(PipeSecurity)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Applies the access control list (ACL) entries specified by a <see cref="T:System.IO.Pipes.PipeSecurity"> object to the pipe specified by the current <xref:System.IO.Pipes.PipeStream> object.
  remarks: 'An access control list (ACL) describes individuals and/or groups that have, or do not have, rights to perform specific actions on a specified file. For more information, see [How to: Add or Remove Access Control List Entries](../Topic/How%20to:%20Add%20or%20Remove%20Access%20Control%20List%20Entries.md).'
  syntax:
    content: public void SetAccessControl (System.IO.Pipes.PipeSecurity pipeSecurity);
    parameters:
    - id: pipeSecurity
      type: System.IO.Pipes.PipeSecurity
      description: A <see cref="T:System.IO.Pipes.PipeSecurity"> object that specifies an access control list (ACL) entry to apply to the current pipe.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: PipeStream.SetLength(Int64)
  fullName: System.IO.Pipes.PipeStream.SetLength(Int64)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Sets the length of the current stream to the specified value.
  remarks: The <xref:System.IO.Pipes.PipeStream> class does not support the SetLength method.
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The new length of the stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.TransmissionMode
  id: TransmissionMode
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: TransmissionMode
  nameWithType: PipeStream.TransmissionMode
  fullName: System.IO.Pipes.PipeStream.TransmissionMode
  type: Property
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Gets the pipe transmission mode supported by the current pipe.
  remarks: Anonymous pipes do not support <xref:System.IO.Pipes.PipeTransmissionMode> mode message transmission.
  syntax:
    content: public virtual System.IO.Pipes.PipeTransmissionMode TransmissionMode { get; }
    return:
      type: System.IO.Pipes.PipeTransmissionMode
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.WaitForPipeDrain
  id: WaitForPipeDrain
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: WaitForPipeDrain()
  nameWithType: PipeStream.WaitForPipeDrain()
  fullName: System.IO.Pipes.PipeStream.WaitForPipeDrain()
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Waits for the other end of the pipe to read all sent bytes.
  remarks: The WaitForPipeDrain method blocks until the other end of the pipe has read all sent bytes.
  syntax:
    content: public void WaitForPipeDrain ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: PipeStream.Write(Byte[],Int32,Int32)
  fullName: System.IO.Pipes.PipeStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Writes a block of bytes to the current stream using data from a buffer.
  remarks: "Use the <xref:System.IO.Pipes.PipeStream.CanWrite%2A> property to determine whether the current <xref:System.IO.Pipes.PipeStream> object supports write operations.  \n  \n Calling the Write method blocks until  bytes are read or the end of the stream is reached. For asynchronous read operations, see <xref:System.IO.Pipes.PipeStream.BeginWrite%2A> and <xref:System.IO.Pipes.PipeStream.EndWrite%2A>."
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer that contains data to write to the pipe.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in  at which to begin copying bytes to the current stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write to the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  name: WriteByte(Byte)
  nameWithType: PipeStream.WriteByte(Byte)
  fullName: System.IO.Pipes.PipeStream.WriteByte(Byte)
  type: Method
  assemblies:
  - System.Core
  namespace: System.IO.Pipes
  summary: Writes a byte to the current stream.
  remarks: Use the <xref:System.IO.Pipes.PipeStream.CanWrite%2A> property to determine whether the current <xref:System.IO.Pipes.PipeStream> object supports write operations.
  syntax:
    content: public override void WriteByte (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The byte to write to the stream.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: PipeStream(PipeDirection,Int32)
  nameWithType: PipeStream.PipeStream(PipeDirection,Int32)
  fullName: System.IO.Pipes.PipeStream.PipeStream(PipeDirection,Int32)
- uid: System.IO.Pipes.PipeDirection
  parent: System.IO.Pipes
  isExternal: false
  name: PipeDirection
  nameWithType: PipeDirection
  fullName: System.IO.Pipes.PipeDirection
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: PipeStream(PipeDirection,PipeTransmissionMode,Int32)
  nameWithType: PipeStream.PipeStream(PipeDirection,PipeTransmissionMode,Int32)
  fullName: System.IO.Pipes.PipeStream.PipeStream(PipeDirection,PipeTransmissionMode,Int32)
- uid: System.IO.Pipes.PipeDirection
  parent: System.IO.Pipes
  isExternal: false
  name: PipeDirection
  nameWithType: PipeDirection
  fullName: System.IO.Pipes.PipeDirection
- uid: System.IO.Pipes.PipeTransmissionMode
  parent: System.IO.Pipes
  isExternal: false
  name: PipeTransmissionMode
  nameWithType: PipeTransmissionMode
  fullName: System.IO.Pipes.PipeTransmissionMode
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: PipeStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.Pipes.PipeStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: PipeStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.Pipes.PipeStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.Pipes.PipeStream.CanRead
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: CanRead
  nameWithType: PipeStream.CanRead
  fullName: System.IO.Pipes.PipeStream.CanRead
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Pipes.PipeStream.CanSeek
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: CanSeek
  nameWithType: PipeStream.CanSeek
  fullName: System.IO.Pipes.PipeStream.CanSeek
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Pipes.PipeStream.CanWrite
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: CanWrite
  nameWithType: PipeStream.CanWrite
  fullName: System.IO.Pipes.PipeStream.CanWrite
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Pipes.PipeStream.CheckPipePropertyOperations
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: CheckPipePropertyOperations()
  nameWithType: PipeStream.CheckPipePropertyOperations()
  fullName: System.IO.Pipes.PipeStream.CheckPipePropertyOperations()
- uid: System.IO.Pipes.PipeStream.CheckReadOperations
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: CheckReadOperations()
  nameWithType: PipeStream.CheckReadOperations()
  fullName: System.IO.Pipes.PipeStream.CheckReadOperations()
- uid: System.IO.Pipes.PipeStream.CheckWriteOperations
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: CheckWriteOperations()
  nameWithType: PipeStream.CheckWriteOperations()
  fullName: System.IO.Pipes.PipeStream.CheckWriteOperations()
- uid: System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: PipeStream.Dispose(Boolean)
  fullName: System.IO.Pipes.PipeStream.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: PipeStream.EndRead(IAsyncResult)
  fullName: System.IO.Pipes.PipeStream.EndRead(IAsyncResult)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: PipeStream.EndWrite(IAsyncResult)
  fullName: System.IO.Pipes.PipeStream.EndWrite(IAsyncResult)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.IO.Pipes.PipeStream.Flush
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: Flush()
  nameWithType: PipeStream.Flush()
  fullName: System.IO.Pipes.PipeStream.Flush()
- uid: System.IO.Pipes.PipeStream.GetAccessControl
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: GetAccessControl()
  nameWithType: PipeStream.GetAccessControl()
  fullName: System.IO.Pipes.PipeStream.GetAccessControl()
- uid: System.IO.Pipes.PipeSecurity
  parent: System.IO.Pipes
  isExternal: false
  name: PipeSecurity
  nameWithType: PipeSecurity
  fullName: System.IO.Pipes.PipeSecurity
- uid: System.IO.Pipes.PipeStream.InBufferSize
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: InBufferSize
  nameWithType: PipeStream.InBufferSize
  fullName: System.IO.Pipes.PipeStream.InBufferSize
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: InitializeHandle(SafePipeHandle,Boolean,Boolean)
  nameWithType: PipeStream.InitializeHandle(SafePipeHandle,Boolean,Boolean)
  fullName: System.IO.Pipes.PipeStream.InitializeHandle(SafePipeHandle,Boolean,Boolean)
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafePipeHandle
  nameWithType: SafePipeHandle
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Pipes.PipeStream.IsAsync
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: IsAsync
  nameWithType: PipeStream.IsAsync
  fullName: System.IO.Pipes.PipeStream.IsAsync
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Pipes.PipeStream.IsConnected
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: IsConnected
  nameWithType: PipeStream.IsConnected
  fullName: System.IO.Pipes.PipeStream.IsConnected
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Pipes.PipeStream.IsHandleExposed
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: IsHandleExposed
  nameWithType: PipeStream.IsHandleExposed
  fullName: System.IO.Pipes.PipeStream.IsHandleExposed
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Pipes.PipeStream.IsMessageComplete
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: IsMessageComplete
  nameWithType: PipeStream.IsMessageComplete
  fullName: System.IO.Pipes.PipeStream.IsMessageComplete
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Pipes.PipeStream.Length
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: Length
  nameWithType: PipeStream.Length
  fullName: System.IO.Pipes.PipeStream.Length
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Pipes.PipeStream.OutBufferSize
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: OutBufferSize
  nameWithType: PipeStream.OutBufferSize
  fullName: System.IO.Pipes.PipeStream.OutBufferSize
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Pipes.PipeStream.Position
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: Position
  nameWithType: PipeStream.Position
  fullName: System.IO.Pipes.PipeStream.Position
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: PipeStream.Read(Byte[],Int32,Int32)
  fullName: System.IO.Pipes.PipeStream.Read(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Pipes.PipeStream.ReadByte
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: ReadByte()
  nameWithType: PipeStream.ReadByte()
  fullName: System.IO.Pipes.PipeStream.ReadByte()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Pipes.PipeStream.ReadMode
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: ReadMode
  nameWithType: PipeStream.ReadMode
  fullName: System.IO.Pipes.PipeStream.ReadMode
- uid: System.IO.Pipes.PipeTransmissionMode
  parent: System.IO.Pipes
  isExternal: false
  name: PipeTransmissionMode
  nameWithType: PipeTransmissionMode
  fullName: System.IO.Pipes.PipeTransmissionMode
- uid: System.IO.Pipes.PipeStream.SafePipeHandle
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: SafePipeHandle
  nameWithType: PipeStream.SafePipeHandle
  fullName: System.IO.Pipes.PipeStream.SafePipeHandle
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafePipeHandle
  nameWithType: SafePipeHandle
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle
- uid: System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: PipeStream.Seek(Int64,SeekOrigin)
  fullName: System.IO.Pipes.PipeStream.Seek(Int64,SeekOrigin)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: SetAccessControl(PipeSecurity)
  nameWithType: PipeStream.SetAccessControl(PipeSecurity)
  fullName: System.IO.Pipes.PipeStream.SetAccessControl(PipeSecurity)
- uid: System.IO.Pipes.PipeSecurity
  parent: System.IO.Pipes
  isExternal: false
  name: PipeSecurity
  nameWithType: PipeSecurity
  fullName: System.IO.Pipes.PipeSecurity
- uid: System.IO.Pipes.PipeStream.SetLength(System.Int64)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: PipeStream.SetLength(Int64)
  fullName: System.IO.Pipes.PipeStream.SetLength(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Pipes.PipeStream.TransmissionMode
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: TransmissionMode
  nameWithType: PipeStream.TransmissionMode
  fullName: System.IO.Pipes.PipeStream.TransmissionMode
- uid: System.IO.Pipes.PipeTransmissionMode
  parent: System.IO.Pipes
  isExternal: false
  name: PipeTransmissionMode
  nameWithType: PipeTransmissionMode
  fullName: System.IO.Pipes.PipeTransmissionMode
- uid: System.IO.Pipes.PipeStream.WaitForPipeDrain
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: WaitForPipeDrain()
  nameWithType: PipeStream.WaitForPipeDrain()
  fullName: System.IO.Pipes.PipeStream.WaitForPipeDrain()
- uid: System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: PipeStream.Write(Byte[],Int32,Int32)
  fullName: System.IO.Pipes.PipeStream.Write(Byte[],Int32,Int32)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: WriteByte(Byte)
  nameWithType: PipeStream.WriteByte(Byte)
  fullName: System.IO.Pipes.PipeStream.WriteByte(Byte)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
