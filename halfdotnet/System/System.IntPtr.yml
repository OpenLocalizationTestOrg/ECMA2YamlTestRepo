### YamlMime:ManagedReference
items:
- uid: System.IntPtr
  id: IntPtr
  children:
  - System.IntPtr.#ctor(System.Int32)
  - System.IntPtr.#ctor(System.Int64)
  - System.IntPtr.#ctor(System.Void*)
  - System.IntPtr.Add(System.IntPtr,System.Int32)
  - System.IntPtr.Equals(System.Object)
  - System.IntPtr.GetHashCode
  - System.IntPtr.op_Addition(System.IntPtr,System.Int32)
  - System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)
  - System.IntPtr.op_Explicit(System.Int32 to System.IntPtr)
  - System.IntPtr.op_Explicit(System.Int64 to System.IntPtr)
  - System.IntPtr.op_Explicit(System.IntPtr to System.Int32)
  - System.IntPtr.op_Explicit(System.IntPtr to System.Int64)
  - System.IntPtr.op_Explicit(System.IntPtr to System.Void*)
  - System.IntPtr.op_Explicit(System.Void* to System.IntPtr)
  - System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)
  - System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)
  - System.IntPtr.Size
  - System.IntPtr.Subtract(System.IntPtr,System.Int32)
  - System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.IntPtr.ToInt32
  - System.IntPtr.ToInt64
  - System.IntPtr.ToPointer
  - System.IntPtr.ToString
  - System.IntPtr.ToString(System.String)
  - System.IntPtr.Zero
  langs:
  - csharp
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
  type: Struct
  summary: A platform-specific type that is used to represent a pointer or a handle.
  remarks: "The IntPtr type is designed to be an integer whose size is platform-specific. That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.  \n  \n The IntPtr type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers.  \n  \n IntPtr objects can also be used to hold handles. For example, instances of IntPtr are used extensively in the <xref:System.IO.FileStream?displayProperty=fullName> class to hold file handles.  \n  \n The IntPtr type is CLS-compliant, while the <xref:System.UIntPtr> type is not. Only the IntPtr type is used in the common language runtime. The <xref:System.UIntPtr> type is provided mostly to maintain architectural symmetry with the IntPtr type.  \n  \n This type implements the <xref:System.Runtime.Serialization.ISerializable> interface."
  example:
  - "The following example uses managed pointers to reverse the characters in an array. After it initializes a <xref:System.String> object and gets its length, it does the following:  \n  \n1.  Calls the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> method to copy the Unicode string to unmanaged memory as an ANSI (one-byte) character. The method returns an IntPtr object that points to the beginning of the unmanaged string. The Visual Basic example uses this pointer directly; in the C++ and C# examples, it is cast to a pointer to a byte.  \n  \n2.  Calls the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName> method to allocate the same number of bytes as the unmanaged string occupies. The method returns an IntPtr object that points to the beginning of the unmanaged block of memory. The Visual Basic example uses this pointer directly; in the C++ and C# examples, it is cast to a pointer to a byte.  \n  \n3.  The Visual Basic example defines a variable named `offset` that is equal to the length of the ANSI string. It is used to determine the offset into unmanaged memory to which the next charter in the ANSI string is copied. Because its starting value is the length of the string, the copy operation will copy a character from the start of the string to the end of the memory block.  \n  \n     The C# and C++ examples call the <xref:System.IntPtr.ToPointer%2A> method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and they add one less than the length of the string to the starting address of the ANSI string. Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.  \n  \n4.  Uses a loop to copy each character from the string to the unmanaged block of memory.  \n  \n     The Visual Basic example calls the <xref:System.Runtime.InteropServices.Marshal.ReadByte%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName> method to read the byte (or one-byte character) at a specified offset from the managed pointer to the ANSI string. The offset is incremented with each iteration of the loop. It then calls the <xref:System.Runtime.InteropServices.Marshal.WriteByte%28System.IntPtr%2CSystem.Int32%2CSystem.Byte%29?displayProperty=fullName> method to write the byte to the memory address defined by the starting address of the unmanaged block of memory plus `offset`. It then decrements `offset`.  \n  \n     The C# and C++ examples perform the copy operation, then decrement the pointer to the address of the next location in the unmanaged ANSI string and increment the pointer to the next address in the unmanaged block.  \n  \n5.  All examples call the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <xref:System.String> object.  \n  \n6.  After displaying the original and reversed strings, all examples call the <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.  \n  \n [!CODE [System.IntPtr#1](../CodeSnippet/VS_Snippets_CLR_System/system.intptr#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public struct IntPtr : System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.Runtime.Serialization.ISerializable
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.IntPtr
  langs:
  - csharp
  name: IntPtr(Int32)
  nameWithType: IntPtr.IntPtr(Int32)
  fullName: System.IntPtr.IntPtr(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of <see cref="T:System.IntPtr"> using the specified 32-bit pointer or handle.
  remarks: To be added.
  syntax:
    content: public IntPtr (int value);
    parameters:
    - id: value
      type: System.Int32
      description: A pointer or handle contained in a 32-bit signed integer.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: System.IntPtr
  langs:
  - csharp
  name: IntPtr(Int64)
  nameWithType: IntPtr.IntPtr(Int64)
  fullName: System.IntPtr.IntPtr(Int64)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of <see cref="T:System.IntPtr"> using the specified 64-bit pointer.
  remarks: An exception is only thrown if the value of  requires more bits than the current platform supports.
  syntax:
    content: public IntPtr (long value);
    parameters:
    - id: value
      type: System.Int64
      description: A pointer or handle contained in a 64-bit signed integer.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.#ctor(System.Void*)
  id: '#ctor(System.Void*)'
  parent: System.IntPtr
  langs:
  - csharp
  name: IntPtr(Void*)
  nameWithType: IntPtr.IntPtr(Void*)
  fullName: System.IntPtr.IntPtr(Void*)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of <see cref="T:System.IntPtr"> using the specified pointer to an unspecified type.
  remarks: To be added.
  syntax:
    content: public IntPtr (void* value);
    parameters:
    - id: value
      type: System.Void*
      description: A pointer to an unspecified type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.Add(System.IntPtr,System.Int32)
  id: Add(System.IntPtr,System.Int32)
  parent: System.IntPtr
  langs:
  - csharp
  name: Add(IntPtr,Int32)
  nameWithType: IntPtr.Add(IntPtr,Int32)
  fullName: System.IntPtr.Add(IntPtr,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Adds an offset to the value of a pointer.
  remarks: "The Add method does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, the addition operation is performed in an unchecked context.  \n  \n Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of a pointer."
  example:
  - "The following example instantiates an <xref:System.IntPtr> object that points to the beginning of a ten-element array, and then calls the Add method to iterate the elements in the array.  \n  \n [!CODE [System.IntPtr.Add#1](../../add/codesnippet/system.intptr.md)]"
  syntax:
    content: public static IntPtr Add (IntPtr pointer, int offset);
    parameters:
    - id: pointer
      type: System.IntPtr
      description: The pointer to add the offset to.
    - id: offset
      type: System.Int32
      description: The offset to add.
    return:
      type: System.IntPtr
      description: A new pointer that reflects the addition of  to .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.IntPtr
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: IntPtr.Equals(Object)
  fullName: System.IntPtr.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether this instance is equal to a specified object.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance or `null`.
    return:
      type: System.Boolean
      description: '`true` if  is an instance of <see cref="T:System.IntPtr"> and equals the value of this instance; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.GetHashCode
  id: GetHashCode
  parent: System.IntPtr
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: IntPtr.GetHashCode()
  fullName: System.IntPtr.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for this instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.op_Addition(System.IntPtr,System.Int32)
  id: op_Addition(System.IntPtr,System.Int32)
  parent: System.IntPtr
  langs:
  - csharp
  name: op_Addition(IntPtr,Int32)
  nameWithType: IntPtr.op_Addition(IntPtr,Int32)
  fullName: System.IntPtr.op_Addition(IntPtr,Int32)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Adds an offset to the value of a pointer.
  remarks: "The Addition method defines the addition operation for <xref:System.IntPtr> objects. It enables code such as the following.  \n  \n [!CODE [System.IntPtr.op_Addition#1](../../add/codesnippet/system.intptr.md)]  \n  \n Languages that do not support custom operators can call the <xref:System.IntPtr.Add%2A> method instead.  \n  \n The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context."
  syntax:
    content: public static IntPtr op_Addition (IntPtr pointer, int offset);
    parameters:
    - id: pointer
      type: System.IntPtr
      description: The pointer to add the offset to.
    - id: offset
      type: System.Int32
      description: The offset to add.
    return:
      type: System.IntPtr
      description: A new pointer that reflects the addition of  to .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)
  id: op_Equality(System.IntPtr,System.IntPtr)
  parent: System.IntPtr
  langs:
  - csharp
  name: op_Equality(IntPtr,IntPtr)
  nameWithType: IntPtr.op_Equality(IntPtr,IntPtr)
  fullName: System.IntPtr.op_Equality(IntPtr,IntPtr)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether two specified instances of <see cref="T:System.IntPtr"> are equal.
  remarks: To be added.
  syntax:
    content: public static bool op_Equality (IntPtr value1, IntPtr value2);
    parameters:
    - id: value1
      type: System.IntPtr
      description: The first pointer or handle to compare.
    - id: value2
      type: System.IntPtr
      description: The second pointer or handle to compare.
    return:
      type: System.Boolean
      description: '`true` if  equals ; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.op_Explicit(System.Int32 to System.IntPtr)
  id: op_Explicit(System.Int32 to System.IntPtr)
  parent: System.IntPtr
  langs:
  - csharp
  name: op_Explicit(Int32)
  nameWithType: IntPtr.op_Explicit(Int32)
  fullName: System.IntPtr.op_Explicit(Int32)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static IntPtr op_Explicit (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: System.IntPtr
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.op_Explicit(System.Int64 to System.IntPtr)
  id: op_Explicit(System.Int64 to System.IntPtr)
  parent: System.IntPtr
  langs:
  - csharp
  name: op_Explicit(Int64)
  nameWithType: IntPtr.op_Explicit(Int64)
  fullName: System.IntPtr.op_Explicit(Int64)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static IntPtr op_Explicit (long value);
    parameters:
    - id: value
      type: System.Int64
      description: To be added.
    return:
      type: System.IntPtr
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Int32)
  id: op_Explicit(System.IntPtr to System.Int32)
  parent: System.IntPtr
  langs:
  - csharp
  name: op_Explicit(IntPtr)
  nameWithType: IntPtr.op_Explicit(IntPtr)
  fullName: System.IntPtr.op_Explicit(IntPtr)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int op_Explicit (IntPtr value);
    parameters:
    - id: value
      type: System.IntPtr
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Int64)
  id: op_Explicit(System.IntPtr to System.Int64)
  parent: System.IntPtr
  langs:
  - csharp
  name: op_Explicit(IntPtr)
  nameWithType: IntPtr.op_Explicit(IntPtr)
  fullName: System.IntPtr.op_Explicit(IntPtr)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static long op_Explicit (IntPtr value);
    parameters:
    - id: value
      type: System.IntPtr
      description: To be added.
    return:
      type: System.Int64
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Void*)
  id: op_Explicit(System.IntPtr to System.Void*)
  parent: System.IntPtr
  langs:
  - csharp
  name: op_Explicit(IntPtr)
  nameWithType: IntPtr.op_Explicit(IntPtr)
  fullName: System.IntPtr.op_Explicit(IntPtr)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void* op_Explicit (IntPtr value);
    parameters:
    - id: value
      type: System.IntPtr
      description: To be added.
    return:
      type: System.Void*
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.op_Explicit(System.Void* to System.IntPtr)
  id: op_Explicit(System.Void* to System.IntPtr)
  parent: System.IntPtr
  langs:
  - csharp
  name: op_Explicit(Void*)
  nameWithType: IntPtr.op_Explicit(Void*)
  fullName: System.IntPtr.op_Explicit(Void*)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static IntPtr op_Explicit (void* value);
    parameters:
    - id: value
      type: System.Void*
      description: To be added.
    return:
      type: System.IntPtr
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)
  id: op_Inequality(System.IntPtr,System.IntPtr)
  parent: System.IntPtr
  langs:
  - csharp
  name: op_Inequality(IntPtr,IntPtr)
  nameWithType: IntPtr.op_Inequality(IntPtr,IntPtr)
  fullName: System.IntPtr.op_Inequality(IntPtr,IntPtr)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether two specified instances of <see cref="T:System.IntPtr"> are not equal.
  remarks: To be added.
  syntax:
    content: public static bool op_Inequality (IntPtr value1, IntPtr value2);
    parameters:
    - id: value1
      type: System.IntPtr
      description: The first pointer or handle to compare.
    - id: value2
      type: System.IntPtr
      description: The second pointer or handle to compare.
    return:
      type: System.Boolean
      description: '`true` if  does not equal ; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)
  id: op_Subtraction(System.IntPtr,System.Int32)
  parent: System.IntPtr
  langs:
  - csharp
  name: op_Subtraction(IntPtr,Int32)
  nameWithType: IntPtr.op_Subtraction(IntPtr,Int32)
  fullName: System.IntPtr.op_Subtraction(IntPtr,Int32)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Subtracts an offset from the value of a pointer.
  remarks: "The Subtraction method defines the subtraction operation for <xref:System.IntPtr> objects. It enables code such as the following.  \n  \n [!CODE [System.IntPtr.op_Addition#2](../../add/codesnippet/system.intptr.md)]  \n  \n Languages that do not support custom operators can call the <xref:System.IntPtr.Subtract%2A> method instead.  \n  \n The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context."
  syntax:
    content: public static IntPtr op_Subtraction (IntPtr pointer, int offset);
    parameters:
    - id: pointer
      type: System.IntPtr
      description: The pointer to subtract the offset from.
    - id: offset
      type: System.Int32
      description: The offset to subtract.
    return:
      type: System.IntPtr
      description: A new pointer that reflects the subtraction of  from .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.Size
  id: Size
  parent: System.IntPtr
  langs:
  - csharp
  name: Size
  nameWithType: IntPtr.Size
  fullName: System.IntPtr.Size
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the size of this instance.
  remarks: To be added.
  syntax:
    content: public static int Size { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.Subtract(System.IntPtr,System.Int32)
  id: Subtract(System.IntPtr,System.Int32)
  parent: System.IntPtr
  langs:
  - csharp
  name: Subtract(IntPtr,Int32)
  nameWithType: IntPtr.Subtract(IntPtr,Int32)
  fullName: System.IntPtr.Subtract(IntPtr,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Subtracts an offset from the value of a pointer.
  remarks: "The Subtract method does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, the subtraction operation is performed in an unchecked context.  \n  \n Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of a pointer."
  example:
  - "The following example instantiates an <xref:System.IntPtr> object that points to the end of a ten-element array, and then calls the Subtract method to iterate the elements in the array in reverse order.  \n  \n [!CODE [System.IntPtr.Subtract#1](../../add/codesnippet/system.intptr.md)]"
  syntax:
    content: public static IntPtr Subtract (IntPtr pointer, int offset);
    parameters:
    - id: pointer
      type: System.IntPtr
      description: The pointer to subtract the offset from.
    - id: offset
      type: System.Int32
      description: The offset to subtract.
    return:
      type: System.IntPtr
      description: A new pointer that reflects the subtraction of  from .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.IntPtr
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: IntPtr.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.IntPtr.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"> object with the data needed to serialize the current <xref:System.IntPtr> object.
  remarks: This  method populates the  parameter with the value of the current <xref:System.IntPtr> object.
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <see cref="T:System.Runtime.Serialization.SerializationInfo"> object to populate with data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination for this serialization. (This parameter is not used; specify `null`.)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.ToInt32
  id: ToInt32
  parent: System.IntPtr
  langs:
  - csharp
  name: ToInt32()
  nameWithType: IntPtr.ToInt32()
  fullName: System.IntPtr.ToInt32()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of this instance to a 32-bit signed integer.
  remarks: To be added.
  syntax:
    content: public int ToInt32 ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer equal to the value of this instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.ToInt64
  id: ToInt64
  parent: System.IntPtr
  langs:
  - csharp
  name: ToInt64()
  nameWithType: IntPtr.ToInt64()
  fullName: System.IntPtr.ToInt64()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of this instance to a 64-bit signed integer.
  remarks: To be added.
  syntax:
    content: public long ToInt64 ();
    parameters: []
    return:
      type: System.Int64
      description: A 64-bit signed integer equal to the value of this instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.ToPointer
  id: ToPointer
  parent: System.IntPtr
  langs:
  - csharp
  name: ToPointer()
  nameWithType: IntPtr.ToPointer()
  fullName: System.IntPtr.ToPointer()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of this instance to a pointer to an unspecified type.
  remarks: ''
  example:
  - "The following example uses managed pointers to reverse the characters in an array. After it initializes a <xref:System.String> object and gets its length, it does the following:  \n  \n-   Calls the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> method to copy the Unicode string to unmanaged memory as ANSI (one-byte) characters. The method returns an <xref:System.IntPtr> object that points to the beginning of the unmanaged string.  \n  \n-   Calls the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName> method to allocate the same number of bytes as the unmanaged string occupies. The method returns an <xref:System.IntPtr> object that points to the beginning of the unmanaged block of memory.  \n  \n-   Calls the ToPointer method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and adds one less than the length of the string to the starting address of the ANSI string. Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.  \n  \n-   Uses a loop to copy each character from the string to the unmanaged block of memory. After each copy operation, it decrements the pointer to the address of the next location in the unmanaged ANSI string and increments the pointer to the next address in the unmanaged block.  \n  \n-   Calls the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <xref:System.String> object.  \n  \n-   After displaying the original and reversed strings, calls the <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=fullName> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.  \n  \n [!CODE [System.IntPtr.ToPointer#1](../CodeSnippet/VS_Snippets_CLR_System/System.IntPtr.ToPointer#1)]"
  syntax:
    content: public void* ToPointer ();
    parameters: []
    return:
      type: System.Void*
      description: A pointer to <see cref="T:System.Void">; that is, a pointer to memory containing data of an unspecified type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.ToString
  id: ToString
  parent: System.IntPtr
  langs:
  - csharp
  name: ToString()
  nameWithType: IntPtr.ToString()
  fullName: System.IntPtr.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of the current <see cref="T:System.IntPtr"> object to its equivalent string representation.
  remarks: If the value of the <xref:System.IntPtr.Size%2A> property for this instance is 4, then this method is equivalent to <xref:System.Int32.ToString%2A?displayProperty=fullName>; otherwise, this method is equivalent to <xref:System.Int64.ToString%2A?displayProperty=fullName>.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of the value of this instance.
  overload: System.IntPtr.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.ToString(System.String)
  id: ToString(System.String)
  parent: System.IntPtr
  langs:
  - csharp
  name: ToString(String)
  nameWithType: IntPtr.ToString(String)
  fullName: System.IntPtr.ToString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of the current <see cref="T:System.IntPtr"> object to its equivalent string representation.
  remarks: "If the  parameter is `null` or an empty string (\"\"), the return value is formatted with the general format specifier (\"G\"). For more information about numeric format specifiers, see the [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) topic.  \n  \n The return value is formatted using the invariant culture."
  syntax:
    content: public string ToString (string format);
    parameters:
    - id: format
      type: System.String
      description: A format specification that governs how the current <see cref="T:System.IntPtr"> object is converted.
    return:
      type: System.String
      description: The string representation of the value of the current <see cref="T:System.IntPtr"> object.
  overload: System.IntPtr.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IntPtr.Zero
  id: Zero
  parent: System.IntPtr
  langs:
  - csharp
  name: Zero
  nameWithType: IntPtr.Zero
  fullName: System.IntPtr.Zero
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: A read-only field that represents a pointer or handle that has been initialized to zero.
  remarks: "The value of this field is not equivalent to `null`. Use this field to efficiently determine whether an instance of <xref:System.IntPtr> has been set to a value other than zero.  \n  \n For example, assume the variable, ip, is an instance of <xref:System.IntPtr>. You can determine if it has been set by comparing it to the value returned by a constructor, for example: \" `if ip != new IntPtr(0)...` \". However, invoking a constructor to get an unintialized pointer is inefficient. It is better to code either \" `if ip != IntPtr.Zero...` \", or \" `if !IntPtr.Zero.Equals(ip)...` \".  \n  \n When calling the Windows API from managed code, you can pass Zero instead of `null` if an argument is expected to be either a pointer or a `null`. For example, the following call to the Windows `CreateFile` function supplies Zero for the  and  argument values.  \n  \n [!CODE [System.IntPtr.Zero#2](../../add/codesnippet/system.intptr.md)]  \n  \n> [!NOTE]\n>  Although Zero is equivalent to `null` for Windows API functions with parameters or return values that can be either pointers or `null`, Zero is not equivalent to `null`. Passing `null` to the `IntPtr.Zero.Equals` method always returns `false`.  \n  \n You can also test for a `null` return value from Windows API function calls that return either a pointer or a `null` by comparing the returned value with Zero. For example, the call to the `GetWindow` function in the following example tries to retrieve the handle of a non-existent window. If it were called from unmanaged code, the function would return `null`, but when it is called from managed code, it returns Zero.  \n  \n [!CODE [System.IntPtr.Zero#1](../../add/codesnippet/system.intptr.md)]"
  syntax:
    content: public static readonly IntPtr Zero;
    return:
      type: System.IntPtr
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.IntPtr.#ctor(System.Int32)
  parent: System.IntPtr
  isExternal: false
  name: IntPtr(Int32)
  nameWithType: IntPtr.IntPtr(Int32)
  fullName: System.IntPtr.IntPtr(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr.#ctor(System.Int64)
  parent: System.IntPtr
  isExternal: false
  name: IntPtr(Int64)
  nameWithType: IntPtr.IntPtr(Int64)
  fullName: System.IntPtr.IntPtr(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IntPtr.#ctor(System.Void*)
  parent: System.IntPtr
  isExternal: false
  name: IntPtr(Void*)
  nameWithType: IntPtr.IntPtr(Void*)
  fullName: System.IntPtr.IntPtr(Void*)
- uid: System.IntPtr.Add(System.IntPtr,System.Int32)
  parent: System.IntPtr
  isExternal: false
  name: Add(IntPtr,Int32)
  nameWithType: IntPtr.Add(IntPtr,Int32)
  fullName: System.IntPtr.Add(IntPtr,Int32)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr.Equals(System.Object)
  parent: System.IntPtr
  isExternal: false
  name: Equals(Object)
  nameWithType: IntPtr.Equals(Object)
  fullName: System.IntPtr.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IntPtr.GetHashCode
  parent: System.IntPtr
  isExternal: false
  name: GetHashCode()
  nameWithType: IntPtr.GetHashCode()
  fullName: System.IntPtr.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr.op_Addition(System.IntPtr,System.Int32)
  parent: System.IntPtr
  isExternal: false
  name: op_Addition(IntPtr,Int32)
  nameWithType: IntPtr.op_Addition(IntPtr,Int32)
  fullName: System.IntPtr.op_Addition(IntPtr,Int32)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)
  parent: System.IntPtr
  isExternal: false
  name: op_Equality(IntPtr,IntPtr)
  nameWithType: IntPtr.op_Equality(IntPtr,IntPtr)
  fullName: System.IntPtr.op_Equality(IntPtr,IntPtr)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr.op_Explicit(System.Int32 to System.IntPtr)
  parent: System.IntPtr
  isExternal: false
  name: op_Explicit(Int32)
  nameWithType: IntPtr.op_Explicit(Int32)
  fullName: System.IntPtr.op_Explicit(Int32)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr.op_Explicit(System.Int64 to System.IntPtr)
  parent: System.IntPtr
  isExternal: false
  name: op_Explicit(Int64)
  nameWithType: IntPtr.op_Explicit(Int64)
  fullName: System.IntPtr.op_Explicit(Int64)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Int32)
  parent: System.IntPtr
  isExternal: false
  name: op_Explicit(IntPtr)
  nameWithType: IntPtr.op_Explicit(IntPtr)
  fullName: System.IntPtr.op_Explicit(IntPtr)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Int64)
  parent: System.IntPtr
  isExternal: false
  name: op_Explicit(IntPtr)
  nameWithType: IntPtr.op_Explicit(IntPtr)
  fullName: System.IntPtr.op_Explicit(IntPtr)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Void*)
  parent: System.IntPtr
  isExternal: false
  name: op_Explicit(IntPtr)
  nameWithType: IntPtr.op_Explicit(IntPtr)
  fullName: System.IntPtr.op_Explicit(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr.op_Explicit(System.Void* to System.IntPtr)
  parent: System.IntPtr
  isExternal: false
  name: op_Explicit(Void*)
  nameWithType: IntPtr.op_Explicit(Void*)
  fullName: System.IntPtr.op_Explicit(Void*)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)
  parent: System.IntPtr
  isExternal: false
  name: op_Inequality(IntPtr,IntPtr)
  nameWithType: IntPtr.op_Inequality(IntPtr,IntPtr)
  fullName: System.IntPtr.op_Inequality(IntPtr,IntPtr)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)
  parent: System.IntPtr
  isExternal: false
  name: op_Subtraction(IntPtr,Int32)
  nameWithType: IntPtr.op_Subtraction(IntPtr,Int32)
  fullName: System.IntPtr.op_Subtraction(IntPtr,Int32)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr.Size
  parent: System.IntPtr
  isExternal: false
  name: Size
  nameWithType: IntPtr.Size
  fullName: System.IntPtr.Size
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr.Subtract(System.IntPtr,System.Int32)
  parent: System.IntPtr
  isExternal: false
  name: Subtract(IntPtr,Int32)
  nameWithType: IntPtr.Subtract(IntPtr,Int32)
  fullName: System.IntPtr.Subtract(IntPtr,Int32)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.IntPtr
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: IntPtr.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.IntPtr.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.IntPtr.ToInt32
  parent: System.IntPtr
  isExternal: false
  name: ToInt32()
  nameWithType: IntPtr.ToInt32()
  fullName: System.IntPtr.ToInt32()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr.ToInt64
  parent: System.IntPtr
  isExternal: false
  name: ToInt64()
  nameWithType: IntPtr.ToInt64()
  fullName: System.IntPtr.ToInt64()
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IntPtr.ToPointer
  parent: System.IntPtr
  isExternal: false
  name: ToPointer()
  nameWithType: IntPtr.ToPointer()
  fullName: System.IntPtr.ToPointer()
- uid: System.IntPtr.ToString
  parent: System.IntPtr
  isExternal: false
  name: ToString()
  nameWithType: IntPtr.ToString()
  fullName: System.IntPtr.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IntPtr.ToString(System.String)
  parent: System.IntPtr
  isExternal: false
  name: ToString(String)
  nameWithType: IntPtr.ToString(String)
  fullName: System.IntPtr.ToString(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IntPtr.Zero
  parent: System.IntPtr
  isExternal: false
  name: Zero
  nameWithType: IntPtr.Zero
  fullName: System.IntPtr.Zero
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr.ToString*
  parent: System.IntPtr
  isExternal: false
  nameWithType: IntPtr.
