### YamlMime:ManagedReference
items:
- uid: System.Char
  id: Char
  children:
  - System.Char.CompareTo(System.Char)
  - System.Char.CompareTo(System.Object)
  - System.Char.ConvertFromUtf32(System.Int32)
  - System.Char.ConvertToUtf32(System.Char,System.Char)
  - System.Char.ConvertToUtf32(System.String,System.Int32)
  - System.Char.Equals(System.Char)
  - System.Char.Equals(System.Object)
  - System.Char.GetHashCode
  - System.Char.GetNumericValue(System.Char)
  - System.Char.GetNumericValue(System.String,System.Int32)
  - System.Char.GetTypeCode
  - System.Char.GetUnicodeCategory(System.Char)
  - System.Char.GetUnicodeCategory(System.String,System.Int32)
  - System.Char.IsControl(System.Char)
  - System.Char.IsControl(System.String,System.Int32)
  - System.Char.IsDigit(System.Char)
  - System.Char.IsDigit(System.String,System.Int32)
  - System.Char.IsHighSurrogate(System.Char)
  - System.Char.IsHighSurrogate(System.String,System.Int32)
  - System.Char.IsLetter(System.Char)
  - System.Char.IsLetter(System.String,System.Int32)
  - System.Char.IsLetterOrDigit(System.Char)
  - System.Char.IsLetterOrDigit(System.String,System.Int32)
  - System.Char.IsLower(System.Char)
  - System.Char.IsLower(System.String,System.Int32)
  - System.Char.IsLowSurrogate(System.Char)
  - System.Char.IsLowSurrogate(System.String,System.Int32)
  - System.Char.IsNumber(System.Char)
  - System.Char.IsNumber(System.String,System.Int32)
  - System.Char.IsPunctuation(System.Char)
  - System.Char.IsPunctuation(System.String,System.Int32)
  - System.Char.IsSeparator(System.Char)
  - System.Char.IsSeparator(System.String,System.Int32)
  - System.Char.IsSurrogate(System.Char)
  - System.Char.IsSurrogate(System.String,System.Int32)
  - System.Char.IsSurrogatePair(System.Char,System.Char)
  - System.Char.IsSurrogatePair(System.String,System.Int32)
  - System.Char.IsSymbol(System.Char)
  - System.Char.IsSymbol(System.String,System.Int32)
  - System.Char.IsUpper(System.Char)
  - System.Char.IsUpper(System.String,System.Int32)
  - System.Char.IsWhiteSpace(System.Char)
  - System.Char.IsWhiteSpace(System.String,System.Int32)
  - System.Char.MaxValue
  - System.Char.MinValue
  - System.Char.Parse(System.String)
  - System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.Char.System#IConvertible#ToByte(System.IFormatProvider)
  - System.Char.System#IConvertible#ToChar(System.IFormatProvider)
  - System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.Char.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.Char.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.Char.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.Char.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.Char.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.Char.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.Char.ToLower(System.Char)
  - System.Char.ToLower(System.Char,System.Globalization.CultureInfo)
  - System.Char.ToLowerInvariant(System.Char)
  - System.Char.ToString
  - System.Char.ToString(System.Char)
  - System.Char.ToString(System.IFormatProvider)
  - System.Char.ToUpper(System.Char)
  - System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)
  - System.Char.ToUpperInvariant(System.Char)
  - System.Char.TryParse(System.String,System.Char@)
  langs:
  - csharp
  name: Char
  nameWithType: Char
  fullName: System.Char
  type: Struct
  summary: Represents a character as a UTF-16 code unit.
  remarks: "The [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)] uses the Char structure to represent a Unicode character. The Unicode Standard identifies each Unicode character with a unique 21-bit scalar number called a code point, and defines the UTF-16 encoding form that specifies how a code point is encoded into a sequence of one or more 16-bit values. Each 16-bit value ranges from hexadecimal 0x0000 through 0xFFFF and is stored in a Char structure.  The value of a Char object is its 16-bit numeric (ordinal) value.  \n  \n The following sections examine the relationship between a Char object and a character and discuss some common tasks performed with Char instances.  \n  \n [Char objects, Unicode characters, and strings](#Relationship)   \n [Characters and character categories](#Categories)   \n [Characters and text elements](#Elements)   \n [Common operations](#Operations)   \n [Char values and interop](#Interop)  \n  \n<a name=\"Relationship\"></a>   \n## Char objects, Unicode characters, and strings  \n A <xref:System.String> object is a sequential collection of Char structures that represents a string of text. Most Unicode characters can be represented by a single Char object, but a character that is encoded as a base character, surrogate pair, and/or combining character sequence is represented by multiple Char objects. For this reason, a Char structure in a <xref:System.String> object is not necessarily equivalent to a single Unicode character.  \n  \n Multiple 16-bit code units are used to represent single Unicode characters in the following cases:  \n  \n-   Glyphs, which may consist of a single character or of a base character followed by one or more combining characters. For example, the character ä is represented by a Char object whose code unit is U+0061 followed by a Char object whose code unit is U+0308. (The character ä can also be defined by a single Char object that has a code unit of U+00E4.) The following example illustrates that the character ä consists of two Char objects.  \n  \n     [!CODE [System.Char.Class#1](../CodeSnippet/VS_Snippets_CLR_System/system.char.class#1)]  \n  \n-   Characters outside the Unicode Basic Multilingual Plane (BMP). Unicode supports sixteen planes in addition to the BMP, which represents plane 0. A Unicode code point is represented in UTF-32 by a 21-bit value that includes the plane. For example, U+1D160 represents the MUSICAL SYMBOL EIGHTH NOTE character. Because UTF-16 encoding has only 16 bits, characters outside the BMP are represented by surrogate pairs in UTF-16. The following example illustrates that the UTF-32 equivalent of U+1D160, the MUSICAL SYMBOL EIGHTH NOTE character, is U+D834 U+DD60. U+D834 is the high surrogate; high surrogates range from U+D800 through U+DBFF. U+DD60 is the low surrogate; low surrogates range from U+DC00 through U+DFFF.  \n  \n     [!CODE [System.Char.Class#2](../CodeSnippet/VS_Snippets_CLR_System/system.char.class#2)]  \n  \n<a name=\"Categories\"></a>   \n## Characters and character categories  \n Each Unicode character or valid surrogate pair belongs to a Unicode category. In the .NET Framework, Unicode categories are represented by members of the <xref:System.Globalization.UnicodeCategory> enumeration and include values such as <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, and <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, for example.  \n  \n To determine the Unicode category of a character, you call the <xref:System.Char.GetUnicodeCategory%2A> method. For example, the following example calls the <xref:System.Char.GetUnicodeCategory%2A> to display the Unicode category of each character in a string.  \n  \n [!CODE [System.Char.Class#6](../CodeSnippet/VS_Snippets_CLR_System/system.char.class#6)]  \n  \n Internally, for characters outside the ASCII range (U+0000 through U+00FF), the <xref:System.Char.GetUnicodeCategory%2A> method depends on Unicode categories reported by the <xref:System.Globalization.CharUnicodeInfo> class. Starting with the [!INCLUDE[net_v462](../../add/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/). In versions of the .NET Framework from the [!INCLUDE[net_v40_long](../../add/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](../../add/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/).  \n  \n<a name=\"Elements\"></a>   \n## Characters and text elements  \n Because a single character can be represented by multiple Char objects, it is not always meaningful to work with individual Char objects. For instance, the following example converts the Unicode code points that represent the Aegean numbers zero through 9 to UTF-16 encoded code units. Because it erroneously equates Char objects with characters, it inaccurately reports that the resulting string has 20 characters.  \n  \n [!CODE [System.Char.Class#3](../CodeSnippet/VS_Snippets_CLR_System/system.char.class#3)]  \n  \n You can do the following to avoid the assumption that a Char object represents a single character.  \n  \n-   You can work with a <xref:System.String> object in its entirety instead of working with its individual characters to represent and analyze linguistic content.  \n  \n-   You can use the <xref:System.Globalization.StringInfo> class to work with text elements instead of individual Char objects. The following example uses the <xref:System.Globalization.StringInfo> object to count the number of text elements in a string that consists of the Aegean numbers zero through nine. Because it considers a surrogate pair a single character, it correctly reports that the string contains ten characters.  \n  \n     [!CODE [System.Char.Class#4](../CodeSnippet/VS_Snippets_CLR_System/system.char.class#4)]  \n  \n-   If a string contains a base character that has one or more combining characters, you can call the <xref:System.String.Normalize%2A?displayProperty=fullName> method to convert the substring to a single UTF-16 encoded code unit. The following example calls the <xref:System.String.Normalize%2A?displayProperty=fullName> method to convert the base character U+0061 (LATIN SMALL LETTER A) and combining character U+0308 (COMBINING DIAERESIS) to U+00E4 (LATIN SMALL LETTER A WITH DIAERESIS).  \n  \n     [!CODE [System.Char.Class#5](../CodeSnippet/VS_Snippets_CLR_System/system.char.class#5)]  \n  \n<a name=\"Operations\"></a>   \n## Common operations  \n The Char structure provides methods to compare Char objects, convert the value of the current Char object to an object of another type, and determine the Unicode category of a Char object:  \n  \n|To do this|Use these `System.Char` methods|  \n|----------------|-------------------------------------|  \n|Compare Char objects|<xref:System.Char.CompareTo%2A> and <xref:System.Char.Equals%2A>|  \n|Convert a code point to a string|<xref:System.Char.ConvertFromUtf32%2A>|  \n|Convert a Char object or a surrogate pair of Char objects to a code point|For a single character: <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=fullName><br /><br /> For a surrogate pair or a character in a string: <xref:System.Char.ConvertToUtf32%2A?displayProperty=fullName>|  \n|Get the Unicode category of a character|<xref:System.Char.GetUnicodeCategory%2A>|  \n|Determine whether a character is in a particular Unicode category such as digit, letter, punctuation, control character, and so on|<xref:System.Char.IsControl%2A>, <xref:System.Char.IsDigit%2A>, <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLetter%2A>, <xref:System.Char.IsLetterOrDigit%2A>, <xref:System.Char.IsLower%2A>, <xref:System.Char.IsLowSurrogate%2A>, <xref:System.Char.IsNumber%2A>, <xref:System.Char.IsPunctuation%2A>, <xref:System.Char.IsSeparator%2A>, <xref:System.Char.IsSurrogate%2A>, <xref:System.Char.IsSurrogatePair%2A>, <xref:System.Char.IsSymbol%2A>, <xref:System.Char.IsUpper%2A>, and <xref:System.Char.IsWhiteSpace%2A>|  \n|Convert a Char object that represents a number to a numeric value type|<xref:System.Char.GetNumericValue%2A>|  \n|Convert a character in a string into a Char object|<xref:System.Char.Parse%2A> and <xref:System.Char.TryParse%2A>|  \n|Convert a Char object to a <xref:System.String> object|<xref:System.Char.ToString%2A>|  \n|Change the case of a Char object|<xref:System.Char.ToLower%2A>, <xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A>, and <xref:System.Char.ToUpperInvariant%2A>|  \n  \n<a name=\"Interop\"></a>   \n## Char values and interop  \n When a managed Char type, which is represented as a Unicode UTF-8 encoded code unit, is passed to unmanaged code, the interop marshaler converts the character set to ANSI. You can apply the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to platform invoke declarations and the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to a COM interop declaration to control which character set a marshaled Char type uses."
  example:
  - "The following code example demonstrates some of the methods in Char.  \n  \n [!CODE [System.Char [Type Level]#23](../CodeSnippet/VS_Snippets_CLR_System/system.Char [Type Level]#23)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public struct Char : IComparable, IComparable<char>, IConvertible, IEquatable<char>
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IComparable
  - System.IComparable<System.Char>
  - System.IConvertible
  - System.IEquatable<System.Char>
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.CompareTo(System.Char)
  id: CompareTo(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: CompareTo(Char)
  nameWithType: Char.CompareTo(Char)
  fullName: System.Char.CompareTo(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares this instance to a specified <see cref="T:System.Char"> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Char"> object.
  remarks: "This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface and performs slightly better than the <xref:System.Char.CompareTo%2A?displayProperty=fullName> method because it does not have to convert the  parameter to an object.  \n  \n The comparison performed by this method is based on the encoded values of this instance and , not their lexicographical characteristics.  \n  \n If the <xref:System.Char.CompareTo%2A> method parameter type has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.  \n  \n For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32> object, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=fullName> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.  \n  \n Typically, implicit widening conversions are performed on numeric types. Consult your programming language's documentation to determine if its compiler performs widening conversions. If the instance and parameter types mismatch and a suitable conversion is not available, the compiler generates instructions to box the parameter and invoke the <xref:System.Char.CompareTo%2A> overload that takes an <xref:System.Object> parameter."
  example:
  - "The following code example demonstrates generic and non-generic versions of the `CompareTo` method for several value and reference types.  \n  \n [!CODE [T.CompareTo#1](../CodeSnippet/VS_Snippets_CLR/T.CompareTo#1)]"
  syntax:
    content: public int CompareTo (char value);
    parameters:
    - id: value
      type: System.Char
      description: A <see cref="T:System.Char"> object to compare.
    return:
      type: System.Int32
      description: "A signed number indicating the position of this instance in the sort order in relation to the  parameter.  \n  \n|Return Value|Description|  \n|------------------|-----------------|  \n|Less than zero|This instance precedes .|  \n|Zero|This instance has the same position in the sort order as .|  \n|Greater than zero|This instance follows .|"
  overload: System.Char.CompareTo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.Char
  langs:
  - csharp
  name: CompareTo(Object)
  nameWithType: Char.CompareTo(Object)
  fullName: System.Char.CompareTo(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object">.
  remarks: "The CompareTo method implements the <xref:System.IComparable> interface.  \n  \n The  parameter must be `null` or an instance of <xref:System.Char>; otherwise, an exception is thrown.  \n  \n The comparison performed by this method is based on the encoded values of this instance and , not necessarily their lexicographical characteristics. Any instance of <xref:System.Char>, regardless of its value, is considered greater than `null`."
  example:
  - "The following code example demonstrates CompareTo.  \n  \n [!CODE [System.Char.CompareTo#19](../CodeSnippet/VS_Snippets_CLR_System/system.Char.CompareTo#19)]"
  syntax:
    content: public int CompareTo (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object to compare this instance to, or `null`.
    return:
      type: System.Int32
      description: "A signed number indicating the position of this instance in the sort order in relation to the  parameter.  \n  \n|Return Value|Description|  \n|------------------|-----------------|  \n|Less than zero|This instance precedes .|  \n|Zero|This instance has the same position in the sort order as .|  \n|Greater than zero|This instance follows .<br /><br /> -or-<br /><br /> is `null`.|"
  overload: System.Char.CompareTo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ConvertFromUtf32(System.Int32)
  id: ConvertFromUtf32(System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: ConvertFromUtf32(Int32)
  nameWithType: Char.ConvertFromUtf32(Int32)
  fullName: System.Char.ConvertFromUtf32(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the specified Unicode code point into a UTF-16 encoded string.
  remarks: "Use this method to convert a 21-bit Unicode code point to a UTF-16 encoded string before testing the string with methods such as <xref:System.Char.IsLowSurrogate%28System.Char%29> and <xref:System.Char.IsHighSurrogate%28System.Char%29>.  \n  \n A valid code point outside the Basic Multilingual Plane (BMP) always yields a valid surrogate pair. However, a valid code point within the BMP might not yield a valid result according to the Unicode standard because no linguistic processing is used in the conversion. For that reason, use the <xref:System.Text.UTF32Encoding?displayProperty=fullName> class to convert bulk UTF-32 data into bulk UTF-16 data."
  example:
  - "The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and ConvertFromUtf32 methods.  \n  \n [!CODE [char.cvtutf32#1](../CodeSnippet/VS_Snippets_CLR/char.cvtutf32#1)]"
  syntax:
    content: public static string ConvertFromUtf32 (int utf32);
    parameters:
    - id: utf32
      type: System.Int32
      description: A 21-bit Unicode code point.
    return:
      type: System.String
      description: A string consisting of one <see cref="T:System.Char"> object or a surrogate pair of <see cref="T:System.Char"> objects equivalent to the code point specified by the  parameter.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ConvertToUtf32(System.Char,System.Char)
  id: ConvertToUtf32(System.Char,System.Char)
  parent: System.Char
  langs:
  - csharp
  name: ConvertToUtf32(Char,Char)
  nameWithType: Char.ConvertToUtf32(Char,Char)
  fullName: System.Char.ConvertToUtf32(Char,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.
  remarks: "Use this method to convert a surrogate pair into a 21-bit Unicode code point. To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=fullName> class.  \n  \n Ordinarily, UTF-16 encoding represents a single Unicode character as a 16-bit code unit. However, it also supports surrogate pairs, which allow a single abstract character to be represented as two 16-bit code units. These two <xref:System.Char> objects must have code units that range from U+D800 to U+DBFF for the first (high) surrogate and from U+DC00 to U+DFFF for the second (low) surrogate. Surrogate pairs are supported only by UTF-16 encoding. This method allows a character represented by a UTF-16 surrogate pair to be converted to a character using UTF-32 encoding."
  example:
  - "The following code example demonstrates the ConvertToUtf32 and <xref:System.Char.ConvertFromUtf32%2A> methods.  \n  \n [!CODE [char.cvtutf32#1](../CodeSnippet/VS_Snippets_CLR/char.cvtutf32#1)]"
  syntax:
    content: public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);
    parameters:
    - id: highSurrogate
      type: System.Char
      description: A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).
    - id: lowSurrogate
      type: System.Char
      description: A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).
    return:
      type: System.Int32
      description: The 21-bit Unicode code point represented by the  and  parameters.
  overload: System.Char.ConvertToUtf32*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ConvertToUtf32(System.String,System.Int32)
  id: ConvertToUtf32(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: ConvertToUtf32(String,Int32)
  nameWithType: Char.ConvertToUtf32(String,Int32)
  fullName: System.Char.ConvertToUtf32(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.
  remarks: Use this method to convert a character or surrogate pair into a 21-bit Unicode code point. To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=fullName> class.
  example:
  - "The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.  \n  \n [!CODE [char.cvtutf32#1](../CodeSnippet/VS_Snippets_CLR/char.cvtutf32#1)]"
  syntax:
    content: public static int ConvertToUtf32 (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string that contains a character or surrogate pair.
    - id: index
      type: System.Int32
      description: The index position of the character or surrogate pair in .
    return:
      type: System.Int32
      description: The 21-bit Unicode code point represented by the character or surrogate pair at the position in the  parameter specified by the  parameter.
  overload: System.Char.ConvertToUtf32*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.Equals(System.Char)
  id: Equals(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: Equals(Char)
  nameWithType: Char.Equals(Char)
  fullName: System.Char.Equals(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Char"> object.
  remarks: This method implements the <xref:System.IEquatable%601?displayProperty=fullName> interface, and performs slightly better than <xref:System.Char.Equals%28System.Object%29?displayProperty=fullName> because it does not need to unbox the  parameter.
  syntax:
    content: public bool Equals (char obj);
    parameters:
    - id: obj
      type: System.Char
      description: An object to compare to this instance.
    return:
      type: System.Boolean
      description: '`true` if the  parameter equals the value of this instance; otherwise, `false`.'
  overload: System.Char.Equals*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Char
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Char.Equals(Object)
  fullName: System.Char.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  remarks: The comparison performed by this method is based on the encoded values of this instance and , not necessarily their lexicographical characteristics.
  example:
  - "The following code example demonstrates Equals.  \n  \n [!CODE [System.Char.Equals#20](../CodeSnippet/VS_Snippets_CLR_System/system.Char.Equals#20)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance or `null`.
    return:
      type: System.Boolean
      description: '`true` if  is an instance of <see cref="T:System.Char"> and equals the value of this instance; otherwise, `false`.'
  overload: System.Char.Equals*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.GetHashCode
  id: GetHashCode
  parent: System.Char
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Char.GetHashCode()
  fullName: System.Char.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for this instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.GetNumericValue(System.Char)
  id: GetNumericValue(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: GetNumericValue(Char)
  nameWithType: Char.GetNumericValue(Char)
  fullName: System.Char.GetNumericValue(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the specified numeric Unicode character to a double-precision floating point number.
  remarks: "The  parameter must be the <xref:System.Char> representation of a numeric value. For example, if  is \"5\", the return value is 5. However, if  is \"z\", the return value is -1.0.  \n  \n A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.  \n  \n The GetNumericValue method assumes that  corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit. However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the GetNumericValue method returns -1 if it is passed either a high surrogate or a low surrogate of this character.  \n  \n [!CODE [System.Char.GetNumericValue#2](../CodeSnippet/VS_Snippets_CLR_System/system.Char.GetNumericValue#2)]"
  example:
  - "The following example demonstrates GetNumericValue.  \n  \n [!CODE [System.Char.GetNumericValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Char.GetNumericValue#1)]"
  syntax:
    content: public static double GetNumericValue (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Double
      description: The numeric value of  if that character represents a number; otherwise, -1.0.
  overload: System.Char.GetNumericValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.GetNumericValue(System.String,System.Int32)
  id: GetNumericValue(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: GetNumericValue(String,Int32)
  nameWithType: Char.GetNumericValue(String,Int32)
  fullName: System.Char.GetNumericValue(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.
  remarks: "The  parameter must be the string representation of a numeric value. For example, if the character at position  in  is \"5\", the return value is 5. However, if the character at position  in  is \"z\", the return value is -1.  \n  \n Character positions in a string are indexed starting from zero.  \n  \n A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.  \n  \n If the <xref:System.Char> object at position  is the first character of a valid surrogate pair, the GetNumericValue method determines whether the surrogate pair forms a numeric digit. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number. As the output from the example shows, the GetNumericValue method returns the correct numeric value if it is passed the high surrogate of an Aegean number. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.  \n  \n [!CODE [System.Char.GetNumericValue#3](../CodeSnippet/VS_Snippets_CLR_System/system.Char.GetNumericValue#3)]"
  example:
  - "The following code example demonstrates <xref:System.Char.GetNumericValue%2A>.  \n  \n [!CODE [System.Char.GetNumericValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Char.GetNumericValue#1)]"
  syntax:
    content: public static double GetNumericValue (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A <see cref="T:System.String">.
    - id: index
      type: System.Int32
      description: The character position in .
    return:
      type: System.Double
      description: The numeric value of the character at position  in  if that character represents a number; otherwise, -1.
  overload: System.Char.GetNumericValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.GetTypeCode
  id: GetTypeCode
  parent: System.Char
  langs:
  - csharp
  name: GetTypeCode()
  nameWithType: Char.GetTypeCode()
  fullName: System.Char.GetTypeCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the <see cref="T:System.TypeCode"> for value type <xref:System.Char>.
  remarks: To be added.
  syntax:
    content: public TypeCode GetTypeCode ();
    parameters: []
    return:
      type: System.TypeCode
      description: The enumerated constant, <xref:System.TypeCode?displayProperty=fullName>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.GetUnicodeCategory(System.Char)
  id: GetUnicodeCategory(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: GetUnicodeCategory(Char)
  nameWithType: Char.GetUnicodeCategory(Char)
  fullName: System.Char.GetUnicodeCategory(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory"> values.
  remarks: "The GetUnicodeCategorymethod does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=fullName> method when it is passed a particular character as a parameter. The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard. In contrast, although the GetUnicodeCategory method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility. As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=fullName> method instead of GetUnicodeCategory.  \n  \n Starting with the [!INCLUDE[net_v462](../../add/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/). In versions of the .NET Framework from the [!INCLUDE[net_v40_long](../../add/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](../../add/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)."
  example:
  - "The following code example demonstrates GetUnicodeCategory.  \n  \n [!CODE [System.Char.GetUnicodeCategory#1](../CodeSnippet/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory#1)]"
  syntax:
    content: public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to categorize.
    return:
      type: System.Globalization.UnicodeCategory
      description: A <see cref="T:System.Globalization.UnicodeCategory"> value that identifies the group that contains .
  overload: System.Char.GetUnicodeCategory*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.GetUnicodeCategory(System.String,System.Int32)
  id: GetUnicodeCategory(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: GetUnicodeCategory(String,Int32)
  nameWithType: Char.GetUnicodeCategory(String,Int32)
  fullName: System.Char.GetUnicodeCategory(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory"> values.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n The GetUnicodeCategorymethod does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=fullName> method when it is passed a particular character as a parameter. The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard. In contrast, although the GetUnicodeCategory method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility. As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=fullName> method instead of GetUnicodeCategory.  \n  \n Starting with the [!INCLUDE[net_v462](../../add/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](http://www.unicode.org/versions/Unicode8.0.0/). In versions of the .NET Framework from the [!INCLUDE[net_v40_long](../../add/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](../../add/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](http://www.unicode.org/versions/Unicode6.3.0/)."
  example:
  - "The following example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.  \n  \n [!CODE [System.Char.GetUnicodeCategory#1](../CodeSnippet/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory#1)]"
  syntax:
    content: public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A <see cref="T:System.String">.
    - id: index
      type: System.Int32
      description: The character position in .
    return:
      type: System.Globalization.UnicodeCategory
      description: A <see cref="T:System.Globalization.UnicodeCategory"> enumerated constant that identifies the group that contains the character at position  in .
  overload: System.Char.GetUnicodeCategory*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsControl(System.Char)
  id: IsControl(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsControl(Char)
  nameWithType: Char.IsControl(Char)
  fullName: System.Char.IsControl(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as a control character.
  remarks: Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT. T The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters. According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application. Valid control characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.
  example:
  - "The following example lists the Unicode code point of each of the control characters.  \n  \n [!CODE [System.Char.IsControl#1](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsControl#1)]"
  syntax:
    content: public static bool IsControl (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is a control character; otherwise, `false`.'
  overload: System.Char.IsControl*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsControl(System.String,System.Int32)
  id: IsControl(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsControl(String,Int32)
  nameWithType: Char.IsControl(String,Int32)
  fullName: System.Char.IsControl(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as a control character.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT. The Unicode standard assigns code points from \\U0000 to \\U001F, \\U007F, and from \\U0080 to \\U009F to control characters. According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application. Valid control characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category."
  example:
  - "The following example enumerates the characters in a string and determines whether any are control characters.  \n  \n [!CODE [System.Char.IsControl#2](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsControl#2)]"
  syntax:
    content: public static bool IsControl (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is a control character; otherwise, `false`.'
  overload: System.Char.IsControl*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsDigit(System.Char)
  id: IsDigit(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsDigit(Char)
  nameWithType: Char.IsDigit(Char)
  fullName: System.Char.IsDigit(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as a decimal digit.
  remarks: "This method determines whether a <xref:System.Char> is a radix-10 digit. This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a `Char` is of any numeric Unicode category. Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.  \n  \n Valid digits are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category."
  example:
  - "The following code example demonstrates IsDigit.  \n  \n [!CODE [System.Char.IsDigit#4](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsDigit#4)]"
  syntax:
    content: public static bool IsDigit (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is a decimal digit; otherwise, `false`.'
  overload: System.Char.IsDigit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsDigit(System.String,System.Int32)
  id: IsDigit(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsDigit(String,Int32)
  nameWithType: Char.IsDigit(String,Int32)
  fullName: System.Char.IsDigit(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.
  remarks: "This method determines whether a <xref:System.Char> is a radix-10 digit. This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a <xref:System.Char> is of any numeric Unicode category. Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.  \n  \n Character positions in a string are indexed starting from zero.  \n  \n Valid digits are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category."
  example:
  - "The following code example demonstrates <xref:System.Char.IsDigit%2A>.  \n  \n [!CODE [System.Char.IsDigit#4](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsDigit#4)]"
  syntax:
    content: public static bool IsDigit (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is a decimal digit; otherwise, `false`.'
  overload: System.Char.IsDigit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsHighSurrogate(System.Char)
  id: IsHighSurrogate(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsHighSurrogate(Char)
  nameWithType: Char.IsHighSurrogate(Char)
  fullName: System.Char.IsHighSurrogate(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified <see cref="T:System.Char"> object is a high surrogate.
  remarks: In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The first element in this pair is the high surrogate. Its code point can range from U+D800 to U+DBFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.
  example:
  - "The following code example demonstrates the IsHighSurrogate, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.  \n  \n [!CODE [char.surrogate#1](../CodeSnippet/VS_Snippets_CLR/char.surrogate#1)]"
  syntax:
    content: public static bool IsHighSurrogate (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if the numeric value of the  parameter ranges from U+D800 through U+DBFF; otherwise, `false`.'
  overload: System.Char.IsHighSurrogate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsHighSurrogate(System.String,System.Int32)
  id: IsHighSurrogate(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsHighSurrogate(String,Int32)
  nameWithType: Char.IsHighSurrogate(String,Int32)
  fullName: System.Char.IsHighSurrogate(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the <see cref="T:System.Char"> object at the specified position in a string is a high surrogate.
  remarks: "The  parameter is zero-based.  \n  \n In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The first element in this pair is the high surrogate. Its code point can range from U+D800 to U+DBFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair."
  example:
  - "The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.  \n  \n [!CODE [char.surrogate#1](../CodeSnippet/VS_Snippets_CLR/char.surrogate#1)]"
  syntax:
    content: public static bool IsHighSurrogate (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the numeric value of the specified character in the  parameter ranges from U+D800 through U+DBFF; otherwise, `false`.'
  overload: System.Char.IsHighSurrogate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsLetter(System.Char)
  id: IsLetter(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsLetter(Char)
  nameWithType: Char.IsLetter(Char)
  fullName: System.Char.IsLetter(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as a Unicode letter.
  remarks: "This method determines whether a <xref:System.Char> is a member of any category of Unicode letter. Unicode letters include the following:  \n  \n-   Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA). These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n-   Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS). These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n-   Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI). These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n-   Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI). These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n-   Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\\<CJK Ideograph, First>) through U+9FC3 (\\<CJK Ideograph, Last>). These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category."
  example:
  - "The following code example demonstrates IsLetter.  \n  \n [!CODE [System.Char.IsLetter#5](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsLetter#5)]"
  syntax:
    content: public static bool IsLetter (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is a letter; otherwise, `false`.'
  overload: System.Char.IsLetter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsLetter(System.String,System.Int32)
  id: IsLetter(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsLetter(String,Int32)
  nameWithType: Char.IsLetter(String,Int32)
  fullName: System.Char.IsLetter(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n This method determines whether the character at a specified index position in a string is a member of any category of Unicode letter. Unicode letters include the following:  \n  \n-   Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA). These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n-   Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS). These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n-   Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI). These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n-   Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI). These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n-   Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\\<CJK Ideograph, First>) through U+9FC3 (\\<CJK Ideograph, Last>). These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category."
  example:
  - "The following code example demonstrates <xref:System.Char.IsLetter%2A>.  \n  \n [!CODE [System.Char.IsLetter#5](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsLetter#5)]"
  syntax:
    content: public static bool IsLetter (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is a letter; otherwise, `false`.'
  overload: System.Char.IsLetter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsLetterOrDigit(System.Char)
  id: IsLetterOrDigit(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsLetterOrDigit(Char)
  nameWithType: Char.IsLetterOrDigit(Char)
  fullName: System.Char.IsLetterOrDigit(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.
  remarks: 'Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.'
  example:
  - "The following code example demonstrates IsLetterOrDigit.  \n  \n [!CODE [System.Char.IsLetterOrDigit#6](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit#6)]"
  syntax:
    content: public static bool IsLetterOrDigit (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is a letter or a decimal digit; otherwise, `false`.'
  overload: System.Char.IsLetterOrDigit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsLetterOrDigit(System.String,System.Int32)
  id: IsLetterOrDigit(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsLetterOrDigit(String,Int32)
  nameWithType: Char.IsLetterOrDigit(String,Int32)
  fullName: System.Char.IsLetterOrDigit(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`."
  example:
  - "The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.  \n  \n [!CODE [System.Char.IsLetterOrDigit#6](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit#6)]"
  syntax:
    content: public static bool IsLetterOrDigit (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is a letter or a decimal digit; otherwise, `false`.'
  overload: System.Char.IsLetterOrDigit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsLower(System.Char)
  id: IsLower(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsLower(Char)
  nameWithType: Char.IsLower(Char)
  fullName: System.Char.IsLower(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as a lowercase letter.
  remarks: 'Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.'
  example:
  - "The following code example demonstrates IsLower.  \n  \n [!CODE [System.Char.IsLower#7](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsLower#7)]"
  syntax:
    content: public static bool IsLower (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is a lowercase letter; otherwise, `false`.'
  overload: System.Char.IsLower*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsLower(System.String,System.Int32)
  id: IsLower(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsLower(String,Int32)
  nameWithType: Char.IsLower(String,Int32)
  fullName: System.Char.IsLower(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`."
  example:
  - "The following code example demonstrates <xref:System.Char.IsLower%2A>.  \n  \n [!CODE [System.Char.IsLower#7](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsLower#7)]"
  syntax:
    content: public static bool IsLower (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is a lowercase letter; otherwise, `false`.'
  overload: System.Char.IsLower*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsLowSurrogate(System.Char)
  id: IsLowSurrogate(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsLowSurrogate(Char)
  nameWithType: Char.IsLowSurrogate(Char)
  fullName: System.Char.IsLowSurrogate(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified <see cref="T:System.Char"> object is a low surrogate.
  remarks: In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The second element in this pair is the low surrogate. Its code point can range from U+DC00 to U+DFFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.
  example:
  - "The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, IsLowSurrogate, and <xref:System.Char.IsSurrogatePair%2A> methods.  \n  \n [!CODE [char.surrogate#1](../CodeSnippet/VS_Snippets_CLR/char.surrogate#1)]"
  syntax:
    content: public static bool IsLowSurrogate (char c);
    parameters:
    - id: c
      type: System.Char
      description: The character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if the numeric value of the  parameter ranges from U+DC00 through U+DFFF; otherwise, `false`.'
  overload: System.Char.IsLowSurrogate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsLowSurrogate(System.String,System.Int32)
  id: IsLowSurrogate(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsLowSurrogate(String,Int32)
  nameWithType: Char.IsLowSurrogate(String,Int32)
  fullName: System.Char.IsLowSurrogate(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the <see cref="T:System.Char"> object at the specified position in a string is a low surrogate.
  remarks: "The  parameter is zero-based.  \n  \n In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The second element in this pair is the low surrogate. Its code point can range from U+DC00 to U+DFFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair."
  example:
  - "The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.  \n  \n [!CODE [char.surrogate#1](../CodeSnippet/VS_Snippets_CLR/char.surrogate#1)]"
  syntax:
    content: public static bool IsLowSurrogate (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the numeric value of the specified character in the  parameter ranges from U+DC00 through U+DFFF; otherwise, `false`.'
  overload: System.Char.IsLowSurrogate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsNumber(System.Char)
  id: IsNumber(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsNumber(Char)
  nameWithType: Char.IsNumber(Char)
  fullName: System.Char.IsNumber(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as a number.
  remarks: "This method determines whether a <xref:System.Char> is of any numeric Unicode category. In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers. This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.  \n  \n> [!IMPORTANT]\n>  The IsNumber method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string). To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=fullName> or <xref:System.Double.TryParse%2A?displayProperty=fullName> of an integral or floating point type.  \n  \n Valid numbers are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, or <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n The IsNumber method assumes that  corresponds to a single linguistic character and checks whether that character represents a number. However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the IsNumber method returns `false` if it is passed either a high surrogate or a low surrogate of this character.  \n  \n [!CODE [System.Char.IsNumber#1](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsNumber#1)]"
  example:
  - "The following example demonstrates IsNumber.  \n  \n [!CODE [System.Char.IsNumber#8](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsNumber#8)]"
  syntax:
    content: public static bool IsNumber (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is a number; otherwise, `false`.'
  overload: System.Char.IsNumber*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsNumber(System.String,System.Int32)
  id: IsNumber(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsNumber(String,Int32)
  nameWithType: Char.IsNumber(String,Int32)
  fullName: System.Char.IsNumber(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as a number.
  remarks: "This method determines whether a <xref:System.Char> is of any numeric Unicode category. In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers. This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.  \n  \n Character positions in a string are indexed starting from zero.  \n  \n> [!IMPORTANT]\n>  The IsNumber method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string). To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=fullName> or <xref:System.Double.TryParse%2A?displayProperty=fullName> of an integral or floating point type.  \n  \n Valid numbers are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, or <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n If the <xref:System.Char> object at position  is the first character of a valid surrogate pair, the IsNumber method determines whether the surrogate pair forms a numeric digit. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the IsNumber method returns `true` if it is passed the high surrogate of AEGEAN NUMBER ONE. However, if it is passed the low surrogate, it considers only the category of the low surrogate and returns `false`.  \n  \n [!CODE [System.Char.IsNumber#2](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsNumber#2)]"
  example:
  - "The following example demonstrates <xref:System.Char.IsNumber%2A>.  \n  \n [!CODE [System.Char.IsNumber#8](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsNumber#8)]"
  syntax:
    content: public static bool IsNumber (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is a number; otherwise, `false`.'
  overload: System.Char.IsNumber*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsPunctuation(System.Char)
  id: IsPunctuation(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsPunctuation(Char)
  nameWithType: Char.IsPunctuation(Char)
  fullName: System.Char.IsPunctuation(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as a punctuation mark.
  remarks: "Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`. They include characters with the Unicode code points listed in the following table.  \n  \n|||||  \n|-|-|-|-|  \n|U+0021 to U+0023|U+060C and U+060D|U+1800 to U+180A|U+3014 to U+301F|  \n|U+0025 to U+002A|U+061B|U+1944 and U+1945|U+3030|  \n|U+002C to U+002F|U+061E and U+061F|U+19DE and U+19DF|U+303D|  \n|U+003A and U+003B|U+066A to U+066D|U+1A1E and U+1A1F|U+30A0|  \n|U+003F and U+0040|U+06D4|U+1B5A to U+1B60|U+30FB|  \n|U+005B to U+005D|U+0700 to U+070D|U+2010 to U+2027|U+A874 to U+A877|  \n|U+005F|U+07F7 to U+07F9|U+2030 to U+2043|U+FD3E and U+FD3F|  \n|U+007B|U+0964 and U+0965|U+2045 to U+2051|U+FE10 to U+FE19|  \n|U+007D|U+0970|U+2053 to U+205E|U+FE30 to U+FE52|  \n|U+00A1|U+0DF4|U+207D and  U+207E|U+FE54 to U+FE61|  \n|U+00AB|U+0E4F to U+0E5B|U+208D and U+208E|U+FE63|  \n|U+00AD|U+0F04 to U+0F12|U+2329 and U+232A|U+FE68|  \n|U+00B7|U+0F3A to U+0F3D|U+2768 to U+2775|U+FE6A and U+FE6B|  \n|U+00BB|U+0F85|U+27C5 to U+27C6|U+FF01 to U+FF03|  \n|U+00BF|U+0FD0 and U+0FD1|U+27E6 to U+27EB|U+FF05 to U+FF0A|  \n|U+037E|U+104A to U+104F|U+2983 to U+2998|U+FF0C to U+FF0F|  \n|U+0387|U+10FB|U+29D8 to U+29DB|U+FF1A and U+FF1B|  \n|U+055A to U+055F|U+1361 to U+1368|U+29FC and U+29FD|U+FF1F and U+FF20|  \n|U+0589 and U+058A|U+166D and U+166E|U+2CF9 to U+2CFC|U+FF3B to U+FF3D|  \n|U+05BE|U+169B and U+169C|U+2CFE and U+2CFF|U+FF3F|  \n|U+05C0|U+16EB to U+16ED|U+2E00 to U+2E17|U+FF5B|  \n|U+05C3|U+1735 and U+1736|U+2E1C and U+2E1D|U+FF5D|  \n|U+05C6|U+17D4 to U+17D6|U+3001 to U+3003|U+FF5F to U+FF65|  \n|U+05F3 and U+05F4|U+17D8 to U+17DA|U+3008 to U+3011||"
  example:
  - "The following code example demonstrates IsPunctuation.  \n  \n [!CODE [System.Char.IsPunctuation#9](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsPunctuation#9)]"
  syntax:
    content: public static bool IsPunctuation (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is a punctuation mark; otherwise, `false`.'
  overload: System.Char.IsPunctuation*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsPunctuation(System.String,System.Int32)
  id: IsPunctuation(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsPunctuation(String,Int32)
  nameWithType: Char.IsPunctuation(String,Int32)
  fullName: System.Char.IsPunctuation(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`. They include characters with the Unicode code points listed in the following table.  \n  \n|||||  \n|-|-|-|-|  \n|U+0021 to U+0023|U+060C and U+060D|U+1800 to U+180A|U+3014 to U+301F|  \n|U+0025 to U+002A|U+061B|U+1944 and U+1945|U+3030|  \n|U+002C to U+002F|U+061E and U+061F|U+19DE and U+19DF|U+303D|  \n|U+003A and U+003B|U+066A to U+066D|U+1A1E and U+1A1F|U+30A0|  \n|U+003F and U+0040|U+06D4|U+1B5A to U+1B60|U+30FB|  \n|U+005B to U+005D|U+0700 to U+070D|U+2010 to U+2027|U+A874 to U+A877|  \n|U+005F|U+07F7 to U+07F9|U+2030 to U+2043|U+FD3E and U+FD3F|  \n|U+007B|U+0964 and U+0965|U+2045 to U+2051|U+FE10 to U+FE19|  \n|U+007D|U+0970|U+2053 to U+205E|U+FE30 to U+FE52|  \n|U+00A1|U+0DF4|U+207D and  U+207E|U+FE54 to U+FE61|  \n|U+00AB|U+0E4F to U+0E5B|U+208D and U+208E|U+FE63|  \n|U+00AD|U+0F04 to U+0F12|U+2329 and U+232A|U+FE68|  \n|U+00B7|U+0F3A to U+0F3D|U+2768 to U+2775|U+FE6A and U+FE6B|  \n|U+00BB|U+0F85|U+27C5 to U+27C6|U+FF01 to U+FF03|  \n|U+00BF|U+0FD0 and U+0FD1|U+27E6 to U+27EB|U+FF05 to U+FF0A|  \n|U+037E|U+104A to U+104F|U+2983 to U+2998|U+FF0C to U+FF0F|  \n|U+0387|U+10FB|U+29D8 to U+29DB|U+FF1A and U+FF1B|  \n|U+055A to U+055F|U+1361 to U+1368|U+29FC and U+29FD|U+FF1F and U+FF20|  \n|U+0589 and U+058A|U+166D and U+166E|U+2CF9 to U+2CFC|U+FF3B to U+FF3D|  \n|U+05BE|U+169B and U+169C|U+2CFE and U+2CFF|U+FF3F|  \n|U+05C0|U+16EB to U+16ED|U+2E00 to U+2E17|U+FF5B|  \n|U+05C3|U+1735 and U+1736|U+2E1C and U+2E1D|U+FF5D|  \n|U+05C6|U+17D4 to U+17D6|U+3001 to U+3003|U+FF5F to U+FF65|  \n|U+05F3 and U+05F4|U+17D8 to U+17DA|U+3008 to U+3011||"
  example:
  - "The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.  \n  \n [!CODE [System.Char.IsPunctuation#9](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsPunctuation#9)]"
  syntax:
    content: public static bool IsPunctuation (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is a punctuation mark; otherwise, `false`.'
  overload: System.Char.IsPunctuation*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsSeparator(System.Char)
  id: IsSeparator(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsSeparator(Char)
  nameWithType: Char.IsSeparator(Char)
  fullName: System.Char.IsSeparator(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as a separator character.
  remarks: "The Unicode standard recognizes three subcategories of separators:  \n  \n-   Space separators (the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category), which includes characters such as \\u0020.  \n  \n-   Line separators (the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category), which includes \\u2028.  \n  \n-   Paragraph separators (the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category), which includes \\u2029.  \n  \n> [!NOTE]\n>  The Unicode standard classifies the characters \\u000A (LF), \\u000C (FF), and \\u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category), not as separator characters."
  example:
  - "The following example lists the <xref:System.Char> objects that are classified as separator characters.  \n  \n [!CODE [System.Char.IsSeparator#1](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsSeparator#1)]"
  syntax:
    content: public static bool IsSeparator (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is a separator character; otherwise, `false`.'
  overload: System.Char.IsSeparator*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsSeparator(System.String,System.Int32)
  id: IsSeparator(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsSeparator(String,Int32)
  nameWithType: Char.IsSeparator(String,Int32)
  fullName: System.Char.IsSeparator(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as a separator character.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n The Unicode standard recognizes three subcategories of separators:  \n  \n-   Space separators (the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category), which includes characters such as \\u0020.  \n  \n-   Line separators (the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category), which includes \\u2028.  \n  \n-   Paragraph separators (the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category), which includes \\u2029.  \n  \n> [!NOTE]\n>  The Unicode standard classifies the characters \\u000A (LF), \\u000C (FF), and \\u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category), not as separator characters."
  example:
  - "The following example demonstrates <xref:System.Char.IsSeparator%2A>.  \n  \n [!CODE [System.Char.IsSeparator#10](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsSeparator#10)]"
  syntax:
    content: public static bool IsSeparator (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is a separator character; otherwise, `false`.'
  overload: System.Char.IsSeparator*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsSurrogate(System.Char)
  id: IsSurrogate(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsSurrogate(Char)
  nameWithType: Char.IsSurrogate(Char)
  fullName: System.Char.IsSurrogate(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified character has a surrogate code unit.
  remarks: A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF. Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category. The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair. For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?linkid=37123).
  example:
  - "The following example demonstrates the IsSurrogate method.  \n  \n [!CODE [System.Char.IsSurrogate#11](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsSurrogate#11)]"
  syntax:
    content: public static bool IsSurrogate (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is either a high surrogate or a low surrogate; otherwise, `false`.'
  overload: System.Char.IsSurrogate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsSurrogate(System.String,System.Int32)
  id: IsSurrogate(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsSurrogate(String,Int32)
  nameWithType: Char.IsSurrogate(String,Int32)
  fullName: System.Char.IsSurrogate(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string has a surrogate code unit.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF. Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category. The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair. For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?linkid=37123)."
  example:
  - "The following code example demonstrates <xref:System.Char.IsSurrogate%2A>.  \n  \n [!CODE [System.Char.IsSurrogate#11](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsSurrogate#11)]"
  syntax:
    content: public static bool IsSurrogate (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is a either a high surrogate or a low surrogate; otherwise, `false`.'
  overload: System.Char.IsSurrogate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsSurrogatePair(System.Char,System.Char)
  id: IsSurrogatePair(System.Char,System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsSurrogatePair(Char,Char)
  nameWithType: Char.IsSurrogatePair(Char,Char)
  fullName: System.Char.IsSurrogatePair(Char,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the two specified <see cref="T:System.Char"> objects form a surrogate pair.
  remarks: Ordinarily, a single character is represented by a single 16-bit Unicode code unit. UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units. The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate. The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate. Individual surrogate code points have no interpretation of their own. For more information about surrogates and the Unicode Standard, see the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).
  example:
  - "The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.  \n  \n [!CODE [char.surrogate#1](../CodeSnippet/VS_Snippets_CLR/char.surrogate#1)]"
  syntax:
    content: public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);
    parameters:
    - id: highSurrogate
      type: System.Char
      description: The character to evaluate as the high surrogate of a surrogate pair.
    - id: lowSurrogate
      type: System.Char
      description: The character to evaluate as the low surrogate of a surrogate pair.
    return:
      type: System.Boolean
      description: '`true` if the numeric value of the  parameter ranges from U+D800 through U+DBFF, and the numeric value of the  parameter ranges from U+DC00 through U+DFFF; otherwise, `false`.'
  overload: System.Char.IsSurrogatePair*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsSurrogatePair(System.String,System.Int32)
  id: IsSurrogatePair(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsSurrogatePair(String,Int32)
  nameWithType: Char.IsSurrogatePair(String,Int32)
  fullName: System.Char.IsSurrogatePair(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether two adjacent <see cref="T:System.Char"> objects at a specified position in a string form a surrogate pair.
  remarks: Ordinarily, a single character is represented by a single 16-bit Unicode code unit. UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units. The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate. The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate. Individual surrogate code points have no interpretation of their own. For more information about surrogates and the Unicode Standard, see the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).
  example:
  - "The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and IsSurrogatePair methods.  \n  \n [!CODE [char.surrogate#1](../CodeSnippet/VS_Snippets_CLR/char.surrogate#1)]"
  syntax:
    content: public static bool IsSurrogatePair (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The starting position of the pair of characters to evaluate within .
    return:
      type: System.Boolean
      description: '`true` if the  parameter includes adjacent characters at positions  and  + 1, and the numeric value of the character at position  ranges from U+D800 through U+DBFF, and the numeric value of the character at position +1 ranges from U+DC00 through U+DFFF; otherwise, `false`.'
  overload: System.Char.IsSurrogatePair*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsSymbol(System.Char)
  id: IsSymbol(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsSymbol(Char)
  nameWithType: Char.IsSymbol(Char)
  fullName: System.Char.IsSymbol(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as a symbol character.
  remarks: "Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.  \n  \n Symbols in the Unicode standard are a loosely defined set of characters that include the following:  \n  \n-   Currency symbols.  \n  \n-   Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.  \n  \n-   Number forms, such as subscripts and superscripts.  \n  \n-   Mathematical operators and arrows.  \n  \n-   Geometric symbols.  \n  \n-   Technical symbols.  \n  \n-   Braille patterns.  \n  \n-   Dingbats."
  example:
  - "The following code example demonstrates IsSymbol.  \n  \n [!CODE [System.Char.IsSymbol#12](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsSymbol#12)]"
  syntax:
    content: public static bool IsSymbol (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is a symbol character; otherwise, `false`.'
  overload: System.Char.IsSymbol*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsSymbol(System.String,System.Int32)
  id: IsSymbol(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsSymbol(String,Int32)
  nameWithType: Char.IsSymbol(String,Int32)
  fullName: System.Char.IsSymbol(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as a symbol character.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.  \n  \n Symbols in the Unicode standard are a loosely defined set of characters that include the following:  \n  \n-   Currency symbols.  \n  \n-   Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.  \n  \n-   Number forms, such as subscripts and superscripts.  \n  \n-   Mathematical operators and arrows.  \n  \n-   Geometric symbols.  \n  \n-   Technical symbols.  \n  \n-   Braille patterns.  \n  \n-   Dingbats."
  example:
  - "The following code example demonstrates <xref:System.Char.IsSymbol%2A>.  \n  \n [!CODE [System.Char.IsSymbol#12](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsSymbol#12)]"
  syntax:
    content: public static bool IsSymbol (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is a symbol character; otherwise, `false`.'
  overload: System.Char.IsSymbol*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsUpper(System.Char)
  id: IsUpper(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsUpper(Char)
  nameWithType: Char.IsUpper(Char)
  fullName: System.Char.IsUpper(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as an uppercase letter.
  remarks: 'Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.'
  syntax:
    content: public static bool IsUpper (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is an uppercase letter; otherwise, `false`.'
  overload: System.Char.IsUpper*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsUpper(System.String,System.Int32)
  id: IsUpper(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsUpper(String,Int32)
  nameWithType: Char.IsUpper(String,Int32)
  fullName: System.Char.IsUpper(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`."
  syntax:
    content: public static bool IsUpper (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is an uppercase letter; otherwise, `false`.'
  overload: System.Char.IsUpper*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsWhiteSpace(System.Char)
  id: IsWhiteSpace(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: IsWhiteSpace(Char)
  nameWithType: Char.IsWhiteSpace(Char)
  fullName: System.Char.IsWhiteSpace(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the specified Unicode character is categorized as white space.
  remarks: "White space characters are the following Unicode characters:  \n  \n-   Members of the <xref:System.Globalization.UnicodeCategory> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).  \n  \n-   Members of the <xref:System.Globalization.UnicodeCategory> category, which consists solely of the LINE SEPARATOR character (U+2028).  \n  \n-   Members of the <xref:System.Globalization.UnicodeCategory> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).  \n  \n-   The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085)."
  example:
  - "The following example demonstrates the IsWhiteSpace method.  \n  \n [!CODE [System.Char.IsWhiteSpace#14](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsWhiteSpace#14)]"
  syntax:
    content: public static bool IsWhiteSpace (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to evaluate.
    return:
      type: System.Boolean
      description: '`true` if  is white space; otherwise, `false`.'
  overload: System.Char.IsWhiteSpace*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.IsWhiteSpace(System.String,System.Int32)
  id: IsWhiteSpace(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  name: IsWhiteSpace(String,Int32)
  nameWithType: Char.IsWhiteSpace(String,Int32)
  fullName: System.Char.IsWhiteSpace(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether the character at the specified position in a specified string is categorized as white space.
  remarks: "Character positions in a string are indexed starting from zero.  \n  \n White space characters are the following Unicode characters:  \n  \n-   Members of the <xref:System.Globalization.UnicodeCategory> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).  \n  \n-   Members of the <xref:System.Globalization.UnicodeCategory> category, which consists solely of the LINE SEPARATOR character (U+2028).  \n  \n-   Members of the <xref:System.Globalization.UnicodeCategory> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).  \n  \n-   The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085)."
  example:
  - "The following code example demonstrates <xref:System.Char.IsWhiteSpace%2A>.  \n  \n [!CODE [System.Char.IsWhiteSpace#14](../CodeSnippet/VS_Snippets_CLR_System/system.Char.IsWhiteSpace#14)]"
  syntax:
    content: public static bool IsWhiteSpace (string s, int index);
    parameters:
    - id: s
      type: System.String
      description: A string.
    - id: index
      type: System.Int32
      description: The position of the character to evaluate in .
    return:
      type: System.Boolean
      description: '`true` if the character at position  in  is white space; otherwise, `false`.'
  overload: System.Char.IsWhiteSpace*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.MaxValue
  id: MaxValue
  parent: System.Char
  langs:
  - csharp
  name: MaxValue
  nameWithType: Char.MaxValue
  fullName: System.Char.MaxValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the largest possible value of a <see cref="T:System.Char">. This field is constant.
  remarks: The value of this constant is hexadecimal 0xFFFF.
  syntax:
    content: public const char MaxValue;
    return:
      type: System.Char
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.MinValue
  id: MinValue
  parent: System.Char
  langs:
  - csharp
  name: MinValue
  nameWithType: Char.MinValue
  fullName: System.Char.MinValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the smallest possible value of a <see cref="T:System.Char">. This field is constant.
  remarks: The value of this constant is hexadecimal 0x00.
  syntax:
    content: public const char MinValue;
    return:
      type: System.Char
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.Parse(System.String)
  id: Parse(System.String)
  parent: System.Char
  langs:
  - csharp
  name: Parse(String)
  nameWithType: Char.Parse(String)
  fullName: System.Char.Parse(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of the specified string to its equivalent Unicode character.
  remarks: ''
  example:
  - "The following code example demonstrates Parse.  \n  \n [!CODE [System.Char.Parse#15](../CodeSnippet/VS_Snippets_CLR_System/system.Char.Parse#15)]"
  syntax:
    content: public static char Parse (string s);
    parameters:
    - id: s
      type: System.String
      description: A string that contains a single character, or `null`.
    return:
      type: System.Char
      description: A Unicode character equivalent to the sole character in .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToBoolean(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToBoolean(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToBoolean(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: '**Note** This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException">.'
  remarks: To be added.
  syntax:
    content: bool IConvertible.ToBoolean (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Boolean
      description: This conversion is not supported. No value is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToByte(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToByte(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToByte(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToByte%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Char%29?displayProperty=fullName> method instead.
  syntax:
    content: byte IConvertible.ToByte (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Byte
      description: The converted value of the current <see cref="T:System.Char"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToChar(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToChar(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToChar(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToChar%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.
  syntax:
    content: char IConvertible.ToChar (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Char
      description: The value of the current <see cref="T:System.Char"> object unchanged.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToDateTime(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToDateTime(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToDateTime(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: '**Note** This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException">.'
  remarks: To be added.
  syntax:
    content: DateTime IConvertible.ToDateTime (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.DateTime
      description: No value is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToDecimal(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToDecimal(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToDecimal(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: '**Note** This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException">.'
  remarks: To be added.
  syntax:
    content: decimal IConvertible.ToDecimal (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Decimal
      description: No value is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToDouble(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToDouble(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToDouble(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: '**Note** This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException">.'
  remarks: To be added.
  syntax:
    content: double IConvertible.ToDouble (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Double
      description: No value is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToInt16(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToInt16(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToInt16(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToInt16%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Char%29?displayProperty=fullName> method instead.
  syntax:
    content: short IConvertible.ToInt16 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int16
      description: The converted value of the current <see cref="T:System.Char"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToInt32(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToInt32(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToInt32(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=fullName> method instead.
  syntax:
    content: int IConvertible.ToInt32 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int32
      description: The converted value of the current <see cref="T:System.Char"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToInt64(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToInt64(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToInt64(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Char%29?displayProperty=fullName> method instead.
  syntax:
    content: long IConvertible.ToInt64 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int64
      description: The converted value of the current <see cref="T:System.Char"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToSByte(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToSByte(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToSByte(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Char%29?displayProperty=fullName> method instead.
  syntax:
    content: sbyte IConvertible.ToSByte (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.SByte
      description: The converted value of the current <see cref="T:System.Char"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToSingle(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToSingle(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToSingle(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: '**Note** This conversion is not supported. Attempting to do so throws an <see cref="T:System.InvalidCastException">.'
  remarks: To be added.
  syntax:
    content: float IConvertible.ToSingle (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Single
      description: No value is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToType(Type,IFormatProvider)
  nameWithType: Char.System.IConvertible.ToType(Type,IFormatProvider)
  fullName: System.Char.System.IConvertible.ToType(Type,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToType%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method instead.
  syntax:
    content: object IConvertible.ToType (Type type, IFormatProvider provider);
    parameters:
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> object.
    - id: provider
      type: System.IFormatProvider
      description: An <see cref="T:System.IFormatProvider"> object.
    return:
      type: System.Object
      description: An object of the specified type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToUInt16(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToUInt16(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToUInt16(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=fullName> method instead.
  syntax:
    content: ushort IConvertible.ToUInt16 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An <see cref="T:System.IFormatProvider"> object. (Specify `null` because the  parameter is ignored.)
    return:
      type: System.UInt16
      description: The converted value of the current <see cref="T:System.Char"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToUInt32(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToUInt32(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToUInt32(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=fullName> method instead.
  syntax:
    content: uint IConvertible.ToUInt32 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An <see cref="T:System.IFormatProvider"> object. (Specify `null` because the  parameter is ignored.)
    return:
      type: System.UInt32
      description: The converted value of the current <see cref="T:System.Char"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  name: System.IConvertible.ToUInt64(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToUInt64(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToUInt64(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=fullName> method instead.
  syntax:
    content: ulong IConvertible.ToUInt64 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An <see cref="T:System.IFormatProvider"> object. (Specify `null` because the  parameter is ignored.)
    return:
      type: System.UInt64
      description: The converted value of the current <see cref="T:System.Char"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ToLower(System.Char)
  id: ToLower(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: ToLower(Char)
  nameWithType: Char.ToLower(Char)
  fullName: System.Char.ToLower(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of a Unicode character to its lowercase equivalent.
  remarks: "Casing rules are obtained from the current culture.  \n  \n Use <xref:System.String.ToLower%2A?displayProperty=fullName> to convert a string to lowercase."
  example:
  - "The following example demonstrates <xref:System.Char.ToLower%2A>.  \n  \n [!CODE [System.Char.ToLower#16](../CodeSnippet/VS_Snippets_CLR_System/system.Char.ToLower#16)]"
  syntax:
    content: public static char ToLower (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Char
      description: The lowercase equivalent of , or the unchanged value of , if  is already lowercase or not alphabetic.
  overload: System.Char.ToLower*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ToLower(System.Char,System.Globalization.CultureInfo)
  id: ToLower(System.Char,System.Globalization.CultureInfo)
  parent: System.Char
  langs:
  - csharp
  name: ToLower(Char,CultureInfo)
  nameWithType: Char.ToLower(Char,CultureInfo)
  fullName: System.Char.ToLower(Char,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.
  remarks: Use <xref:System.String.ToLower%2A?displayProperty=fullName> to convert a string to lowercase.
  example:
  - "The following code example demonstrates ToLower.  \n  \n [!CODE [System.Char.ToLower#16](../CodeSnippet/VS_Snippets_CLR_System/system.Char.ToLower#16)]"
  syntax:
    content: public static char ToLower (char c, System.Globalization.CultureInfo culture);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to convert.
    - id: culture
      type: System.Globalization.CultureInfo
      description: An object that supplies culture-specific casing rules.
    return:
      type: System.Char
      description: The lowercase equivalent of , modified according to , or the unchanged value of , if  is already lowercase or not alphabetic.
  overload: System.Char.ToLower*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ToLowerInvariant(System.Char)
  id: ToLowerInvariant(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: ToLowerInvariant(Char)
  nameWithType: Char.ToLowerInvariant(Char)
  fullName: System.Char.ToLowerInvariant(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.
  remarks: "If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, then use the ToLowerInvariant method. The ToLowerInvariant method is equivalent to `ToLower(Char, CultureInfo.InvariantCulture)`.  \n  \n Use <xref:System.String.ToLowerInvariant%2A?displayProperty=fullName> to convert a string to lowercase."
  syntax:
    content: public static char ToLowerInvariant (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Char
      description: The lowercase equivalent of the  parameter, or the unchanged value of , if  is already lowercase or not alphabetic.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ToString
  id: ToString
  parent: System.Char
  langs:
  - csharp
  name: ToString()
  nameWithType: Char.ToString()
  fullName: System.Char.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of this instance to its equivalent string representation.
  remarks: ''
  example:
  - "The following code example demonstrates ToString.  \n  \n [!CODE [System.Char.ToString#17](../CodeSnippet/VS_Snippets_CLR_System/system.Char.ToString#17)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of the value of this instance.
  overload: System.Char.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ToString(System.Char)
  id: ToString(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: ToString(Char)
  nameWithType: Char.ToString(Char)
  fullName: System.Char.ToString(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the specified Unicode character to its equivalent string representation.
  remarks: ''
  example:
  - "The following code example demonstrates <xref:System.Char.ToString%2A>.  \n  \n [!CODE [System.Char.ToString#17](../CodeSnippet/VS_Snippets_CLR_System/system.Char.ToString#17)]"
  syntax:
    content: public static string ToString (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.String
      description: The string representation of the value of .
  overload: System.Char.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Char
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Char.ToString(IFormatProvider)
  fullName: System.Char.ToString(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.
  remarks: The  parameter is ignored; it does not participate in this operation.
  example:
  - "The following code example demonstrates an overload of <xref:System.Char.ToString%2A>.  \n  \n [!CODE [System.Char.ToString#17](../CodeSnippet/VS_Snippets_CLR_System/system.Char.ToString#17)]"
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: (Reserved) An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the value of this instance as specified by .
  overload: System.Char.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ToUpper(System.Char)
  id: ToUpper(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: ToUpper(Char)
  nameWithType: Char.ToUpper(Char)
  fullName: System.Char.ToUpper(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of a Unicode character to its uppercase equivalent.
  remarks: "Casing rules are obtained from the current culture.  \n  \n Use <xref:System.String.ToUpper%2A?displayProperty=fullName> to convert a string to uppercase."
  example:
  - "The following example converts each character in an array to its uppercase equivalent.  \n  \n [!CODE [System.Char.ToUpper#1](../CodeSnippet/VS_Snippets_CLR_System/system.char.toupper#1)]"
  syntax:
    content: public static char ToUpper (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Char
      description: The uppercase equivalent of , or the unchanged value of  if  is already uppercase, has no uppercase equivalent, or is not alphabetic.
  overload: System.Char.ToUpper*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)
  id: ToUpper(System.Char,System.Globalization.CultureInfo)
  parent: System.Char
  langs:
  - csharp
  name: ToUpper(Char,CultureInfo)
  nameWithType: Char.ToUpper(Char,CultureInfo)
  fullName: System.Char.ToUpper(Char,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.
  remarks: Use <xref:System.String.ToUpper%2A?displayProperty=fullName> to convert a string to uppercase.
  example:
  - "The following example converts each character in an array to its uppercase equivalent for the en-US culture, the invariant culture, and the tr-TR culture. In this example, the uppercase equivalent of each lowercase letter is identical for all cultures except for one case. The lowercase \"i\" character (U+0069) converts to \"I\" (U+0049) in the en-US and invariant cultures, but to \"İ\" (U+0130) in the tr-TR culture.  \n  \n [!CODE [System.Char.ToUpper#2](../CodeSnippet/VS_Snippets_CLR_System/system.char.toupper#2)]"
  syntax:
    content: public static char ToUpper (char c, System.Globalization.CultureInfo culture);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to convert.
    - id: culture
      type: System.Globalization.CultureInfo
      description: An object that supplies culture-specific casing rules.
    return:
      type: System.Char
      description: The uppercase equivalent of , modified according to , or the unchanged value of  if  is already uppercase, has no uppercase equivalent, or is not alphabetic.
  overload: System.Char.ToUpper*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.ToUpperInvariant(System.Char)
  id: ToUpperInvariant(System.Char)
  parent: System.Char
  langs:
  - csharp
  name: ToUpperInvariant(Char)
  nameWithType: Char.ToUpperInvariant(Char)
  fullName: System.Char.ToUpperInvariant(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.
  remarks: "If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the ToUpperInvariant method.  The ToUpperInvariant method is equivalent to `ToUpper(Char, CultureInfo.InvariantCulture)`.  \n  \n Use <xref:System.String.ToUpperInvariant%2A?displayProperty=fullName> to convert a string to uppercase."
  syntax:
    content: public static char ToUpperInvariant (char c);
    parameters:
    - id: c
      type: System.Char
      description: The Unicode character to convert.
    return:
      type: System.Char
      description: The uppercase equivalent of the  parameter, or the unchanged value of , if  is already uppercase or not alphabetic.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Char.TryParse(System.String,System.Char@)
  id: TryParse(System.String,System.Char@)
  parent: System.Char
  langs:
  - csharp
  name: TryParse(String,Char)
  nameWithType: Char.TryParse(String,Char)
  fullName: System.Char.TryParse(String,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.
  remarks: The TryParse method is like the <xref:System.Char.Parse%2A> method, except the TryParse method does not throw an exception if the conversion fails.
  example:
  - "The following code example demonstrates overloads of the TryParse method for several base types, and the <xref:System.DateTime.TryParseExact%2A> method for the <xref:System.DateTime> base type.  \n  \n [!CODE [T.TryParse#1](../CodeSnippet/VS_Snippets_CLR/T.TryParse#1)]"
  syntax:
    content: public static bool TryParse (string s, out char result);
    parameters:
    - id: s
      type: System.String
      description: A string that contains a single character, or `null`.
    - id: result
      type: System.Char
      description: When this method returns, contains a Unicode character equivalent to the sole character in , if the conversion succeeded, or an undefined value if the conversion failed. The conversion fails if the  parameter is `null` or the length of  is not 1. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: '`true` if the  parameter was converted successfully; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Char.CompareTo(System.Char)
  parent: System.Char
  isExternal: false
  name: CompareTo(Char)
  nameWithType: Char.CompareTo(Char)
  fullName: System.Char.CompareTo(Char)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.CompareTo(System.Object)
  parent: System.Char
  isExternal: false
  name: CompareTo(Object)
  nameWithType: Char.CompareTo(Object)
  fullName: System.Char.CompareTo(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Char.ConvertFromUtf32(System.Int32)
  parent: System.Char
  isExternal: false
  name: ConvertFromUtf32(Int32)
  nameWithType: Char.ConvertFromUtf32(Int32)
  fullName: System.Char.ConvertFromUtf32(Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.ConvertToUtf32(System.Char,System.Char)
  parent: System.Char
  isExternal: false
  name: ConvertToUtf32(Char,Char)
  nameWithType: Char.ConvertToUtf32(Char,Char)
  fullName: System.Char.ConvertToUtf32(Char,Char)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.ConvertToUtf32(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: ConvertToUtf32(String,Int32)
  nameWithType: Char.ConvertToUtf32(String,Int32)
  fullName: System.Char.ConvertToUtf32(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.Equals(System.Char)
  parent: System.Char
  isExternal: false
  name: Equals(Char)
  nameWithType: Char.Equals(Char)
  fullName: System.Char.Equals(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.Equals(System.Object)
  parent: System.Char
  isExternal: false
  name: Equals(Object)
  nameWithType: Char.Equals(Object)
  fullName: System.Char.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Char.GetHashCode
  parent: System.Char
  isExternal: false
  name: GetHashCode()
  nameWithType: Char.GetHashCode()
  fullName: System.Char.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.GetNumericValue(System.Char)
  parent: System.Char
  isExternal: false
  name: GetNumericValue(Char)
  nameWithType: Char.GetNumericValue(Char)
  fullName: System.Char.GetNumericValue(Char)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.GetNumericValue(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: GetNumericValue(String,Int32)
  nameWithType: Char.GetNumericValue(String,Int32)
  fullName: System.Char.GetNumericValue(String,Int32)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.GetTypeCode
  parent: System.Char
  isExternal: false
  name: GetTypeCode()
  nameWithType: Char.GetTypeCode()
  fullName: System.Char.GetTypeCode()
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  nameWithType: TypeCode
  fullName: System.TypeCode
- uid: System.Char.GetUnicodeCategory(System.Char)
  parent: System.Char
  isExternal: false
  name: GetUnicodeCategory(Char)
  nameWithType: Char.GetUnicodeCategory(Char)
  fullName: System.Char.GetUnicodeCategory(Char)
- uid: System.Globalization.UnicodeCategory
  parent: System.Globalization
  isExternal: false
  name: UnicodeCategory
  nameWithType: UnicodeCategory
  fullName: System.Globalization.UnicodeCategory
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.GetUnicodeCategory(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: GetUnicodeCategory(String,Int32)
  nameWithType: Char.GetUnicodeCategory(String,Int32)
  fullName: System.Char.GetUnicodeCategory(String,Int32)
- uid: System.Globalization.UnicodeCategory
  parent: System.Globalization
  isExternal: false
  name: UnicodeCategory
  nameWithType: UnicodeCategory
  fullName: System.Globalization.UnicodeCategory
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsControl(System.Char)
  parent: System.Char
  isExternal: false
  name: IsControl(Char)
  nameWithType: Char.IsControl(Char)
  fullName: System.Char.IsControl(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsControl(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsControl(String,Int32)
  nameWithType: Char.IsControl(String,Int32)
  fullName: System.Char.IsControl(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsDigit(System.Char)
  parent: System.Char
  isExternal: false
  name: IsDigit(Char)
  nameWithType: Char.IsDigit(Char)
  fullName: System.Char.IsDigit(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsDigit(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsDigit(String,Int32)
  nameWithType: Char.IsDigit(String,Int32)
  fullName: System.Char.IsDigit(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsHighSurrogate(System.Char)
  parent: System.Char
  isExternal: false
  name: IsHighSurrogate(Char)
  nameWithType: Char.IsHighSurrogate(Char)
  fullName: System.Char.IsHighSurrogate(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsHighSurrogate(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsHighSurrogate(String,Int32)
  nameWithType: Char.IsHighSurrogate(String,Int32)
  fullName: System.Char.IsHighSurrogate(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsLetter(System.Char)
  parent: System.Char
  isExternal: false
  name: IsLetter(Char)
  nameWithType: Char.IsLetter(Char)
  fullName: System.Char.IsLetter(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsLetter(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsLetter(String,Int32)
  nameWithType: Char.IsLetter(String,Int32)
  fullName: System.Char.IsLetter(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsLetterOrDigit(System.Char)
  parent: System.Char
  isExternal: false
  name: IsLetterOrDigit(Char)
  nameWithType: Char.IsLetterOrDigit(Char)
  fullName: System.Char.IsLetterOrDigit(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsLetterOrDigit(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsLetterOrDigit(String,Int32)
  nameWithType: Char.IsLetterOrDigit(String,Int32)
  fullName: System.Char.IsLetterOrDigit(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsLower(System.Char)
  parent: System.Char
  isExternal: false
  name: IsLower(Char)
  nameWithType: Char.IsLower(Char)
  fullName: System.Char.IsLower(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsLower(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsLower(String,Int32)
  nameWithType: Char.IsLower(String,Int32)
  fullName: System.Char.IsLower(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsLowSurrogate(System.Char)
  parent: System.Char
  isExternal: false
  name: IsLowSurrogate(Char)
  nameWithType: Char.IsLowSurrogate(Char)
  fullName: System.Char.IsLowSurrogate(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsLowSurrogate(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsLowSurrogate(String,Int32)
  nameWithType: Char.IsLowSurrogate(String,Int32)
  fullName: System.Char.IsLowSurrogate(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsNumber(System.Char)
  parent: System.Char
  isExternal: false
  name: IsNumber(Char)
  nameWithType: Char.IsNumber(Char)
  fullName: System.Char.IsNumber(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsNumber(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsNumber(String,Int32)
  nameWithType: Char.IsNumber(String,Int32)
  fullName: System.Char.IsNumber(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsPunctuation(System.Char)
  parent: System.Char
  isExternal: false
  name: IsPunctuation(Char)
  nameWithType: Char.IsPunctuation(Char)
  fullName: System.Char.IsPunctuation(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsPunctuation(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsPunctuation(String,Int32)
  nameWithType: Char.IsPunctuation(String,Int32)
  fullName: System.Char.IsPunctuation(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsSeparator(System.Char)
  parent: System.Char
  isExternal: false
  name: IsSeparator(Char)
  nameWithType: Char.IsSeparator(Char)
  fullName: System.Char.IsSeparator(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsSeparator(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsSeparator(String,Int32)
  nameWithType: Char.IsSeparator(String,Int32)
  fullName: System.Char.IsSeparator(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsSurrogate(System.Char)
  parent: System.Char
  isExternal: false
  name: IsSurrogate(Char)
  nameWithType: Char.IsSurrogate(Char)
  fullName: System.Char.IsSurrogate(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsSurrogate(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsSurrogate(String,Int32)
  nameWithType: Char.IsSurrogate(String,Int32)
  fullName: System.Char.IsSurrogate(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsSurrogatePair(System.Char,System.Char)
  parent: System.Char
  isExternal: false
  name: IsSurrogatePair(Char,Char)
  nameWithType: Char.IsSurrogatePair(Char,Char)
  fullName: System.Char.IsSurrogatePair(Char,Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsSurrogatePair(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsSurrogatePair(String,Int32)
  nameWithType: Char.IsSurrogatePair(String,Int32)
  fullName: System.Char.IsSurrogatePair(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsSymbol(System.Char)
  parent: System.Char
  isExternal: false
  name: IsSymbol(Char)
  nameWithType: Char.IsSymbol(Char)
  fullName: System.Char.IsSymbol(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsSymbol(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsSymbol(String,Int32)
  nameWithType: Char.IsSymbol(String,Int32)
  fullName: System.Char.IsSymbol(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsUpper(System.Char)
  parent: System.Char
  isExternal: false
  name: IsUpper(Char)
  nameWithType: Char.IsUpper(Char)
  fullName: System.Char.IsUpper(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsUpper(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsUpper(String,Int32)
  nameWithType: Char.IsUpper(String,Int32)
  fullName: System.Char.IsUpper(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.IsWhiteSpace(System.Char)
  parent: System.Char
  isExternal: false
  name: IsWhiteSpace(Char)
  nameWithType: Char.IsWhiteSpace(Char)
  fullName: System.Char.IsWhiteSpace(Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.IsWhiteSpace(System.String,System.Int32)
  parent: System.Char
  isExternal: false
  name: IsWhiteSpace(String,Int32)
  nameWithType: Char.IsWhiteSpace(String,Int32)
  fullName: System.Char.IsWhiteSpace(String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char.MaxValue
  parent: System.Char
  isExternal: false
  name: MaxValue
  nameWithType: Char.MaxValue
  fullName: System.Char.MaxValue
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.MinValue
  parent: System.Char
  isExternal: false
  name: MinValue
  nameWithType: Char.MinValue
  fullName: System.Char.MinValue
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.Parse(System.String)
  parent: System.Char
  isExternal: false
  name: Parse(String)
  nameWithType: Char.Parse(String)
  fullName: System.Char.Parse(String)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToBoolean(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToBoolean(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToByte(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToByte(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToByte(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToByte(IFormatProvider)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToChar(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToChar(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToChar(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToChar(IFormatProvider)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToDateTime(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToDateTime(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToDecimal(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToDecimal(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToDouble(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToDouble(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToDouble(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToDouble(IFormatProvider)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToInt16(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToInt16(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToInt16(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToInt16(IFormatProvider)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToInt32(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToInt32(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToInt32(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToInt32(IFormatProvider)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToInt64(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToInt64(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToInt64(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToInt64(IFormatProvider)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToSByte(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToSByte(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToSByte(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToSByte(IFormatProvider)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToSingle(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToSingle(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToSingle(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToSingle(IFormatProvider)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToType(Type,IFormatProvider)
  nameWithType: Char.System.IConvertible.ToType(Type,IFormatProvider)
  fullName: System.Char.System.IConvertible.ToType(Type,IFormatProvider)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToUInt16(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToUInt16(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToUInt32(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToUInt32(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: System.IConvertible.ToUInt64(IFormatProvider)
  nameWithType: Char.System.IConvertible.ToUInt64(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.ToLower(System.Char)
  parent: System.Char
  isExternal: false
  name: ToLower(Char)
  nameWithType: Char.ToLower(Char)
  fullName: System.Char.ToLower(Char)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.ToLower(System.Char,System.Globalization.CultureInfo)
  parent: System.Char
  isExternal: false
  name: ToLower(Char,CultureInfo)
  nameWithType: Char.ToLower(Char,CultureInfo)
  fullName: System.Char.ToLower(Char,CultureInfo)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Char.ToLowerInvariant(System.Char)
  parent: System.Char
  isExternal: false
  name: ToLowerInvariant(Char)
  nameWithType: Char.ToLowerInvariant(Char)
  fullName: System.Char.ToLowerInvariant(Char)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.ToString
  parent: System.Char
  isExternal: false
  name: ToString()
  nameWithType: Char.ToString()
  fullName: System.Char.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Char.ToString(System.Char)
  parent: System.Char
  isExternal: false
  name: ToString(Char)
  nameWithType: Char.ToString(Char)
  fullName: System.Char.ToString(Char)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.ToString(System.IFormatProvider)
  parent: System.Char
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Char.ToString(IFormatProvider)
  fullName: System.Char.ToString(IFormatProvider)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Char.ToUpper(System.Char)
  parent: System.Char
  isExternal: false
  name: ToUpper(Char)
  nameWithType: Char.ToUpper(Char)
  fullName: System.Char.ToUpper(Char)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)
  parent: System.Char
  isExternal: false
  name: ToUpper(Char,CultureInfo)
  nameWithType: Char.ToUpper(Char,CultureInfo)
  fullName: System.Char.ToUpper(Char,CultureInfo)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Char.ToUpperInvariant(System.Char)
  parent: System.Char
  isExternal: false
  name: ToUpperInvariant(Char)
  nameWithType: Char.ToUpperInvariant(Char)
  fullName: System.Char.ToUpperInvariant(Char)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.TryParse(System.String,System.Char@)
  parent: System.Char
  isExternal: false
  name: TryParse(String,Char)
  nameWithType: Char.TryParse(String,Char)
  fullName: System.Char.TryParse(String,Char)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char.CompareTo*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.ConvertToUtf32*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.Equals*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.GetNumericValue*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.GetUnicodeCategory*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsControl*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsDigit*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsHighSurrogate*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsLetter*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsLetterOrDigit*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsLower*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsLowSurrogate*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsNumber*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsPunctuation*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsSeparator*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsSurrogate*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsSurrogatePair*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsSymbol*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsUpper*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.IsWhiteSpace*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.ToLower*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.ToString*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
- uid: System.Char.ToUpper*
  parent: System.Char
  isExternal: false
  nameWithType: Char.
