### YamlMime:ManagedReference
items:
- uid: System.Array
  id: Array
  children:
  - System.Array.AsReadOnly``1(``0[])
  - System.Array.BinarySearch(System.Array,System.Object)
  - System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Array.BinarySearch``1(``0[],``0)
  - System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer`1)
  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer`1)
  - System.Array.Clear(System.Array,System.Int32,System.Int32)
  - System.Array.Clone
  - System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Array.ConvertAll``2(``0[],System.Converter`2)
  - System.Array.Copy(System.Array,System.Array,System.Int32)
  - System.Array.Copy(System.Array,System.Array,System.Int64)
  - System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  - System.Array.CopyTo(System.Array,System.Int32)
  - System.Array.CopyTo(System.Array,System.Int64)
  - System.Array.CreateInstance(System.Type,System.Int32)
  - System.Array.CreateInstance(System.Type,System.Int32[])
  - System.Array.CreateInstance(System.Type,System.Int64[])
  - System.Array.CreateInstance(System.Type,System.Int32,System.Int32)
  - System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  - System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)
  - System.Array.Empty``1
  - System.Array.Exists``1(``0[],System.Predicate`1)
  - System.Array.Find``1(``0[],System.Predicate`1)
  - System.Array.FindAll``1(``0[],System.Predicate`1)
  - System.Array.FindIndex``1(``0[],System.Predicate`1)
  - System.Array.FindIndex``1(``0[],System.Int32,System.Predicate`1)
  - System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate`1)
  - System.Array.FindLast``1(``0[],System.Predicate`1)
  - System.Array.FindLastIndex``1(``0[],System.Predicate`1)
  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate`1)
  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate`1)
  - System.Array.ForEach``1(``0[],System.Action`1)
  - System.Array.GetEnumerator
  - System.Array.GetLength(System.Int32)
  - System.Array.GetLongLength(System.Int32)
  - System.Array.GetLowerBound(System.Int32)
  - System.Array.GetUpperBound(System.Int32)
  - System.Array.GetValue(System.Int32)
  - System.Array.GetValue(System.Int32[])
  - System.Array.GetValue(System.Int64)
  - System.Array.GetValue(System.Int64[])
  - System.Array.GetValue(System.Int32,System.Int32)
  - System.Array.GetValue(System.Int64,System.Int64)
  - System.Array.GetValue(System.Int32,System.Int32,System.Int32)
  - System.Array.GetValue(System.Int64,System.Int64,System.Int64)
  - System.Array.IndexOf(System.Array,System.Object)
  - System.Array.IndexOf(System.Array,System.Object,System.Int32)
  - System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  - System.Array.IndexOf``1(``0[],``0)
  - System.Array.IndexOf``1(``0[],``0,System.Int32)
  - System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.Initialize
  - System.Array.IsFixedSize
  - System.Array.IsReadOnly
  - System.Array.IsSynchronized
  - System.Array.LastIndexOf(System.Array,System.Object)
  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  - System.Array.LastIndexOf``1(``0[],``0)
  - System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  - System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.Length
  - System.Array.LongLength
  - System.Array.Rank
  - System.Array.Resize``1(``0[]@,System.Int32)
  - System.Array.Reverse(System.Array)
  - System.Array.Reverse(System.Array,System.Int32,System.Int32)
  - System.Array.SetValue(System.Object,System.Int32)
  - System.Array.SetValue(System.Object,System.Int32[])
  - System.Array.SetValue(System.Object,System.Int64)
  - System.Array.SetValue(System.Object,System.Int64[])
  - System.Array.SetValue(System.Object,System.Int32,System.Int32)
  - System.Array.SetValue(System.Object,System.Int64,System.Int64)
  - System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)
  - System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)
  - System.Array.Sort(System.Array)
  - System.Array.Sort(System.Array,System.Array)
  - System.Array.Sort(System.Array,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Int32,System.Int32)
  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  - System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  - System.Array.Sort``1(``0[])
  - System.Array.Sort``1(``0[],System.Collections.Generic.IComparer`1)
  - System.Array.Sort``1(``0[],System.Comparison`1)
  - System.Array.Sort``1(``0[],System.Int32,System.Int32)
  - System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1)
  - System.Array.Sort``2(``0[],``1[])
  - System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  - System.Array.SyncRoot
  - System.Array.System#Collections#ICollection#Count
  - System.Array.System#Collections#IList#Add(System.Object)
  - System.Array.System#Collections#IList#Clear
  - System.Array.System#Collections#IList#Contains(System.Object)
  - System.Array.System#Collections#IList#IndexOf(System.Object)
  - System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Array.System#Collections#IList#Item(System.Int32)
  - System.Array.System#Collections#IList#Remove(System.Object)
  - System.Array.System#Collections#IList#RemoveAt(System.Int32)
  - System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Array.TrueForAll``1(``0[],System.Predicate`1)
  langs:
  - csharp
  name: Array
  nameWithType: Array
  fullName: System.Array
  type: Class
  summary: "Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.  \n  \n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/array.cs#156e066ecc4ccedf)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/array.cs#156e066ecc4ccedf). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The Array class is not part of the <xref:System.Collections> namespaces. However, it is still considered a collection because it is based on the <xref:System.Collections.IList> interface.  \n  \n The Array class is the base class for language implementations that support arrays. However, only the system and compilers can derive explicitly from the Array class. Users should employ the array constructs provided by the language.  \n  \n An element is a value in an Array. The length of an Array is the total number of elements it can contain. The lower bound of an Array is the index of its first element. An Array can have any lower bound, but it has a lower bound of zero by default. A different lower bound can be defined when creating an instance of the Array class using <xref:System.Array.CreateInstance%2A>.A multidimensional Array can have different bounds for each dimension. An array can have a maximum of 32 dimensions.  \n  \n Unlike the classes in the <xref:System.Collections> namespaces, Array has a fixed capacity. To increase the capacity, you must create a new Array object with the required capacity, copy the elements from the old Array object to the new one, and delete the old Array.  \n  \n By default, the maximum size of an Array is 2 gigabytes (GB). In a 64-bit environment, you can avoid the size restriction by setting the `enabled` attribute of the [gcAllowVeryLargeObjects](../Topic/%3CgcAllowVeryLargeObjects%3E%20Element.md) configuration element to `true` in the run-time environment. However, the array will still be limited to a total of 4 billion elements, and to a maximum index of 0X7FEFFFFF in any given dimension (0X7FFFFFC7 for byte arrays and arrays of single-byte structures).  \n  \n Starting with the .NET Framework 2.0, the Array class implements the <xref:System.Collections.Generic.IList%601?displayProperty=fullName>, <xref:System.Collections.Generic.ICollection%601?displayProperty=fullName>, and <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> generic interfaces. The implementations are provided to arrays at run time, and as a result, the generic interfaces do not appear in the declaration syntax for the Array class. In addition,  there are no reference topics for interface members that are accessible only by casting an array to the generic interface type (explicit interface implementations). The key thing to be aware of when you cast an array to one of these interfaces is that members which add, insert, or remove elements throw <xref:System.NotSupportedException>.  \n  \n <xref:System.Type> objects provide information about array type declarations. Array objects with the same array type share the same <xref:System.Type> object.  \n  \n <xref:System.Type.IsArray%2A?displayProperty=fullName> and <xref:System.Type.GetElementType%2A?displayProperty=fullName> might not return the expected results with Array because if an array is cast to the type Array, the result is an object, not an array. That is, `typeof(System.Array).IsArray` returns `false`, and `typeof(System.Array).GetElementType` returns `null`.  \n  \n The <xref:System.Array.Copy%2A?displayProperty=fullName> method copies elements not only between arrays of the same type but also between standard arrays of different types; it handles type casting automatically.  \n  \n Some methods, such as <xref:System.Array.CreateInstance%2A>, <xref:System.Array.Copy%2A>, <xref:System.Array.CopyTo%2A>, <xref:System.Array.GetValue%2A>, and <xref:System.Array.SetValue%2A>, provide overloads that accept 64-bit integers as parameters to accommodate large capacity arrays. <xref:System.Array.LongLength%2A> and <xref:System.Array.GetLongLength%2A> return 64-bit integers indicating the length of the array.  \n  \n The Array is not guaranteed to be sorted.  You must sort the Array prior to performing operations (such as <xref:System.Array.BinarySearch%2A>) that require the Array to be sorted.  \n  \n Using an Array object of pointers in native code is not supported and will throw a <xref:System.NotSupportedException> for several methods."
  example:
  - "The following code example shows how <xref:System.Array.Copy%2A?displayProperty=fullName> copies elements between an array of type integer and an array of type <xref:System.Object>.  \n  \n [!CODE [Classic Array Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array Example#1)]  \n  \n The following code example creates and initializes an Array and displays its properties and its elements.  \n  \n [!CODE [Classic Array Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array Example#2)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Array : ICloneable, System.Collections.IList, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.AsReadOnly``1(``0[])
  id: AsReadOnly``1(``0[])
  parent: System.Array
  langs:
  - csharp
  name: AsReadOnly(T[])
  nameWithType: Array.AsReadOnly(T[])
  fullName: System.Array.AsReadOnly(T[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection`1
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.BinarySearch(System.Array,System.Object)
  id: BinarySearch(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(Array,Object)
  nameWithType: Array.BinarySearch(Array,Object)
  fullName: System.Array.BinarySearch(Array,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable"> interface implemented by each element of the array and by the specified object.
  remarks: "This method does not support searching arrays that contain negative indexes.  must be sorted before calling this method.  \n  \n If the <xref:System.Array> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than  in the array. Otherwise, it is the index of the first element that is larger than .  \n  \n Either  or every element of  must implement the <xref:System.IComparable> interface, which is used for comparisons. The elements of  must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n> [!NOTE]\n>  If does not implement the <xref:System.IComparable> interface, the elements of  are not tested for <xref:System.IComparable> before the search begins. An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to , the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.  \n  \n> [!NOTE]\n>  For every element tested,  is passed to the appropriate <xref:System.IComparable> implementation, even if  is `null`. That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log ) operation, where  is the <xref:System.Array.Length%2A> of ."
  example:
  - "The following code example shows how to use <xref:System.Array.BinarySearch%2A> to locate a specific object in an <xref:System.Array>.  \n  \n> [!NOTE]\n>  The array is created with its elements in ascending sort order. The <xref:System.Array.BinarySearch%2A> method requires the array to be sorted in ascending order.  \n  \n [!CODE [Classic Array.BinarySearch Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.BinarySearch Example#1)]"
  syntax:
    content: public static int BinarySearch (Array array, object value);
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <see cref="T:System.Array"> to search.
    - id: value
      type: System.Object
      description: The object to search for.
    return:
      type: System.Int32
      description: The index of the specified  in the specified , if  is found; otherwise, a negative number. If  is not found and  is less than one or more elements in , the negative number returned is the bitwise complement of the index of the first element that is larger than . If  is not found and  is greater than all elements in , the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted , the return value can be incorrect and a negative number could be returned, even if  is present in .
  overload: System.Array.BinarySearch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(Array,Object,IComparer)
  nameWithType: Array.BinarySearch(Array,Object,IComparer)
  fullName: System.Array.BinarySearch(Array,Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.IComparer"> interface.
  remarks: "This method does not support searching arrays that contain negative indexes.  must be sorted before calling this method.  \n  \n If the <xref:System.Array> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than  in the array. Otherwise, it is the index of the first element that is larger than .  \n  \n The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName> as the comparer to perform case-insensitive string searches.  \n  \n If  is not `null`, the elements of  are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of  must already be sorted in increasing value according to the sort order defined by ; otherwise, the result might be incorrect.  \n  \n If is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of  must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n> [!NOTE]\n>  If  is `null` and  does not implement the <xref:System.IComparable> interface, the elements of  are not tested for <xref:System.IComparable> before the search begins. An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to , the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.  \n  \n> [!NOTE]\n>  For every element tested,  is passed to the appropriate <xref:System.IComparable> implementation, even if  is `null`. That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log ) operation, where  is the <xref:System.Array.Length%2A> of ."
  syntax:
    content: public static int BinarySearch (Array array, object value, System.Collections.IComparer comparer);
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <see cref="T:System.Array"> to search.
    - id: value
      type: System.Object
      description: The object to search for.
    - id: comparer
      type: System.Collections.IComparer
      description: "The <see cref=\"T:System.Collections.IComparer\"> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref:System.IComparable> implementation of each element."
    return:
      type: System.Int32
      description: The index of the specified  in the specified , if  is found; otherwise, a negative number. If  is not found and  is less than one or more elements in , the negative number returned is the bitwise complement of the index of the first element that is larger than . If  is not found and  is greater than all elements in , the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted , the return value can be incorrect and a negative number could be returned, even if  is present in .
  overload: System.Array.BinarySearch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(Array,Int32,Int32,Object)
  nameWithType: Array.BinarySearch(Array,Int32,Int32,Object)
  fullName: System.Array.BinarySearch(Array,Int32,Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable"> interface implemented by each element of the array and by the specified value.
  remarks: "This method does not support searching arrays that contain negative indexes.  must be sorted before calling this method.  \n  \n If the <xref:System.Array> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than  in the array. Otherwise, it is the index of the first element that is larger than .  \n  \n Either  or every element of  must implement the <xref:System.IComparable> interface, which is used for comparisons. The elements of  must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n> [!NOTE]\n>  If  does not implement the <xref:System.IComparable> interface, the elements of  are not tested for <xref:System.IComparable> before the search begins. An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to , the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception.  \n  \n> [!NOTE]\n>  For every element tested,  is passed to the appropriate <xref:System.IComparable> implementation, even if  is `null`. That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log ) operation, where  is ."
  syntax:
    content: public static int BinarySearch (Array array, int index, int length, object value);
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <see cref="T:System.Array"> to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: System.Object
      description: The object to search for.
    return:
      type: System.Int32
      description: The index of the specified  in the specified , if  is found; otherwise, a negative number. If  is not found and  is less than one or more elements in , the negative number returned is the bitwise complement of the index of the first element that is larger than . If  is not found and  is greater than all elements in , the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted , the return value can be incorrect and a negative number could be returned, even if  is present in .
  overload: System.Array.BinarySearch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(Array,Int32,Int32,Object,IComparer)
  nameWithType: Array.BinarySearch(Array,Int32,Int32,Object,IComparer)
  fullName: System.Array.BinarySearch(Array,Int32,Int32,Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.IComparer"> interface.
  remarks: "This method does not support searching arrays that contain negative indexes.  must be sorted before calling this method.  \n  \n If the <xref:System.Array> does not contain the specified value, the method returns a negative integer. You can apply the bitwise complement operator (~ in C#, `Not` in Visual Basic) to the negative result  to produce an index. If this index is one greater than the upper bound of the array, there are no elements larger than  in the array. Otherwise, it is the index of the first element that is larger than .  \n  \n The comparer customizes how the elements are compared. For example, you can use a <xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName> as the comparer to perform case-insensitive string searches.  \n  \n If  is not `null`, the elements of  are compared to the specified value using the specified <xref:System.Collections.IComparer> implementation. The elements of  must already be sorted in increasing value according to the sort order defined by ; otherwise, the result might be incorrect.  \n  \n If  is `null`, the comparison is done using the <xref:System.IComparable> implementation provided by the element itself or by the specified value. The elements of  must already be sorted in increasing value according to the sort order defined by the <xref:System.IComparable> implementation; otherwise, the result might be incorrect.  \n  \n> [!NOTE]\n>  If  is `null` and  does not implement the <xref:System.IComparable> interface, the elements of  are not tested for <xref:System.IComparable> before the search begins. An exception is thrown if the search encounters an element that does not implement <xref:System.IComparable>.  \n  \n Duplicate elements are allowed. If the <xref:System.Array> contains more than one element equal to , the method returns the index of only one of the occurrences, and not necessarily the first one.  \n  \n `null` can always be compared with any other reference type; therefore, comparisons with `null` do not generate an exception when using <xref:System.IComparable>.  \n  \n> [!NOTE]\n>  For every element tested,  is passed to the appropriate <xref:System.IComparable> implementation, even if  is `null`. That is, the <xref:System.IComparable> implementation determines how a given element compares to `null`.  \n  \n This method is an O(log ) operation, where  is ."
  syntax:
    content: public static int BinarySearch (Array array, int index, int length, object value, System.Collections.IComparer comparer);
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <see cref="T:System.Array"> to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: System.Object
      description: The object to search for.
    - id: comparer
      type: System.Collections.IComparer
      description: "The <see cref=\"T:System.Collections.IComparer\"> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref:System.IComparable> implementation of each element."
    return:
      type: System.Int32
      description: The index of the specified  in the specified , if  is found; otherwise, a negative number. If  is not found and  is less than one or more elements in , the negative number returned is the bitwise complement of the index of the first element that is larger than . If  is not found and  is greater than all elements in , the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted , the return value can be incorrect and a negative number could be returned, even if  is present in .
  overload: System.Array.BinarySearch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.BinarySearch``1(``0[],``0)
  id: BinarySearch``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(T[],T)
  nameWithType: Array.BinarySearch(T[],T)
  fullName: System.Array.BinarySearch(T[],T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int BinarySearch<T> (T[] array, T value);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.BinarySearch<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer`1)
  id: BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer`1)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(T[],T,IComparer<T>)
  nameWithType: Array.BinarySearch(T[],T,IComparer<T>)
  fullName: System.Array.BinarySearch(T[],T,IComparer<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int BinarySearch<T> (T[] array, T value, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: value
      type: T
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.BinarySearch<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(T[],Int32,Int32,T)
  nameWithType: Array.BinarySearch(T[],Int32,Int32,T)
  fullName: System.Array.BinarySearch(T[],Int32,Int32,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int BinarySearch<T> (T[] array, int index, int length, T value);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.BinarySearch<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer`1)
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer`1)
  parent: System.Array
  langs:
  - csharp
  name: BinarySearch(T[],Int32,Int32,T,IComparer<T>)
  nameWithType: Array.BinarySearch(T[],Int32,Int32,T,IComparer<T>)
  fullName: System.Array.BinarySearch(T[],Int32,Int32,T,IComparer<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int BinarySearch<T> (T[] array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
    - id: value
      type: T
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.BinarySearch<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Clear(System.Array,System.Int32,System.Int32)
  id: Clear(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Clear(Array,Int32,Int32)
  nameWithType: Array.Clear(Array,Int32,Int32)
  fullName: System.Array.Clear(Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sets a range of elements in an array to the default value of each element type.
  remarks: "This method resets each element in an array to the element type's default value. It sets elements of reference types (including <xref:System.String> elements) to `null`, and sets elements of value types to the default values shown in the following table.  \n  \n|Type|Value|  \n|----------|-----------|  \n|<xref:System.Boolean>|`false`|  \n|All integral and floating point numeric types|0 (zero)|  \n|<xref:System.DateTime>|<xref:System.DateTime.MinValue?displayProperty=fullName>|  \n|Other value types|Default value of the type's fields|  \n  \n The range of cleared elements wrap from row to row in a multi-dimensional array.  \n  \n This method only clears the values of the elements; it does not delete the elements themselves. An array has a fixed size; therefore, elements cannot be added or removed.  \n  \n This method is an O() operation, where  is ."
  example:
  - "The following example uses the Clear method to reset integer values in a one-dimensional, two-dimensional, and three-dimensional array.  \n  \n [!CODE [System.Array.Clear#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Clear#1)]  \n  \n The following example defines a `TimeZoneTime` structure that includes a <xref:System.TimeZoneInfo> field and a <xref:System.DateTimeOffset> field. It then calls the Clear method to clear one element in a two-element array of `TimeZoneTime` values. The method sets the value of the cleared element to the default value of a <xref:System.TimeZoneInfo> object, which is `null`, and the default value of a <xref:System.DateTimeOffset> object, which is <xref:System.DateTimeOffset.MinValue?displayProperty=fullName>.  \n  \n [!CODE [System.Array.Clear#2](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Clear#2)]"
  syntax:
    content: public static void Clear (Array array, int index, int length);
    parameters:
    - id: array
      type: System.Array
      description: The array whose elements need to be cleared.
    - id: index
      type: System.Int32
      description: The starting index of the range of elements to clear.
    - id: length
      type: System.Int32
      description: The number of elements to clear.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Clone
  id: Clone
  parent: System.Array
  langs:
  - csharp
  name: Clone()
  nameWithType: Array.Clone()
  fullName: System.Array.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a shallow copy of the <see cref="T:System.Array">.
  remarks: "A shallow copy of an <xref:System.Array> copies only the elements of the <xref:System.Array>, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new <xref:System.Array> point to the same objects that the references in the original <xref:System.Array> point to.  \n  \n In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n The clone is of the same <xref:System.Type> as the original <xref:System.Array>.  \n  \n This method is an O() operation, where  is <xref:System.Array.Length%2A>."
  example:
  - "The following code example clones a <xref:System.Globalization.CultureInfo?displayProperty=fullName> array and demonstrates the behavior of a shallow copy.  \n  \n [!CODE [System.Array.Clone#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Clone#1)]"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: A shallow copy of the <see cref="T:System.Array">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: ConstrainedCopy(Array,Int32,Array,Int32,Int32)
  nameWithType: Array.ConstrainedCopy(Array,Int32,Array,Int32,Int32)
  fullName: System.Array.ConstrainedCopy(Array,Int32,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Copies a range of elements from an <see cref="T:System.Array"> starting at the specified source index and pastes them to another <see cref="T:System.Array"> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.
  remarks: "The  and  parameters must have the same number of dimensions.  The  type must be the same as or derived from the  type; otherwise, an <xref:System.ArrayTypeMismatchException> is thrown.  Unlike <xref:System.Array.Copy%2A>, ConstrainedCopy verifies the compatibility of the array types before performing any operation.  \n  \n When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column),  must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.  \n  \n If  and  overlap, this method behaves as if the original values of  were preserved in a temporary location before  is overwritten.  \n  \n [C++]  \n  \n This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.  \n  \n The arrays can be reference-type arrays or value-type arrays.  If  and  are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed. A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n If this method throws an exception while copying, the  remains unchanged; therefore, ConstrainedCopy can be used within a constrained execution region (<xref:System.Runtime.ConstrainedExecution.Cer>).  \n  \n This method is an O() operation, where  is ."
  syntax:
    content: public static void ConstrainedCopy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <see cref="T:System.Array"> that contains the data to copy.
    - id: sourceIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the  at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <see cref="T:System.Array"> that receives the data.
    - id: destinationIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the  at which storing begins.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.ConvertAll``2(``0[],System.Converter`2)
  id: ConvertAll``2(``0[],System.Converter`2)
  parent: System.Array
  langs:
  - csharp
  name: ConvertAll(TInput[],Converter<TInput,TOutput>)
  nameWithType: Array.ConvertAll(TInput[],Converter<TInput,TOutput>)
  fullName: System.Array.ConvertAll(TInput[],Converter<TInput,TOutput>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static TOutput[] ConvertAll<TInput,TOutput> (TInput[] array, Converter<TInput,TOutput> converter);
    parameters:
    - id: array
      type: TInput[]
      description: To be added.
    - id: converter
      type: System.Converter`2
      description: To be added.
    return:
      type: TOutput[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Copy(System.Array,System.Array,System.Int32)
  id: Copy(System.Array,System.Array,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Copy(Array,Array,Int32)
  nameWithType: Array.Copy(Array,Array,Int32)
  fullName: System.Array.Copy(Array,Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Copies a range of elements from an <see cref="T:System.Array"> starting at the first element and pastes them into another <see cref="T:System.Array"> starting at the first element. The length is specified as a 32-bit integer.
  remarks: "The  and  parameters must have the same number of dimensions. In addition,  must already have been dimensioned and must have a sufficient number of elements to accommodate the copied data.  \n  \n When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).  \n  \n If  and  overlap, this method behaves as if the original values of  were preserved in a temporary location before  is overwritten.  \n  \n [C++]  \n  \n This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.  \n  \n The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  \n  \n-   When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  \n  \n-   When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied. When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.  \n  \n-   If  and  are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed. A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  \n  \n-   A type is compatible with itself.  \n  \n-   A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  \n  \n-   Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <xref:System.Convert>.  \n  \n-   A nonintrinsic (user-defined) value type is compatible only with itself.  \n  \n-   Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.  \n  \n If every element in  requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in , an <xref:System.InvalidCastException> is thrown.  \n  \n If this method throws an exception while copying, the state of  is undefined.  \n  \n This method is an O() operation, where  is ."
  syntax:
    content: public static void Copy (Array sourceArray, Array destinationArray, int length);
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <see cref="T:System.Array"> that contains the data to copy.
    - id: destinationArray
      type: System.Array
      description: The <see cref="T:System.Array"> that receives the data.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
  overload: System.Array.Copy*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Copy(System.Array,System.Array,System.Int64)
  id: Copy(System.Array,System.Array,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: Copy(Array,Array,Int64)
  nameWithType: Array.Copy(Array,Array,Int64)
  fullName: System.Array.Copy(Array,Array,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Copies a range of elements from an <see cref="T:System.Array"> starting at the first element and pastes them into another <see cref="T:System.Array"> starting at the first element. The length is specified as a 64-bit integer.
  remarks: "The  and  parameters must have the same number of dimensions. In addition,  must already have been dimensioned and must have a sufficient number of elements to accommodate the copied data.  \n  \n When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end to end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column).  \n  \n If  and  overlap, this method behaves as if the original values of  were preserved in a temporary location before  is overwritten.  \n  \n [C++]  \n  \n This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.  \n  \n The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  \n  \n-   When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  \n  \n-   When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied. When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.  \n  \n-   If  and  are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed. A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  \n  \n-   A type is compatible with itself.  \n  \n-   A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  \n  \n-   Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <xref:System.Convert>.  \n  \n-   A nonintrinsic (user-defined) value type is compatible only with itself.  \n  \n-   Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.  \n  \n If every element in  requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in , an <xref:System.InvalidCastException> is thrown.  \n  \n If this method throws an exception while copying, the state of  is undefined.  \n  \n This method is an O() operation, where  is ."
  syntax:
    content: public static void Copy (Array sourceArray, Array destinationArray, long length);
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <see cref="T:System.Array"> that contains the data to copy.
    - id: destinationArray
      type: System.Array
      description: The <see cref="T:System.Array"> that receives the data.
    - id: length
      type: System.Int64
      description: A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <xref:System.Int32.MaxValue?displayProperty=fullName>, inclusive.
  overload: System.Array.Copy*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Copy(Array,Int32,Array,Int32,Int32)
  nameWithType: Array.Copy(Array,Int32,Array,Int32,Int32)
  fullName: System.Array.Copy(Array,Int32,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Copies a range of elements from an <see cref="T:System.Array"> starting at the specified source index and pastes them to another <see cref="T:System.Array"> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
  remarks: "The  and  parameters must have the same number of dimensions. In addition,  must already have been dimensioned and must have a sufficient number of elements starting from the  position to accommodate the copied data.  \n  \n When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column),  must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.  \n  \n If  and  overlap, this method behaves as if the original values of  were preserved in a temporary location before  is overwritten.  \n  \n [C++]  \n  \n This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.  \n  \n The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  \n  \n-   When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  \n  \n-   When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied. When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.  \n  \n-   If  and  are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed. A shallow copy of an <xref:System.Array> is a new <xref:System.Array> containing references to the same elements as the original <xref:System.Array>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  \n  \n-   A type is compatible with itself.  \n  \n-   A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  \n  \n-   Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <xref:System.Convert>.  \n  \n-   A nonintrinsic (user-defined) value type is compatible only with itself.  \n  \n-   Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.  \n  \n If every element in  requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in , an <xref:System.InvalidCastException> is thrown.  \n  \n If this method throws an exception while copying, the state of  is undefined.  \n  \n This method is an O() operation, where  is ."
  example:
  - "The following code example shows how to copy from one <xref:System.Array> of type <xref:System.Object> to another <xref:System.Array> of type integer.  \n  \n [!CODE [Classic Array.Copy1 Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.Copy1 Example#1)]"
  syntax:
    content: public static void Copy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <see cref="T:System.Array"> that contains the data to copy.
    - id: sourceIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the  at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <see cref="T:System.Array"> that receives the data.
    - id: destinationIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the  at which storing begins.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
  overload: System.Array.Copy*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  id: Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: Copy(Array,Int64,Array,Int64,Int64)
  nameWithType: Array.Copy(Array,Int64,Array,Int64,Int64)
  fullName: System.Array.Copy(Array,Int64,Array,Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Copies a range of elements from an <see cref="T:System.Array"> starting at the specified source index and pastes them to another <see cref="T:System.Array"> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.
  remarks: "The  and  parameters must have the same number of dimensions. In addition,  must already have been dimensioned and must have a sufficient number of elements starting from the  position to accommodate the copied data.  \n  \n When copying between multidimensional arrays, the array behaves like a long one-dimensional array, where the rows (or columns) are conceptually laid end-to-end. For example, if an array has three rows (or columns) with four elements each, copying six elements from the beginning of the array would copy all four elements of the first row (or column) and the first two elements of the second row (or column). To start copying from the second element of the third row (or column),  must be the upper bound of the first row (or column) plus the length of the second row (or column) plus two.  \n  \n If  and  overlap, this method behaves as if the original values of  were preserved in a temporary location before  is overwritten.  \n  \n [C++]  \n  \n This method is equivalent to the standard C/C++ function `memmove`, not `memcpy`.  \n  \n The arrays can be reference-type arrays or value-type arrays. Type downcasting is performed, as required.  \n  \n-   When copying from a reference-type array to a value-type array, each element is unboxed and then copied. When copying from a value-type array to a reference-type array, each element is boxed and then copied.  \n  \n-   When copying from a reference-type or value-type array to an <xref:System.Object> array, an <xref:System.Object> is created to hold each value or reference and then copied. When copying from an <xref:System.Object> array to a reference-type or value-type array and the assignment is not possible, an <xref:System.InvalidCastException> is thrown.  \n  \n-   If  and  are both reference-type arrays or are both arrays of type <xref:System.Object>, a shallow copy is performed. A shallow copy of an <xref:System.Array> is a new <xref:System.Array>containing references to the same elements as the original <xref:System.Array>. The elements themselves or anything referenced by the elements are not copied. In contrast, a deep copy of an <xref:System.Array> copies the elements and everything directly or indirectly referenced by the elements.  \n  \n An <xref:System.ArrayTypeMismatchException> is thrown if the arrays are of incompatible types. Type compatibility is defined as follows:  \n  \n-   A type is compatible with itself.  \n  \n-   A value type is compatible with <xref:System.Object> and with an interface type implemented by that value type. A value type is considered connected to an interface only if it implements that interface directly. Disconnected types are not compatible.  \n  \n-   Two intrinsic (predefined) value types are compatible if copying from the source type to the destination type is a widening conversion. A widening conversion never loses information, whereas a narrowing conversion can lose information. For example, converting a 32-bit signed integer to a 64-bit signed integer is a widening conversion, and converting a 64-bit signed integer to a 32-bit signed integer is a narrowing conversion. For more information about conversions, see <xref:System.Convert>.  \n  \n-   A nonintrinsic (user-defined) value type is compatible only with itself.  \n  \n-   Enumerations have an implicit conversion to <xref:System.Enum> and to their underlying type.  \n  \n If every element in  requires a downcast (for example, from a base class to a derived class or from an interface to an object) and one or more elements cannot be cast to the corresponding type in , an <xref:System.InvalidCastException> is thrown.  \n  \n If this method throws an exception while copying, the state of  is undefined.  \n  \n This method is an O() operation, where  is ."
  example:
  - "The following code example shows how to copy from one <xref:System.Array> of type <xref:System.Object> to another <xref:System.Array> of type integer.  \n  \n [!CODE [Classic Array.Copy1 Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.Copy1 Example#1)]"
  syntax:
    content: public static void Copy (Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length);
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <see cref="T:System.Array"> that contains the data to copy.
    - id: sourceIndex
      type: System.Int64
      description: A 64-bit integer that represents the index in the  at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <see cref="T:System.Array"> that receives the data.
    - id: destinationIndex
      type: System.Int64
      description: A 64-bit integer that represents the index in the  at which storing begins.
    - id: length
      type: System.Int64
      description: A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <xref:System.Int32.MaxValue?displayProperty=fullName>, inclusive.
  overload: System.Array.Copy*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: Array.CopyTo(Array,Int32)
  fullName: System.Array.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 32-bit integer.
  remarks: "This method copies all the elements of the current array instance to the  destination array, starting at index . The  destination array must already have been dimensioned and must have a sufficient number of elements to accommodate the copied elements. Otherwise, the method throws an exception.  \n  \n This method supports the <xref:System.Collections.ICollection?displayProperty=fullName> interface. If implementing <xref:System.Collections.ICollection?displayProperty=fullName> is not explicitly required, use <xref:System.Array.Copy%2A> to avoid an extra indirection.  \n  \n If this method throws an exception while copying, the state of  is undefined.  \n  \n This method is an O() operation, where  is <xref:System.Array.Length%2A>.It performs a shallow copy only."
  example:
  - "The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array>.  \n  \n [!CODE [Classic Array.CopyTo Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.CopyTo Example#1)]  \n  \n The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array> with a nonzero lower bound. Note that the entire source <xref:System.Array> is copied, including empty elements that overwrite existing elements in the target <xref:System.Array>.  \n  \n [!CODE [Classic Array.CopyTo Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.CopyTo Example#2)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from the current array.
    - id: index
      type: System.Int32
      description: A 32-bit integer that represents the index in  at which copying begins.
  overload: System.Array.CopyTo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.CopyTo(System.Array,System.Int64)
  id: CopyTo(System.Array,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: CopyTo(Array,Int64)
  nameWithType: Array.CopyTo(Array,Int64)
  fullName: System.Array.CopyTo(Array,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 64-bit integer.
  remarks: "This method copies all the elements of the current array instance to the  destination array, starting at index . The  destination array must already have been dimensioned and must have a sufficient number of elements to accommodate the copied elements. Otherwise, the method throws an exception.  \n  \n This method supports the <xref:System.Collections.ICollection?displayProperty=fullName> interface. If implementing <xref:System.Collections.ICollection?displayProperty=fullName> is not explicitly required, use <xref:System.Array.Copy%2A> to avoid an extra indirection.  \n  \n If this method throws an exception while copying, the state of  is undefined.  \n  \n This method is an O() operation, where  is <xref:System.Array.Length%2A>.It performs a shallow copy only."
  example:
  - "The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array>.  \n  \n [!CODE [Classic Array.CopyTo Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.CopyTo Example#1)]  \n  \n The following code example shows how to copy an <xref:System.Array> to another <xref:System.Array> with a nonzero lower bound. Note that the entire source <xref:System.Array> is copied, including empty elements that overwrite existing elements in the target <xref:System.Array>.  \n  \n [!CODE [Classic Array.CopyTo Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.CopyTo Example#2)]"
  syntax:
    content: public void CopyTo (Array array, long index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from the current array.
    - id: index
      type: System.Int64
      description: A 64-bit integer that represents the index in  at which copying begins.
  overload: System.Array.CopyTo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.CreateInstance(System.Type,System.Int32)
  id: CreateInstance(System.Type,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type,Int32)
  nameWithType: Array.CreateInstance(Type,Int32)
  fullName: System.Array.CreateInstance(Type,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a one-dimensional <see cref="T:System.Array"> of the specified <xref:System.Type> and length, with zero-based indexing.
  remarks: "Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O() operation, where  is ."
  example:
  - "The following code example shows how to create and initialize a one-dimensional <xref:System.Array>.  \n  \n [!CODE [Classic Array.CreateInstance Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.CreateInstance Example#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, int length);
    parameters:
    - id: elementType
      type: System.Type
      description: The <see cref="T:System.Type"> of the <xref:System.Array> to create.
    - id: length
      type: System.Int32
      description: The size of the <see cref="T:System.Array"> to create.
    return:
      type: System.Array
      description: A new one-dimensional <see cref="T:System.Array"> of the specified <xref:System.Type> with the specified length, using zero-based indexing.
  overload: System.Array.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.CreateInstance(System.Type,System.Int32[])
  id: CreateInstance(System.Type,System.Int32[])
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type,Int32[])
  nameWithType: Array.CreateInstance(Type,Int32[])
  fullName: System.Array.CreateInstance(Type,Int32[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a multidimensional <see cref="T:System.Array"> of the specified <xref:System.Type> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.
  remarks: "Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n The number of elements in the  array must equal the number of dimensions in the new <xref:System.Array>. Each element of the  array must specify the length of the corresponding dimension in the new <xref:System.Array>.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O() operation, where  is the product of all values in ."
  example:
  - "The following code example shows how to create and initialize a multidimensional <xref:System.Array>.  \n  \n [!CODE [Classic Array.CreateInstance3 Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, int[] lengths);
    parameters:
    - id: elementType
      type: System.Type
      description: The <see cref="T:System.Type"> of the <xref:System.Array> to create.
    - id: lengths
      type: System.Int32[]
      description: An array of 32-bit integers that represent the size of each dimension of the <see cref="T:System.Array"> to create.
    return:
      type: System.Array
      description: A new multidimensional <see cref="T:System.Array"> of the specified <xref:System.Type> with the specified length for each dimension, using zero-based indexing.
  overload: System.Array.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.CreateInstance(System.Type,System.Int64[])
  id: CreateInstance(System.Type,System.Int64[])
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type,Int64[])
  nameWithType: Array.CreateInstance(Type,Int64[])
  fullName: System.Array.CreateInstance(Type,Int64[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a multidimensional <see cref="T:System.Array"> of the specified <xref:System.Type> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 64-bit integers.
  remarks: "Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n The number of elements in the  array must equal the number of dimensions in the new <xref:System.Array>. Each element of the  array must specify the length of the corresponding dimension in the new <xref:System.Array>.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O() operation, where  is the product of all values in ."
  example:
  - "The following code example shows how to create and initialize a multidimensional <xref:System.Array>.  \n  \n [!CODE [Classic Array.CreateInstance3 Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.CreateInstance3 Example#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, long[] lengths);
    parameters:
    - id: elementType
      type: System.Type
      description: The <see cref="T:System.Type"> of the <xref:System.Array> to create.
    - id: lengths
      type: System.Int64[]
      description: An array of 64-bit integers that represent the size of each dimension of the <see cref="T:System.Array"> to create. Each integer in the array must be between zero and <xref:System.Int32.MaxValue?displayProperty=fullName>, inclusive.
    return:
      type: System.Array
      description: A new multidimensional <see cref="T:System.Array"> of the specified <xref:System.Type> with the specified length for each dimension, using zero-based indexing.
  overload: System.Array.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.CreateInstance(System.Type,System.Int32,System.Int32)
  id: CreateInstance(System.Type,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type,Int32,Int32)
  nameWithType: Array.CreateInstance(Type,Int32,Int32)
  fullName: System.Array.CreateInstance(Type,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a two-dimensional <see cref="T:System.Array"> of the specified <xref:System.Type> and dimension lengths, with zero-based indexing.
  remarks: "Unlike most classes, <xref:System.Array> provides the<xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O() operation, where  is the product of  and ."
  example:
  - "The following code example shows how to create and initialize a two-dimensional <xref:System.Array>.  \n  \n [!CODE [Classic Array.CreateInstance1 Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.CreateInstance1 Example#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, int length1, int length2);
    parameters:
    - id: elementType
      type: System.Type
      description: The <see cref="T:System.Type"> of the <xref:System.Array> to create.
    - id: length1
      type: System.Int32
      description: The size of the first dimension of the <see cref="T:System.Array"> to create.
    - id: length2
      type: System.Int32
      description: The size of the second dimension of the <see cref="T:System.Array"> to create.
    return:
      type: System.Array
      description: A new two-dimensional <see cref="T:System.Array"> of the specified <xref:System.Type> with the specified length for each dimension, using zero-based indexing.
  overload: System.Array.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  id: CreateInstance(System.Type,System.Int32[],System.Int32[])
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type,Int32[],Int32[])
  nameWithType: Array.CreateInstance(Type,Int32[],Int32[])
  fullName: System.Array.CreateInstance(Type,Int32[],Int32[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a multidimensional <see cref="T:System.Array"> of the specified <xref:System.Type> and dimension lengths, with the specified lower bounds.
  remarks: "Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n The  and  arrays must have the same number of elements. The number of elements in the  array must equal the number of dimensions in the new <xref:System.Array>.  \n  \n Each element of the  array must specify the length of the corresponding dimension in the new <xref:System.Array>.  \n  \n Each element of the  array must specify the lower bound of the corresponding dimension in the new <xref:System.Array>. Generally, the .NET Framework class library and many programming languages do not handle nonzero lower bounds.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O() operation, where  is the product of all values in ."
  example:
  - "The following code example shows how to create and initialize a multidimensional <xref:System.Array> with specified lower bounds.  \n  \n [!CODE [Classic Array.CreateInstance4 Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.CreateInstance4 Example#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, int[] lengths, int[] lowerBounds);
    parameters:
    - id: elementType
      type: System.Type
      description: The <see cref="T:System.Type"> of the <xref:System.Array> to create.
    - id: lengths
      type: System.Int32[]
      description: A one-dimensional array that contains the size of each dimension of the <see cref="T:System.Array"> to create.
    - id: lowerBounds
      type: System.Int32[]
      description: A one-dimensional array that contains the lower bound (starting index) of each dimension of the <see cref="T:System.Array"> to create.
    return:
      type: System.Array
      description: A new multidimensional <see cref="T:System.Array"> of the specified <xref:System.Type> with the specified length and lower bound for each dimension.
  overload: System.Array.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)
  id: CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: CreateInstance(Type,Int32,Int32,Int32)
  nameWithType: Array.CreateInstance(Type,Int32,Int32,Int32)
  fullName: System.Array.CreateInstance(Type,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a three-dimensional <see cref="T:System.Array"> of the specified <xref:System.Type> and dimension lengths, with zero-based indexing.
  remarks: "Unlike most classes, <xref:System.Array> provides the <xref:System.Array.CreateInstance%2A> method, instead of public constructors, to allow for late bound access.  \n  \n Reference-type elements are initialized to `null`. Value-type elements are initialized to zero.  \n  \n This method is an O() operation, where  is the product of , , and ."
  example:
  - "The following code example shows how to create and initialize a three-dimensional <xref:System.Array>.  \n  \n [!CODE [Classic Array.CreateInstance2 Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.CreateInstance2 Example#1)]"
  syntax:
    content: public static Array CreateInstance (Type elementType, int length1, int length2, int length3);
    parameters:
    - id: elementType
      type: System.Type
      description: The <see cref="T:System.Type"> of the <xref:System.Array> to create.
    - id: length1
      type: System.Int32
      description: The size of the first dimension of the <see cref="T:System.Array"> to create.
    - id: length2
      type: System.Int32
      description: The size of the second dimension of the <see cref="T:System.Array"> to create.
    - id: length3
      type: System.Int32
      description: The size of the third dimension of the <see cref="T:System.Array"> to create.
    return:
      type: System.Array
      description: A new three-dimensional <see cref="T:System.Array"> of the specified <xref:System.Type> with the specified length for each dimension, using zero-based indexing.
  overload: System.Array.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Empty``1
  id: Empty``1
  parent: System.Array
  langs:
  - csharp
  name: Empty()
  nameWithType: Array.Empty()
  fullName: System.Array.Empty()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static T[] Empty<T> ();
    parameters: []
    return:
      type: T[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Exists``1(``0[],System.Predicate`1)
  id: Exists``1(``0[],System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: Exists(T[],Predicate<T>)
  nameWithType: Array.Exists(T[],Predicate<T>)
  fullName: System.Array.Exists(T[],Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static bool Exists<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Find``1(``0[],System.Predicate`1)
  id: Find``1(``0[],System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: Find(T[],Predicate<T>)
  nameWithType: Array.Find(T[],Predicate<T>)
  fullName: System.Array.Find(T[],Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static T Find<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: T
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.FindAll``1(``0[],System.Predicate`1)
  id: FindAll``1(``0[],System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: FindAll(T[],Predicate<T>)
  nameWithType: Array.FindAll(T[],Predicate<T>)
  fullName: System.Array.FindAll(T[],Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static T[] FindAll<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: T[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.FindIndex``1(``0[],System.Predicate`1)
  id: FindIndex``1(``0[],System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: FindIndex(T[],Predicate<T>)
  nameWithType: Array.FindIndex(T[],Predicate<T>)
  fullName: System.Array.FindIndex(T[],Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int FindIndex<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.FindIndex<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Predicate`1)
  id: FindIndex``1(``0[],System.Int32,System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: FindIndex(T[],Int32,Predicate<T>)
  nameWithType: Array.FindIndex(T[],Int32,Predicate<T>)
  fullName: System.Array.FindIndex(T[],Int32,Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int FindIndex<T> (T[] array, int startIndex, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.FindIndex<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate`1)
  id: FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: FindIndex(T[],Int32,Int32,Predicate<T>)
  nameWithType: Array.FindIndex(T[],Int32,Int32,Predicate<T>)
  fullName: System.Array.FindIndex(T[],Int32,Int32,Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int FindIndex<T> (T[] array, int startIndex, int count, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.FindIndex<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.FindLast``1(``0[],System.Predicate`1)
  id: FindLast``1(``0[],System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: FindLast(T[],Predicate<T>)
  nameWithType: Array.FindLast(T[],Predicate<T>)
  fullName: System.Array.FindLast(T[],Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static T FindLast<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: T
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.FindLastIndex``1(``0[],System.Predicate`1)
  id: FindLastIndex``1(``0[],System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: FindLastIndex(T[],Predicate<T>)
  nameWithType: Array.FindLastIndex(T[],Predicate<T>)
  fullName: System.Array.FindLastIndex(T[],Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int FindLastIndex<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.FindLastIndex<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate`1)
  id: FindLastIndex``1(``0[],System.Int32,System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: FindLastIndex(T[],Int32,Predicate<T>)
  nameWithType: Array.FindLastIndex(T[],Int32,Predicate<T>)
  fullName: System.Array.FindLastIndex(T[],Int32,Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int FindLastIndex<T> (T[] array, int startIndex, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.FindLastIndex<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate`1)
  id: FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: FindLastIndex(T[],Int32,Int32,Predicate<T>)
  nameWithType: Array.FindLastIndex(T[],Int32,Int32,Predicate<T>)
  fullName: System.Array.FindLastIndex(T[],Int32,Int32,Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int FindLastIndex<T> (T[] array, int startIndex, int count, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.FindLastIndex<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.ForEach``1(``0[],System.Action`1)
  id: ForEach``1(``0[],System.Action`1)
  parent: System.Array
  langs:
  - csharp
  name: ForEach(T[],Action<T>)
  nameWithType: Array.ForEach(T[],Action<T>)
  fullName: System.Array.ForEach(T[],Action<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void ForEach<T> (T[] array, Action<T> action);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: action
      type: System.Action`1
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetEnumerator
  id: GetEnumerator
  parent: System.Array
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Array.GetEnumerator()
  fullName: System.Array.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an <see cref="T:System.Collections.IEnumerator"> for the <xref:System.Array>.
  remarks: "[Visual Basic, C#]  \n  \n The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example shows how to use GetEnumerator to list the elements of an array.  \n  \n [!CODE [System.Array_GetEnumerator#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetEnumerator#1)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <see cref="T:System.Collections.IEnumerator"> for the <xref:System.Array>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetLength(System.Int32)
  id: GetLength(System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetLength(Int32)
  nameWithType: Array.GetLength(Int32)
  fullName: System.Array.GetLength(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array">.
  remarks: "An example of GetLength is `GetLength(0)`, which returns the number of elements in the first dimension of the <xref:System.Array>.  \n  \n This method is an O(1) operation."
  example:
  - "The following example shows how to use GetLength to display the dimensions of two arrays with different ranks.  \n  \n [!CODE [System.Array.GetLength#1](../CodeSnippet/VS_Snippets_CLR_System/system.array.getlength#1)]"
  syntax:
    content: public int GetLength (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the <see cref="T:System.Array"> whose length needs to be determined.
    return:
      type: System.Int32
      description: A 32-bit integer that represents the number of elements in the specified dimension.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetLongLength(System.Int32)
  id: GetLongLength(System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetLongLength(Int32)
  nameWithType: Array.GetLongLength(Int32)
  fullName: System.Array.GetLongLength(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a 64-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array">.
  remarks: "An example of GetLongLength is `GetLongLength(0)`, which returns the number of elements in the first dimension of the <xref:System.Array>.  \n  \n This method is an O(1) operation."
  syntax:
    content: public long GetLongLength (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the <see cref="T:System.Array"> whose length needs to be determined.
    return:
      type: System.Int64
      description: A 64-bit integer that represents the number of elements in the specified dimension.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetLowerBound(System.Int32)
  id: GetLowerBound(System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetLowerBound(Int32)
  nameWithType: Array.GetLowerBound(Int32)
  fullName: System.Array.GetLowerBound(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the index of the first element of the specified dimension in the array.
  remarks: "`GetLowerBound(0)` returns the starting index of the first dimension of the array, and `GetLowerBound(Rank - 1)` returns the starting index of the last dimension of the array.  \n  \n The GetLowerBound method always returns a value that indicates the index of the lower bound of the array, even if the array is empty.  \n  \n Note that, although most arrays in the .NET Framework are zero-based (that is, the GetLowerBound method returns zero for each dimension of an array), the .NET Framework does support arrays that are not zero-based. Such arrays can be created with the [CreateInstance(Type, Int32\\[\\], Int32\\[\\])](assetId:///M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])?qualifyHint=False&autoUpgrade=False) method, and can also be returned from unmanaged code.  \n  \n This method is an O(1) operation."
  example:
  - "The following example uses the GetLowerBound and <xref:System.Array.GetUpperBound%2A> methods to display the bounds of a one-dimensional and two-dimensional array and to display the values of their array elements.  \n  \n [!CODE [System.Array.GetUpperBound#1](../CodeSnippet/VS_Snippets_CLR_System/system.array.getupperbound#1)]"
  syntax:
    content: public int GetLowerBound (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the array whose starting index needs to be determined.
    return:
      type: System.Int32
      description: The index of the first element of the specified dimension in the array.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetUpperBound(System.Int32)
  id: GetUpperBound(System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetUpperBound(Int32)
  nameWithType: Array.GetUpperBound(Int32)
  fullName: System.Array.GetUpperBound(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the index of the last element of the specified dimension in the array.
  remarks: "`GetUpperBound(0)` returns the last index in the first dimension of the array, and `GetUpperBound(Rank - 1)` returns the last index of the last dimension of the array.  \n  \n This method is an O(1) operation."
  example:
  - "The following example uses the <xref:System.Array.GetLowerBound%2A> and GetUpperBound methods to display the bounds of a one-dimensional and two-dimensional array and to display the values of their array elements.  \n  \n [!CODE [System.Array.GetUpperBound#1](../CodeSnippet/VS_Snippets_CLR_System/system.array.getupperbound#1)]"
  syntax:
    content: public int GetUpperBound (int dimension);
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the array whose upper bound needs to be determined.
    return:
      type: System.Int32
      description: The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int32)
  nameWithType: Array.GetValue(Int32)
  fullName: System.Array.GetValue(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value at the specified position in the one-dimensional <see cref="T:System.Array">. The index is specified as a 32-bit integer.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of  is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public object GetValue (int index);
    parameters:
    - id: index
      type: System.Int32
      description: A 32-bit integer that represents the position of the <see cref="T:System.Array"> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the one-dimensional <see cref="T:System.Array">.
  overload: System.Array.GetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetValue(System.Int32[])
  id: GetValue(System.Int32[])
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int32[])
  nameWithType: Array.GetValue(Int32[])
  fullName: System.Array.GetValue(Int32[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value at the specified position in the multidimensional <see cref="T:System.Array">. The indexes are specified as an array of 32-bit integers.
  remarks: "The number of elements in  must equal the number of dimensions in the <xref:System.Array>. All elements in the  array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.  \n  \n The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public object GetValue (int[] indices);
    parameters:
    - id: indices
      type: System.Int32[]
      description: A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array"> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the multidimensional <see cref="T:System.Array">.
  overload: System.Array.GetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetValue(System.Int64)
  id: GetValue(System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int64)
  nameWithType: Array.GetValue(Int64)
  fullName: System.Array.GetValue(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value at the specified position in the one-dimensional <see cref="T:System.Array">. The index is specified as a 64-bit integer.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of  is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public object GetValue (long index);
    parameters:
    - id: index
      type: System.Int64
      description: A 64-bit integer that represents the position of the <see cref="T:System.Array"> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the one-dimensional <see cref="T:System.Array">.
  overload: System.Array.GetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetValue(System.Int64[])
  id: GetValue(System.Int64[])
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int64[])
  nameWithType: Array.GetValue(Int64[])
  fullName: System.Array.GetValue(Int64[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value at the specified position in the multidimensional <see cref="T:System.Array">. The indexes are specified as an array of 64-bit integers.
  remarks: "The number of elements in  must equal the number of dimensions in the <xref:System.Array>. All elements in the  array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.  \n  \n The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public object GetValue (long[] indices);
    parameters:
    - id: indices
      type: System.Int64[]
      description: A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the <see cref="T:System.Array"> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the multidimensional <see cref="T:System.Array">.
  overload: System.Array.GetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetValue(System.Int32,System.Int32)
  id: GetValue(System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int32,Int32)
  nameWithType: Array.GetValue(Int32,Int32)
  fullName: System.Array.GetValue(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value at the specified position in the two-dimensional <see cref="T:System.Array">. The indexes are specified as 32-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public object GetValue (int index1, int index2);
    parameters:
    - id: index1
      type: System.Int32
      description: A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"> element to get.
    - id: index2
      type: System.Int32
      description: A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the two-dimensional <see cref="T:System.Array">.
  overload: System.Array.GetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetValue(System.Int64,System.Int64)
  id: GetValue(System.Int64,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int64,Int64)
  nameWithType: Array.GetValue(Int64,Int64)
  fullName: System.Array.GetValue(Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value at the specified position in the two-dimensional <see cref="T:System.Array">. The indexes are specified as 64-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public object GetValue (long index1, long index2);
    parameters:
    - id: index1
      type: System.Int64
      description: A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"> element to get.
    - id: index2
      type: System.Int64
      description: A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the two-dimensional <see cref="T:System.Array">.
  overload: System.Array.GetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetValue(System.Int32,System.Int32,System.Int32)
  id: GetValue(System.Int32,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int32,Int32,Int32)
  nameWithType: Array.GetValue(Int32,Int32,Int32)
  fullName: System.Array.GetValue(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value at the specified position in the three-dimensional <see cref="T:System.Array">. The indexes are specified as 32-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public object GetValue (int index1, int index2, int index3);
    parameters:
    - id: index1
      type: System.Int32
      description: A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"> element to get.
    - id: index2
      type: System.Int32
      description: A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"> element to get.
    - id: index3
      type: System.Int32
      description: A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array"> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the three-dimensional <see cref="T:System.Array">.
  overload: System.Array.GetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.GetValue(System.Int64,System.Int64,System.Int64)
  id: GetValue(System.Int64,System.Int64,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: GetValue(Int64,Int64,Int64)
  nameWithType: Array.GetValue(Int64,Int64,Int64)
  fullName: System.Array.GetValue(Int64,Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value at the specified position in the three-dimensional <see cref="T:System.Array">. The indexes are specified as 64-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public object GetValue (long index1, long index2, long index3);
    parameters:
    - id: index1
      type: System.Int64
      description: A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"> element to get.
    - id: index2
      type: System.Int64
      description: A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"> element to get.
    - id: index3
      type: System.Int64
      description: A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array"> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the three-dimensional <see cref="T:System.Array">.
  overload: System.Array.GetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.IndexOf(System.Array,System.Object)
  id: IndexOf(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf(Array,Object)
  nameWithType: Array.IndexOf(Array,Object)
  fullName: System.Array.IndexOf(Array,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
  remarks: "This method searches all the elements of a one-dimensional arrayfor . To determine whether  exists in , the method performs an equality comparison by calling each element's `Equals` method until it finds a match. This means that if the element overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method, that override is called.  \n  \n Because most arrays have a lower bound of zero, this method generally returns –1 if isn’t found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName>(0x80000000) and  isn’t found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName> (0x7FFFFFFF).  \n  \n This method is an O() operation, where  is the <xref:System.Array.Length%2A> of ."
  example:
  - "The example calls the following three overloads of the IndexOfmethod to find the index of a string in a string array:  \n  \n-   IndexOf, to determine the first occurrence of the string \"the\" in a string array.  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>, to determine the first occurrence of the string \"the\" in the fourth to the last elements of a string array.  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>, to determine the first occurrence of the string \"the\" in a string array from the element that follows the last successful match to the end of the array.  \n  \n [!CODE [Classic Array.IndexOf Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.IndexOf Example#1)]"
  syntax:
    content: public static int IndexOf (Array array, object value);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to search.
    - id: value
      type: System.Object
      description: The object to locate in .
    return:
      type: System.Int32
      description: The index of the first occurrence of  in , if found; otherwise, the lower bound of the array minus 1.
  overload: System.Array.IndexOf*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32)
  id: IndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf(Array,Object,Int32)
  nameWithType: Array.IndexOf(Array,Object,Int32)
  fullName: System.Array.IndexOf(Array,Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.
  remarks: "This method searches a one-dimensional array from the element at index to the last element. To determine whether  exists in , the method performs an equality comparison by calling the `Equals` method of every element until it finds a match. This means that if the element overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method, that override is called.  \n  \n Because most arrays have a lower bound of zero, this method generally returns –1 if  isn’t found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName>(0x80000000) and  isn’t found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName> (0x7FFFFFFF).  \n  \n If  equals <xref:System.Array.Length%2A?displayProperty=fullName>,the method returns -1. If  is greater than <xref:System.Array.Length%2A?displayProperty=fullName>, the method throws an <xref:System.ArgumentOutOfRangeException>.  \n  \n This method is an O() operation, where  is the number of elements from  to the end of ."
  example:
  - "The example calls the following three overloads of the <xref:System.Array.IndexOf%2A> method to find the index of a string in a string array:  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>, to determine the first occurrence of the string \"the\" in a string array.  \n  \n-   IndexOf, to determine the first occurrence of the string \"the\" in the fourth to the last elements of a string array.  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%2CSystem.Int32%29>, to determine the first occurrence of the string \"the\" in a string array from the element that follows the last successful match to the end of the array.  \n  \n [!CODE [Classic Array.IndexOf Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.IndexOf Example#1)]"
  syntax:
    content: public static int IndexOf (Array array, object value, int startIndex);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to search.
    - id: value
      type: System.Object
      description: The object to locate in .
    - id: startIndex
      type: System.Int32
      description: The starting index of the search. 0 (zero) is valid in an empty array.
    return:
      type: System.Int32
      description: The index of the first occurrence of , if it’s found, within the range of elements in  that extends from  to the last element; otherwise, the lower bound of the array minus 1.
  overload: System.Array.IndexOf*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf(Array,Object,Int32,Int32)
  nameWithType: Array.IndexOf(Array,Object,Int32,Int32)
  fullName: System.Array.IndexOf(Array,Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.
  remarks: "This method searches the elements of a one-dimensional arrayfrom to  plus  minus 1, if  is greater than 0. To determine whether  exists in , the method performs an equality comparison by calling the `Equals` method of every element until it finds a match. This means that if the element overrides the <xref:System.Object.Equals%2A?displayProperty=fullName> method, that override is called.  \n  \n Becausemost arrays have a lower bound of zero, this method generally returns –1 when  isn’t found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName> (0x80000000) and  isn’t found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName> (0x7FFFFFFF).  \n  \n If  equals <xref:System.Array.Length%2A?displayProperty=fullName>, the method returns -1. If  is greater than <xref:System.Array.Length%2A?displayProperty=fullName>, the method throws an <xref:System.ArgumentOutOfRangeException>.  \n  \n This method is an O() operation, where  is ."
  example:
  - "The example calls the following three overloads of the <xref:System.Array.IndexOf%2A> method to find the index of a string in a string array:  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%29>, to determine the first occurrence of the string \"the\" in a string array.  \n  \n-   <xref:System.Array.IndexOf%28System.Array%2CSystem.Object%2CSystem.Int32%29>, to determine the first occurrence of the string \"the\" in the fourth to the last elements of a string array.  \n  \n-   IndexOf, to determine the first occurrence of the string \"the\" in a string array from the element that follows the last successful match to the end of the array. To determine the value of the  argument, it subtracts the upper bound of the array from the starting index and adds one.  \n  \n [!CODE [Classic Array.IndexOf Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.IndexOf Example#1)]"
  syntax:
    content: public static int IndexOf (Array array, object value, int startIndex, int count);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to search.
    - id: value
      type: System.Object
      description: The object to locate in .
    - id: startIndex
      type: System.Int32
      description: The starting index of the search. 0 (zero) is valid in an empty array.
    - id: count
      type: System.Int32
      description: The number of elements to search.
    return:
      type: System.Int32
      description: The index of the first occurrence of , if it’s found in the  from index  to  +  - 1; otherwise, the lower bound of the array minus 1.
  overload: System.Array.IndexOf*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.IndexOf``1(``0[],``0)
  id: IndexOf``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf(T[],T)
  nameWithType: Array.IndexOf(T[],T)
  fullName: System.Array.IndexOf(T[],T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int IndexOf<T> (T[] array, T value);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.IndexOf<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf(T[],T,Int32)
  nameWithType: Array.IndexOf(T[],T,Int32)
  fullName: System.Array.IndexOf(T[],T,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int IndexOf<T> (T[] array, T value, int startIndex);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: value
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.IndexOf<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: IndexOf(T[],T,Int32,Int32)
  nameWithType: Array.IndexOf(T[],T,Int32,Int32)
  fullName: System.Array.IndexOf(T[],T,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int IndexOf<T> (T[] array, T value, int startIndex, int count);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: value
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.IndexOf<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Initialize
  id: Initialize
  parent: System.Array
  langs:
  - csharp
  name: Initialize()
  nameWithType: Array.Initialize()
  fullName: System.Array.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes every element of the value-type <see cref="T:System.Array"> by calling the default constructor of the value type.
  remarks: "This method is designed to help compilers support value-type arrays; most users do not need this method. It must not be used on reference-type arrays.  \n  \n If the <xref:System.Array> is not a value-type <xref:System.Array> or if the value type does not have a default constructor, the <xref:System.Array> is not modified.  \n  \n The value-type <xref:System.Array> can have any lower bound and any number of dimensions.  \n  \n This method is an O() operation, where  is <xref:System.Array.Length%2A>.  \n  \n> [!CAUTION]\n>  You can use this method only on value types that have constructors; however, value types that are native to C# do not have constructors."
  syntax:
    content: public void Initialize ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.IsFixedSize
  id: IsFixedSize
  parent: System.Array
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: Array.IsFixedSize
  fullName: System.Array.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the <see cref="T:System.Array"> has a fixed size.
  remarks: "<xref:System.Array> implements the IsFixedSize property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface.  \n  \n An array with a fixed size does not allow the addition or removal of elements after the array is created, but it allows the modification of existing elements.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.IsReadOnly
  id: IsReadOnly
  parent: System.Array
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: Array.IsReadOnly
  fullName: System.Array.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the <see cref="T:System.Array"> is read-only.
  remarks: "<xref:System.Array> implements the IsReadOnly property because it is required by the <xref:System.Collections.IList?displayProperty=fullName> interface. An array that is read-only does not allow the addition, removal, or modification of elements after the array is created.  \n  \n If you require a read-only collection, use a <xref:System.Collections> class that implements the <xref:System.Collections.IList?displayProperty=fullName> interface.  \n  \n If you cast or convert an array to an <xref:System.Collections.IList> interface object, the <xref:System.Collections.IList.IsReadOnly%2A?displayProperty=fullName> property returns `false`. However, if you cast or convert an array to a <xref:System.Collections.Generic.IList%601> interface, the `IsReadOnly` property returns `true`.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.IsSynchronized
  id: IsSynchronized
  parent: System.Array
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: Array.IsSynchronized
  fullName: System.Array.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether access to the <see cref="T:System.Array"> is synchronized (thread safe).
  remarks: "<xref:System.Array> implements the IsSynchronized property because it is required by the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  \n  \n .NET Framework classes based on <xref:System.Array> provide their own synchronized version of the collection using the <xref:System.Array.SyncRoot%2A> property.  \n  \n Classes that use arrays can also implement their own synchronization using the <xref:System.Array.SyncRoot%2A> property. The synchronizing code must perform operations on the `SyncRoot` of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection. Note that some implementations of <xref:System.Array.SyncRoot%2A> might return the <xref:System.Array> itself.  \n  \n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example shows how to lock an array during the entire enumeration by using the <xref:System.Array.SyncRoot%2A>property.  \n  \n [!CODE [System.Array.SyncRoot#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.SyncRoot#1)]"
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.LastIndexOf(System.Array,System.Object)
  id: LastIndexOf(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf(Array,Object)
  nameWithType: Array.LastIndexOf(Array,Object)
  fullName: System.Array.LastIndexOf(Array,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <see cref="T:System.Array">.
  remarks: "The one-dimensional <xref:System.Array> is searched backward starting at the last element and ending at the first element.  \n  \n The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method. If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.  \n  \n Since most arrays will have a lower bound of zero, this method would generally return –1 when  is not found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName> and  is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName>, which is `System.Int32.MinValue - 1`.  \n  \n This method is an O() operation, where  is the <xref:System.Array.Length%2A> of .  \n  \n In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the  parameter exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Object> itself.  \n  \n <xref:System.IComparable.CompareTo%2A> methods of the  parameter on the objects in the collection."
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element in an array.  \n  \n [!CODE [Classic Array.LastIndexOf Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example#1)]"
  syntax:
    content: public static int LastIndexOf (Array array, object value);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> to search.
    - id: value
      type: System.Object
      description: The object to locate in .
    return:
      type: System.Int32
      description: The index of the last occurrence of  within the entire , if found; otherwise, the lower bound of the array minus 1.
  overload: System.Array.LastIndexOf*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  id: LastIndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf(Array,Object,Int32)
  nameWithType: Array.LastIndexOf(Array,Object,Int32)
  fullName: System.Array.LastIndexOf(Array,Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array"> that extends from the first element to the specified index.
  remarks: "The one-dimensional <xref:System.Array> is searched backward starting at  and ending at the first element.  \n  \n The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method. If the element type is a nonintrinsic (user-defined) type, the `Equals` implementation of that type is used.  \n  \n Since most arrays will have a lower bound of zero, this method would generally return –1 when  is not found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName> and  is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName>, which is `System.Int32.MinValue - 1`.  \n  \n This method is an O() operation, where  is the number of elements from the beginning of  to .  \n  \n In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the  parameter exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Object> itself."
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element in an array.  \n  \n [!CODE [Classic Array.LastIndexOf Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example#1)]"
  syntax:
    content: public static int LastIndexOf (Array array, object value, int startIndex);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> to search.
    - id: value
      type: System.Object
      description: The object to locate in .
    - id: startIndex
      type: System.Int32
      description: The starting index of the backward search.
    return:
      type: System.Int32
      description: The index of the last occurrence of  within the range of elements in  that extends from the first element to , if found; otherwise, the lower bound of the array minus 1.
  overload: System.Array.LastIndexOf*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf(Array,Object,Int32,Int32)
  nameWithType: Array.LastIndexOf(Array,Object,Int32,Int32)
  fullName: System.Array.LastIndexOf(Array,Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <see cref="T:System.Array"> that contains the specified number of elements and ends at the specified index.
  remarks: "The one-dimensional <xref:System.Array> is searched backward starting at  and ending at  minus  plus 1, if  is greater than 0.  \n  \n The elements are compared to the specified value using the <xref:System.Object.Equals%2A?displayProperty=fullName> method. If the element type is a nonintrinsic (user-defined) type, the`Equals` implementation of that type is used.  \n  \n Since most arrays will have a lower bound of zero, this method would generally return –1 when  is not found. In the rare case that the lower bound of the array is equal to <xref:System.Int32.MinValue?displayProperty=fullName> and  is not found, this method returns <xref:System.Int32.MaxValue?displayProperty=fullName>, which is `System.Int32.MinValue - 1`.  \n  \n This method is an O() operation, where  is .  \n  \n In the .NET Framework version 2.0, this method uses the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Array> to determine whether the <xref:System.Object> specified by the  parameter exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the <xref:System.Object> itself."
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element in an array. Note that the <xref:System.Array.LastIndexOf%2A> method is a backward search; therefore,  must be less than or equal to ( minus the lower bound of the array plus 1).  \n  \n [!CODE [Classic Array.LastIndexOf Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.LastIndexOf Example#1)]"
  syntax:
    content: public static int LastIndexOf (Array array, object value, int startIndex, int count);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> to search.
    - id: value
      type: System.Object
      description: The object to locate in .
    - id: startIndex
      type: System.Int32
      description: The starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    return:
      type: System.Int32
      description: The index of the last occurrence of  within the range of elements in  that contains the number of elements specified in  and ends at , if found; otherwise, the lower bound of the array minus 1.
  overload: System.Array.LastIndexOf*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.LastIndexOf``1(``0[],``0)
  id: LastIndexOf``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf(T[],T)
  nameWithType: Array.LastIndexOf(T[],T)
  fullName: System.Array.LastIndexOf(T[],T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int LastIndexOf<T> (T[] array, T value);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.LastIndexOf<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf(T[],T,Int32)
  nameWithType: Array.LastIndexOf(T[],T,Int32)
  fullName: System.Array.LastIndexOf(T[],T,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int LastIndexOf<T> (T[] array, T value, int startIndex);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: value
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.LastIndexOf<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: LastIndexOf(T[],T,Int32,Int32)
  nameWithType: Array.LastIndexOf(T[],T,Int32,Int32)
  fullName: System.Array.LastIndexOf(T[],T,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int LastIndexOf<T> (T[] array, T value, int startIndex, int count);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: value
      type: T
      description: To be added.
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Array.LastIndexOf<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Length
  id: Length
  parent: System.Array
  langs:
  - csharp
  name: Length
  nameWithType: Array.Length
  fullName: System.Array.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the total number of elements in all the dimensions of the <see cref="T:System.Array">.
  remarks: Retrieving the value of this property is an O(1) operation.
  example:
  - "The following example uses the                                 Length property to get the total number of elements in an array. It also uses the                                 <xref:System.Array.GetUpperBound%2A> method to determine the number of elements in each dimension of a multidimensional array.  \n  \n [!CODE [System.Array.Length#1](../CodeSnippet/VS_Snippets_CLR_System/system.array.length#1)]"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.LongLength
  id: LongLength
  parent: System.Array
  langs:
  - csharp
  name: LongLength
  nameWithType: Array.LongLength
  fullName: System.Array.LongLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a 64-bit integer that represents the total number of elements in all the dimensions of the <see cref="T:System.Array">.
  remarks: Retrieving the value of this property is an O(1) operation.
  syntax:
    content: public long LongLength { get; }
    return:
      type: System.Int64
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Rank
  id: Rank
  parent: System.Array
  langs:
  - csharp
  name: Rank
  nameWithType: Array.Rank
  fullName: System.Array.Rank
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the rank (number of dimensions) of the <see cref="T:System.Array">. For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on.
  remarks: "For example, the Visual Basic code  \n  \n```  \nDim TDArray(0,0,0) As Integer  \n```  \n  \n and the C# code  \n  \n```  \nint[,,] TDArray = new int[1,1,1];  \n```  \n  \n create an array of three dimensions with a Rank property whose value is 3.  \n  \n A jagged array (an array of arrays) is a one-dimensional array; the value of its Rank property is 1.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following example initializes a one-dimensional array, a two-dimensional array, and a jagged array, and retrieves the Rank property of each.  \n  \n [!CODE [System.Array.Rank#1](../CodeSnippet/VS_Snippets_CLR_System/system.array.rank#1)]"
  syntax:
    content: public int Rank { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Resize``1(``0[]@,System.Int32)
  id: Resize``1(``0[]@,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Resize(T[],Int32)
  nameWithType: Array.Resize(T[],Int32)
  fullName: System.Array.Resize(T[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Resize<T> (ref T[] array, int newSize);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: newSize
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Reverse(System.Array)
  id: Reverse(System.Array)
  parent: System.Array
  langs:
  - csharp
  name: Reverse(Array)
  nameWithType: Array.Reverse(Array)
  fullName: System.Array.Reverse(Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array">.
  remarks: "After a call to this method, the element at `myArray[i]`, where  is any index in the array, moves to `myArray[j]`, where  equals `(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`.  \n  \n This method is an O() operation, where  is the <xref:System.Array.Length%2A> of .  \n  \n As the following example shows, the Reverse method can be used to reverse a jagged array. It initializes a jagged array with one element for each month of the current year in the current culture's calendar. Each element contains an array with as many elements as that month has days. The example displays the contents of the array, calls the Reverse method, and then displays the contents of the reversed array.  \n  \n [!CODE [System.Array.Reverse#1](../CodeSnippet/VS_Snippets_CLR_System/system.array.reverse#1)]"
  example:
  - "The following code example shows how to reverse the sort of the values in an <xref:System.Array>.  \n  \n [!CODE [Classic Array.Reverse Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.Reverse Example#1)]"
  syntax:
    content: public static void Reverse (Array array);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> to reverse.
  overload: System.Array.Reverse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Reverse(System.Array,System.Int32,System.Int32)
  id: Reverse(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Reverse(Array,Int32,Int32)
  nameWithType: Array.Reverse(Array,Int32,Int32)
  fullName: System.Array.Reverse(Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Reverses the sequence of the elements in a range of elements in the one-dimensional <see cref="T:System.Array">.
  remarks: "After a call to this method, the element at `myArray[i]`, where  is any index in the array, moves to `myArray[j]`, where  equals `(myArray.Length + myArray.GetLowerBound(0)) - (i - myArray.GetLowerBound(0)) - 1`.  \n  \n The<xref:System.Array.Reverse%2A> method can be used to reverse a jagged array.  \n  \n This method is an O() operation, where  is ."
  example:
  - "The following code example shows how to reverse the sort of the values in a range of elements in an <xref:System.Array>.  \n  \n [!CODE [Classic Array.Reverse1 Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Array.Reverse1 Example#1)]"
  syntax:
    content: public static void Reverse (Array array, int index, int length);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> to reverse.
    - id: index
      type: System.Int32
      description: The starting index of the section to reverse.
    - id: length
      type: System.Int32
      description: The number of elements in the section to reverse.
  overload: System.Array.Reverse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.SetValue(System.Object,System.Int32)
  id: SetValue(System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object,Int32)
  nameWithType: Array.SetValue(Object,Int32)
  fullName: System.Array.SetValue(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array">. The index is specified as a 32-bit integer.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of  is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public void SetValue (object value, int index);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index
      type: System.Int32
      description: A 32-bit integer that represents the position of the <see cref="T:System.Array"> element to set.
  overload: System.Array.SetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.SetValue(System.Object,System.Int32[])
  id: SetValue(System.Object,System.Int32[])
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object,Int32[])
  nameWithType: Array.SetValue(Object,Int32[])
  fullName: System.Array.SetValue(Object,Int32[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array">. The indexes are specified as an array of 32-bit integers.
  remarks: "The number of elements in  must equal the number of dimensions in the <xref:System.Array>. All elements in the  array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.  \n  \n The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the values in the  array is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public void SetValue (object value, int[] indices);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: indices
      type: System.Int32[]
      description: A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.
  overload: System.Array.SetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.SetValue(System.Object,System.Int64)
  id: SetValue(System.Object,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object,Int64)
  nameWithType: Array.SetValue(Object,Int64)
  fullName: System.Array.SetValue(Object,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sets a value to the element at the specified position in the one-dimensional <see cref="T:System.Array">. The index is specified as a 64-bit integer.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether the value of  is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public void SetValue (object value, long index);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index
      type: System.Int64
      description: A 64-bit integer that represents the position of the <see cref="T:System.Array"> element to set.
  overload: System.Array.SetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.SetValue(System.Object,System.Int64[])
  id: SetValue(System.Object,System.Int64[])
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object,Int64[])
  nameWithType: Array.SetValue(Object,Int64[])
  fullName: System.Array.SetValue(Object,Int64[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sets a value to the element at the specified position in the multidimensional <see cref="T:System.Array">. The indexes are specified as an array of 64-bit integers.
  remarks: "The number of elements in  must equal the number of dimensions in the <xref:System.Array>. All elements in the  array must collectively specify the position of the desired element in the multidimensional <xref:System.Array>.  \n  \n The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the values in the  array is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public void SetValue (object value, long[] indices);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: indices
      type: System.Int64[]
      description: A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the element to set.
  overload: System.Array.SetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.SetValue(System.Object,System.Int32,System.Int32)
  id: SetValue(System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object,Int32,Int32)
  nameWithType: Array.SetValue(Object,Int32,Int32)
  fullName: System.Array.SetValue(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sets a value to the element at the specified position in the two-dimensional <see cref="T:System.Array">. The indexes are specified as 32-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public void SetValue (object value, int index1, int index2);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index1
      type: System.Int32
      description: A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"> element to set.
    - id: index2
      type: System.Int32
      description: A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"> element to set.
  overload: System.Array.SetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.SetValue(System.Object,System.Int64,System.Int64)
  id: SetValue(System.Object,System.Int64,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object,Int64,Int64)
  nameWithType: Array.SetValue(Object,Int64,Int64)
  fullName: System.Array.SetValue(Object,Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sets a value to the element at the specified position in the two-dimensional <see cref="T:System.Array">. The indexes are specified as 64-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public void SetValue (object value, long index1, long index2);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index1
      type: System.Int64
      description: A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"> element to set.
    - id: index2
      type: System.Int64
      description: A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"> element to set.
  overload: System.Array.SetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)
  id: SetValue(System.Object,System.Int32,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object,Int32,Int32,Int32)
  nameWithType: Array.SetValue(Object,Int32,Int32,Int32)
  fullName: System.Array.SetValue(Object,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sets a value to the element at the specified position in the three-dimensional <see cref="T:System.Array">. The indexes are specified as 32-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public void SetValue (object value, int index1, int index2, int index3);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index1
      type: System.Int32
      description: A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"> element to set.
    - id: index2
      type: System.Int32
      description: A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"> element to set.
    - id: index3
      type: System.Int32
      description: A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array"> element to set.
  overload: System.Array.SetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)
  id: SetValue(System.Object,System.Int64,System.Int64,System.Int64)
  parent: System.Array
  langs:
  - csharp
  name: SetValue(Object,Int64,Int64,Int64)
  nameWithType: Array.SetValue(Object,Int64,Int64,Int64)
  fullName: System.Array.SetValue(Object,Int64,Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sets a value to the element at the specified position in the three-dimensional <see cref="T:System.Array">. The indexes are specified as 64-bit integers.
  remarks: "The <xref:System.Array.GetLowerBound%2A> and <xref:System.Array.GetUpperBound%2A> methods can determine whether any of the indexes is out of bounds.  \n  \n For more information about conversions, see <xref:System.Convert>.  \n  \n This method is an O(1) operation.  \n  \n> [!NOTE]\n>  If <xref:System.Array.SetValue%2A> is used to assign `null` to an element of an array of value types, all fields of the element are initialized to zero. The value of the element is not a null reference, and cannot be found by searching for a null reference."
  example:
  - "The following code example demonstrates how to set and get a specific value in a one-dimensional or multidimensional array.  \n  \n [!CODE [System.Array_GetSetValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array_GetSetValue#1)]"
  syntax:
    content: public void SetValue (object value, long index1, long index2, long index3);
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index1
      type: System.Int64
      description: A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"> element to set.
    - id: index2
      type: System.Int64
      description: A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"> element to set.
    - id: index3
      type: System.Int64
      description: A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array"> element to set.
  overload: System.Array.SetValue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort(System.Array)
  id: Sort(System.Array)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array)
  nameWithType: Array.Sort(Array)
  fullName: System.Array.Sort(Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sorts the elements in an entire one-dimensional <see cref="T:System.Array"> using the <xref:System.IComparable> implementation of each element of the <see cref="T:System.Array">.
  remarks: "Each element of  must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in .  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an[insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 \\* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O( log ) operation, where  is the <xref:System.Array.Length%2A> of ."
  example:
  - "The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!CODE [System.Array.Sort#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Sort#1)]"
  syntax:
    content: public static void Sort (Array array);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> to sort.
  overload: System.Array.Sort*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort(System.Array,System.Array)
  id: Sort(System.Array,System.Array)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array,Array)
  nameWithType: Array.Sort(Array,Array)
  fullName: System.Array.Sort(Array,Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sorts a pair of one-dimensional <see cref="T:System.Array"> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"> using the <xref:System.IComparable> implementation of each key.
  remarks: "Each key in the <xref:System.Array> has a corresponding item in the <xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the <xref:System.Array> is similarly repositioned. Therefore, the <xref:System.Array> is sorted according to the arrangement of the corresponding keys in the <xref:System.Array>.  \n  \n Each key in the <xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 \\* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O( log ) operation, where  is the <xref:System.Array.Length%2A> of ."
  example:
  - "The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!CODE [System.Array.Sort2#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Sort2#1)]"
  syntax:
    content: public static void Sort (Array keys, Array items);
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> that contains the keys to sort.
    - id: items
      type: System.Array
      description: "The one-dimensional <see cref=\"T:System.Array\"> that contains the items that correspond to each of the keys in the <see cref=\"T:System.Array\">.  \n  \n -or-  \n  \n `null` to sort only the <see cref=\"T:System.Array\">."
  overload: System.Array.Sort*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort(System.Array,System.Collections.IComparer)
  id: Sort(System.Array,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array,IComparer)
  nameWithType: Array.Sort(Array,IComparer)
  fullName: System.Array.Sort(Array,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sorts the elements in a one-dimensional <see cref="T:System.Array"> using the specified <xref:System.Collections.IComparer>.
  remarks: "If  is `null`, each element of  must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in .  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 \\* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O( log ) operation, where  is the <xref:System.Array.Length%2A> of .  \n  \n The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.  \n  \n|Implementation|Description|  \n|--------------------|-----------------|  \n|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName>|Compares any two objects, but performs a case-insensitive comparison of strings.|  \n|<xref:System.Collections.Comparer.Default?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the current culture.|  \n|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the invariant culture.|  \n|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>|Compares two objects of type  by using the type's default sort order.|  \n  \n You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the  parameter. The example does this by defining a `ReverseComparer` class that reverses the default sort order for instances of a type and performs case-insensitive string comparison."
  example:
  - "The following example sorts the values in a string arrayby using the default comparer. It also defines a custom <xref:System.Collections.IComparer> implementation named `ReverseComparer` that reverses an object's default sort order while performing a case-insensitive string comparison. Note that the output might vary depending on the current culture.  \n  \n [!CODE [System.Array.Sort#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Sort#1)]"
  syntax:
    content: public static void Sort (Array array, System.Collections.IComparer comparer);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to sort.
    - id: comparer
      type: System.Collections.IComparer
      description: "The implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <see cref=\"T:System.IComparable\"> implementation of each element."
  overload: System.Array.Sort*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  id: Sort(System.Array,System.Array,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array,Array,IComparer)
  nameWithType: Array.Sort(Array,Array,IComparer)
  fullName: System.Array.Sort(Array,Array,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sorts a pair of one-dimensional <see cref="T:System.Array"> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"> using the specified <xref:System.Collections.IComparer>.
  remarks: "Each key in the <xref:System.Array> has a corresponding item in the <xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the <xref:System.Array> is similarly repositioned. Therefore, the <xref:System.Array> is sorted according to the arrangement of the corresponding keys in the <xref:System.Array>.  \n  \n If  is `null`, each key in the <xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.  \n  \n|Implementation|Description|  \n|--------------------|-----------------|  \n|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName>|Compares any two objects, but performs a case-insensitive comparison of strings.|  \n|<xref:System.Collections.Comparer.Default?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the current culture.|  \n|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the invariant culture.|  \n|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>|Compares two objects of type  by using the type's default sort order.|  \n  \n You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the  parameter. The example does this by defining an <xref:System.Collections.IComparer> implementation that reverses the default sort order and performs case-insensitive string comparison.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 \\* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O( log ) operation, where  is the <xref:System.Array.Length%2A> of ."
  example:
  - "The following example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!CODE [System.Array.Sort2#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Sort2#1)]"
  syntax:
    content: public static void Sort (Array keys, Array items, System.Collections.IComparer comparer);
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> that contains the keys to sort.
    - id: items
      type: System.Array
      description: "The one-dimensional <see cref=\"T:System.Array\"> that contains the items that correspond to each of the keys in the <see cref=\"T:System.Array\">.  \n  \n -or-  \n  \n `null` to sort only the <see cref=\"T:System.Array\">."
    - id: comparer
      type: System.Collections.IComparer
      description: "The <see cref=\"T:System.Collections.IComparer\"> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref:System.IComparable> implementation of each element."
  overload: System.Array.Sort*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32)
  id: Sort(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array,Int32,Int32)
  nameWithType: Array.Sort(Array,Int32,Int32)
  fullName: System.Array.Sort(Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array"> using the <xref:System.IComparable> implementation of each element of the <see cref="T:System.Array">.
  remarks: "Each element within the specified range of elements in  must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in .  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 \\* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O( log ) operation, where  is ."
  example:
  - "The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!CODE [System.Array.Sort#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Sort#1)]"
  syntax:
    content: public static void Sort (Array array, int index, int length);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> to sort.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
  overload: System.Array.Sort*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  id: Sort(System.Array,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array,Array,Int32,Int32)
  nameWithType: Array.Sort(Array,Array,Int32,Int32)
  fullName: System.Array.Sort(Array,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array"> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"> using the <xref:System.IComparable> implementation of each key.
  remarks: "Each key in the <xref:System.Array> has a corresponding item in the <xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the <xref:System.Array> is similarly repositioned. Therefore, the <xref:System.Array> is sorted according to the arrangement of the corresponding keys in the <xref:System.Array>.  \n  \n Each key within the specified range of elements in the <xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 \\* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O( log ) operation, where  is ."
  example:
  - "The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!CODE [System.Array.Sort2#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Sort2#1)]"
  syntax:
    content: public static void Sort (Array keys, Array items, int index, int length);
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> that contains the keys to sort.
    - id: items
      type: System.Array
      description: "The one-dimensional <see cref=\"T:System.Array\"> that contains the items that correspond to each of the keys in the <see cref=\"T:System.Array\">.  \n  \n -or-  \n  \n `null` to sort only the <see cref=\"T:System.Array\">."
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
  overload: System.Array.Sort*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array,Int32,Int32,IComparer)
  nameWithType: Array.Sort(Array,Int32,Int32,IComparer)
  fullName: System.Array.Sort(Array,Int32,Int32,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array"> using the specified <xref:System.Collections.IComparer>.
  remarks: "If  is `null`, each element within the specified range of elements in  must implement the <xref:System.IComparable> interface to be capable of comparisons with every other element in .  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.  \n  \n|Implementation|Description|  \n|--------------------|-----------------|  \n|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName>|Compares any two objects, but performs a case-insensitive comparison of strings.|  \n|<xref:System.Collections.Comparer.Default?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the current culture.|  \n|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the invariant culture.|  \n|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>|Compares two objects of type  by using the type's default sort order.|  \n  \n You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the  parameter. The example does this by defining a `ReverseComparer` class that reverses the default sort order for instances of a type and performs case-insensitive string comparison.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 \\* Log<sup>N</sup>, where  *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O( log ) operation, where  is ."
  example:
  - "The following code example shows how to sort the values in an <xref:System.Array> using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!CODE [System.Array.Sort#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Sort#1)]"
  syntax:
    content: public static void Sort (Array array, int index, int length, System.Collections.IComparer comparer);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> to sort.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.IComparer
      description: "The <see cref=\"T:System.Collections.IComparer\"> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref:System.IComparable> implementation of each element."
  overload: System.Array.Sort*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  name: Sort(Array,Array,Int32,Int32,IComparer)
  nameWithType: Array.Sort(Array,Array,Int32,Int32,IComparer)
  fullName: System.Array.Sort(Array,Array,Int32,Int32,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array"> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"> using the specified <xref:System.Collections.IComparer>.
  remarks: "Each key in the <xref:System.Array> has a corresponding item in the <xref:System.Array>. When a key is repositioned during the sorting, the corresponding item in the <xref:System.Array> is similarly repositioned. Therefore, the <xref:System.Array> is sorted according to the arrangement of the corresponding keys in the <xref:System.Array>.  \n  \n If  is `null`, each key within the specified range of elements in the <xref:System.Array> must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key.  \n  \n You can sort if there are more items than keys, but the items that have no corresponding keys will not be sorted. You cannot sort if there are more keys than items; doing this throws an <xref:System.ArgumentException>.  \n  \n If the sort is not successfully completed, the results are undefined.  \n  \n The .NET Framework includes predefined <xref:System.Collections.IComparer> implementations listed in the following table.  \n  \n|Implementation|Description|  \n|--------------------|-----------------|  \n|<xref:System.Collections.CaseInsensitiveComparer?displayProperty=fullName>|Compares any two objects, but performs a case-insensitive comparison of strings.|  \n|<xref:System.Collections.Comparer.Default?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the current culture.|  \n|<xref:System.Collections.Comparer.DefaultInvariant?displayProperty=fullName>|Compares any two objects by using the sorting conventions of the invariant culture.|  \n|<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>|Compares two objects of type  by using the type's default sort order.|  \n  \n You can also support custom comparisons by providing an instance of your own <xref:System.Collections.IComparer> implementation to the  parameter. The example does this by defining a custom <xref:System.Collections.IComparer> implementation that reverses the default sort order and performs case-insensitive string comparison.  \n  \n This method uses the introspective sort (introsort) algorithm as follows:  \n  \n-   If the partition size is fewer than 16 elements, it uses an [insertion sort](http://en.wikipedia.org/wiki/Insertion_sort) algorithm.  \n  \n-   If the number of partitions exceeds 2 \\* Log<sup>N</sup>, where *N* is the range of the input array, it uses a [Heapsort](http://en.wikipedia.org/wiki/Heapsort) algorithm.  \n  \n-   Otherwise, it uses a [Quicksort](http://en.wikipedia.org/wiki/Quicksort) algorithm.  \n  \n This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved. In contrast, a stable sort preserves the order of elements that are equal.  \n  \n For arrays that are sorted by using the Heapsort and Quicksort algorithms, in the worst case, this method is an O( log ) operation, where  is ."
  example:
  - "The following code example shows how to sort two associated arrays where the first array contains the keys and the second array contains the values. Sorts are done using the default comparer and a custom comparer that reverses the sort order. Note that the result might vary depending on the current <xref:System.Globalization.CultureInfo>.  \n  \n [!CODE [System.Array.Sort2#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.Sort2#1)]"
  syntax:
    content: public static void Sort (Array keys, Array items, int index, int length, System.Collections.IComparer comparer);
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> that contains the keys to sort.
    - id: items
      type: System.Array
      description: "The one-dimensional <see cref=\"T:System.Array\"> that contains the items that correspond to each of the keys in the <see cref=\"T:System.Array\">.  \n  \n -or-  \n  \n `null` to sort only the <see cref=\"T:System.Array\">."
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.IComparer
      description: "The <see cref=\"T:System.Collections.IComparer\"> implementation to use when comparing elements.  \n  \n -or-  \n  \n `null` to use the <xref:System.IComparable> implementation of each element."
  overload: System.Array.Sort*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort``1(``0[])
  id: Sort``1(``0[])
  parent: System.Array
  langs:
  - csharp
  name: Sort(T[])
  nameWithType: Array.Sort(T[])
  fullName: System.Array.Sort(T[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Sort<T> (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
  overload: System.Array.Sort<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort``1(``0[],System.Collections.Generic.IComparer`1)
  id: Sort``1(``0[],System.Collections.Generic.IComparer`1)
  parent: System.Array
  langs:
  - csharp
  name: Sort(T[],IComparer<T>)
  nameWithType: Array.Sort(T[],IComparer<T>)
  fullName: System.Array.Sort(T[],IComparer<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Sort<T> (T[] array, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
  overload: System.Array.Sort<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort``1(``0[],System.Comparison`1)
  id: Sort``1(``0[],System.Comparison`1)
  parent: System.Array
  langs:
  - csharp
  name: Sort(T[],Comparison<T>)
  nameWithType: Array.Sort(T[],Comparison<T>)
  fullName: System.Array.Sort(T[],Comparison<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Sort<T> (T[] array, Comparison<T> comparison);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: comparison
      type: System.Comparison`1
      description: To be added.
  overload: System.Array.Sort<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32)
  id: Sort``1(``0[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Sort(T[],Int32,Int32)
  nameWithType: Array.Sort(T[],Int32,Int32)
  fullName: System.Array.Sort(T[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Sort<T> (T[] array, int index, int length);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
  overload: System.Array.Sort<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1)
  id: Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1)
  parent: System.Array
  langs:
  - csharp
  name: Sort(T[],Int32,Int32,IComparer<T>)
  nameWithType: Array.Sort(T[],Int32,Int32,IComparer<T>)
  fullName: System.Array.Sort(T[],Int32,Int32,IComparer<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Sort<T> (T[] array, int index, int length, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
  overload: System.Array.Sort<T>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort``2(``0[],``1[])
  id: Sort``2(``0[],``1[])
  parent: System.Array
  langs:
  - csharp
  name: Sort(TKey[],TValue[])
  nameWithType: Array.Sort(TKey[],TValue[])
  fullName: System.Array.Sort(TKey[],TValue[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Sort<TKey,TValue> (TKey[] keys, TValue[] items);
    parameters:
    - id: keys
      type: TKey[]
      description: To be added.
    - id: items
      type: TValue[]
      description: To be added.
  overload: System.Array.Sort<TKey,TValue>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  id: Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  name: Sort(TKey[],TValue[],IComparer<TKey>)
  nameWithType: Array.Sort(TKey[],TValue[],IComparer<TKey>)
  fullName: System.Array.Sort(TKey[],TValue[],IComparer<TKey>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Sort<TKey,TValue> (TKey[] keys, TValue[] items, System.Collections.Generic.IComparer<TKey> comparer);
    parameters:
    - id: keys
      type: TKey[]
      description: To be added.
    - id: items
      type: TValue[]
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer{TKey}
      description: To be added.
  overload: System.Array.Sort<TKey,TValue>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  id: Sort``2(``0[],``1[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  name: Sort(TKey[],TValue[],Int32,Int32)
  nameWithType: Array.Sort(TKey[],TValue[],Int32,Int32)
  fullName: System.Array.Sort(TKey[],TValue[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Sort<TKey,TValue> (TKey[] keys, TValue[] items, int index, int length);
    parameters:
    - id: keys
      type: TKey[]
      description: To be added.
    - id: items
      type: TValue[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
  overload: System.Array.Sort<TKey,TValue>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  id: Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  name: Sort(TKey[],TValue[],Int32,Int32,IComparer<TKey>)
  nameWithType: Array.Sort(TKey[],TValue[],Int32,Int32,IComparer<TKey>)
  fullName: System.Array.Sort(TKey[],TValue[],Int32,Int32,IComparer<TKey>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Sort<TKey,TValue> (TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer<TKey> comparer);
    parameters:
    - id: keys
      type: TKey[]
      description: To be added.
    - id: items
      type: TValue[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer{TKey}
      description: To be added.
  overload: System.Array.Sort<TKey,TValue>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.SyncRoot
  id: SyncRoot
  parent: System.Array
  langs:
  - csharp
  name: SyncRoot
  nameWithType: Array.SyncRoot
  fullName: System.Array.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets an object that can be used to synchronize access to the <see cref="T:System.Array">.
  remarks: "This property implements the <xref:System.Collections.ICollection?displayProperty=fullName> interface.  \n  \n .NET Framework classes based on <xref:System.Array> provide their own synchronized version of the collection using the SyncRoot property.  \n  \n Classes that use arrays can also implement their own synchronization using the SyncRoot property. The synchronizing code must perform operations on the `SyncRoot` of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection. Note that some implementations of SyncRoot might return the <xref:System.Array> itself.  \n  \n Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example shows how to lock an array during the entire enumeration by using the SyncRoot property.  \n  \n [!CODE [System.Array.SyncRoot#1](../CodeSnippet/VS_Snippets_CLR_System/system.Array.SyncRoot#1)]"
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.ICollection.Count
  nameWithType: Array.System.Collections.ICollection.Count
  fullName: System.Array.System.Collections.ICollection.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the number of elements contained in the <see cref="T:System.Array">.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.ICollection> interface.
  syntax:
    content: int System.Collections.ICollection.Count { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: Array.System.Collections.IList.Add(Object)
  fullName: System.Array.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Calling this method always throws a <see cref="T:System.NotSupportedException"> exception.
  remarks: "Ordinarily, an <xref:System.Collections.IList.Add%2A?displayProperty=fullName> implementation adds a member to a collection. However, because arrays have a fixed size (the <xref:System.Array.IsFixedSize%2A> property always returns `true`), this method always throws a <xref:System.NotSupportedException> exception.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface."
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to be added to the <see cref="T:System.Collections.IList">.
    return:
      type: System.Int32
      description: Adding a value to an array is not supported. No value is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IList.Clear()
  nameWithType: Array.System.Collections.IList.Clear()
  fullName: System.Array.System.Collections.IList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Removes all items from the <see cref="T:System.Collections.IList">.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.Clear ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: Array.System.Collections.IList.Contains(Object)
  fullName: System.Array.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether an element is in the <see cref="T:System.Collections.IList">.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the current list. The element to locate can be `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if  is found in the <see cref="T:System.Collections.IList">; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Array.System.Collections.IList.IndexOf(Object)
  fullName: System.Array.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines the index of a specific item in the <see cref="T:System.Collections.IList">.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the current list.
    return:
      type: System.Int32
      description: The index of value if found in the list; otherwise, -1.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Array.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Array.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Inserts an item to the <see cref="T:System.Collections.IList"> at the specified index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The index at which  should be inserted.
    - id: value
      type: System.Object
      description: The object to insert.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: Array.System.Collections.IList.Item(Int32)
  fullName: System.Array.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets or sets the element at the specified index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an<xref:System.Collections.IList> interface.
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The index of the element to get or set.
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: Array.System.Collections.IList.Remove(Object)
  fullName: System.Array.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList">.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to remove from the <see cref="T:System.Collections.IList">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Array.System.Collections.IList.RemoveAt(Int32)
  fullName: System.Array.System.Collections.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Removes the <see cref="T:System.Collections.IList"> item at the specified index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The index of the element to remove.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IStructuralComparable.CompareTo(Object,IComparer)
  nameWithType: Array.System.Collections.IStructuralComparable.CompareTo(Object,IComparer)
  fullName: System.Array.System.Collections.IStructuralComparable.CompareTo(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.
  syntax:
    content: int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with the current instance.
    - id: comparer
      type: System.Collections.IComparer
      description: An object that compares the current object and .
    return:
      type: System.Int32
      description: "An integer that indicates the relationship of the current collection object to other, as shown in the following table.  \n  \n|Return value|Description|  \n|------------------|-----------------|  \n|-1|The current instance precedes .|  \n|0|The current instance and  are equal.|  \n|1|The current instance follows .|"
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IStructuralEquatable.Equals(Object,IEqualityComparer)
  nameWithType: Array.System.Collections.IStructuralEquatable.Equals(Object,IEqualityComparer)
  fullName: System.Array.System.Collections.IStructuralEquatable.Equals(Object,IEqualityComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether an object is equal to the current instance.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an<xref:System.Collections.IStructuralEquatable>interface.
  syntax:
    content: bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with the current instance.
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object that determines whether the current instance and  are equal.
    return:
      type: System.Boolean
      description: '`true` if the two objects are equal; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  name: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Array.System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Array.System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a hash code for the current instance.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Array> instance is cast to an<xref:System.Collections.IStructuralEquatable>interface.
  syntax:
    content: int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object that computes the hash code of the current object.
    return:
      type: System.Int32
      description: The hash code for the current instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Array.TrueForAll``1(``0[],System.Predicate`1)
  id: TrueForAll``1(``0[],System.Predicate`1)
  parent: System.Array
  langs:
  - csharp
  name: TrueForAll(T[],Predicate<T>)
  nameWithType: Array.TrueForAll(T[],Predicate<T>)
  fullName: System.Array.TrueForAll(T[],Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static bool TrueForAll<T> (T[] array, Predicate<T> match);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Array.AsReadOnly``1(``0[])
  parent: System.Array
  isExternal: false
  name: AsReadOnly(T[])
  nameWithType: Array.AsReadOnly(T[])
  fullName: System.Array.AsReadOnly(T[])
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Array.BinarySearch(System.Array,System.Object)
  parent: System.Array
  isExternal: false
  name: BinarySearch(Array,Object)
  nameWithType: Array.BinarySearch(Array,Object)
  fullName: System.Array.BinarySearch(Array,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: BinarySearch(Array,Object,IComparer)
  nameWithType: Array.BinarySearch(Array,Object,IComparer)
  fullName: System.Array.BinarySearch(Array,Object,IComparer)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  parent: System.Array
  isExternal: false
  name: BinarySearch(Array,Int32,Int32,Object)
  nameWithType: Array.BinarySearch(Array,Int32,Int32,Object)
  fullName: System.Array.BinarySearch(Array,Int32,Int32,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: BinarySearch(Array,Int32,Int32,Object,IComparer)
  nameWithType: Array.BinarySearch(Array,Int32,Int32,Object,IComparer)
  fullName: System.Array.BinarySearch(Array,Int32,Int32,Object,IComparer)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Array.BinarySearch``1(``0[],``0)
  parent: System.Array
  isExternal: false
  name: BinarySearch(T[],T)
  nameWithType: Array.BinarySearch(T[],T)
  fullName: System.Array.BinarySearch(T[],T)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer`1)
  parent: System.Array
  isExternal: false
  name: BinarySearch(T[],T,IComparer<T>)
  nameWithType: Array.BinarySearch(T[],T,IComparer<T>)
  fullName: System.Array.BinarySearch(T[],T,IComparer<T>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  parent: System.Array
  isExternal: false
  name: BinarySearch(T[],Int32,Int32,T)
  nameWithType: Array.BinarySearch(T[],Int32,Int32,T)
  fullName: System.Array.BinarySearch(T[],Int32,Int32,T)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer`1)
  parent: System.Array
  isExternal: false
  name: BinarySearch(T[],Int32,Int32,T,IComparer<T>)
  nameWithType: Array.BinarySearch(T[],Int32,Int32,T,IComparer<T>)
  fullName: System.Array.BinarySearch(T[],Int32,Int32,T,IComparer<T>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Array.Clear(System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Clear(Array,Int32,Int32)
  nameWithType: Array.Clear(Array,Int32,Int32)
  fullName: System.Array.Clear(Array,Int32,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Clone
  parent: System.Array
  isExternal: false
  name: Clone()
  nameWithType: Array.Clone()
  fullName: System.Array.Clone()
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: ConstrainedCopy(Array,Int32,Array,Int32,Int32)
  nameWithType: Array.ConstrainedCopy(Array,Int32,Array,Int32,Int32)
  fullName: System.Array.ConstrainedCopy(Array,Int32,Array,Int32,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.ConvertAll``2(``0[],System.Converter`2)
  parent: System.Array
  isExternal: false
  name: ConvertAll(TInput[],Converter<TInput,TOutput>)
  nameWithType: Array.ConvertAll(TInput[],Converter<TInput,TOutput>)
  fullName: System.Array.ConvertAll(TInput[],Converter<TInput,TOutput>)
- uid: TOutput
  parent: ''
  isExternal: true
  name: TOutput
  nameWithType: TOutput
  fullName: TOutput[]
- uid: TInput
  parent: ''
  isExternal: true
  name: TInput
  nameWithType: TInput
  fullName: TInput[]
- uid: System.Converter`2
  parent: System
  isExternal: false
  name: Converter<TInput,TOutput>
  nameWithType: Converter<TInput,TOutput>
  fullName: System.Converter<TInput,TOutput>
- uid: System.Array.Copy(System.Array,System.Array,System.Int32)
  parent: System.Array
  isExternal: false
  name: Copy(Array,Array,Int32)
  nameWithType: Array.Copy(Array,Array,Int32)
  fullName: System.Array.Copy(Array,Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Copy(System.Array,System.Array,System.Int64)
  parent: System.Array
  isExternal: false
  name: Copy(Array,Array,Int64)
  nameWithType: Array.Copy(Array,Array,Int64)
  fullName: System.Array.Copy(Array,Array,Int64)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Copy(Array,Int32,Array,Int32,Int32)
  nameWithType: Array.Copy(Array,Int32,Array,Int32,Int32)
  fullName: System.Array.Copy(Array,Int32,Array,Int32,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)
  parent: System.Array
  isExternal: false
  name: Copy(Array,Int64,Array,Int64,Int64)
  nameWithType: Array.Copy(Array,Int64,Array,Int64,Int64)
  fullName: System.Array.Copy(Array,Int64,Array,Int64,Int64)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.CopyTo(System.Array,System.Int32)
  parent: System.Array
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: Array.CopyTo(Array,Int32)
  fullName: System.Array.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.CopyTo(System.Array,System.Int64)
  parent: System.Array
  isExternal: false
  name: CopyTo(Array,Int64)
  nameWithType: Array.CopyTo(Array,Int64)
  fullName: System.Array.CopyTo(Array,Int64)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.CreateInstance(System.Type,System.Int32)
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type,Int32)
  nameWithType: Array.CreateInstance(Type,Int32)
  fullName: System.Array.CreateInstance(Type,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.CreateInstance(System.Type,System.Int32[])
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type,Int32[])
  nameWithType: Array.CreateInstance(Type,Int32[])
  fullName: System.Array.CreateInstance(Type,Int32[])
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
- uid: System.Array.CreateInstance(System.Type,System.Int64[])
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type,Int64[])
  nameWithType: Array.CreateInstance(Type,Int64[])
  fullName: System.Array.CreateInstance(Type,Int64[])
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64[]
- uid: System.Array.CreateInstance(System.Type,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type,Int32,Int32)
  nameWithType: Array.CreateInstance(Type,Int32,Int32)
  fullName: System.Array.CreateInstance(Type,Int32,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type,Int32[],Int32[])
  nameWithType: Array.CreateInstance(Type,Int32[],Int32[])
  fullName: System.Array.CreateInstance(Type,Int32[],Int32[])
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
- uid: System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: CreateInstance(Type,Int32,Int32,Int32)
  nameWithType: Array.CreateInstance(Type,Int32,Int32,Int32)
  fullName: System.Array.CreateInstance(Type,Int32,Int32,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Empty``1
  parent: System.Array
  isExternal: false
  name: Empty()
  nameWithType: Array.Empty()
  fullName: System.Array.Empty()
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Array.Exists``1(``0[],System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: Exists(T[],Predicate<T>)
  nameWithType: Array.Exists(T[],Predicate<T>)
  fullName: System.Array.Exists(T[],Predicate<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.Find``1(``0[],System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: Find(T[],Predicate<T>)
  nameWithType: Array.Find(T[],Predicate<T>)
  fullName: System.Array.Find(T[],Predicate<T>)
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.FindAll``1(``0[],System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: FindAll(T[],Predicate<T>)
  nameWithType: Array.FindAll(T[],Predicate<T>)
  fullName: System.Array.FindAll(T[],Predicate<T>)
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.FindIndex``1(``0[],System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: FindIndex(T[],Predicate<T>)
  nameWithType: Array.FindIndex(T[],Predicate<T>)
  fullName: System.Array.FindIndex(T[],Predicate<T>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: FindIndex(T[],Int32,Predicate<T>)
  nameWithType: Array.FindIndex(T[],Int32,Predicate<T>)
  fullName: System.Array.FindIndex(T[],Int32,Predicate<T>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: FindIndex(T[],Int32,Int32,Predicate<T>)
  nameWithType: Array.FindIndex(T[],Int32,Int32,Predicate<T>)
  fullName: System.Array.FindIndex(T[],Int32,Int32,Predicate<T>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.FindLast``1(``0[],System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: FindLast(T[],Predicate<T>)
  nameWithType: Array.FindLast(T[],Predicate<T>)
  fullName: System.Array.FindLast(T[],Predicate<T>)
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.FindLastIndex``1(``0[],System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: FindLastIndex(T[],Predicate<T>)
  nameWithType: Array.FindLastIndex(T[],Predicate<T>)
  fullName: System.Array.FindLastIndex(T[],Predicate<T>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: FindLastIndex(T[],Int32,Predicate<T>)
  nameWithType: Array.FindLastIndex(T[],Int32,Predicate<T>)
  fullName: System.Array.FindLastIndex(T[],Int32,Predicate<T>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: FindLastIndex(T[],Int32,Int32,Predicate<T>)
  nameWithType: Array.FindLastIndex(T[],Int32,Int32,Predicate<T>)
  fullName: System.Array.FindLastIndex(T[],Int32,Int32,Predicate<T>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.ForEach``1(``0[],System.Action`1)
  parent: System.Array
  isExternal: false
  name: ForEach(T[],Action<T>)
  nameWithType: Array.ForEach(T[],Action<T>)
  fullName: System.Array.ForEach(T[],Action<T>)
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Action`1
  parent: System
  isExternal: false
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.Array.GetEnumerator
  parent: System.Array
  isExternal: false
  name: GetEnumerator()
  nameWithType: Array.GetEnumerator()
  fullName: System.Array.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Array.GetLength(System.Int32)
  parent: System.Array
  isExternal: false
  name: GetLength(Int32)
  nameWithType: Array.GetLength(Int32)
  fullName: System.Array.GetLength(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.GetLongLength(System.Int32)
  parent: System.Array
  isExternal: false
  name: GetLongLength(Int32)
  nameWithType: Array.GetLongLength(Int32)
  fullName: System.Array.GetLongLength(Int32)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.GetLowerBound(System.Int32)
  parent: System.Array
  isExternal: false
  name: GetLowerBound(Int32)
  nameWithType: Array.GetLowerBound(Int32)
  fullName: System.Array.GetLowerBound(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.GetUpperBound(System.Int32)
  parent: System.Array
  isExternal: false
  name: GetUpperBound(Int32)
  nameWithType: Array.GetUpperBound(Int32)
  fullName: System.Array.GetUpperBound(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.GetValue(System.Int32)
  parent: System.Array
  isExternal: false
  name: GetValue(Int32)
  nameWithType: Array.GetValue(Int32)
  fullName: System.Array.GetValue(Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.GetValue(System.Int32[])
  parent: System.Array
  isExternal: false
  name: GetValue(Int32[])
  nameWithType: Array.GetValue(Int32[])
  fullName: System.Array.GetValue(Int32[])
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
- uid: System.Array.GetValue(System.Int64)
  parent: System.Array
  isExternal: false
  name: GetValue(Int64)
  nameWithType: Array.GetValue(Int64)
  fullName: System.Array.GetValue(Int64)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.GetValue(System.Int64[])
  parent: System.Array
  isExternal: false
  name: GetValue(Int64[])
  nameWithType: Array.GetValue(Int64[])
  fullName: System.Array.GetValue(Int64[])
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64[]
- uid: System.Array.GetValue(System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: GetValue(Int32,Int32)
  nameWithType: Array.GetValue(Int32,Int32)
  fullName: System.Array.GetValue(Int32,Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.GetValue(System.Int64,System.Int64)
  parent: System.Array
  isExternal: false
  name: GetValue(Int64,Int64)
  nameWithType: Array.GetValue(Int64,Int64)
  fullName: System.Array.GetValue(Int64,Int64)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.GetValue(System.Int32,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: GetValue(Int32,Int32,Int32)
  nameWithType: Array.GetValue(Int32,Int32,Int32)
  fullName: System.Array.GetValue(Int32,Int32,Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.GetValue(System.Int64,System.Int64,System.Int64)
  parent: System.Array
  isExternal: false
  name: GetValue(Int64,Int64,Int64)
  nameWithType: Array.GetValue(Int64,Int64,Int64)
  fullName: System.Array.GetValue(Int64,Int64,Int64)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.IndexOf(System.Array,System.Object)
  parent: System.Array
  isExternal: false
  name: IndexOf(Array,Object)
  nameWithType: Array.IndexOf(Array,Object)
  fullName: System.Array.IndexOf(Array,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  isExternal: false
  name: IndexOf(Array,Object,Int32)
  nameWithType: Array.IndexOf(Array,Object,Int32)
  fullName: System.Array.IndexOf(Array,Object,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: IndexOf(Array,Object,Int32,Int32)
  nameWithType: Array.IndexOf(Array,Object,Int32,Int32)
  fullName: System.Array.IndexOf(Array,Object,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.IndexOf``1(``0[],``0)
  parent: System.Array
  isExternal: false
  name: IndexOf(T[],T)
  nameWithType: Array.IndexOf(T[],T)
  fullName: System.Array.IndexOf(T[],T)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  isExternal: false
  name: IndexOf(T[],T,Int32)
  nameWithType: Array.IndexOf(T[],T,Int32)
  fullName: System.Array.IndexOf(T[],T,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: IndexOf(T[],T,Int32,Int32)
  nameWithType: Array.IndexOf(T[],T,Int32,Int32)
  fullName: System.Array.IndexOf(T[],T,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Initialize
  parent: System.Array
  isExternal: false
  name: Initialize()
  nameWithType: Array.Initialize()
  fullName: System.Array.Initialize()
- uid: System.Array.IsFixedSize
  parent: System.Array
  isExternal: false
  name: IsFixedSize
  nameWithType: Array.IsFixedSize
  fullName: System.Array.IsFixedSize
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Array.IsReadOnly
  parent: System.Array
  isExternal: false
  name: IsReadOnly
  nameWithType: Array.IsReadOnly
  fullName: System.Array.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Array.IsSynchronized
  parent: System.Array
  isExternal: false
  name: IsSynchronized
  nameWithType: Array.IsSynchronized
  fullName: System.Array.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Array.LastIndexOf(System.Array,System.Object)
  parent: System.Array
  isExternal: false
  name: LastIndexOf(Array,Object)
  nameWithType: Array.LastIndexOf(Array,Object)
  fullName: System.Array.LastIndexOf(Array,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  isExternal: false
  name: LastIndexOf(Array,Object,Int32)
  nameWithType: Array.LastIndexOf(Array,Object,Int32)
  fullName: System.Array.LastIndexOf(Array,Object,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: LastIndexOf(Array,Object,Int32,Int32)
  nameWithType: Array.LastIndexOf(Array,Object,Int32,Int32)
  fullName: System.Array.LastIndexOf(Array,Object,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.LastIndexOf``1(``0[],``0)
  parent: System.Array
  isExternal: false
  name: LastIndexOf(T[],T)
  nameWithType: Array.LastIndexOf(T[],T)
  fullName: System.Array.LastIndexOf(T[],T)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  isExternal: false
  name: LastIndexOf(T[],T,Int32)
  nameWithType: Array.LastIndexOf(T[],T,Int32)
  fullName: System.Array.LastIndexOf(T[],T,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: LastIndexOf(T[],T,Int32,Int32)
  nameWithType: Array.LastIndexOf(T[],T,Int32,Int32)
  fullName: System.Array.LastIndexOf(T[],T,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Length
  parent: System.Array
  isExternal: false
  name: Length
  nameWithType: Array.Length
  fullName: System.Array.Length
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.LongLength
  parent: System.Array
  isExternal: false
  name: LongLength
  nameWithType: Array.LongLength
  fullName: System.Array.LongLength
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.Rank
  parent: System.Array
  isExternal: false
  name: Rank
  nameWithType: Array.Rank
  fullName: System.Array.Rank
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Resize``1(``0[]@,System.Int32)
  parent: System.Array
  isExternal: false
  name: Resize(T[],Int32)
  nameWithType: Array.Resize(T[],Int32)
  fullName: System.Array.Resize(T[],Int32)
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Reverse(System.Array)
  parent: System.Array
  isExternal: false
  name: Reverse(Array)
  nameWithType: Array.Reverse(Array)
  fullName: System.Array.Reverse(Array)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Array.Reverse(System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Reverse(Array,Int32,Int32)
  nameWithType: Array.Reverse(Array,Int32,Int32)
  fullName: System.Array.Reverse(Array,Int32,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.SetValue(System.Object,System.Int32)
  parent: System.Array
  isExternal: false
  name: SetValue(Object,Int32)
  nameWithType: Array.SetValue(Object,Int32)
  fullName: System.Array.SetValue(Object,Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.SetValue(System.Object,System.Int32[])
  parent: System.Array
  isExternal: false
  name: SetValue(Object,Int32[])
  nameWithType: Array.SetValue(Object,Int32[])
  fullName: System.Array.SetValue(Object,Int32[])
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
- uid: System.Array.SetValue(System.Object,System.Int64)
  parent: System.Array
  isExternal: false
  name: SetValue(Object,Int64)
  nameWithType: Array.SetValue(Object,Int64)
  fullName: System.Array.SetValue(Object,Int64)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.SetValue(System.Object,System.Int64[])
  parent: System.Array
  isExternal: false
  name: SetValue(Object,Int64[])
  nameWithType: Array.SetValue(Object,Int64[])
  fullName: System.Array.SetValue(Object,Int64[])
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64[]
- uid: System.Array.SetValue(System.Object,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: SetValue(Object,Int32,Int32)
  nameWithType: Array.SetValue(Object,Int32,Int32)
  fullName: System.Array.SetValue(Object,Int32,Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.SetValue(System.Object,System.Int64,System.Int64)
  parent: System.Array
  isExternal: false
  name: SetValue(Object,Int64,Int64)
  nameWithType: Array.SetValue(Object,Int64,Int64)
  fullName: System.Array.SetValue(Object,Int64,Int64)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: SetValue(Object,Int32,Int32,Int32)
  nameWithType: Array.SetValue(Object,Int32,Int32,Int32)
  fullName: System.Array.SetValue(Object,Int32,Int32,Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)
  parent: System.Array
  isExternal: false
  name: SetValue(Object,Int64,Int64,Int64)
  nameWithType: Array.SetValue(Object,Int64,Int64,Int64)
  fullName: System.Array.SetValue(Object,Int64,Int64,Int64)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array.Sort(System.Array)
  parent: System.Array
  isExternal: false
  name: Sort(Array)
  nameWithType: Array.Sort(Array)
  fullName: System.Array.Sort(Array)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Array.Sort(System.Array,System.Array)
  parent: System.Array
  isExternal: false
  name: Sort(Array,Array)
  nameWithType: Array.Sort(Array,Array)
  fullName: System.Array.Sort(Array,Array)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Array.Sort(System.Array,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: Sort(Array,IComparer)
  nameWithType: Array.Sort(Array,IComparer)
  fullName: System.Array.Sort(Array,IComparer)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: Sort(Array,Array,IComparer)
  nameWithType: Array.Sort(Array,Array,IComparer)
  fullName: System.Array.Sort(Array,Array,IComparer)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Sort(Array,Int32,Int32)
  nameWithType: Array.Sort(Array,Int32,Int32)
  fullName: System.Array.Sort(Array,Int32,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Sort(Array,Array,Int32,Int32)
  nameWithType: Array.Sort(Array,Array,Int32,Int32)
  fullName: System.Array.Sort(Array,Array,Int32,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: Sort(Array,Int32,Int32,IComparer)
  nameWithType: Array.Sort(Array,Int32,Int32,IComparer)
  fullName: System.Array.Sort(Array,Int32,Int32,IComparer)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: Sort(Array,Array,Int32,Int32,IComparer)
  nameWithType: Array.Sort(Array,Array,Int32,Int32,IComparer)
  fullName: System.Array.Sort(Array,Array,Int32,Int32,IComparer)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Array.Sort``1(``0[])
  parent: System.Array
  isExternal: false
  name: Sort(T[])
  nameWithType: Array.Sort(T[])
  fullName: System.Array.Sort(T[])
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Array.Sort``1(``0[],System.Collections.Generic.IComparer`1)
  parent: System.Array
  isExternal: false
  name: Sort(T[],IComparer<T>)
  nameWithType: Array.Sort(T[],IComparer<T>)
  fullName: System.Array.Sort(T[],IComparer<T>)
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Array.Sort``1(``0[],System.Comparison`1)
  parent: System.Array
  isExternal: false
  name: Sort(T[],Comparison<T>)
  nameWithType: Array.Sort(T[],Comparison<T>)
  fullName: System.Array.Sort(T[],Comparison<T>)
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Comparison`1
  parent: System
  isExternal: false
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Sort(T[],Int32,Int32)
  nameWithType: Array.Sort(T[],Int32,Int32)
  fullName: System.Array.Sort(T[],Int32,Int32)
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer`1)
  parent: System.Array
  isExternal: false
  name: Sort(T[],Int32,Int32,IComparer<T>)
  nameWithType: Array.Sort(T[],Int32,Int32,IComparer<T>)
  fullName: System.Array.Sort(T[],Int32,Int32,IComparer<T>)
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Array.Sort``2(``0[],``1[])
  parent: System.Array
  isExternal: false
  name: Sort(TKey[],TValue[])
  nameWithType: Array.Sort(TKey[],TValue[])
  fullName: System.Array.Sort(TKey[],TValue[])
- uid: TKey
  parent: ''
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey[]
- uid: TValue
  parent: ''
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue[]
- uid: System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  isExternal: false
  name: Sort(TKey[],TValue[],IComparer<TKey>)
  nameWithType: Array.Sort(TKey[],TValue[],IComparer<TKey>)
  fullName: System.Array.Sort(TKey[],TValue[],IComparer<TKey>)
- uid: TKey
  parent: ''
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey[]
- uid: TValue
  parent: ''
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue[]
- uid: System.Collections.Generic.IComparer{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<TKey>
  nameWithType: IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  parent: System.Array
  isExternal: false
  name: Sort(TKey[],TValue[],Int32,Int32)
  nameWithType: Array.Sort(TKey[],TValue[],Int32,Int32)
  fullName: System.Array.Sort(TKey[],TValue[],Int32,Int32)
- uid: TKey
  parent: ''
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey[]
- uid: TValue
  parent: ''
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  isExternal: false
  name: Sort(TKey[],TValue[],Int32,Int32,IComparer<TKey>)
  nameWithType: Array.Sort(TKey[],TValue[],Int32,Int32,IComparer<TKey>)
  fullName: System.Array.Sort(TKey[],TValue[],Int32,Int32,IComparer<TKey>)
- uid: TKey
  parent: ''
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey[]
- uid: TValue
  parent: ''
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IComparer{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<TKey>
  nameWithType: IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
- uid: System.Array.SyncRoot
  parent: System.Array
  isExternal: false
  name: SyncRoot
  nameWithType: Array.SyncRoot
  fullName: System.Array.SyncRoot
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.System#Collections#ICollection#Count
  parent: System.Array
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: Array.System.Collections.ICollection.Count
  fullName: System.Array.System.Collections.ICollection.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.System#Collections#IList#Add(System.Object)
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: Array.System.Collections.IList.Add(Object)
  fullName: System.Array.System.Collections.IList.Add(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.System#Collections#IList#Clear
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Clear()
  nameWithType: Array.System.Collections.IList.Clear()
  fullName: System.Array.System.Collections.IList.Clear()
- uid: System.Array.System#Collections#IList#Contains(System.Object)
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: Array.System.Collections.IList.Contains(Object)
  fullName: System.Array.System.Collections.IList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.System#Collections#IList#IndexOf(System.Object)
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Array.System.Collections.IList.IndexOf(Object)
  fullName: System.Array.System.Collections.IList.IndexOf(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Array.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Array.System.Collections.IList.Insert(Int32,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.System#Collections#IList#Item(System.Int32)
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: Array.System.Collections.IList.Item(Int32)
  fullName: System.Array.System.Collections.IList.Item(Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.System#Collections#IList#Remove(System.Object)
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: Array.System.Collections.IList.Remove(Object)
  fullName: System.Array.System.Collections.IList.Remove(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Array.System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Array
  isExternal: false
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Array.System.Collections.IList.RemoveAt(Int32)
  fullName: System.Array.System.Collections.IList.RemoveAt(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Array
  isExternal: false
  name: System.Collections.IStructuralComparable.CompareTo(Object,IComparer)
  nameWithType: Array.System.Collections.IStructuralComparable.CompareTo(Object,IComparer)
  fullName: System.Array.System.Collections.IStructuralComparable.CompareTo(Object,IComparer)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Array
  isExternal: false
  name: System.Collections.IStructuralEquatable.Equals(Object,IEqualityComparer)
  nameWithType: Array.System.Collections.IStructuralEquatable.Equals(Object,IEqualityComparer)
  fullName: System.Array.System.Collections.IStructuralEquatable.Equals(Object,IEqualityComparer)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Array
  isExternal: false
  name: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Array.System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Array.System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Array.TrueForAll``1(``0[],System.Predicate`1)
  parent: System.Array
  isExternal: false
  name: TrueForAll(T[],Predicate<T>)
  nameWithType: Array.TrueForAll(T[],Predicate<T>)
  fullName: System.Array.TrueForAll(T[],Predicate<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Array.BinarySearch*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.BinarySearch<T>*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.Copy*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.CopyTo*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.CreateInstance*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.FindIndex<T>*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.FindLastIndex<T>*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.GetValue*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.IndexOf*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.IndexOf<T>*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.LastIndexOf*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.LastIndexOf<T>*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.Reverse*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.SetValue*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.Sort*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.Sort<T>*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
- uid: System.Array.Sort<TKey,TValue>*
  parent: System.Array
  isExternal: false
  nameWithType: Array.
