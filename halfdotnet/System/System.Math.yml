### YamlMime:ManagedReference
items:
- uid: System.Math
  id: Math
  children:
  - System.Math.Abs(System.Decimal)
  - System.Math.Abs(System.Double)
  - System.Math.Abs(System.Int16)
  - System.Math.Abs(System.Int32)
  - System.Math.Abs(System.Int64)
  - System.Math.Abs(System.SByte)
  - System.Math.Abs(System.Single)
  - System.Math.Acos(System.Double)
  - System.Math.Asin(System.Double)
  - System.Math.Atan(System.Double)
  - System.Math.Atan2(System.Double,System.Double)
  - System.Math.BigMul(System.Int32,System.Int32)
  - System.Math.Ceiling(System.Decimal)
  - System.Math.Ceiling(System.Double)
  - System.Math.Cos(System.Double)
  - System.Math.Cosh(System.Double)
  - System.Math.DivRem(System.Int32,System.Int32,System.Int32@)
  - System.Math.DivRem(System.Int64,System.Int64,System.Int64@)
  - System.Math.E
  - System.Math.Exp(System.Double)
  - System.Math.Floor(System.Decimal)
  - System.Math.Floor(System.Double)
  - System.Math.IEEERemainder(System.Double,System.Double)
  - System.Math.Log(System.Double)
  - System.Math.Log(System.Double,System.Double)
  - System.Math.Log10(System.Double)
  - System.Math.Max(System.Byte,System.Byte)
  - System.Math.Max(System.Decimal,System.Decimal)
  - System.Math.Max(System.Double,System.Double)
  - System.Math.Max(System.Int16,System.Int16)
  - System.Math.Max(System.Int32,System.Int32)
  - System.Math.Max(System.Int64,System.Int64)
  - System.Math.Max(System.SByte,System.SByte)
  - System.Math.Max(System.Single,System.Single)
  - System.Math.Max(System.UInt16,System.UInt16)
  - System.Math.Max(System.UInt32,System.UInt32)
  - System.Math.Max(System.UInt64,System.UInt64)
  - System.Math.Min(System.Byte,System.Byte)
  - System.Math.Min(System.Decimal,System.Decimal)
  - System.Math.Min(System.Double,System.Double)
  - System.Math.Min(System.Int16,System.Int16)
  - System.Math.Min(System.Int32,System.Int32)
  - System.Math.Min(System.Int64,System.Int64)
  - System.Math.Min(System.SByte,System.SByte)
  - System.Math.Min(System.Single,System.Single)
  - System.Math.Min(System.UInt16,System.UInt16)
  - System.Math.Min(System.UInt32,System.UInt32)
  - System.Math.Min(System.UInt64,System.UInt64)
  - System.Math.PI
  - System.Math.Pow(System.Double,System.Double)
  - System.Math.Round(System.Decimal)
  - System.Math.Round(System.Double)
  - System.Math.Round(System.Decimal,System.Int32)
  - System.Math.Round(System.Decimal,System.MidpointRounding)
  - System.Math.Round(System.Double,System.Int32)
  - System.Math.Round(System.Double,System.MidpointRounding)
  - System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)
  - System.Math.Round(System.Double,System.Int32,System.MidpointRounding)
  - System.Math.Sign(System.Decimal)
  - System.Math.Sign(System.Double)
  - System.Math.Sign(System.Int16)
  - System.Math.Sign(System.Int32)
  - System.Math.Sign(System.Int64)
  - System.Math.Sign(System.SByte)
  - System.Math.Sign(System.Single)
  - System.Math.Sin(System.Double)
  - System.Math.Sinh(System.Double)
  - System.Math.Sqrt(System.Double)
  - System.Math.Tan(System.Double)
  - System.Math.Tanh(System.Double)
  - System.Math.Truncate(System.Decimal)
  - System.Math.Truncate(System.Double)
  langs:
  - csharp
  name: Math
  nameWithType: Math
  fullName: System.Math
  type: Class
  summary: "Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.  \n  \n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/math.cs#a4407e67b9a5afad)."
  remarks: >-
    > [!NOTE]

    >  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/math.cs#a4407e67b9a5afad). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).
  example:
  - "The following example uses several mathematical and trigonometric functions from the Math class to calculate the inner angles of a trapezoid.  \n  \n [!CODE [MathSample#1](../CodeSnippet/VS_Snippets_CLR/MathSample#1)]"
  syntax:
    content: public static class Math
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Abs(System.Decimal)
  id: Abs(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  name: Abs(Decimal)
  nameWithType: Math.Abs(Decimal)
  fullName: System.Math.Abs(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the absolute value of a <see cref="T:System.Decimal"> number.
  remarks: The absolute value of a <xref:System.Decimal> is its numeric value without its sign. For example, the absolute value of both 1.2 and -1.2 is 1.2.
  example:
  - "The following example uses the Abs method to get the absolute value of a number of <xref:System.Decimal> values.  \n  \n [!CODE [System.Math.Abs#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Abs#1)]"
  syntax:
    content: public static decimal Abs (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: A number that is greater than or equal to <xref:System.Decimal?displayProperty=fullName>, but less than or equal to <xref:System.Decimal?displayProperty=fullName>.
    return:
      type: System.Decimal
      description: A decimal number, x, such that 0 ≤ x ≤<xref:System.Decimal?displayProperty=fullName>.
  overload: System.Math.Abs*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Abs(System.Double)
  id: Abs(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Abs(Double)
  nameWithType: Math.Abs(Double)
  fullName: System.Math.Abs(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the absolute value of a double-precision floating-point number.
  remarks: "The absolute value of a <xref:System.Double> is its numeric value without its sign. For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.  \n  \n If  is equal to <xref:System.Double> or <xref:System.Double>, the return value is <xref:System.Double>. If  is equal to <xref:System.Double>, the return value is <xref:System.Double>."
  example:
  - "The following example uses the Abs method to get the absolute value of a number of <xref:System.Double> values.  \n  \n [!CODE [System.Math.Abs#2](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Abs#2)]"
  syntax:
    content: public static double Abs (double value);
    parameters:
    - id: value
      type: System.Double
      description: A number that is greater than or equal to <xref:System.Double?displayProperty=fullName>, but less than or equal to <xref:System.Double?displayProperty=fullName>.
    return:
      type: System.Double
      description: A double-precision floating-point number, x, such that 0 ≤ x ≤<xref:System.Double?displayProperty=fullName>.
  overload: System.Math.Abs*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Abs(System.Int16)
  id: Abs(System.Int16)
  parent: System.Math
  langs:
  - csharp
  name: Abs(Int16)
  nameWithType: Math.Abs(Int16)
  fullName: System.Math.Abs(Int16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the absolute value of a 16-bit signed integer.
  remarks: The absolute value of an <xref:System.Int16> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.
  example:
  - "The following example uses the Abs method to get the absolute value of a number of <xref:System.Int16> values.  \n  \n [!CODE [System.Math.Abs#3](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Abs#3)]"
  syntax:
    content: public static short Abs (short value);
    parameters:
    - id: value
      type: System.Int16
      description: A number that is greater than <xref:System.Int16?displayProperty=fullName>, but less than or equal to <xref:System.Int16?displayProperty=fullName>.
    return:
      type: System.Int16
      description: A 16-bit signed integer, x, such that 0 ≤ x ≤<xref:System.Int16?displayProperty=fullName>.
  overload: System.Math.Abs*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Abs(System.Int32)
  id: Abs(System.Int32)
  parent: System.Math
  langs:
  - csharp
  name: Abs(Int32)
  nameWithType: Math.Abs(Int32)
  fullName: System.Math.Abs(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the absolute value of a 32-bit signed integer.
  remarks: The absolute value of an <xref:System.Int32> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.
  example:
  - "The following example uses the Abs method to get the absolute value of a number of <xref:System.Int32> values.  \n  \n [!CODE [System.Math.Abs#4](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Abs#4)]"
  syntax:
    content: public static int Abs (int value);
    parameters:
    - id: value
      type: System.Int32
      description: A number that is greater than <xref:System.Int32?displayProperty=fullName>, but less than or equal to <xref:System.Int32?displayProperty=fullName>.
    return:
      type: System.Int32
      description: A 32-bit signed integer, x, such that 0 ≤ x ≤<xref:System.Int32?displayProperty=fullName>.
  overload: System.Math.Abs*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Abs(System.Int64)
  id: Abs(System.Int64)
  parent: System.Math
  langs:
  - csharp
  name: Abs(Int64)
  nameWithType: Math.Abs(Int64)
  fullName: System.Math.Abs(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the absolute value of a 64-bit signed integer.
  remarks: The absolute value of an <xref:System.Int64> is its numeric value without its sign. For example, the absolute value of both 123 and -123 is 123.
  example:
  - "The following example uses the Abs method to get the absolute value of a number of <xref:System.Int64> values.  \n  \n [!CODE [System.Math.Abs#5](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Abs#5)]"
  syntax:
    content: public static long Abs (long value);
    parameters:
    - id: value
      type: System.Int64
      description: A number that is greater than <xref:System.Int64?displayProperty=fullName>, but less than or equal to <xref:System.Int64?displayProperty=fullName>.
    return:
      type: System.Int64
      description: A 64-bit signed integer, x, such that 0 ≤ x ≤<xref:System.Int64?displayProperty=fullName>.
  overload: System.Math.Abs*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Abs(System.SByte)
  id: Abs(System.SByte)
  parent: System.Math
  langs:
  - csharp
  name: Abs(SByte)
  nameWithType: Math.Abs(SByte)
  fullName: System.Math.Abs(SByte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the absolute value of an 8-bit signed integer.
  remarks: The absolute value of a signed byte is its numeric value without its sign. For example, the absolute value of both 12 and -12 is 12.
  example:
  - "The following example uses the Abs method to get the absolute value of a number of <xref:System.SByte> values.  \n  \n [!CODE [System.Math.Abs#6](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Abs#6)]"
  syntax:
    content: public static sbyte Abs (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: A number that is greater than <xref:System.SByte?displayProperty=fullName>, but less than or equal to <xref:System.SByte?displayProperty=fullName>.
    return:
      type: System.SByte
      description: An 8-bit signed integer, x, such that 0 ≤ x ≤<xref:System.SByte?displayProperty=fullName>.
  overload: System.Math.Abs*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Abs(System.Single)
  id: Abs(System.Single)
  parent: System.Math
  langs:
  - csharp
  name: Abs(Single)
  nameWithType: Math.Abs(Single)
  fullName: System.Math.Abs(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the absolute value of a single-precision floating-point number.
  remarks: "The absolute value of a <xref:System.Single> is its numeric value without its sign. For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.  \n  \n If  is equal to <xref:System.Single> or <xref:System.Single>, the return value is <xref:System.Single>. If  is equal to <xref:System.Single>, the return value is <xref:System.Single>."
  example:
  - "The following example uses the Abs method to get the absolute value of a number of <xref:System.Single> values.  \n  \n [!CODE [System.Math.Abs#7](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Abs#7)]"
  syntax:
    content: public static float Abs (float value);
    parameters:
    - id: value
      type: System.Single
      description: A number that is greater than or equal to <xref:System.Single?displayProperty=fullName>, but less than or equal to <xref:System.Single?displayProperty=fullName>.
    return:
      type: System.Single
      description: A single-precision floating-point number, x, such that 0 ≤ x ≤<xref:System.Single?displayProperty=fullName>.
  overload: System.Math.Abs*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Acos(System.Double)
  id: Acos(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Acos(Double)
  nameWithType: Math.Acos(Double)
  fullName: System.Math.Acos(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the angle whose cosine is the specified number.
  remarks: Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees.
  example:
  - "The following example uses the Acos method to assist in the computation of the inner angles of a given trapezoid.  \n  \n [!CODE [MathSample#1](../CodeSnippet/VS_Snippets_CLR/MathSample#1)]"
  syntax:
    content: public static double Acos (double d);
    parameters:
    - id: d
      type: System.Double
      description: A number representing a cosine, where  must be greater than or equal to -1, but less than or equal to 1.
    return:
      type: System.Double
      description: "An angle, θ, measured in radians, such that 0 ≤θ≤π  \n  \n -or-  \n  \n <see cref=\"T:System.Double\"> if  \\< -1 or  > 1 or  equals <see cref=\"T:System.Double\">."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Asin(System.Double)
  id: Asin(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Asin(Double)
  nameWithType: Math.Asin(Double)
  fullName: System.Math.Asin(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the angle whose sine is the specified number.
  remarks: "A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.  \n  \n Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees."
  example:
  - "The following example uses Asin to assist in the computation of the inner angles of a given trapezoid.  \n  \n [!CODE [MathSample#1](../CodeSnippet/VS_Snippets_CLR/MathSample#1)]"
  syntax:
    content: public static double Asin (double d);
    parameters:
    - id: d
      type: System.Double
      description: A number representing a sine, where  must be greater than or equal to -1, but less than or equal to 1.
    return:
      type: System.Double
      description: "An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2  \n  \n -or-  \n  \n <see cref=\"T:System.Double\"> if  \\< -1 or  > 1 or  equals <see cref=\"T:System.Double\">."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Atan(System.Double)
  id: Atan(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Atan(Double)
  nameWithType: Math.Atan(Double)
  fullName: System.Math.Atan(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the angle whose tangent is the specified number.
  remarks: "A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.  \n  \n Multiply the return value by 180/<xref:System.Math.PI?displayProperty=fullName> to convert from radians to degrees."
  example:
  - "The following example demonstrates how to calculate the arctangent of a value and display it to the console.  \n  \n [!CODE [math.atanx#1](../CodeSnippet/VS_Snippets_CLR/math.atanx#1)]"
  syntax:
    content: public static double Atan (double d);
    parameters:
    - id: d
      type: System.Double
      description: A number representing a tangent.
    return:
      type: System.Double
      description: "An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.  \n  \n -or-  \n  \n <see cref=\"T:System.Double\"> if  equals <see cref=\"T:System.Double\">, -π/2 rounded to double precision (-1.5707963267949) if  equals <see cref=\"T:System.Double\">, or π/2 rounded to double precision (1.5707963267949) if  equals <see cref=\"T:System.Double\">."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Atan2(System.Double,System.Double)
  id: Atan2(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Atan2(Double,Double)
  nameWithType: Math.Atan2(Double,Double)
  fullName: System.Math.Atan2(Double,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the angle whose tangent is the quotient of two specified numbers.
  remarks: The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).
  example:
  - "The following example demonstrates how to calculate the arctangent of an angle and a vector. The resulting value is displayed in the console.  \n  \n [!CODE [math.atanx#1](../CodeSnippet/VS_Snippets_CLR/math.atanx#1)]"
  syntax:
    content: public static double Atan2 (double y, double x);
    parameters:
    - id: y
      type: System.Double
      description: The y coordinate of a point.
    - id: x
      type: System.Double
      description: The x coordinate of a point.
    return:
      type: System.Double
      description: "An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) =  / , where (, ) is a point in the Cartesian plane. Observe the following:  \n  \n-   For (, ) in quadrant 1, 0 < θ < π/2.  \n  \n-   For (, ) in quadrant 2, π/2 < θ≤π.  \n  \n-   For (, ) in quadrant 3, -π < θ < -π/2.  \n  \n-   For (, ) in quadrant 4, -π/2 < θ < 0.  \n  \n For points on the boundaries of the quadrants, the return value is the following:  \n  \n-   If y is 0 and x is not negative, θ = 0.  \n  \n-   If y is 0 and x is negative, θ = π.  \n  \n-   If y is positive and x is 0, θ = π/2.  \n  \n-   If y is negative and x is 0, θ = -π/2.  \n  \n-   If y is 0 and x is 0, θ = 0.  \n  \n If  or  is <see cref=\"T:System.Double\">, or if  and  are either <see cref=\"T:System.Double\"> or <see cref=\"T:System.Double\">, the method returns <see cref=\"T:System.Double\">."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.BigMul(System.Int32,System.Int32)
  id: BigMul(System.Int32,System.Int32)
  parent: System.Math
  langs:
  - csharp
  name: BigMul(Int32,Int32)
  nameWithType: Math.BigMul(Int32,Int32)
  fullName: System.Math.BigMul(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Produces the full product of two 32-bit numbers.
  remarks: ''
  example:
  - "The following example demonstrates the use of the BigMul method to calculate the product of two integer values.  \n  \n [!CODE [math.bigmul#1](../CodeSnippet/VS_Snippets_CLR/math.bigmul#1)]"
  syntax:
    content: public static long BigMul (int a, int b);
    parameters:
    - id: a
      type: System.Int32
      description: The first number to multiply.
    - id: b
      type: System.Int32
      description: The second number to multiply.
    return:
      type: System.Int64
      description: The number containing the product of the specified numbers.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Ceiling(System.Decimal)
  id: Ceiling(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  name: Ceiling(Decimal)
  nameWithType: Math.Ceiling(Decimal)
  fullName: System.Math.Ceiling(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smallest integral value that is greater than or equal to the specified decimal number.
  remarks: The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if  is positive, the presence of any fractional component causes  to be rounded to the next highest integer. If  is negative, the rounding operation causes any fractional component of  to be discarded. The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity.
  example:
  - "The following example illustrates the Ceiling method and contrasts it with the <xref:System.Math.Floor%28System.Decimal%29> method.  \n  \n [!CODE [System.Math.Ceiling#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Ceiling#1)]"
  syntax:
    content: public static decimal Ceiling (decimal d);
    parameters:
    - id: d
      type: System.Decimal
      description: A decimal number.
    return:
      type: System.Decimal
      description: The smallest integral value that is greater than or equal to . Note that this method returns a <see cref="T:System.Decimal"> instead of an integral type.
  overload: System.Math.Ceiling*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Ceiling(System.Double)
  id: Ceiling(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Ceiling(Double)
  nameWithType: Math.Ceiling(Double)
  fullName: System.Math.Ceiling(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.
  remarks: The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward positive infinity. In other words, if  is positive, the presence of any fractional component causes  to be rounded to the next highest integer. If  is negative, the rounding operation causes any fractional component of  to be discarded. The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity.
  example:
  - "The following example illustrates the Ceiling method and contrasts it with the <xref:System.Math.Floor%28System.Double%29> method.  \n  \n [!CODE [System.Math.Ceiling#2](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Ceiling#2)]"
  syntax:
    content: public static double Ceiling (double a);
    parameters:
    - id: a
      type: System.Double
      description: A double-precision floating-point number.
    return:
      type: System.Double
      description: The smallest integral value that is greater than or equal to . If  is equal to <see cref="T:System.Double">, <see cref="T:System.Double">, or <see cref="T:System.Double">, that value is returned. Note that this method returns a <see cref="T:System.Double"> instead of an integral type.
  overload: System.Math.Ceiling*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Cos(System.Double)
  id: Cos(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Cos(Double)
  nameWithType: Math.Cos(Double)
  fullName: System.Math.Cos(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the cosine of the specified angle.
  remarks: "The angle, , must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.  \n  \n Acceptable values of  range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside this range, the Cos method returns  unchanged rather than throwing an exception."
  example:
  - "The following example uses Cos to evaluate certain trigonometric identities for selected angles.  \n  \n [!CODE [System.Math.SinCos#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.SinCos#1)]"
  syntax:
    content: public static double Cos (double d);
    parameters:
    - id: d
      type: System.Double
      description: An angle, measured in radians.
    return:
      type: System.Double
      description: The cosine of . If  is equal to <see cref="T:System.Double">, <see cref="T:System.Double">, or <see cref="T:System.Double">, this method returns <see cref="T:System.Double">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Cosh(System.Double)
  id: Cosh(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Cosh(Double)
  nameWithType: Math.Cosh(Double)
  fullName: System.Math.Cosh(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hyperbolic cosine of the specified angle.
  remarks: The angle, , must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.
  example:
  - "The following example uses Cosh to evaluate certain hyperbolic identities for selected values.  \n  \n [!CODE [System.Math.SinhCosh#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.SinhCosh#1)]"
  syntax:
    content: public static double Cosh (double value);
    parameters:
    - id: value
      type: System.Double
      description: An angle, measured in radians.
    return:
      type: System.Double
      description: The hyperbolic cosine of . If  is equal to <see cref="T:System.Double"> or <see cref="T:System.Double">, <see cref="T:System.Double"> is returned. If  is equal to <see cref="T:System.Double">, <see cref="T:System.Double"> is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.DivRem(System.Int32,System.Int32,System.Int32@)
  id: DivRem(System.Int32,System.Int32,System.Int32@)
  parent: System.Math
  langs:
  - csharp
  name: DivRem(Int32,Int32,Int32)
  nameWithType: Math.DivRem(Int32,Int32,Int32)
  fullName: System.Math.DivRem(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.
  remarks: The remainder is calculated by using the modulus operation.
  example:
  - "The following example demonstrates the DivRem method.  \n  \n [!CODE [System.Math.DivRem#1](../CodeSnippet/VS_Snippets_CLR_System/system.math.divrem#1)]"
  syntax:
    content: public static int DivRem (int a, int b, out int result);
    parameters:
    - id: a
      type: System.Int32
      description: The dividend.
    - id: b
      type: System.Int32
      description: The divisor.
    - id: result
      type: System.Int32
      description: The remainder.
    return:
      type: System.Int32
      description: The quotient of the specified numbers.
  overload: System.Math.DivRem*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.DivRem(System.Int64,System.Int64,System.Int64@)
  id: DivRem(System.Int64,System.Int64,System.Int64@)
  parent: System.Math
  langs:
  - csharp
  name: DivRem(Int64,Int64,Int64)
  nameWithType: Math.DivRem(Int64,Int64,Int64)
  fullName: System.Math.DivRem(Int64,Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.
  remarks: The remainder is calculated by using the modulus operation.
  example:
  - "The following example demonstrates the DivRem method.  \n  \n [!CODE [System.Math.DivRem#2](../CodeSnippet/VS_Snippets_CLR_System/system.math.divrem#2)]"
  syntax:
    content: public static long DivRem (long a, long b, out long result);
    parameters:
    - id: a
      type: System.Int64
      description: The dividend.
    - id: b
      type: System.Int64
      description: The divisor.
    - id: result
      type: System.Int64
      description: The remainder.
    return:
      type: System.Int64
      description: The quotient of the specified numbers.
  overload: System.Math.DivRem*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.E
  id: E
  parent: System.Math
  langs:
  - csharp
  name: E
  nameWithType: Math.E
  fullName: System.Math.E
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the natural logarithmic base, specified by the constant, `e`.
  remarks: The value of this field is 2.7182818284590452354.
  example:
  - "The following example compares E with the value calculated from a power series.  \n  \n [!CODE [System.Math.E#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.E#1)]"
  syntax:
    content: public const double E = 2.71828182845905;
    return:
      type: System.Double
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Exp(System.Double)
  id: Exp(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Exp(Double)
  nameWithType: Math.Exp(Double)
  fullName: System.Math.Exp(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns `e` raised to the specified power.
  remarks: "`e` is a mathematical constant whose value is approximately 2.71828.  \n  \n Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases.  \n  \n Exp is the inverse of <xref:System.Math.Log%2A>."
  example:
  - "The following example uses Exp to evaluate certain exponential and logarithmic identities for selected values.  \n  \n [!CODE [System.Math.Exp#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Exp#1)]"
  syntax:
    content: public static double Exp (double d);
    parameters:
    - id: d
      type: System.Double
      description: A number specifying a power.
    return:
      type: System.Double
      description: The number `e` raised to the power . If  equals <see cref="T:System.Double"> or <see cref="T:System.Double">, that value is returned. If  equals <see cref="T:System.Double">, 0 is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Floor(System.Decimal)
  id: Floor(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  name: Floor(Decimal)
  nameWithType: Math.Floor(Decimal)
  fullName: System.Math.Floor(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the largest integer less than or equal to the specified decimal number.
  remarks: The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if  is positive, any fractional component is truncated. If  is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.
  example:
  - "The following example illustrates the Floor method and contrasts it with the <xref:System.Math.Ceiling%28System.Decimal%29> method.  \n  \n [!CODE [System.Math.Ceiling#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Ceiling#1)]"
  syntax:
    content: public static decimal Floor (decimal d);
    parameters:
    - id: d
      type: System.Decimal
      description: A decimal number.
    return:
      type: System.Decimal
      description: The largest integer less than or equal to .  Note that the method returns an integral value of type <see cref="T:System.Math">.
  overload: System.Math.Floor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Floor(System.Double)
  id: Floor(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Floor(Double)
  nameWithType: Math.Floor(Double)
  fullName: System.Math.Floor(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the largest integer less than or equal to the specified double-precision floating-point number.
  remarks: The behavior of this method follows IEEE Standard 754, section 4. This kind of rounding is sometimes called rounding toward negative infinity. In other words, if  is positive, any fractional component is truncated. If  is negative, the presence of any fractional component causes it to be rounded to the smaller integer. The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.
  example:
  - "The following example illustrates the Floor method and contrasts it with the <xref:System.Math.Ceiling%28System.Double%29> method.  \n  \n [!CODE [System.Math.Ceiling#2](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Ceiling#2)]"
  syntax:
    content: public static double Floor (double d);
    parameters:
    - id: d
      type: System.Double
      description: A double-precision floating-point number.
    return:
      type: System.Double
      description: The largest integer less than or equal to . If  is equal to <see cref="T:System.Double">, <see cref="T:System.Double">, or <see cref="T:System.Double">, that value is returned.
  overload: System.Math.Floor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.IEEERemainder(System.Double,System.Double)
  id: IEEERemainder(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  name: IEEERemainder(Double,Double)
  nameWithType: Math.IEEERemainder(Double,Double)
  fullName: System.Math.IEEERemainder(Double,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the remainder resulting from the division of a specified number by another specified number.
  remarks: "This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.  \n  \n TheIEEERemainder method is not the same as the modulus operator. Although both return the remainder after division, the formulas they use are different. The formula for the IEEERemainder method is:  \n  \n```  \nIEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))  \n```  \n  \n In contrast, the formula for the modulus operator is:  \n  \n```  \nModulus = (Math.Abs(dividend) - (Math.Abs(divisor) *   \n          (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) *   \n          Math.Sign(dividend)  \n```"
  example:
  - "The following example contrasts the remainder returned by the IEEERemainder method with the remainder returned by the modulus division operator.  \n  \n [!CODE [System.Math.IEEERemainder#1](../CodeSnippet/VS_Snippets_CLR_System/system.math.ieeeremainder#1)]"
  syntax:
    content: public static double IEEERemainder (double x, double y);
    parameters:
    - id: x
      type: System.Double
      description: A dividend.
    - id: y
      type: System.Double
      description: A divisor.
    return:
      type: System.Double
      description: "A number equal to  - ( Q), where Q is the quotient of  /  rounded to the nearest integer (if  /  falls halfway between two integers, the even integer is returned).  \n  \n If  - ( Q) is zero, the value +0 is returned if  is positive, or -0 if  is negative.  \n  \n If  = 0, <see cref=\"T:System.Double\"> is returned."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Log(System.Double)
  id: Log(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Log(Double)
  nameWithType: Math.Log(Double)
  fullName: System.Math.Log(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the natural (base `e`) logarithm of a specified number.
  remarks: Parameter  is specified as a base 10 number.
  example:
  - "The following example illustrates the Log method.  \n  \n [!CODE [System.Math.Log_Overloads#2](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Log_Overloads#2)]"
  syntax:
    content: public static double Log (double d);
    parameters:
    - id: d
      type: System.Double
      description: The number whose logarithm is to be found.
    return:
      type: System.Double
      description: "One of the values in the following table.  \n  \n|parameter|Return value|  \n|---------------|------------------|  \n|Positive|The natural logarithm of ; that is, ln , or log e|  \n|Zero|<see cref=\"T:System.Double\">|  \n|Negative|<see cref=\"T:System.Double\">|  \n|Equal to <see cref=\"T:System.Double\">|<see cref=\"T:System.Double\">|  \n|Equal to <see cref=\"T:System.Double\">|<see cref=\"T:System.Double\">|"
  overload: System.Math.Log*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Log(System.Double,System.Double)
  id: Log(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Log(Double,Double)
  nameWithType: Math.Log(Double,Double)
  fullName: System.Math.Log(Double,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the logarithm of a specified number in a specified base.
  remarks: ''
  example:
  - "The following example uses <xref:System.Math.Log%2A> to evaluate certain logarithmic identities for selected values.  \n  \n [!CODE [System.Math.Log_Overloads#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Log_Overloads#1)]"
  syntax:
    content: public static double Log (double a, double newBase);
    parameters:
    - id: a
      type: System.Double
      description: The number whose logarithm is to be found.
    - id: newBase
      type: System.Double
      description: The base of the logarithm.
    return:
      type: System.Double
      description: "One of the values in the following table. (+Infinity denotes <see cref=\"T:System.Double\">, -Infinity denotes <see cref=\"T:System.Double\">, and NaN denotes <see cref=\"T:System.Double\">.)  \n  \n|||Return value|  \n|-|-|------------------|  \n|> 0|(0 <\\< 1) -or-(> 1)|lognewBase(a)|  \n|< 0|(any value)|NaN|  \n|(any value)|< 0|NaN|  \n|!= 1|= 0|NaN|  \n|!= 1|= +Infinity|NaN|  \n|= NaN|(any value)|NaN|  \n|(any value)|= NaN|NaN|  \n|(any value)|= 1|NaN|  \n|= 0|0 <\\< 1|+Infinity|  \n|= 0|> 1|-Infinity|  \n|=  +Infinity|0 <\\< 1|-Infinity|  \n|=  +Infinity|> 1|+Infinity|  \n|= 1|= 0|0|  \n|= 1|= +Infinity|0|"
  overload: System.Math.Log*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Log10(System.Double)
  id: Log10(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Log10(Double)
  nameWithType: Math.Log10(Double)
  fullName: System.Math.Log10(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the base 10 logarithm of a specified number.
  remarks: Parameter  is specified as a base 10 number.
  example:
  - "The following example uses the Log10 method to return the base 10 logarithm for selected values.  \n  \n [!CODE [System.Math.Log10#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Log10#1)]"
  syntax:
    content: public static double Log10 (double d);
    parameters:
    - id: d
      type: System.Double
      description: A number whose logarithm is to be found.
    return:
      type: System.Double
      description: "One of the values in the following table.  \n  \n|parameter|Return value|  \n|---------------|------------------|  \n|Positive|The base 10 log of ; that is, log 10.|  \n|Zero|<see cref=\"T:System.Double\">|  \n|Negative|<see cref=\"T:System.Double\">|  \n|Equal to <see cref=\"T:System.Double\">|<see cref=\"T:System.Double\">|  \n|Equal to <see cref=\"T:System.Double\">|<see cref=\"T:System.Double\">|"
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.Byte,System.Byte)
  id: Max(System.Byte,System.Byte)
  parent: System.Math
  langs:
  - csharp
  name: Max(Byte,Byte)
  nameWithType: Math.Max(Byte,Byte)
  fullName: System.Math.Max(Byte,Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two 8-bit unsigned integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static byte Max (byte val1, byte val2);
    parameters:
    - id: val1
      type: System.Byte
      description: The first of two 8-bit unsigned integers to compare.
    - id: val2
      type: System.Byte
      description: The second of two 8-bit unsigned integers to compare.
    return:
      type: System.Byte
      description: Parameter  or , whichever is larger.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.Decimal,System.Decimal)
  id: Max(System.Decimal,System.Decimal)
  parent: System.Math
  langs:
  - csharp
  name: Max(Decimal,Decimal)
  nameWithType: Math.Max(Decimal,Decimal)
  fullName: System.Math.Max(Decimal,Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two decimal numbers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static decimal Max (decimal val1, decimal val2);
    parameters:
    - id: val1
      type: System.Decimal
      description: The first of two decimal numbers to compare.
    - id: val2
      type: System.Decimal
      description: The second of two decimal numbers to compare.
    return:
      type: System.Decimal
      description: Parameter  or , whichever is larger.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.Double,System.Double)
  id: Max(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Max(Double,Double)
  nameWithType: Math.Max(Double,Double)
  fullName: System.Math.Max(Double,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two double-precision floating-point numbers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static double Max (double val1, double val2);
    parameters:
    - id: val1
      type: System.Double
      description: The first of two double-precision floating-point numbers to compare.
    - id: val2
      type: System.Double
      description: The second of two double-precision floating-point numbers to compare.
    return:
      type: System.Double
      description: Parameter  or , whichever is larger. If , , or both  and  are equal to <see cref="T:System.Double">, <see cref="T:System.Double"> is returned.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.Int16,System.Int16)
  id: Max(System.Int16,System.Int16)
  parent: System.Math
  langs:
  - csharp
  name: Max(Int16,Int16)
  nameWithType: Math.Max(Int16,Int16)
  fullName: System.Math.Max(Int16,Int16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two 16-bit signed integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static short Max (short val1, short val2);
    parameters:
    - id: val1
      type: System.Int16
      description: The first of two 16-bit signed integers to compare.
    - id: val2
      type: System.Int16
      description: The second of two 16-bit signed integers to compare.
    return:
      type: System.Int16
      description: Parameter  or , whichever is larger.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.Int32,System.Int32)
  id: Max(System.Int32,System.Int32)
  parent: System.Math
  langs:
  - csharp
  name: Max(Int32,Int32)
  nameWithType: Math.Max(Int32,Int32)
  fullName: System.Math.Max(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two 32-bit signed integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static int Max (int val1, int val2);
    parameters:
    - id: val1
      type: System.Int32
      description: The first of two 32-bit signed integers to compare.
    - id: val2
      type: System.Int32
      description: The second of two 32-bit signed integers to compare.
    return:
      type: System.Int32
      description: Parameter  or , whichever is larger.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.Int64,System.Int64)
  id: Max(System.Int64,System.Int64)
  parent: System.Math
  langs:
  - csharp
  name: Max(Int64,Int64)
  nameWithType: Math.Max(Int64,Int64)
  fullName: System.Math.Max(Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two 64-bit signed integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static long Max (long val1, long val2);
    parameters:
    - id: val1
      type: System.Int64
      description: The first of two 64-bit signed integers to compare.
    - id: val2
      type: System.Int64
      description: The second of two 64-bit signed integers to compare.
    return:
      type: System.Int64
      description: Parameter  or , whichever is larger.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.SByte,System.SByte)
  id: Max(System.SByte,System.SByte)
  parent: System.Math
  langs:
  - csharp
  name: Max(SByte,SByte)
  nameWithType: Math.Max(SByte,SByte)
  fullName: System.Math.Max(SByte,SByte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two 8-bit signed integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static sbyte Max (sbyte val1, sbyte val2);
    parameters:
    - id: val1
      type: System.SByte
      description: The first of two 8-bit signed integers to compare.
    - id: val2
      type: System.SByte
      description: The second of two 8-bit signed integers to compare.
    return:
      type: System.SByte
      description: Parameter  or , whichever is larger.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.Single,System.Single)
  id: Max(System.Single,System.Single)
  parent: System.Math
  langs:
  - csharp
  name: Max(Single,Single)
  nameWithType: Math.Max(Single,Single)
  fullName: System.Math.Max(Single,Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two single-precision floating-point numbers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static float Max (float val1, float val2);
    parameters:
    - id: val1
      type: System.Single
      description: The first of two single-precision floating-point numbers to compare.
    - id: val2
      type: System.Single
      description: The second of two single-precision floating-point numbers to compare.
    return:
      type: System.Single
      description: Parameter  or , whichever is larger. If , or , or both  and  are equal to <see cref="T:System.Single">, <see cref="T:System.Single"> is returned.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.UInt16,System.UInt16)
  id: Max(System.UInt16,System.UInt16)
  parent: System.Math
  langs:
  - csharp
  name: Max(UInt16,UInt16)
  nameWithType: Math.Max(UInt16,UInt16)
  fullName: System.Math.Max(UInt16,UInt16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two 16-bit unsigned integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static ushort Max (ushort val1, ushort val2);
    parameters:
    - id: val1
      type: System.UInt16
      description: The first of two 16-bit unsigned integers to compare.
    - id: val2
      type: System.UInt16
      description: The second of two 16-bit unsigned integers to compare.
    return:
      type: System.UInt16
      description: Parameter  or , whichever is larger.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.UInt32,System.UInt32)
  id: Max(System.UInt32,System.UInt32)
  parent: System.Math
  langs:
  - csharp
  name: Max(UInt32,UInt32)
  nameWithType: Math.Max(UInt32,UInt32)
  fullName: System.Math.Max(UInt32,UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two 32-bit unsigned integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static uint Max (uint val1, uint val2);
    parameters:
    - id: val1
      type: System.UInt32
      description: The first of two 32-bit unsigned integers to compare.
    - id: val2
      type: System.UInt32
      description: The second of two 32-bit unsigned integers to compare.
    return:
      type: System.UInt32
      description: Parameter  or , whichever is larger.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Max(System.UInt64,System.UInt64)
  id: Max(System.UInt64,System.UInt64)
  parent: System.Math
  langs:
  - csharp
  name: Max(UInt64,UInt64)
  nameWithType: Math.Max(UInt64,UInt64)
  fullName: System.Math.Max(UInt64,UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the larger of two 64-bit unsigned integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.  \n  \n [!CODE [Math.Max#1](../CodeSnippet/VS_Snippets_CLR/math.max#1)]"
  syntax:
    content: public static ulong Max (ulong val1, ulong val2);
    parameters:
    - id: val1
      type: System.UInt64
      description: The first of two 64-bit unsigned integers to compare.
    - id: val2
      type: System.UInt64
      description: The second of two 64-bit unsigned integers to compare.
    return:
      type: System.UInt64
      description: Parameter  or , whichever is larger.
  overload: System.Math.Max*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.Byte,System.Byte)
  id: Min(System.Byte,System.Byte)
  parent: System.Math
  langs:
  - csharp
  name: Min(Byte,Byte)
  nameWithType: Math.Min(Byte,Byte)
  fullName: System.Math.Min(Byte,Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two 8-bit unsigned integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static byte Min (byte val1, byte val2);
    parameters:
    - id: val1
      type: System.Byte
      description: The first of two 8-bit unsigned integers to compare.
    - id: val2
      type: System.Byte
      description: The second of two 8-bit unsigned integers to compare.
    return:
      type: System.Byte
      description: Parameter  or , whichever is smaller.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.Decimal,System.Decimal)
  id: Min(System.Decimal,System.Decimal)
  parent: System.Math
  langs:
  - csharp
  name: Min(Decimal,Decimal)
  nameWithType: Math.Min(Decimal,Decimal)
  fullName: System.Math.Min(Decimal,Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two decimal numbers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static decimal Min (decimal val1, decimal val2);
    parameters:
    - id: val1
      type: System.Decimal
      description: The first of two decimal numbers to compare.
    - id: val2
      type: System.Decimal
      description: The second of two decimal numbers to compare.
    return:
      type: System.Decimal
      description: Parameter  or , whichever is smaller.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.Double,System.Double)
  id: Min(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Min(Double,Double)
  nameWithType: Math.Min(Double,Double)
  fullName: System.Math.Min(Double,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two double-precision floating-point numbers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static double Min (double val1, double val2);
    parameters:
    - id: val1
      type: System.Double
      description: The first of two double-precision floating-point numbers to compare.
    - id: val2
      type: System.Double
      description: The second of two double-precision floating-point numbers to compare.
    return:
      type: System.Double
      description: Parameter  or , whichever is smaller. If , , or both  and  are equal to <see cref="T:System.Double">, <see cref="T:System.Double"> is returned.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.Int16,System.Int16)
  id: Min(System.Int16,System.Int16)
  parent: System.Math
  langs:
  - csharp
  name: Min(Int16,Int16)
  nameWithType: Math.Min(Int16,Int16)
  fullName: System.Math.Min(Int16,Int16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two 16-bit signed integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static short Min (short val1, short val2);
    parameters:
    - id: val1
      type: System.Int16
      description: The first of two 16-bit signed integers to compare.
    - id: val2
      type: System.Int16
      description: The second of two 16-bit signed integers to compare.
    return:
      type: System.Int16
      description: Parameter  or , whichever is smaller.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.Int32,System.Int32)
  id: Min(System.Int32,System.Int32)
  parent: System.Math
  langs:
  - csharp
  name: Min(Int32,Int32)
  nameWithType: Math.Min(Int32,Int32)
  fullName: System.Math.Min(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two 32-bit signed integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static int Min (int val1, int val2);
    parameters:
    - id: val1
      type: System.Int32
      description: The first of two 32-bit signed integers to compare.
    - id: val2
      type: System.Int32
      description: The second of two 32-bit signed integers to compare.
    return:
      type: System.Int32
      description: Parameter  or , whichever is smaller.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.Int64,System.Int64)
  id: Min(System.Int64,System.Int64)
  parent: System.Math
  langs:
  - csharp
  name: Min(Int64,Int64)
  nameWithType: Math.Min(Int64,Int64)
  fullName: System.Math.Min(Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two 64-bit signed integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static long Min (long val1, long val2);
    parameters:
    - id: val1
      type: System.Int64
      description: The first of two 64-bit signed integers to compare.
    - id: val2
      type: System.Int64
      description: The second of two 64-bit signed integers to compare.
    return:
      type: System.Int64
      description: Parameter  or , whichever is smaller.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.SByte,System.SByte)
  id: Min(System.SByte,System.SByte)
  parent: System.Math
  langs:
  - csharp
  name: Min(SByte,SByte)
  nameWithType: Math.Min(SByte,SByte)
  fullName: System.Math.Min(SByte,SByte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two 8-bit signed integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static sbyte Min (sbyte val1, sbyte val2);
    parameters:
    - id: val1
      type: System.SByte
      description: The first of two 8-bit signed integers to compare.
    - id: val2
      type: System.SByte
      description: The second of two 8-bit signed integers to compare.
    return:
      type: System.SByte
      description: Parameter  or , whichever is smaller.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.Single,System.Single)
  id: Min(System.Single,System.Single)
  parent: System.Math
  langs:
  - csharp
  name: Min(Single,Single)
  nameWithType: Math.Min(Single,Single)
  fullName: System.Math.Min(Single,Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two single-precision floating-point numbers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static float Min (float val1, float val2);
    parameters:
    - id: val1
      type: System.Single
      description: The first of two single-precision floating-point numbers to compare.
    - id: val2
      type: System.Single
      description: The second of two single-precision floating-point numbers to compare.
    return:
      type: System.Single
      description: Parameter  or , whichever is smaller. If , , or both  and  are equal to <see cref="T:System.Single">, <see cref="T:System.Single"> is returned.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.UInt16,System.UInt16)
  id: Min(System.UInt16,System.UInt16)
  parent: System.Math
  langs:
  - csharp
  name: Min(UInt16,UInt16)
  nameWithType: Math.Min(UInt16,UInt16)
  fullName: System.Math.Min(UInt16,UInt16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two 16-bit unsigned integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static ushort Min (ushort val1, ushort val2);
    parameters:
    - id: val1
      type: System.UInt16
      description: The first of two 16-bit unsigned integers to compare.
    - id: val2
      type: System.UInt16
      description: The second of two 16-bit unsigned integers to compare.
    return:
      type: System.UInt16
      description: Parameter  or , whichever is smaller.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.UInt32,System.UInt32)
  id: Min(System.UInt32,System.UInt32)
  parent: System.Math
  langs:
  - csharp
  name: Min(UInt32,UInt32)
  nameWithType: Math.Min(UInt32,UInt32)
  fullName: System.Math.Min(UInt32,UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two 32-bit unsigned integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static uint Min (uint val1, uint val2);
    parameters:
    - id: val1
      type: System.UInt32
      description: The first of two 32-bit unsigned integers to compare.
    - id: val2
      type: System.UInt32
      description: The second of two 32-bit unsigned integers to compare.
    return:
      type: System.UInt32
      description: Parameter  or , whichever is smaller.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Min(System.UInt64,System.UInt64)
  id: Min(System.UInt64,System.UInt64)
  parent: System.Math
  langs:
  - csharp
  name: Min(UInt64,UInt64)
  nameWithType: Math.Min(UInt64,UInt64)
  fullName: System.Math.Min(UInt64,UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the smaller of two 64-bit unsigned integers.
  remarks: ''
  example:
  - "The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.  \n  \n [!CODE [Math.Min#1](../CodeSnippet/VS_Snippets_CLR/math.min#1)]"
  syntax:
    content: public static ulong Min (ulong val1, ulong val2);
    parameters:
    - id: val1
      type: System.UInt64
      description: The first of two 64-bit unsigned integers to compare.
    - id: val2
      type: System.UInt64
      description: The second of two 64-bit unsigned integers to compare.
    return:
      type: System.UInt64
      description: Parameter  or , whichever is smaller.
  overload: System.Math.Min*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.PI
  id: PI
  parent: System.Math
  langs:
  - csharp
  name: PI
  nameWithType: Math.PI
  fullName: System.Math.PI
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.
  remarks: The value of this field is 3.14159265358979323846.
  example:
  - "The following example uses PI to assist in the computation of the inner angles of a given trapezoid.  \n  \n [!CODE [MathSample#1](../CodeSnippet/VS_Snippets_CLR/MathSample#1)]"
  syntax:
    content: public const double PI = 3.14159265358979;
    return:
      type: System.Double
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Pow(System.Double,System.Double)
  id: Pow(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Pow(Double,Double)
  nameWithType: Math.Pow(Double,Double)
  fullName: System.Math.Pow(Double,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a specified number raised to the specified power.
  remarks: "The following table indicates the return value when various values or ranges of values are specified for the  and  parameters. For more information, see <xref:System.Double?displayProperty=fullName>, <xref:System.Double?displayProperty=fullName>, and <xref:System.Double?displayProperty=fullName>.  \n  \n|Parameters|Return value|  \n|----------------|------------------|  \n|or  = `NaN`.|`NaN`|  \n|= Any value except `NaN`;  = 0.|1|  \n|= `NegativeInfinity`;  < 0.|0|  \n|= `NegativeInfinity`;  is a positive odd integer.|`NegativeInfinity`|  \n|= `NegativeInfinity`;  is positive but not an odd integer.|`PositiveInfinity`|  \n|< 0 but not `NegativeInfinity`;  is not an integer, `NegativeInfinity`, or `PositiveInfinity`.|`NaN`|  \n|= -1;  = `NegativeInfinity` or `PositiveInfinity`.|`NaN`|  \n|-1 <  < 1;  = `NegativeInfinity`.|`PositiveInfinity`|  \n|-1 <  < 1;  = `PositiveInfinity`.|0|  \n|\\< -1 or  > 1;  = `NegativeInfinity`.|0|  \n|\\< -1 or  > 1;  = `PositiveInfinity`.|`PositiveInfinity`|  \n|= 0;  < 0.|`PositiveInfinity`|  \n|= 0;  > 0.|0|  \n|= 1;  is any value except `NaN`.|1|  \n|= `PositiveInfinity`;  < 0.|0|  \n|= `PositiveInfinity`;  > 0.|`PositiveInfinity`|"
  example:
  - "The following example uses the Pow method to calculate the value that results from raising 2 to a power ranging from 0 to 32.  \n  \n [!CODE [System.Math.Pow#1](../CodeSnippet/VS_Snippets_CLR_System/system.math.pow#1)]"
  syntax:
    content: public static double Pow (double x, double y);
    parameters:
    - id: x
      type: System.Double
      description: A double-precision floating-point number to be raised to a power.
    - id: y
      type: System.Double
      description: A double-precision floating-point number that specifies a power.
    return:
      type: System.Double
      description: The number  raised to the power .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Round(System.Decimal)
  id: Round(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  name: Round(Decimal)
  nameWithType: Math.Round(Decimal)
  fullName: System.Math.Round(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Rounds a decimal value to the nearest integral value.
  remarks: >-
    > [!NOTE]

    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.
  syntax:
    content: public static decimal Round (decimal d);
    parameters:
    - id: d
      type: System.Decimal
      description: A decimal number to be rounded.
    return:
      type: System.Decimal
      description: The integer nearest parameter . If the fractional component of  is halfway between two integers, one of which is even and the other odd, the even number is returned. Note that this method returns a <see cref="T:System.Decimal"> instead of an integral type.
  overload: System.Math.Round*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Round(System.Double)
  id: Round(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Round(Double)
  nameWithType: Math.Round(Double)
  fullName: System.Math.Round(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Rounds a double-precision floating-point value to the nearest integral value.
  remarks: >-
    > [!NOTE]

    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.
  syntax:
    content: public static double Round (double a);
    parameters:
    - id: a
      type: System.Double
      description: A double-precision floating-point number to be rounded.
    return:
      type: System.Double
      description: The integer nearest . If the fractional component of  is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a <see cref="T:System.Double"> instead of an integral type.
  overload: System.Math.Round*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Round(System.Decimal,System.Int32)
  id: Round(System.Decimal,System.Int32)
  parent: System.Math
  langs:
  - csharp
  name: Round(Decimal,Int32)
  nameWithType: Math.Round(Decimal,Int32)
  fullName: System.Math.Round(Decimal,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Rounds a decimal value to a specified number of fractional digits.
  remarks: >-
    > [!NOTE]

    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.
  syntax:
    content: public static decimal Round (decimal d, int decimals);
    parameters:
    - id: d
      type: System.Decimal
      description: A decimal number to be rounded.
    - id: decimals
      type: System.Int32
      description: The number of decimal places in the return value.
    return:
      type: System.Decimal
      description: The number nearest to  that contains a number of fractional digits equal to .
  overload: System.Math.Round*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Round(System.Decimal,System.MidpointRounding)
  id: Round(System.Decimal,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  name: Round(Decimal,MidpointRounding)
  nameWithType: Math.Round(Decimal,MidpointRounding)
  fullName: System.Math.Round(Decimal,MidpointRounding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.
  remarks: >-
    > [!NOTE]

    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.
  syntax:
    content: public static decimal Round (decimal d, MidpointRounding mode);
    parameters:
    - id: d
      type: System.Decimal
      description: A decimal number to be rounded.
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round  if it is midway between two other numbers.
    return:
      type: System.Decimal
      description: The integer nearest . If  is halfway between two numbers, one of which is even and the other odd, then  determines which of the two is returned.
  overload: System.Math.Round*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Round(System.Double,System.Int32)
  id: Round(System.Double,System.Int32)
  parent: System.Math
  langs:
  - csharp
  name: Round(Double,Int32)
  nameWithType: Math.Round(Double,Int32)
  fullName: System.Math.Round(Double,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Rounds a double-precision floating-point value to a specified number of fractional digits.
  remarks: >-
    > [!NOTE]

    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.
  syntax:
    content: public static double Round (double value, int digits);
    parameters:
    - id: value
      type: System.Double
      description: A double-precision floating-point number to be rounded.
    - id: digits
      type: System.Int32
      description: The number of fractional digits in the return value.
    return:
      type: System.Double
      description: The number nearest to  that contains a number of fractional digits equal to .
  overload: System.Math.Round*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Round(System.Double,System.MidpointRounding)
  id: Round(System.Double,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  name: Round(Double,MidpointRounding)
  nameWithType: Math.Round(Double,MidpointRounding)
  fullName: System.Math.Round(Double,MidpointRounding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.
  remarks: >-
    > [!NOTE]

    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.
  syntax:
    content: public static double Round (double value, MidpointRounding mode);
    parameters:
    - id: value
      type: System.Double
      description: A double-precision floating-point number to be rounded.
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round  if it is midway between two other numbers.
    return:
      type: System.Double
      description: The integer nearest . If  is halfway between two integers, one of which is even and the other odd, then  determines which of the two is returned.
  overload: System.Math.Round*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)
  id: Round(System.Decimal,System.Int32,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  name: Round(Decimal,Int32,MidpointRounding)
  nameWithType: Math.Round(Decimal,Int32,MidpointRounding)
  fullName: System.Math.Round(Decimal,Int32,MidpointRounding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.
  remarks: >-
    > [!NOTE]

    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.
  syntax:
    content: public static decimal Round (decimal d, int decimals, MidpointRounding mode);
    parameters:
    - id: d
      type: System.Decimal
      description: A decimal number to be rounded.
    - id: decimals
      type: System.Int32
      description: The number of decimal places in the return value.
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round  if it is midway between two other numbers.
    return:
      type: System.Decimal
      description: The number nearest to  that contains a number of fractional digits equal to . If  has fewer fractional digits than ,  is returned unchanged.
  overload: System.Math.Round*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Round(System.Double,System.Int32,System.MidpointRounding)
  id: Round(System.Double,System.Int32,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  name: Round(Double,Int32,MidpointRounding)
  nameWithType: Math.Round(Double,Int32,MidpointRounding)
  fullName: System.Math.Round(Double,Int32,MidpointRounding)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.
  remarks: >-
    > [!NOTE]

    >  For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.
  syntax:
    content: public static double Round (double value, int digits, MidpointRounding mode);
    parameters:
    - id: value
      type: System.Double
      description: A double-precision floating-point number to be rounded.
    - id: digits
      type: System.Int32
      description: The number of fractional digits in the return value.
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round  if it is midway between two other numbers.
    return:
      type: System.Double
      description: The number nearest to  that has a number of fractional digits equal to . If  has fewer fractional digits than ,  is returned unchanged.
  overload: System.Math.Round*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Sign(System.Decimal)
  id: Sign(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  name: Sign(Decimal)
  nameWithType: Math.Sign(Decimal)
  fullName: System.Math.Sign(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an integer that indicates the sign of a decimal number.
  remarks: ''
  example:
  - "The following example demonstrates how to use the Sign method to determine the sign of a <xref:System.Decimal> value and display it to the console.  \n  \n [!CODE [Math.Sign#1](../CodeSnippet/VS_Snippets_CLR/math.sign#1)]"
  syntax:
    content: public static int Sign (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: A signed decimal number.
    return:
      type: System.Int32
      description: "A number that indicates the sign of , as shown in the following table.  \n  \n|Return value|Meaning|  \n|------------------|-------------|  \n|-1|is less than zero.|  \n|0|is equal to zero.|  \n|1|is greater than zero.|"
  overload: System.Math.Sign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Sign(System.Double)
  id: Sign(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Sign(Double)
  nameWithType: Math.Sign(Double)
  fullName: System.Math.Sign(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an integer that indicates the sign of a double-precision floating-point number.
  remarks: ''
  example:
  - "The following example demonstrates how to use the Sign method to determine the sign of a <xref:System.Double> value and display it to the console.  \n  \n [!CODE [Math.Sign#1](../CodeSnippet/VS_Snippets_CLR/math.sign#1)]"
  syntax:
    content: public static int Sign (double value);
    parameters:
    - id: value
      type: System.Double
      description: A signed number.
    return:
      type: System.Int32
      description: "A number that indicates the sign of , as shown in the following table.  \n  \n|Return value|Meaning|  \n|------------------|-------------|  \n|-1|is less than zero.|  \n|0|is equal to zero.|  \n|1|is greater than zero.|"
  overload: System.Math.Sign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Sign(System.Int16)
  id: Sign(System.Int16)
  parent: System.Math
  langs:
  - csharp
  name: Sign(Int16)
  nameWithType: Math.Sign(Int16)
  fullName: System.Math.Sign(Int16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an integer that indicates the sign of a 16-bit signed integer.
  remarks: ''
  example:
  - "The following example demonstrates how to use the Sign method to determine the sign of an <xref:System.Int16> value and display it to the console.  \n  \n [!CODE [Math.Sign#1](../CodeSnippet/VS_Snippets_CLR/math.sign#1)]"
  syntax:
    content: public static int Sign (short value);
    parameters:
    - id: value
      type: System.Int16
      description: A signed number.
    return:
      type: System.Int32
      description: "A number that indicates the sign of , as shown in the following table.  \n  \n|Return value|Meaning|  \n|------------------|-------------|  \n|-1|is less than zero.|  \n|0|is equal to zero.|  \n|1|is greater than zero.|"
  overload: System.Math.Sign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Sign(System.Int32)
  id: Sign(System.Int32)
  parent: System.Math
  langs:
  - csharp
  name: Sign(Int32)
  nameWithType: Math.Sign(Int32)
  fullName: System.Math.Sign(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an integer that indicates the sign of a 32-bit signed integer.
  remarks: ''
  example:
  - "The following example demonstrates how to use the Sign method to determine the sign of an <xref:System.Int32> value and display it to the console.  \n  \n [!CODE [Math.Sign#1](../CodeSnippet/VS_Snippets_CLR/math.sign#1)]"
  syntax:
    content: public static int Sign (int value);
    parameters:
    - id: value
      type: System.Int32
      description: A signed number.
    return:
      type: System.Int32
      description: "A number that indicates the sign of , as shown in the following table.  \n  \n|Return value|Meaning|  \n|------------------|-------------|  \n|-1|is less than zero.|  \n|0|is equal to zero.|  \n|1|is greater than zero.|"
  overload: System.Math.Sign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Sign(System.Int64)
  id: Sign(System.Int64)
  parent: System.Math
  langs:
  - csharp
  name: Sign(Int64)
  nameWithType: Math.Sign(Int64)
  fullName: System.Math.Sign(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an integer that indicates the sign of a 64-bit signed integer.
  remarks: ''
  example:
  - "The following example demonstrates how to use the Sign method to determine the sign of an <xref:System.Int64> value and display it to the console.  \n  \n [!CODE [Math.Sign#1](../CodeSnippet/VS_Snippets_CLR/math.sign#1)]"
  syntax:
    content: public static int Sign (long value);
    parameters:
    - id: value
      type: System.Int64
      description: A signed number.
    return:
      type: System.Int32
      description: "A number that indicates the sign of , as shown in the following table.  \n  \n|Return value|Meaning|  \n|------------------|-------------|  \n|-1|is less than zero.|  \n|0|is equal to zero.|  \n|1|is greater than zero.|"
  overload: System.Math.Sign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Sign(System.SByte)
  id: Sign(System.SByte)
  parent: System.Math
  langs:
  - csharp
  name: Sign(SByte)
  nameWithType: Math.Sign(SByte)
  fullName: System.Math.Sign(SByte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an integer that indicates the sign of an 8-bit signed integer.
  remarks: ''
  example:
  - "The following example demonstrates how to use the Sign method to determine the sign of an <xref:System.SByte> value and display it to the console.  \n  \n [!CODE [Math.Sign#1](../CodeSnippet/VS_Snippets_CLR/math.sign#1)]"
  syntax:
    content: public static int Sign (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: A signed number.
    return:
      type: System.Int32
      description: "A number that indicates the sign of , as shown in the following table.  \n  \n|Return value|Meaning|  \n|------------------|-------------|  \n|-1|is less than zero.|  \n|0|is equal to zero.|  \n|1|is greater than zero.|"
  overload: System.Math.Sign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Sign(System.Single)
  id: Sign(System.Single)
  parent: System.Math
  langs:
  - csharp
  name: Sign(Single)
  nameWithType: Math.Sign(Single)
  fullName: System.Math.Sign(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an integer that indicates the sign of a single-precision floating-point number.
  remarks: ''
  example:
  - "The following example demonstrates how to use the Sign method to determine the sign of a <xref:System.Single> value and display it to the console.  \n  \n [!CODE [Math.Sign#1](../CodeSnippet/VS_Snippets_CLR/math.sign#1)]"
  syntax:
    content: public static int Sign (float value);
    parameters:
    - id: value
      type: System.Single
      description: A signed number.
    return:
      type: System.Int32
      description: "A number that indicates the sign of , as shown in the following table.  \n  \n|Return value|Meaning|  \n|------------------|-------------|  \n|-1|is less than zero.|  \n|0|is equal to zero.|  \n|1|is greater than zero.|"
  overload: System.Math.Sign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Sin(System.Double)
  id: Sin(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Sin(Double)
  nameWithType: Math.Sin(Double)
  fullName: System.Math.Sin(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the sine of the specified angle.
  remarks: "The angle, , must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.  \n  \n Acceptable values of  range from approximately -9223372036854775295 to approximately 9223372036854775295. For values outside of this range, the Sin method returns  unchanged rather than throwing an exception."
  example:
  - "The following example uses Sin to evaluate certain trigonometric identities for selected angles.  \n  \n [!CODE [System.Math.SinCos#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.SinCos#1)]"
  syntax:
    content: public static double Sin (double a);
    parameters:
    - id: a
      type: System.Double
      description: An angle, measured in radians.
    return:
      type: System.Double
      description: The sine of . If  is equal to <see cref="T:System.Double">, <see cref="T:System.Double">, or <see cref="T:System.Double">, this method returns <see cref="T:System.Double">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Sinh(System.Double)
  id: Sinh(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Sinh(Double)
  nameWithType: Math.Sinh(Double)
  fullName: System.Math.Sinh(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hyperbolic sine of the specified angle.
  remarks: The angle, , must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.
  example:
  - "The following example uses Sinh to evaluate certain hyperbolic identities for selected values.  \n  \n [!CODE [System.Math.SinhCosh#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.SinhCosh#1)]"
  syntax:
    content: public static double Sinh (double value);
    parameters:
    - id: value
      type: System.Double
      description: An angle, measured in radians.
    return:
      type: System.Double
      description: The hyperbolic sine of . If  is equal to <see cref="T:System.Double">, <see cref="T:System.Double">, or <see cref="T:System.Double">, this method returns a <see cref="T:System.Double"> equal to .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Sqrt(System.Double)
  id: Sqrt(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Sqrt(Double)
  nameWithType: Math.Sqrt(Double)
  fullName: System.Math.Sqrt(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the square root of a specified number.
  remarks: ''
  example:
  - "The square root of the area of a square represents the length of any side of the square. The following example displays the area of some cities in the United States and gives an impression of each city's size if it were represented by a square.  \n  \n [!CODE [System.Math.Sqrt#1](../CodeSnippet/VS_Snippets_CLR_System/system.math.sqrt#1)]"
  syntax:
    content: public static double Sqrt (double d);
    parameters:
    - id: d
      type: System.Double
      description: The number whose square root is to be found.
    return:
      type: System.Double
      description: "One of the values in the following table.  \n  \n|parameter|Return value|  \n|---------------|------------------|  \n|Zero or positive|The positive square root of .|  \n|Negative|<see cref=\"T:System.Double\">|  \n|Equals <see cref=\"T:System.Double\">|<see cref=\"T:System.Double\">|  \n|Equals <see cref=\"T:System.Double\">|<see cref=\"T:System.Double\">|"
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Tan(System.Double)
  id: Tan(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Tan(Double)
  nameWithType: Math.Tan(Double)
  fullName: System.Math.Tan(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the tangent of the specified angle.
  remarks: The angle, , must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.
  example:
  - "The following example demonstrates how to calculate the tangent of an angle and display it to the console.  \n  \n [!CODE [math.atanx#1](../CodeSnippet/VS_Snippets_CLR/math.atanx#1)]"
  syntax:
    content: public static double Tan (double a);
    parameters:
    - id: a
      type: System.Double
      description: An angle, measured in radians.
    return:
      type: System.Double
      description: The tangent of . If  is equal to <see cref="T:System.Double">, <see cref="T:System.Double">, or <see cref="T:System.Double">, this method returns <see cref="T:System.Double">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Tanh(System.Double)
  id: Tanh(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Tanh(Double)
  nameWithType: Math.Tanh(Double)
  fullName: System.Math.Tanh(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hyperbolic tangent of the specified angle.
  remarks: The angle, , must be in radians. Multiply by <xref:System.Math.PI?displayProperty=fullName>/180 to convert degrees to radians.
  example:
  - "The following example uses Tanh to evaluate certain hyperbolic tangent identities for selected values.  \n  \n [!CODE [System.Math.Tanh#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Tanh#1)]"
  syntax:
    content: public static double Tanh (double value);
    parameters:
    - id: value
      type: System.Double
      description: An angle, measured in radians.
    return:
      type: System.Double
      description: The hyperbolic tangent of . If  is equal to <see cref="T:System.Double">, this method returns -1. If value is equal to <see cref="T:System.Double">, this method returns 1. If  is equal to <see cref="T:System.Double">, this method returns <see cref="T:System.Double">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Truncate(System.Decimal)
  id: Truncate(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  name: Truncate(Decimal)
  nameWithType: Math.Truncate(Decimal)
  fullName: System.Math.Truncate(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Calculates the integral part of a specified decimal number.
  remarks: Truncate rounds  to the nearest integer towards zero.
  example:
  - "The following example calls the Truncate method to truncate both a positive and a negative <xref:System.Decimal> value.  \n  \n [!CODE [System.Math.Truncate#2](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Truncate#2)]"
  syntax:
    content: public static decimal Truncate (decimal d);
    parameters:
    - id: d
      type: System.Decimal
      description: A number to truncate.
    return:
      type: System.Decimal
      description: The integral part of ; that is, the number that remains after any fractional digits have been discarded.
  overload: System.Math.Truncate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Math.Truncate(System.Double)
  id: Truncate(System.Double)
  parent: System.Math
  langs:
  - csharp
  name: Truncate(Double)
  nameWithType: Math.Truncate(Double)
  fullName: System.Math.Truncate(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Calculates the integral part of a specified double-precision floating-point number.
  remarks: Truncate rounds  to the nearest integer towards zero.
  example:
  - "The following example calls the Truncate method to truncate both a positive and a negative <xref:System.Double> value.  \n  \n [!CODE [System.Math.Truncate#1](../CodeSnippet/VS_Snippets_CLR_System/system.Math.Truncate#1)]"
  syntax:
    content: public static double Truncate (double d);
    parameters:
    - id: d
      type: System.Double
      description: A number to truncate.
    return:
      type: System.Double
      description: "The integral part of ; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.  \n  \n||Return value|  \n|-|------------------|  \n|<see cref=\"T:System.Double\">|<see cref=\"T:System.Double\">|  \n|<see cref=\"T:System.Double\">|<see cref=\"T:System.Double\">|  \n|<see cref=\"T:System.Double\">|<see cref=\"T:System.Double\">|"
  overload: System.Math.Truncate*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Math.Abs(System.Decimal)
  parent: System.Math
  isExternal: false
  name: Abs(Decimal)
  nameWithType: Math.Abs(Decimal)
  fullName: System.Math.Abs(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Math.Abs(System.Double)
  parent: System.Math
  isExternal: false
  name: Abs(Double)
  nameWithType: Math.Abs(Double)
  fullName: System.Math.Abs(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Abs(System.Int16)
  parent: System.Math
  isExternal: false
  name: Abs(Int16)
  nameWithType: Math.Abs(Int16)
  fullName: System.Math.Abs(Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Math.Abs(System.Int32)
  parent: System.Math
  isExternal: false
  name: Abs(Int32)
  nameWithType: Math.Abs(Int32)
  fullName: System.Math.Abs(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Math.Abs(System.Int64)
  parent: System.Math
  isExternal: false
  name: Abs(Int64)
  nameWithType: Math.Abs(Int64)
  fullName: System.Math.Abs(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Math.Abs(System.SByte)
  parent: System.Math
  isExternal: false
  name: Abs(SByte)
  nameWithType: Math.Abs(SByte)
  fullName: System.Math.Abs(SByte)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Math.Abs(System.Single)
  parent: System.Math
  isExternal: false
  name: Abs(Single)
  nameWithType: Math.Abs(Single)
  fullName: System.Math.Abs(Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Math.Acos(System.Double)
  parent: System.Math
  isExternal: false
  name: Acos(Double)
  nameWithType: Math.Acos(Double)
  fullName: System.Math.Acos(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Asin(System.Double)
  parent: System.Math
  isExternal: false
  name: Asin(Double)
  nameWithType: Math.Asin(Double)
  fullName: System.Math.Asin(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Atan(System.Double)
  parent: System.Math
  isExternal: false
  name: Atan(Double)
  nameWithType: Math.Atan(Double)
  fullName: System.Math.Atan(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Atan2(System.Double,System.Double)
  parent: System.Math
  isExternal: false
  name: Atan2(Double,Double)
  nameWithType: Math.Atan2(Double,Double)
  fullName: System.Math.Atan2(Double,Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.BigMul(System.Int32,System.Int32)
  parent: System.Math
  isExternal: false
  name: BigMul(Int32,Int32)
  nameWithType: Math.BigMul(Int32,Int32)
  fullName: System.Math.BigMul(Int32,Int32)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Math.Ceiling(System.Decimal)
  parent: System.Math
  isExternal: false
  name: Ceiling(Decimal)
  nameWithType: Math.Ceiling(Decimal)
  fullName: System.Math.Ceiling(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Math.Ceiling(System.Double)
  parent: System.Math
  isExternal: false
  name: Ceiling(Double)
  nameWithType: Math.Ceiling(Double)
  fullName: System.Math.Ceiling(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Cos(System.Double)
  parent: System.Math
  isExternal: false
  name: Cos(Double)
  nameWithType: Math.Cos(Double)
  fullName: System.Math.Cos(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Cosh(System.Double)
  parent: System.Math
  isExternal: false
  name: Cosh(Double)
  nameWithType: Math.Cosh(Double)
  fullName: System.Math.Cosh(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.DivRem(System.Int32,System.Int32,System.Int32@)
  parent: System.Math
  isExternal: false
  name: DivRem(Int32,Int32,Int32)
  nameWithType: Math.DivRem(Int32,Int32,Int32)
  fullName: System.Math.DivRem(Int32,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Math.DivRem(System.Int64,System.Int64,System.Int64@)
  parent: System.Math
  isExternal: false
  name: DivRem(Int64,Int64,Int64)
  nameWithType: Math.DivRem(Int64,Int64,Int64)
  fullName: System.Math.DivRem(Int64,Int64,Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Math.E
  parent: System.Math
  isExternal: false
  name: E
  nameWithType: Math.E
  fullName: System.Math.E
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Exp(System.Double)
  parent: System.Math
  isExternal: false
  name: Exp(Double)
  nameWithType: Math.Exp(Double)
  fullName: System.Math.Exp(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Floor(System.Decimal)
  parent: System.Math
  isExternal: false
  name: Floor(Decimal)
  nameWithType: Math.Floor(Decimal)
  fullName: System.Math.Floor(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Math.Floor(System.Double)
  parent: System.Math
  isExternal: false
  name: Floor(Double)
  nameWithType: Math.Floor(Double)
  fullName: System.Math.Floor(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.IEEERemainder(System.Double,System.Double)
  parent: System.Math
  isExternal: false
  name: IEEERemainder(Double,Double)
  nameWithType: Math.IEEERemainder(Double,Double)
  fullName: System.Math.IEEERemainder(Double,Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Log(System.Double)
  parent: System.Math
  isExternal: false
  name: Log(Double)
  nameWithType: Math.Log(Double)
  fullName: System.Math.Log(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Log(System.Double,System.Double)
  parent: System.Math
  isExternal: false
  name: Log(Double,Double)
  nameWithType: Math.Log(Double,Double)
  fullName: System.Math.Log(Double,Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Log10(System.Double)
  parent: System.Math
  isExternal: false
  name: Log10(Double)
  nameWithType: Math.Log10(Double)
  fullName: System.Math.Log10(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Max(System.Byte,System.Byte)
  parent: System.Math
  isExternal: false
  name: Max(Byte,Byte)
  nameWithType: Math.Max(Byte,Byte)
  fullName: System.Math.Max(Byte,Byte)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Math.Max(System.Decimal,System.Decimal)
  parent: System.Math
  isExternal: false
  name: Max(Decimal,Decimal)
  nameWithType: Math.Max(Decimal,Decimal)
  fullName: System.Math.Max(Decimal,Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Math.Max(System.Double,System.Double)
  parent: System.Math
  isExternal: false
  name: Max(Double,Double)
  nameWithType: Math.Max(Double,Double)
  fullName: System.Math.Max(Double,Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Max(System.Int16,System.Int16)
  parent: System.Math
  isExternal: false
  name: Max(Int16,Int16)
  nameWithType: Math.Max(Int16,Int16)
  fullName: System.Math.Max(Int16,Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Math.Max(System.Int32,System.Int32)
  parent: System.Math
  isExternal: false
  name: Max(Int32,Int32)
  nameWithType: Math.Max(Int32,Int32)
  fullName: System.Math.Max(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Math.Max(System.Int64,System.Int64)
  parent: System.Math
  isExternal: false
  name: Max(Int64,Int64)
  nameWithType: Math.Max(Int64,Int64)
  fullName: System.Math.Max(Int64,Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Math.Max(System.SByte,System.SByte)
  parent: System.Math
  isExternal: false
  name: Max(SByte,SByte)
  nameWithType: Math.Max(SByte,SByte)
  fullName: System.Math.Max(SByte,SByte)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Math.Max(System.Single,System.Single)
  parent: System.Math
  isExternal: false
  name: Max(Single,Single)
  nameWithType: Math.Max(Single,Single)
  fullName: System.Math.Max(Single,Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Math.Max(System.UInt16,System.UInt16)
  parent: System.Math
  isExternal: false
  name: Max(UInt16,UInt16)
  nameWithType: Math.Max(UInt16,UInt16)
  fullName: System.Math.Max(UInt16,UInt16)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Math.Max(System.UInt32,System.UInt32)
  parent: System.Math
  isExternal: false
  name: Max(UInt32,UInt32)
  nameWithType: Math.Max(UInt32,UInt32)
  fullName: System.Math.Max(UInt32,UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Math.Max(System.UInt64,System.UInt64)
  parent: System.Math
  isExternal: false
  name: Max(UInt64,UInt64)
  nameWithType: Math.Max(UInt64,UInt64)
  fullName: System.Math.Max(UInt64,UInt64)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Math.Min(System.Byte,System.Byte)
  parent: System.Math
  isExternal: false
  name: Min(Byte,Byte)
  nameWithType: Math.Min(Byte,Byte)
  fullName: System.Math.Min(Byte,Byte)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Math.Min(System.Decimal,System.Decimal)
  parent: System.Math
  isExternal: false
  name: Min(Decimal,Decimal)
  nameWithType: Math.Min(Decimal,Decimal)
  fullName: System.Math.Min(Decimal,Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Math.Min(System.Double,System.Double)
  parent: System.Math
  isExternal: false
  name: Min(Double,Double)
  nameWithType: Math.Min(Double,Double)
  fullName: System.Math.Min(Double,Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Min(System.Int16,System.Int16)
  parent: System.Math
  isExternal: false
  name: Min(Int16,Int16)
  nameWithType: Math.Min(Int16,Int16)
  fullName: System.Math.Min(Int16,Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Math.Min(System.Int32,System.Int32)
  parent: System.Math
  isExternal: false
  name: Min(Int32,Int32)
  nameWithType: Math.Min(Int32,Int32)
  fullName: System.Math.Min(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Math.Min(System.Int64,System.Int64)
  parent: System.Math
  isExternal: false
  name: Min(Int64,Int64)
  nameWithType: Math.Min(Int64,Int64)
  fullName: System.Math.Min(Int64,Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Math.Min(System.SByte,System.SByte)
  parent: System.Math
  isExternal: false
  name: Min(SByte,SByte)
  nameWithType: Math.Min(SByte,SByte)
  fullName: System.Math.Min(SByte,SByte)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Math.Min(System.Single,System.Single)
  parent: System.Math
  isExternal: false
  name: Min(Single,Single)
  nameWithType: Math.Min(Single,Single)
  fullName: System.Math.Min(Single,Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Math.Min(System.UInt16,System.UInt16)
  parent: System.Math
  isExternal: false
  name: Min(UInt16,UInt16)
  nameWithType: Math.Min(UInt16,UInt16)
  fullName: System.Math.Min(UInt16,UInt16)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Math.Min(System.UInt32,System.UInt32)
  parent: System.Math
  isExternal: false
  name: Min(UInt32,UInt32)
  nameWithType: Math.Min(UInt32,UInt32)
  fullName: System.Math.Min(UInt32,UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Math.Min(System.UInt64,System.UInt64)
  parent: System.Math
  isExternal: false
  name: Min(UInt64,UInt64)
  nameWithType: Math.Min(UInt64,UInt64)
  fullName: System.Math.Min(UInt64,UInt64)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Math.PI
  parent: System.Math
  isExternal: false
  name: PI
  nameWithType: Math.PI
  fullName: System.Math.PI
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Pow(System.Double,System.Double)
  parent: System.Math
  isExternal: false
  name: Pow(Double,Double)
  nameWithType: Math.Pow(Double,Double)
  fullName: System.Math.Pow(Double,Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Round(System.Decimal)
  parent: System.Math
  isExternal: false
  name: Round(Decimal)
  nameWithType: Math.Round(Decimal)
  fullName: System.Math.Round(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Math.Round(System.Double)
  parent: System.Math
  isExternal: false
  name: Round(Double)
  nameWithType: Math.Round(Double)
  fullName: System.Math.Round(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Round(System.Decimal,System.Int32)
  parent: System.Math
  isExternal: false
  name: Round(Decimal,Int32)
  nameWithType: Math.Round(Decimal,Int32)
  fullName: System.Math.Round(Decimal,Int32)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Math.Round(System.Decimal,System.MidpointRounding)
  parent: System.Math
  isExternal: false
  name: Round(Decimal,MidpointRounding)
  nameWithType: Math.Round(Decimal,MidpointRounding)
  fullName: System.Math.Round(Decimal,MidpointRounding)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.MidpointRounding
  parent: System
  isExternal: false
  name: MidpointRounding
  nameWithType: MidpointRounding
  fullName: System.MidpointRounding
- uid: System.Math.Round(System.Double,System.Int32)
  parent: System.Math
  isExternal: false
  name: Round(Double,Int32)
  nameWithType: Math.Round(Double,Int32)
  fullName: System.Math.Round(Double,Int32)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Math.Round(System.Double,System.MidpointRounding)
  parent: System.Math
  isExternal: false
  name: Round(Double,MidpointRounding)
  nameWithType: Math.Round(Double,MidpointRounding)
  fullName: System.Math.Round(Double,MidpointRounding)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.MidpointRounding
  parent: System
  isExternal: false
  name: MidpointRounding
  nameWithType: MidpointRounding
  fullName: System.MidpointRounding
- uid: System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)
  parent: System.Math
  isExternal: false
  name: Round(Decimal,Int32,MidpointRounding)
  nameWithType: Math.Round(Decimal,Int32,MidpointRounding)
  fullName: System.Math.Round(Decimal,Int32,MidpointRounding)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.MidpointRounding
  parent: System
  isExternal: false
  name: MidpointRounding
  nameWithType: MidpointRounding
  fullName: System.MidpointRounding
- uid: System.Math.Round(System.Double,System.Int32,System.MidpointRounding)
  parent: System.Math
  isExternal: false
  name: Round(Double,Int32,MidpointRounding)
  nameWithType: Math.Round(Double,Int32,MidpointRounding)
  fullName: System.Math.Round(Double,Int32,MidpointRounding)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.MidpointRounding
  parent: System
  isExternal: false
  name: MidpointRounding
  nameWithType: MidpointRounding
  fullName: System.MidpointRounding
- uid: System.Math.Sign(System.Decimal)
  parent: System.Math
  isExternal: false
  name: Sign(Decimal)
  nameWithType: Math.Sign(Decimal)
  fullName: System.Math.Sign(Decimal)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Math.Sign(System.Double)
  parent: System.Math
  isExternal: false
  name: Sign(Double)
  nameWithType: Math.Sign(Double)
  fullName: System.Math.Sign(Double)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Sign(System.Int16)
  parent: System.Math
  isExternal: false
  name: Sign(Int16)
  nameWithType: Math.Sign(Int16)
  fullName: System.Math.Sign(Int16)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Math.Sign(System.Int32)
  parent: System.Math
  isExternal: false
  name: Sign(Int32)
  nameWithType: Math.Sign(Int32)
  fullName: System.Math.Sign(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Math.Sign(System.Int64)
  parent: System.Math
  isExternal: false
  name: Sign(Int64)
  nameWithType: Math.Sign(Int64)
  fullName: System.Math.Sign(Int64)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Math.Sign(System.SByte)
  parent: System.Math
  isExternal: false
  name: Sign(SByte)
  nameWithType: Math.Sign(SByte)
  fullName: System.Math.Sign(SByte)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Math.Sign(System.Single)
  parent: System.Math
  isExternal: false
  name: Sign(Single)
  nameWithType: Math.Sign(Single)
  fullName: System.Math.Sign(Single)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Math.Sin(System.Double)
  parent: System.Math
  isExternal: false
  name: Sin(Double)
  nameWithType: Math.Sin(Double)
  fullName: System.Math.Sin(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Sinh(System.Double)
  parent: System.Math
  isExternal: false
  name: Sinh(Double)
  nameWithType: Math.Sinh(Double)
  fullName: System.Math.Sinh(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Sqrt(System.Double)
  parent: System.Math
  isExternal: false
  name: Sqrt(Double)
  nameWithType: Math.Sqrt(Double)
  fullName: System.Math.Sqrt(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Tan(System.Double)
  parent: System.Math
  isExternal: false
  name: Tan(Double)
  nameWithType: Math.Tan(Double)
  fullName: System.Math.Tan(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Tanh(System.Double)
  parent: System.Math
  isExternal: false
  name: Tanh(Double)
  nameWithType: Math.Tanh(Double)
  fullName: System.Math.Tanh(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Truncate(System.Decimal)
  parent: System.Math
  isExternal: false
  name: Truncate(Decimal)
  nameWithType: Math.Truncate(Decimal)
  fullName: System.Math.Truncate(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Math.Truncate(System.Double)
  parent: System.Math
  isExternal: false
  name: Truncate(Double)
  nameWithType: Math.Truncate(Double)
  fullName: System.Math.Truncate(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Math.Abs*
  parent: System.Math
  isExternal: false
  nameWithType: Math.
- uid: System.Math.Ceiling*
  parent: System.Math
  isExternal: false
  nameWithType: Math.
- uid: System.Math.DivRem*
  parent: System.Math
  isExternal: false
  nameWithType: Math.
- uid: System.Math.Floor*
  parent: System.Math
  isExternal: false
  nameWithType: Math.
- uid: System.Math.Log*
  parent: System.Math
  isExternal: false
  nameWithType: Math.
- uid: System.Math.Max*
  parent: System.Math
  isExternal: false
  nameWithType: Math.
- uid: System.Math.Min*
  parent: System.Math
  isExternal: false
  nameWithType: Math.
- uid: System.Math.Round*
  parent: System.Math
  isExternal: false
  nameWithType: Math.
- uid: System.Math.Sign*
  parent: System.Math
  isExternal: false
  nameWithType: Math.
- uid: System.Math.Truncate*
  parent: System.Math
  isExternal: false
  nameWithType: Math.
