### YamlMime:ManagedReference
items:
- uid: System.IComparable
  id: IComparable
  children:
  - System.IComparable.CompareTo(System.Object)
  langs:
  - csharp
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
  type: Interface
  summary: Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.
  remarks: "This interface is implemented by types whose values can be ordered or sorted. It requires that implementing types define a single method, <xref:System.IComparable.CompareTo%28System.Object%29>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type. The instance's IComparable implementation is called automatically by methods such as <xref:System.Array.Sort%2A?displayProperty=fullName> and <xref:System.Collections.ArrayList.Sort%2A?displayProperty=fullName>.  \n  \n The implementation of the <xref:System.IComparable.CompareTo%28System.Object%29> method must return an <xref:System.Int32> that has one of three values, as shown in the following table.  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|Less than zero|The current instance precedes the object specified by the <xref:System.IComparable.CompareTo%2A> method in the sort order.|  \n|Zero|This current instance occurs in the same position in the sort order as the object specified by the <xref:System.IComparable.CompareTo%2A> method.|  \n|Greater than zero|This current instance follows the object specified by the <xref:System.IComparable.CompareTo%2A> method in the sort order.|  \n  \n All numeric types (such as <xref:System.Int32> and <xref:System.Double>) implement IComparable, as do <xref:System.String>, <xref:System.Char>, and <xref:System.DateTime>. Custom types should also provide their own implementation of IComparable to enable object instances to be ordered or sorted."
  example:
  - "The following example illustrates the implementation of IComparable and the requisite <xref:System.IComparable.CompareTo%2A> method.  \n  \n [!CODE [IComparable Example#1](../CodeSnippet/VS_Snippets_CLR/IComparable Example#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IComparable
  implements: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IComparable.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.IComparable
  langs:
  - csharp
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
  remarks: "The CompareTo method is implemented by types whose values can be ordered or sorted. It is called automatically by methods of non-generic collection objects, such as <xref:System.Array.Sort%2A?displayProperty=fullName>, to order each member of the array. If a custom class or structure does not implement <xref:System.IComparable>, its members cannot be ordered and the sort operation can throw an <xref:System.InvalidOperationException>.  \n  \n This method is only a definition and must be implemented by a specific class or value type to have effect. The meaning of the comparisons specified in the Return Value section (\"precedes\", \"occurs in the same position as\", and \"follows\") depends on the particular implementation.  \n  \n By definition, any object compares greater than (or follows) `null`, and two null references compare equal to each other.  \n  \n The parameter, , must be the same type as the class or value type that implements this interface; otherwise, an <xref:System.ArgumentException> is thrown."
  example:
  - "The following example illustrates the use of CompareTo to compare a `Temperature` object implementing <xref:System.IComparable> with another object. The `Temperature`object implements CompareTo by simply wrapping a call to the <xref:System.Int32.CompareTo%2A?displayProperty=fullName> method.  \n  \n [!CODE [IComparable Example#1](../CodeSnippet/VS_Snippets_CLR/IComparable Example#1)]"
  syntax:
    content: public int CompareTo (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance.
    return:
      type: System.Int32
      description: "A value that indicates the relative order of the objects being compared. The return value has these meanings:  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|Less than zero|This instance precedes  in the sort order.|  \n|Zero|This instance occurs in the same position in the sort order as .|  \n|Greater than zero|This instance follows  in the sort order.|"
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: false
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
