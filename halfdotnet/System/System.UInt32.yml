### YamlMime:ManagedReference
items:
- uid: System.UInt32
  id: UInt32
  children:
  - System.UInt32.CompareTo(System.Object)
  - System.UInt32.CompareTo(System.UInt32)
  - System.UInt32.Equals(System.Object)
  - System.UInt32.Equals(System.UInt32)
  - System.UInt32.GetHashCode
  - System.UInt32.GetTypeCode
  - System.UInt32.MaxValue
  - System.UInt32.MinValue
  - System.UInt32.Parse(System.String)
  - System.UInt32.Parse(System.String,System.Globalization.NumberStyles)
  - System.UInt32.Parse(System.String,System.IFormatProvider)
  - System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.UInt32.ToString
  - System.UInt32.ToString(System.IFormatProvider)
  - System.UInt32.ToString(System.String)
  - System.UInt32.ToString(System.String,System.IFormatProvider)
  - System.UInt32.TryParse(System.String,System.UInt32@)
  - System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)
  langs:
  - csharp
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
  type: Struct
  summary: Represents a 32-bit unsigned integer.
  remarks: "The `UInt32` value type represents unsigned integers with values ranging from 0 to 4,294,967,295.  \n  \n> [!IMPORTANT]\n>  The UInt32 type is not CLS-compliant. The CLS-compliant alternative type is <xref:System.Int64>. <xref:System.Int32> can be used instead to replace a UInt32 value that ranges from zero to <xref:System.Int32.MaxValue>. For more information about CLS compliance, see [Language Independence and Language-Independent Components](../Topic/Language%20Independence%20and%20Language-Independent%20Components.md).  \n  \n `UInt32` provides methods to compare instances of this type, convert the value of an instance to its <xref:System.String> representation, and convert the <xref:System.String> representation of a number to an instance of this type.  \n  \n For information about how format specification codes control the <xref:System.String> representation of value types, see [Formatting Types](../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public struct UInt32 : IComparable, IComparable<uint>, IConvertible, IEquatable<uint>, IFormattable
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IComparable
  - System.IComparable<System.UInt32>
  - System.IConvertible
  - System.IEquatable<System.UInt32>
  - System.IFormattable
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.UInt32
  langs:
  - csharp
  name: CompareTo(Object)
  nameWithType: UInt32.CompareTo(Object)
  fullName: System.UInt32.CompareTo(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares this instance to a specified object and returns an indication of their relative values.
  remarks: "Any instance of <xref:System.UInt32>, regardless of its value, is considered greater than `null`.  \n  \n The  parameter must be `null` or an instance of <xref:System.UInt32>; otherwise, an exception is thrown."
  example:
  - "The following code example demonstrates the CompareTo method.  \n  \n [!CODE [UInt32 Example#3](../CodeSnippet/VS_Snippets_CLR/UInt32 Example#3)]"
  syntax:
    content: public int CompareTo (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object to compare, or `null`.
    return:
      type: System.Int32
      description: "A signed number indicating the relative values of this instance and .  \n  \n|Return Value|Description|  \n|------------------|-----------------|  \n|Less than zero|This instance is less than .|  \n|Zero|This instance is equal to .|  \n|Greater than zero|This instance is greater than .<br /><br /> -or-<br /><br /> is `null`.|"
  overload: System.UInt32.CompareTo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.CompareTo(System.UInt32)
  id: CompareTo(System.UInt32)
  parent: System.UInt32
  langs:
  - csharp
  name: CompareTo(UInt32)
  nameWithType: UInt32.CompareTo(UInt32)
  fullName: System.UInt32.CompareTo(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares this instance to a specified 32-bit unsigned integer and returns an indication of their relative values.
  remarks: "This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface and performs slightly better than the <xref:System.UInt32.CompareTo%2A?displayProperty=fullName> method because it does not have to convert the  parameter to an object.  \n  \n Depending on your programming language, it might be possible to code a <xref:System.UInt32.CompareTo%2A> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  \n  \n For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32> object, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=fullName> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.  \n  \n Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types."
  example:
  - "The following code example demonstrates generic and nongeneric versions of the <xref:System.UInt32.CompareTo%2A> method for several value and reference types.  \n  \n [!CODE [T.CompareTo#1](../CodeSnippet/VS_Snippets_CLR/T.CompareTo#1)]"
  syntax:
    content: public int CompareTo (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: An unsigned integer to compare.
    return:
      type: System.Int32
      description: "A signed number indicating the relative values of this instance and .  \n  \n|Return value|Description|  \n|------------------|-----------------|  \n|Less than zero|This instance is less than .|  \n|Zero|This instance is equal to .|  \n|Greater than zero|This instance is greater than .|"
  overload: System.UInt32.CompareTo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.UInt32
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: UInt32.Equals(Object)
  fullName: System.UInt32.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether this instance is equal to a specified object.
  remarks: ''
  example:
  - "The following code example demonstrates the Equals method.  \n  \n [!CODE [UInt32_Equals#1](../CodeSnippet/VS_Snippets_CLR/UInt32_Equals#1)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance.
    return:
      type: System.Boolean
      description: '`true` if  is an instance of <see cref="T:System.UInt32"> and equals the value of this instance; otherwise, `false`.'
  overload: System.UInt32.Equals*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.Equals(System.UInt32)
  id: Equals(System.UInt32)
  parent: System.UInt32
  langs:
  - csharp
  name: Equals(UInt32)
  nameWithType: UInt32.Equals(UInt32)
  fullName: System.UInt32.Equals(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether this instance is equal to a specified <see cref="T:System.UInt32">.
  remarks: This method implements the <xref:System.IEquatable%601?displayProperty=fullName> interface, and performs slightly better than the <xref:System.UInt32.Equals%28System.Object%29> method because it does not have to convert the  parameter to an object.
  syntax:
    content: public bool Equals (uint obj);
    parameters:
    - id: obj
      type: System.UInt32
      description: A value to compare to this instance.
    return:
      type: System.Boolean
      description: '`true` if  has the same value as this instance; otherwise, `false`.'
  overload: System.UInt32.Equals*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.GetHashCode
  id: GetHashCode
  parent: System.UInt32
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: UInt32.GetHashCode()
  fullName: System.UInt32.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for this instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.GetTypeCode
  id: GetTypeCode
  parent: System.UInt32
  langs:
  - csharp
  name: GetTypeCode()
  nameWithType: UInt32.GetTypeCode()
  fullName: System.UInt32.GetTypeCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the <see cref="T:System.TypeCode"> for value type <xref:System.UInt32>.
  remarks: To be added.
  syntax:
    content: public TypeCode GetTypeCode ();
    parameters: []
    return:
      type: System.TypeCode
      description: The enumerated constant, <xref:System.TypeCode?displayProperty=fullName>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.MaxValue
  id: MaxValue
  parent: System.UInt32
  langs:
  - csharp
  name: MaxValue
  nameWithType: UInt32.MaxValue
  fullName: System.UInt32.MaxValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the largest possible value of <see cref="T:System.UInt32">. This field is constant.
  remarks: The value of this constant is 4,294,967,295; that is, hexadecimal 0xFFFFFFFF.
  example:
  - "The following example uses the <xref:System.UInt32> and MaxValue fields to verify that an <xref:System.Int64> value is within the range of the <xref:System.UInt32> type before it performs a type conversion. This verification prevents an <xref:System.OverflowException> at run time.  \n  \n [!CODE [System.UInt32.MaxValue#1](../CodeSnippet/VS_Snippets_CLR_System/system.UInt32.MaxValue#1)]"
  syntax:
    content: public const uint MaxValue = 4294967295;
    return:
      type: System.UInt32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.MinValue
  id: MinValue
  parent: System.UInt32
  langs:
  - csharp
  name: MinValue
  nameWithType: UInt32.MinValue
  fullName: System.UInt32.MinValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the smallest possible value of <see cref="T:System.UInt32">. This field is constant.
  remarks: The value of this constant is 0.
  example:
  - "The following example demonstrates how to use the MinValue field to display the smallest possible value of a <xref:System.UInt32> variable.  \n  \n [!CODE [UInt32 Example#2](../CodeSnippet/VS_Snippets_CLR/UInt32 Example#2)]"
  syntax:
    content: public const uint MinValue = 0;
    return:
      type: System.UInt32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.Parse(System.String)
  id: Parse(System.String)
  parent: System.UInt32
  langs:
  - csharp
  name: Parse(String)
  nameWithType: UInt32.Parse(String)
  fullName: System.UInt32.Parse(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number to its 32-bit unsigned integer equivalent.
  remarks: "The  parameter should be the string representation of a number in the following form.  \n  \n [*ws*][*sign*]*digits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture. However, the negative sign symbol can be used only with zero; otherwise, the method throws an <xref:System.OverflowException>.|  \n|*digits*|A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.|  \n  \n> [!NOTE]\n>  The string specified by the  parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  \n  \n The  parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=fullName> object that is initialized for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>. To parse a string by using the formatting information of a specific culture, use the <xref:System.UInt32.Parse%28System.String%2CSystem.IFormatProvider%29> method."
  example:
  - "The following example uses the Parse method to parse an array of string values.  \n  \n [!CODE [System.UInt32.Parse#1](../CodeSnippet/VS_Snippets_CLR_System/system.uint32.parse#1)]"
  syntax:
    content: public static uint Parse (string s);
    parameters:
    - id: s
      type: System.String
      description: A string representing the number to convert.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer equivalent to the number contained in .
  overload: System.UInt32.Parse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.Parse(System.String,System.Globalization.NumberStyles)
  id: Parse(System.String,System.Globalization.NumberStyles)
  parent: System.UInt32
  langs:
  - csharp
  name: Parse(String,NumberStyles)
  nameWithType: UInt32.Parse(String,NumberStyles)
  fullName: System.UInt32.Parse(String,NumberStyles)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified style to its 32-bit unsigned integer equivalent.
  remarks: "The  parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the  parameter for the parse operation to succeed.  must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The  parameter makes this method overload useful when  contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by  is known only at run time, or when you want to disallow white space or a sign symbol in .  \n  \n Depending on the value of , the  parameter may include the following elements:  \n  \n [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. If  includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the  parameter may contain the following elements:  \n  \n [*ws*]*hexdigits*[*ws*]  \n  \n The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the start of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the current culture. The current culture's currency symbol can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the start of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in  to indicate a negative value if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. However, the negative sign symbol can be used only with zero; otherwise, the method throws an <xref:System.OverflowException>.|  \n|*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*|A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.|  \n|*,*|A culture-specific group separator symbol. The current culture's group separator can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in .  \n  \n|`NumberStyles` value|Elements permitted in  in addition to digits|  \n|--------------------------|--------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles>|The *digits* element only.|  \n|<xref:System.Globalization.NumberStyles>|The decimal point (.) and *fractional-digits* elements.|  \n|<xref:System.Globalization.NumberStyles>|The \"e\" or \"E\" character, which indicates exponential notation, along with *exponential_digits*.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the start of .|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the end of .|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element at the start of .|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element at the end of .|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles>|The group separator (,) element.|  \n|<xref:System.Globalization.NumberStyles>|The currency ($) element.|  \n|<xref:System.Globalization.NumberStyles>|All elements. However,  cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the start or end of , *sign* at the start of , and the decimal point (*.*) symbol. The  parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The , , group separator (*,*), and decimal point (*.*) elements.|  \n|<xref:System.Globalization.NumberStyles>|All elements. However,  cannot represent a hexadecimal number.|  \n  \n Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in , the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in  are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. A prefix, such as \"0x\", is not allowed.VanTheWifey1!0825The only other flags that can be combined with the  parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles?displayProperty=fullName>, that includes both white-space flags.)  \n  \n The only other flags that can be combined with the  parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles?displayProperty=fullName>, that includes both white-space flags.)  \n  \n> [!NOTE]\n>  If  is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \n  \n The  parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <xref:System.UInt32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload."
  example:
  - "The following example tries to parse each element in a string array by using a number of <xref:System.Globalization.NumberStyles> values.  \n  \n [!CODE [System.UInt32.Parse#2](../CodeSnippet/VS_Snippets_CLR_System/system.uint32.parse#2)]"
  syntax:
    content: public static uint Parse (string s, System.Globalization.NumberStyles style);
    parameters:
    - id: s
      type: System.String
      description: A string representing the number to convert. The string is interpreted by using the style specified by the  parameter.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of the enumeration values that specify the permitted format of . A typical value to specify is <see cref="T:System.Globalization.NumberStyles">.
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer equivalent to the number specified in .
  overload: System.UInt32.Parse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.Parse(System.String,System.IFormatProvider)
  id: Parse(System.String,System.IFormatProvider)
  parent: System.UInt32
  langs:
  - csharp
  name: Parse(String,IFormatProvider)
  nameWithType: UInt32.Parse(String,IFormatProvider)
  fullName: System.UInt32.Parse(String,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified culture-specific format to its 32-bit unsigned integer equivalent.
  remarks: "The  parameter contains a number of the form:  \n  \n [*ws*][*sign*]*digits*[*ws*]  \n  \n Items in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign, or a negative sign if  represents the value zero.|  \n|*digits*|A sequence of digits ranging from 0 to 9.|  \n  \n The s parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to the unsigned integer value's decimal digits, only leading and trailing spaces along with a leading sign is allowed. (If the negative sign is present,  must represent a value of zero, or the method throws an <xref:System.OverflowException>.) To explicitly define the style elements together with the culture-specific formatting information that can be present in , use the <xref:System.UInt32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method.  \n  \n The  parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of . There are three ways to use the  parameter to supply custom formatting information to the parse operation:  \n  \n-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides formatting information. (Its implementation of <xref:System.IFormatProvider.GetFormat%2A> simply returns itself.)  \n  \n-   You can pass a <xref:System.Globalization.CultureInfo> object that specifies the culture whose formatting is to be used. Its <xref:System.Globalization.CultureInfo.NumberFormat%2A> property provides formatting information.  \n  \n-   You can pass a custom <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method must instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If  is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used."
  example:
  - "The following example is the button click event handler of a Web form. It uses the array returned by the <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=fullName> property to determine the user's locale. It then instantiates a <xref:System.Globalization.CultureInfo> object that corresponds to that locale. The <xref:System.Globalization.NumberFormatInfo> object that belongs to that <xref:System.Globalization.CultureInfo> object is then passed to the Parse method to convert the user's input to a <xref:System.UInt32> value.  \n  \n [!code-cs[ParseMethod#6](../../add/codesnippet/CSharp/parsemethod/Default.aspx.cs#6)]\n [!code-vb[ParseMethod#6](../../add/codesnippet/VisualBasic/parsemethod/Default.aspx.vb#6)]"
  syntax:
    content: public static uint Parse (string s, IFormatProvider provider);
    parameters:
    - id: s
      type: System.String
      description: A string that represents the number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information about .
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer equivalent to the number specified in .
  overload: System.UInt32.Parse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.UInt32
  langs:
  - csharp
  name: Parse(String,NumberStyles,IFormatProvider)
  nameWithType: UInt32.Parse(String,NumberStyles,IFormatProvider)
  fullName: System.UInt32.Parse(String,NumberStyles,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent.
  remarks: "The  parameter defines the style elements (such as white space or the positive or negative sign symbol) that are allowed in the  parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.  \n  \n Depending on the value of , the  parameter may include the following elements:  \n  \n [*ws*][*$*][*sign*]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. If  includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the  parameter may include the following elements:  \n  \n [*ws*]*hexdigits*[*ws*]  \n  \n The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the beginning of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the  parameter. The currency symbol can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. (The method throws an <xref:System.OverflowException> if  includes a negative sign and represents a non-zero number.) The sign can appear at the beginning of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in  to indicate a negative value if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*digits*|A sequence of digits from 0 through 9.|  \n|*.*|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*fractional_digits*|One or more occurrences of the digit 0-9 if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or one or more occurrences of the digit 0 if it does not. Fractional digits can appear in  only if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*exponential_digits*|A sequence of digits from 0 through 9. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in .  \n  \n|Non-composite `NumberStyles` values|Elements permitted in  in addition to digits|  \n|------------------------------------------|--------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|Decimal digits only.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The decimal point (*.*) and *fractional_digits* elements. However, if style does not include the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, *fractional_digits* must consist of only one or more 0 digits; otherwise, an <xref:System.OverflowException> is thrown.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The \"e\" or \"E\" character, which indicates exponential notation, along with *exponential_digits*.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the beginning of .|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the end of .|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|A sign before *digits*.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|A sign after *digits*.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|Parentheses before and after *digits* to indicate a negative value.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The group separator (*,*) element.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The currency (*$*) element.|  \n  \n If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used,  must be a hexadecimal value. The only other flags that can be combined with it are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles?displayProperty=fullName>, that includes both white-space flags.)  \n  \n> [!NOTE]\n>  If the  parameter is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the parse operation to throw an exception.  \n  \n The  parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of . There are three ways to use the  parameter to supply custom formatting information to the parse operation:  \n  \n-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides formatting information. (Its implementation of <xref:System.IFormatProvider.GetFormat%2A> simply returns itself.)  \n  \n-   You can pass a <xref:System.Globalization.CultureInfo> object that specifies the culture whose formatting is to be used. Its <xref:System.Globalization.CultureInfo.NumberFormat%2A> property provides formatting information.  \n  \n-   You can pass a custom <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method must instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If  is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."
  example:
  - "The following example uses the Parse method to convert various string representations of numbers to 32-bit unsigned integer values.  \n  \n [!CODE [System.UInt32.Parse#4](../CodeSnippet/VS_Snippets_CLR_System/system.uint32.parse#4)]"
  syntax:
    content: public static uint Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);
    parameters:
    - id: s
      type: System.String
      description: A string representing the number to convert. The string is interpreted by using the style specified by the  parameter.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of enumeration values that indicates the style elements that can be present in . A typical value to specify is <see cref="T:System.Globalization.NumberStyles">.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information about .
    return:
      type: System.UInt32
      description: A 32-bit unsigned integer equivalent to the number specified in .
  overload: System.UInt32.Parse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToBoolean(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToBoolean(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToBoolean(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToBoolean%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: bool IConvertible.ToBoolean (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Boolean
      description: '`true` if the value of the current instance is not zero; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToByte(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToByte(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToByte(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToByte%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToByte%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: byte IConvertible.ToByte (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Byte
      description: The value of the current instance, converted to a <see cref="T:System.Byte">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToChar(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToChar(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToChar(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToChar%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToChar%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: char IConvertible.ToChar (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Char
      description: The value of the current instance, converted to a <see cref="T:System.Char">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToDateTime(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToDateTime(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToDateTime(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException">.
  remarks: To be added.
  syntax:
    content: DateTime IConvertible.ToDateTime (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToDecimal(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToDecimal(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToDecimal(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: decimal IConvertible.ToDecimal (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Decimal
      description: The value of the current instance, converted to a <see cref="T:System.Decimal">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToDouble(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToDouble(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToDouble(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: double IConvertible.ToDouble (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Double
      description: The value of the current instance, converted to a <see cref="T:System.Double">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToInt16(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToInt16(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToInt16(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToInt16%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: short IConvertible.ToInt16 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int16
      description: The value of the current instance, converted to an <see cref="T:System.Int16">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToInt32(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToInt32(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToInt32(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: int IConvertible.ToInt32 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int32
      description: The value of the current instance, converted to an <see cref="T:System.Int32">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToInt64(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToInt64(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToInt64(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: long IConvertible.ToInt64 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int64
      description: The value of the current instance, converted to an <see cref="T:System.Int64">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToSByte(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToSByte(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToSByte(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: sbyte IConvertible.ToSByte (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.SByte
      description: The value of the current instance, converted to an <see cref="T:System.SByte">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToSingle(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToSingle(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToSingle(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: float IConvertible.ToSingle (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Single
      description: The value of the current instance, converted to a <see cref="T:System.Single">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToType(Type,IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToType(Type,IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToType(Type,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToType%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the `static` (`Shared` in Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=fullName> method.
  syntax:
    content: object IConvertible.ToType (Type type, IFormatProvider provider);
    parameters:
    - id: type
      type: System.Type
      description: The type to which to convert this <see cref="T:System.UInt32"> value.
    - id: provider
      type: System.IFormatProvider
      description: An <see cref="T:System.IFormatProvider"> implementation that supplies culture-specific information about the format of the returned value.
    return:
      type: System.Object
      description: The value of the current instance, converted to .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToUInt16(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToUInt16(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToUInt16(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: ushort IConvertible.ToUInt16 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.UInt16
      description: The value of the current instance, converted to a <see cref="T:System.UInt16">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToUInt32(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToUInt32(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToUInt32(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface.
  syntax:
    content: uint IConvertible.ToUInt32 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.UInt32
      description: The value of the current instance, unchanged.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.UInt32
  langs:
  - csharp
  name: System.IConvertible.ToUInt64(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToUInt64(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToUInt64(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.UInt32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.UInt32%29?displayProperty=fullName> method.
  syntax:
    content: ulong IConvertible.ToUInt64 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.UInt64
      description: The value of the current instance, converted to a <see cref="T:System.UInt64">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.ToString
  id: ToString
  parent: System.UInt32
  langs:
  - csharp
  name: ToString()
  nameWithType: UInt32.ToString()
  fullName: System.UInt32.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation.
  remarks: "The ToString method formats a <xref:System.UInt32> value in the default (\"G\", or general) format by using the <xref:System.Globalization.NumberFormatInfo> object of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.UInt32.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|A specific culture|<xref:System.UInt32.ToString%28System.IFormatProvider%29>|  \n|A specific format|Default (current) culture|<xref:System.UInt32.ToString%28System.String%29>|  \n|A specific format|A specific culture|<xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29>|"
  example:
  - "The following example displays a <xref:System.UInt32> value by using the default ToString method. It also displays the string representations of the <xref:System.UInt32> value that results from using some standard format specifiers. The examples are displayed using the formatting conventions of the en-US culture.  \n  \n [!CODE [System.UInt32.ToString#1](../CodeSnippet/VS_Snippets_CLR_System/system.uint32.tostring#1)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes.
  overload: System.UInt32.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.UInt32
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: UInt32.ToString(IFormatProvider)
  fullName: System.UInt32.ToString(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
  remarks: "The ToString method formats a <xref:System.UInt32> value in the default (\"G\", or general) format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref:System.UInt32.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|Default (current) culture|<xref:System.UInt32.ToString>|  \n|A specific format|Default (current) culture|<xref:System.UInt32.ToString%28System.String%29>|  \n|A specific format|A specific culture|<xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The  parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information. However, none of the properties of the <xref:System.Globalization.NumberFormatInfo> are used when formatting with the general numeric format specifier (\"G\")."
  example:
  - "The following example formats a 16-bit signed integer value by using several format providers, including one for the invariant culture. The output from the example illustrates that the formatted string returned by the ToString method is the same regardless of the format provider.  \n  \n [!CODE [System.UInt32.ToString#2](../CodeSnippet/VS_Snippets_CLR_System/system.uint32.tostring#2)]"
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros.
  overload: System.UInt32.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.ToString(System.String)
  id: ToString(System.String)
  parent: System.UInt32
  langs:
  - csharp
  name: ToString(String)
  nameWithType: UInt32.ToString(String)
  fullName: System.UInt32.ToString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation using the specified format.
  remarks: "The ToString method formats a <xref:System.UInt32> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture. If you want to use the default (\"G\", or general) format or specify a different culture, use the other overloads of the ToString method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|Default (current) culture|<xref:System.UInt32.ToString>|  \n|Default (\"G\") format|A specific culture|<xref:System.UInt32.ToString%28System.IFormatProvider%29>|  \n|A specific format|A specific culture|<xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The  parameter can be any valid [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md), or any combination of [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md). If  is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.UInt32> object is formatted with the general format specifier (\"G\"). If  is any other value, the method throws a <xref:System.FormatException>.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md).  \n  \n-   For more information about support for formatting in the .NET Framework, see [Formatting Types](../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md).  \n  \n The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture. Depending on the  parameter, this object controls symbols such as the group separator and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <xref:System.UInt32.ToString%28System.String%2CSystem.IFormatProvider%29> overload."
  example:
  - "The following example displays a 32-bit unsigned integer value by using each standard format string and some custom format strings.  \n  \n [!CODE [System.UInt32.ToString#3](../CodeSnippet/VS_Snippets_CLR_System/system.uint32.tostring#3)]"
  syntax:
    content: public string ToString (string format);
    parameters:
    - id: format
      type: System.String
      description: A numeric format string.
    return:
      type: System.String
      description: The string representation of the value of this instance as specified by .
  overload: System.UInt32.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.UInt32
  langs:
  - csharp
  name: ToString(String,IFormatProvider)
  nameWithType: UInt32.ToString(String,IFormatProvider)
  fullName: System.UInt32.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
  remarks: "The ToString method formats a <xref:System.UInt32> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to use default format or culture settings, use the other overloads of the <xref:System.UInt32.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|Default (current) culture|<xref:System.UInt32.ToString>|  \n|Default (\"G\") format|A specific culture|<xref:System.UInt32.ToString%28System.IFormatProvider%29>|  \n|A specific format|Default (current) culture|<xref:System.UInt32.ToString%28System.String%29>|  \n  \n The  parameter can be any valid [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md), or any combination of [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md). If  is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.UInt32> object is formatted with the general format specifier (\"G\"). If  is any other value, the method throws a <xref:System.FormatException>.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md).  \n  \n-   For more information about formatting, see [Formatting Types](../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md).  \n  \n The  parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. When the ToString method is invoked, it calls the  parameter's <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the current <xref:System.UInt32> value, such as the group separator symbol or the decimal point symbol. There are three ways to use the  parameter to supply formatting information to the ToString method:  \n  \n-   You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \n  \n-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \n  \n-   You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If  is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture."
  example:
  - "The following example displays a 32-bit unsigned integer value by using the standard numeric format specifiers and a number of specific <xref:System.Globalization.CultureInfo> objects.  \n  \n [!CODE [System.UInt32.ToString#4](../CodeSnippet/VS_Snippets_CLR_System/system.uint32.tostring#4)]"
  syntax:
    content: public string ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: A numeric format string.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information about this instance.
    return:
      type: System.String
      description: The string representation of the value of this instance as specified by  and .
  overload: System.UInt32.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.TryParse(System.String,System.UInt32@)
  id: TryParse(System.String,System.UInt32@)
  parent: System.UInt32
  langs:
  - csharp
  name: TryParse(String,UInt32)
  nameWithType: UInt32.TryParse(String,UInt32)
  fullName: System.UInt32.TryParse(String,UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Tries to convert the string representation of a number to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
  remarks: "The TryParse method is like the <xref:System.UInt32.Parse%2A> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if  is invalid and cannot be successfully parsed.  \n  \n The  parameter should be the string representation of a decimal number in the following form:  \n  \n [*ws*][*sign*]*digits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.|  \n|*digits*|A sequence of decimal digits ranging from 0 to 9.|  \n  \n The  parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed. To explicitly define the style elements with the culture-specific formatting information that can be present in , call the <xref:System.UInt32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.UInt32%40%29> method.  \n  \n> [!NOTE]\n>  The string specified by the  parameter cannot contain any group separators or decimal separator, and it cannot have a fractional portion.  \n  \n The  parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>.  \n  \n This overload interprets all digits in the  parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <xref:System.UInt32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.UInt32%40%29> overload instead."
  example:
  - "The following example calls the TryParse method once for each element in a string array.  \n  \n [!CODE [System.UInt32.TryParse#1](../CodeSnippet/VS_Snippets_CLR_System/system.uint32.tryparse#1)]"
  syntax:
    content: public static bool TryParse (string s, out uint result);
    parameters:
    - id: s
      type: System.String
      description: A string that represents the number to convert.
    - id: result
      type: System.UInt32
      description: When this method returns, contains the 32-bit unsigned integer value that is equivalent to the number contained in , if the conversion succeeded, or zero if the conversion failed. The conversion fails if the  parameter is `null` or <xref:System.String?displayProperty=fullName>, is not of the correct format, or represents a number that is less than <xref:System.UInt32?displayProperty=fullName> or greater than <xref:System.UInt32?displayProperty=fullName>. This parameter is passed uninitialized; any value originally supplied in  will be overwritten.
    return:
      type: System.Boolean
      description: '`true` if  was converted successfully; otherwise, `false`.'
  overload: System.UInt32.TryParse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)
  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)
  parent: System.UInt32
  langs:
  - csharp
  name: TryParse(String,NumberStyles,IFormatProvider,UInt32)
  nameWithType: UInt32.TryParse(String,NumberStyles,IFormatProvider,UInt32)
  fullName: System.UInt32.TryParse(String,NumberStyles,IFormatProvider,UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Tries to convert the string representation of a number in a specified style and culture-specific format to its 32-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded or failed.
  remarks: "The TryParse method is like the <xref:System.UInt32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if  is invalid and cannot be parsed successfully.  \n  \n The  parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the  parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. Depending on the value of , the  parameter may include the following elements:  \n  \n [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \n  \n Items in square brackets ([ and ]) are optional. Or, if the  parameter includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the  parameter may include the following elements:  \n  \n [*ws*]*hexdigits*[*ws*]  \n  \n The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the start of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or at the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the  parameter. The currency symbol can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the start of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in  to indicate a negative value if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. However, if the negative sign is present,  can only represent the value zero for the parse operation to succeed.|  \n|*digits*|A sequence of digits from 0 through 9.|  \n|*,*|A culture-specific group separator. The group separator of the culture specified by  can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The decimal point symbol of the culture specified by  can appear in  if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*fractional_digits*|One or more occurrences of the digit 0. Fractional digits can appear in  only if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*exponential_digits*|A sequence of digits from 0 through 9. The  parameter can represent a number in exponential notation if  includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in .  \n  \n|Non-composite `NumberStyles` values|Elements permitted in value in addition to digits|  \n|------------------------------------------|-------------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles>|Decimal digits only.|  \n|<xref:System.Globalization.NumberStyles>|The decimal point (*.*) and *fractional_digits* elements. However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.|  \n|<xref:System.Globalization.NumberStyles>|The \"e\" or \"E\" character, which indicates exponential notation, along with *exponential_digits*. If  represents a number in exponential notation, it cannot have a non-zero, fractional component.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the start of .|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the end of .|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element before *digits*.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element after *digits*.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element in the form of parentheses enclosing a zero numeric value.|  \n|<xref:System.Globalization.NumberStyles>|The group separator (*,*) element.|  \n|<xref:System.Globalization.NumberStyles>|The currency (*$*) element.|  \n|<xref:System.Globalization.NumberStyles>|All elements. However,  cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the start or end of , *sign* at the start of , and the decimal point (*.*) symbol. The  parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.|  \n|<xref:System.Globalization.NumberStyles>|All elements. However,  cannot represent a hexadecimal number.|  \n  \n If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used,  must be a hexadecimal value. The only other flags that can be present in  are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles>, that includes both white-space flags.)  \n  \n> [!NOTE]\n>  If  is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \n  \n The  parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of . The  parameter can be any one of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \n  \n-   A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If  is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."
  example:
  - "The following example calls the TryParse method with a number of different strings and <xref:System.Globalization.NumberStyles> values.  \n  \n [!CODE [System.UInt32.TryParse#2](../CodeSnippet/VS_Snippets_CLR_System/system.uint32.tryparse#2)]"
  syntax:
    content: public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out uint result);
    parameters:
    - id: s
      type: System.String
      description: A string that represents the number to convert. The string is interpreted by using the style specified by the  parameter.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of enumeration values that indicates the permitted format of . A typical value to specify is <xref:System.Globalization.NumberStyles?displayProperty=fullName>.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information about .
    - id: result
      type: System.UInt32
      description: When this method returns, contains the 32-bit unsigned integer value equivalent to the number contained in , if the conversion succeeded, or zero if the conversion failed. The conversion fails if the  parameter is `null` or <xref:System.String.Empty?displayProperty=fullName>, is not in a format compliant with , or represents a number that is less than <xref:System.UInt32.MinValue?displayProperty=fullName> or greater than <xref:System.UInt32.MaxValue?displayProperty=fullName>. This parameter is passed uninitialized; any value originally supplied in  will be overwritten.
    return:
      type: System.Boolean
      description: '`true` if  was converted successfully; otherwise, `false`.'
  overload: System.UInt32.TryParse*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.UInt32.CompareTo(System.Object)
  parent: System.UInt32
  isExternal: false
  name: CompareTo(Object)
  nameWithType: UInt32.CompareTo(Object)
  fullName: System.UInt32.CompareTo(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.UInt32.CompareTo(System.UInt32)
  parent: System.UInt32
  isExternal: false
  name: CompareTo(UInt32)
  nameWithType: UInt32.CompareTo(UInt32)
  fullName: System.UInt32.CompareTo(UInt32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32.Equals(System.Object)
  parent: System.UInt32
  isExternal: false
  name: Equals(Object)
  nameWithType: UInt32.Equals(Object)
  fullName: System.UInt32.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.UInt32.Equals(System.UInt32)
  parent: System.UInt32
  isExternal: false
  name: Equals(UInt32)
  nameWithType: UInt32.Equals(UInt32)
  fullName: System.UInt32.Equals(UInt32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32.GetHashCode
  parent: System.UInt32
  isExternal: false
  name: GetHashCode()
  nameWithType: UInt32.GetHashCode()
  fullName: System.UInt32.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.UInt32.GetTypeCode
  parent: System.UInt32
  isExternal: false
  name: GetTypeCode()
  nameWithType: UInt32.GetTypeCode()
  fullName: System.UInt32.GetTypeCode()
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  nameWithType: TypeCode
  fullName: System.TypeCode
- uid: System.UInt32.MaxValue
  parent: System.UInt32
  isExternal: false
  name: MaxValue
  nameWithType: UInt32.MaxValue
  fullName: System.UInt32.MaxValue
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32.MinValue
  parent: System.UInt32
  isExternal: false
  name: MinValue
  nameWithType: UInt32.MinValue
  fullName: System.UInt32.MinValue
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32.Parse(System.String)
  parent: System.UInt32
  isExternal: false
  name: Parse(String)
  nameWithType: UInt32.Parse(String)
  fullName: System.UInt32.Parse(String)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt32.Parse(System.String,System.Globalization.NumberStyles)
  parent: System.UInt32
  isExternal: false
  name: Parse(String,NumberStyles)
  nameWithType: UInt32.Parse(String,NumberStyles)
  fullName: System.UInt32.Parse(String,NumberStyles)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: false
  name: NumberStyles
  nameWithType: NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.UInt32.Parse(System.String,System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: Parse(String,IFormatProvider)
  nameWithType: UInt32.Parse(String,IFormatProvider)
  fullName: System.UInt32.Parse(String,IFormatProvider)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: Parse(String,NumberStyles,IFormatProvider)
  nameWithType: UInt32.Parse(String,NumberStyles,IFormatProvider)
  fullName: System.UInt32.Parse(String,NumberStyles,IFormatProvider)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: false
  name: NumberStyles
  nameWithType: NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToBoolean(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToBoolean(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToByte(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToByte(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToByte(IFormatProvider)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToChar(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToChar(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToChar(IFormatProvider)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToDateTime(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToDateTime(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToDecimal(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToDecimal(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToDouble(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToDouble(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToDouble(IFormatProvider)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToInt16(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToInt16(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToInt16(IFormatProvider)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToInt32(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToInt32(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToInt32(IFormatProvider)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToInt64(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToInt64(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToInt64(IFormatProvider)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToSByte(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToSByte(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToSByte(IFormatProvider)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToSingle(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToSingle(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToSingle(IFormatProvider)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToType(Type,IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToType(Type,IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToType(Type,IFormatProvider)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToUInt16(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToUInt16(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToUInt32(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToUInt32(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: System.IConvertible.ToUInt64(IFormatProvider)
  nameWithType: UInt32.System.IConvertible.ToUInt64(IFormatProvider)
  fullName: System.UInt32.System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.ToString
  parent: System.UInt32
  isExternal: false
  name: ToString()
  nameWithType: UInt32.ToString()
  fullName: System.UInt32.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt32.ToString(System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: UInt32.ToString(IFormatProvider)
  fullName: System.UInt32.ToString(IFormatProvider)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.ToString(System.String)
  parent: System.UInt32
  isExternal: false
  name: ToString(String)
  nameWithType: UInt32.ToString(String)
  fullName: System.UInt32.ToString(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt32.ToString(System.String,System.IFormatProvider)
  parent: System.UInt32
  isExternal: false
  name: ToString(String,IFormatProvider)
  nameWithType: UInt32.ToString(String,IFormatProvider)
  fullName: System.UInt32.ToString(String,IFormatProvider)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32.TryParse(System.String,System.UInt32@)
  parent: System.UInt32
  isExternal: false
  name: TryParse(String,UInt32)
  nameWithType: UInt32.TryParse(String,UInt32)
  fullName: System.UInt32.TryParse(String,UInt32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)
  parent: System.UInt32
  isExternal: false
  name: TryParse(String,NumberStyles,IFormatProvider,UInt32)
  nameWithType: UInt32.TryParse(String,NumberStyles,IFormatProvider,UInt32)
  fullName: System.UInt32.TryParse(String,NumberStyles,IFormatProvider,UInt32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: false
  name: NumberStyles
  nameWithType: NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32.CompareTo*
  parent: System.UInt32
  isExternal: false
  nameWithType: UInt32.
- uid: System.UInt32.Equals*
  parent: System.UInt32
  isExternal: false
  nameWithType: UInt32.
- uid: System.UInt32.Parse*
  parent: System.UInt32
  isExternal: false
  nameWithType: UInt32.
- uid: System.UInt32.ToString*
  parent: System.UInt32
  isExternal: false
  nameWithType: UInt32.
- uid: System.UInt32.TryParse*
  parent: System.UInt32
  isExternal: false
  nameWithType: UInt32.
