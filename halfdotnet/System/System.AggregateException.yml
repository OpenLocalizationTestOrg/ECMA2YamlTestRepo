### YamlMime:ManagedReference
items:
- uid: System.AggregateException
  id: AggregateException
  children:
  - System.AggregateException.#ctor
  - System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})
  - System.AggregateException.#ctor(System.Exception[])
  - System.AggregateException.#ctor(System.String)
  - System.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})
  - System.AggregateException.#ctor(System.String,System.Exception)
  - System.AggregateException.#ctor(System.String,System.Exception[])
  - System.AggregateException.Flatten
  - System.AggregateException.GetBaseException
  - System.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})
  - System.AggregateException.InnerExceptions
  - System.AggregateException.ToString
  langs:
  - csharp
  name: AggregateException
  nameWithType: AggregateException
  fullName: System.AggregateException
  type: Class
  summary: Represents one or more errors that occur during application execution.
  remarks: 'AggregateException is used to consolidate multiple failures into a single, throwable exception object. It is used extensively in the [Task Parallel Library (TPL)](../Topic/Task%20Parallel%20Library%20\(TPL\).md) and [Parallel LINQ (PLINQ)](../Topic/Parallel%20LINQ%20\(PLINQ\).md). For additional information, see the [Aggregating Exceptions](http://go.microsoft.com/fwlink/p/?LinkId=259617) entry in the .NET Matters blog. For an example, see [NIB: How to: Handle Exceptions Thrown by Tasks](http://msdn.microsoft.com/en-us/d6c47ec8-9de9-4880-beb3-ff19ae51565d) and [How to: Handle Exceptions in a PLINQ Query](../Topic/How%20to:%20Handle%20Exceptions%20in%20a%20PLINQ%20Query.md).'
  example:
  - "The following example catches the AggregateException exception and calls the <xref:System.AggregateException.Handle%2A> method to handle each exception it contains. Compiling and running the example with the first `task1` variable should result in an AggregateException object that contains an <xref:System.UnauthorizedAccessException> exception. Commenting out that line, uncommenting the second `task1` variable, and compiling and running the example produces an AggregateException object that contains an <xref:System.IndexOutOfRangeException> exception.  \n  \n [!CODE [System.AggregateException.Class#1](../CodeSnippet/VS_Snippets_CLR_System/system.aggregateexception.class#1)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {InnerExceptionCount}")]

      public class AggregateException : Exception
  inheritance:
  - System.Object
  - System.Exception
  implements: []
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.GetType
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Message
  - System.Exception.SerializeObjectState
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.TargetSite
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.#ctor
  id: '#ctor'
  parent: System.AggregateException
  langs:
  - csharp
  name: AggregateException()
  nameWithType: AggregateException.AggregateException()
  fullName: System.AggregateException.AggregateException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.AggregateException"> class with a system-supplied message that describes the error.
  remarks: "This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"DefaultMessageDisplayedByParameterlessCtorWriterMustSupply\" This message takes into account the current system culture.  \n  \n The following table shows the initial property values for an instance of <xref:System.InsufficientMemoryException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|`null`.|  \n|<xref:System.Exception.Message%2A>|The localized error message string.|"
  syntax:
    content: public AggregateException ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Exception})'
  parent: System.AggregateException
  langs:
  - csharp
  name: AggregateException(IEnumerable<Exception>)
  nameWithType: AggregateException.AggregateException(IEnumerable<Exception>)
  fullName: System.AggregateException.AggregateException(IEnumerable<Exception>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.AggregateException"> class with references to the inner exceptions that are the cause of this exception.
  remarks: To be added.
  syntax:
    content: public AggregateException (System.Collections.Generic.IEnumerable<Exception> innerExceptions);
    parameters:
    - id: innerExceptions
      type: System.Collections.Generic.IEnumerable{System.Exception}
      description: The exceptions that are the cause of the current exception.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.#ctor(System.Exception[])
  id: '#ctor(System.Exception[])'
  parent: System.AggregateException
  langs:
  - csharp
  name: AggregateException(Exception[])
  nameWithType: AggregateException.AggregateException(Exception[])
  fullName: System.AggregateException.AggregateException(Exception[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.AggregateException"> class with references to the inner exceptions that are the cause of this exception.
  remarks: To be added.
  syntax:
    content: public AggregateException (Exception[] innerExceptions);
    parameters:
    - id: innerExceptions
      type: System.Exception[]
      description: The exceptions that are the cause of the current exception.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.AggregateException
  langs:
  - csharp
  name: AggregateException(String)
  nameWithType: AggregateException.AggregateException(String)
  fullName: System.AggregateException.AggregateException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.AggregateException"> class with a specified message that describes the error.
  remarks: "The following table shows the initial property values for an instance of <xref:System.AggregateException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|`null`.|  \n|<xref:System.Exception.Message%2A>|The error message string specified in .|"
  syntax:
    content: public AggregateException (string message);
    parameters:
    - id: message
      type: System.String
      description: The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.AggregateException
  langs:
  - csharp
  name: AggregateException(SerializationInfo,StreamingContext)
  nameWithType: AggregateException.AggregateException(SerializationInfo,StreamingContext)
  fullName: System.AggregateException.AggregateException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.AggregateException"> class with serialized data.
  remarks: This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](../Topic/XML%20and%20SOAP%20Serialization.md).
  syntax:
    content: protected AggregateException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object that holds the serialized object data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The contextual information about the source or destination.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})'
  parent: System.AggregateException
  langs:
  - csharp
  name: AggregateException(String,IEnumerable<Exception>)
  nameWithType: AggregateException.AggregateException(String,IEnumerable<Exception>)
  fullName: System.AggregateException.AggregateException(String,IEnumerable<Exception>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.AggregateException"> class with a specified error message and references to the inner exceptions that are the cause of this exception.
  remarks: To be added.
  syntax:
    content: public AggregateException (string message, System.Collections.Generic.IEnumerable<Exception> innerExceptions);
    parameters:
    - id: message
      type: System.String
      description: The error message that explains the reason for the exception.
    - id: innerExceptions
      type: System.Collections.Generic.IEnumerable{System.Exception}
      description: The exceptions that are the cause of the current exception.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.AggregateException
  langs:
  - csharp
  name: AggregateException(String,Exception)
  nameWithType: AggregateException.AggregateException(String,Exception)
  fullName: System.AggregateException.AggregateException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.AggregateException"> class with a specified error message and a reference to the inner exception that is the cause of this exception.
  remarks: "An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.AggregateException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|`null`.|  \n|<xref:System.Exception.Message%2A>|The error message string specified in .|"
  syntax:
    content: public AggregateException (string message, Exception innerException);
    parameters:
    - id: message
      type: System.String
      description: The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.
    - id: innerException
      type: System.Exception
      description: The exception that is the cause of the current exception. If the  parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.#ctor(System.String,System.Exception[])
  id: '#ctor(System.String,System.Exception[])'
  parent: System.AggregateException
  langs:
  - csharp
  name: AggregateException(String,Exception[])
  nameWithType: AggregateException.AggregateException(String,Exception[])
  fullName: System.AggregateException.AggregateException(String,Exception[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.AggregateException"> class with a specified error message and references to the inner exceptions that are the cause of this exception.
  remarks: To be added.
  syntax:
    content: public AggregateException (string message, Exception[] innerExceptions);
    parameters:
    - id: message
      type: System.String
      description: The error message that explains the reason for the exception.
    - id: innerExceptions
      type: System.Exception[]
      description: The exceptions that are the cause of the current exception.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.Flatten
  id: Flatten
  parent: System.AggregateException
  langs:
  - csharp
  name: Flatten()
  nameWithType: AggregateException.Flatten()
  fullName: System.AggregateException.Flatten()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Flattens an <see cref="T:System.AggregateException"> instances into a single, new instance.
  remarks: "If a task has an attached child task that throws an exception, that exception is wrapped in an <xref:System.AggregateException> exception before it is propagated to the parent task, which wraps that exception in its own <xref:System.AggregateException> exception before it propagates it back to the calling thread. In such cases, the <xref:System.AggregateException.InnerExceptions%2A> property of the <xref:System.AggregateException> exception that is caught by the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName>, <xref:System.Threading.Tasks.Task%601.Wait%2A?displayProperty=fullName>, <xref:System.Threading.Tasks.Task.WaitAny%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName> method contains one or more <xref:System.AggregateException> instances, not the original exceptions that caused the fault. To avoid having to iterate over nested <xref:System.AggregateException> exceptions, you can use the Flatten method to remove all the nested <xref:System.AggregateException> exceptions, so that the <xref:System.AggregateException.InnerExceptions%2A> property of the returned <xref:System.AggregateException> object contains the original exceptions.  \n  \n This method recursively flattens all instances of  <xref:System.AggregateException> exceptions that are inner exceptions of the current <xref:System.AggregateException> instance . The inner exceptions returned in the new <xref:System.AggregateException> are the union of all the inner exceptions from exception tree rooted at the current <xref:System.AggregateException> instance."
  example:
  - "In the following example, nested <xref:System.AggregateException> instances are flattened and handled in just one loop.  \n  \n [!CODE [TPL_Exceptions#22](../CodeSnippet/VS_Snippets_Misc/tpl_exceptions#22)]  \n  \n You can also use the Flatten method to rethrow the inner exceptions from multiple <xref:System.AggregateException> instances thrown by multiple tasks in a single <xref:System.AggregateException> instance, as the following example shows.  \n  \n [!CODE [TPL_Exceptions#13](../CodeSnippet/VS_Snippets_Misc/tpl_exceptions#13)]"
  syntax:
    content: public AggregateException Flatten ();
    parameters: []
    return:
      type: System.AggregateException
      description: A new, flattened <see cref="T:System.AggregateException">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.GetBaseException
  id: GetBaseException
  parent: System.AggregateException
  langs:
  - csharp
  name: GetBaseException()
  nameWithType: AggregateException.GetBaseException()
  fullName: System.AggregateException.GetBaseException()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the <see cref="T:System.AggregateException"> that is the root cause of this exception.
  remarks: To be added.
  syntax:
    content: public override Exception GetBaseException ();
    parameters: []
    return:
      type: System.Exception
      description: Returns the <see cref="T:System.AggregateException"> that is the root cause of this exception.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.AggregateException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: AggregateException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.AggregateException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.AggregateException"> class with serialized data.
  remarks: This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](../Topic/XML%20and%20SOAP%20Serialization.md).
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object that holds the serialized object data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The contextual information about the source or destination.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})
  id: Handle(System.Func{System.Exception,System.Boolean})
  parent: System.AggregateException
  langs:
  - csharp
  name: Handle(Func<Exception,Boolean>)
  nameWithType: AggregateException.Handle(Func<Exception,Boolean>)
  fullName: System.AggregateException.Handle(Func<Exception,Boolean>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Invokes a handler on each <see cref="T:System.Exception"> contained by this <xref:System.AggregateException>.
  remarks: Each invocation of the  returns true or false to indicate whether the <xref:System.Exception> was handled. After all invocations, if any exceptions went unhandled, all unhandled exceptions will be put into a new <xref:System.AggregateException> which will be thrown. Otherwise, the Handle method simply returns. If any invocations of the  throws an exception, it will halt the processing of any more exceptions and immediately propagate the thrown exception as-is.
  example:
  - "Ordinarily, an exception handler that catches an <xref:System.AggregateException> exception uses a `foreach` loop (in C#) or `For Each` loop (in Visual Basic) to handle each exception in its <xref:System.AggregateException.InnerExceptions%2A> collection. Instead, the following example uses the Handle method to handle each exception, and only re-throws exceptions that are not `CustomException` instances.  \n  \n [!CODE [TPL_Exceptions#16](../CodeSnippet/VS_Snippets_Misc/tpl_exceptions#16)]  \n  \n The following is a more complete example that uses the Handle method to provide special handling for an <xref:System.UnauthorizedAccessException> when enumerating files.  \n  \n [!CODE [TPL_Exceptions#12](../CodeSnippet/VS_Snippets_Misc/tpl_exceptions#12)]"
  syntax:
    content: public void Handle (Func<Exception,bool> predicate);
    parameters:
    - id: predicate
      type: System.Func{System.Exception,System.Boolean}
      description: The predicate to execute for each exception. The predicate accepts as an argument the <see cref="T:System.Exception"> to be processed and returns a Boolean to indicate whether the exception was handled.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.InnerExceptions
  id: InnerExceptions
  parent: System.AggregateException
  langs:
  - csharp
  name: InnerExceptions
  nameWithType: AggregateException.InnerExceptions
  fullName: System.AggregateException.InnerExceptions
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a read-only collection of the <see cref="T:System.Exception"> instances that caused the current exception.
  remarks: To be added.
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<Exception> InnerExceptions { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Exception}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.AggregateException.ToString
  id: ToString
  parent: System.AggregateException
  langs:
  - csharp
  name: ToString()
  nameWithType: AggregateException.ToString()
  fullName: System.AggregateException.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates and returns a string representation of the current <see cref="T:System.AggregateException">.
  remarks: To be added.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string representation of the current exception.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Exception
  isExternal: false
  name: System.Exception
- uid: System.AggregateException.#ctor
  parent: System.AggregateException
  isExternal: false
  name: AggregateException()
  nameWithType: AggregateException.AggregateException()
  fullName: System.AggregateException.AggregateException()
- uid: System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})
  parent: System.AggregateException
  isExternal: false
  name: AggregateException(IEnumerable<Exception>)
  nameWithType: AggregateException.AggregateException(IEnumerable<Exception>)
  fullName: System.AggregateException.AggregateException(IEnumerable<Exception>)
- uid: System.Collections.Generic.IEnumerable{System.Exception}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Exception>
  nameWithType: IEnumerable<Exception>
  fullName: System.Collections.Generic.IEnumerable<System.Exception>
- uid: System.AggregateException.#ctor(System.Exception[])
  parent: System.AggregateException
  isExternal: false
  name: AggregateException(Exception[])
  nameWithType: AggregateException.AggregateException(Exception[])
  fullName: System.AggregateException.AggregateException(Exception[])
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception[]
- uid: System.AggregateException.#ctor(System.String)
  parent: System.AggregateException
  isExternal: false
  name: AggregateException(String)
  nameWithType: AggregateException.AggregateException(String)
  fullName: System.AggregateException.AggregateException(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.AggregateException
  isExternal: false
  name: AggregateException(SerializationInfo,StreamingContext)
  nameWithType: AggregateException.AggregateException(SerializationInfo,StreamingContext)
  fullName: System.AggregateException.AggregateException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})
  parent: System.AggregateException
  isExternal: false
  name: AggregateException(String,IEnumerable<Exception>)
  nameWithType: AggregateException.AggregateException(String,IEnumerable<Exception>)
  fullName: System.AggregateException.AggregateException(String,IEnumerable<Exception>)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Exception}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Exception>
  nameWithType: IEnumerable<Exception>
  fullName: System.Collections.Generic.IEnumerable<System.Exception>
- uid: System.AggregateException.#ctor(System.String,System.Exception)
  parent: System.AggregateException
  isExternal: false
  name: AggregateException(String,Exception)
  nameWithType: AggregateException.AggregateException(String,Exception)
  fullName: System.AggregateException.AggregateException(String,Exception)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.AggregateException.#ctor(System.String,System.Exception[])
  parent: System.AggregateException
  isExternal: false
  name: AggregateException(String,Exception[])
  nameWithType: AggregateException.AggregateException(String,Exception[])
  fullName: System.AggregateException.AggregateException(String,Exception[])
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception[]
- uid: System.AggregateException.Flatten
  parent: System.AggregateException
  isExternal: false
  name: Flatten()
  nameWithType: AggregateException.Flatten()
  fullName: System.AggregateException.Flatten()
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  nameWithType: AggregateException
  fullName: System.AggregateException
- uid: System.AggregateException.GetBaseException
  parent: System.AggregateException
  isExternal: false
  name: GetBaseException()
  nameWithType: AggregateException.GetBaseException()
  fullName: System.AggregateException.GetBaseException()
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.AggregateException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: AggregateException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.AggregateException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})
  parent: System.AggregateException
  isExternal: false
  name: Handle(Func<Exception,Boolean>)
  nameWithType: AggregateException.Handle(Func<Exception,Boolean>)
  fullName: System.AggregateException.Handle(Func<Exception,Boolean>)
- uid: System.Func{System.Exception,System.Boolean}
  parent: System
  isExternal: true
  name: Func<Exception,Boolean>
  nameWithType: Func<Exception,Boolean>
  fullName: System.Func<System.Exception,System.Boolean>
- uid: System.AggregateException.InnerExceptions
  parent: System.AggregateException
  isExternal: false
  name: InnerExceptions
  nameWithType: AggregateException.InnerExceptions
  fullName: System.AggregateException.InnerExceptions
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Exception}
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<Exception>
  nameWithType: ReadOnlyCollection<Exception>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Exception>
- uid: System.AggregateException.ToString
  parent: System.AggregateException
  isExternal: false
  name: ToString()
  nameWithType: AggregateException.ToString()
  fullName: System.AggregateException.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
