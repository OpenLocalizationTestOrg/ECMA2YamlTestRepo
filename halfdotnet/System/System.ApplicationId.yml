### YamlMime:ManagedReference
items:
- uid: System.ApplicationId
  id: ApplicationId
  children:
  - System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)
  - System.ApplicationId.Copy
  - System.ApplicationId.Culture
  - System.ApplicationId.Equals(System.Object)
  - System.ApplicationId.GetHashCode
  - System.ApplicationId.Name
  - System.ApplicationId.ProcessorArchitecture
  - System.ApplicationId.PublicKeyToken
  - System.ApplicationId.ToString
  - System.ApplicationId.Version
  langs:
  - csharp
  name: ApplicationId
  nameWithType: ApplicationId
  fullName: System.ApplicationId
  type: Class
  summary: Contains information used to uniquely identify a manifest-based application. This class cannot be inherited.
  remarks: "An application identity consists of the publisher's public key, the application name, the target processor architecture, the application culture, and the application version. The application identity properties values correspond to information contained in the application manifest. For more information about the application manifest, see [ClickOnce Application Manifest](../Topic/ClickOnce%20Application%20Manifest.md).  \n  \n ApplicationId is used by the <xref:System.Security.Policy.ApplicationSecurityInfo> class to identify a manifest-based application."
  example:
  - "The following code example displays the ApplicationId properties by obtaining the ApplicationId from an <xref:System.Security.Policy.ApplicationSecurityInfo> instance created using the <xref:System.ActivationContext> for the currently executing manifest-based application.  \n  \n [!CODE [System.ApplicationIdentity#1](../CodeSnippet/VS_Snippets_CLR_System/system.ApplicationIdentity#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ApplicationId
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)
  id: '#ctor(System.Byte[],System.String,System.Version,System.String,System.String)'
  parent: System.ApplicationId
  langs:
  - csharp
  name: ApplicationId(Byte[],String,Version,String,String)
  nameWithType: ApplicationId.ApplicationId(Byte[],String,Version,String,String)
  fullName: System.ApplicationId.ApplicationId(Byte[],String,Version,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.ApplicationId"> class.
  remarks: The constructor initializes the <xref:System.ApplicationId.Culture%2A>, <xref:System.ApplicationId.Name%2A>, <xref:System.ApplicationId.ProcessorArchitecture%2A>, <xref:System.ApplicationId.PublicKeyToken%2A>, and <xref:System.ApplicationId.Version%2A> properties of the <xref:System.ApplicationId>.
  syntax:
    content: public ApplicationId (byte[] publicKeyToken, string name, Version version, string processorArchitecture, string culture);
    parameters:
    - id: publicKeyToken
      type: System.Byte[]
      description: The array of bytes representing the raw public key data.
    - id: name
      type: System.String
      description: The name of the application.
    - id: version
      type: System.Version
      description: A <see cref="T:System.Version"> object that specifies the version of the application.
    - id: processorArchitecture
      type: System.String
      description: The processor architecture of the application.
    - id: culture
      type: System.String
      description: The culture of the application.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ApplicationId.Copy
  id: Copy
  parent: System.ApplicationId
  langs:
  - csharp
  name: Copy()
  nameWithType: ApplicationId.Copy()
  fullName: System.ApplicationId.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates and returns an identical copy of the current application identity.
  remarks: The copy returned by this method is equal to the original as substantiated by the <xref:System.ApplicationId.Equals%2A> method. The hash codes for the original and the copy are also equal.
  syntax:
    content: public ApplicationId Copy ();
    parameters: []
    return:
      type: System.ApplicationId
      description: An <see cref="T:System.ApplicationId"> object that represents an exact copy of the original.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ApplicationId.Culture
  id: Culture
  parent: System.ApplicationId
  langs:
  - csharp
  name: Culture
  nameWithType: ApplicationId.Culture
  fullName: System.ApplicationId.Culture
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a string representing the culture information for the application.
  remarks: "The Culture value can include language information, for example, \"en-US\".  \n  \n For information about culture values, see <xref:System.Globalization.CultureInfo>."
  example:
  - "The following code example displays the Culture property by obtaining the <xref:System.ApplicationId> from an <xref:System.Security.Policy.ApplicationSecurityInfo> instance created using the <xref:System.ActivationContext> for the currently executing manifest-based application.  This code example is part of a larger example provided for the <xref:System.ApplicationId> class.  \n  \n [!CODE [System.ApplicationIdentity#8](../CodeSnippet/VS_Snippets_CLR_System/system.ApplicationIdentity#8)]"
  syntax:
    content: public string Culture { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ApplicationId.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ApplicationId
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ApplicationId.Equals(Object)
  fullName: System.ApplicationId.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the specified <see cref="T:System.ApplicationId"> object is equivalent to the current <see cref="T:System.ApplicationId">.
  remarks: This method overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName> method.
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: The <see cref="T:System.ApplicationId"> object to compare to the current <see cref="T:System.ApplicationId">.
    return:
      type: System.Boolean
      description: '`true` if the specified <see cref="T:System.ApplicationId"> object is equivalent to the current <see cref="T:System.ApplicationId">; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ApplicationId.GetHashCode
  id: GetHashCode
  parent: System.ApplicationId
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ApplicationId.GetHashCode()
  fullName: System.ApplicationId.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the hash code for the current application identity.
  remarks: This method generates the same hash code for two objects that have the same values for their <xref:System.ApplicationId.Name%2A> and <xref:System.ApplicationId.Version%2A> properties.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: The hash code for the current application identity.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ApplicationId.Name
  id: Name
  parent: System.ApplicationId
  langs:
  - csharp
  name: Name
  nameWithType: ApplicationId.Name
  fullName: System.ApplicationId.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the name of the application.
  remarks: Name is the simple, unencrypted name of the application.
  example:
  - "The following code example displays the Name property by obtaining the <xref:System.ApplicationId> from an <xref:System.Security.Policy.ApplicationSecurityInfo> instance created using the <xref:System.ActivationContext> for the currently executing manifest-based application. This code example is part of a larger example provided for the <xref:System.ApplicationId> class.  \n  \n [!CODE [System.ApplicationIdentity#7](../CodeSnippet/VS_Snippets_CLR_System/system.ApplicationIdentity#7)]"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ApplicationId.ProcessorArchitecture
  id: ProcessorArchitecture
  parent: System.ApplicationId
  langs:
  - csharp
  name: ProcessorArchitecture
  nameWithType: ApplicationId.ProcessorArchitecture
  fullName: System.ApplicationId.ProcessorArchitecture
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the target processor architecture for the application.
  remarks: Valid values include "msil", "x86", "ia64", and "amd64". The default is "msil", or Microsoft intermediate language, which means all your assemblies are platform independent, and the common language runtime will compile them when they are needed by your application.
  example:
  - "The following code example displays the ProcessorArchitecture property by obtaining the <xref:System.ApplicationId> from an <xref:System.Security.Policy.ApplicationSecurityInfo> instance created using the <xref:System.ActivationContext> for the currently executing manifest-based application.  This code example is part of a larger example provided for the <xref:System.ApplicationId> class.  \n  \n [!CODE [System.ApplicationIdentity#9](../CodeSnippet/VS_Snippets_CLR_System/system.ApplicationIdentity#9)]"
  syntax:
    content: public string ProcessorArchitecture { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ApplicationId.PublicKeyToken
  id: PublicKeyToken
  parent: System.ApplicationId
  langs:
  - csharp
  name: PublicKeyToken
  nameWithType: ApplicationId.PublicKeyToken
  fullName: System.ApplicationId.PublicKeyToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the public key token for the application.
  remarks: "The public key token is represented by the last 8 bytes of the SHA-1 hash of the public key under which the application is signed.  \n  \n For more information, see <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A?displayProperty=fullName>."
  example:
  - "The following code example displays the PublicKeyToken property by obtaining the <xref:System.ApplicationId> from an <xref:System.Security.Policy.ApplicationSecurityInfo> instance created using the <xref:System.ActivationContext> for the currently executing manifest-based application. This code example is part of a larger example provided for the <xref:System.ApplicationId> class.  \n  \n [!CODE [System.ApplicationIdentity#11](../CodeSnippet/VS_Snippets_CLR_System/system.ApplicationIdentity#11)]"
  syntax:
    content: public byte[] PublicKeyToken { get; }
    return:
      type: System.Byte[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ApplicationId.ToString
  id: ToString
  parent: System.ApplicationId
  langs:
  - csharp
  name: ToString()
  nameWithType: ApplicationId.ToString()
  fullName: System.ApplicationId.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates and returns a string representation of the application identity.
  remarks: This method overrides the <xref:System.Object.ToString%2A?displayProperty=fullName> method.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string representation of the application identity.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ApplicationId.Version
  id: Version
  parent: System.ApplicationId
  langs:
  - csharp
  name: Version
  nameWithType: ApplicationId.Version
  fullName: System.ApplicationId.Version
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the version of the application.
  remarks: For more information, see <xref:System.Version?displayProperty=fullName>.
  example:
  - "The following code example displays the Version property by obtaining the <xref:System.ApplicationId> from an <xref:System.Security.Policy.ApplicationSecurityInfo> instance created using the <xref:System.ActivationContext> for the currently executing manifest-based application. This code example is part of a larger example provided for the <xref:System.ApplicationId> class.  \n  \n [!CODE [System.ApplicationIdentity#10](../CodeSnippet/VS_Snippets_CLR_System/system.ApplicationIdentity#10)]"
  syntax:
    content: public Version Version { get; }
    return:
      type: System.Version
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)
  parent: System.ApplicationId
  isExternal: false
  name: ApplicationId(Byte[],String,Version,String,String)
  nameWithType: ApplicationId.ApplicationId(Byte[],String,Version,String,String)
  fullName: System.ApplicationId.ApplicationId(Byte[],String,Version,String,String)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ApplicationId.Copy
  parent: System.ApplicationId
  isExternal: false
  name: Copy()
  nameWithType: ApplicationId.Copy()
  fullName: System.ApplicationId.Copy()
- uid: System.ApplicationId
  parent: System
  isExternal: false
  name: ApplicationId
  nameWithType: ApplicationId
  fullName: System.ApplicationId
- uid: System.ApplicationId.Culture
  parent: System.ApplicationId
  isExternal: false
  name: Culture
  nameWithType: ApplicationId.Culture
  fullName: System.ApplicationId.Culture
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ApplicationId.Equals(System.Object)
  parent: System.ApplicationId
  isExternal: false
  name: Equals(Object)
  nameWithType: ApplicationId.Equals(Object)
  fullName: System.ApplicationId.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ApplicationId.GetHashCode
  parent: System.ApplicationId
  isExternal: false
  name: GetHashCode()
  nameWithType: ApplicationId.GetHashCode()
  fullName: System.ApplicationId.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ApplicationId.Name
  parent: System.ApplicationId
  isExternal: false
  name: Name
  nameWithType: ApplicationId.Name
  fullName: System.ApplicationId.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ApplicationId.ProcessorArchitecture
  parent: System.ApplicationId
  isExternal: false
  name: ProcessorArchitecture
  nameWithType: ApplicationId.ProcessorArchitecture
  fullName: System.ApplicationId.ProcessorArchitecture
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ApplicationId.PublicKeyToken
  parent: System.ApplicationId
  isExternal: false
  name: PublicKeyToken
  nameWithType: ApplicationId.PublicKeyToken
  fullName: System.ApplicationId.PublicKeyToken
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.ApplicationId.ToString
  parent: System.ApplicationId
  isExternal: false
  name: ToString()
  nameWithType: ApplicationId.ToString()
  fullName: System.ApplicationId.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ApplicationId.Version
  parent: System.ApplicationId
  isExternal: false
  name: Version
  nameWithType: ApplicationId.Version
  fullName: System.ApplicationId.Version
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
