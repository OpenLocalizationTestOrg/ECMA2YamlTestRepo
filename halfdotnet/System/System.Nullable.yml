### YamlMime:ManagedReference
items:
- uid: System.Nullable
  id: Nullable
  children:
  - System.Nullable.Compare``1(System.Nullable`1,System.Nullable`1)
  - System.Nullable.Equals``1(System.Nullable`1,System.Nullable`1)
  - System.Nullable.GetUnderlyingType(System.Type)
  langs:
  - csharp
  name: Nullable
  nameWithType: Nullable
  fullName: System.Nullable
  type: Class
  summary: Supports a value type that can be assigned `null`. This class cannot be inherited.
  remarks: "A type is said to be nullable if it can be assigned a value or can be assigned `null`, which means the type has no value whatsoever. By default, all reference types, such as <xref:System.String>, are nullable, but all value types, such as <xref:System.Int32>, are not.  \n  \n In C# and Visual Basic, you mark a value type as nullable by using the `?` notation after the value type. For example, `int?` in C# or `Integer?` in Visual Basic declares an integer value type that can be assigned `null`.  \n  \n The Nullable class provides complementary support for the <xref:System.Nullable%601> structure. The Nullable class supports obtaining the underlying type of a nullable type, and comparison and equality operations on pairs of nullable types whose underlying value type does not support generic comparison and equality operations.  \n  \n## Boxing and Unboxing  \n When a nullable type is boxed, the common language runtime automatically boxes the underlying value of the <xref:System.Nullable%601> object, not the <xref:System.Nullable%601> object itself. That is, if the <xref:System.Nullable%601.HasValue%2A> property is `true`, the contents of the <xref:System.Nullable%601.Value%2A> property is boxed. If the `HasValue` property is `false`, `null` is boxed. When the underlying value of a nullable type is unboxed, the common language runtime creates a new <xref:System.Nullable%601> structure initialized to the underlying value."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Nullable
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Nullable.Compare``1(System.Nullable`1,System.Nullable`1)
  id: Compare``1(System.Nullable`1,System.Nullable`1)
  parent: System.Nullable
  langs:
  - csharp
  name: Compare(Nullable<T>,Nullable<T>)
  nameWithType: Nullable.Compare(Nullable<T>,Nullable<T>)
  fullName: System.Nullable.Compare(Nullable<T>,Nullable<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public static int Compare<T> (Nullable<T> n1, Nullable<T> n2) where T : struct;'
    parameters:
    - id: n1
      type: System.Nullable`1
      description: To be added.
    - id: n2
      type: System.Nullable`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Nullable.Equals``1(System.Nullable`1,System.Nullable`1)
  id: Equals``1(System.Nullable`1,System.Nullable`1)
  parent: System.Nullable
  langs:
  - csharp
  name: Equals(Nullable<T>,Nullable<T>)
  nameWithType: Nullable.Equals(Nullable<T>,Nullable<T>)
  fullName: System.Nullable.Equals(Nullable<T>,Nullable<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public static bool Equals<T> (Nullable<T> n1, Nullable<T> n2) where T : struct;'
    parameters:
    - id: n1
      type: System.Nullable`1
      description: To be added.
    - id: n2
      type: System.Nullable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Nullable.GetUnderlyingType(System.Type)
  id: GetUnderlyingType(System.Type)
  parent: System.Nullable
  langs:
  - csharp
  name: GetUnderlyingType(Type)
  nameWithType: Nullable.GetUnderlyingType(Type)
  fullName: System.Nullable.GetUnderlyingType(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the underlying type argument of the specified nullable type.
  remarks: "A generic type definition is a type declaration, such as <xref:System.Nullable%601>, that contains a type parameter list, and the type parameter list declares one or more type parameters. A closed generic type is a type declaration where a particular type is specified for a type parameter.  \n  \n For example, if the  parameter is the type of `Nullable<Int32>` in C# (`Nullable(Of Int32)` in Visual Basic), the return value is the type of <xref:System.Int32> (that is, the type argument of the closed generic type)."
  example:
  - "The following code example defines a method whose return value is of type <xref:System.Nullable%601> of <xref:System.Int32>. The code example uses the GetUnderlyingType method to display the type argument of the return value.  \n  \n [!CODE [system.nullable_GetUnderlyingType#1](../CodeSnippet/VS_Snippets_CLR_System/system.nullable_GetUnderlyingType#1)]"
  syntax:
    content: public static Type GetUnderlyingType (Type nullableType);
    parameters:
    - id: nullableType
      type: System.Type
      description: A <see cref="T:System.Type"> object that describes a closed generic nullable type.
    return:
      type: System.Type
      description: The type argument of the  parameter, if the  parameter is a closed generic nullable type; otherwise, `null`.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Nullable.Compare``1(System.Nullable`1,System.Nullable`1)
  parent: System.Nullable
  isExternal: false
  name: Compare(Nullable<T>,Nullable<T>)
  nameWithType: Nullable.Compare(Nullable<T>,Nullable<T>)
  fullName: System.Nullable.Compare(Nullable<T>,Nullable<T>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
- uid: System.Nullable.Equals``1(System.Nullable`1,System.Nullable`1)
  parent: System.Nullable
  isExternal: false
  name: Equals(Nullable<T>,Nullable<T>)
  nameWithType: Nullable.Equals(Nullable<T>,Nullable<T>)
  fullName: System.Nullable.Equals(Nullable<T>,Nullable<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
- uid: System.Nullable.GetUnderlyingType(System.Type)
  parent: System.Nullable
  isExternal: false
  name: GetUnderlyingType(Type)
  nameWithType: Nullable.GetUnderlyingType(Type)
  fullName: System.Nullable.GetUnderlyingType(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
