### YamlMime:ManagedReference
items:
- uid: System.Activator
  id: Activator
  children:
  - System.Activator.CreateComInstanceFrom(System.String,System.String)
  - System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  - System.Activator.CreateInstance(System.ActivationContext)
  - System.Activator.CreateInstance(System.Type)
  - System.Activator.CreateInstance(System.ActivationContext,System.String[])
  - System.Activator.CreateInstance(System.String,System.String)
  - System.Activator.CreateInstance(System.Type,System.Boolean)
  - System.Activator.CreateInstance(System.Type,System.Object[])
  - System.Activator.CreateInstance(System.AppDomain,System.String,System.String)
  - System.Activator.CreateInstance(System.String,System.String,System.Object[])
  - System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])
  - System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.Activator.CreateInstance``1
  - System.Activator.CreateInstanceFrom(System.String,System.String)
  - System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)
  - System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])
  - System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  - System.Activator.GetObject(System.Type,System.String)
  - System.Activator.GetObject(System.Type,System.String,System.Object)
  - System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)
  - System.Activator.System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: Activator
  nameWithType: Activator
  fullName: System.Activator
  type: Class
  summary: Contains methods to create types of objects locally or remotely, or obtain references to existing remote objects. This class cannot be inherited.
  remarks: "The [CreateInstance(Type, BindingFlags, Binder, Object\\[\\], CultureInfo)](assetId:///M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)?qualifyHint=False&autoUpgrade=True) method creates an instance of a type defined in an assembly by invoking the constructor that best matches the specified arguments. If no arguments are specified, the constructor that takes no parameters, that is, the default constructor, is invoked.  \n  \n You must have sufficient permission to search for and call a constructor; otherwise, an exception is thrown. By default, only public constructors are considered during the search for a constructor. If no constructor or default constructor can be found, an exception is thrown.  \n  \n A binder parameter specifies an object that searches an assembly for a suitable constructor. You can specify your own binder and search criteria. If no binder is specified, a default binder is used. For more information, see the <xref:System.Reflection.Binder?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> classes.  \n  \n An evidence parameter affects the security policy and permissions for the constructor. For more information, see the <xref:System.Security.Policy.Evidence?displayProperty=fullName> class.  \n  \n An instance of a type can be created at a local or remote site. If the type is created remotely, an activation attribute parameter specifies the URI of the remote site. The call to create the instance might pass through intermediary sites before it reaches the remote site. Other activation attributes can modify the environment, or context, in which the call operates at the remote and intermediary sites.  \n  \n If the instance is created locally, a reference to that object is returned. If the instance is created remotely, a reference to a proxy is returned. The remote object is manipulated through the proxy as if it were a local object.  \n  \n The <xref:System.Activator.GetObject%2A> method creates a proxy to a currently running remote object, server-activated well-known object, or XML Web service. You can specify the connection medium, that is, the channel. For more information, see the <xref:System.Runtime.Remoting.Channels.ChannelServices?displayProperty=fullName> class.  \n  \n Assemblies contain type definitions. The <xref:System.Activator.CreateInstance%2A> method creates an instance of a type from a currently running assembly. The <xref:System.Activator.CreateInstanceFrom%2A> method creates an instance from a file that contains an assembly. The <xref:System.Activator.CreateComInstanceFrom%2A> method creates an instance of a COM object from a file that contains an assembly."
  example:
  - "The following example shows how to use the Activator class to dynamically construct objects at run time.  \n  \n [!CODE [ActivatorX#1](../CodeSnippet/VS_Snippets_CLR/ActivatorX#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Activator))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class Activator : System.Runtime.InteropServices._Activator
  inheritance:
  - System.Object
  implements:
  - System.Runtime.InteropServices._Activator
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateComInstanceFrom(System.String,System.String)
  id: CreateComInstanceFrom(System.String,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: CreateComInstanceFrom(String,String)
  nameWithType: Activator.CreateComInstanceFrom(String,String)
  fullName: System.Activator.CreateComInstanceFrom(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the COM object whose name is specified, using the named assembly file and the default constructor.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName> attribute with a value of `true` must be applied either explicitly or by default to the COM type so the CreateComInstanceFrom method can create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of a file that contains an assembly where the type named  is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateComInstanceFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  id: CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.Activator
  langs:
  - csharp
  name: CreateComInstanceFrom(String,String,Byte[],AssemblyHashAlgorithm)
  nameWithType: Activator.CreateComInstanceFrom(String,String,Byte[],AssemblyHashAlgorithm)
  fullName: System.Activator.CreateComInstanceFrom(String,String,Byte[],AssemblyHashAlgorithm)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the COM object whose name is specified, using the named assembly file and the default constructor.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName> attribute with a value of `true` must be applied either explicitly or by default to the COM type so the <xref:System.Activator.CreateComInstanceFrom%2A> method can create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of a file that contains an assembly where the type named  is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: hashValue
      type: System.Byte[]
      description: The value of the computed hash code.
    - id: hashAlgorithm
      type: System.Configuration.Assemblies.AssemblyHashAlgorithm
      description: The hash algorithm used for hashing files and generating the strong name.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateComInstanceFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.ActivationContext)
  id: CreateInstance(System.ActivationContext)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(ActivationContext)
  nameWithType: Activator.CreateInstance(ActivationContext)
  fullName: System.Activator.CreateInstance(ActivationContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type designated by the specified <see cref="T:System.ActivationContext"> object.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n The activation context is used during manifest-based activation to set up the domain policy and to provide an application-based security model. The <xref:System.ActivationContext> class contains an <xref:System.ApplicationIdentity> object that provides access to the application manifest. For more information, see the <xref:System.Security.Policy.ApplicationSecurityManager> class."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: An activation context object that specifies the object to create.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created object.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.Type)
  id: CreateInstance(System.Type)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type)
  nameWithType: Activator.CreateInstance(Type)
  fullName: System.Activator.CreateInstance(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the specified type using that type's default constructor.
  remarks: "The constructor to be invoked must be accessible.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following code example demonstrates how to call the CreateInstance method. Instances of several different types are created and their default values are displayed.  \n  \n [!CODE [ActivatorX#4](../CodeSnippet/VS_Snippets_CLR/ActivatorX#4)]"
  syntax:
    content: public static object CreateInstance (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.ActivationContext,System.String[])
  id: CreateInstance(System.ActivationContext,System.String[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(ActivationContext,String[])
  nameWithType: Activator.CreateInstance(ActivationContext,String[])
  fullName: System.Activator.CreateInstance(ActivationContext,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type that is designated by the specified <see cref="T:System.ActivationContext"> object and activated with the specified custom activation data.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n The activation context is used during manifest-based activation to set up the domain policy and to provide an application-based security model. The <xref:System.ActivationContext> class contains an <xref:System.ApplicationIdentity> object that provides access to the application manifest. For more information, see the <xref:System.Security.Policy.ApplicationSecurityManager> class."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: An activation context object that specifies the object to create.
    - id: activationCustomData
      type: System.String[]
      description: An array of Unicode strings that contain custom activation data.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created object.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.String,System.String)
  id: CreateInstance(System.String,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(String,String)
  nameWithType: Activator.CreateInstance(String,String)
  fullName: System.Activator.CreateInstance(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly and default constructor.
  remarks: "Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n can be either of the following:  \n  \n-   The simple name of an assembly, without its path or file extension. For example, you would specify `TypeExtensions` for an assembly whose path and name are .\\bin\\TypeExtensions.dll.  \n  \n-   The full name of a signed assembly, which consists of its simple name, version, culture, and public key token; for example, \"TypeExtensions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=181869f2f7435b51\".  \n  \n For more information on how the common language runtime identifies and loads assemblies, see [How the Runtime Locates Assemblies](../Topic/How%20the%20Runtime%20Locates%20Assemblies.md). For information on using the application configuration file to define assembly locations, see [Specifying an Assembly's Location](../Topic/Specifying%20an%20Assembly's%20Location.md). If  is found, it is loaded in the default context.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example defines a class named `Person` in an assembly named `PersonInfo`. Note that the `Person` class has two constructors, one of which is parameterless.  \n  \n [!CODE [System.Activator.CreateInstance#1](../CodeSnippet/VS_Snippets_CLR_System/system.activator.createinstance#1)]  \n  \n The following example calls the CreateInstance method to instantiate the `Person` class. It requires a reference to PersonInfo.dll to be added to the project. Because the CreateInstance method calls the `Person` class default constructor,  the example assigns a value to its `Name` property.  \n  \n [!CODE [System.Activator.CreateInstance#2](../CodeSnippet/VS_Snippets_CLR_System/system.activator.createinstance#2)]  \n  \n However, CreateInstance is frequently called to instantiate a type that crosses machine boundaries or that is not known at design time. In this case, you cannot include a reference to the assembly in the project and cannot make early-bound calls to the type's members. To work around this limitation, the following example uses the CreateInstance method along with reflection to assign a value to the `Person` object's `Name` property and to display its value.  \n  \n [!CODE [System.Activator.CreateInstance#3](../CodeSnippet/VS_Snippets_CLR_System/system.activator.createinstance#3)]"
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named  is sought. For more information, see the Remarks section. If  is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.Type,System.Boolean)
  id: CreateInstance(System.Type,System.Boolean)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type,Boolean)
  nameWithType: Activator.CreateInstance(Type,Boolean)
  fullName: System.Activator.CreateInstance(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the specified type using that type's default constructor.
  remarks: "> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static object CreateInstance (Type type, bool nonPublic);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    - id: nonPublic
      type: System.Boolean
      description: '`true` if a public or nonpublic default constructor can match; `false` if only a public default constructor can match.'
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.Type,System.Object[])
  id: CreateInstance(System.Type,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type,Object[])
  nameWithType: Activator.CreateInstance(Type,Object[])
  fullName: System.Activator.CreateInstance(Type,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the specified type using the constructor that best matches the specified parameters.
  remarks: "The constructor to be invoked must be accessible and must provide the most specific match with the specified argument list.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example calls the  CreateInstance method to create a <xref:System.String> object. It calls the [String.String(Char\\[\\], Int32, Int32)](assetId:///M:System.String.#ctor(System.Char[],System.Int32,System.Int32)?qualifyHint=True&autoUpgrade=False) constructor to instantiate a string that contains ten elements from a character array starting at the fourteenth position.  \n  \n [!CODE [System.Activator.CreateInstance#5](../CodeSnippet/VS_Snippets_CLR_System/system.activator.createinstance#5)]  \n  \n The following example creates a jagged array whose elements are arguments to be passed to a <xref:System.String> constructor. The example then passes each array to the CreateInstance method to invoke the appropriate string constructor.  \n  \n [!CODE [System.Activator.CreateInstance#4](../CodeSnippet/VS_Snippets_CLR_System/system.activator.createinstance#4)]"
  syntax:
    content: public static object CreateInstance (Type type, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String)
  id: CreateInstance(System.AppDomain,System.String,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(AppDomain,String,String)
  nameWithType: Activator.CreateInstance(AppDomain,String,String)
  fullName: System.Activator.CreateInstance(AppDomain,String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and default constructor.
  remarks: "Use CreateInstance when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to require the immediate caller to have full trust."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The remote domain where the type named  is created.
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named  is sought. If  is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.String,System.String,System.Object[])
  id: CreateInstance(System.String,System.String,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(String,String,Object[])
  nameWithType: Activator.CreateInstance(String,String,Object[])
  fullName: System.Activator.CreateInstance(String,String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly and default constructor.
  remarks: "Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named  is sought. If  is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])
  id: CreateInstance(System.Type,System.Object[],System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type,Object[],Object[])
  nameWithType: Activator.CreateInstance(Type,Object[],Object[])
  fullName: System.Activator.CreateInstance(Type,Object[],Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the specified type using the constructor that best matches the specified parameters.
  remarks: "The constructor to be invoked must be accessible and must provide the most specific match with the specified argument list.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static object CreateInstance (Type type, object[] args, object[] activationAttributes);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  id: CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo)
  nameWithType: Activator.CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo)
  fullName: System.Activator.CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the specified type using the constructor that best matches the specified parameters.
  remarks: "The constructor to be invoked must provide the most specific match with the specified argument list under the constraints of the specified binder and binding attributes.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the  constructor. If  is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses  and  to seek and identify the  constructor. If  is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of  to the formal types declared for the  constructor. If  is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo,Object[])
  nameWithType: Activator.CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo,Object[])
  fullName: System.Activator.CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the specified type using the constructor that best matches the specified parameters.
  remarks: "The constructor to be invoked must provide the most specific match with the specified argument list under the constraints of the specified binder and binding attributes.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: type
      type: System.Type
      description: The type of object to create.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the  constructor. If  is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses  and  to seek and identify the  constructor. If  is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of  to the formal types declared for the  constructor. If  is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Object
      description: A reference to the newly created object.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  nameWithType: Activator.CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  fullName: System.Activator.CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.
  remarks: "Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md)42d9dc2a-8fcc-4ff3-b002-4ff260ef3dc5.)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named  is sought. If  is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for  is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the  constructor. If  is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses  and  to seek and identify the  constructor. If  is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of  to the formal types declared for the  constructor. If  is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  nameWithType: Activator.CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  fullName: System.Activator.CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and the constructor that best matches the specified parameters.
  remarks: "Use <xref:System.Activator.CreateInstance%2A> when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to require the immediate caller to have full trust."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The domain where the type named  is created.
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named  is sought. If  is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for  is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the  constructor. If  is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses  and  to seek and identify the  constructor. If  is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of  to the formal types declared for the  constructor. If  is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  nameWithType: Activator.CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  fullName: System.Activator.CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly and the constructor that best matches the specified parameters.
  remarks: "Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to create nonpublic types and members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named  is sought. If  is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for  is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the  constructor. If  is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses  and  to seek and identify the  constructor. If  is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of  to the formal types declared for the  constructor. If  is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    - id: securityInfo
      type: System.Security.Policy.Evidence
      description: Information used to make security policy decisions and grant code permissions.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  nameWithType: Activator.CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  fullName: System.Activator.CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly and the constructor that best matches the specified parameters.
  remarks: "Use CreateInstance when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> to unwrap the return value.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to require the immediate caller to have full trust."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The domain where the type named  is created.
    - id: assemblyName
      type: System.String
      description: The name of the assembly where the type named  is sought. If  is `null`, the executing assembly is searched.
    - id: typeName
      type: System.String
      description: The fully qualified name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for  is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the  constructor. If  is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses  and  to seek and identify the  constructor. If  is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of  to the formal types declared for the  constructor. If  is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute"> object. The <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute"> specifies the URL that is required to activate a remote object.
    - id: securityAttributes
      type: System.Security.Policy.Evidence
      description: Information used to make security policy decisions and grant code permissions.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstance*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstance``1
  id: CreateInstance``1
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstance()
  nameWithType: Activator.CreateInstance()
  fullName: System.Activator.CreateInstance()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static T CreateInstance<T> ();
    parameters: []
    return:
      type: T
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstanceFrom(System.String,System.String)
  id: CreateInstanceFrom(System.String,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(String,String)
  nameWithType: Activator.CreateInstanceFrom(String,String)
  fullName: System.Activator.CreateInstanceFrom(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly file and default constructor.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  example:
  - "The following code example demonstrates how to call the CreateInstanceFrom method. This code example is part of a larger example provided for the <xref:System.Activator> class.  \n  \n [!CODE [ActivatorX#3](../CodeSnippet/VS_Snippets_CLR/ActivatorX#3)]"
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named  is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)
  id: CreateInstanceFrom(System.AppDomain,System.String,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(AppDomain,String,String)
  nameWithType: Activator.CreateInstanceFrom(AppDomain,String,String)
  fullName: System.Activator.CreateInstanceFrom(AppDomain,String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and default constructor.
  remarks: "Use CreateInstanceFrom when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to require the immediate caller to have full trust.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The remote domain where the type named  is created.
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named  is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])
  id: CreateInstanceFrom(System.String,System.String,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(String,String,Object[])
  nameWithType: Activator.CreateInstanceFrom(String,String,Object[])
  fullName: System.Activator.CreateInstanceFrom(String,String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly file and default constructor.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named  is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  nameWithType: Activator.CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  fullName: System.Activator.CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named  is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for  is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the  constructor. If  is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses  and  to seek and identify the  constructor. If  is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of  to the formal types declared for the  constructor. If  is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  nameWithType: Activator.CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  fullName: System.Activator.CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and the constructor that best matches the specified parameters.
  remarks: "Use <xref:System.Activator.CreateInstanceFrom%2A> when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions sections of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The remote domain where the type named  is created.
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named  is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for  is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the  constructor. If  is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses  and  to seek and identify the  constructor. If  is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of  to the formal types declared for the  constructor. If  is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  nameWithType: Activator.CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  fullName: System.Activator.CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified, using the named assembly file and the constructor that best matches the specified parameters.
  remarks: "Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named  is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for  is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the  constructor. If  is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses  and  to seek and identify the  constructor. If  is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of  to the formal types declared for the  constructor. If  is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    - id: securityInfo
      type: System.Security.Policy.Evidence
      description: Information used to make security policy decisions and grant code permissions.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  id: CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  langs:
  - csharp
  name: CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  nameWithType: Activator.CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  fullName: System.Activator.CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates an instance of the type whose name is specified in the specified remote domain, using the named assembly file and the constructor that best matches the specified parameters.
  remarks: "Use CreateInstanceFrom when a host needs to execute code in an application domain that has restricted security permissions.  \n  \n Use the <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=fullName> method to unwrap the return value.  \n  \n> [!NOTE]\n>  This method uses <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> to require the immediate caller to have full trust.  \n  \n For information about other exceptions that can be thrown by invoked methods, see the Exceptions section of the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> and <xref:System.Activator.CreateInstance%2A> methods."
  syntax:
    content: public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);
    parameters:
    - id: domain
      type: System.AppDomain
      description: The remote domain where the type named  is created.
    - id: assemblyFile
      type: System.String
      description: The name of a file that contains an assembly where the type named  is sought.
    - id: typeName
      type: System.String
      description: The name of the preferred type.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that the search for  is not case-sensitive; `false` to specify that the search is case-sensitive.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A combination of zero or more bit flags that affect the search for the  constructor. If  is zero, a case-sensitive search for public constructors is conducted.
    - id: binder
      type: System.Reflection.Binder
      description: An object that uses  and  to seek and identify the  constructor. If  is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array of arguments that match in number, order, and type the parameters of the constructor to invoke. If  is an empty array or `null`, the constructor that takes no parameters (the default constructor) is invoked.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Culture-specific information that governs the coercion of  to the formal types declared for the  constructor. If  is `null`, the <see cref="T:System.Globalization.CultureInfo"> for the current thread is used.
    - id: activationAttributes
      type: System.Object[]
      description: "An array of one or more attributes that can participate in activation. This is typically an array that contains a single <see cref=\"T:System.Runtime.Remoting.Activation.UrlAttribute\"> object that specifies the URL that is required to activate a remote object.  \n  \n This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation."
    - id: securityAttributes
      type: System.Security.Policy.Evidence
      description: Information used to make security policy decisions and grant code permissions.
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: A handle that must be unwrapped to access the newly created instance.
  overload: System.Activator.CreateInstanceFrom*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.GetObject(System.Type,System.String)
  id: GetObject(System.Type,System.String)
  parent: System.Activator
  langs:
  - csharp
  name: GetObject(Type,String)
  nameWithType: Activator.GetObject(Type,String)
  fullName: System.Activator.GetObject(Type,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a proxy for the well-known object indicated by the specified type and URL.
  remarks: Call the proxy to send messages to the remote object. No messages are sent over the network until a method is called on the proxy.
  syntax:
    content: public static object GetObject (Type type, string url);
    parameters:
    - id: type
      type: System.Type
      description: The type of the well-known object to which you want to connect.
    - id: url
      type: System.String
      description: The URL of the well-known object.
    return:
      type: System.Object
      description: A proxy that points to an endpoint served by the requested well-known object.
  overload: System.Activator.GetObject*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.GetObject(System.Type,System.String,System.Object)
  id: GetObject(System.Type,System.String,System.Object)
  parent: System.Activator
  langs:
  - csharp
  name: GetObject(Type,String,Object)
  nameWithType: Activator.GetObject(Type,String,Object)
  fullName: System.Activator.GetObject(Type,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a proxy for the well-known object indicated by the specified type, URL, and channel data.
  remarks: "Call the proxy to send messages to the remote object. No messages are sent over the network until a method is called on the proxy.  \n  \n The  parameter communicates information to the channel, and is passed to the <xref:System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink%2A?displayProperty=fullName> method."
  syntax:
    content: public static object GetObject (Type type, string url, object state);
    parameters:
    - id: type
      type: System.Type
      description: The type of the well-known object to which you want to connect.
    - id: url
      type: System.String
      description: The URL of the well-known object.
    - id: state
      type: System.Object
      description: Channel-specific data or `null`.
    return:
      type: System.Object
      description: A proxy that points to an endpoint served by the requested well-known object.
  overload: System.Activator.GetObject*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Activator
  langs:
  - csharp
  name: System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: Activator.System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Activator.System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is used to access managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _Activator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: The passed-in array of names to map.
    - id: cNames
      type: System.UInt32
      description: The count of the names to map.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: The caller-allocated array that receives the IDs corresponding to the names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Activator
  langs:
  - csharp
  name: System.Runtime.InteropServices._Activator.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: Activator.System.Runtime.InteropServices._Activator.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Activator.System.Runtime.InteropServices._Activator.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is used to access managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _Activator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: An object that receives a pointer to the requested type information object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Activator
  langs:
  - csharp
  name: System.Runtime.InteropServices._Activator.GetTypeInfoCount(UInt32)
  nameWithType: Activator.System.Runtime.InteropServices._Activator.GetTypeInfoCount(UInt32)
  fullName: System.Activator.System.Runtime.InteropServices._Activator.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is used to access managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _Activator.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: When this method returns, contains a pointer to a location that receives the number of type information interfaces provided by the object. This parameter is passed uninitialized.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activator.System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Activator
  langs:
  - csharp
  name: System.Runtime.InteropServices._Activator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: Activator.System.Runtime.InteropServices._Activator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Activator.System.Runtime.InteropServices._Activator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is used to access managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _Activator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: A dispatch identifier that identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: A pointer to a structure that contains an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: A pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: A pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Activator.CreateComInstanceFrom(System.String,System.String)
  parent: System.Activator
  isExternal: false
  name: CreateComInstanceFrom(String,String)
  nameWithType: Activator.CreateComInstanceFrom(String,String)
  fullName: System.Activator.CreateComInstanceFrom(String,String)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activator.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.Activator
  isExternal: false
  name: CreateComInstanceFrom(String,String,Byte[],AssemblyHashAlgorithm)
  nameWithType: Activator.CreateComInstanceFrom(String,String,Byte[],AssemblyHashAlgorithm)
  fullName: System.Activator.CreateComInstanceFrom(String,String,Byte[],AssemblyHashAlgorithm)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Configuration.Assemblies.AssemblyHashAlgorithm
  parent: System.Configuration.Assemblies
  isExternal: false
  name: AssemblyHashAlgorithm
  nameWithType: AssemblyHashAlgorithm
  fullName: System.Configuration.Assemblies.AssemblyHashAlgorithm
- uid: System.Activator.CreateInstance(System.ActivationContext)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(ActivationContext)
  nameWithType: Activator.CreateInstance(ActivationContext)
  fullName: System.Activator.CreateInstance(ActivationContext)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.Activator.CreateInstance(System.Type)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type)
  nameWithType: Activator.CreateInstance(Type)
  fullName: System.Activator.CreateInstance(Type)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Activator.CreateInstance(System.ActivationContext,System.String[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(ActivationContext,String[])
  nameWithType: Activator.CreateInstance(ActivationContext,String[])
  fullName: System.Activator.CreateInstance(ActivationContext,String[])
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.Activator.CreateInstance(System.String,System.String)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(String,String)
  nameWithType: Activator.CreateInstance(String,String)
  fullName: System.Activator.CreateInstance(String,String)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activator.CreateInstance(System.Type,System.Boolean)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type,Boolean)
  nameWithType: Activator.CreateInstance(Type,Boolean)
  fullName: System.Activator.CreateInstance(Type,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Activator.CreateInstance(System.Type,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type,Object[])
  nameWithType: Activator.CreateInstance(Type,Object[])
  fullName: System.Activator.CreateInstance(Type,Object[])
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(AppDomain,String,String)
  nameWithType: Activator.CreateInstance(AppDomain,String,String)
  fullName: System.Activator.CreateInstance(AppDomain,String,String)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activator.CreateInstance(System.String,System.String,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(String,String,Object[])
  nameWithType: Activator.CreateInstance(String,String,Object[])
  fullName: System.Activator.CreateInstance(String,String,Object[])
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type,Object[],Object[])
  nameWithType: Activator.CreateInstance(Type,Object[],Object[])
  fullName: System.Activator.CreateInstance(Type,Object[],Object[])
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo)
  nameWithType: Activator.CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo)
  fullName: System.Activator.CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo,Object[])
  nameWithType: Activator.CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo,Object[])
  fullName: System.Activator.CreateInstance(Type,BindingFlags,Binder,Object[],CultureInfo,Object[])
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  nameWithType: Activator.CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  fullName: System.Activator.CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  nameWithType: Activator.CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  fullName: System.Activator.CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  nameWithType: Activator.CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  fullName: System.Activator.CreateInstance(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Activator.CreateInstance(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  isExternal: false
  name: CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  nameWithType: Activator.CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  fullName: System.Activator.CreateInstance(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Activator.CreateInstance``1
  parent: System.Activator
  isExternal: false
  name: CreateInstance()
  nameWithType: Activator.CreateInstance()
  fullName: System.Activator.CreateInstance()
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Activator.CreateInstanceFrom(System.String,System.String)
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(String,String)
  nameWithType: Activator.CreateInstanceFrom(String,String)
  fullName: System.Activator.CreateInstanceFrom(String,String)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String)
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(AppDomain,String,String)
  nameWithType: Activator.CreateInstanceFrom(AppDomain,String,String)
  fullName: System.Activator.CreateInstanceFrom(AppDomain,String,String)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(String,String,Object[])
  nameWithType: Activator.CreateInstanceFrom(String,String,Object[])
  fullName: System.Activator.CreateInstanceFrom(String,String,Object[])
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  nameWithType: Activator.CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  fullName: System.Activator.CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  nameWithType: Activator.CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
  fullName: System.Activator.CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[])
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  nameWithType: Activator.CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  fullName: System.Activator.CreateInstanceFrom(String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Activator.CreateInstanceFrom(System.AppDomain,System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)
  parent: System.Activator
  isExternal: false
  name: CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  nameWithType: Activator.CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
  fullName: System.Activator.CreateInstanceFrom(AppDomain,String,String,Boolean,BindingFlags,Binder,Object[],CultureInfo,Object[],Evidence)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Activator.GetObject(System.Type,System.String)
  parent: System.Activator
  isExternal: false
  name: GetObject(Type,String)
  nameWithType: Activator.GetObject(Type,String)
  fullName: System.Activator.GetObject(Type,String)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activator.GetObject(System.Type,System.String,System.Object)
  parent: System.Activator
  isExternal: false
  name: GetObject(Type,String,Object)
  nameWithType: Activator.GetObject(Type,String,Object)
  fullName: System.Activator.GetObject(Type,String,Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Activator
  isExternal: false
  name: System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: Activator.System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Activator.System.Runtime.InteropServices._Activator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Activator
  isExternal: false
  name: System.Runtime.InteropServices._Activator.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: Activator.System.Runtime.InteropServices._Activator.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Activator.System.Runtime.InteropServices._Activator.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Activator.System#Runtime#InteropServices#_Activator#GetTypeInfoCount(System.UInt32@)
  parent: System.Activator
  isExternal: false
  name: System.Runtime.InteropServices._Activator.GetTypeInfoCount(UInt32)
  nameWithType: Activator.System.Runtime.InteropServices._Activator.GetTypeInfoCount(UInt32)
  fullName: System.Activator.System.Runtime.InteropServices._Activator.GetTypeInfoCount(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Activator.System#Runtime#InteropServices#_Activator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Activator
  isExternal: false
  name: System.Runtime.InteropServices._Activator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: Activator.System.Runtime.InteropServices._Activator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Activator.System.Runtime.InteropServices._Activator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Activator.CreateComInstanceFrom*
  parent: System.Activator
  isExternal: false
  nameWithType: Activator.
- uid: System.Activator.CreateInstance*
  parent: System.Activator
  isExternal: false
  nameWithType: Activator.
- uid: System.Activator.CreateInstanceFrom*
  parent: System.Activator
  isExternal: false
  nameWithType: Activator.
- uid: System.Activator.GetObject*
  parent: System.Activator
  isExternal: false
  nameWithType: Activator.
