### YamlMime:ManagedReference
items:
- uid: System.ModuleHandle
  id: ModuleHandle
  children:
  - System.ModuleHandle.EmptyHandle
  - System.ModuleHandle.Equals(System.ModuleHandle)
  - System.ModuleHandle.Equals(System.Object)
  - System.ModuleHandle.GetHashCode
  - System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)
  - System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)
  - System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)
  - System.ModuleHandle.MDStreamVersion
  - System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)
  - System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)
  - System.ModuleHandle.ResolveFieldHandle(System.Int32)
  - System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  - System.ModuleHandle.ResolveMethodHandle(System.Int32)
  - System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  - System.ModuleHandle.ResolveTypeHandle(System.Int32)
  - System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  langs:
  - csharp
  name: ModuleHandle
  nameWithType: ModuleHandle
  fullName: System.ModuleHandle
  type: Struct
  summary: Represents a runtime handle for a module.
  remarks: The <xref:System.ModuleHandle.ResolveFieldHandle%2A>, <xref:System.ModuleHandle.ResolveMethodHandle%2A>, and <xref:System.ModuleHandle.ResolveTypeHandle%2A> methods provide efficient resolution of metadata tokens to runtime handles for fields, methods, and types in the current module.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public struct ModuleHandle
  inheritance:
  - System.Object
  - System.ValueType
  implements: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.EmptyHandle
  id: EmptyHandle
  parent: System.ModuleHandle
  langs:
  - csharp
  name: EmptyHandle
  nameWithType: ModuleHandle.EmptyHandle
  fullName: System.ModuleHandle.EmptyHandle
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents an empty module handle.
  remarks: To be added.
  syntax:
    content: public static readonly ModuleHandle EmptyHandle;
    return:
      type: System.ModuleHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.Equals(System.ModuleHandle)
  id: Equals(System.ModuleHandle)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: Equals(ModuleHandle)
  nameWithType: ModuleHandle.Equals(ModuleHandle)
  fullName: System.ModuleHandle.Equals(ModuleHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a <see cref="T:System.Boolean"> value indicating whether the specified <xref:System.ModuleHandle> structure is equal to the current <xref:System.ModuleHandle>.
  remarks: To be added.
  syntax:
    content: public bool Equals (ModuleHandle handle);
    parameters:
    - id: handle
      type: System.ModuleHandle
      description: The <see cref="T:System.ModuleHandle"> structure to be compared with the current <see cref="T:System.ModuleHandle">.
    return:
      type: System.Boolean
      description: '`true` if  is equal to the current <see cref="T:System.ModuleHandle"> structure; otherwise `false`.'
  overload: System.ModuleHandle.Equals*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ModuleHandle.Equals(Object)
  fullName: System.ModuleHandle.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a <see cref="T:System.Boolean"> value indicating whether the specified object is a <xref:System.ModuleHandle> structure, and equal to the current <xref:System.ModuleHandle>.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to be compared with the current <see cref="T:System.ModuleHandle"> structure.
    return:
      type: System.Boolean
      description: '`true` if  is a <see cref="T:System.ModuleHandle"> structure, and is equal to the current <see cref="T:System.ModuleHandle"> structure; otherwise, `false`.'
  overload: System.ModuleHandle.Equals*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.GetHashCode
  id: GetHashCode
  parent: System.ModuleHandle
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ModuleHandle.GetHashCode()
  fullName: System.ModuleHandle.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for this instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)
  id: GetRuntimeFieldHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: GetRuntimeFieldHandleFromMetadataToken(Int32)
  nameWithType: ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime handle for the field identified by the specified metadata token.
  remarks: To be added.
  syntax:
    content: public RuntimeFieldHandle GetRuntimeFieldHandleFromMetadataToken (int fieldToken);
    parameters:
    - id: fieldToken
      type: System.Int32
      description: A metadata token that identifies a field in the module.
    return:
      type: System.RuntimeFieldHandle
      description: A <see cref="T:System.RuntimeFieldHandle"> for the field identified by .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)
  id: GetRuntimeMethodHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: GetRuntimeMethodHandleFromMetadataToken(Int32)
  nameWithType: ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime method handle for the method or constructor identified by the specified metadata token.
  remarks: To be added.
  syntax:
    content: public RuntimeMethodHandle GetRuntimeMethodHandleFromMetadataToken (int methodToken);
    parameters:
    - id: methodToken
      type: System.Int32
      description: A metadata token that identifies a method or constructor in the module.
    return:
      type: System.RuntimeMethodHandle
      description: A <see cref="T:System.RuntimeMethodHandle"> for the method or constructor identified by .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)
  id: GetRuntimeTypeHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: GetRuntimeTypeHandleFromMetadataToken(Int32)
  nameWithType: ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime type handle for the type identified by the specified metadata token.
  remarks: To be added.
  syntax:
    content: public RuntimeTypeHandle GetRuntimeTypeHandleFromMetadataToken (int typeToken);
    parameters:
    - id: typeToken
      type: System.Int32
      description: A metadata token that identifies a type in the module.
    return:
      type: System.RuntimeTypeHandle
      description: A <see cref="T:System.RuntimeTypeHandle"> for the type identified by .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.MDStreamVersion
  id: MDStreamVersion
  parent: System.ModuleHandle
  langs:
  - csharp
  name: MDStreamVersion
  nameWithType: ModuleHandle.MDStreamVersion
  fullName: System.ModuleHandle.MDStreamVersion
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the metadata stream version.
  remarks: >-
    > [!NOTE]

    >  For more information on the metadata header, see the Partition II: Metadata Definition and Semantics documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public int MDStreamVersion { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)
  id: op_Equality(System.ModuleHandle,System.ModuleHandle)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: op_Equality(ModuleHandle,ModuleHandle)
  nameWithType: ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)
  fullName: System.ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Tests whether two <see cref="T:System.ModuleHandle"> structures are equal.
  remarks: To be added.
  syntax:
    content: public static bool op_Equality (ModuleHandle left, ModuleHandle right);
    parameters:
    - id: left
      type: System.ModuleHandle
      description: The <see cref="T:System.ModuleHandle"> structure to the left of the equality operator.
    - id: right
      type: System.ModuleHandle
      description: The <see cref="T:System.ModuleHandle"> structure to the right of the equality operator.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.ModuleHandle"> structures are equal; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)
  id: op_Inequality(System.ModuleHandle,System.ModuleHandle)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: op_Inequality(ModuleHandle,ModuleHandle)
  nameWithType: ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)
  fullName: System.ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Tests whether two <see cref="T:System.ModuleHandle"> structures are unequal.
  remarks: To be added.
  syntax:
    content: public static bool op_Inequality (ModuleHandle left, ModuleHandle right);
    parameters:
    - id: left
      type: System.ModuleHandle
      description: The <see cref="T:System.ModuleHandle"> structure to the left of the inequality operator.
    - id: right
      type: System.ModuleHandle
      description: The <see cref="T:System.ModuleHandle"> structure to the right of the inequality operator.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.ModuleHandle"> structures are unequal; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32)
  id: ResolveFieldHandle(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: ResolveFieldHandle(Int32)
  nameWithType: ModuleHandle.ResolveFieldHandle(Int32)
  fullName: System.ModuleHandle.ResolveFieldHandle(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime handle for the field identified by the specified metadata token.
  remarks: "To resolve a metadata token that identifies a field whose parent `TypeSpec` has a signature containing element type `var` or `mvar`, use the [ResolveFieldHandle(Int32, RuntimeTypeHandle\\[\\], RuntimeTypeHandle\\[\\])](assetId:///M:System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])?qualifyHint=False&autoUpgrade=False) method overload, which allows you to supply the necessary context.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public RuntimeFieldHandle ResolveFieldHandle (int fieldToken);
    parameters:
    - id: fieldToken
      type: System.Int32
      description: A metadata token that identifies a field in the module.
    return:
      type: System.RuntimeFieldHandle
      description: A <see cref="T:System.RuntimeFieldHandle"> for the field identified by .
  overload: System.ModuleHandle.ResolveFieldHandle*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  id: ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  langs:
  - csharp
  name: ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  nameWithType: ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime field handle for the field identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.
  remarks: >-
    > [!NOTE]

    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public RuntimeFieldHandle ResolveFieldHandle (int fieldToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);
    parameters:
    - id: fieldToken
      type: System.Int32
      description: A metadata token that identifies a field in the module.
    - id: typeInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: An array of <see cref="T:System.RuntimeTypeHandle"> structures representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: methodInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: An array of <see cref="T:System.RuntimeTypeHandle"> structures representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.RuntimeFieldHandle
      description: A <see cref="T:System.RuntimeFieldHandle"> for the field identified by .
  overload: System.ModuleHandle.ResolveFieldHandle*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32)
  id: ResolveMethodHandle(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: ResolveMethodHandle(Int32)
  nameWithType: ModuleHandle.ResolveMethodHandle(Int32)
  fullName: System.ModuleHandle.ResolveMethodHandle(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime method handle for the method or constructor identified by the specified metadata token.
  remarks: "To resolve a metadata token for a `MethodSpec` whose signature contains element type `var` or `mvar`, use the [ResolveMethodHandle(Int32, RuntimeTypeHandle\\[\\], RuntimeTypeHandle\\[\\])](assetId:///M:System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])?qualifyHint=False&autoUpgrade=False) method overload, which allows you to supply the necessary context.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public RuntimeMethodHandle ResolveMethodHandle (int methodToken);
    parameters:
    - id: methodToken
      type: System.Int32
      description: A metadata token that identifies a method or constructor in the module.
    return:
      type: System.RuntimeMethodHandle
      description: A <see cref="T:System.RuntimeMethodHandle"> for the method or constructor identified by .
  overload: System.ModuleHandle.ResolveMethodHandle*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  id: ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  langs:
  - csharp
  name: ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  nameWithType: ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime method handle for the method or constructor identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.
  remarks: >-
    > [!NOTE]

    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public RuntimeMethodHandle ResolveMethodHandle (int methodToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);
    parameters:
    - id: methodToken
      type: System.Int32
      description: A metadata token that identifies a method or constructor in the module.
    - id: typeInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: An array of <see cref="T:System.RuntimeTypeHandle"> structures representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: methodInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: An array of <see cref="T:System.RuntimeTypeHandle"> structures representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.RuntimeMethodHandle
      description: A <see cref="T:System.RuntimeMethodHandle"> for the method or constructor identified by .
  overload: System.ModuleHandle.ResolveMethodHandle*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32)
  id: ResolveTypeHandle(System.Int32)
  parent: System.ModuleHandle
  langs:
  - csharp
  name: ResolveTypeHandle(Int32)
  nameWithType: ModuleHandle.ResolveTypeHandle(Int32)
  fullName: System.ModuleHandle.ResolveTypeHandle(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime type handle for the type identified by the specified metadata token.
  remarks: "To resolve a metadata token for a `TypeSpec` whose signature contains element type `var` or `mvar`, use the [ResolveTypeHandle(Int32, RuntimeTypeHandle\\[\\], RuntimeTypeHandle\\[\\])](assetId:///M:System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])?qualifyHint=False&autoUpgrade=False) method overload, which allows you to supply the necessary context.  \n  \n> [!NOTE]\n>  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public RuntimeTypeHandle ResolveTypeHandle (int typeToken);
    parameters:
    - id: typeToken
      type: System.Int32
      description: A metadata token that identifies a type in the module.
    return:
      type: System.RuntimeTypeHandle
      description: A <see cref="T:System.RuntimeTypeHandle"> for the type identified by .
  overload: System.ModuleHandle.ResolveTypeHandle*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  id: ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  langs:
  - csharp
  name: ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  nameWithType: ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a runtime type handle for the type identified by the specified metadata token, specifying the generic type arguments of the type and method where the token is in scope.
  remarks: >-
    > [!NOTE]

    >  Information about metadata tokens can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public RuntimeTypeHandle ResolveTypeHandle (int typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);
    parameters:
    - id: typeToken
      type: System.Int32
      description: A metadata token that identifies a type in the module.
    - id: typeInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: An array of <see cref="T:System.RuntimeTypeHandle"> structures representing the generic type arguments of the type where the token is in scope, or `null` if that type is not generic.
    - id: methodInstantiationContext
      type: System.RuntimeTypeHandle[]
      description: An array of <see cref="T:System.RuntimeTypeHandle"> structures objects representing the generic type arguments of the method where the token is in scope, or `null` if that method is not generic.
    return:
      type: System.RuntimeTypeHandle
      description: A <see cref="T:System.RuntimeTypeHandle"> for the type identified by .
  overload: System.ModuleHandle.ResolveTypeHandle*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.ModuleHandle.EmptyHandle
  parent: System.ModuleHandle
  isExternal: false
  name: EmptyHandle
  nameWithType: ModuleHandle.EmptyHandle
  fullName: System.ModuleHandle.EmptyHandle
- uid: System.ModuleHandle
  parent: System
  isExternal: false
  name: ModuleHandle
  nameWithType: ModuleHandle
  fullName: System.ModuleHandle
- uid: System.ModuleHandle.Equals(System.ModuleHandle)
  parent: System.ModuleHandle
  isExternal: false
  name: Equals(ModuleHandle)
  nameWithType: ModuleHandle.Equals(ModuleHandle)
  fullName: System.ModuleHandle.Equals(ModuleHandle)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ModuleHandle
  parent: System
  isExternal: false
  name: ModuleHandle
  nameWithType: ModuleHandle
  fullName: System.ModuleHandle
- uid: System.ModuleHandle.Equals(System.Object)
  parent: System.ModuleHandle
  isExternal: false
  name: Equals(Object)
  nameWithType: ModuleHandle.Equals(Object)
  fullName: System.ModuleHandle.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ModuleHandle.GetHashCode
  parent: System.ModuleHandle
  isExternal: false
  name: GetHashCode()
  nameWithType: ModuleHandle.GetHashCode()
  fullName: System.ModuleHandle.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: GetRuntimeFieldHandleFromMetadataToken(Int32)
  nameWithType: ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(Int32)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: GetRuntimeMethodHandleFromMetadataToken(Int32)
  nameWithType: ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(Int32)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: GetRuntimeTypeHandleFromMetadataToken(Int32)
  nameWithType: ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)
  fullName: System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(Int32)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ModuleHandle.MDStreamVersion
  parent: System.ModuleHandle
  isExternal: false
  name: MDStreamVersion
  nameWithType: ModuleHandle.MDStreamVersion
  fullName: System.ModuleHandle.MDStreamVersion
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)
  parent: System.ModuleHandle
  isExternal: false
  name: op_Equality(ModuleHandle,ModuleHandle)
  nameWithType: ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)
  fullName: System.ModuleHandle.op_Equality(ModuleHandle,ModuleHandle)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ModuleHandle
  parent: System
  isExternal: false
  name: ModuleHandle
  nameWithType: ModuleHandle
  fullName: System.ModuleHandle
- uid: System.ModuleHandle
  parent: System
  isExternal: false
  name: ModuleHandle
  nameWithType: ModuleHandle
  fullName: System.ModuleHandle
- uid: System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)
  parent: System.ModuleHandle
  isExternal: false
  name: op_Inequality(ModuleHandle,ModuleHandle)
  nameWithType: ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)
  fullName: System.ModuleHandle.op_Inequality(ModuleHandle,ModuleHandle)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ModuleHandle
  parent: System
  isExternal: false
  name: ModuleHandle
  nameWithType: ModuleHandle
  fullName: System.ModuleHandle
- uid: System.ModuleHandle
  parent: System
  isExternal: false
  name: ModuleHandle
  nameWithType: ModuleHandle
  fullName: System.ModuleHandle
- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: ResolveFieldHandle(Int32)
  nameWithType: ModuleHandle.ResolveFieldHandle(Int32)
  fullName: System.ModuleHandle.ResolveFieldHandle(Int32)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  isExternal: false
  name: ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  nameWithType: ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveFieldHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle[]
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle[]
- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: ResolveMethodHandle(Int32)
  nameWithType: ModuleHandle.ResolveMethodHandle(Int32)
  fullName: System.ModuleHandle.ResolveMethodHandle(Int32)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  isExternal: false
  name: ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  nameWithType: ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveMethodHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle[]
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle[]
- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32)
  parent: System.ModuleHandle
  isExternal: false
  name: ResolveTypeHandle(Int32)
  nameWithType: ModuleHandle.ResolveTypeHandle(Int32)
  fullName: System.ModuleHandle.ResolveTypeHandle(Int32)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])
  parent: System.ModuleHandle
  isExternal: false
  name: ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  nameWithType: ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
  fullName: System.ModuleHandle.ResolveTypeHandle(Int32,RuntimeTypeHandle[],RuntimeTypeHandle[])
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle[]
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle[]
- uid: System.ModuleHandle.Equals*
  parent: System.ModuleHandle
  isExternal: false
  nameWithType: ModuleHandle.
- uid: System.ModuleHandle.ResolveFieldHandle*
  parent: System.ModuleHandle
  isExternal: false
  nameWithType: ModuleHandle.
- uid: System.ModuleHandle.ResolveMethodHandle*
  parent: System.ModuleHandle
  isExternal: false
  nameWithType: ModuleHandle.
- uid: System.ModuleHandle.ResolveTypeHandle*
  parent: System.ModuleHandle
  isExternal: false
  nameWithType: ModuleHandle.
