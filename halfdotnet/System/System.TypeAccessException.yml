### YamlMime:ManagedReference
items:
- uid: System.TypeAccessException
  id: TypeAccessException
  children:
  - System.TypeAccessException.#ctor
  - System.TypeAccessException.#ctor(System.String)
  - System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.TypeAccessException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  name: TypeAccessException
  nameWithType: TypeAccessException
  fullName: System.TypeAccessException
  type: Class
  summary: The exception that is thrown when a method attempts to use a type that it does not have access to.
  remarks: "TypeAccessException is thrown when a method attempts to cast an object to a type that is not accessible from the method. For example, an anonymously hosted dynamic method cannot access a security-critical type because the method is [transparent](../Topic/Security-Transparent%20Code.md). If the method contains a <xref:System.Reflection.Emit.OpCodes.Castclass?displayProperty=fullName> instruction that casts an object to a security-critical type, or to a generic type that has a security-critical type as one of its type parameters, TypeAccessException is thrown by the JIT compiler.  \n  \n Similarly, TypeAccessException is thrown for a dynamic method that uses an internal type from another assembly. A method might not have access to its containing type, its return type, or one of its parameter types.  \n  \n Apps compiled by using the [!INCLUDE[net_native](../../add/includes/net-native-md.md)] tool chain may throw a  exception at runtime.  is an internal-only exception type derived from TypeAccessException. The exception indicates that metadata needed for the successful execution of an app is not present at runtime. You should not use a `try`/`catch` block to handle the exception. Instead, you should determine what metadata is missing and modify your app's  to ensure that it is present at runtime."
  syntax:
    content: 'public class TypeAccessException : TypeLoadException'
  inheritance:
  - System.Object
  - System.Exception
  - System.SystemException
  - System.TypeLoadException
  implements: []
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.GetBaseException
  - System.Exception.GetType
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.SerializeObjectState
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.TargetSite
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.TypeLoadException.Message
  - System.TypeLoadException.TypeName
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.TypeAccessException.#ctor
  id: '#ctor'
  parent: System.TypeAccessException
  langs:
  - csharp
  name: TypeAccessException()
  nameWithType: TypeAccessException.TypeAccessException()
  fullName: System.TypeAccessException.TypeAccessException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.TypeAccessException"> class with a system-supplied message that describes the error.
  remarks: "This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"Attempt to access the type failed.\" This message takes the current system culture into account.  \n  \n The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The localized error message string.|"
  syntax:
    content: public TypeAccessException ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.TypeAccessException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.TypeAccessException
  langs:
  - csharp
  name: TypeAccessException(String)
  nameWithType: TypeAccessException.TypeAccessException(String)
  fullName: System.TypeAccessException.TypeAccessException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.TypeAccessException"> class with a specified message that describes the error.
  remarks: "The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The error message string specified in .|"
  syntax:
    content: public TypeAccessException (string message);
    parameters:
    - id: message
      type: System.String
      description: The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.TypeAccessException
  langs:
  - csharp
  name: TypeAccessException(SerializationInfo,StreamingContext)
  nameWithType: TypeAccessException.TypeAccessException(SerializationInfo,StreamingContext)
  fullName: System.TypeAccessException.TypeAccessException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.TypeAccessException"> class with serialized data.
  remarks: This constructor is called during deserialization to reconstitute the exception object that was transmitted over a stream. For more information, see [XML and SOAP Serialization](../Topic/XML%20and%20SOAP%20Serialization.md).
  syntax:
    content: protected TypeAccessException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object that holds the serialized data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The contextual information about the source or destination.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.TypeAccessException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.TypeAccessException
  langs:
  - csharp
  name: TypeAccessException(String,Exception)
  nameWithType: TypeAccessException.TypeAccessException(String,Exception)
  fullName: System.TypeAccessException.TypeAccessException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <see cref="T:System.TypeAccessException"> class with a specified error message and a reference to the inner exception that is the cause of this exception.
  remarks: "An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.TypeAccessException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The error message string specified in .|"
  syntax:
    content: public TypeAccessException (string message, Exception inner);
    parameters:
    - id: message
      type: System.String
      description: The message that describes the exception. The caller of this constructor must ensure that this string has been localized for the current system culture.
    - id: inner
      type: System.Exception
      description: The exception that is the cause of the current exception. If the  parameter is not `null`, the current exception is raised in a `catch` block that handles the inner exception.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.TypeLoadException
  isExternal: false
  name: System.TypeLoadException
- uid: System.TypeAccessException.#ctor
  parent: System.TypeAccessException
  isExternal: false
  name: TypeAccessException()
  nameWithType: TypeAccessException.TypeAccessException()
  fullName: System.TypeAccessException.TypeAccessException()
- uid: System.TypeAccessException.#ctor(System.String)
  parent: System.TypeAccessException
  isExternal: false
  name: TypeAccessException(String)
  nameWithType: TypeAccessException.TypeAccessException(String)
  fullName: System.TypeAccessException.TypeAccessException(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.TypeAccessException
  isExternal: false
  name: TypeAccessException(SerializationInfo,StreamingContext)
  nameWithType: TypeAccessException.TypeAccessException(SerializationInfo,StreamingContext)
  fullName: System.TypeAccessException.TypeAccessException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.TypeAccessException.#ctor(System.String,System.Exception)
  parent: System.TypeAccessException
  isExternal: false
  name: TypeAccessException(String,Exception)
  nameWithType: TypeAccessException.TypeAccessException(String,Exception)
  fullName: System.TypeAccessException.TypeAccessException(String,Exception)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
