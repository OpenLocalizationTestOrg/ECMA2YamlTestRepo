### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.SecurityPermission
  id: SecurityPermission
  children:
  - System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)
  - System.Security.Permissions.SecurityPermission.Copy
  - System.Security.Permissions.SecurityPermission.Flags
  - System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.SecurityPermission.IsUnrestricted
  - System.Security.Permissions.SecurityPermission.ToXml
  - System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: SecurityPermission
  nameWithType: SecurityPermission
  fullName: System.Security.Permissions.SecurityPermission
  type: Class
  summary: Describes a set of security permissions applied to code. This class cannot be inherited.
  remarks: This permission uses the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration. The values for this enumeration can be found in its documentation.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SecurityPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: SecurityPermission(PermissionState)
  nameWithType: SecurityPermission.SecurityPermission(PermissionState)
  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityPermission"> class with either restricted or unrestricted permission as specified.
  remarks: Creates either fully restricted (`None`) or `Unrestricted` access to all security permissions.
  syntax:
    content: public SecurityPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: One of the <see cref="T:System.Security.Permissions.PermissionState"> values.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)
  id: '#ctor(System.Security.Permissions.SecurityPermissionFlag)'
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: SecurityPermission(SecurityPermissionFlag)
  nameWithType: SecurityPermission.SecurityPermission(SecurityPermissionFlag)
  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(SecurityPermissionFlag)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityPermission"> class with the specified initial set state of the flags.
  remarks: ''
  example:
  - "The following code example shows the use of the SecurityPermission constructor to create instances of the <xref:System.Security.Permissions.SecurityPermission> class that are used to demand security permissions.  For the complete code example, see the <xref:System.Security.Permissions.SecurityPermissionAttribute.%23ctor%28System.Security.Permissions.SecurityAction%29> constructor.  \n  \n [!CODE [System.Security.Permissions.SecurityPermissionAttribute#18](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.SecurityPermissionAttribute#18)]"
  syntax:
    content: public SecurityPermission (System.Security.Permissions.SecurityPermissionFlag flag);
    parameters:
    - id: flag
      type: System.Security.Permissions.SecurityPermissionFlag
      description: The initial state of the permission, represented by a bitwise OR combination of any permission bits defined by <see cref="T:System.Security.Permissions.SecurityPermissionFlag">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermission.Copy
  id: Copy
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: SecurityPermission.Copy()
  fullName: System.Security.Permissions.SecurityPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Creates and returns an identical copy of the current permission.
  remarks: A copy of a permission represents the same access to resources as the original permission.
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: A copy of the current permission.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermission.Flags
  id: Flags
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Flags
  nameWithType: SecurityPermission.Flags
  fullName: System.Security.Permissions.SecurityPermission.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets the security permission flags.
  remarks: Individual permission bits can be determined by performing an AND operation against this value and checking for nonzero.
  syntax:
    content: public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.SecurityPermissionFlag
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: SecurityPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.SecurityPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Reconstructs a permission with a specified state from an XML encoding.
  remarks: To be added.
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: The XML encoding to use to reconstruct the permission.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: SecurityPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.
  remarks: The intersection of two permissions is a permission that describes the state that they both describe in common. Only a demand that passes both original permissions will pass the intersection.
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: A permission to intersect with the current permission. It must be of the same type as the current permission.
    return:
      type: System.Security.IPermission
      description: A new permission object that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: SecurityPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Determines whether the current permission is a subset of the specified permission.
  remarks: The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\example.txt is a subset of a permission that represents access to C:\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.
    return:
      type: System.Boolean
      description: '`true` if the current permission is a subset of the specified permission; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: SecurityPermission.IsUnrestricted()
  fullName: System.Security.Permissions.SecurityPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Returns a value indicating whether the current permission is unrestricted.
  remarks: An unrestricted permission represents access to any and all resources protected by the permission.
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the current permission is unrestricted; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: SecurityPermission.ToXml()
  fullName: System.Security.Permissions.SecurityPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Creates an XML encoding of the permission and its current state.
  remarks: To be added.
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: An XML encoding of the permission, including any state information.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: SecurityPermission.Union(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Creates a permission that is the union of the current permission and the specified permission.
  remarks: The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: A permission to combine with the current permission. It must be of the same type as the current permission.
    return:
      type: System.Security.IPermission
      description: A new permission that represents the union of the current permission and the specified permission.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: SecurityPermission(PermissionState)
  nameWithType: SecurityPermission.SecurityPermission(PermissionState)
  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: SecurityPermission(SecurityPermissionFlag)
  nameWithType: SecurityPermission.SecurityPermission(SecurityPermissionFlag)
  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(SecurityPermissionFlag)
- uid: System.Security.Permissions.SecurityPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityPermissionFlag
  nameWithType: SecurityPermissionFlag
  fullName: System.Security.Permissions.SecurityPermissionFlag
- uid: System.Security.Permissions.SecurityPermission.Copy
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Copy()
  nameWithType: SecurityPermission.Copy()
  fullName: System.Security.Permissions.SecurityPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.SecurityPermission.Flags
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Flags
  nameWithType: SecurityPermission.Flags
  fullName: System.Security.Permissions.SecurityPermission.Flags
- uid: System.Security.Permissions.SecurityPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityPermissionFlag
  nameWithType: SecurityPermissionFlag
  fullName: System.Security.Permissions.SecurityPermissionFlag
- uid: System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: SecurityPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.SecurityPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: SecurityPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.Intersect(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: SecurityPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: SecurityPermission.IsUnrestricted()
  fullName: System.Security.Permissions.SecurityPermission.IsUnrestricted()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermission.ToXml
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: ToXml()
  nameWithType: SecurityPermission.ToXml()
  fullName: System.Security.Permissions.SecurityPermission.ToXml()
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: SecurityPermission.Union(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.Union(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
