### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.FileIOPermission
  id: FileIOPermission
  children:
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])
  - System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  - System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  - System.Security.Permissions.FileIOPermission.AllFiles
  - System.Security.Permissions.FileIOPermission.AllLocalFiles
  - System.Security.Permissions.FileIOPermission.Copy
  - System.Security.Permissions.FileIOPermission.Equals(System.Object)
  - System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.FileIOPermission.GetHashCode
  - System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  - System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.FileIOPermission.IsUnrestricted
  - System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  - System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  - System.Security.Permissions.FileIOPermission.ToXml
  - System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: FileIOPermission
  nameWithType: FileIOPermission
  fullName: System.Security.Permissions.FileIOPermission
  type: Class
  summary: Controls the ability to access files and folders. This class cannot be inherited.
  remarks: "This permission distinguishes between the following four types of file IO access provided by <xref:System.Security.Permissions.FileIOPermissionAccess>:  \n  \n-   `Read`: Read access to the contents of the file or access to information about the file, such as its length or last modification time.  \n  \n-   `Write`: Write access to the contents of the file or access to change information about the file, such as its name. Also allows for deletion and overwriting.  \n  \n-   `Append`: Ability to write to the end of a file only. No ability to read.  \n  \n-   `PathDiscovery`: Access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure that is revealed in the path. This value does not grant access to files or folders represented by the path.  \n  \n> [!NOTE]\n>  Giving <xref:System.Security.Permissions.FileIOPermissionAccess> access to an assembly is similar to granting it full trust. If an application should not write to the file system, it should not have <xref:System.Security.Permissions.FileIOPermissionAccess> access.  \n  \n All these permissions are independent, meaning that rights to one do not imply rights to another. For example, `Write` permission does not imply permission to `Read` or `Append`. If more than one permission is desired, they can be combined using a bitwise OR as shown in the code example that follows. File permission is defined in terms of canonical absolute paths; calls should always be made with canonical file paths.  \n  \n FileIOPermission describes protected operations on files and folders. The <xref:System.IO.File> class helps provide secure access to files and folders. The security access check is performed when the handle to the file is created. By doing the check at creation time, the performance impact of the security check is minimized. Opening a file happens once, while reading and writing can happen multiple times. Once the file is opened, no further checks are done. If the object is passed to an untrusted caller, it can be misused. For example, file handles should not be stored in public global statics where code with less permission can access them.  \n  \n <xref:System.Security.Permissions.FileIOPermissionAccess> specifies actions that can be performed on the file or folder. In addition, these actions can be combined using a bitwise OR to form complex instances.  \n  \n Access to a folder implies access to all the files it contains, as well as access to all the files and folders in its subfolders. For example, `Read` access to C:\\folder1\\ implies `Read` access to C:\\folder1\\file1.txt, C:\\folder1\\folder2\\\\, C:\\folder1\\folder2\\file2.txt, and so on.  \n  \n> [!NOTE]\n>  In versions of the .NET Framework before the [!INCLUDE[net_v40_long](../../add/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](../Topic/How%20to:%20Run%20Partially%20Trusted%20Code%20in%20a%20Sandbox.md)."
  example:
  - "The following examples illustrate code that uses FileIOPermission. After the following two lines of code, the object `f` represents permission to read all files on the client computer's local disks. The code example then demands the permission to determine whether the application has permission to read the files.  \n  \n [!CODE [Classic FileIOPermission Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic FileIOPermission Example#1)]  \n  \n After the following two lines of code, the object `f2` represents permissions to read C:\\test_r and read and write to C:\\example\\out.txt. `Read` and `Write` represent the file/folder permissions as previously described. After creating the permission, the code demands the permission to determine whether the application has the right to read and write to the file.  \n  \n [!CODE [Classic FileIOPermission Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic FileIOPermission Example#2)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class FileIOPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(PermissionState)
  nameWithType: FileIOPermission.FileIOPermission(PermissionState)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission"> class with fully restricted or unrestricted permission as specified.
  remarks: Creates either fully restricted (`None`) or `Unrestricted` access to files and directories.
  example:
  - "The following code example creates a new instance of the <xref:System.Security.Permissions.FileIOPermission> class with fully restricted read access.  \n  \n [!CODE [Classic FileIOPermission Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic FileIOPermission Example#1)]"
  syntax:
    content: public FileIOPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: One of the <see cref="T:System.Security.Permissions.PermissionState"> enumeration values.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission"> class with the specified access to the designated file or directory.
  remarks: This constructor allows only one of the <xref:System.Security.Permissions.FileIOPermissionAccess> values to be specified for the specified file or directory. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.
  example:
  - "The following code example shows the use of the FileIOPermission constructor to create a new instance of the <xref:System.Security.Permissions.FileIOPermission> class, which provides complete access to the C:\\test_r file.  \n  \n [!CODE [Classic FileIOPermission Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic FileIOPermission Example#2)]"
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"> enumeration values.
    - id: path
      type: System.String
      description: The absolute path of the file or directory.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission"> class with the specified access to the designated files and directories.
  remarks: This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"> enumeration values.
    - id: pathList
      type: System.String[]
      description: An array containing the absolute paths of the files and directories.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission"> class with the specified access to the designated file or directory and the specified access rights to file control information.
  remarks: "This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified file or directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.  \n  \n The  parameter specifies whether the access control list (ACL) for the file or directory specified by  can be changed, viewed, or cannot be accessed.  \n  \n> [!IMPORTANT]\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change or view an ACL is an important permission and should be granted with caution."
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"> enumeration values.
    - id: control
      type: System.Security.AccessControl.AccessControlActions
      description: A bitwise combination of the <see cref="T:System.Security.AccessControl.AccessControlActions"> enumeration values.
    - id: path
      type: System.String
      description: The absolute path of the file or directory.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Initializes a new instance of the <see cref="T:System.Security.Permissions.FileIOPermission"> class with the specified access to the designated files and directories and the specified access rights to file control information.
  remarks: "This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.  \n  \n The  parameter specifies whether the access control list (ACL) for the file or directory specified by  can be changed, viewed, or cannot be accessed.  \n  \n> [!IMPORTANT]\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change or view an ACL is an important permission and should be granted with caution."
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"> enumeration values.
    - id: control
      type: System.Security.AccessControl.AccessControlActions
      description: A bitwise combination of the <see cref="T:System.Security.AccessControl.AccessControlActions"> enumeration values.
    - id: pathList
      type: System.String[]
      description: An array containing the absolute paths of the files and directories.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  id: AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AddPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Adds access for the specified file or directory to the existing state of the permission.
  remarks: Use this method to modify file and directory access by adding to the state of the current permission.
  example:
  - "The following code example shows the use of the AddPathList method.  \n  \n [!CODE [Classic FileIOPermission Example#2](../CodeSnippet/VS_Snippets_CLR_Classic/classic FileIOPermission Example#2)]"
  syntax:
    content: public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"> values.
    - id: path
      type: System.String
      description: The absolute path of a file or directory.
  overload: System.Security.Permissions.FileIOPermission.AddPathList*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  id: AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AddPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Adds access for the specified files and directories to the existing state of the permission.
  remarks: Use this method to modify file and directory access by adding to the state of the current permission.
  syntax:
    content: public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"> values.
    - id: pathList
      type: System.String[]
      description: An array containing the absolute paths of the files and directories.
  overload: System.Security.Permissions.FileIOPermission.AddPathList*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.AllFiles
  id: AllFiles
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AllFiles
  nameWithType: FileIOPermission.AllFiles
  fullName: System.Security.Permissions.FileIOPermission.AllFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets the permitted access to all files.
  remarks: "This property gets or sets the permitted access to all files on the local computer and network drives.  \n  \n An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be checked for using a bitwise AND operation."
  example:
  - "The following code example shows the use of the AllFiles property.  \n  \n [!CODE [Classic FileIOPermission Example#3](../CodeSnippet/VS_Snippets_CLR_Classic/classic FileIOPermission Example#3)]"
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles
  id: AllLocalFiles
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AllLocalFiles
  nameWithType: FileIOPermission.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermission.AllLocalFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets the permitted access to all local files.
  remarks: "Local files are files contained on the local computer. Any files not accessed through a network drive are local files.  \n  \n An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be checked for using a bitwise AND operation."
  example:
  - "The following code example shows the use of the AllLocalFiles property.  \n  \n [!CODE [Classic FileIOPermission Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic FileIOPermission Example#1)]"
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.Copy
  id: Copy
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: FileIOPermission.Copy()
  fullName: System.Security.Permissions.FileIOPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Creates and returns an identical copy of the current permission.
  remarks: A copy of the permission represents the same access to resources as the original permission.
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: A copy of the current permission.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: FileIOPermission.Equals(Object)
  fullName: System.Security.Permissions.FileIOPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Determines whether the specified <see cref="T:System.Security.Permissions.FileIOPermission"> object is equal to the current <see cref="T:System.Security.Permissions.FileIOPermission">.
  remarks: For more information, see <xref:System.Object.Equals%2A>.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The <see cref="T:System.Security.Permissions.FileIOPermission"> object to compare with the current <see cref="T:System.Security.Permissions.FileIOPermission">.
    return:
      type: System.Boolean
      description: '`true` if the specified <see cref="T:System.Security.Permissions.FileIOPermission"> is equal to the current <see cref="T:System.Security.Permissions.FileIOPermission"> object; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: FileIOPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.FileIOPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Reconstructs a permission with a specified state from an XML encoding.
  remarks: To be added.
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: The XML encoding used to reconstruct the permission.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: FileIOPermission.GetHashCode()
  fullName: System.Security.Permissions.FileIOPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets a hash code for the <see cref="T:System.Security.Permissions.FileIOPermission"> object that is suitable for use in hashing algorithms and data structures such as a hash table.
  remarks: The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.Permissions.FileIOPermission> objects.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A hash code for the current <see cref="T:System.Security.Permissions.FileIOPermission"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  id: GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: GetPathList(FileIOPermissionAccess)
  nameWithType: FileIOPermission.GetPathList(FileIOPermissionAccess)
  fullName: System.Security.Permissions.FileIOPermission.GetPathList(FileIOPermissionAccess)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets all files and directories with the specified <see cref="T:System.Security.Permissions.FileIOPermissionAccess">.
  remarks: "Use this method to get the state of the current permission. To get the state of both `Read` and `Write` access, two calls to this method are required.  \n  \n> [!NOTE]\n>  The  parameter is limited to the values of <xref:System.Security.Permissions.FileIOPermissionAccess>, which represent single types of file access. Those values are <xref:System.Security.Permissions.FileIOPermissionAccess>, <xref:System.Security.Permissions.FileIOPermissionAccess>, <xref:System.Security.Permissions.FileIOPermissionAccess>, and <xref:System.Security.Permissions.FileIOPermissionAccess>. The values acceptable to  do not include <xref:System.Security.Permissions.FileIOPermissionAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess>, which do not represent single types of file access."
  example:
  - "The following code example shows the use of the GetPathList method. This example is part of a larger example provided for the <xref:System.Security.Permissions.FileIOPermission> class.  \n  \n [!CODE [System.Security.Permissions.FileIOPermission#7](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission#7)]"
  syntax:
    content: public string[] GetPathList (System.Security.Permissions.FileIOPermissionAccess access);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: One of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"> values that represents a single type of file access.
    return:
      type: System.String[]
      description: An array containing the paths of the files and directories to which access specified by the  parameter is granted.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: FileIOPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.
  remarks: The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: A permission to intersect with the current permission. It must be the same type as the current permission.
    return:
      type: System.Security.IPermission
      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: FileIOPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Determines whether the current permission is a subset of the specified permission.
  remarks: The current permission is a subset of the specified permission if the current permission specifies a set of operations that is contained by the specified permission. For example, a permission that represents read access to C:\example.txt is a subset of a permission that represents read access to C:\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: A permission that is to be tested for the subset relationship. This permission must be the same type as the current permission.
    return:
      type: System.Boolean
      description: '`true` if the current permission is a subset of the specified permission; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: FileIOPermission.IsUnrestricted()
  fullName: System.Security.Permissions.FileIOPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Returns a value indicating whether the current permission is unrestricted.
  remarks: An unrestricted permission represents access to all resources protected by the permission.
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the current permission is unrestricted; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  id: SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: SetPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Sets the specified access to the specified file or directory, replacing the existing state of the permission.
  remarks: "The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess>.  \n  \n [!CODE [System.Security.Permissions.FileIOPermission#12](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission#12)]  \n  \n This access will not be overwritten by the following code because the access types are not the same.  \n  \n [!CODE [System.Security.Permissions.FileIOPermission#13](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission#13)]"
  example:
  - "The following code example shows the use of the SetPathList method.  \n  \n [!CODE [System.Security.Permissions.FileIOPermission#7](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission#7)]"
  syntax:
    content: public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"> values.
    - id: path
      type: System.String
      description: The absolute path of the file or directory.
  overload: System.Security.Permissions.FileIOPermission.SetPathList*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  id: SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: SetPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Sets the specified access to the specified files and directories, replacing the current state for the specified access with the new set of paths.
  remarks: "The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess>.  \n  \n This access will not be overwritten by the following code because the access types are not the same.  \n  \n [!CODE [System.Security.Permissions.FileIOPermission#15](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission#15)]"
  syntax:
    content: public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: A bitwise combination of the <see cref="T:System.Security.Permissions.FileIOPermissionAccess"> values.
    - id: pathList
      type: System.String[]
      description: An array containing the absolute paths of the files and directories.
  overload: System.Security.Permissions.FileIOPermission.SetPathList*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: FileIOPermission.ToXml()
  fullName: System.Security.Permissions.FileIOPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Creates an XML encoding of the permission and its current state.
  remarks: To be added.
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: An XML encoding of the permission, including any state information.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: FileIOPermission.Union(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Creates a permission that is the union of the current permission and the specified permission.
  remarks: The result of a call to Union is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: A permission to combine with the current permission. It must be the same type as the current permission.
    return:
      type: System.Security.IPermission
      description: A new permission that represents the union of the current permission and the specified permission.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(PermissionState)
  nameWithType: FileIOPermission.FileIOPermission(PermissionState)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.Security.AccessControl.AccessControlActions
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlActions
  nameWithType: AccessControlActions
  fullName: System.Security.AccessControl.AccessControlActions
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.Security.AccessControl.AccessControlActions
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlActions
  nameWithType: AccessControlActions
  fullName: System.Security.AccessControl.AccessControlActions
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AddPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String)
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AddPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.Security.Permissions.FileIOPermission.AllFiles
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermission.AllFiles
  fullName: System.Security.Permissions.FileIOPermission.AllFiles
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermission.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermission.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.Security.Permissions.FileIOPermission.Copy
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Copy()
  nameWithType: FileIOPermission.Copy()
  fullName: System.Security.Permissions.FileIOPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.FileIOPermission.Equals(System.Object)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: FileIOPermission.Equals(Object)
  fullName: System.Security.Permissions.FileIOPermission.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: FileIOPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.FileIOPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.FileIOPermission.GetHashCode
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: FileIOPermission.GetHashCode()
  fullName: System.Security.Permissions.FileIOPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: GetPathList(FileIOPermissionAccess)
  nameWithType: FileIOPermission.GetPathList(FileIOPermissionAccess)
  fullName: System.Security.Permissions.FileIOPermission.GetPathList(FileIOPermissionAccess)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: FileIOPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Intersect(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: FileIOPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: FileIOPermission.IsUnrestricted()
  fullName: System.Security.Permissions.FileIOPermission.IsUnrestricted()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: SetPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String)
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: SetPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.Security.Permissions.FileIOPermission.ToXml
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: ToXml()
  nameWithType: FileIOPermission.ToXml()
  fullName: System.Security.Permissions.FileIOPermission.ToXml()
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: FileIOPermission.Union(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Union(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.FileIOPermission.AddPathList*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  nameWithType: FileIOPermission.
- uid: System.Security.Permissions.FileIOPermission.SetPathList*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  nameWithType: FileIOPermission.
