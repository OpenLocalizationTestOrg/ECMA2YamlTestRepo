### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.SecurityPermissionAttribute
  id: SecurityPermissionAttribute
  children:
  - System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.SecurityPermissionAttribute.Assertion
  - System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects
  - System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain
  - System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy
  - System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence
  - System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy
  - System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal
  - System.Security.Permissions.SecurityPermissionAttribute.ControlThread
  - System.Security.Permissions.SecurityPermissionAttribute.CreatePermission
  - System.Security.Permissions.SecurityPermissionAttribute.Execution
  - System.Security.Permissions.SecurityPermissionAttribute.Flags
  - System.Security.Permissions.SecurityPermissionAttribute.Infrastructure
  - System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration
  - System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter
  - System.Security.Permissions.SecurityPermissionAttribute.SkipVerification
  - System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode
  langs:
  - csharp
  name: SecurityPermissionAttribute
  nameWithType: SecurityPermissionAttribute
  fullName: System.Security.Permissions.SecurityPermissionAttribute
  type: Class
  summary: Allows security actions for <see cref="T:System.Security.Permissions.SecurityPermission"> to be applied to code using declarative security. This class cannot be inherited.
  remarks: "The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \n  \n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \n  \n When you use the SecurityPermissionAttribute class, follow the security action with the permission(s) that are being requested. Each security permission that can be requested, as defined in the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration, has a corresponding property in the SecurityPermissionAttribute class. For example, to demand the ability to access unmanaged code, follow the demand statement with the property setting that is being requested, as follows: `SecurityPermissionAttribute(SecurityAction.Demand, UnmanagedCode=true)`.  \n  \n> [!NOTE]\n>  An exception to the equivalence between the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration and the SecurityPermissionAttribute properties is that the <xref:System.Security.Permissions.SecurityPermissionFlag> enumeration value is represented by the <xref:System.Security.Permissions.SecurityAttribute.Unrestricted%2A> property (inherited from the <xref:System.Security.Permissions.SecurityAttribute> class). To demand all security permissions, specify `Unrestricted=true`."
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SecurityPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Object
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetHashCode
  - System.Attribute.IsDefaultAttribute
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.Match(System.Object)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Attribute.TypeId
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: SecurityPermissionAttribute(SecurityAction)
  nameWithType: SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Initializes a new instance of the <see cref="T:System.Security.Permissions.SecurityPermissionAttribute"> class with the specified <xref:System.Security.Permissions.SecurityAction>.
  remarks: To be added.
  syntax:
    content: public SecurityPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: One of the <see cref="T:System.Security.Permissions.SecurityAction"> values.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.Assertion
  id: Assertion
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: Assertion
  nameWithType: SecurityPermissionAttribute.Assertion
  fullName: System.Security.Permissions.SecurityPermissionAttribute.Assertion
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether permission to assert that all this code's callers have the requisite permission for the operation is declared.
  remarks: To be added.
  syntax:
    content: public bool Assertion { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects
  id: BindingRedirects
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: BindingRedirects
  nameWithType: SecurityPermissionAttribute.BindingRedirects
  fullName: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value that indicates whether code has permission to perform binding redirection in the application configuration file.
  remarks: This permission allows redirection of .NET Framework assemblies that have been unified, as well as other assemblies found outside the .NET Framework.
  syntax:
    content: public bool BindingRedirects { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain
  id: ControlAppDomain
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: ControlAppDomain
  nameWithType: SecurityPermissionAttribute.ControlAppDomain
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether permission to manipulate <see cref="T:System.AppDomain"> is declared.
  remarks: To be added.
  syntax:
    content: public bool ControlAppDomain { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy
  id: ControlDomainPolicy
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: ControlDomainPolicy
  nameWithType: SecurityPermissionAttribute.ControlDomainPolicy
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether permission to alter or manipulate domain security policy is declared.
  remarks: To be added.
  syntax:
    content: public bool ControlDomainPolicy { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence
  id: ControlEvidence
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: ControlEvidence
  nameWithType: SecurityPermissionAttribute.ControlEvidence
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether permission to alter or manipulate evidence is declared.
  remarks: To be added.
  syntax:
    content: public bool ControlEvidence { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy
  id: ControlPolicy
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: ControlPolicy
  nameWithType: SecurityPermissionAttribute.ControlPolicy
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether permission to view and manipulate security policy is declared.
  remarks: To be added.
  syntax:
    content: public bool ControlPolicy { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal
  id: ControlPrincipal
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: ControlPrincipal
  nameWithType: SecurityPermissionAttribute.ControlPrincipal
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether permission to manipulate the current principal is declared.
  remarks: To be added.
  syntax:
    content: public bool ControlPrincipal { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlThread
  id: ControlThread
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: ControlThread
  nameWithType: SecurityPermissionAttribute.ControlThread
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlThread
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether permission to manipulate threads is declared.
  remarks: For more information, see <xref:System.Threading.Thread>.
  syntax:
    content: public bool ControlThread { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: SecurityPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Creates and returns a new <see cref="T:System.Security.Permissions.SecurityPermission">.
  remarks: "This method should only be called by the security system, never by application code.  \n  \n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: A <see cref="T:System.Security.Permissions.SecurityPermission"> that corresponds to this attribute.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.Execution
  id: Execution
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: Execution
  nameWithType: SecurityPermissionAttribute.Execution
  fullName: System.Security.Permissions.SecurityPermissionAttribute.Execution
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether permission to execute code is declared.
  remarks: A demand for <xref:System.Security.Permissions.SecurityPermissionFlag> permission at the assembly level is ignored. If an assembly has the right to execute, <xref:System.Security.Permissions.SecurityPermissionFlag> permission is automatically granted, and setting the Execution property to either `true` or `false` has no effect.
  syntax:
    content: public bool Execution { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.Flags
  id: Flags
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: Flags
  nameWithType: SecurityPermissionAttribute.Flags
  fullName: System.Security.Permissions.SecurityPermissionAttribute.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets all permission flags comprising the <see cref="T:System.Security.Permissions.SecurityPermission"> permissions.
  remarks: To be added.
  syntax:
    content: public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.SecurityPermissionFlag
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure
  id: Infrastructure
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: Infrastructure
  nameWithType: SecurityPermissionAttribute.Infrastructure
  fullName: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether code can plug into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.
  remarks: To be added.
  syntax:
    content: public bool Infrastructure { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration
  id: RemotingConfiguration
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: RemotingConfiguration
  nameWithType: SecurityPermissionAttribute.RemotingConfiguration
  fullName: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether code can configure remoting types and channels.
  remarks: To be added.
  syntax:
    content: public bool RemotingConfiguration { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter
  id: SerializationFormatter
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: SerializationFormatter
  nameWithType: SecurityPermissionAttribute.SerializationFormatter
  fullName: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether code can use a serialization formatter to serialize or deserialize an object.
  remarks: To be added.
  syntax:
    content: public bool SerializationFormatter { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification
  id: SkipVerification
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: SkipVerification
  nameWithType: SecurityPermissionAttribute.SkipVerification
  fullName: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether permission to bypass code verification is declared.
  remarks: >-
    > [!CAUTION]

    >  This is a powerful permission that should be granted only to highly trusted code.
  syntax:
    content: public bool SkipVerification { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode
  id: UnmanagedCode
  parent: System.Security.Permissions.SecurityPermissionAttribute
  langs:
  - csharp
  name: UnmanagedCode
  nameWithType: SecurityPermissionAttribute.UnmanagedCode
  fullName: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: Gets or sets a value indicating whether permission to call unmanaged code is declared.
  remarks: To be added.
  syntax:
    content: public bool UnmanagedCode { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: SecurityPermissionAttribute(SecurityAction)
  nameWithType: SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.SecurityPermissionAttribute.SecurityPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.SecurityPermissionAttribute.Assertion
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: Assertion
  nameWithType: SecurityPermissionAttribute.Assertion
  fullName: System.Security.Permissions.SecurityPermissionAttribute.Assertion
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: BindingRedirects
  nameWithType: SecurityPermissionAttribute.BindingRedirects
  fullName: System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: ControlAppDomain
  nameWithType: SecurityPermissionAttribute.ControlAppDomain
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: ControlDomainPolicy
  nameWithType: SecurityPermissionAttribute.ControlDomainPolicy
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: ControlEvidence
  nameWithType: SecurityPermissionAttribute.ControlEvidence
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: ControlPolicy
  nameWithType: SecurityPermissionAttribute.ControlPolicy
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: ControlPrincipal
  nameWithType: SecurityPermissionAttribute.ControlPrincipal
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.ControlThread
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: ControlThread
  nameWithType: SecurityPermissionAttribute.ControlThread
  fullName: System.Security.Permissions.SecurityPermissionAttribute.ControlThread
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: SecurityPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.SecurityPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.SecurityPermissionAttribute.Execution
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: Execution
  nameWithType: SecurityPermissionAttribute.Execution
  fullName: System.Security.Permissions.SecurityPermissionAttribute.Execution
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.Flags
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: SecurityPermissionAttribute.Flags
  fullName: System.Security.Permissions.SecurityPermissionAttribute.Flags
- uid: System.Security.Permissions.SecurityPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityPermissionFlag
  nameWithType: SecurityPermissionFlag
  fullName: System.Security.Permissions.SecurityPermissionFlag
- uid: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: Infrastructure
  nameWithType: SecurityPermissionAttribute.Infrastructure
  fullName: System.Security.Permissions.SecurityPermissionAttribute.Infrastructure
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: RemotingConfiguration
  nameWithType: SecurityPermissionAttribute.RemotingConfiguration
  fullName: System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: SerializationFormatter
  nameWithType: SecurityPermissionAttribute.SerializationFormatter
  fullName: System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: SkipVerification
  nameWithType: SecurityPermissionAttribute.SkipVerification
  fullName: System.Security.Permissions.SecurityPermissionAttribute.SkipVerification
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode
  parent: System.Security.Permissions.SecurityPermissionAttribute
  isExternal: false
  name: UnmanagedCode
  nameWithType: SecurityPermissionAttribute.UnmanagedCode
  fullName: System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
