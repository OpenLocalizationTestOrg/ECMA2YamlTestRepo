### YamlMime:ManagedReference
items:
- uid: System.Data.Objects.ObjectContext
  id: ObjectContext
  children:
  - System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)
  - System.Data.Objects.ObjectContext.#ctor(System.String)
  - System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)
  - System.Data.Objects.ObjectContext.#ctor(System.String,System.String)
  - System.Data.Objects.ObjectContext.AcceptAllChanges
  - System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)
  - System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)
  - System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)
  - System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)
  - System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)
  - System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)
  - System.Data.Objects.ObjectContext.CommandTimeout
  - System.Data.Objects.ObjectContext.Connection
  - System.Data.Objects.ObjectContext.ContextOptions
  - System.Data.Objects.ObjectContext.CreateDatabase
  - System.Data.Objects.ObjectContext.CreateDatabaseScript
  - System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)
  - System.Data.Objects.ObjectContext.CreateObject``1
  - System.Data.Objects.ObjectContext.CreateObjectSet``1
  - System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)
  - System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})
  - System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])
  - System.Data.Objects.ObjectContext.DatabaseExists
  - System.Data.Objects.ObjectContext.DefaultContainerName
  - System.Data.Objects.ObjectContext.DeleteDatabase
  - System.Data.Objects.ObjectContext.DeleteObject(System.Object)
  - System.Data.Objects.ObjectContext.Detach(System.Object)
  - System.Data.Objects.ObjectContext.DetectChanges
  - System.Data.Objects.ObjectContext.Dispose
  - System.Data.Objects.ObjectContext.Dispose(System.Boolean)
  - System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])
  - System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])
  - System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])
  - System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])
  - System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])
  - System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])
  - System.Data.Objects.ObjectContext.GetKnownProxyTypes
  - System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)
  - System.Data.Objects.ObjectContext.GetObjectType(System.Type)
  - System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)
  - System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)
  - System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)
  - System.Data.Objects.ObjectContext.MetadataWorkspace
  - System.Data.Objects.ObjectContext.ObjectMaterialized
  - System.Data.Objects.ObjectContext.ObjectStateManager
  - System.Data.Objects.ObjectContext.QueryProvider
  - System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)
  - System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)
  - System.Data.Objects.ObjectContext.SaveChanges
  - System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)
  - System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)
  - System.Data.Objects.ObjectContext.SavingChanges
  - System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)
  - System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)
  - System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)
  langs:
  - csharp
  name: ObjectContext
  nameWithType: ObjectContext
  fullName: System.Data.Objects.ObjectContext
  type: Class
  summary: Provides facilities for querying and working with entity data as objects.
  remarks: "> [!NOTE]\n>  The ObjectContext class is not thread safe. The integrity of data objects in an ObjectContext cannot be ensured in multithreaded scenarios.  \n  \n The ObjectContext class is the primary class for interacting with data as objects that are instances of entity types that are defined in a conceptual model. An instance of the ObjectContext class encapsulates the following:  \n  \n-   A connection to the database, in the form of an <xref:System.Data.EntityClient.EntityConnection> object.  \n  \n-   Metadata that describes the model, in the form of a <xref:System.Data.Metadata.Edm.MetadataWorkspace> object.  \n  \n-   An <xref:System.Data.Objects.ObjectStateManager> object that manages objects persisted in the cache.  \n  \n When the object layer that represents a conceptual model is generated by the Entity Data Model tools, the class that represents the <xref:System.Data.Metadata.Edm.EntityContainer> for the model is derived from the ObjectContext."
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to construct an ObjectContext.  \n  \n [!CODE [DP ObjectServices Concepts#ObjectContext](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#objectcontext)]"
  syntax:
    content: 'public class ObjectContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)
  id: '#ctor(System.Data.EntityClient.EntityConnection)'
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ObjectContext(EntityConnection)
  nameWithType: ObjectContext.ObjectContext(EntityConnection)
  fullName: System.Data.Objects.ObjectContext.ObjectContext(EntityConnection)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext"> class with the given connection. During construction, the metadata workspace is extracted from the <xref:System.Data.EntityClient.EntityConnection> object.
  remarks: To be added.
  syntax:
    content: public ObjectContext (System.Data.EntityClient.EntityConnection connection);
    parameters:
    - id: connection
      type: System.Data.EntityClient.EntityConnection
      description: An <see cref="T:System.Data.EntityClient.EntityConnection"> that contains references to the model and to the data source connection.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ObjectContext(String)
  nameWithType: ObjectContext.ObjectContext(String)
  fullName: System.Data.Objects.ObjectContext.ObjectContext(String)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext"> class with the given connection string and default entity container name.
  remarks: "The  is a string that contains information that is required to access a conceptual model and to connect to a data source. The <xref:System.Data.EntityClient.EntityConnectionStringBuilder> class can be used to correctly format the string.  \n  \n The  generate a named connection string that is stored in the application's configuration file. This named connection string can be supplied instead of the  parameter when instantiating the <xref:System.Data.Objects.ObjectContext> class."
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows how to construct an <xref:System.Data.Objects.ObjectContext>.  \n  \n [!CODE [DP ObjectServices Concepts#ObjectContext](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#objectcontext)]"
  syntax:
    content: public ObjectContext (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string, which also provides access to the metadata information.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)
  id: '#ctor(System.Data.EntityClient.EntityConnection,System.String)'
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ObjectContext(EntityConnection,String)
  nameWithType: ObjectContext.ObjectContext(EntityConnection,String)
  fullName: System.Data.Objects.ObjectContext.ObjectContext(EntityConnection,String)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext"> class with a given connection and entity container name.
  remarks: To be added.
  syntax:
    content: protected ObjectContext (System.Data.EntityClient.EntityConnection connection, string defaultContainerName);
    parameters:
    - id: connection
      type: System.Data.EntityClient.EntityConnection
      description: An <see cref="T:System.Data.EntityClient.EntityConnection"> that contains references to the model and to the data source connection.
    - id: defaultContainerName
      type: System.String
      description: The name of the default entity container. When the  is set through this method, the property becomes read-only.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ObjectContext(String,String)
  nameWithType: ObjectContext.ObjectContext(String,String)
  fullName: System.Data.Objects.ObjectContext.ObjectContext(String,String)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext"> class with a given connection string and entity container name.
  remarks: The  is a string that contains information that is required to access a conceptual model and to connect to a data source. The <xref:System.Data.EntityClient.EntityConnectionStringBuilder> class can be used to correctly format the string.
  syntax:
    content: protected ObjectContext (string connectionString, string defaultContainerName);
    parameters:
    - id: connectionString
      type: System.String
      description: The connection string, which also provides access to the metadata information.
    - id: defaultContainerName
      type: System.String
      description: The name of the default entity container. When the  is set through this method, the property becomes read-only.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.AcceptAllChanges
  id: AcceptAllChanges
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: AcceptAllChanges()
  nameWithType: ObjectContext.AcceptAllChanges()
  fullName: System.Data.Objects.ObjectContext.AcceptAllChanges()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Accepts all changes made to objects in the object context.
  remarks: "Accepts the changes on all associated entries in the <xref:System.Data.Objects.ObjectStateManager> so their resultant state is either unchanged or detached.  \n  \n This method iterates all the <xref:System.Data.Objects.ObjectStateEntry> objects within the <xref:System.Data.Objects.ObjectStateManager> that are Added or Modified, and then sets the state of the entry to Unchanged. The Deleted items become detached.  \n  \n If the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method was called and the <xref:System.Data.Objects.SaveOptions> was not specified, the user must call the AcceptAllChanges method. The AcceptAllChanges method is useful in the scenario where a transaction has failed and a user wants to retry."
  syntax:
    content: public void AcceptAllChanges ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)
  id: AddObject(System.String,System.Object)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: AddObject(String,Object)
  nameWithType: ObjectContext.AddObject(String,Object)
  fullName: System.Data.Objects.ObjectContext.AddObject(String,Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Adds an object to the object context.
  remarks: "Call AddObject on the <xref:System.Data.Objects.ObjectContext> to add the object to the object context. Do this when the object is a new object that does not yet exist in the data source. For more information, see [Attaching and Detaching Objects](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  \n  \n Objects are added to the <xref:System.Data.Objects.ObjectStateManager> in the <xref:System.Data.EntityState>, <xref:System.Data.EntityState> or <xref:System.Data.EntityState> state.  \n  \n When you create a new object that is related to another object in the object context, add the object by using one of the following methods:  \n  \n-   Call the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> method on the <xref:System.Data.Objects.DataClasses.EntityCollection%601> and specify the related object. Do this for a one-to-many or many-to-many relationship.  \n  \n-   Set the <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> property of the <xref:System.Data.Objects.DataClasses.EntityReference%601> to the related object. Do this for a one-to-one or many-to-one relationship.  \n  \n For more information, see [Creating, Adding, Modifying, and Deleting Objects](http://msdn.microsoft.com/en-us/f76f1fad-c553-4b59-820b-89b3dec2fad1).  \n  \n If the object is in a detached state it must not have an <xref:System.Data.EntityKey>.  \n  \n The rules for the  format are as follows:  \n  \n-   If the <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> property is `null`, then the  has to be fully qualified as in *<Entity Container Name\\>*.*<Entity Set Name\\>*.  \n  \n-   If <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> is not `null`, then the  can be either *\\<Entity Container Name>*.*\\<Entity Set Name>* or *\\<Entity Set Name>*.  \n  \n If the  has an <xref:System.Data.EntityKey> and  has a value, then the <xref:System.Data.Metadata.Edm.EntitySet> of the entity key must match the <xref:System.Data.Metadata.Edm.EntitySet> that was found based on the  and entity container name."
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example adds a new product and saves the changes to the database.  \n  \n [!CODE [DP ObjectServices Concepts#AddObject](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#addobject)]"
  syntax:
    content: public void AddObject (string entitySetName, object entity);
    parameters:
    - id: entitySetName
      type: System.String
      description: Represents the entity set name, which may optionally be qualified by the entity container name.
    - id: entity
      type: System.Object
      description: The <see cref="T:System.Object"> to add.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)
  id: ApplyCurrentValues``1(System.String,``0)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ApplyCurrentValues(String,TEntity)
  nameWithType: ObjectContext.ApplyCurrentValues(String,TEntity)
  fullName: System.Data.Objects.ObjectContext.ApplyCurrentValues(String,TEntity)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public TEntity ApplyCurrentValues<TEntity> (string entitySetName, TEntity currentEntity) where TEntity : class;'
    parameters:
    - id: entitySetName
      type: System.String
      description: To be added.
    - id: currentEntity
      type: TEntity
      description: To be added.
    return:
      type: TEntity
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)
  id: ApplyOriginalValues``1(System.String,``0)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ApplyOriginalValues(String,TEntity)
  nameWithType: ObjectContext.ApplyOriginalValues(String,TEntity)
  fullName: System.Data.Objects.ObjectContext.ApplyOriginalValues(String,TEntity)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public TEntity ApplyOriginalValues<TEntity> (string entitySetName, TEntity originalEntity) where TEntity : class;'
    parameters:
    - id: entitySetName
      type: System.String
      description: To be added.
    - id: originalEntity
      type: TEntity
      description: To be added.
    return:
      type: TEntity
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)
  id: ApplyPropertyChanges(System.String,System.Object)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ApplyPropertyChanges(String,Object)
  nameWithType: ObjectContext.ApplyPropertyChanges(String,Object)
  fullName: System.Data.Objects.ObjectContext.ApplyPropertyChanges(String,Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Applies property changes from a detached object to an object already attached to the object context.
  remarks: "The <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> method is used to apply property changes from a modified, detached version of an object to the original version attached to the <xref:System.Data.Objects.ObjectContext>. This supports scenarios, such as Web services, where an entity object is detached and sent to a remote application where property updates are made. This method enables you to more easily apply these changes back to the original object.  \n  \n After <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A>, the object is in the <xref:System.Data.EntityState> state. You must call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method to update the data source.  \n  \n The original object must exist in the <xref:System.Data.Objects.ObjectStateManager> and must be in the <xref:System.Data.EntityState> or <xref:System.Data.EntityState> state. The original object is only modified if there are modified properties in the  object.  \n  \n The <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> property of the supplied object must be set to a valid <xref:System.Data.EntityKey>.  \n  \n <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> does not affect navigation properties or related objects.  \n  \n <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> only sets properties that exist in the entity metadata for the type. For example, properties that are added in a partial class are not included in the <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> operation."
  syntax:
    content: public void ApplyPropertyChanges (string entitySetName, object changed);
    parameters:
    - id: entitySetName
      type: System.String
      description: The name of the entity set to which the object belongs.
    - id: changed
      type: System.Object
      description: The detached object that has property updates to apply to the original object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)
  id: Attach(System.Data.Objects.DataClasses.IEntityWithKey)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: Attach(IEntityWithKey)
  nameWithType: ObjectContext.Attach(IEntityWithKey)
  fullName: System.Data.Objects.ObjectContext.Attach(IEntityWithKey)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Attaches an object or object graph to the object context when the object has an entity key.
  remarks: "Call Attach on the <xref:System.Data.Objects.ObjectContext> to attach the object to the object context. Do this when the object already exists in the data source but is currently not attached to the context. For more information, see [Customizing Objects](http://msdn.microsoft.com/en-us/af6f07ce-2261-4c65-87cf-d018ad082921).  \n  \n Attach is used to attach an object or the top-level object in an object graph.  \n  \n The object being attached must implement <xref:System.Data.Objects.DataClasses.IEntityWithKey> to expose an <xref:System.Data.EntityKey>. All generated entity classes implement <xref:System.Data.Objects.DataClasses.IEntityWithKey>.  \n  \n When you attach related objects, you must also call `Attach` on the <xref:System.Data.Objects.DataClasses.EntityReference%601> or the <xref:System.Data.Objects.DataClasses.EntityCollection%601> to define the relationship.  \n  \n This method calls the <xref:System.Data.Objects.ObjectContext.AttachTo%2A> method.  \n  \n The following considerations apply when attaching objects:  \n  \n-   If the object being attached has related objects, those objects will also be attached to the object context.  \n  \n-   Objects are added to the object context in an unchanged state.  \n  \n-   The object that is passed to the Attach method must have a valid <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> value. If the object does not have a valid <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> value, use the <xref:System.Data.Objects.ObjectContext.AttachTo%2A> method to specify the name of the entity set."
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). In this example, two objects are attached and then the relationship is defined.  \n  \n [!CODE [DP ObjectServices Concepts#AttachRelatedObjects](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#attachrelatedobjects)]"
  syntax:
    content: public void Attach (System.Data.Objects.DataClasses.IEntityWithKey entity);
    parameters:
    - id: entity
      type: System.Data.Objects.DataClasses.IEntityWithKey
      description: The object to attach.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)
  id: AttachTo(System.String,System.Object)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: AttachTo(String,Object)
  nameWithType: ObjectContext.AttachTo(String,Object)
  fullName: System.Data.Objects.ObjectContext.AttachTo(String,Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Attaches an object or object graph to the object context in a specific entity set.
  remarks: "Call AttachTo on the <xref:System.Data.Objects.ObjectContext> to attach the object to a specific entity set in the object context or if the object has a `null` (`Nothing` in Visual Basic) <xref:System.Data.EntityKey> value. For more information, see [Attaching and Detaching Objects](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  \n  \n The object being attached can be a single object or be part of the graph.  \n  \n The rules for the  format are as follows:  \n  \n-   If the <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> property is `null`, then the  has to be fully qualified as in *\\<Entity Container Name>*.*\\<Entity Set Name>*.  \n  \n-   If the <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> is not `null`, then the  can be either *\\<Entity Container Name>*.*\\<Entity Set Name>* or *\\<Entity Set Name>*.  \n  \n The object being attached is not required to have an <xref:System.Data.EntityKey> associated with it. If the object does not have an entity key, then  cannot be an empty string.  \n  \n If the object being attached has an <xref:System.Data.EntityKey> and  has a value, then the <xref:System.Data.Metadata.Edm.EntitySet> of the entity key must match the <xref:System.Data.Metadata.Edm.EntitySet> that was found based on the  and entity container name."
  syntax:
    content: public void AttachTo (string entitySetName, object entity);
    parameters:
    - id: entitySetName
      type: System.String
      description: Represents the entity set name, which may optionally be qualified by the entity container name.
    - id: entity
      type: System.Object
      description: The <see cref="T:System.Object"> to attach.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.CommandTimeout
  id: CommandTimeout
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: CommandTimeout
  nameWithType: ObjectContext.CommandTimeout
  fullName: System.Data.Objects.ObjectContext.CommandTimeout
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Gets or sets the timeout value, in seconds, for all object context operations. A `null` value indicates that the default value of the underlying provider will be used.
  remarks: "The default timeout for object queries and the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> operation is defined by the underlying connection provider. However, you can override this default timeout value by using the CommandTimeout property on the <xref:System.Data.Objects.ObjectContext>, as shown in the following example.  \n  \n [!CODE [DP ObjectServices Concepts#QueryTimeout](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#querytimeout)]  \n  \n Do this when you have a complex query or when other performance issues cause queries or calls to <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> to time out frequently."
  example:
  - '[Object Queries](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276)'
  syntax:
    content: public Nullable<int> CommandTimeout { get; set; }
    return:
      type: System.Nullable{System.Int32}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.Connection
  id: Connection
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: Connection
  nameWithType: ObjectContext.Connection
  fullName: System.Data.Objects.ObjectContext.Connection
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Gets the connection used by the object context.
  remarks: This property returns the connection object that was passed into the constructor or created during construction. The connection’s ownership is determined by the constructors used.
  example:
  - "This example creates an <xref:System.Data.EntityClient.EntityConnection> object that is passed into the constructor of a long-running <xref:System.Data.Objects.ObjectContext>. The connection is opened manually. Both the <xref:System.Data.EntityClient.EntityConnection> object and the <xref:System.Data.Objects.ObjectContext> object are disposed of manually.  \n  \n [!CODE [DP ObjectServices Concepts#OpenEntityConnection](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#openentityconnection)]"
  syntax:
    content: public System.Data.Common.DbConnection Connection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ContextOptions
  id: ContextOptions
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ContextOptions
  nameWithType: ObjectContext.ContextOptions
  fullName: System.Data.Objects.ObjectContext.ContextOptions
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Gets the <see cref="T:System.Data.Objects.ObjectContextOptions"> instance that contains options that affect the behavior of the <xref:System.Data.Objects.ObjectContext>.
  remarks: To be added.
  syntax:
    content: public System.Data.Objects.ObjectContextOptions ContextOptions { get; }
    return:
      type: System.Data.Objects.ObjectContextOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.CreateDatabase
  id: CreateDatabase
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: CreateDatabase()
  nameWithType: ObjectContext.CreateDatabase()
  fullName: System.Data.Objects.ObjectContext.CreateDatabase()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Creates the database by using the current data source connection and the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection">.
  remarks: "Call <xref:System.Data.Objects.ObjectContext.CreateDatabaseScript%2A> to view the data definition language (DDL) script. Call CreateDatabase to execute the script.  \n  \n Most of the work is delegated to the <xref:System.Data.Common.DbProviderServices.CreateDatabase%2A> method.  \n  \n For more information, see [Working with Data Definition Language](../Topic/Working%20with%20Data%20Definition%20Language.md)."
  syntax:
    content: public void CreateDatabase ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.CreateDatabaseScript
  id: CreateDatabaseScript
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: CreateDatabaseScript()
  nameWithType: ObjectContext.CreateDatabaseScript()
  fullName: System.Data.Objects.ObjectContext.CreateDatabaseScript()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Generates a data definition language (DDL) script that creates schema objects (tables, primary keys, foreign keys) for the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection">. The <see cref="T:System.Data.Metadata.Edm.StoreItemCollection"> loads metadata from store schema definition language (SSDL) files.
  remarks: "Call CreateDatabaseScript to view the DDL script. Call <xref:System.Data.Objects.ObjectContext.CreateDatabase%2A> to execute the script.  \n  \n Most of the work is delegated to the <xref:System.Data.Common.DbProviderServices.CreateDatabase%2A> method.  \n  \n For more information, see [Working with Data Definition Language](../Topic/Working%20with%20Data%20Definition%20Language.md)."
  syntax:
    content: public string CreateDatabaseScript ();
    parameters: []
    return:
      type: System.String
      description: A DDL script that creates schema objects for the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)
  id: CreateEntityKey(System.String,System.Object)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: CreateEntityKey(String,Object)
  nameWithType: ObjectContext.CreateEntityKey(String,Object)
  fullName: System.Data.Objects.ObjectContext.CreateEntityKey(String,Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Creates the entity key for a specific object, or returns the entity key if it already exists.
  remarks: "If an <xref:System.Data.EntityKey> does not exist for the , the CreateEntityKey method creates a new key for it.  \n  \n This method is used to determine whether an object that has the same <xref:System.Data.EntityKey> is already attached to the <xref:System.Data.Objects.ObjectContext>. If an object that has the same <xref:System.Data.EntityKey> is already attached, an exception is raised. Use the CreateEntityKey method to try to retrieve the <xref:System.Data.EntityKey> of the detached object before calling the <xref:System.Data.Objects.ObjectContext.Attach%2A> method."
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). In this example, CreateEntityKey is used to retrieve the entity key of an existing object.  \n  \n [!CODE [DP ObjectServices Concepts#ApplyItemUpdatesGetObject](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#applyitemupdatesgetobject)]"
  syntax:
    content: public System.Data.EntityKey CreateEntityKey (string entitySetName, object entity);
    parameters:
    - id: entitySetName
      type: System.String
      description: The fully qualified name of the entity set to which the entity object belongs.
    - id: entity
      type: System.Object
      description: The object for which the entity key is being retrieved.
    return:
      type: System.Data.EntityKey
      description: The <see cref="T:System.Data.EntityKey"> of the object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.CreateObject``1
  id: CreateObject``1
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: CreateObject()
  nameWithType: ObjectContext.CreateObject()
  fullName: System.Data.Objects.ObjectContext.CreateObject()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public T CreateObject<T> () where T : class;'
    parameters: []
    return:
      type: T
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.CreateObjectSet``1
  id: CreateObjectSet``1
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: CreateObjectSet()
  nameWithType: ObjectContext.CreateObjectSet()
  fullName: System.Data.Objects.ObjectContext.CreateObjectSet()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public System.Data.Objects.ObjectSet<TEntity> CreateObjectSet<TEntity> () where TEntity : class;'
    parameters: []
    return:
      type: System.Data.Objects.ObjectSet`1
      description: To be added.
  overload: System.Data.Objects.ObjectContext.CreateObjectSet<TEntity>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)
  id: CreateObjectSet``1(System.String)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: CreateObjectSet(String)
  nameWithType: ObjectContext.CreateObjectSet(String)
  fullName: System.Data.Objects.ObjectContext.CreateObjectSet(String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public System.Data.Objects.ObjectSet<TEntity> CreateObjectSet<TEntity> (string entitySetName) where TEntity : class;'
    parameters:
    - id: entitySetName
      type: System.String
      description: To be added.
    return:
      type: System.Data.Objects.ObjectSet`1
      description: To be added.
  overload: System.Data.Objects.ObjectContext.CreateObjectSet<TEntity>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})
  id: CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: CreateProxyTypes(IEnumerable<Type>)
  nameWithType: ObjectContext.CreateProxyTypes(IEnumerable<Type>)
  fullName: System.Data.Objects.ObjectContext.CreateProxyTypes(IEnumerable<Type>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Generates an equivalent type that can be used with the Entity Framework for each type in the supplied enumeration.
  remarks: "Individual types in the  enumeration that do not map to an entity type in the conceptual model are ignored.  \n  \n For more information, see [Requirements for Creating POCO Proxies](http://msdn.microsoft.com/en-us/dcdbf982-9b9d-4582-806a-64de4a1c03c8) and [Working with POCO Entities](http://msdn.microsoft.com/en-us/5e0fb82a-b6d1-41a1-b37b-c12db61629d3)."
  syntax:
    content: public void CreateProxyTypes (System.Collections.Generic.IEnumerable<Type> types);
    parameters:
    - id: types
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: An enumeration of <see cref="T:System.Type"> objects that represent custom data classes that map to the conceptual model.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])
  id: CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: CreateQuery(String,ObjectParameter[])
  nameWithType: ObjectContext.CreateQuery(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectContext.CreateQuery(String,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> CreateQuery<T> (string queryString, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: queryString
      type: System.String
      description: To be added.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: To be added.
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.DatabaseExists
  id: DatabaseExists
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: DatabaseExists()
  nameWithType: ObjectContext.DatabaseExists()
  fullName: System.Data.Objects.ObjectContext.DatabaseExists()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Checks if the database that is specified as the database in the current data source connection exists on the data source.
  remarks: "Most of the work is delegated to the <xref:System.Data.Common.DbProviderServices.DatabaseExists%2A> method.  \n  \n For more information, see [Working with Data Definition Language](../Topic/Working%20with%20Data%20Definition%20Language.md)."
  syntax:
    content: public bool DatabaseExists ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the database exists.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.DefaultContainerName
  id: DefaultContainerName
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: DefaultContainerName
  nameWithType: ObjectContext.DefaultContainerName
  fullName: System.Data.Objects.ObjectContext.DefaultContainerName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Gets or sets the default container name.
  remarks: "DefaultContainerName never returns `null`; it either returns the value that was set or an empty string. The user can set this property to `null`, but internally the name will be set to an empty string, so the user never needs to check for both an empty string and `null`.  \n  \n The default container name is also defined as part of a constructor. If the default container name is set through the protected constructor, the property becomes read-only."
  syntax:
    content: public string DefaultContainerName { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.DeleteDatabase
  id: DeleteDatabase
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: DeleteDatabase()
  nameWithType: ObjectContext.DeleteDatabase()
  fullName: System.Data.Objects.ObjectContext.DeleteDatabase()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Deletes the database that is specified as the database in the current data source connection.
  remarks: "Most of the work is delegated to the  <xref:System.Data.Common.DbProviderServices.DeleteDatabase%2A> method.  \n  \n For more information, see [Working with Data Definition Language](../Topic/Working%20with%20Data%20Definition%20Language.md)."
  syntax:
    content: public void DeleteDatabase ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.DeleteObject(System.Object)
  id: DeleteObject(System.Object)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: DeleteObject(Object)
  nameWithType: ObjectContext.DeleteObject(Object)
  fullName: System.Data.Objects.ObjectContext.DeleteObject(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Marks an object for deletion.
  remarks: "Marks an object for deletion from the <xref:System.Data.Objects.ObjectStateManager>. The object is deleted in the data source when the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method is called.  \n  \n Deleting the parent object also deletes all the child objects in the constrained relationship. This result is the same as enabling the `CascadeDelete` property on the association for the relationship.  \n  \n The DeleteObject method can be called on objects that are already deleted."
  example:
  - "These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832).  \n  \n This example constructs an <xref:System.Data.EntityKey> with a specific ProductID, uses the key to retrieve a Product object from the data source, deletes the product, and saves the changes to the database.  \n  \n [!CODE [DP ObjectServices Concepts#DeleteObject](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#deleteobject)]  \n  \n This example deletes an existing order item, adds a new item, and saves the changes to the database.  \n  \n [!CODE [DP ObjectServices Concepts#SaveChanges](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#savechanges)]"
  syntax:
    content: public void DeleteObject (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: An object that specifies the entity to delete. The object can be in any state except <see cref="T:System.Data.EntityState">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.Detach(System.Object)
  id: Detach(System.Object)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: Detach(Object)
  nameWithType: ObjectContext.Detach(Object)
  fullName: System.Data.Objects.ObjectContext.Detach(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Removes the object from the object context.
  remarks: "Removes the object from the <xref:System.Data.Objects.ObjectStateManager>. This disables change tracking and identity resolution for that object. For more information, see [Attaching and Detaching Objects](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  \n  \n After the Detach method is called, the system will no longer keep references that point to this object and it can be collected by the garbage collector.  \n  \n> [!NOTE]\n>  Garbage collection can only occur if the user code does not have any references to the detached object.  \n  \n The following considerations apply when detaching objects:  \n  \n-   Detach only affects the specific object that is passed to the method. If the object being detached has related objects in the object context, those objects are not detached.  \n  \n-   Detaching objects does not affect data in the data source.  \n  \n-   Cascade delete directives and referential constraints are not enforced during a detach operation.  \n  \n For more information, see [Attaching and Detaching Objects](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23)."
  example:
  - '[!CODE [DP ObjectServices Concepts#DetachObjects](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#detachobjects)]'
  syntax:
    content: public void Detach (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: Object to be detached. Only the  is removed; if there are any related objects that are being tracked by the same <see cref="T:System.Data.Objects.ObjectStateManager">, those will not be detached automatically.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.DetectChanges
  id: DetectChanges
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: DetectChanges()
  nameWithType: ObjectContext.DetectChanges()
  fullName: System.Data.Objects.ObjectContext.DetectChanges()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Ensures that <see cref="T:System.Data.Objects.ObjectStateEntry"> changes are synchronized with changes in all objects that are tracked by the <xref:System.Data.Objects.ObjectStateManager>.
  remarks: To be added.
  syntax:
    content: public void DetectChanges ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.Dispose
  id: Dispose
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: ObjectContext.Dispose()
  fullName: System.Data.Objects.ObjectContext.Dispose()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Releases the resources used by the object context.
  remarks: "This method closes the connection if it was opened by the Entity Framework. After <xref:System.Data.Objects.ObjectContext.Dispose%2A> is called, operations that require an open connection, such as executing a query or calling the<xref:System.Data.Objects.ObjectQuery.ToTraceString%2A> method, will cause an exception. Operations that do not require an open connection, such as composing a query or attaching objects, will not cause an exception. The Dispose method does not close any explicitly opened connections.  \n  \n Limiting the scope of an <xref:System.Data.Objects.ObjectContext> within a `using` block (`Using` in Visual Basic) ensures that resources are correctly disposed. For more information, see [Managing Connections and Transactions](http://msdn.microsoft.com/en-us/b6659d2a-9a45-4e98-acaa-d7a8029e5b99).  \n  \n The Dispose method calls the `virtual` (`Overridable` in Visual Basic) <xref:System.Data.Objects.ObjectContext.Dispose%28System.Boolean%29> method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Data.Objects.ObjectContext.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ObjectContext.Dispose(Boolean)
  fullName: System.Data.Objects.ObjectContext.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Releases the resources used by the object context.
  remarks: "This method closes the connection. After Dispose is called, operations that require an open connection, such as executing a query or calling the <xref:System.Data.Objects.ObjectQuery.ToTraceString%2A> method, will cause an exception. Operations that do not require an open connection, such as composing a query or attaching objects, will not cause an exception.  \n  \n Limiting the scope of an <xref:System.Data.Objects.ObjectContext> within a `using` block (`Using` in Visual Basic) ensures that resources are properly disposed. For more information, see [Managing Connections and Transactions](http://msdn.microsoft.com/en-us/b6659d2a-9a45-4e98-acaa-d7a8029e5b99)."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'
  overload: System.Data.Objects.ObjectContext.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])
  id: ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ExecuteFunction(String,ObjectParameter[])
  nameWithType: ObjectContext.ExecuteFunction(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectContext.ExecuteFunction(String,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Executes a stored procedure or function that is defined in the data source and expressed in the conceptual model; discards any results returned from the function; and returns the number of rows affected by the execution.
  remarks: To be added.
  syntax:
    content: public int ExecuteFunction (string functionName, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: functionName
      type: System.String
      description: The name of the stored procedure or function. The name can include the container name, such as `<Container Name>.<Function Name>`. When the default container name is known, only the function name is required.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: An array of <see cref="T:System.Data.Objects.ObjectParameter"> objects.
    return:
      type: System.Int32
      description: The number of rows affected.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])
  id: ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ExecuteFunction(String,ObjectParameter[])
  nameWithType: ObjectContext.ExecuteFunction(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectContext.ExecuteFunction(String,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Data.Objects.ObjectResult<TElement> ExecuteFunction<TElement> (string functionName, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: functionName
      type: System.String
      description: To be added.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: To be added.
    return:
      type: System.Data.Objects.ObjectResult{TElement}
      description: To be added.
  overload: System.Data.Objects.ObjectContext.ExecuteFunction<TElement>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])
  id: ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ExecuteFunction(String,MergeOption,ObjectParameter[])
  nameWithType: ObjectContext.ExecuteFunction(String,MergeOption,ObjectParameter[])
  fullName: System.Data.Objects.ObjectContext.ExecuteFunction(String,MergeOption,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Data.Objects.ObjectResult<TElement> ExecuteFunction<TElement> (string functionName, System.Data.Objects.MergeOption mergeOption, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: functionName
      type: System.String
      description: To be added.
    - id: mergeOption
      type: System.Data.Objects.MergeOption
      description: To be added.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: To be added.
    return:
      type: System.Data.Objects.ObjectResult{TElement}
      description: To be added.
  overload: System.Data.Objects.ObjectContext.ExecuteFunction<TElement>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])
  id: ExecuteStoreCommand(System.String,System.Object[])
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ExecuteStoreCommand(String,Object[])
  nameWithType: ObjectContext.ExecuteStoreCommand(String,Object[])
  fullName: System.Data.Objects.ObjectContext.ExecuteStoreCommand(String,Object[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Executes an arbitrary command directly against the data source using the existing connection.
  remarks: "Using parameterized commands helps guard against SQL injection attacks, in which an attacker \"injects\" a command into a SQL statement that compromises security on the server. Parameterized commands guard against a SQL injection attack by guaranteeing that values received from an external source are passed as values only, and not part of the SQL statement. As a result, SQL commands inserted into a value are not executed at the data source. Rather, they are evaluated only as a parameter value. In addition to the security benefits, parameterized commands provide a convenient method for organizing values passed with a SQL statement or to a stored procedure.  \n  \n The  value can be an array of <xref:System.Data.Common.DbParameter> objects or an array of parameter values. If only values are supplied, an array of <xref:System.Data.Common.DbParameter> objects are created based on the order of the values in the array.  \n  \n The store command is executed in the context of the current transaction, if a current transaction exists.  \n  \n For more information, see:  \n  \n [Directly Executing Store Commands](http://msdn.microsoft.com/en-us/5708d0a2-3f76-4825-978a-d06ff5c4bb3d) and  \n  \n [How to: Directly Execute Commands Against the Data Source](http://msdn.microsoft.com/en-us/def3cc87-cfff-4dee-83cf-1a40c73a2d01)"
  syntax:
    content: public int ExecuteStoreCommand (string commandText, object[] parameters);
    parameters:
    - id: commandText
      type: System.String
      description: The command to execute, in the native language of the data source.
    - id: parameters
      type: System.Object[]
      description: An array of parameters to pass to the command.
    return:
      type: System.Int32
      description: The number of rows affected.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])
  id: ExecuteStoreQuery``1(System.String,System.Object[])
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ExecuteStoreQuery(String,Object[])
  nameWithType: ObjectContext.ExecuteStoreQuery(String,Object[])
  fullName: System.Data.Objects.ObjectContext.ExecuteStoreQuery(String,Object[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Data.Objects.ObjectResult<TElement> ExecuteStoreQuery<TElement> (string commandText, object[] parameters);
    parameters:
    - id: commandText
      type: System.String
      description: To be added.
    - id: parameters
      type: System.Object[]
      description: To be added.
    return:
      type: System.Data.Objects.ObjectResult{TElement}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])
  id: ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ExecuteStoreQuery(String,String,MergeOption,Object[])
  nameWithType: ObjectContext.ExecuteStoreQuery(String,String,MergeOption,Object[])
  fullName: System.Data.Objects.ObjectContext.ExecuteStoreQuery(String,String,MergeOption,Object[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Data.Objects.ObjectResult<TEntity> ExecuteStoreQuery<TEntity> (string commandText, string entitySetName, System.Data.Objects.MergeOption mergeOption, object[] parameters);
    parameters:
    - id: commandText
      type: System.String
      description: To be added.
    - id: entitySetName
      type: System.String
      description: To be added.
    - id: mergeOption
      type: System.Data.Objects.MergeOption
      description: To be added.
    - id: parameters
      type: System.Object[]
      description: To be added.
    return:
      type: System.Data.Objects.ObjectResult{TEntity}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.GetKnownProxyTypes
  id: GetKnownProxyTypes
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: GetKnownProxyTypes()
  nameWithType: ObjectContext.GetKnownProxyTypes()
  fullName: System.Data.Objects.ObjectContext.GetKnownProxyTypes()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Returns all the existing proxy types.
  remarks: The GetKnownProxyTypes method is used when proxy object generation is enabled for POCO entities. For more information, see [Requirements for Creating POCO Proxies](http://msdn.microsoft.com/en-us/dcdbf982-9b9d-4582-806a-64de4a1c03c8) and [Working with POCO Entities](http://msdn.microsoft.com/en-us/5e0fb82a-b6d1-41a1-b37b-c12db61629d3).
  syntax:
    content: public static System.Collections.Generic.IEnumerable<Type> GetKnownProxyTypes ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: An <xref:System.Collections.Generic.IEnumerable%601> of all the existing proxy types.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)
  id: GetObjectByKey(System.Data.EntityKey)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: GetObjectByKey(EntityKey)
  nameWithType: ObjectContext.GetObjectByKey(EntityKey)
  fullName: System.Data.Objects.ObjectContext.GetObjectByKey(EntityKey)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Returns an object that has the specified entity key.
  remarks: "GetObjectByKey tries to retrieve an object that has the specified <xref:System.Data.EntityKey> from the <xref:System.Data.Objects.ObjectStateManager>. If the object is currently not loaded into the object context, a query is executed in an attempt to return the object from the data source. For more information, see [Object Queries](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276).  \n  \n GetObjectByKey raises an <xref:System.Data.ObjectNotFoundException> when the object cannot be found. To avoid handling this exception, instead use the <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> method.  \n  \n This method will return objects in the <xref:System.Data.EntityState> state.  \n  \n A temporary key cannot be used to return an object from the data source."
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example creates an <xref:System.Data.EntityKey> for an entity of the given type and then fetches an entity by key.  \n  \n [!CODE [DP ObjectServices Concepts#EntityKeyClass_GetObjectByKey](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#entitykeyclass_getobjectbykey)]"
  syntax:
    content: public object GetObjectByKey (System.Data.EntityKey key);
    parameters:
    - id: key
      type: System.Data.EntityKey
      description: The key of the object to be found.
    return:
      type: System.Object
      description: An <see cref="T:System.Object"> that is an instance of an entity type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.GetObjectType(System.Type)
  id: GetObjectType(System.Type)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: GetObjectType(Type)
  nameWithType: ObjectContext.GetObjectType(Type)
  fullName: System.Data.Objects.ObjectContext.GetObjectType(Type)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Returns the entity type of the POCO entity associated with a proxy object of a specified type.
  remarks: The GetObjectType method is used when proxy object generation is enabled for POCO entities. For more information, see [Requirements for Creating POCO Proxies](http://msdn.microsoft.com/en-us/dcdbf982-9b9d-4582-806a-64de4a1c03c8) and [Working with POCO Entities](http://msdn.microsoft.com/en-us/5e0fb82a-b6d1-41a1-b37b-c12db61629d3).
  syntax:
    content: public static Type GetObjectType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The <see cref="T:System.Type"> of the proxy object.
    return:
      type: System.Type
      description: The <see cref="T:System.Type"> of the associated POCO entity.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)
  id: LoadProperty(System.Object,System.String)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: LoadProperty(Object,String)
  nameWithType: ObjectContext.LoadProperty(Object,String)
  fullName: System.Data.Objects.ObjectContext.LoadProperty(Object,String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Explicitly loads an object related to the supplied object by the specified navigation property and using the default merge option.
  remarks: "The LoadProperty method must be called to achieve explicit loading when you are using POCO custom data classes.  \n  \n After calling LoadProperty, the related object can be accessed through the navigation properties of the source entity.  \n  \n When using POCO custom data classes, related objects cannot be explicitly loaded like instances of entity types that are generated by the Entity Data Model tools. This is because the tools generate the navigation properties that return an <xref:System.Data.Objects.DataClasses.EntityCollection%601> or <xref:System.Data.Objects.DataClasses.EntityReference%601> of related objects when <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> is called on a <xref:System.Data.Objects.DataClasses.RelatedEnd%601>. POCO entities can still be loaded by using lazy loading by setting the <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> property to `true` on the instance of <xref:System.Data.Objects.ObjectContextOptions> that is returned by the <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=fullName> property, or by using eager loading with the <xref:System.Data.Objects.ObjectQuery%601.Include%2A> method on the <xref:System.Data.Objects.ObjectQuery%601>.  \n  \n When the LoadProperty method is called, objects are loaded into the <xref:System.Data.Objects.ObjectContext> by using the default <xref:System.Data.Objects.MergeOption> value of <xref:System.Data.Objects.MergeOption>."
  syntax:
    content: public void LoadProperty (object entity, string navigationProperty);
    parameters:
    - id: entity
      type: System.Object
      description: The entity for which related objects are to be loaded.
    - id: navigationProperty
      type: System.String
      description: The name of the navigation property that returns the related objects to be loaded.
  overload: System.Data.Objects.ObjectContext.LoadProperty*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)
  id: LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: LoadProperty(Object,String,MergeOption)
  nameWithType: ObjectContext.LoadProperty(Object,String,MergeOption)
  fullName: System.Data.Objects.ObjectContext.LoadProperty(Object,String,MergeOption)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Explicitly loads an object that is related to the supplied object by the specified navigation property and using the specified merge option.
  remarks: "The LoadProperty method must be called to achieve explicit loading when you are using POCO custom data classes.  \n  \n After calling LoadProperty, the related object can be accessed through the navigation properties of the source entity.  \n  \n When using POCO custom data classes, related objects cannot be explicitly loaded like instances of entity types that are generated by the Entity Data Model tools. This is because the tools generate the navigation properties that return an <xref:System.Data.Objects.DataClasses.EntityCollection%601> or <xref:System.Data.Objects.DataClasses.EntityReference%601> of related objects when <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> is called on a <xref:System.Data.Objects.DataClasses.RelatedEnd%601>. POCO entities can still be loaded by using lazy loading by setting the <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> property to `true` on the instance of <xref:System.Data.Objects.ObjectContextOptions> that is returned by the <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=fullName> property, or by using eager loading with the <xref:System.Data.Objects.ObjectQuery%601.Include%2A> method on the <xref:System.Data.Objects.ObjectQuery%601>."
  syntax:
    content: public void LoadProperty (object entity, string navigationProperty, System.Data.Objects.MergeOption mergeOption);
    parameters:
    - id: entity
      type: System.Object
      description: The entity for which related objects are to be loaded.
    - id: navigationProperty
      type: System.String
      description: The name of the navigation property that returns the related objects to be loaded.
    - id: mergeOption
      type: System.Data.Objects.MergeOption
      description: The <see cref="T:System.Data.Objects.MergeOption"> value to use when you load the related objects.
  overload: System.Data.Objects.ObjectContext.LoadProperty*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: LoadProperty(TEntity,Expression<Func<TEntity,Object>>)
  nameWithType: ObjectContext.LoadProperty(TEntity,Expression<Func<TEntity,Object>>)
  fullName: System.Data.Objects.ObjectContext.LoadProperty(TEntity,Expression<Func<TEntity,Object>>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void LoadProperty<TEntity> (TEntity entity, System.Linq.Expressions.Expression<Func<TEntity,object>> selector);
    parameters:
    - id: entity
      type: TEntity
      description: To be added.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TEntity,System.Object}}
      description: To be added.
  overload: System.Data.Objects.ObjectContext.LoadProperty<TEntity>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)
  id: LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: LoadProperty(TEntity,Expression<Func<TEntity,Object>>,MergeOption)
  nameWithType: ObjectContext.LoadProperty(TEntity,Expression<Func<TEntity,Object>>,MergeOption)
  fullName: System.Data.Objects.ObjectContext.LoadProperty(TEntity,Expression<Func<TEntity,Object>>,MergeOption)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void LoadProperty<TEntity> (TEntity entity, System.Linq.Expressions.Expression<Func<TEntity,object>> selector, System.Data.Objects.MergeOption mergeOption);
    parameters:
    - id: entity
      type: TEntity
      description: To be added.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TEntity,System.Object}}
      description: To be added.
    - id: mergeOption
      type: System.Data.Objects.MergeOption
      description: To be added.
  overload: System.Data.Objects.ObjectContext.LoadProperty<TEntity>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.MetadataWorkspace
  id: MetadataWorkspace
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: MetadataWorkspace
  nameWithType: ObjectContext.MetadataWorkspace
  fullName: System.Data.Objects.ObjectContext.MetadataWorkspace
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Gets the metadata workspace used by the object context.
  remarks: The <xref:System.Data.Metadata.Edm.MetadataWorkspace> class is a central runtime API that you can use to interact with the Entity Data Model (EDM) metadata in the context of an application. For more information, see [Metadata Workspace](http://msdn.microsoft.com/en-us/601aee56-3eda-4caa-9082-a01df76c5e84).
  syntax:
    content: public System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace { get; }
    return:
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ObjectMaterialized
  id: ObjectMaterialized
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ObjectMaterialized
  nameWithType: ObjectContext.ObjectMaterialized
  fullName: System.Data.Objects.ObjectContext.ObjectMaterialized
  type: Event
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Occurs when a new entity object is created from data in the data source as part of a query or load operation.
  remarks: This event is raised after all scalar, complex, and reference properties have been set on an object, but before collections are loaded. If an object with the same key value exists in the object context, the Entity Framework will not recreate the object and this event will not be raised.
  syntax:
    content: public event System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized;
    return:
      type: System.Data.Objects.ObjectMaterializedEventHandler
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.ObjectStateManager
  id: ObjectStateManager
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: ObjectStateManager
  nameWithType: ObjectContext.ObjectStateManager
  fullName: System.Data.Objects.ObjectContext.ObjectStateManager
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Gets the object state manager used by the object context to track object changes.
  remarks: ''
  example:
  - "These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). This example gets the <xref:System.Data.Objects.ObjectStateManager> from the <xref:System.Data.Objects.ObjectContext> and uses the state manager to access an object in the context.  \n  \n [!CODE [DP ObjectServices Concepts#ObjectStateManager](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#objectstatemanager)]  \n  \n This example uses the <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%2A> method on the returned <xref:System.Data.Objects.ObjectStateManager> to get an object based on its entity key.  \n  \n [!CODE [DP ObjectServices Concepts#ApplyItemUpdates](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#applyitemupdates)]"
  syntax:
    content: public System.Data.Objects.ObjectStateManager ObjectStateManager { get; }
    return:
      type: System.Data.Objects.ObjectStateManager
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.QueryProvider
  id: QueryProvider
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: QueryProvider
  nameWithType: ObjectContext.QueryProvider
  fullName: System.Data.Objects.ObjectContext.QueryProvider
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Gets the LINQ query provider associated with this object context.
  remarks: To be added.
  syntax:
    content: protected System.Linq.IQueryProvider QueryProvider { get; }
    return:
      type: System.Linq.IQueryProvider
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)
  id: Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: Refresh(RefreshMode,IEnumerable)
  nameWithType: ObjectContext.Refresh(RefreshMode,IEnumerable)
  fullName: System.Data.Objects.ObjectContext.Refresh(RefreshMode,IEnumerable)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Updates a collection of objects in the object context with data from the data source.
  remarks: "This method has the dual purpose of allowing objects in the object context to be refreshed with data from the data source, and being the mechanism by which conflicts can be resolved. For more information, see [Saving Changes and Managing Concurrency](http://msdn.microsoft.com/en-us/b8378601-4f26-4a05-a24a-f50aeb68610e).  \n  \n The order in which objects are refreshed is nondeterministic.  \n  \n After Refresh is called, the object’s original values will always be updated with the data source value, but the current values might or might not be updated with the data source value. This depends on the <xref:System.Data.Objects.RefreshMode> value. The <xref:System.Data.Objects.RefreshMode> mode means that the objects in the collection should be updated to match the data source values. <xref:System.Data.Objects.RefreshMode> means that only the changes in the object context will be persisted, even if there have been other changes in the data source.  \n  \n To ensure that objects have been updated by data source-side logic, you can call Refresh with <xref:System.Data.Objects.RefreshMode> after you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method."
  syntax:
    content: public void Refresh (System.Data.Objects.RefreshMode refreshMode, System.Collections.IEnumerable collection);
    parameters:
    - id: refreshMode
      type: System.Data.Objects.RefreshMode
      description: A <see cref="T:System.Data.Objects.RefreshMode"> value that indicates whether property changes in the object context are overwritten with property values from the data source.
    - id: collection
      type: System.Collections.IEnumerable
      description: An <see cref="T:System.Collections.IEnumerable"> collection of objects to refresh.
  overload: System.Data.Objects.ObjectContext.Refresh*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)
  id: Refresh(System.Data.Objects.RefreshMode,System.Object)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: Refresh(RefreshMode,Object)
  nameWithType: ObjectContext.Refresh(RefreshMode,Object)
  fullName: System.Data.Objects.ObjectContext.Refresh(RefreshMode,Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Updates an object in the object context with data from the data source.
  remarks: "Refresh has the dual purpose of allowing an object to be refreshed with data from the data source and being the mechanism by which conflicts can be resolved. For more information, see [Saving Changes and Managing Concurrency](http://msdn.microsoft.com/en-us/b8378601-4f26-4a05-a24a-f50aeb68610e).  \n  \n The order in which objects are refreshed is nondeterministic.  \n  \n After the Refresh method is called, the object’s original values will always be updated with the data source value, but the current values might or might not be updated with the data source value. This depends on the <xref:System.Data.Objects.RefreshMode>. The <xref:System.Data.Objects.RefreshMode> mode means that the object should be updated to match the data source values. The <xref:System.Data.Objects.RefreshMode> value means that only the changes in the object context will be persisted, even if there have been other changes in the data source.  \n  \n To ensure that an object has been updated by data source-side logic, you can call the <xref:System.Data.Objects.ObjectContext.Refresh%2A> method with the <xref:System.Data.Objects.RefreshMode> value after you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method."
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example tries to save changes, and this may cause a concurrency conflict. Then it shows how to resolve the concurrency conflict by refreshing the object context before re-saving changes.  \n  \n [!CODE [DP ObjectServices Concepts#Concurrency](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#concurrency)]"
  syntax:
    content: public void Refresh (System.Data.Objects.RefreshMode refreshMode, object entity);
    parameters:
    - id: refreshMode
      type: System.Data.Objects.RefreshMode
      description: One of the <see cref="T:System.Data.Objects.RefreshMode"> values that specifies which mode to use for refreshing the <xref:System.Data.Objects.ObjectStateManager>.
    - id: entity
      type: System.Object
      description: The object to be refreshed.
  overload: System.Data.Objects.ObjectContext.Refresh*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.SaveChanges
  id: SaveChanges
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: SaveChanges()
  nameWithType: ObjectContext.SaveChanges()
  fullName: System.Data.Objects.ObjectContext.SaveChanges()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Persists all updates to the data source and resets change tracking in the object context.
  remarks: "To ensure that objects on the client have been updated by data source-side logic, you can call the <xref:System.Data.Objects.ObjectContext.Refresh%2A> method with the <xref:System.Data.Objects.RefreshMode> value after you call SaveChanges. For more information, see [Saving Changes and Managing Concurrency](http://msdn.microsoft.com/en-us/b8378601-4f26-4a05-a24a-f50aeb68610e).  \n  \n SaveChanges operates within a transaction. SaveChanges will roll back that transaction and throw an exception if any of the dirty <xref:System.Data.Objects.ObjectStateEntry> objects cannot be persisted.  \n  \n If an optimistic concurrency violation has occurred, an <xref:System.Data.OptimisticConcurrencyException> is thrown. You can resolve an optimistic concurrency violation by catching it, calling the <xref:System.Data.Objects.ObjectContext.Refresh%2A> method with the <xref:System.Data.Objects.RefreshMode> or <xref:System.Data.Objects.RefreshMode> value, and then calling SaveChanges again. For more information, see [How to: Manage Data Concurrency in the Object Context](http://msdn.microsoft.com/en-us/25ffe70d-ce97-4f0a-8ae0-22b7c40f748a)."
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). This example tries to save changes, which may cause a concurrency conflict. Then, it demonstrates how to resolve the concurrency conflict by refreshing the object context before re-saving changes.  \n  \n [!CODE [DP ObjectServices Concepts#Concurrency](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#concurrency)]"
  syntax:
    content: public int SaveChanges ();
    parameters: []
    return:
      type: System.Int32
      description: The number of objects in an <see cref="T:System.Data.EntityState">, <see cref="T:System.Data.EntityState">, or <see cref="T:System.Data.EntityState"> state when SaveChanges was called.
  overload: System.Data.Objects.ObjectContext.SaveChanges*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)
  id: SaveChanges(System.Boolean)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: SaveChanges(Boolean)
  nameWithType: ObjectContext.SaveChanges(Boolean)
  fullName: System.Data.Objects.ObjectContext.SaveChanges(Boolean)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Persists all updates to the data source and optionally resets change tracking in the object context.
  remarks: Call the <xref:System.Data.Objects.ObjectContext.SaveChanges%28System.Data.Objects.SaveOptions%29> method instead.
  syntax:
    content: public int SaveChanges (bool acceptChangesDuringSave);
    parameters:
    - id: acceptChangesDuringSave
      type: System.Boolean
      description: This parameter is needed for client-side transaction support. If `true`, the change tracking on all objects is reset after SaveChanges finishes. If `false`, you must call the <xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> method after SaveChanges.
    return:
      type: System.Int32
      description: The number of objects in an <see cref="T:System.Data.EntityState">, <see cref="T:System.Data.EntityState">, or <see cref="T:System.Data.EntityState"> state when <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> was called.
  overload: System.Data.Objects.ObjectContext.SaveChanges*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)
  id: SaveChanges(System.Data.Objects.SaveOptions)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: SaveChanges(SaveOptions)
  nameWithType: ObjectContext.SaveChanges(SaveOptions)
  fullName: System.Data.Objects.ObjectContext.SaveChanges(SaveOptions)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Persists all updates to the data source with the specified <see cref="T:System.Data.Objects.SaveOptions">.
  remarks: "Use this specific overload of SaveChanges to either make sure that <xref:System.Data.Objects.ObjectContext.DetectChanges%2A> is called before you save changes to the data source or that <xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> is called after you save changes to the data source.  \n  \n This enumeration has a <xref:System.FlagsAttribute> that allows for a bitwise combination of its member values.  \n  \n To make sure that objects on the client have been updated by data source-side logic, you can call the <xref:System.Data.Objects.ObjectContext.Refresh%2A> method with the <xref:System.Data.Objects.RefreshMode> value after you call <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>. The <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method operates in a transaction. <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> will roll back that transaction and throw an exception if any one of the dirty <xref:System.Data.Objects.ObjectStateEntry> objects cannot be persisted.  \n  \n If an optimistic concurrency violation has occurred, an <xref:System.Data.OptimisticConcurrencyException> is thrown. You can resolve an optimistic concurrency violation by catching it, calling the <xref:System.Data.Objects.ObjectContext.Refresh%2A> method with the <xref:System.Data.Objects.RefreshMode> or <xref:System.Data.Objects.RefreshMode> values, and then calling the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method again. For more information, see [How to: Manage Data Concurrency in the Object Context](http://msdn.microsoft.com/en-us/25ffe70d-ce97-4f0a-8ae0-22b7c40f748a)."
  syntax:
    content: public virtual int SaveChanges (System.Data.Objects.SaveOptions options);
    parameters:
    - id: options
      type: System.Data.Objects.SaveOptions
      description: A <see cref="T:System.Data.Objects.SaveOptions"> value that determines the behavior of the operation.
    return:
      type: System.Int32
      description: The number of objects in an <see cref="T:System.Data.EntityState">, <see cref="T:System.Data.EntityState">, or <see cref="T:System.Data.EntityState"> state when <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> was called.
  overload: System.Data.Objects.ObjectContext.SaveChanges*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.SavingChanges
  id: SavingChanges
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: SavingChanges
  nameWithType: ObjectContext.SavingChanges
  fullName: System.Data.Objects.ObjectContext.SavingChanges
  type: Event
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Occurs when changes are saved to the data source.
  remarks: The SavingChanges event is raised at the start of a <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> operation on an <xref:System.Data.Objects.ObjectContext>. This event is typically used to validate changed objects before new values are written to the database.
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). This registers a handler for the SavingChanges event that performs entity state validation.  \n  \n [!CODE [DP ObjectServices Concepts#SavingChanges](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#savingchanges)]"
  syntax:
    content: public event EventHandler SavingChanges;
    return:
      type: System.EventHandler
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)
  id: Translate``1(System.Data.Common.DbDataReader)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: Translate(DbDataReader)
  nameWithType: ObjectContext.Translate(DbDataReader)
  fullName: System.Data.Objects.ObjectContext.Translate(DbDataReader)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Data.Objects.ObjectResult<TElement> Translate<TElement> (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: To be added.
    return:
      type: System.Data.Objects.ObjectResult{TElement}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)
  id: Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: Translate(DbDataReader,String,MergeOption)
  nameWithType: ObjectContext.Translate(DbDataReader,String,MergeOption)
  fullName: System.Data.Objects.ObjectContext.Translate(DbDataReader,String,MergeOption)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Data.Objects.ObjectResult<TEntity> Translate<TEntity> (System.Data.Common.DbDataReader reader, string entitySetName, System.Data.Objects.MergeOption mergeOption);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: To be added.
    - id: entitySetName
      type: System.String
      description: To be added.
    - id: mergeOption
      type: System.Data.Objects.MergeOption
      description: To be added.
    return:
      type: System.Data.Objects.ObjectResult{TEntity}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)
  id: TryGetObjectByKey(System.Data.EntityKey,System.Object@)
  parent: System.Data.Objects.ObjectContext
  langs:
  - csharp
  name: TryGetObjectByKey(EntityKey,Object)
  nameWithType: ObjectContext.TryGetObjectByKey(EntityKey,Object)
  fullName: System.Data.Objects.ObjectContext.TryGetObjectByKey(EntityKey,Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Returns an object that has the specified entity key.
  remarks: "TryGetObjectByKey tries to retrieve an object that has the specified <xref:System.Data.EntityKey> from the <xref:System.Data.Objects.ObjectStateManager>. If the object is currently not loaded into the object context, a query is executed in an attempt to return the object from the data source. For more information, see [Object Queries](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276).  \n  \n Use the TryGetObjectByKey method to avoid handling the <xref:System.Data.ObjectNotFoundException> raised by <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> when the object cannot be found.  \n  \n This method will return objects in the <xref:System.Data.EntityState> state.  \n  \n A temporary key cannot be used to return an object from the data source.  \n  \n The <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> method applies the standard .NET `TryParse` pattern for the <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> method, returning `false` when the <xref:System.Data.ObjectNotFoundException> is caught."
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example creates an <xref:System.Data.EntityKey> for an entity of the given type and then tries to retrieve an entity by key.  \n  \n [!CODE [DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#entitykeyclass_trygetobjectbykey)]"
  syntax:
    content: public bool TryGetObjectByKey (System.Data.EntityKey key, out object value);
    parameters:
    - id: key
      type: System.Data.EntityKey
      description: The key of the object to be found.
    - id: value
      type: System.Object
      description: When this method returns, contains the object.
    return:
      type: System.Boolean
      description: '`true` if the object was retrieved successfully. `false` if the  is temporary, the connection is `null`, or the  is `null`.'
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ObjectContext(EntityConnection)
  nameWithType: ObjectContext.ObjectContext(EntityConnection)
  fullName: System.Data.Objects.ObjectContext.ObjectContext(EntityConnection)
- uid: System.Data.EntityClient.EntityConnection
  parent: System.Data.EntityClient
  isExternal: false
  name: EntityConnection
  nameWithType: EntityConnection
  fullName: System.Data.EntityClient.EntityConnection
- uid: System.Data.Objects.ObjectContext.#ctor(System.String)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ObjectContext(String)
  nameWithType: ObjectContext.ObjectContext(String)
  fullName: System.Data.Objects.ObjectContext.ObjectContext(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ObjectContext(EntityConnection,String)
  nameWithType: ObjectContext.ObjectContext(EntityConnection,String)
  fullName: System.Data.Objects.ObjectContext.ObjectContext(EntityConnection,String)
- uid: System.Data.EntityClient.EntityConnection
  parent: System.Data.EntityClient
  isExternal: false
  name: EntityConnection
  nameWithType: EntityConnection
  fullName: System.Data.EntityClient.EntityConnection
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectContext.#ctor(System.String,System.String)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ObjectContext(String,String)
  nameWithType: ObjectContext.ObjectContext(String,String)
  fullName: System.Data.Objects.ObjectContext.ObjectContext(String,String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectContext.AcceptAllChanges
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: AcceptAllChanges()
  nameWithType: ObjectContext.AcceptAllChanges()
  fullName: System.Data.Objects.ObjectContext.AcceptAllChanges()
- uid: System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: AddObject(String,Object)
  nameWithType: ObjectContext.AddObject(String,Object)
  fullName: System.Data.Objects.ObjectContext.AddObject(String,Object)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ApplyCurrentValues(String,TEntity)
  nameWithType: ObjectContext.ApplyCurrentValues(String,TEntity)
  fullName: System.Data.Objects.ObjectContext.ApplyCurrentValues(String,TEntity)
- uid: TEntity
  parent: ''
  isExternal: true
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: TEntity
  parent: ''
  isExternal: true
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ApplyOriginalValues(String,TEntity)
  nameWithType: ObjectContext.ApplyOriginalValues(String,TEntity)
  fullName: System.Data.Objects.ObjectContext.ApplyOriginalValues(String,TEntity)
- uid: TEntity
  parent: ''
  isExternal: true
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: TEntity
  parent: ''
  isExternal: true
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ApplyPropertyChanges(String,Object)
  nameWithType: ObjectContext.ApplyPropertyChanges(String,Object)
  fullName: System.Data.Objects.ObjectContext.ApplyPropertyChanges(String,Object)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: Attach(IEntityWithKey)
  nameWithType: ObjectContext.Attach(IEntityWithKey)
  fullName: System.Data.Objects.ObjectContext.Attach(IEntityWithKey)
- uid: System.Data.Objects.DataClasses.IEntityWithKey
  parent: System.Data.Objects.DataClasses
  isExternal: false
  name: IEntityWithKey
  nameWithType: IEntityWithKey
  fullName: System.Data.Objects.DataClasses.IEntityWithKey
- uid: System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: AttachTo(String,Object)
  nameWithType: ObjectContext.AttachTo(String,Object)
  fullName: System.Data.Objects.ObjectContext.AttachTo(String,Object)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Objects.ObjectContext.CommandTimeout
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: CommandTimeout
  nameWithType: ObjectContext.CommandTimeout
  fullName: System.Data.Objects.ObjectContext.CommandTimeout
- uid: System.Nullable{System.Int32}
  parent: System
  isExternal: false
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
- uid: System.Data.Objects.ObjectContext.Connection
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: Connection
  nameWithType: ObjectContext.Connection
  fullName: System.Data.Objects.ObjectContext.Connection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.Objects.ObjectContext.ContextOptions
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ContextOptions
  nameWithType: ObjectContext.ContextOptions
  fullName: System.Data.Objects.ObjectContext.ContextOptions
- uid: System.Data.Objects.ObjectContextOptions
  parent: System.Data.Objects
  isExternal: false
  name: ObjectContextOptions
  nameWithType: ObjectContextOptions
  fullName: System.Data.Objects.ObjectContextOptions
- uid: System.Data.Objects.ObjectContext.CreateDatabase
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: CreateDatabase()
  nameWithType: ObjectContext.CreateDatabase()
  fullName: System.Data.Objects.ObjectContext.CreateDatabase()
- uid: System.Data.Objects.ObjectContext.CreateDatabaseScript
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: CreateDatabaseScript()
  nameWithType: ObjectContext.CreateDatabaseScript()
  fullName: System.Data.Objects.ObjectContext.CreateDatabaseScript()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: CreateEntityKey(String,Object)
  nameWithType: ObjectContext.CreateEntityKey(String,Object)
  fullName: System.Data.Objects.ObjectContext.CreateEntityKey(String,Object)
- uid: System.Data.EntityKey
  parent: System.Data
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Objects.ObjectContext.CreateObject``1
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: CreateObject()
  nameWithType: ObjectContext.CreateObject()
  fullName: System.Data.Objects.ObjectContext.CreateObject()
- uid: T
  parent: ''
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Data.Objects.ObjectContext.CreateObjectSet``1
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: CreateObjectSet()
  nameWithType: ObjectContext.CreateObjectSet()
  fullName: System.Data.Objects.ObjectContext.CreateObjectSet()
- uid: System.Data.Objects.ObjectSet`1
  parent: System.Data.Objects
  isExternal: false
  name: ObjectSet<TEntity>
  nameWithType: ObjectSet<TEntity>
  fullName: System.Data.Objects.ObjectSet<TEntity>
- uid: System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: CreateObjectSet(String)
  nameWithType: ObjectContext.CreateObjectSet(String)
  fullName: System.Data.Objects.ObjectContext.CreateObjectSet(String)
- uid: System.Data.Objects.ObjectSet`1
  parent: System.Data.Objects
  isExternal: false
  name: ObjectSet<TEntity>
  nameWithType: ObjectSet<TEntity>
  fullName: System.Data.Objects.ObjectSet<TEntity>
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: CreateProxyTypes(IEnumerable<Type>)
  nameWithType: ObjectContext.CreateProxyTypes(IEnumerable<Type>)
  fullName: System.Data.Objects.ObjectContext.CreateProxyTypes(IEnumerable<Type>)
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
- uid: System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: CreateQuery(String,ObjectParameter[])
  nameWithType: ObjectContext.CreateQuery(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectContext.CreateQuery(String,ObjectParameter[])
- uid: System.Data.Objects.ObjectQuery`1
  parent: System.Data.Objects
  isExternal: false
  name: ObjectQuery<T>
  nameWithType: ObjectQuery<T>
  fullName: System.Data.Objects.ObjectQuery<T>
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectParameter
  parent: System.Data.Objects
  isExternal: false
  name: ObjectParameter
  nameWithType: ObjectParameter
  fullName: System.Data.Objects.ObjectParameter[]
- uid: System.Data.Objects.ObjectContext.DatabaseExists
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: DatabaseExists()
  nameWithType: ObjectContext.DatabaseExists()
  fullName: System.Data.Objects.ObjectContext.DatabaseExists()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Objects.ObjectContext.DefaultContainerName
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: DefaultContainerName
  nameWithType: ObjectContext.DefaultContainerName
  fullName: System.Data.Objects.ObjectContext.DefaultContainerName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectContext.DeleteDatabase
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: DeleteDatabase()
  nameWithType: ObjectContext.DeleteDatabase()
  fullName: System.Data.Objects.ObjectContext.DeleteDatabase()
- uid: System.Data.Objects.ObjectContext.DeleteObject(System.Object)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: DeleteObject(Object)
  nameWithType: ObjectContext.DeleteObject(Object)
  fullName: System.Data.Objects.ObjectContext.DeleteObject(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Objects.ObjectContext.Detach(System.Object)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: Detach(Object)
  nameWithType: ObjectContext.Detach(Object)
  fullName: System.Data.Objects.ObjectContext.Detach(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Objects.ObjectContext.DetectChanges
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: DetectChanges()
  nameWithType: ObjectContext.DetectChanges()
  fullName: System.Data.Objects.ObjectContext.DetectChanges()
- uid: System.Data.Objects.ObjectContext.Dispose
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: Dispose()
  nameWithType: ObjectContext.Dispose()
  fullName: System.Data.Objects.ObjectContext.Dispose()
- uid: System.Data.Objects.ObjectContext.Dispose(System.Boolean)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ObjectContext.Dispose(Boolean)
  fullName: System.Data.Objects.ObjectContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ExecuteFunction(String,ObjectParameter[])
  nameWithType: ObjectContext.ExecuteFunction(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectContext.ExecuteFunction(String,ObjectParameter[])
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectParameter
  parent: System.Data.Objects
  isExternal: false
  name: ObjectParameter
  nameWithType: ObjectParameter
  fullName: System.Data.Objects.ObjectParameter[]
- uid: System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ExecuteFunction(String,ObjectParameter[])
  nameWithType: ObjectContext.ExecuteFunction(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectContext.ExecuteFunction(String,ObjectParameter[])
- uid: System.Data.Objects.ObjectResult{TElement}
  parent: System.Data.Objects
  isExternal: false
  name: ObjectResult<TElement>
  nameWithType: ObjectResult<TElement>
  fullName: System.Data.Objects.ObjectResult<TElement>
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectParameter
  parent: System.Data.Objects
  isExternal: false
  name: ObjectParameter
  nameWithType: ObjectParameter
  fullName: System.Data.Objects.ObjectParameter[]
- uid: System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ExecuteFunction(String,MergeOption,ObjectParameter[])
  nameWithType: ObjectContext.ExecuteFunction(String,MergeOption,ObjectParameter[])
  fullName: System.Data.Objects.ObjectContext.ExecuteFunction(String,MergeOption,ObjectParameter[])
- uid: System.Data.Objects.ObjectResult{TElement}
  parent: System.Data.Objects
  isExternal: false
  name: ObjectResult<TElement>
  nameWithType: ObjectResult<TElement>
  fullName: System.Data.Objects.ObjectResult<TElement>
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.MergeOption
  parent: System.Data.Objects
  isExternal: false
  name: MergeOption
  nameWithType: MergeOption
  fullName: System.Data.Objects.MergeOption
- uid: System.Data.Objects.ObjectParameter
  parent: System.Data.Objects
  isExternal: false
  name: ObjectParameter
  nameWithType: ObjectParameter
  fullName: System.Data.Objects.ObjectParameter[]
- uid: System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ExecuteStoreCommand(String,Object[])
  nameWithType: ObjectContext.ExecuteStoreCommand(String,Object[])
  fullName: System.Data.Objects.ObjectContext.ExecuteStoreCommand(String,Object[])
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ExecuteStoreQuery(String,Object[])
  nameWithType: ObjectContext.ExecuteStoreQuery(String,Object[])
  fullName: System.Data.Objects.ObjectContext.ExecuteStoreQuery(String,Object[])
- uid: System.Data.Objects.ObjectResult{TElement}
  parent: System.Data.Objects
  isExternal: false
  name: ObjectResult<TElement>
  nameWithType: ObjectResult<TElement>
  fullName: System.Data.Objects.ObjectResult<TElement>
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ExecuteStoreQuery(String,String,MergeOption,Object[])
  nameWithType: ObjectContext.ExecuteStoreQuery(String,String,MergeOption,Object[])
  fullName: System.Data.Objects.ObjectContext.ExecuteStoreQuery(String,String,MergeOption,Object[])
- uid: System.Data.Objects.ObjectResult{TEntity}
  parent: System.Data.Objects
  isExternal: false
  name: ObjectResult<TEntity>
  nameWithType: ObjectResult<TEntity>
  fullName: System.Data.Objects.ObjectResult<TEntity>
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.MergeOption
  parent: System.Data.Objects
  isExternal: false
  name: MergeOption
  nameWithType: MergeOption
  fullName: System.Data.Objects.MergeOption
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Data.Objects.ObjectContext.GetKnownProxyTypes
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: GetKnownProxyTypes()
  nameWithType: ObjectContext.GetKnownProxyTypes()
  fullName: System.Data.Objects.ObjectContext.GetKnownProxyTypes()
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
- uid: System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: GetObjectByKey(EntityKey)
  nameWithType: ObjectContext.GetObjectByKey(EntityKey)
  fullName: System.Data.Objects.ObjectContext.GetObjectByKey(EntityKey)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.EntityKey
  parent: System.Data
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
- uid: System.Data.Objects.ObjectContext.GetObjectType(System.Type)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: GetObjectType(Type)
  nameWithType: ObjectContext.GetObjectType(Type)
  fullName: System.Data.Objects.ObjectContext.GetObjectType(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: LoadProperty(Object,String)
  nameWithType: ObjectContext.LoadProperty(Object,String)
  fullName: System.Data.Objects.ObjectContext.LoadProperty(Object,String)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: LoadProperty(Object,String,MergeOption)
  nameWithType: ObjectContext.LoadProperty(Object,String,MergeOption)
  fullName: System.Data.Objects.ObjectContext.LoadProperty(Object,String,MergeOption)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.MergeOption
  parent: System.Data.Objects
  isExternal: false
  name: MergeOption
  nameWithType: MergeOption
  fullName: System.Data.Objects.MergeOption
- uid: System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: LoadProperty(TEntity,Expression<Func<TEntity,Object>>)
  nameWithType: ObjectContext.LoadProperty(TEntity,Expression<Func<TEntity,Object>>)
  fullName: System.Data.Objects.ObjectContext.LoadProperty(TEntity,Expression<Func<TEntity,Object>>)
- uid: TEntity
  parent: ''
  isExternal: true
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Linq.Expressions.Expression{System.Func{TEntity,System.Object}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TEntity,Object>>
  nameWithType: Expression<Func<TEntity,Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity,System.Object>>
- uid: System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: LoadProperty(TEntity,Expression<Func<TEntity,Object>>,MergeOption)
  nameWithType: ObjectContext.LoadProperty(TEntity,Expression<Func<TEntity,Object>>,MergeOption)
  fullName: System.Data.Objects.ObjectContext.LoadProperty(TEntity,Expression<Func<TEntity,Object>>,MergeOption)
- uid: TEntity
  parent: ''
  isExternal: true
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Linq.Expressions.Expression{System.Func{TEntity,System.Object}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TEntity,Object>>
  nameWithType: Expression<Func<TEntity,Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity,System.Object>>
- uid: System.Data.Objects.MergeOption
  parent: System.Data.Objects
  isExternal: false
  name: MergeOption
  nameWithType: MergeOption
  fullName: System.Data.Objects.MergeOption
- uid: System.Data.Objects.ObjectContext.MetadataWorkspace
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: MetadataWorkspace
  nameWithType: ObjectContext.MetadataWorkspace
  fullName: System.Data.Objects.ObjectContext.MetadataWorkspace
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.Objects.ObjectContext.ObjectMaterialized
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ObjectMaterialized
  nameWithType: ObjectContext.ObjectMaterialized
  fullName: System.Data.Objects.ObjectContext.ObjectMaterialized
- uid: System.Data.Objects.ObjectMaterializedEventHandler
  parent: System.Data.Objects
  isExternal: false
  name: ObjectMaterializedEventHandler
  nameWithType: ObjectMaterializedEventHandler
  fullName: System.Data.Objects.ObjectMaterializedEventHandler
- uid: System.Data.Objects.ObjectContext.ObjectStateManager
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: ObjectStateManager
  nameWithType: ObjectContext.ObjectStateManager
  fullName: System.Data.Objects.ObjectContext.ObjectStateManager
- uid: System.Data.Objects.ObjectStateManager
  parent: System.Data.Objects
  isExternal: false
  name: ObjectStateManager
  nameWithType: ObjectStateManager
  fullName: System.Data.Objects.ObjectStateManager
- uid: System.Data.Objects.ObjectContext.QueryProvider
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: QueryProvider
  nameWithType: ObjectContext.QueryProvider
  fullName: System.Data.Objects.ObjectContext.QueryProvider
- uid: System.Linq.IQueryProvider
  parent: System.Linq
  isExternal: false
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: System.Linq.IQueryProvider
- uid: System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: Refresh(RefreshMode,IEnumerable)
  nameWithType: ObjectContext.Refresh(RefreshMode,IEnumerable)
  fullName: System.Data.Objects.ObjectContext.Refresh(RefreshMode,IEnumerable)
- uid: System.Data.Objects.RefreshMode
  parent: System.Data.Objects
  isExternal: false
  name: RefreshMode
  nameWithType: RefreshMode
  fullName: System.Data.Objects.RefreshMode
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: Refresh(RefreshMode,Object)
  nameWithType: ObjectContext.Refresh(RefreshMode,Object)
  fullName: System.Data.Objects.ObjectContext.Refresh(RefreshMode,Object)
- uid: System.Data.Objects.RefreshMode
  parent: System.Data.Objects
  isExternal: false
  name: RefreshMode
  nameWithType: RefreshMode
  fullName: System.Data.Objects.RefreshMode
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Objects.ObjectContext.SaveChanges
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: SaveChanges()
  nameWithType: ObjectContext.SaveChanges()
  fullName: System.Data.Objects.ObjectContext.SaveChanges()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: SaveChanges(Boolean)
  nameWithType: ObjectContext.SaveChanges(Boolean)
  fullName: System.Data.Objects.ObjectContext.SaveChanges(Boolean)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: SaveChanges(SaveOptions)
  nameWithType: ObjectContext.SaveChanges(SaveOptions)
  fullName: System.Data.Objects.ObjectContext.SaveChanges(SaveOptions)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Objects.SaveOptions
  parent: System.Data.Objects
  isExternal: false
  name: SaveOptions
  nameWithType: SaveOptions
  fullName: System.Data.Objects.SaveOptions
- uid: System.Data.Objects.ObjectContext.SavingChanges
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: SavingChanges
  nameWithType: ObjectContext.SavingChanges
  fullName: System.Data.Objects.ObjectContext.SavingChanges
- uid: System.EventHandler
  parent: System
  isExternal: false
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: Translate(DbDataReader)
  nameWithType: ObjectContext.Translate(DbDataReader)
  fullName: System.Data.Objects.ObjectContext.Translate(DbDataReader)
- uid: System.Data.Objects.ObjectResult{TElement}
  parent: System.Data.Objects
  isExternal: false
  name: ObjectResult<TElement>
  nameWithType: ObjectResult<TElement>
  fullName: System.Data.Objects.ObjectResult<TElement>
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: Translate(DbDataReader,String,MergeOption)
  nameWithType: ObjectContext.Translate(DbDataReader,String,MergeOption)
  fullName: System.Data.Objects.ObjectContext.Translate(DbDataReader,String,MergeOption)
- uid: System.Data.Objects.ObjectResult{TEntity}
  parent: System.Data.Objects
  isExternal: false
  name: ObjectResult<TEntity>
  nameWithType: ObjectResult<TEntity>
  fullName: System.Data.Objects.ObjectResult<TEntity>
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.MergeOption
  parent: System.Data.Objects
  isExternal: false
  name: MergeOption
  nameWithType: MergeOption
  fullName: System.Data.Objects.MergeOption
- uid: System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  name: TryGetObjectByKey(EntityKey,Object)
  nameWithType: ObjectContext.TryGetObjectByKey(EntityKey,Object)
  fullName: System.Data.Objects.ObjectContext.TryGetObjectByKey(EntityKey,Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityKey
  parent: System.Data
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Objects.ObjectContext.CreateObjectSet<TEntity>*
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  nameWithType: ObjectContext.
- uid: System.Data.Objects.ObjectContext.Dispose*
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  nameWithType: ObjectContext.
- uid: System.Data.Objects.ObjectContext.ExecuteFunction<TElement>*
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  nameWithType: ObjectContext.
- uid: System.Data.Objects.ObjectContext.LoadProperty*
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  nameWithType: ObjectContext.
- uid: System.Data.Objects.ObjectContext.LoadProperty<TEntity>*
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  nameWithType: ObjectContext.
- uid: System.Data.Objects.ObjectContext.Refresh*
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  nameWithType: ObjectContext.
- uid: System.Data.Objects.ObjectContext.SaveChanges*
  parent: System.Data.Objects.ObjectContext
  isExternal: false
  nameWithType: ObjectContext.
