### YamlMime:ManagedReference
items:
- uid: System.IO.FileMode
  id: FileMode
  children:
  - System.IO.FileMode.Append
  - System.IO.FileMode.Create
  - System.IO.FileMode.CreateNew
  - System.IO.FileMode.Open
  - System.IO.FileMode.OpenOrCreate
  - System.IO.FileMode.Truncate
  langs:
  - csharp
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
  type: Enum
  summary: Specifies how the operating system should open a file.
  remarks: "For an example of creating a file and writing text to a file, see [How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md). For an example of reading text from a file, see [How to: Read Text from a File](../Topic/How%20to:%20Read%20Text%20from%20a%20File.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md).  \n  \n A `FileMode` parameter is specified in many of the constructors for <xref:System.IO.FileStream>, <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream>, and in the `Open` methods of <xref:System.IO.File> and <xref:System.IO.FileInfo> to control how a file is opened.  \n  \n `FileMode` parameters control whether a file is overwritten, created, opened, or some combination thereof. Use `Open` to open an existing file. To append to a file, use `Append`. To truncate a file or create a file if it doesn't exist, use `Create`."
  example:
  - "## Examples  \n The following `FileStream` constructor opens an existing file (`FileMode.Open`).  \n  \n [!CODE [Classic FileAccess Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic FileAccess Example#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public enum FileMode
  inheritance:
  - System.Object
  - System.ValueType
  - System.Enum
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileMode.Append
  id: Append
  parent: System.IO.FileMode
  langs:
  - csharp
  name: Append
  nameWithType: FileMode.Append
  fullName: System.IO.FileMode.Append
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Opens the file if it exists and seeks to the end of the file, or creates a new file. This requires F:System.Security.Permissions.FileIOPermissionAccess.Append?qualifyHint=True&autoUpgrade=True permission. `FileMode.Append` can be used only in conjunction with `FileAccess.Write`. Trying to seek to a position before the end of the file throws an T:System.IO.IOException?qualifyHint=False&autoUpgrade=True exception, and any attempt to read fails and throws a T:System.NotSupportedException?qualifyHint=False&autoUpgrade=True exception.
  syntax:
    content: Append
    return:
      type: System.IO.FileMode
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileMode.Create
  id: Create
  parent: System.IO.FileMode
  langs:
  - csharp
  name: Create
  nameWithType: FileMode.Create
  fullName: System.IO.FileMode.Create
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires F:System.Security.Permissions.FileIOPermissionAccess.Write?qualifyHint=True&autoUpgrade=True permission. `FileMode.Create` is equivalent to requesting that if the file does not exist, use F:System.IO.FileMode.CreateNew?qualifyHint=False&autoUpgrade=True; otherwise, use F:System.IO.FileMode.Truncate?qualifyHint=False&autoUpgrade=True. If the file already exists but is a hidden file, an T:System.UnauthorizedAccessException?qualifyHint=False&autoUpgrade=True exception is thrown.
  syntax:
    content: Create
    return:
      type: System.IO.FileMode
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileMode.CreateNew
  id: CreateNew
  parent: System.IO.FileMode
  langs:
  - csharp
  name: CreateNew
  nameWithType: FileMode.CreateNew
  fullName: System.IO.FileMode.CreateNew
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Specifies that the operating system should create a new file. This requires F:System.Security.Permissions.FileIOPermissionAccess.Write?qualifyHint=True&autoUpgrade=True permission. If the file already exists, an T:System.IO.IOException?qualifyHint=False&autoUpgrade=True exception is thrown.
  syntax:
    content: CreateNew
    return:
      type: System.IO.FileMode
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileMode.Open
  id: Open
  parent: System.IO.FileMode
  langs:
  - csharp
  name: Open
  nameWithType: FileMode.Open
  fullName: System.IO.FileMode.Open
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by the T:System.IO.FileAccess?qualifyHint=False&autoUpgrade=True enumeration. A T:System.IO.FileNotFoundException?qualifyHint=True&autoUpgrade=True exception is thrown if the file does not exist.
  syntax:
    content: Open
    return:
      type: System.IO.FileMode
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileMode.OpenOrCreate
  id: OpenOrCreate
  parent: System.IO.FileMode
  langs:
  - csharp
  name: OpenOrCreate
  nameWithType: FileMode.OpenOrCreate
  fullName: System.IO.FileMode.OpenOrCreate
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. If the file is opened with `FileAccess.Read`, F:System.Security.Permissions.FileIOPermissionAccess.Read?qualifyHint=True&autoUpgrade=True permission is required. If the file access is `FileAccess.Write`, F:System.Security.Permissions.FileIOPermissionAccess.Write?qualifyHint=True&autoUpgrade=True permission is required. If the file is opened with `FileAccess.ReadWrite`, both F:System.Security.Permissions.FileIOPermissionAccess.Read?qualifyHint=True&autoUpgrade=True and F:System.Security.Permissions.FileIOPermissionAccess.Write?qualifyHint=True&autoUpgrade=True permissions are required.
  syntax:
    content: OpenOrCreate
    return:
      type: System.IO.FileMode
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileMode.Truncate
  id: Truncate
  parent: System.IO.FileMode
  langs:
  - csharp
  name: Truncate
  nameWithType: FileMode.Truncate
  fullName: System.IO.FileMode.Truncate
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Specifies that the operating system should open an existing file. When the file is opened, it should be truncated so that its size is zero bytes. This requires F:System.Security.Permissions.FileIOPermissionAccess.Write?qualifyHint=True&autoUpgrade=True permission. Attempts to read from a file opened with `FileMode.Truncate` cause an T:System.ArgumentException?qualifyHint=False&autoUpgrade=True exception.
  syntax:
    content: Truncate
    return:
      type: System.IO.FileMode
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.IO.FileMode.Append
  parent: System.IO.FileMode
  isExternal: false
  name: Append
  nameWithType: FileMode.Append
  fullName: System.IO.FileMode.Append
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileMode.Create
  parent: System.IO.FileMode
  isExternal: false
  name: Create
  nameWithType: FileMode.Create
  fullName: System.IO.FileMode.Create
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileMode.CreateNew
  parent: System.IO.FileMode
  isExternal: false
  name: CreateNew
  nameWithType: FileMode.CreateNew
  fullName: System.IO.FileMode.CreateNew
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileMode.Open
  parent: System.IO.FileMode
  isExternal: false
  name: Open
  nameWithType: FileMode.Open
  fullName: System.IO.FileMode.Open
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileMode.OpenOrCreate
  parent: System.IO.FileMode
  isExternal: false
  name: OpenOrCreate
  nameWithType: FileMode.OpenOrCreate
  fullName: System.IO.FileMode.OpenOrCreate
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileMode.Truncate
  parent: System.IO.FileMode
  isExternal: false
  name: Truncate
  nameWithType: FileMode.Truncate
  fullName: System.IO.FileMode.Truncate
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
