### YamlMime:ManagedReference
items:
- uid: System.IO.BinaryReader
  id: BinaryReader
  children:
  - System.IO.BinaryReader.#ctor(System.IO.Stream)
  - System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)
  - System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  - System.IO.BinaryReader.BaseStream
  - System.IO.BinaryReader.Close
  - System.IO.BinaryReader.Dispose
  - System.IO.BinaryReader.Dispose(System.Boolean)
  - System.IO.BinaryReader.FillBuffer(System.Int32)
  - System.IO.BinaryReader.PeekChar
  - System.IO.BinaryReader.Read
  - System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)
  - System.IO.BinaryReader.Read7BitEncodedInt
  - System.IO.BinaryReader.ReadBoolean
  - System.IO.BinaryReader.ReadByte
  - System.IO.BinaryReader.ReadBytes(System.Int32)
  - System.IO.BinaryReader.ReadChar
  - System.IO.BinaryReader.ReadChars(System.Int32)
  - System.IO.BinaryReader.ReadDecimal
  - System.IO.BinaryReader.ReadDouble
  - System.IO.BinaryReader.ReadInt16
  - System.IO.BinaryReader.ReadInt32
  - System.IO.BinaryReader.ReadInt64
  - System.IO.BinaryReader.ReadSByte
  - System.IO.BinaryReader.ReadSingle
  - System.IO.BinaryReader.ReadString
  - System.IO.BinaryReader.ReadUInt16
  - System.IO.BinaryReader.ReadUInt32
  - System.IO.BinaryReader.ReadUInt64
  langs:
  - csharp
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
  type: Class
  summary: Reads primitive data types as binary values in a specific encoding.
  remarks: "The BinaryReader class provides methods that simplify reading primitive data types from a stream. For example, you can use the <xref:System.IO.BinaryReader.ReadBoolean%2A> method to read the next byte as a Boolean value and advance the current position in the stream by one byte. The class includes read methods that support different data types.  \n  \n When you create a new instance of the BinaryReader class, you provide the stream to read from, and optionally specify the type of encoding and whether to leave the stream open after disposing the BinaryReader object. If you do not specify an encoding type, UTF-8 is used.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."
  example:
  - "The following code example demonstrates how to store and retrieve application settings in a file.  \n  \n [!CODE [System.IO.BinaryReaderWriter#1](../CodeSnippet/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class BinaryReader : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: BinaryReader(Stream)
  nameWithType: BinaryReader.BinaryReader(Stream)
  fullName: System.IO.BinaryReader.BinaryReader(Stream)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Initializes a new instance of the <see cref="T:System.IO.BinaryReader"> class based on the specified stream and using UTF-8 encoding.
  remarks: For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).
  example:
  - "The following code example demonstrates how to store and retrieve application settings in a file.  \n  \n [!CODE [System.IO.BinaryReaderWriter#1](../CodeSnippet/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter#1)]"
  syntax:
    content: public BinaryReader (System.IO.Stream input);
    parameters:
    - id: input
      type: System.IO.Stream
      description: The input stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.Text.Encoding)'
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: BinaryReader(Stream,Encoding)
  nameWithType: BinaryReader.BinaryReader(Stream,Encoding)
  fullName: System.IO.BinaryReader.BinaryReader(Stream,Encoding)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Initializes a new instance of the <see cref="T:System.IO.BinaryReader"> class based on the specified stream and character encoding.
  remarks: For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).
  syntax:
    content: public BinaryReader (System.IO.Stream input, System.Text.Encoding encoding);
    parameters:
    - id: input
      type: System.IO.Stream
      description: The input stream.
    - id: encoding
      type: System.Text.Encoding
      description: The character encoding to use.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: BinaryReader(Stream,Encoding,Boolean)
  nameWithType: BinaryReader.BinaryReader(Stream,Encoding,Boolean)
  fullName: System.IO.BinaryReader.BinaryReader(Stream,Encoding,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Initializes a new instance of the <see cref="T:System.IO.BinaryReader"> class based on the specified stream and character encoding, and optionally leaves the stream open.
  remarks: To be added.
  syntax:
    content: public BinaryReader (System.IO.Stream input, System.Text.Encoding encoding, bool leaveOpen);
    parameters:
    - id: input
      type: System.IO.Stream
      description: The input stream.
    - id: encoding
      type: System.Text.Encoding
      description: The character encoding to use.
    - id: leaveOpen
      type: System.Boolean
      description: '`true` to leave the stream open after the <see cref="T:System.IO.BinaryReader"> object is disposed; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.BaseStream
  id: BaseStream
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: BaseStream
  nameWithType: BinaryReader.BaseStream
  fullName: System.IO.BinaryReader.BaseStream
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Exposes access to the underlying stream of the <see cref="T:System.IO.BinaryReader">.
  remarks: "> [!CAUTION]\n>  Using the underlying stream while reading or while using the `BinaryReader` can cause data loss and corruption. For example, the same bytes might be read more than once, bytes might be skipped, or character reading might become unpredictable.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following code example shows how to read and write `Double` data to memory by using the `BinaryReader` and <xref:System.IO.BinaryWriter> classes on top of the <xref:System.IO.MemoryStream> class. `MemoryStream` only reads and writes `Byte` data.  \n  \n [!CODE [System.IO.BinaryReaderWriter.RWDouble#1](../../add/codesnippet/system.io.binaryreaderwriter.md)]"
  syntax:
    content: public virtual System.IO.Stream BaseStream { get; }
    return:
      type: System.IO.Stream
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.Close
  id: Close
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: Close()
  nameWithType: BinaryReader.Close()
  fullName: System.IO.BinaryReader.Close()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Closes the current reader and the underlying stream.
  remarks: "This implementation of `Close` calls the <xref:System.IO.BinaryReader.Dispose%2A> method passing a `true` value.  \n  \n Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.IO.Stream.Flush%2A> or `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters."
  syntax:
    content: public virtual void Close ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.Dispose
  id: Dispose
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: Dispose()
  nameWithType: BinaryReader.Dispose()
  fullName: System.IO.BinaryReader.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Releases all resources used by the current instance of the <see cref="T:System.IO.BinaryReader"> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.IO.BinaryReader>. The `Dispose` method leaves the <xref:System.IO.BinaryReader> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.IO.BinaryReader> so the garbage collector can reclaim the memory that the <xref:System.IO.BinaryReader> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md) and [Implementing a Dispose Method](../Topic/Implementing%20a%20Dispose%20Method.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.IO.BinaryReader>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.IO.BinaryReader> object's `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.BinaryReader.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: BinaryReader.Dispose(Boolean)
  fullName: System.IO.BinaryReader.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Releases the unmanaged resources used by the <see cref="T:System.IO.BinaryReader"> class and optionally releases the managed resources.
  remarks: "This method is called by `Dispose` and <xref:System.Object.Finalize%2A>. By default, this method specifies the  parameter as `true`. <xref:System.Object.Finalize%2A> specifies the  parameter as `false`.  \n  \n When the  parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.BinaryReader> references. This method invokes the `Dispose` method of each referenced object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'
  overload: System.IO.BinaryReader.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.FillBuffer(System.Int32)
  id: FillBuffer(System.Int32)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: FillBuffer(Int32)
  nameWithType: BinaryReader.FillBuffer(Int32)
  fullName: System.IO.BinaryReader.FillBuffer(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Fills the internal buffer with the specified number of bytes read from the stream.
  remarks: "The internal buffer size is the larger value between 16 and the value returned by <xref:System.Text.Encoding.GetMaxByteCount%2A> for the specified encoding.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: protected virtual void FillBuffer (int numBytes);
    parameters:
    - id: numBytes
      type: System.Int32
      description: The number of bytes to be read.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.PeekChar
  id: PeekChar
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: PeekChar()
  nameWithType: BinaryReader.PeekChar()
  fullName: System.IO.BinaryReader.PeekChar()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Returns the next available character and does not advance the byte or character position.
  remarks: "If surrogate characters can be expected in the stream use the <xref:System.IO.BinaryReader.ReadChars%2A> method, then set the stream back to the original position.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: public virtual int PeekChar ();
    parameters: []
    return:
      type: System.Int32
      description: The next available character, or -1 if no more characters are available or the stream does not support seeking.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.Read
  id: Read
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: Read()
  nameWithType: BinaryReader.Read()
  fullName: System.IO.BinaryReader.Read()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads characters from the underlying stream and advances the current position of the stream in accordance with the `Encoding` used and the specific character being read from the stream.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following example shows how to read and write data using memory as a backing store. This example displays a list of invalid file path characters to the console. Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters. Because the list of invalid characters can vary based on the system, output for this code may also vary.  \n  \n [!CODE [System.IO.BinaryReaderWriter.RWChar2#1](../../add/codesnippet/system.io.binaryreaderwriter.md)]"
  syntax:
    content: public virtual int Read ();
    parameters: []
    return:
      type: System.Int32
      description: The next character from the input stream, or -1 if no characters are currently available.
  overload: System.IO.BinaryReader.Read*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: BinaryReader.Read(Byte[],Int32,Int32)
  fullName: System.IO.BinaryReader.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads the specified number of bytes from the stream, starting from a specified point in the byte array.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read operation.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following example shows how to write binary data by using memory as a backing store. It displays a message to the console that indicates whether the data was written correctly.  \n  \n [!CODE [System.IO.BinaryReaderWriter.RWBytes2#1](../../add/codesnippet/system.io.binaryreaderwriter.md)]  \n  \n This example reads the contents of a file and displays each byte's numeric value in 16-column format. The end of the file that is being read is detected when the Read method returns zero bytes.  \n  \n [!CODE [System.IO.BinaryReaderWriter#6](../CodeSnippet/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter#6)]"
  syntax:
    content: public virtual int Read (byte[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to read data into.
    - id: index
      type: System.Int32
      description: The starting point in the buffer at which to begin reading into the buffer.
    - id: count
      type: System.Int32
      description: The number of bytes to read.
    return:
      type: System.Int32
      description: The number of bytes read into . This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.
  overload: System.IO.BinaryReader.Read*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: Read(Char[],Int32,Int32)
  nameWithType: BinaryReader.Read(Char[],Int32,Int32)
  fullName: System.IO.BinaryReader.Read(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads the specified number of characters from the stream, starting from a specified point in the character array.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read operation.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following example shows how to read and write data using memory as a backing store. This example displays a list of invalid file path characters to the console. Although the code tries to display a list of all invalid file path characters, not all of the characters are within the displayable set of characters. Because the list of invalid characters can vary based on the system, output for this code may also vary.  \n  \n [!CODE [System.IO.BinaryReaderWriter.RWChars2#1](../../add/codesnippet/system.io.binaryreaderwriter.md)]"
  syntax:
    content: public virtual int Read (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: The buffer to read data into.
    - id: index
      type: System.Int32
      description: The starting point in the buffer at which to begin reading into the buffer.
    - id: count
      type: System.Int32
      description: The number of characters to read.
    return:
      type: System.Int32
      description: The total number of characters read into the buffer. This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.
  overload: System.IO.BinaryReader.Read*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.Read7BitEncodedInt
  id: Read7BitEncodedInt
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: Read7BitEncodedInt()
  nameWithType: BinaryReader.Read7BitEncodedInt()
  fullName: System.IO.BinaryReader.Read7BitEncodedInt()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads in a 32-bit integer in compressed format.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n If the integer will fit in seven bits, the integer takes only one byte of space. The integer is expected to have been written through <xref:System.IO.BinaryWriter.Write7BitEncodedInt%2A?displayProperty=fullName>.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: protected int Read7BitEncodedInt ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit integer in compressed format.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadBoolean
  id: ReadBoolean
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadBoolean()
  nameWithType: BinaryReader.ReadBoolean()
  fullName: System.IO.BinaryReader.ReadBoolean()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a `Boolean` value from the current stream and advances the current position of the stream by one byte.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following code example demonstrates how to store and retrieve application settings in a file.  \n  \n [!CODE [System.IO.BinaryReaderWriter#1](../CodeSnippet/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter#1)]"
  syntax:
    content: public virtual bool ReadBoolean ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the byte is nonzero; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadByte
  id: ReadByte
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadByte()
  nameWithType: BinaryReader.ReadByte()
  fullName: System.IO.BinaryReader.ReadByte()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads the next byte from the current stream and advances the current position of the stream by one byte.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n Because of data formatting conflicts, using this method with the following encodings is not recommended:  \n  \n-   UTF-7  \n  \n-   ISO-2022-JP  \n  \n-   ISCII  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.  \n  \n [!CODE [System.IO.BinaryReaderWriter.RWByte#1](../../add/codesnippet/system.io.binaryreaderwriter.md)]"
  syntax:
    content: public virtual byte ReadByte ();
    parameters: []
    return:
      type: System.Byte
      description: The next byte read from the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadBytes(System.Int32)
  id: ReadBytes(System.Int32)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadBytes(Int32)
  nameWithType: BinaryReader.ReadBytes(Int32)
  fullName: System.IO.BinaryReader.ReadBytes(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read operation.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following code example shows how to write binary data using memory as a backing store, and then verify that the data was written correctly.  \n  \n [!CODE [System.IO.BinaryReaderWriter.RWBytes1#1](../../add/codesnippet/system.io.binaryreaderwriter.md)]  \n  \n This example reads the contents of a file and displays it to the console as dump text. The end of the file that is being read is detected when the length of the <xref:System.Byte> array returned from ReadBytes is zero.  \n  \n [!CODE [System.IO.BinaryReaderWriter#6](../CodeSnippet/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter#6)]"
  syntax:
    content: public virtual byte[] ReadBytes (int count);
    parameters:
    - id: count
      type: System.Int32
      description: The number of bytes to read. This value must be 0 or a non-negative number or an exception will occur.
    return:
      type: System.Byte[]
      description: A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadChar
  id: ReadChar
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadChar()
  nameWithType: BinaryReader.ReadChar()
  fullName: System.IO.BinaryReader.ReadChar()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads the next character from the current stream and advances the current position of the stream in accordance with the `Encoding` used and the specific character being read from the stream.
  remarks: "If the ReadChar method attempts to read a surrogate character in the stream an exception will be raised and the position in the stream will advance. The position is restored to the original location before ReadChar was called if the stream is seekable; however, if the stream is unseekable, the position will not be corrected. If surrogate characters can be expected in the stream, use the <xref:System.IO.BinaryReader.ReadChars%2A> method instead.  \n  \n Because of data formatting conflicts, using this method with the following encodings is not recommended:  \n  \n-   UTF-7  \n  \n-   ISO-2022-JP  \n  \n-   ISCII  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following code example shows how to read and write data using memory as a backing store.  \n  \n [!CODE [System.IO.BinaryReaderWriter.RWChar1#1](../../add/codesnippet/system.io.binaryreaderwriter.md)]"
  syntax:
    content: public virtual char ReadChar ();
    parameters: []
    return:
      type: System.Char
      description: A character read from the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadChars(System.Int32)
  id: ReadChars(System.Int32)
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadChars(Int32)
  nameWithType: BinaryReader.ReadChars(Int32)
  fullName: System.IO.BinaryReader.ReadChars(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads the specified number of characters from the current stream, returns the data in a character array, and advances the current position in accordance with the `Encoding` used and the specific character being read from the stream.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read operation.  \n  \n When reading from network streams, in some rare cases, the ReadChars method might read an extra character from the stream if the <xref:System.IO.BinaryReader> was constructed with Unicode encoding. If this occurs, you can use the <xref:System.IO.BinaryReader.ReadBytes%2A> method to read a fixed-length byte array, and then pass that array to the ReadChars method."
  example:
  - "The following code example shows how to read and write data using memory as a backing store.  \n  \n [!CODE [System.IO.BinaryReaderWriter.RWChars1#1](../../add/codesnippet/system.io.binaryreaderwriter.md)]"
  syntax:
    content: public virtual char[] ReadChars (int count);
    parameters:
    - id: count
      type: System.Int32
      description: The number of characters to read.
    return:
      type: System.Char[]
      description: A character array containing data read from the underlying stream. This might be less than the number of characters requested if the end of the stream is reached.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadDecimal
  id: ReadDecimal
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadDecimal()
  nameWithType: BinaryReader.ReadDecimal()
  fullName: System.IO.BinaryReader.ReadDecimal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: public virtual decimal ReadDecimal ();
    parameters: []
    return:
      type: System.Decimal
      description: A decimal value read from the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadDouble
  id: ReadDouble
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadDouble()
  nameWithType: BinaryReader.ReadDouble()
  fullName: System.IO.BinaryReader.ReadDouble()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n `BinaryReader` reads this data type in little-endian format.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following code example shows how to read and write `Double` data to memory by using the `BinaryReader` and <xref:System.IO.BinaryWriter> classes on top of the <xref:System.IO.MemoryStream> class. `MemoryStream` only reads and writes `Byte` data.  \n  \n [!CODE [System.IO.BinaryReaderWriter.RWDouble#1](../../add/codesnippet/system.io.binaryreaderwriter.md)]"
  syntax:
    content: public virtual double ReadDouble ();
    parameters: []
    return:
      type: System.Double
      description: An 8-byte floating point value read from the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadInt16
  id: ReadInt16
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadInt16()
  nameWithType: BinaryReader.ReadInt16()
  fullName: System.IO.BinaryReader.ReadInt16()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n `BinaryReader` reads this data type in little-endian format.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: public virtual short ReadInt16 ();
    parameters: []
    return:
      type: System.Int16
      description: A 2-byte signed integer read from the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadInt32
  id: ReadInt32
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadInt32()
  nameWithType: BinaryReader.ReadInt32()
  fullName: System.IO.BinaryReader.ReadInt32()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n <xref:System.IO.BinaryReader> reads this data type in little-endian format.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following code example demonstrates how to store and retrieve application settings in a file.  \n  \n [!CODE [System.IO.BinaryReaderWriter#1](../CodeSnippet/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter#1)]"
  syntax:
    content: public virtual int ReadInt32 ();
    parameters: []
    return:
      type: System.Int32
      description: A 4-byte signed integer read from the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadInt64
  id: ReadInt64
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadInt64()
  nameWithType: BinaryReader.ReadInt64()
  fullName: System.IO.BinaryReader.ReadInt64()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n `BinaryReader` reads this data type in little-endian format.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: public virtual long ReadInt64 ();
    parameters: []
    return:
      type: System.Int64
      description: An 8-byte signed integer read from the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadSByte
  id: ReadSByte
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadSByte()
  nameWithType: BinaryReader.ReadSByte()
  fullName: System.IO.BinaryReader.ReadSByte()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a signed byte from this stream and advances the current position of the stream by one byte.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: public virtual sbyte ReadSByte ();
    parameters: []
    return:
      type: System.SByte
      description: A signed byte read from the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadSingle
  id: ReadSingle
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadSingle()
  nameWithType: BinaryReader.ReadSingle()
  fullName: System.IO.BinaryReader.ReadSingle()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n `BinaryReader` reads this data type in little-endian format.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following code example demonstrates how to store and retrieve application settings in a file.  \n  \n [!CODE [System.IO.BinaryReaderWriter#1](../CodeSnippet/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter#1)]"
  syntax:
    content: public virtual float ReadSingle ();
    parameters: []
    return:
      type: System.Single
      description: A 4-byte floating point value read from the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadString
  id: ReadString
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadString()
  nameWithType: BinaryReader.ReadString()
  fullName: System.IO.BinaryReader.ReadString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following code example demonstrates how to store and retrieve application settings in a file.  \n  \n [!CODE [System.IO.BinaryReaderWriter#1](../CodeSnippet/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter#1)]"
  syntax:
    content: public virtual string ReadString ();
    parameters: []
    return:
      type: System.String
      description: The string being read.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadUInt16
  id: ReadUInt16
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadUInt16()
  nameWithType: BinaryReader.ReadUInt16()
  fullName: System.IO.BinaryReader.ReadUInt16()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n `BinaryReader` reads this data type in little-endian format.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: public virtual ushort ReadUInt16 ();
    parameters: []
    return:
      type: System.UInt16
      description: A 2-byte unsigned integer read from this stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadUInt32
  id: ReadUInt32
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadUInt32()
  nameWithType: BinaryReader.ReadUInt32()
  fullName: System.IO.BinaryReader.ReadUInt32()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n `BinaryReader` reads this data type in little-endian format.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: public virtual uint ReadUInt32 ();
    parameters: []
    return:
      type: System.UInt32
      description: A 4-byte unsigned integer read from this stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.BinaryReader.ReadUInt64
  id: ReadUInt64
  parent: System.IO.BinaryReader
  langs:
  - csharp
  name: ReadUInt64()
  nameWithType: BinaryReader.ReadUInt64()
  fullName: System.IO.BinaryReader.ReadUInt64()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.
  remarks: "<xref:System.IO.BinaryReader> does not restore the file position after an unsuccessful read.  \n  \n `BinaryReader` reads this data type in little-endian format.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: public virtual ulong ReadUInt64 ();
    parameters: []
    return:
      type: System.UInt64
      description: An 8-byte unsigned integer read from this stream.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IO.BinaryReader.#ctor(System.IO.Stream)
  parent: System.IO.BinaryReader
  isExternal: false
  name: BinaryReader(Stream)
  nameWithType: BinaryReader.BinaryReader(Stream)
  fullName: System.IO.BinaryReader.BinaryReader(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)
  parent: System.IO.BinaryReader
  isExternal: false
  name: BinaryReader(Stream,Encoding)
  nameWithType: BinaryReader.BinaryReader(Stream,Encoding)
  fullName: System.IO.BinaryReader.BinaryReader(Stream,Encoding)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  parent: System.IO.BinaryReader
  isExternal: false
  name: BinaryReader(Stream,Encoding,Boolean)
  nameWithType: BinaryReader.BinaryReader(Stream,Encoding,Boolean)
  fullName: System.IO.BinaryReader.BinaryReader(Stream,Encoding,Boolean)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.BinaryReader.BaseStream
  parent: System.IO.BinaryReader
  isExternal: false
  name: BaseStream
  nameWithType: BinaryReader.BaseStream
  fullName: System.IO.BinaryReader.BaseStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.BinaryReader.Close
  parent: System.IO.BinaryReader
  isExternal: false
  name: Close()
  nameWithType: BinaryReader.Close()
  fullName: System.IO.BinaryReader.Close()
- uid: System.IO.BinaryReader.Dispose
  parent: System.IO.BinaryReader
  isExternal: false
  name: Dispose()
  nameWithType: BinaryReader.Dispose()
  fullName: System.IO.BinaryReader.Dispose()
- uid: System.IO.BinaryReader.Dispose(System.Boolean)
  parent: System.IO.BinaryReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: BinaryReader.Dispose(Boolean)
  fullName: System.IO.BinaryReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.BinaryReader.FillBuffer(System.Int32)
  parent: System.IO.BinaryReader
  isExternal: false
  name: FillBuffer(Int32)
  nameWithType: BinaryReader.FillBuffer(Int32)
  fullName: System.IO.BinaryReader.FillBuffer(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.BinaryReader.PeekChar
  parent: System.IO.BinaryReader
  isExternal: false
  name: PeekChar()
  nameWithType: BinaryReader.PeekChar()
  fullName: System.IO.BinaryReader.PeekChar()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.BinaryReader.Read
  parent: System.IO.BinaryReader
  isExternal: false
  name: Read()
  nameWithType: BinaryReader.Read()
  fullName: System.IO.BinaryReader.Read()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.BinaryReader
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: BinaryReader.Read(Byte[],Int32,Int32)
  fullName: System.IO.BinaryReader.Read(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.BinaryReader
  isExternal: false
  name: Read(Char[],Int32,Int32)
  nameWithType: BinaryReader.Read(Char[],Int32,Int32)
  fullName: System.IO.BinaryReader.Read(Char[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.BinaryReader.Read7BitEncodedInt
  parent: System.IO.BinaryReader
  isExternal: false
  name: Read7BitEncodedInt()
  nameWithType: BinaryReader.Read7BitEncodedInt()
  fullName: System.IO.BinaryReader.Read7BitEncodedInt()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.BinaryReader.ReadBoolean
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadBoolean()
  nameWithType: BinaryReader.ReadBoolean()
  fullName: System.IO.BinaryReader.ReadBoolean()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.BinaryReader.ReadByte
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadByte()
  nameWithType: BinaryReader.ReadByte()
  fullName: System.IO.BinaryReader.ReadByte()
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.BinaryReader.ReadBytes(System.Int32)
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadBytes(Int32)
  nameWithType: BinaryReader.ReadBytes(Int32)
  fullName: System.IO.BinaryReader.ReadBytes(Int32)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.BinaryReader.ReadChar
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadChar()
  nameWithType: BinaryReader.ReadChar()
  fullName: System.IO.BinaryReader.ReadChar()
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.IO.BinaryReader.ReadChars(System.Int32)
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadChars(Int32)
  nameWithType: BinaryReader.ReadChars(Int32)
  fullName: System.IO.BinaryReader.ReadChars(Int32)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.BinaryReader.ReadDecimal
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadDecimal()
  nameWithType: BinaryReader.ReadDecimal()
  fullName: System.IO.BinaryReader.ReadDecimal()
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.IO.BinaryReader.ReadDouble
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadDouble()
  nameWithType: BinaryReader.ReadDouble()
  fullName: System.IO.BinaryReader.ReadDouble()
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.IO.BinaryReader.ReadInt16
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadInt16()
  nameWithType: BinaryReader.ReadInt16()
  fullName: System.IO.BinaryReader.ReadInt16()
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IO.BinaryReader.ReadInt32
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadInt32()
  nameWithType: BinaryReader.ReadInt32()
  fullName: System.IO.BinaryReader.ReadInt32()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.BinaryReader.ReadInt64
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadInt64()
  nameWithType: BinaryReader.ReadInt64()
  fullName: System.IO.BinaryReader.ReadInt64()
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.BinaryReader.ReadSByte
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadSByte()
  nameWithType: BinaryReader.ReadSByte()
  fullName: System.IO.BinaryReader.ReadSByte()
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.IO.BinaryReader.ReadSingle
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadSingle()
  nameWithType: BinaryReader.ReadSingle()
  fullName: System.IO.BinaryReader.ReadSingle()
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.IO.BinaryReader.ReadString
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadString()
  nameWithType: BinaryReader.ReadString()
  fullName: System.IO.BinaryReader.ReadString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.BinaryReader.ReadUInt16
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadUInt16()
  nameWithType: BinaryReader.ReadUInt16()
  fullName: System.IO.BinaryReader.ReadUInt16()
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.IO.BinaryReader.ReadUInt32
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadUInt32()
  nameWithType: BinaryReader.ReadUInt32()
  fullName: System.IO.BinaryReader.ReadUInt32()
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IO.BinaryReader.ReadUInt64
  parent: System.IO.BinaryReader
  isExternal: false
  name: ReadUInt64()
  nameWithType: BinaryReader.ReadUInt64()
  fullName: System.IO.BinaryReader.ReadUInt64()
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.IO.BinaryReader.Dispose*
  parent: System.IO.BinaryReader
  isExternal: false
  nameWithType: BinaryReader.
- uid: System.IO.BinaryReader.Read*
  parent: System.IO.BinaryReader
  isExternal: false
  nameWithType: BinaryReader.
