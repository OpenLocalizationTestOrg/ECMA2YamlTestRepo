### YamlMime:ManagedReference
items:
- uid: System.IO.Stream
  id: Stream
  children:
  - System.IO.Stream.#ctor
  - System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Stream.CanRead
  - System.IO.Stream.CanSeek
  - System.IO.Stream.CanTimeout
  - System.IO.Stream.CanWrite
  - System.IO.Stream.Close
  - System.IO.Stream.CopyTo(System.IO.Stream)
  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.CreateWaitHandle
  - System.IO.Stream.Dispose
  - System.IO.Stream.Dispose(System.Boolean)
  - System.IO.Stream.EndRead(System.IAsyncResult)
  - System.IO.Stream.EndWrite(System.IAsyncResult)
  - System.IO.Stream.Flush
  - System.IO.Stream.FlushAsync
  - System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.Stream.Length
  - System.IO.Stream.Null
  - System.IO.Stream.ObjectInvariant
  - System.IO.Stream.Position
  - System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.ReadByte
  - System.IO.Stream.ReadTimeout
  - System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.Stream.SetLength(System.Int64)
  - System.IO.Stream.Synchronized(System.IO.Stream)
  - System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.WriteByte(System.Byte)
  - System.IO.Stream.WriteTimeout
  langs:
  - csharp
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
  type: Class
  summary: "Provides a generic view of a sequence of bytes. This is an abstract class.  \n  \n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/stream.cs#f956b0c07e86df64). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Stream is the abstract base class of all streams. A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket. The Stream class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.  \n  \n Streams involve three fundamental operations:  \n  \n-   You can read from streams. Reading is the transfer of data from a stream into a data structure, such as an array of bytes.  \n  \n-   You can write to streams. Writing is the transfer of data from a data structure into a stream.  \n  \n-   Streams can support seeking. Seeking refers to querying and modifying the current position within a stream. Seek capability depends on the kind of backing store a stream has. For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.  \n  \n Some of the more commonly used streams that inherit from Stream are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.  \n  \n Depending on the underlying data source or repository, streams might support only some of these capabilities. You can query a stream for its capabilities by using the <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, and <xref:System.IO.Stream.CanSeek%2A> properties of the Stream class.  \n  \n The <xref:System.IO.Stream.Read%2A> and <xref:System.IO.Stream.Write%2A> methods read and write data in a variety of formats. For streams that support seeking, use the <xref:System.IO.Stream.Seek%2A> and <xref:System.IO.Stream.SetLength%2A> methods and the <xref:System.IO.Stream.Position%2A> and <xref:System.IO.Stream.Length%2A> properties to query and modify the current position and length of a stream.  \n  \n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \n  \n Disposing a Stream object flushes any buffered data, and essentially calls the <xref:System.IO.Stream.Flush%2A> method for you. <xref:System.IO.Stream.Dispose%2A> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering. The <xref:System.IO.BufferedStream> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.  \n  \n Starting with the [!INCLUDE[net_v45](../../add/includes/net-v45-md.md)], the Stream class includes async methods to simplify asynchronous operations. An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>. These methods enable you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../add/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../Token/desktop_appname_md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n When used in a [!INCLUDE[win8_appname_long](../../add/includes/win8-appname-long-md.md)] app, Stream includes two extension methods: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>. These methods convert a Stream object to a stream in the [!INCLUDE[wrt](../../add/includes/wrt-md.md)]. You can also convert a stream in the [!INCLUDE[wrt](../../add/includes/wrt-md.md)] to a Stream object by using the <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> methods. For more information, see [How to: Convert Between .NET Framework Streams and Windows Runtime Streams](../Topic/How%20to:%20Convert%20Between%20.NET%20Framework%20Streams%20and%20Windows%20Runtime%20Streams.md)  \n  \n Some stream implementations perform local buffering of the underlying data to improve performance. For such streams, you can use the <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.FlushAsync%2A> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.  \n  \n If you need a stream with no backing store (also known as a bit bucket), use the <xref:System.IO.Stream.Null> field to retrieve an instance of a stream that is designed for this purpose."
  example:
  - "## Examples  \n The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another directory. The <xref:System.IO.FileStream> class derives from the Stream class. Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method.  \n  \n [!CODE [Asynchronous_File_IO_async#1](../CodeSnippet/VS_Snippets_CLR/Asynchronous_File_IO_async#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Stream : MarshalByRefObject, IDisposable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.#ctor
  id: '#ctor'
  parent: System.IO.Stream
  langs:
  - csharp
  name: Stream()
  nameWithType: Stream.Stream()
  fullName: System.IO.Stream.Stream()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Initializes a new instance of the <see cref="T:System.IO.Stream"> class.
  remarks: "<xref:System.IO.Stream> is the abstract base class of all streams.  \n  \n Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>."
  syntax:
    content: protected Stream ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: Stream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.Stream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Begins an asynchronous read operation. (Consider using <xref:System.IO.Stream.ReadAsync%2A> instead; see the Remarks section.)
  remarks: "In the .NET Framework 4 and earlier versions, you have to use methods such as BeginRead and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](../../add/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \n  \n The default implementation of `BeginRead` on a stream calls the <xref:System.IO.Stream.Read%2A> method synchronously, which means that `Read` might block on some streams. However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously. Therefore, calls to `BeginRead` will not block on those streams. You can override `BeginRead` (by using async delegates, for example) to provide asynchronous behavior.  \n  \n Pass the `IAsyncResult` return value to the <xref:System.IO.Stream.EndRead%2A> method of the stream to determine how many bytes were read and to release operating system resources used for reading. <xref:System.IO.Stream.EndRead%2A> must be called once for every call to BeginRead. You can do this either by using the same code that called `BeginRead` or in a callback passed to `BeginRead`.  \n  \n The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.  \n  \n Multiple simultaneous asynchronous requests render the request completion order uncertain.  \n  \n Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.  \n  \n If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginRead`. Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndRead`."
  syntax:
    content: public virtual IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to read the data into.
    - id: offset
      type: System.Int32
      description: The byte offset in  at which to begin writing data read from the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    - id: callback
      type: System.AsyncCallback
      description: An optional asynchronous callback, to be called when the read is complete.
    - id: state
      type: System.Object
      description: A user-provided object that distinguishes this particular asynchronous read request from other requests.
    return:
      type: System.IAsyncResult
      description: An <xref:System.IAsyncResult> that represents the asynchronous read, which could still be pending.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: Stream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.Stream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Begins an asynchronous write operation. (Consider using <xref:System.IO.Stream.WriteAsync%2A> instead; see the Remarks section.)
  remarks: "In the .NET Framework 4 and earlier versions, you have to use methods such as BeginWrite and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](../../add/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \n  \n The default implementation of `BeginWrite` on a stream calls the <xref:System.IO.Stream.Write%2A> method synchronously, which means that `Write` might block on some streams. However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously. Therefore, calls to `BeginWrite` will not block on those streams. You can override `BeginWrite` (by using async delegates, for example) to provide asynchronous behavior.  \n  \n Pass the `IAsyncResult` returned by the current method to <xref:System.IO.Stream.EndWrite%2A> to ensure that the write completes and frees resources appropriately. <xref:System.IO.Stream.EndWrite%2A> must be called once for every call to BeginWrite. You can do this either by using the same code that called `BeginWrite` or in a callback passed to `BeginWrite`. If an error occurs during an asynchronous write, an exception will not be thrown until `EndWrite` is called with the `IAsyncResult` returned by this method.  \n  \n If a stream is writable, writing at the end of the stream expands the stream.  \n  \n The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes. Multiple simultaneous asynchronous requests render the request completion order uncertain.  \n  \n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.  \n  \n If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginWrite`. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndWrite`."
  syntax:
    content: public virtual IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write data from.
    - id: offset
      type: System.Int32
      description: The byte offset in  from which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write.
    - id: callback
      type: System.AsyncCallback
      description: An optional asynchronous callback, to be called when the write is complete.
    - id: state
      type: System.Object
      description: A user-provided object that distinguishes this particular asynchronous write request from other requests.
    return:
      type: System.IAsyncResult
      description: An `IAsyncResult` that represents the asynchronous write, which could still be pending.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.CanRead
  id: CanRead
  parent: System.IO.Stream
  langs:
  - csharp
  name: CanRead
  nameWithType: Stream.CanRead
  fullName: System.IO.Stream.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: When overridden in a derived class, gets a value indicating whether the current stream supports reading.
  remarks: "If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, and <xref:System.IO.Stream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`."
  example:
  - "## Examples  \n The following is an example of using the `CanRead` property.  \n  \n [!CODE [Classic FileStream.CanRead Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example#1)]"
  syntax:
    content: public abstract bool CanRead { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.CanSeek
  id: CanSeek
  parent: System.IO.Stream
  langs:
  - csharp
  name: CanSeek
  nameWithType: Stream.CanSeek
  fullName: System.IO.Stream.CanSeek
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
  remarks: "If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, and <xref:System.IO.Stream.Seek%2A> throw a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`."
  syntax:
    content: public abstract bool CanSeek { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.CanTimeout
  id: CanTimeout
  parent: System.IO.Stream
  langs:
  - csharp
  name: CanTimeout
  nameWithType: Stream.CanTimeout
  fullName: System.IO.Stream.CanTimeout
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets a value that determines whether the current stream can time out.
  remarks: The CanTimeout property always returns `false`. Some stream implementations require different behavior, such as <xref:System.Net.Sockets.NetworkStream>, which times out if network connectivity is interrupted or lost. If you are implementing a stream that must be able to time out, this property should be overridden to return `true`.
  syntax:
    content: public virtual bool CanTimeout { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.CanWrite
  id: CanWrite
  parent: System.IO.Stream
  langs:
  - csharp
  name: CanWrite
  nameWithType: Stream.CanWrite
  fullName: System.IO.Stream.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: When overridden in a derived class, gets a value indicating whether the current stream supports writing.
  remarks: "If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`."
  example:
  - "## Examples  \n The following is an example of using the `CanWrite` property.  \n  \n [!CODE [Classic Stream.CanWrite Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example#1)]"
  syntax:
    content: public abstract bool CanWrite { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Close
  id: Close
  parent: System.IO.Stream
  langs:
  - csharp
  name: Close()
  nameWithType: Stream.Close()
  fullName: System.IO.Stream.Close()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.
  remarks: "This method calls <xref:System.IO.Stream.Dispose%2A>, specifying `true` to release all resources. You do not have to specifically call the Close method. Instead, ensure that every <xref:System.IO.Stream> object is properly disposed. You can declare <xref:System.IO.Stream> objects within a `using` block (or `Using` block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <xref:System.IO.Stream.Dispose%2A> method.  \n  \n Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <xref:System.IO.Stream.Flush%2A> or `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.  \n  \n Attempts to manipulate the stream after the stream has been closed might throw an <xref:System.ObjectDisposedException>."
  syntax:
    content: public virtual void Close ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.CopyTo(System.IO.Stream)
  id: CopyTo(System.IO.Stream)
  parent: System.IO.Stream
  langs:
  - csharp
  name: CopyTo(Stream)
  nameWithType: Stream.CopyTo(Stream)
  fullName: System.IO.Stream.CopyTo(Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads the bytes from the current stream and writes them to another stream.
  remarks: Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.
  example:
  - "## Examples  \n The following example copies the contents of a <xref:System.IO.FileStream> to a <xref:System.IO.MemoryStream>.  \n  \n [!CODE [System.IO.Stream.CopyTo#1](../CodeSnippet/VS_Snippets_CLR_System/system.io.stream.copyto#1)]"
  syntax:
    content: public void CopyTo (System.IO.Stream destination);
    parameters:
    - id: destination
      type: System.IO.Stream
      description: The stream to which the contents of the current stream will be copied.
  overload: System.IO.Stream.CopyTo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  id: CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  name: CopyTo(Stream,Int32)
  nameWithType: Stream.CopyTo(Stream,Int32)
  fullName: System.IO.Stream.CopyTo(Stream,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.
  remarks: Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.
  syntax:
    content: public void CopyTo (System.IO.Stream destination, int bufferSize);
    parameters:
    - id: destination
      type: System.IO.Stream
      description: The stream to which the contents of the current stream will be copied.
    - id: bufferSize
      type: System.Int32
      description: The size of the buffer. This value must be greater than zero. The default size is 81920.
  overload: System.IO.Stream.CopyTo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
  id: CopyToAsync(System.IO.Stream)
  parent: System.IO.Stream
  langs:
  - csharp
  name: CopyToAsync(Stream)
  nameWithType: Stream.CopyToAsync(Stream)
  fullName: System.IO.Stream.CopyToAsync(Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Asynchronously reads the bytes from the current stream and writes them to another stream.
  remarks: "The CopyToAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../add/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../Token/desktop_appname_md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Copying begins at the current position in the current stream."
  example:
  - "## Examples  \n The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another. The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class.  Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method  \n  \n [!CODE [Asynchronous_File_IO_async#1](../CodeSnippet/VS_Snippets_CLR/Asynchronous_File_IO_async#1)]"
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination);
    parameters:
    - id: destination
      type: System.IO.Stream
      description: The stream to which the contents of the current stream will be copied.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous copy operation.
  overload: System.IO.Stream.CopyToAsync*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  id: CopyToAsync(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  name: CopyToAsync(Stream,Int32)
  nameWithType: Stream.CopyToAsync(Stream,Int32)
  fullName: System.IO.Stream.CopyToAsync(Stream,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.
  remarks: "The CopyToAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../add/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../Token/desktop_appname_md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Copying begins at the current position in the current stream.  \n  \n For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload."
  syntax:
    content: public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize);
    parameters:
    - id: destination
      type: System.IO.Stream
      description: The stream to which the contents of the current stream will be copied.
    - id: bufferSize
      type: System.Int32
      description: The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous copy operation.
  overload: System.IO.Stream.CopyToAsync*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  id: CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  langs:
  - csharp
  name: CopyToAsync(Stream,Int32,CancellationToken)
  nameWithType: Stream.CopyToAsync(Stream,Int32,CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(Stream,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.
  remarks: "The CopyToAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../add/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../Token/desktop_appname_md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n Copying begins at the current position in the current stream.  \n  \n For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload."
  syntax:
    content: public virtual System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: destination
      type: System.IO.Stream
      description: The stream to which the contents of the current stream will be copied.
    - id: bufferSize
      type: System.Int32
      description: The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref:System.Threading.CancellationToken.None%2A>.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous copy operation.
  overload: System.IO.Stream.CopyToAsync*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.CreateWaitHandle
  id: CreateWaitHandle
  parent: System.IO.Stream
  langs:
  - csharp
  name: CreateWaitHandle()
  nameWithType: Stream.CreateWaitHandle()
  fullName: System.IO.Stream.CreateWaitHandle()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Allocates a <xref:System.Threading.WaitHandle> object.
  remarks: "When called for the first time, the current method creates a `WaitHandle` object and returns it. On subsequent calls, `CreateWaitHandle` returns a reference to a new wait handle.  \n  \n Use this method if you implement the asynchronous methods and require a way of blocking in <xref:System.IO.Stream.EndRead%2A> or <xref:System.IO.Stream.EndWrite%2A> until the asynchronous operation is complete."
  syntax:
    content: protected virtual System.Threading.WaitHandle CreateWaitHandle ();
    parameters: []
    return:
      type: System.Threading.WaitHandle
      description: A reference to the allocated `WaitHandle`.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Dispose
  id: Dispose
  parent: System.IO.Stream
  langs:
  - csharp
  name: Dispose()
  nameWithType: Stream.Dispose()
  fullName: System.IO.Stream.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Releases all resources used by the <see cref="T:System.IO.Stream">.
  remarks: "This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.  \n  \n Calling `Dispose` allows the resources used by the <xref:System.IO.Stream> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IO.Stream.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Stream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Stream.Dispose(Boolean)
  fullName: System.IO.Stream.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"> and optionally releases the managed resources.
  remarks: "You should release all resources by specifying `true` for . When  is `true`, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.  This may not be possible when called from a finalizer due a lack of ordering among finalizers.  \n  \n If your stream is using an operating system handle to communicate with its source, consider using a subclass of <xref:System.Runtime.InteropServices.SafeHandle> for this purpose.  \n  \n This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected Dispose method with the  parameter set to `true`. <xref:System.Object.Finalize%2A> invokes Dispose with  set to `false`."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'
  overload: System.IO.Stream.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.IO.Stream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: Stream.EndRead(IAsyncResult)
  fullName: System.IO.Stream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Waits for the pending asynchronous read to complete. (Consider using <xref:System.IO.Stream.ReadAsync%2A> instead; see the Remarks section.)
  remarks: "In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and EndRead to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](../../add/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \n  \n Call `EndRead` to determine how many bytes were read from the stream.  \n  \n `EndRead` can be called once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginRead%2A>.  \n  \n This method blocks until the I/O operation has completed."
  syntax:
    content: public virtual int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The reference to the pending asynchronous request to finish.
    return:
      type: System.Int32
      description: The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.IO.Stream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: Stream.EndWrite(IAsyncResult)
  fullName: System.IO.Stream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Ends an asynchronous write operation. (Consider using <xref:System.IO.Stream.WriteAsync%2A> instead; see the Remarks section.)
  remarks: "In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and EndWrite to implement asynchronous I/O operations. These methods are still available in the [!INCLUDE[net_v45](../../add/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.  \n  \n `EndWrite` must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginWrite%2A>.  \n  \n This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to `EndWrite`. Exceptions thrown by the thread pool thread will not be visible when calling `EndWrite`."
  syntax:
    content: public virtual void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: A reference to the outstanding asynchronous I/O request.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Flush
  id: Flush
  parent: System.IO.Stream
  langs:
  - csharp
  name: Flush()
  nameWithType: Stream.Flush()
  fullName: System.IO.Stream.Flush()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
  remarks: "Override `Flush` on streams that implement a buffer. Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both. Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking). For additional information see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n When using the <xref:System.IO.StreamWriter> or <xref:System.IO.BinaryWriter> class, do not flush the base <xref:System.IO.Stream> object. Instead, use the class's Flush or <xref:System.IO.Stream.Close%2A> method, which makes sure that the data is flushed to the underlying stream first and then written to the file."
  syntax:
    content: public abstract void Flush ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.FlushAsync
  id: FlushAsync
  parent: System.IO.Stream
  langs:
  - csharp
  name: FlushAsync()
  nameWithType: Stream.FlushAsync()
  fullName: System.IO.Stream.FlushAsync()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.
  remarks: If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the FlushAsync method will not flush the buffer.
  syntax:
    content: public System.Threading.Tasks.Task FlushAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous flush operation.
  overload: System.IO.Stream.FlushAsync*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.Stream
  langs:
  - csharp
  name: FlushAsync(CancellationToken)
  nameWithType: Stream.FlushAsync(CancellationToken)
  fullName: System.IO.Stream.FlushAsync(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.
  remarks: "If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the FlushAsync method will not flush the buffer."
  syntax:
    content: public virtual System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref:System.Threading.CancellationToken.None%2A>.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous flush operation.
  overload: System.IO.Stream.FlushAsync*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Length
  id: Length
  parent: System.IO.Stream
  langs:
  - csharp
  name: Length
  nameWithType: Stream.Length
  fullName: System.IO.Stream.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: When overridden in a derived class, gets the length in bytes of the stream.
  remarks: To be added.
  syntax:
    content: public abstract long Length { get; }
    return:
      type: System.Int64
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Null
  id: Null
  parent: System.IO.Stream
  langs:
  - csharp
  name: Null
  nameWithType: Stream.Null
  fullName: System.IO.Stream.Null
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: A `Stream` with no backing store.
  remarks: Use `Null` to redirect output to a stream that will not consume any operating system resources. When the methods of `Stream` that provide writing are invoked on `Null`, the call simply returns, and no data is written. `Null` also implements a `Read` method that returns zero without reading data.
  syntax:
    content: public static readonly System.IO.Stream Null;
    return:
      type: System.IO.Stream
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.ObjectInvariant
  id: ObjectInvariant
  parent: System.IO.Stream
  langs:
  - csharp
  name: ObjectInvariant()
  nameWithType: Stream.ObjectInvariant()
  fullName: System.IO.Stream.ObjectInvariant()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Provides support for a <xref:System.Diagnostics.Contracts.Contract>.
  remarks: To be added.
  syntax:
    content: protected virtual void ObjectInvariant ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Position
  id: Position
  parent: System.IO.Stream
  langs:
  - csharp
  name: Position
  nameWithType: Stream.Position
  fullName: System.IO.Stream.Position
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: When overridden in a derived class, gets or sets the position within the current stream.
  remarks: "The stream must support seeking to get or set the position. Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the stream supports seeking.  \n  \n Seeking to any location beyond the length of the stream is supported.  \n  \n The `Position` property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both."
  syntax:
    content: public abstract long Position { get; set; }
    return:
      type: System.Int64
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: Stream.Read(Byte[],Int32,Int32)
  fullName: System.IO.Stream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
  remarks: "Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading. Use the <xref:System.IO.Stream.ReadAsync%2A> method to read asynchronously from the current stream.  \n  \n Implementations of this method read a maximum of  bytes from the current stream and store them in  beginning at . The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged. Implementations return the number of bytes read. The implementation will block until at least one byte of data can be read, in the event that no data is available. Readreturns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.  \n  \n Use <xref:System.IO.BinaryReader> for reading primitive data types."
  example:
  - "## Examples  \n The following example shows how to use Read to read a block of data.  \n  \n [!CODE [Classic Stream.Read Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Stream.Read Example#1)]"
  syntax:
    content: public abstract int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of bytes. When this method returns, the buffer contains the specified byte array with the values between  and ( +  - 1) replaced by the bytes read from the current source.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in  at which to begin storing the data read from the current stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to be read from the current stream.
    return:
      type: System.Int32
      description: The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  name: ReadAsync(Byte[],Int32,Int32)
  nameWithType: Stream.ReadAsync(Byte[],Int32,Int32)
  fullName: System.IO.Stream.ReadAsync(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
  remarks: "The ReadAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../add/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../Token/desktop_appname_md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading."
  example:
  - "## Examples  \n The following example shows how to read from a file asynchronously. The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.  \n  \n [!CODE [Asynchronous_File_IO_async#4](../CodeSnippet/VS_Snippets_CLR/Asynchronous_File_IO_async#4)]"
  syntax:
    content: public System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write the data into.
    - id: offset
      type: System.Int32
      description: The byte offset in  at which to begin writing data from the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the  parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
  overload: System.IO.Stream.ReadAsync*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  langs:
  - csharp
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: Stream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.Stream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.
  remarks: "The ReadAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../add/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../Token/desktop_appname_md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n For an example, see the [ReadAsync(Byte\\[\\], Int32, Int32)](assetId:///M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)?qualifyHint=False&autoUpgrade=False) overload."
  syntax:
    content: public virtual System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write the data into.
    - id: offset
      type: System.Int32
      description: The byte offset in  at which to begin writing data from the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref:System.Threading.CancellationToken.None%2A>.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the  parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
  overload: System.IO.Stream.ReadAsync*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.ReadByte
  id: ReadByte
  parent: System.IO.Stream
  langs:
  - csharp
  name: ReadByte()
  nameWithType: Stream.ReadByte()
  fullName: System.IO.Stream.ReadByte()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
  remarks: "Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.  \n  \n Attempts to manipulate the stream after the stream has been closed could throw an <xref:System.ObjectDisposedException>."
  syntax:
    content: public virtual int ReadByte ();
    parameters: []
    return:
      type: System.Int32
      description: The unsigned byte cast to an `Int32`, or -1 if at the end of the stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.ReadTimeout
  id: ReadTimeout
  parent: System.IO.Stream
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: Stream.ReadTimeout
  fullName: System.IO.Stream.ReadTimeout
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
  remarks: To be added.
  syntax:
    content: public virtual int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Stream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: Stream.Seek(Int64,SeekOrigin)
  fullName: System.IO.Stream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: When overridden in a derived class, sets the position within the current stream.
  remarks: "Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the current instance supports seeking.  \n  \n If  is negative, the new position is required to precede the position specified by  by the number of bytes specified by . If  is zero (0), the new position is required to be the position specified by . If  is positive, the new position is required to follow the position specified by  by the number of bytes specified by .  \n  \n Classes derived from `Stream` that support seeking must override this method to provide the functionality described above.  \n  \n Seeking to any location beyond the length of the stream is supported."
  syntax:
    content: public abstract long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: A byte offset relative to the  parameter.
    - id: origin
      type: System.IO.SeekOrigin
      description: A value of type <see cref="T:System.IO.SeekOrigin"> indicating the reference point used to obtain the new position.
    return:
      type: System.Int64
      description: The new position within the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.Stream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: Stream.SetLength(Int64)
  fullName: System.IO.Stream.SetLength(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: When overridden in a derived class, sets the length of the current stream.
  remarks: "If the specified value is less than the current length of the stream, the stream is truncated. If the specified value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are not defined.  \n  \n A stream must support both writing and seeking for `SetLength` to work.  \n  \n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.Stream.CanSeek%2A> property to determine whether seeking is supported."
  syntax:
    content: public abstract void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The desired length of the current stream in bytes.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Synchronized(System.IO.Stream)
  id: Synchronized(System.IO.Stream)
  parent: System.IO.Stream
  langs:
  - csharp
  name: Synchronized(Stream)
  nameWithType: Stream.Synchronized(Stream)
  fullName: System.IO.Stream.Synchronized(Stream)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Creates a thread-safe (synchronized) wrapper around the specified <see cref="T:System.IO.Stream"> object.
  remarks: This method returns a class that wraps the specified <xref:System.IO.Stream> object and restricts access to it from multiple threads. All access to the <xref:System.IO.Stream> object will be thread safe.
  syntax:
    content: public static System.IO.Stream Synchronized (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The <see cref="T:System.IO.Stream"> object to synchronize.
    return:
      type: System.IO.Stream
      description: A thread-safe <see cref="T:System.IO.Stream"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: Stream.Write(Byte[],Int32,Int32)
  fullName: System.IO.Stream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
  remarks: "Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing. Use the <xref:System.IO.Stream.WriteAsync%2A> method to write asynchronously to the current stream.  \n  \n If the write operation is successful, the position within the stream advances by the number of bytes written. If an exception occurs, the position within the stream remains unchanged."
  syntax:
    content: public abstract void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of bytes. This method copies  bytes from  to the current stream.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in  at which to begin copying bytes to the current stream.
    - id: count
      type: System.Int32
      description: The number of bytes to be written to the current stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  langs:
  - csharp
  name: WriteAsync(Byte[],Int32,Int32)
  nameWithType: Stream.WriteAsync(Byte[],Int32,Int32)
  fullName: System.IO.Stream.WriteAsync(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
  remarks: "The WriteAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../add/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../Token/desktop_appname_md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing."
  example:
  - "## Examples  \n The following example shows how to write asynchronously to a file. The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.  \n  \n [!CODE [Asynchronous_File_IO_async#3](../CodeSnippet/VS_Snippets_CLR/Asynchronous_File_IO_async#3)]"
  syntax:
    content: public System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write data from.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in  from which to begin copying bytes to the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous write operation.
  overload: System.IO.Stream.WriteAsync*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  langs:
  - csharp
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: Stream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.Stream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.
  remarks: "The WriteAsync method enables you to perform resource-intensive I/O operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](../../add/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](../Token/desktop_appname_md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n For an example, see the [WriteAsync(Byte\\[\\], Int32, Int32)](assetId:///M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)?qualifyHint=False&autoUpgrade=False) overload."
  syntax:
    content: public virtual System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write data from.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in  from which to begin copying bytes to the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref:System.Threading.CancellationToken.None%2A>.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous write operation.
  overload: System.IO.Stream.WriteAsync*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.Stream
  langs:
  - csharp
  name: WriteByte(Byte)
  nameWithType: Stream.WriteByte(Byte)
  fullName: System.IO.Stream.WriteByte(Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Writes a byte to the current position in the stream and advances the position within the stream by one byte.
  remarks: Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.
  syntax:
    content: public virtual void WriteByte (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The byte to write to the stream.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.Stream.WriteTimeout
  id: WriteTimeout
  parent: System.IO.Stream
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: Stream.WriteTimeout
  fullName: System.IO.Stream.WriteTimeout
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
  remarks: To be added.
  syntax:
    content: public virtual int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.IO.Stream.#ctor
  parent: System.IO.Stream
  isExternal: false
  name: Stream()
  nameWithType: Stream.Stream()
  fullName: System.IO.Stream.Stream()
- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: Stream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.Stream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: Stream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.IO.Stream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.Stream.CanRead
  parent: System.IO.Stream
  isExternal: false
  name: CanRead
  nameWithType: Stream.CanRead
  fullName: System.IO.Stream.CanRead
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Stream.CanSeek
  parent: System.IO.Stream
  isExternal: false
  name: CanSeek
  nameWithType: Stream.CanSeek
  fullName: System.IO.Stream.CanSeek
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Stream.CanTimeout
  parent: System.IO.Stream
  isExternal: false
  name: CanTimeout
  nameWithType: Stream.CanTimeout
  fullName: System.IO.Stream.CanTimeout
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Stream.CanWrite
  parent: System.IO.Stream
  isExternal: false
  name: CanWrite
  nameWithType: Stream.CanWrite
  fullName: System.IO.Stream.CanWrite
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Stream.Close
  parent: System.IO.Stream
  isExternal: false
  name: Close()
  nameWithType: Stream.Close()
  fullName: System.IO.Stream.Close()
- uid: System.IO.Stream.CopyTo(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: CopyTo(Stream)
  nameWithType: Stream.CopyTo(Stream)
  fullName: System.IO.Stream.CopyTo(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: false
  name: CopyTo(Stream,Int32)
  nameWithType: Stream.CopyTo(Stream,Int32)
  fullName: System.IO.Stream.CopyTo(Stream,Int32)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: CopyToAsync(Stream)
  nameWithType: Stream.CopyToAsync(Stream)
  fullName: System.IO.Stream.CopyToAsync(Stream)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: false
  name: CopyToAsync(Stream,Int32)
  nameWithType: Stream.CopyToAsync(Stream,Int32)
  fullName: System.IO.Stream.CopyToAsync(Stream,Int32)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: false
  name: CopyToAsync(Stream,Int32,CancellationToken)
  nameWithType: Stream.CopyToAsync(Stream,Int32,CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(Stream,Int32,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.IO.Stream.CreateWaitHandle
  parent: System.IO.Stream
  isExternal: false
  name: CreateWaitHandle()
  nameWithType: Stream.CreateWaitHandle()
  fullName: System.IO.Stream.CreateWaitHandle()
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.IO.Stream.Dispose
  parent: System.IO.Stream
  isExternal: false
  name: Dispose()
  nameWithType: Stream.Dispose()
  fullName: System.IO.Stream.Dispose()
- uid: System.IO.Stream.Dispose(System.Boolean)
  parent: System.IO.Stream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Stream.Dispose(Boolean)
  fullName: System.IO.Stream.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Stream.EndRead(System.IAsyncResult)
  parent: System.IO.Stream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: Stream.EndRead(IAsyncResult)
  fullName: System.IO.Stream.EndRead(IAsyncResult)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.IO.Stream.EndWrite(System.IAsyncResult)
  parent: System.IO.Stream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: Stream.EndWrite(IAsyncResult)
  fullName: System.IO.Stream.EndWrite(IAsyncResult)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.IO.Stream.Flush
  parent: System.IO.Stream
  isExternal: false
  name: Flush()
  nameWithType: Stream.Flush()
  fullName: System.IO.Stream.Flush()
- uid: System.IO.Stream.FlushAsync
  parent: System.IO.Stream
  isExternal: false
  name: FlushAsync()
  nameWithType: Stream.FlushAsync()
  fullName: System.IO.Stream.FlushAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: false
  name: FlushAsync(CancellationToken)
  nameWithType: Stream.FlushAsync(CancellationToken)
  fullName: System.IO.Stream.FlushAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.IO.Stream.Length
  parent: System.IO.Stream
  isExternal: false
  name: Length
  nameWithType: Stream.Length
  fullName: System.IO.Stream.Length
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Stream.Null
  parent: System.IO.Stream
  isExternal: false
  name: Null
  nameWithType: Stream.Null
  fullName: System.IO.Stream.Null
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Stream.ObjectInvariant
  parent: System.IO.Stream
  isExternal: false
  name: ObjectInvariant()
  nameWithType: Stream.ObjectInvariant()
  fullName: System.IO.Stream.ObjectInvariant()
- uid: System.IO.Stream.Position
  parent: System.IO.Stream
  isExternal: false
  name: Position
  nameWithType: Stream.Position
  fullName: System.IO.Stream.Position
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: Stream.Read(Byte[],Int32,Int32)
  fullName: System.IO.Stream.Read(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: false
  name: ReadAsync(Byte[],Int32,Int32)
  nameWithType: Stream.ReadAsync(Byte[],Int32,Int32)
  fullName: System.IO.Stream.ReadAsync(Byte[],Int32,Int32)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: false
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: Stream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.Stream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.IO.Stream.ReadByte
  parent: System.IO.Stream
  isExternal: false
  name: ReadByte()
  nameWithType: Stream.ReadByte()
  fullName: System.IO.Stream.ReadByte()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Stream.ReadTimeout
  parent: System.IO.Stream
  isExternal: false
  name: ReadTimeout
  nameWithType: Stream.ReadTimeout
  fullName: System.IO.Stream.ReadTimeout
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Stream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: Stream.Seek(Int64,SeekOrigin)
  fullName: System.IO.Stream.Seek(Int64,SeekOrigin)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.Stream.SetLength(System.Int64)
  parent: System.IO.Stream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: Stream.SetLength(Int64)
  fullName: System.IO.Stream.SetLength(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.Stream.Synchronized(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: Synchronized(Stream)
  nameWithType: Stream.Synchronized(Stream)
  fullName: System.IO.Stream.Synchronized(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: Stream.Write(Byte[],Int32,Int32)
  fullName: System.IO.Stream.Write(Byte[],Int32,Int32)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: false
  name: WriteAsync(Byte[],Int32,Int32)
  nameWithType: Stream.WriteAsync(Byte[],Int32,Int32)
  fullName: System.IO.Stream.WriteAsync(Byte[],Int32,Int32)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: false
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: Stream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.Stream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.IO.Stream.WriteByte(System.Byte)
  parent: System.IO.Stream
  isExternal: false
  name: WriteByte(Byte)
  nameWithType: Stream.WriteByte(Byte)
  fullName: System.IO.Stream.WriteByte(Byte)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.Stream.WriteTimeout
  parent: System.IO.Stream
  isExternal: false
  name: WriteTimeout
  nameWithType: Stream.WriteTimeout
  fullName: System.IO.Stream.WriteTimeout
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Stream.CopyTo*
  parent: System.IO.Stream
  isExternal: false
  nameWithType: Stream.
- uid: System.IO.Stream.CopyToAsync*
  parent: System.IO.Stream
  isExternal: false
  nameWithType: Stream.
- uid: System.IO.Stream.Dispose*
  parent: System.IO.Stream
  isExternal: false
  nameWithType: Stream.
- uid: System.IO.Stream.FlushAsync*
  parent: System.IO.Stream
  isExternal: false
  nameWithType: Stream.
- uid: System.IO.Stream.ReadAsync*
  parent: System.IO.Stream
  isExternal: false
  nameWithType: Stream.
- uid: System.IO.Stream.WriteAsync*
  parent: System.IO.Stream
  isExternal: false
  nameWithType: Stream.
