### YamlMime:ManagedReference
items:
- uid: System.IO.FileSystemInfo
  id: FileSystemInfo
  children:
  - System.IO.FileSystemInfo.#ctor
  - System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Delete
  - System.IO.FileSystemInfo.Exists
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.Name
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Refresh
  langs:
  - csharp
  name: FileSystemInfo
  nameWithType: FileSystemInfo
  fullName: System.IO.FileSystemInfo
  type: Class
  summary: Provides the base class for both <see cref="T:System.IO.FileInfo"> and <xref:System.IO.DirectoryInfo> objects.
  remarks: "The FileSystemInfo class contains methods that are common to file and directory manipulation. A FileSystemInfo object can represent either a file or a directory, thus serving as the basis for <xref:System.IO.FileInfo> or <xref:System.IO.DirectoryInfo> objects. Use this base class when parsing a lot of files and directories.  \n  \n A derived class can inherit from FileSystemInfo only if the derived class has the AllAccess permission from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.  \n  \n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following example shows how to loop through all the files and directories, querying some information about each entry.  \n  \n [!CODE [FileSystemInfo#1](../CodeSnippet/VS_Snippets_CLR/FileSystemInfo#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class FileSystemInfo : MarshalByRefObject, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.#ctor
  id: '#ctor'
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: FileSystemInfo()
  nameWithType: FileSystemInfo.FileSystemInfo()
  fullName: System.IO.FileSystemInfo.FileSystemInfo()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Initializes a new instance of the <see cref="T:System.IO.FileSystemInfo"> class.
  remarks: For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).
  syntax:
    content: protected FileSystemInfo ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: FileSystemInfo(SerializationInfo,StreamingContext)
  nameWithType: FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)
  fullName: System.IO.FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Initializes a new instance of the <see cref="T:System.IO.FileSystemInfo"> class with serialized data.
  remarks: For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).
  syntax:
    content: protected FileSystemInfo (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <see cref="T:System.Runtime.Serialization.SerializationInfo"> that holds the serialized object data about the exception being thrown.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The <see cref="T:System.Runtime.Serialization.StreamingContext"> that contains contextual information about the source or destination.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.Attributes
  id: Attributes
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Attributes
  nameWithType: FileSystemInfo.Attributes
  fullName: System.IO.FileSystemInfo.Attributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets or sets the attributes for the current file or directory.
  remarks: "The value of the Attributes property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \n  \n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \n  \n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \n  \n The value of this property is a combination of the archive, compressed, directory, hidden, offline, read-only, system, and temporary file attribute flags.  \n  \n When you set this value, use the bitwise OR operator (`|` in C# or `Or` in Visual Basic) to apply more than one value. To retain any existing values in the Attributes property, include the value of the Attributes property in your assignment. For example:  \n  \n `exampleFile.Attributes = exampleFile.Attributes | FileAttributes.ReadOnly;`"
  example:
  - "The following example demonstrates the Attributes property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemInfo> class.  \n  \n [!CODE [FileSystemInfo#2](../CodeSnippet/VS_Snippets_CLR/FileSystemInfo#2)]"
  syntax:
    content: public System.IO.FileAttributes Attributes { get; set; }
    return:
      type: System.IO.FileAttributes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.CreationTime
  id: CreationTime
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: CreationTime
  nameWithType: FileSystemInfo.CreationTime
  fullName: System.IO.FileSystemInfo.CreationTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets or sets the creation time of the current file or directory.
  remarks: "**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \n  \n The value of the CreationTime property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \n  \n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \n  \n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \n  \n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  \n  \n NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.  \n  \n This property value is `null` if the file system containing the <xref:System.IO.FileSystemInfo> object does not support this information."
  example:
  - "The following example demonstrates the CreationTime property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemInfo> class.  \n  \n [!CODE [FileSystemInfo#2](../CodeSnippet/VS_Snippets_CLR/FileSystemInfo#2)]"
  syntax:
    content: public DateTime CreationTime { get; set; }
    return:
      type: System.DateTime
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.CreationTimeUtc
  id: CreationTimeUtc
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: CreationTimeUtc
  nameWithType: FileSystemInfo.CreationTimeUtc
  fullName: System.IO.FileSystemInfo.CreationTimeUtc
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.
  remarks: "**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \n  \n The value of the CreationTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \n  \n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \n  \n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \n  \n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  \n  \n NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file.  \n  \n This property value is `null` if the file system containing the <xref:System.IO.FileSystemInfo> object does not support this information."
  syntax:
    content: public DateTime CreationTimeUtc { get; set; }
    return:
      type: System.DateTime
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.Delete
  id: Delete
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Delete()
  nameWithType: FileSystemInfo.Delete()
  fullName: System.IO.FileSystemInfo.Delete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Deletes a file or directory.
  remarks: To be added.
  syntax:
    content: public abstract void Delete ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.Exists
  id: Exists
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Exists
  nameWithType: FileSystemInfo.Exists
  fullName: System.IO.FileSystemInfo.Exists
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets a value indicating whether the file or directory exists.
  remarks: For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).
  syntax:
    content: public abstract bool Exists { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.Extension
  id: Extension
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Extension
  nameWithType: FileSystemInfo.Extension
  fullName: System.IO.FileSystemInfo.Extension
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets the string representing the extension part of the file.
  remarks: "The `Extension` property returns the <xref:System.IO.FileSystemInfo> extension, including the period (.). For example, for a file c:\\NewFile.txt, this property returns \".txt\".  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \n|Write to a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \n|Read from a text file.|[How to: Read Text from a File](../Topic/How%20to:%20Read%20Text%20from%20a%20File.md)|  \n|Retrieve the fully qualified path of a file.|<xref:System.IO.Path.GetFullPath%2A>|  \n|Retrieve only the file name a path.|<xref:System.IO.Path.GetFileNameWithoutExtension%2A>|  \n|Retrieve only the directory name from a path.|<xref:System.IO.Path.GetDirectoryName%2A>|  \n|Change the extension of a file.|<xref:System.IO.Path.ChangeExtension%2A>|"
  syntax:
    content: public string Extension { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.FullName
  id: FullName
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: FullName
  nameWithType: FileSystemInfo.FullName
  fullName: System.IO.FileSystemInfo.FullName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets the full path of the directory or file.
  remarks: "For example, for a file c:\\NewFile.txt, this property returns \"c:\\NewFile.txt\".  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  example:
  - "The following example demonstrates the FullName property. This code example is part of a larger example provided for the <xref:System.IO.FileSystemInfo> class.  \n  \n [!CODE [FileSystemInfo#2](../CodeSnippet/VS_Snippets_CLR/FileSystemInfo#2)]"
  syntax:
    content: public virtual string FullName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.FullPath
  id: FullPath
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: FullPath
  nameWithType: FileSystemInfo.FullPath
  fullName: System.IO.FileSystemInfo.FullPath
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Represents the fully qualified path of the directory or file.
  remarks: To be added.
  syntax:
    content: protected string FullPath;
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.IO.FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"> object with the file name and additional exception information.
  remarks: For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <see cref="T:System.Runtime.Serialization.SerializationInfo"> that holds the serialized object data about the exception being thrown.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The <see cref="T:System.Runtime.Serialization.StreamingContext"> that contains contextual information about the source or destination.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.LastAccessTime
  id: LastAccessTime
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: LastAccessTime
  nameWithType: FileSystemInfo.LastAccessTime
  fullName: System.IO.FileSystemInfo.LastAccessTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets or sets the time the current file or directory was last accessed.
  remarks: "**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \n  \n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  \n  \n The value of the <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \n  \n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \n  \n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method."
  example:
  - "The following code example demonstrates the updating of the LastAccessTime property through a \"touch\" operation. In this example, the file is \"touched\", updating the <xref:System.IO.FileSystemInfo.CreationTime%2A>, LastAccessTime and <xref:System.IO.FileSystemInfo.LastWriteTime%2A> properties to the current date and time.  \n  \n [!CODE [System.IO.FileSystemInfo_touch#00](../CodeSnippet/VS_Snippets_CLR_System/system.IO.FileSystemInfo_touch#00)]"
  syntax:
    content: public DateTime LastAccessTime { get; set; }
    return:
      type: System.DateTime
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc
  id: LastAccessTimeUtc
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: LastAccessTimeUtc
  nameWithType: FileSystemInfo.LastAccessTimeUtc
  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.
  remarks: "**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \n  \n The value of the LastAccessTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \n  \n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \n  \n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \n  \n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md)."
  syntax:
    content: public DateTime LastAccessTimeUtc { get; set; }
    return:
      type: System.DateTime
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.LastWriteTime
  id: LastWriteTime
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: LastWriteTime
  nameWithType: FileSystemInfo.LastWriteTime
  fullName: System.IO.FileSystemInfo.LastWriteTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets or sets the time when the current file or directory was last written to.
  remarks: "**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \n  \n The value of the LastWriteTime property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \n  \n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \n  \n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \n  \n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time.  \n  \n This property value is `null` if the file system containing the file does not support this information."
  example:
  - "The following code example demonstrates the updating of the LastWriteTime property through a \"touch\" operation. In this example, the file is \"touched\", updating the <xref:System.IO.FileSystemInfo.CreationTime%2A>, <xref:System.IO.FileSystemInfo.LastAccessTime%2A> and LastWriteTime properties to the current date and time.  \n  \n [!CODE [System.IO.FileSystemInfo_touch#00](../CodeSnippet/VS_Snippets_CLR_System/system.IO.FileSystemInfo_touch#00)]"
  syntax:
    content: public DateTime LastWriteTime { get; set; }
    return:
      type: System.DateTime
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc
  id: LastWriteTimeUtc
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: LastWriteTimeUtc
  nameWithType: FileSystemInfo.LastWriteTimeUtc
  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
  remarks: "**Note** This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system.  \n  \n The value of the LastWriteTimeUtc property is pre-cached if the current instance of the <xref:System.IO.FileSystemInfo> object was returned from any of the following <xref:System.IO.DirectoryInfo> methods:  \n  \n-   <xref:System.IO.DirectoryInfo.GetDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>  \n  \n-   <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>  \n  \n To get the latest value, call the <xref:System.IO.FileSystemInfo.Refresh%2A> method.  \n  \n If the file described in the <xref:System.IO.FileSystemInfo> object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC).  \n  \n This property value is `null` if the file system containing the file does not support this information."
  syntax:
    content: public DateTime LastWriteTimeUtc { get; set; }
    return:
      type: System.DateTime
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.Name
  id: Name
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Name
  nameWithType: FileSystemInfo.Name
  fullName: System.IO.FileSystemInfo.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the `Name` property gets the name of the directory.
  remarks: "For a directory, `Name` returns only the name of the parent directory, such as Dir, not c:\\Dir. For a subdirectory, `Name` returns only the name of the subdirectory, such as Sub1, not c:\\Dir\\Sub1.  \n  \n For a file, `Name` returns only the file name and file name extension, such as MyFile.txt, not c:\\Dir\\Myfile.txt."
  syntax:
    content: public abstract string Name { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.OriginalPath
  id: OriginalPath
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: OriginalPath
  nameWithType: FileSystemInfo.OriginalPath
  fullName: System.IO.FileSystemInfo.OriginalPath
  type: Field
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: The path originally specified by the user, whether relative or absolute.
  remarks: For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).
  syntax:
    content: protected string OriginalPath;
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.IO.FileSystemInfo.Refresh
  id: Refresh
  parent: System.IO.FileSystemInfo
  langs:
  - csharp
  name: Refresh()
  nameWithType: FileSystemInfo.Refresh()
  fullName: System.IO.FileSystemInfo.Refresh()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Refreshes the state of the object.
  remarks: "`FileSystemInfo.Refresh` takes a snapshot of the file from the current file system. `Refresh` cannot correct the underlying file system even if the file system returns incorrect or outdated information. This can happen on platforms such as Windows 98.  \n  \n Calls must be made to `Refresh` before attempting to get the attribute information, or the information will be outdated."
  syntax:
    content: public void Refresh ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.IO.FileSystemInfo.#ctor
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FileSystemInfo()
  nameWithType: FileSystemInfo.FileSystemInfo()
  fullName: System.IO.FileSystemInfo.FileSystemInfo()
- uid: System.IO.FileSystemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FileSystemInfo(SerializationInfo,StreamingContext)
  nameWithType: FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)
  fullName: System.IO.FileSystemInfo.FileSystemInfo(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.IO.FileSystemInfo.Attributes
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Attributes
  nameWithType: FileSystemInfo.Attributes
  fullName: System.IO.FileSystemInfo.Attributes
- uid: System.IO.FileAttributes
  parent: System.IO
  isExternal: false
  name: FileAttributes
  nameWithType: FileAttributes
  fullName: System.IO.FileAttributes
- uid: System.IO.FileSystemInfo.CreationTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTime
  nameWithType: FileSystemInfo.CreationTime
  fullName: System.IO.FileSystemInfo.CreationTime
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.FileSystemInfo.CreationTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTimeUtc
  nameWithType: FileSystemInfo.CreationTimeUtc
  fullName: System.IO.FileSystemInfo.CreationTimeUtc
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.FileSystemInfo.Delete
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Delete()
  nameWithType: FileSystemInfo.Delete()
  fullName: System.IO.FileSystemInfo.Delete()
- uid: System.IO.FileSystemInfo.Exists
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Exists
  nameWithType: FileSystemInfo.Exists
  fullName: System.IO.FileSystemInfo.Exists
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.FileSystemInfo.Extension
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Extension
  nameWithType: FileSystemInfo.Extension
  fullName: System.IO.FileSystemInfo.Extension
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemInfo.FullName
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullName
  nameWithType: FileSystemInfo.FullName
  fullName: System.IO.FileSystemInfo.FullName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemInfo.FullPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullPath
  nameWithType: FileSystemInfo.FullPath
  fullName: System.IO.FileSystemInfo.FullPath
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.IO.FileSystemInfo.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.IO.FileSystemInfo.LastAccessTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTime
  nameWithType: FileSystemInfo.LastAccessTime
  fullName: System.IO.FileSystemInfo.LastAccessTime
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTimeUtc
  nameWithType: FileSystemInfo.LastAccessTimeUtc
  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.FileSystemInfo.LastWriteTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTime
  nameWithType: FileSystemInfo.LastWriteTime
  fullName: System.IO.FileSystemInfo.LastWriteTime
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTimeUtc
  nameWithType: FileSystemInfo.LastWriteTimeUtc
  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.FileSystemInfo.Name
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Name
  nameWithType: FileSystemInfo.Name
  fullName: System.IO.FileSystemInfo.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemInfo.OriginalPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: OriginalPath
  nameWithType: FileSystemInfo.OriginalPath
  fullName: System.IO.FileSystemInfo.OriginalPath
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemInfo.Refresh
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Refresh()
  nameWithType: FileSystemInfo.Refresh()
  fullName: System.IO.FileSystemInfo.Refresh()
