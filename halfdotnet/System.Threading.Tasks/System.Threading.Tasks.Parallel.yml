### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.Parallel
  id: Parallel
  children:
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner`1,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner`1,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner`1,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner`1,System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.Invoke(System.Action[])
  - System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  langs:
  - csharp
  name: Parallel
  nameWithType: Parallel
  fullName: System.Threading.Tasks.Parallel
  type: Class
  summary: Provides support for parallel loops and regions.
  remarks: The Parallel class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.
  example:
  - "This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.  \n  \n [!CODE [System.Threading.Tasks.Parallel#07](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallel#07)]"
  syntax:
    content: public static class Parallel
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int32,Int32,Action<Int32,ParallelLoopState>)
  nameWithType: Parallel.For(Int32,Int32,Action<Int32,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,Action<Int32,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  remarks: "The  delegate is invoked once for each value in the iteration range (, ). It is provided with two arguments:  \n  \n-   An <xref:System.Int32> value that represents the iteration count.  \n  \n-   A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely. The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.  \n  \n Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute. However, all iterations before the current one will still have to be executed if they haven't already.  \n  \n Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.  \n  \n If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.  \n  \n If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.  \n  \n If  is greater than or equal to , the method returns immediately without performing any iterations."
  example:
  - "The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method is called. As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=fullName> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method.  \n  \n [!CODE [System.Threading.Tasks.ParallelLoopState#2](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate#2)]  \n  \n Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=fullName> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method. If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=fullName> property and, if it is greater than the current iteration's index value, returns immediately."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action<int,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int32,Int32,Action<Int32>)
  nameWithType: Parallel.For(Int32,Int32,Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,Action<Int32>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel.
  remarks: "The  delegate is invoked once for each value in the iteration range (, ). It is provided with the iteration count (<xref:System.Int32>) as a parameter.  \n  \n If  is greater than or equal to , the method returns immediately without performing any iterations."
  example:
  - "The following example uses the For method for 100 invocations of a delegate that generates random byte values and computes their sum.  \n  \n [!CODE [System.Threading.Tasks.Parallel.For#1](../../add/codesnippet/system.threading.tasks.parallel.md)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action<int> body);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int64,Int64,Action<Int64,ParallelLoopState>)
  nameWithType: Parallel.For(Int64,Int64,Action<Int64,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,Action<Int64,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  remarks: "The  delegate is invoked once for each value in the iteration range (, ). It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \n  \n Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don’t have to be executed, but all iterations before the current one do.  \n  \n Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.  \n  \n If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.  \n  \n If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.  \n  \n If  is greater than or equal to , then the method returns immediately without performing any iterations."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action<long,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A <see cref="T:System.Threading.Tasks.ParallelLoopResult"> structure that contains information on what portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int64,Int64,Action<Int64>)
  nameWithType: Parallel.For(Int64,Int64,Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,Action<Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.
  remarks: "The  delegate is invoked once for each value in the iteration range (, ). It is provided with the iteration count (<xref:System.Int64>) as a parameter.  \n  \n If  is greater than or equal to , the method returns immediately without performing any iterations."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action<long> body);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
  nameWithType: Parallel.For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: "The  delegate is invoked once for each value in the iteration range (, ). It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \n  \n If  is greater than or equal to , the method returns immediately without performing any iterations."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<int,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int32,Int32,ParallelOptions,Action<Int32>)
  nameWithType: Parallel.For(Int32,Int32,ParallelOptions,Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,ParallelOptions,Action<Int32>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.
  remarks: "The  delegate is invoked once for each value in the iteration range (, ). It is provided with the iteration count (<xref:System.Int32>) as a parameter.  \n  \n If  is greater than or equal to , then the method returns immediately without performing any iterations."
  example:
  - "The following example shows how to cancel a parallel loop:  \n  \n [!CODE [System.Threading.Tasks.Parallel#05](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallel#05)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<int> body);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
  nameWithType: Parallel.For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: "The  delegate is invoked once for each value in the iteration range (, ). It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \n  \n If  is greater than or equal to , the method returns immediately without performing any iterations."
  example:
  - "The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method with a <xref:System.Threading.Tasks.ParallelOptions> object:  \n  \n [!CODE [System.Threading.Tasks.Parallel#03](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallel#03)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<long,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int64,Int64,ParallelOptions,Action<Int64>)
  nameWithType: Parallel.For(Int64,Int64,ParallelOptions,Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,ParallelOptions,Action<Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.
  remarks: "Supports 64-bit indexes. The  delegate is invoked once for each value in the iteration range (, ). It is provided with the iteration count (<xref:System.Int64>) as a parameter.  \n  \n If  is greater than or equal to , then the method returns immediately without performing any iterations."
  example:
  - "The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:  \n  \n [!CODE [System.Threading.Tasks.Parallel#06](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallel#06)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<long> body);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (int fromInclusive, int toExclusive, Func<TLocal> localInit, Func<int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: To be added.
    - id: toExclusive
      type: System.Int32
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.For<TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (long fromInclusive, long toExclusive, Func<TLocal> localInit, Func<long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: To be added.
    - id: toExclusive
      type: System.Int64
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.For<TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: To be added.
    - id: toExclusive
      type: System.Int32
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.For<TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: To be added.
    - id: toExclusive
      type: System.Int64
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.For<TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner`1,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner`1,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: To be added.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: To be added.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(Partitioner<TSource>,Action<TSource>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,Action<TSource>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, Action<TSource> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: To be added.
    - id: body
      type: System.Action{TSource}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(IEnumerable<TSource>,Action<TSource>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,Action<TSource>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, Action<TSource> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: body
      type: System.Action{TSource}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: body
      type: System.Action{TSource}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: body
      type: System.Action{TSource}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner`1,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner`1,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner`1,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner`1,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.Partitioner<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner`1,System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner`1,System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: To be added.
    - id: localInit
      type: System.Func{TLocal}
      description: To be added.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: To be added.
    - id: localFinally
      type: System.Action{TLocal}
      description: To be added.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: To be added.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  id: Invoke(System.Action[])
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: Invoke(Action[])
  nameWithType: Parallel.Invoke(Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(Action[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes each of the provided actions, possibly in parallel.
  remarks: "This method can be used to execute a set of operations, potentially in parallel.  \n  \n No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.  \n  \n For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](../Topic/How%20to:%20Use%20Parallel.Invoke%20to%20Execute%20Parallel%20Operations.md)."
  example:
  - "This example demonstrates how to use the Invokemethod with other methods, anonymous delegates, and lambda expressions.  \n  \n [!CODE [System.Threading.Tasks.Parallel#01](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallel#01)]"
  syntax:
    content: public static void Invoke (Action[] actions);
    parameters:
    - id: actions
      type: System.Action[]
      description: An array of <xref:System.Action> to execute.
  overload: System.Threading.Tasks.Parallel.Invoke*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  id: Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: Invoke(ParallelOptions,Action[])
  nameWithType: Parallel.Invoke(ParallelOptions,Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(ParallelOptions,Action[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.
  remarks: "This method can be used to execute a set of operations, potentially in parallel. The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation. For more information, see [Cancellation in Managed Threads](../Topic/Cancellation%20in%20Managed%20Threads.md).  \n  \n No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.  \n  \n For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](../Topic/How%20to:%20Use%20Parallel.Invoke%20to%20Execute%20Parallel%20Operations.md)."
  syntax:
    content: public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, Action[] actions);
    parameters:
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: actions
      type: System.Action[]
      description: An array of actions to execute.
  overload: System.Threading.Tasks.Parallel.Invoke*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int32,Int32,Action<Int32,ParallelLoopState>)
  nameWithType: Parallel.For(Int32,Int32,Action<Int32,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,Action<Int32,ParallelLoopState>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: true
  name: Action<Int32,ParallelLoopState>
  nameWithType: Action<Int32,ParallelLoopState>
  fullName: System.Action<System.Int32,System.Threading.Tasks.ParallelLoopState>
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int32,Int32,Action<Int32>)
  nameWithType: Parallel.For(Int32,Int32,Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,Action<Int32>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Action{System.Int32}
  parent: System
  isExternal: false
  name: Action<Int32>
  nameWithType: Action<Int32>
  fullName: System.Action<System.Int32>
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int64,Int64,Action<Int64,ParallelLoopState>)
  nameWithType: Parallel.For(Int64,Int64,Action<Int64,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,Action<Int64,ParallelLoopState>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: true
  name: Action<Int64,ParallelLoopState>
  nameWithType: Action<Int64,ParallelLoopState>
  fullName: System.Action<System.Int64,System.Threading.Tasks.ParallelLoopState>
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int64,Int64,Action<Int64>)
  nameWithType: Parallel.For(Int64,Int64,Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,Action<Int64>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Action{System.Int64}
  parent: System
  isExternal: false
  name: Action<Int64>
  nameWithType: Action<Int64>
  fullName: System.Action<System.Int64>
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
  nameWithType: Parallel.For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: true
  name: Action<Int32,ParallelLoopState>
  nameWithType: Action<Int32,ParallelLoopState>
  fullName: System.Action<System.Int32,System.Threading.Tasks.ParallelLoopState>
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int32,Int32,ParallelOptions,Action<Int32>)
  nameWithType: Parallel.For(Int32,Int32,ParallelOptions,Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,ParallelOptions,Action<Int32>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action{System.Int32}
  parent: System
  isExternal: false
  name: Action<Int32>
  nameWithType: Action<Int32>
  fullName: System.Action<System.Int32>
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
  nameWithType: Parallel.For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: true
  name: Action<Int64,ParallelLoopState>
  nameWithType: Action<Int64,ParallelLoopState>
  fullName: System.Action<System.Int64,System.Threading.Tasks.ParallelLoopState>
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int64,Int64,ParallelOptions,Action<Int64>)
  nameWithType: Parallel.For(Int64,Int64,ParallelOptions,Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,ParallelOptions,Action<Int64>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action{System.Int64}
  parent: System
  isExternal: false
  name: Action<Int64>
  nameWithType: Action<Int64>
  fullName: System.Action<System.Int64>
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<Int32,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<Int32,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<Int64,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<Int64,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<Int32,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<Int32,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<Int64,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<Int64,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner`1,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<TSource>
  nameWithType: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
  parent: System
  isExternal: true
  name: Action<TSource,ParallelLoopState,Int64>
  nameWithType: Action<TSource,ParallelLoopState,Int64>
  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: true
  name: Action<TSource,ParallelLoopState>
  nameWithType: Action<TSource,ParallelLoopState>
  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(Partitioner<TSource>,Action<TSource>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,Action<TSource>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
- uid: System.Action{TSource}
  parent: System
  isExternal: false
  name: Action<TSource>
  nameWithType: Action<TSource>
  fullName: System.Action<TSource>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
  parent: System
  isExternal: true
  name: Action<TSource,ParallelLoopState,Int64>
  nameWithType: Action<TSource,ParallelLoopState,Int64>
  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: true
  name: Action<TSource,ParallelLoopState>
  nameWithType: Action<TSource,ParallelLoopState>
  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(IEnumerable<TSource>,Action<TSource>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,Action<TSource>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
- uid: System.Action{TSource}
  parent: System
  isExternal: false
  name: Action<TSource>
  nameWithType: Action<TSource>
  fullName: System.Action<TSource>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<TSource>
  nameWithType: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
  parent: System
  isExternal: true
  name: Action<TSource,ParallelLoopState,Int64>
  nameWithType: Action<TSource,ParallelLoopState,Int64>
  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: true
  name: Action<TSource,ParallelLoopState>
  nameWithType: Action<TSource,ParallelLoopState>
  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Action<TSource>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action{TSource}
  parent: System
  isExternal: false
  name: Action<TSource>
  nameWithType: Action<TSource>
  fullName: System.Action<TSource>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
  parent: System
  isExternal: true
  name: Action<TSource,ParallelLoopState,Int64>
  nameWithType: Action<TSource,ParallelLoopState,Int64>
  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: true
  name: Action<TSource,ParallelLoopState>
  nameWithType: Action<TSource,ParallelLoopState>
  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState>
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action{TSource}
  parent: System
  isExternal: false
  name: Action<TSource>
  nameWithType: Action<TSource>
  fullName: System.Action<TSource>
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner`1,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<TSource>
  nameWithType: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>
  nameWithType: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>
  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner`1,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<TSource,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<TSource,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>
  nameWithType: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>
  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<TSource,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<TSource,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner`1,System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<TSource>
  nameWithType: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>
  nameWithType: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>
  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner`1,System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<TSource,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<TSource,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>
  nameWithType: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>
  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Func{TLocal}
  parent: System
  isExternal: true
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: true
  name: Func<TSource,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<TSource,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: Invoke(Action[])
  nameWithType: Parallel.Invoke(Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(Action[])
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action[]
- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: Invoke(ParallelOptions,Action[])
  nameWithType: Parallel.Invoke(ParallelOptions,Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(ParallelOptions,Action[])
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action[]
- uid: System.Threading.Tasks.Parallel.For*
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  nameWithType: Parallel.
- uid: System.Threading.Tasks.Parallel.For<TLocal>*
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  nameWithType: Parallel.
- uid: System.Threading.Tasks.Parallel.ForEach<TSource>*
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  nameWithType: Parallel.
- uid: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  nameWithType: Parallel.
- uid: System.Threading.Tasks.Parallel.Invoke*
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  nameWithType: Parallel.
