### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.ParallelLoopState
  id: ParallelLoopState
  children:
  - System.Threading.Tasks.ParallelLoopState.Break
  - System.Threading.Tasks.ParallelLoopState.IsExceptional
  - System.Threading.Tasks.ParallelLoopState.IsStopped
  - System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  - System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  - System.Threading.Tasks.ParallelLoopState.Stop
  langs:
  - csharp
  name: ParallelLoopState
  nameWithType: ParallelLoopState
  fullName: System.Threading.Tasks.ParallelLoopState
  type: Class
  summary: Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel"> class to each loop; you can not create instances in your code.
  remarks: "Note that you cannot instantiate an instance of this class. It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method. The example provides an illustration.  \n  \n Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last. In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> methods do not. Because individual iterations of the loop run in parallel, they can begin and end in any order. The ParallelLoopState class allows individual iterations of parallel loops to interact with one another. The ParallelLoopState class allows you to:  \n  \n-   Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method. This does not affect iterations that have already begun execution.  \n  \n-   Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. This does not affect iterations that have already begun execution.  \n  \n-   Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.  \n  \n-   Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property. You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.  \n  \n-   Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.  \n  \n-   Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property."
  example:
  - "The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called. As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.  \n  \n [!CODE [System.Threading.Tasks.ParallelLoopState#2](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate#2)]  \n  \n Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately."
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")]

      public class ParallelLoopState
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.Break
  id: Break
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: Break()
  nameWithType: ParallelLoopState.Break()
  fullName: System.Threading.Tasks.ParallelLoopState.Break()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Communicates that the <see cref="T:System.Threading.Tasks.Parallel"> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.
  remarks: "Break indicates that no iterations after the current iteration should be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution. For example, if Break is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.  \n  \n For long-running iterations that may already be executing, Break sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:  \n  \n1.  Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.  \n  \n2.  Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.  \n  \n The example provides an illustration.  \n  \n Break is typically employed in search-based algorithms where an ordering is present in the data source."
  example:
  - "The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the Break method is called. As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the Break method.  \n  \n [!CODE [System.Threading.Tasks.ParallelLoopState#2](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate#2)]  \n  \n Because iterations of the loop are still likely to be executing when the Break method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the Break method. If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately."
  syntax:
    content: public void Break ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional
  id: IsExceptional
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: IsExceptional
  nameWithType: ParallelLoopState.IsExceptional
  fullName: System.Threading.Tasks.ParallelLoopState.IsExceptional
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.
  remarks: To be added.
  syntax:
    content: public bool IsExceptional { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.IsStopped
  id: IsStopped
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: IsStopped
  nameWithType: ParallelLoopState.IsStopped
  fullName: System.Threading.Tasks.ParallelLoopState.IsStopped
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.
  remarks: For long-running iterations of the loop, you can retrieve the value of the IsStopped property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing. You can then use the value of the IsStopped property to determine whether they should return immediately or execute normally.
  example:
  - "The following example executes up to 10,000 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called. Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the IsStopped method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method. If it returns `true`, the iteration returns immediately.  \n  \n [!CODE [System.Threading.Tasks.ParallelLoopState#1](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate#1)]"
  syntax:
    content: public bool IsStopped { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  id: LowestBreakIteration
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: LowestBreakIteration
  nameWithType: ParallelLoopState.LowestBreakIteration
  fullName: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets the lowest iteration of the loop from which <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was called.
  remarks: "It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`. Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.  \n  \n In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the LowestBreakIteration property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:  \n  \n1.  Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.  \n  \n2.  Exit from the iteration if its index is greater than the LowestBreakIteration property value.  \n  \n The example provides an illustration."
  example:
  - "The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called. This prevents iterations whose index is greater than the LowestBreakIteration property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing. To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If so, the iteration checks the value of the LowestBreakIteration property and, if it is greater than the current iteration's index value, returns immediately.  \n  \n [!CODE [System.Threading.Tasks.ParallelLoopState#2](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate#2)]  \n  \n Note that, because the LowestBreakIteration value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value."
  syntax:
    content: public Nullable<long> LowestBreakIteration { get; }
    return:
      type: System.Nullable{System.Int64}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  id: ShouldExitCurrentIteration
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: ShouldExitCurrentIteration
  nameWithType: ParallelLoopState.ShouldExitCurrentIteration
  fullName: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.
  remarks: "The ShouldExitCurrentIteration property is set to `true` under any of the following conditions:  \n  \n-   An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  \n  \n-   An iteration of the loop throws an exception.  \n  \n-   The loop is canceled.  \n  \n When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution. However, there may be cases where it is unable to prevent additional iterations from starting.  \n  \n It may also be the case that a long-running iteration has already begun execution. In such cases, iterations may explicitly check the ShouldExitCurrentIteration property and cease execution if the property returns `true`."
  example:
  - "The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called. This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing. To prevent these from completing, each iteration calls the ShouldExitCurrentIteration method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method. If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.  \n  \n [!CODE [System.Threading.Tasks.ParallelLoopState#2](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate#2)]"
  syntax:
    content: public bool ShouldExitCurrentIteration { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.Stop
  id: Stop
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: Stop()
  nameWithType: ParallelLoopState.Stop()
  fullName: System.Threading.Tasks.ParallelLoopState.Stop()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Communicates that the <see cref="T:System.Threading.Tasks.Parallel"> loop should cease execution at the system's earliest convenience.
  remarks: "Calling the Stop method indicates that any iterations of the loop that have not yet started need not be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution.  \n  \n Calling the Stop method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing. This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.  \n  \n Stop is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed."
  example:
  - "The following example executes up to 10,000 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the Stop method is called. As the output from the example shows, no iterations execute after the call to the Stop method.  \n  \n [!CODE [System.Threading.Tasks.ParallelLoopState#1](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate#1)]  \n  \n Because iterations of the loop are still likely to be executing when the Stop method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the Stop method. If it returns `true`, the iteration returns immediately."
  syntax:
    content: public void Stop ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.Tasks.ParallelLoopState.Break
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: Break()
  nameWithType: ParallelLoopState.Break()
  fullName: System.Threading.Tasks.ParallelLoopState.Break()
- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: IsExceptional
  nameWithType: ParallelLoopState.IsExceptional
  fullName: System.Threading.Tasks.ParallelLoopState.IsExceptional
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.ParallelLoopState.IsStopped
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: IsStopped
  nameWithType: ParallelLoopState.IsStopped
  fullName: System.Threading.Tasks.ParallelLoopState.IsStopped
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: LowestBreakIteration
  nameWithType: ParallelLoopState.LowestBreakIteration
  fullName: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
- uid: System.Nullable{System.Int64}
  parent: System
  isExternal: false
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: ShouldExitCurrentIteration
  nameWithType: ParallelLoopState.ShouldExitCurrentIteration
  fullName: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.ParallelLoopState.Stop
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: Stop()
  nameWithType: ParallelLoopState.Stop()
  fullName: System.Threading.Tasks.ParallelLoopState.Stop()
