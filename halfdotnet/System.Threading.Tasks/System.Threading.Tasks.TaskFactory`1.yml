### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.TaskFactory`1
  id: TaskFactory`1
  children:
  - System.Threading.Tasks.TaskFactory`1.#ctor
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.CancellationToken
  - System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.CreationOptions
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.Scheduler
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  langs:
  - csharp
  - vb
  name: TaskFactory<TResult>
  nameWithType: TaskFactory<TResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>
  type: Class
  syntax:
    content: public class TaskFactory<TResult>
    typeParameters:
    - id: TResult
      description: Parameter description to be filled
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: System.Threading.Tasks.TaskFactory`1.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: TaskFactory<TResult>..ctor
  fullName: System.Threading.Tasks.TaskFactory<TResult>..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public TaskFactory ();
    parameters: []
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: TaskFactory<TResult>..ctor
  fullName: System.Threading.Tasks.TaskFactory<TResult>..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public TaskFactory (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: TaskFactory<TResult>..ctor
  fullName: System.Threading.Tasks.TaskFactory<TResult>..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: TaskFactory<TResult>..ctor
  fullName: System.Threading.Tasks.TaskFactory<TResult>..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: TaskFactory<TResult>..ctor
  fullName: System.Threading.Tasks.TaskFactory<TResult>..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: CancellationToken
  nameWithType: TaskFactory<TResult>.CancellationToken
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CancellationToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.CancellationToken CancellationToken { get; }
    return:
      type: System.Threading.CancellationToken
      description: Return description to be filled
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinuationOptions
  nameWithType: TaskFactory<TResult>.ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinuationOptions
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Return description to be filled
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny
  nameWithType: TaskFactory<TResult>.ContinueWhenAny
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny
  nameWithType: TaskFactory<TResult>.ContinueWhenAny
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny
  nameWithType: TaskFactory<TResult>.ContinueWhenAny
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny
  nameWithType: TaskFactory<TResult>.ContinueWhenAny
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: CreationOptions
  nameWithType: TaskFactory<TResult>.CreationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CreationOptions
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: Return description to be filled
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1>*
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1>*
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1,TArg2>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1,TArg2>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2>*
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1,TArg2>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1,TArg2>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2>*
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1,TArg2,TArg3>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: arg3
      type: TArg3
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2,TArg3>*
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1,TArg2,TArg3>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: arg3
      type: TArg3
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2,TArg3>*
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: Scheduler
  nameWithType: TaskFactory<TResult>.Scheduler
  fullName: System.Threading.Tasks.TaskFactory<TResult>.Scheduler
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.TaskScheduler Scheduler { get; }
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: Return description to be filled
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  id: StartNew(System.Func{`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function);
    parameters:
    - id: function
      type: System.Func{TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  id: StartNew(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{TResult}
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: function
      type: System.Func{TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.Tasks.TaskFactory`1.#ctor
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: .ctor
  nameWithType: TaskFactory<TResult>..ctor
  fullName: System.Threading.Tasks.TaskFactory<TResult>..ctor
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: .ctor
  nameWithType: TaskFactory<TResult>..ctor
  fullName: System.Threading.Tasks.TaskFactory<TResult>..ctor
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: .ctor
  nameWithType: TaskFactory<TResult>..ctor
  fullName: System.Threading.Tasks.TaskFactory<TResult>..ctor
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: .ctor
  nameWithType: TaskFactory<TResult>..ctor
  fullName: System.Threading.Tasks.TaskFactory<TResult>..ctor
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: .ctor
  nameWithType: TaskFactory<TResult>..ctor
  fullName: System.Threading.Tasks.TaskFactory<TResult>..ctor
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: CancellationToken
  nameWithType: TaskFactory<TResult>.CancellationToken
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CancellationToken
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinuationOptions
  nameWithType: TaskFactory<TResult>.ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny
  nameWithType: TaskFactory<TResult>.ContinueWhenAny
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny
  nameWithType: TaskFactory<TResult>.ContinueWhenAny
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny
  nameWithType: TaskFactory<TResult>.ContinueWhenAny
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny
  nameWithType: TaskFactory<TResult>.ContinueWhenAny
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: CreationOptions
  nameWithType: TaskFactory<TResult>.CreationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CreationOptions
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1,TArg2>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1,TArg2>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: Scheduler
  nameWithType: TaskFactory<TResult>.Scheduler
  fullName: System.Threading.Tasks.TaskFactory<TResult>.Scheduler
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll<TAntecedentResult>
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny<TAntecedentResult>
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1>
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2>
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2,TArg3>
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.TaskFactory`1.StartNew
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
