### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.TaskContinuationOptions
  id: TaskContinuationOptions
  children:
  - System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  - System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  - System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  - System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  - System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  - System.Threading.Tasks.TaskContinuationOptions.LongRunning
  - System.Threading.Tasks.TaskContinuationOptions.None
  - System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  - System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  - System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  - System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  - System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  - System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  langs:
  - csharp
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
  type: Enum
  summary: Specifies the behavior for a task that is created by using the <xref:System.Threading.Tasks.Task.ContinueWith%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=fullName> method.
  remarks: To be added.
  syntax:
    content: >-
      [System.Flags]

      public enum TaskContinuationOptions
  inheritance:
  - System.Object
  - System.ValueType
  - System.Enum
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  id: AttachedToParent
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: AttachedToParent
  nameWithType: TaskContinuationOptions.AttachedToParent
  fullName: System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: "Specifies that the continuation, if it is a child task, is attached to a parent in the task hierarchy. The continuation can be a child task only if its antecedent is also a child task. By default, a child task (that is, an inner task created by an outer task) executes independently of its parent. You can use the F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent?qualifyHint=True&autoUpgrade=True option so that the parent and child tasks are synchronized.  \n  \n Note that if a parent task is configured with the F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?qualifyHint=False&autoUpgrade=True option, the F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?qualifyHint=False&autoUpgrade=True option in the child task has no effect, and the child task will execute as a detached child task.  \n  \n For more information, see [Attached and Detached Child Tasks](../Topic/Attached%20and%20Detached%20Child%20Tasks.md)."
  syntax:
    content: AttachedToParent
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  id: DenyChildAttach
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: DenyChildAttach
  nameWithType: TaskContinuationOptions.DenyChildAttach
  fullName: System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Specifies that any child task (that is, any nested inner task created by this continuation) that is created with the F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent?qualifyHint=True&autoUpgrade=True option and attempts to execute as an attached child task will not be able to attach to the parent task and will execute instead as a detached child task. For more information, see [Attached and Detached Child Tasks](../Topic/Attached%20and%20Detached%20Child%20Tasks.md).
  syntax:
    content: DenyChildAttach
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  id: ExecuteSynchronously
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: ExecuteSynchronously
  nameWithType: TaskContinuationOptions.ExecuteSynchronously
  fullName: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: "Specifies that the continuation task should be executed synchronously. With this option specified, the continuation runs on the same thread that causes the antecedent task to transition into its final state. If the antecedent is already complete when the continuation is created, the continuation will run on the thread that creates the continuation. If the antecedent's T:System.Threading.CancellationTokenSource?qualifyHint=False&autoUpgrade=True is disposed in a `finally` block (`Finally` in Visual Basic), a continuation with this option will run in that `finally` block. Only very short-running continuations should be executed synchronously.  \n  \n Because the task executes synchronously, there is no need to call a method such as M:System.Threading.Tasks.Task.Wait?qualifyHint=True&autoUpgrade=True to ensure that the calling thread waits for the task to complete."
  syntax:
    content: ExecuteSynchronously
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  id: HideScheduler
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: HideScheduler
  nameWithType: TaskContinuationOptions.HideScheduler
  fullName: System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Specifies that tasks created by the continuation by calling methods such as M:System.Threading.Tasks.Task.Run(System.Action)?qualifyHint=True&autoUpgrade=True or M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})?qualifyHint=True&autoUpgrade=True see the default scheduler (P:System.Threading.Tasks.TaskScheduler.Default?qualifyHint=True&autoUpgrade=True) rather than the scheduler on which this continuation is running as the current scheduler.
  syntax:
    content: HideScheduler
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  id: LazyCancellation
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: LazyCancellation
  nameWithType: TaskContinuationOptions.LazyCancellation
  fullName: System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: In the case of continuation cancellation, prevents completion of the continuation until the antecedent has completed.
  syntax:
    content: LazyCancellation
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.LongRunning
  id: LongRunning
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: LongRunning
  nameWithType: TaskContinuationOptions.LongRunning
  fullName: System.Threading.Tasks.TaskContinuationOptions.LongRunning
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Specifies that a continuation will be a long-running, course-grained operation. It provides a hint to the T:System.Threading.Tasks.TaskScheduler?qualifyHint=False&autoUpgrade=True that oversubscription may be warranted.
  syntax:
    content: LongRunning
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.None
  id: None
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: None
  nameWithType: TaskContinuationOptions.None
  fullName: System.Threading.Tasks.TaskContinuationOptions.None
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: When no continuation options are specified, specifies that default behavior should be used when executing a continuation. The continuation runs asynchronously when the antecedent task completes, regardless of the antecedent's final <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property value. It the continuation is a child task, it is created as a detached nested task.
  syntax:
    content: None
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  id: NotOnCanceled
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: NotOnCanceled
  nameWithType: TaskContinuationOptions.NotOnCanceled
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation task should not be scheduled if its antecedent was canceled. An antecedent is canceled if its P:System.Threading.Tasks.Task.Status?qualifyHint=True&autoUpgrade=True property upon completion is F:System.Threading.Tasks.TaskStatus.Canceled?qualifyHint=True&autoUpgrade=True. This option is not valid for multi-task continuations.
  syntax:
    content: NotOnCanceled
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  id: NotOnFaulted
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: NotOnFaulted
  nameWithType: TaskContinuationOptions.NotOnFaulted
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation task should not be scheduled if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its P:System.Threading.Tasks.Task.Status?qualifyHint=True&autoUpgrade=True property upon completion is F:System.Threading.Tasks.TaskStatus.Faulted?qualifyHint=True&autoUpgrade=True. This option is not valid for multi-task continuations.
  syntax:
    content: NotOnFaulted
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  id: NotOnRanToCompletion
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: NotOnRanToCompletion
  nameWithType: TaskContinuationOptions.NotOnRanToCompletion
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation task should not be scheduled if its antecedent ran to completion. An antecedent runs to completion if its P:System.Threading.Tasks.Task.Status?qualifyHint=True&autoUpgrade=True property upon completion is F:System.Threading.Tasks.TaskStatus.RanToCompletion?qualifyHint=True&autoUpgrade=True. This option is not valid for multi-task continuations.
  syntax:
    content: NotOnRanToCompletion
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  id: OnlyOnCanceled
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: OnlyOnCanceled
  nameWithType: TaskContinuationOptions.OnlyOnCanceled
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation should be scheduled only if its antecedent was canceled.  An antecedent is canceled if its P:System.Threading.Tasks.Task.Status?qualifyHint=True&autoUpgrade=True property upon completion is F:System.Threading.Tasks.TaskStatus.Canceled?qualifyHint=True&autoUpgrade=True. This option is not valid for multi-task continuations.
  syntax:
    content: OnlyOnCanceled
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  id: OnlyOnFaulted
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: OnlyOnFaulted
  nameWithType: TaskContinuationOptions.OnlyOnFaulted
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: "Specifies that the continuation task should be scheduled only if its antecedent threw an unhandled exception. An antecedent throws an unhandled exception if its P:System.Threading.Tasks.Task.Status?qualifyHint=True&autoUpgrade=True property upon completion is F:System.Threading.Tasks.TaskStatus.Faulted?qualifyHint=True&autoUpgrade=True.  \n  \n The F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted?qualifyHint=False&autoUpgrade=True option guarantees that the P:System.Threading.Tasks.Task.Exception?qualifyHint=True&autoUpgrade=True property in the antecedent is not `null`. You can use that property to catch the exception and see which exception caused the task to fault. If you do not access the P:System.Threading.Tasks.Task.Exception?qualifyHint=False&autoUpgrade=True property, the exception is unhandled. Also, if you attempt to access the P:System.Threading.Tasks.Task`1.Result?qualifyHint=False&autoUpgrade=True property of a task that has been canceled or has faulted, a new exception is thrown.  \n  \n This option is not valid for multi-task continuations."
  syntax:
    content: OnlyOnFaulted
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  id: OnlyOnRanToCompletion
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: OnlyOnRanToCompletion
  nameWithType: TaskContinuationOptions.OnlyOnRanToCompletion
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation should be scheduled only if its antecedent ran to completion. An antecedent runs to completion if its P:System.Threading.Tasks.Task.Status?qualifyHint=True&autoUpgrade=True property upon completion is F:System.Threading.Tasks.TaskStatus.RanToCompletion?qualifyHint=True&autoUpgrade=True. This option is not valid for multi-task continuations.
  syntax:
    content: OnlyOnRanToCompletion
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  id: PreferFairness
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: PreferFairness
  nameWithType: TaskContinuationOptions.PreferFairness
  fullName: System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: A hint to a <see cref="T:System.Threading.Tasks.TaskScheduler"> to schedule task in the order in which they were scheduled, so that tasks scheduled sooner are more likely to run sooner, and tasks scheduled later are more likely to run later.
  syntax:
    content: PreferFairness
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  id: RunContinuationsAsynchronously
  parent: System.Threading.Tasks.TaskContinuationOptions
  langs:
  - csharp
  name: RunContinuationsAsynchronously
  nameWithType: TaskContinuationOptions.RunContinuationsAsynchronously
  fullName: System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Specifies that the continuation task should be run asynchronously.  This option has precedence over F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously?qualifyHint=True&autoUpgrade=True.
  syntax:
    content: RunContinuationsAsynchronously
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: AttachedToParent
  nameWithType: TaskContinuationOptions.AttachedToParent
  fullName: System.Threading.Tasks.TaskContinuationOptions.AttachedToParent
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: DenyChildAttach
  nameWithType: TaskContinuationOptions.DenyChildAttach
  fullName: System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: ExecuteSynchronously
  nameWithType: TaskContinuationOptions.ExecuteSynchronously
  fullName: System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.HideScheduler
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: HideScheduler
  nameWithType: TaskContinuationOptions.HideScheduler
  fullName: System.Threading.Tasks.TaskContinuationOptions.HideScheduler
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: LazyCancellation
  nameWithType: TaskContinuationOptions.LazyCancellation
  fullName: System.Threading.Tasks.TaskContinuationOptions.LazyCancellation
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.LongRunning
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: LongRunning
  nameWithType: TaskContinuationOptions.LongRunning
  fullName: System.Threading.Tasks.TaskContinuationOptions.LongRunning
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.None
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: None
  nameWithType: TaskContinuationOptions.None
  fullName: System.Threading.Tasks.TaskContinuationOptions.None
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: NotOnCanceled
  nameWithType: TaskContinuationOptions.NotOnCanceled
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: NotOnFaulted
  nameWithType: TaskContinuationOptions.NotOnFaulted
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: NotOnRanToCompletion
  nameWithType: TaskContinuationOptions.NotOnRanToCompletion
  fullName: System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: OnlyOnCanceled
  nameWithType: TaskContinuationOptions.OnlyOnCanceled
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: OnlyOnFaulted
  nameWithType: TaskContinuationOptions.OnlyOnFaulted
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: OnlyOnRanToCompletion
  nameWithType: TaskContinuationOptions.OnlyOnRanToCompletion
  fullName: System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.PreferFairness
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: PreferFairness
  nameWithType: TaskContinuationOptions.PreferFairness
  fullName: System.Threading.Tasks.TaskContinuationOptions.PreferFairness
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
  parent: System.Threading.Tasks.TaskContinuationOptions
  isExternal: false
  name: RunContinuationsAsynchronously
  nameWithType: TaskContinuationOptions.RunContinuationsAsynchronously
  fullName: System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
