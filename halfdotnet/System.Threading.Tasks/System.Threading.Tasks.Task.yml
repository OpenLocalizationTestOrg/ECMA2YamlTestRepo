### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.Task
  id: Task
  children:
  - System.Threading.Tasks.Task.#ctor(System.Action)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.AsyncState
  - System.Threading.Tasks.Task.CompletedTask
  - System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.CreationOptions
  - System.Threading.Tasks.Task.CurrentId
  - System.Threading.Tasks.Task.Delay(System.Int32)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan)
  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Dispose
  - System.Threading.Tasks.Task.Dispose(System.Boolean)
  - System.Threading.Tasks.Task.Exception
  - System.Threading.Tasks.Task.Factory
  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromException(System.Exception)
  - System.Threading.Tasks.Task.FromException``1(System.Exception)
  - System.Threading.Tasks.Task.FromResult``1(``0)
  - System.Threading.Tasks.Task.GetAwaiter
  - System.Threading.Tasks.Task.Id
  - System.Threading.Tasks.Task.IsCanceled
  - System.Threading.Tasks.Task.IsCompleted
  - System.Threading.Tasks.Task.IsFaulted
  - System.Threading.Tasks.Task.Run(System.Action)
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.Run``1(System.Func{``0})
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.RunSynchronously
  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Start
  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Status
  - System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  - System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  - System.Threading.Tasks.Task.Wait
  - System.Threading.Tasks.Task.Wait(System.Int32)
  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.TimeSpan)
  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.Yield
  langs:
  - csharp
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
  type: Class
  summary: "Represents an asynchronous operation.  \n  \n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs#045a746eb48cbaa9)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs#045a746eb48cbaa9). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The Task class represents a single operation that does not return a value and that usually executes asynchronously. Task objects are one of the central components of the  [task-based asynchronous pattern](../Topic/Task-based%20Asynchronous%20Pattern%20\\(TAP\\).md) first introduced in the .NET Framework 4. Because the work performed by a Task object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.  \n  \n For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.  \n  \n In this section:  \n  \n [Creating and executing a task](#Creating)   \n [Separating task creation and execution](#Separating)   \n [Waiting for one or more tasks to complete](#WaitingForOne)   \n [Tasks and culture](#Culture)   \n [For debugger developers](#Debugger)  \n  \n<a name=\"Creating\"></a>   \n## Creating and executing a task  \n Task instances may be created in a variety of ways. The most common approach, which is available starting with the [!INCLUDE[net_v45](../../add/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method. The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters. The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:  \n  \n [!CODE [System.Threading.Tasks.Task#6](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.task#6)]  \n  \n An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](../../add/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory> object. Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method let you specify parameters to pass to the task creation options and a task scheduler. The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method to start a task. It is functionally equivalent to the code in the previous example.  \n  \n [!CODE [System.Threading.Tasks.Task#7](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.task#7)]  \n  \n For more complete examples, see [Task-based Asynchronous Programming](../Topic/Task-based%20Asynchronous%20Programming.md).  \n  \n<a name=\"Separating\"></a>   \n## Separating task creation and execution  \n The Task class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to schedule the task for execution at a later time.  \n  \n<a name=\"WaitingForOne\"></a>   \n## Waiting for one or more tasks to complete  \n Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated. In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution. In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution. You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.  \n  \n To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method. A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.  \n  \n The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes. The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName> method to sleep for two seconds.  \n  \n [!CODE [System.Threading.Tasks.Task#8](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.task#8)]  \n  \n You can also conditionally wait for a task to complete. The  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first. Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.  \n  \n [!CODE [System.Threading.Tasks.Task#9](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.task#9)]  \n  \n You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods. If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`, the wait is cancelled; if it becomes true while the <xref:System.Threading.Tasks.Task.Wait%2A> method terminates.  \n  \n In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.  For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=fullName> method.  The following example creates three tasks, each of which sleeps for an interval determine by a random number generator. The [WaitAny(Task\\[\\])](assetId:///M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])?qualifyHint=False&autoUpgrade=False) method waits for the first task to complete. The example then displays information about the status of all three tasks.  \n  \n [!CODE [System.Threading.Tasks.Task#10](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.task#10)]  \n  \n You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method. The following example creates ten tasks, waits for all ten to complete, and then displays their status.  \n  \n [!CODE [System.Threading.Tasks.Task#11](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.task#11)]  \n  \n Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows. It launches 12 tasks, three of which complete normally and three of which throw an exception. Of the remaining six tasks, three are cancelled before the start, and three are cancelled while they executing. Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.  \n  \n [!CODE [System.Threading.Tasks.Task#12](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.task#12)]  \n  \n For more information on exception handling in task-based asynchronous operations, see [Exception Handling](../Topic/Exception%20Handling%20\\(Task%20Parallel%20Library\\).md).  \n  \n<a name=\"Culture\"></a>   \n## Tasks and culture  \n Starting with desktop apps that target the [!INCLUDE[net_v46](../../add/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context. That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread. For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](../../add/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes. For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref:System.Globalization.CultureInfo> topic.  \n  \n> [!NOTE]\n>  Store apps follow the Windows Runtime in setting and getting the default culture.  \n  \n<a name=\"Debugger\"></a>   \n## For debugger developers  \n For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release). The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task). Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property. The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer. Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation."
  example:
  - "The following example creates and executes four tasks. Three tasks execute an <xref:System.Action%601> delegate named `action`, which accepts an argument of type <xref:System.Object>. A fourth task executes a lambda expression (an <xref:System.Action> delegate) that is defined inline in the call to the task creation method. Each task is instantiated and run in a different way:  \n  \n-   Task `t1` is instantiated by calling a Task class constructor, but is started by calling its <xref:System.Threading.Tasks.Task.Start> method only after task `t2` has started.  \n  \n-   Task `t2` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=fullName> method.  \n  \n-   Task `t3` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.  \n  \n-   Task `t4` is executed synchronously on the main thread by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method.  \n  \n Because task `t4` executes synchronously, it executes on the main application thread. The remaining tasks execute asynchronously typically on one or more thread pool threads.  \n  \n [!CODE [System.Threading.Tasks.Task#01](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.task#01)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_TaskDebugView))]

      public class Task : IAsyncResult, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action)
  id: '#ctor(System.Action)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action)
  nameWithType: Task.Task(Action)
  fullName: System.Threading.Tasks.Task.Task(Action)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new <see cref="T:System.Threading.Tasks.Task"> with the specified action.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  example:
  - "The following example uses the Task constructor to create tasks that retrieve the filenames in specified directories. All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object. The example then calls the [WaitAll(Task\\[\\])](assetId:///M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])?qualifyHint=False&autoUpgrade=False) method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.  \n  \n [!CODE [System.Threading.Tasks.Task.Ctor#1](../../add/codesnippet/system.threading.tasks.task.md)]  \n  \n The following example is identical, except that it used the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to instantiate and run the task in a single operation. The method returns the <xref:System.Threading.Tasks.Task> object that represents the task.  \n  \n [!CODE [System.Threading.Tasks.Task.Run#1](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public Task (Action action);
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the task.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  id: '#ctor(System.Action,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action,CancellationToken)
  nameWithType: Task.Task(Action,CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(Action,CancellationToken)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new <see cref="T:System.Threading.Tasks.Task"> with the specified action and <xref:System.Threading.CancellationToken>.
  remarks: "Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.  \n  \n For more information, see [Task Parallelism (Task Parallel Library)](../Topic/Task-based%20Asynchronous%20Programming.md) and [Cancellation in Managed Threads](../Topic/Cancellation%20in%20Managed%20Threads.md)."
  example:
  - "The following example calls the Task constructor to create a task that iterates the files in the C:\\Windows\\System32 directory. The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object. Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method. The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method.  The <xref:System.Threading.Tasks.Task.Start%2A> method is then called to start the task.  \n  \n [!CODE [System.Threading.Tasks.Task.ctor#4](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public Task (Action action, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the task.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken"> that the new  task will observe.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action,TaskCreationOptions)
  nameWithType: Task.Task(Action,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new <see cref="T:System.Threading.Tasks.Task"> with the specified action and creation options.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <see cref="T:System.Threading.Tasks.TaskCreationOptions"> used to customize the task's behavior.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  id: '#ctor(System.Action{System.Object},System.Object)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action<Object>,Object)
  nameWithType: Task.Task(Action<Object>,Object)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new <see cref="T:System.Threading.Tasks.Task"> with the specified action and state.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  example:
  - "The following example defines an array of 6-letter words. Each word is then passed as an argument to the Task constructor, whose <xref:System.Action%601> delegate scrambles the characters in the word, then displays the original word and its scrambled version.  \n  \n [!CODE [System.Threading.Tasks.Task.ctor#3](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public Task (Action<object> action, object state);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action,CancellationToken,TaskCreationOptions)
  nameWithType: Task.Task(Action,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action,CancellationToken,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new <see cref="T:System.Threading.Tasks.Task"> with the specified action and creation options.
  remarks: "Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.  \n  \n For more information, see [Task Parallelism (Task Parallel Library)](../Topic/Task-based%20Asynchronous%20Programming.md) and [Task Cancellation](../Topic/Task%20Cancellation.md)."
  syntax:
    content: public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the task.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> that the new task will observe.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <see cref="T:System.Threading.Tasks.TaskCreationOptions"> used to customize the task's behavior.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action<Object>,Object,CancellationToken)
  nameWithType: Task.Task(Action<Object>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,CancellationToken)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new <see cref="T:System.Threading.Tasks.Task"> with the specified action, state, and options.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Action<object> action, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> that that the new task will observe.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action<Object>,Object,TaskCreationOptions)
  nameWithType: Task.Task(Action<Object>,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new <see cref="T:System.Threading.Tasks.Task"> with the specified action, state, and options.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Action<object> action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <see cref="T:System.Threading.Tasks.TaskCreationOptions"> used to customize the task's behavior.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
  nameWithType: Task.Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Initializes a new <see cref="T:System.Threading.Tasks.Task"> with the specified action, state, and options.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> that that the new task will observe..
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <see cref="T:System.Threading.Tasks.TaskCreationOptions"> used to customize the task's behavior.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.AsyncState
  id: AsyncState
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: AsyncState
  nameWithType: Task.AsyncState
  fullName: System.Threading.Tasks.Task.AsyncState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task"> was created, or null if none was supplied.
  remarks: Cast the object back to the original type to retrieve its data.
  syntax:
    content: public object AsyncState { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.CompletedTask
  id: CompletedTask
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: CompletedTask
  nameWithType: Task.CompletedTask
  fullName: System.Threading.Tasks.Task.CompletedTask
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets a task that has already completed successfully.
  remarks: "This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>. To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.  \n  \n Repeated attempts to retrieve this property value may not always return the same instance."
  syntax:
    content: public static System.Threading.Tasks.Task CompletedTask { get; }
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  id: ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ConfigureAwait(Boolean)
  nameWithType: Task.ConfigureAwait(Boolean)
  fullName: System.Threading.Tasks.Task.ConfigureAwait(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task">.
  remarks: To be added.
  syntax:
    content: public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);
    parameters:
    - id: continueOnCapturedContext
      type: System.Boolean
      description: '`true` to attempt to marshal the continuation back to the original context captured; otherwise, `false`.'
    return:
      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
      description: An object used to await this task.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  id: ContinueWith(System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task>)
  nameWithType: Task.ContinueWith(Action<Task>)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.
  example:
  - "The following example defines a task that populates an array with 100 random date and time values. It uses the ContinueWith method to select the earliest and the latest date values once the array is fully populated.  \n  \n [!CODE [System.Threading.Tasks.Task.ContinueWith#1](../../add/codesnippet/system.threading.tasks.task.md)]  \n  \n Because a console application may terminate before the continuation task executes, the <xref:System.Threading.Tasks.Task.Wait> method is called to ensure that the continuation finishes executing before the example ends.  \n  \n For an additional example, see [Chaining Tasks by Using Continuation Tasks](../Topic/Chaining%20Tasks%20by%20Using%20Continuation%20Tasks.md)."
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: An action to run when the <see cref="T:System.Threading.Tasks.Task"> completes. When run, the delegate will be passed the completed task as an argument.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task">.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task,Object>,Object)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task"> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation task.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task>,CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task>,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: An action to run when the <see cref="T:System.Threading.Tasks.Task"> completes. When run, the delegate will be passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task">.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task>,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions">.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the  parameter are not met, the continuation task will be canceled instead of scheduled.
  example:
  - "The following example demonstrates using <xref:System.Threading.Tasks.TaskContinuationOptions> to specify that a continuation task should run synchronously when the antecedent task completes. (If the specified task has already completed by the time <xref:System.Threading.Tasks.Task.ContinueWith%2A> is called, the synchronous continuation will run on the thread calling <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)  \n  \n```c#  \n  \npublic class TaskCounter  \n{  \n   private volatile int _count;  \n  \n   public void Track(Task t)  \n   {  \n      if (t == null) throw new ArgumentNullException(\"t\");  \n      Interlocked.Increment(ref _count);  \n      t.ContinueWith(ct => Interlocked.Decrement(ref _count), TaskContinuationOptions.ExecuteSynchronously);  \n   }  \n  \n   public int NumberOfActiveTasks { get { return _count; } }  \n}  \n  \n```  \n  \n```vb  \n  \nPublic Class TaskCounter  \n   Private _count as Integer  \n  \n   Public Sub Track(ByVal t as Task)  \n      If t is Nothing Then Throw New ArgumentNullException(\"t\")  \n      Interlocked.Increment(_count)  \n      t.ContinueWith(Sub(ct)  \n                        Interlocked.Decrement(_count)  \n                     End Sub,  \n                     TaskContinuationOptions.ExecuteSynchronously)  \n   End Sub  \n  \n   Public ReadOnly Property NumberOfActiveTasks As Integer  \n      Get  \n         Return _count  \n      End Get  \n   End Property  \nEnd Class  \n  \n```"
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: An action to run according to the specified . When run, the delegate will be passed the completed task as an argument.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="T:System.Threading.Tasks.TaskContinuationOptions">, as well as execution options, such as <see cref="T:System.Threading.Tasks.TaskContinuationOptions">.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task">.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task>,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"> completes. The continuation uses a specified scheduler.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: An action to run when the <see cref="T:System.Threading.Tasks.Task"> completes. When run, the delegate will be passed the completed task as an argument.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <see cref="T:System.Threading.Tasks.TaskScheduler"> to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task">.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task,Object>,Object,CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: An action to run when the <see cref="T:System.Threading.Tasks.Task"> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken"> that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task">.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task"> completes. The continuation executes based on a set of specified conditions.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the  parameter are not met, the continuation task will be canceled instead of scheduled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: An action to run when the <see cref="T:System.Threading.Tasks.Task"> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="T:System.Threading.Tasks.TaskContinuationOptions">, as well as execution options, such as <see cref="T:System.Threading.Tasks.TaskContinuationOptions">.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task">.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task,Object>,Object,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task"> completes. The continuation uses a specified scheduler.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: An action to run when the <see cref="T:System.Threading.Tasks.Task"> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <see cref="T:System.Threading.Tasks.TaskScheduler"> to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task">.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions">. The continuation receives a cancellation token and uses a specified scheduler.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the criteria specified through the  parameter are not met, the continuation task will be canceled instead of scheduled.
  example:
  - "The following is an example of using ContinueWith to run work both in the background and on the user interface threads.  \n  \n```c#  \n  \nprivate void Button1_Click(object sender, EventArgs e)  \n{  \n   var backgroundScheduler = TaskScheduler.Default;  \n   var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();  \n   Task.Factory.StartNew(delegate { DoBackgroundComputation(); },  \n                         backgroundScheduler).  \n   ContinueWith(delegate { UpdateUI(); }, uiScheduler).  \n                ContinueWith(delegate { DoAnotherBackgroundComputation(); },  \n                             backgroundScheduler).  \n                ContinueWith(delegate { UpdateUIAgain(); }, uiScheduler);  \n}  \n  \n```  \n  \n```vb  \n  \nPrivate Sub Button1_Click(ByVal sender As System.Object,   \n                          ByVal e As System.EventArgs) Handles Button1.Click  \n   Dim backgroundScheduler = TaskScheduler.Default  \n   Dim uiScheduler = TaskScheduler.FromCurrentSynchronizationContext()  \n  \n   Task.Factory.StartNew(Sub()  \n                           DoBackgroundComputation()  \n                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  \n                            UpdateUI()  \n                         End Sub, uiScheduler).ContinueWith(Sub(t)  \n                            DoAnotherBackgroundComputation()  \n                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  \n                            UpdateUIAgain()  \n                         End Sub, uiScheduler)  \nEnd Sub  \n  \n```"
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: An action to run according to the specified . When run, the delegate will be passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="T:System.Threading.Tasks.TaskContinuationOptions">, as well as execution options, such as <see cref="T:System.Threading.Tasks.TaskContinuationOptions">.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <see cref="T:System.Threading.Tasks.TaskScheduler"> to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task">.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task"> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed. If the criteria specified through the  parameter  are not met, the continuation task will be canceled instead of scheduled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: An action to run when the <see cref="T:System.Threading.Tasks.Task"> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <see cref="T:System.Threading.CancellationToken"> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <see cref="T:System.Threading.Tasks.TaskContinuationOptions">, as well as execution options, such as <see cref="T:System.Threading.Tasks.TaskContinuationOptions">.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <see cref="T:System.Threading.Tasks.TaskScheduler"> to associate with the continuation task and to use for its  execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <see cref="T:System.Threading.Tasks.Task">.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,TResult>)
  nameWithType: Task.ContinueWith(Func<Task,TResult>)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,Object,TResult>,Object)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,TResult>,CancellationToken)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,TResult>,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: CreationOptions
  nameWithType: Task.CreationOptions
  fullName: System.Threading.Tasks.Task.CreationOptions
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions"> used to create this task.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.CurrentId
  id: CurrentId
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: CurrentId
  nameWithType: Task.CurrentId
  fullName: System.Threading.Tasks.Task.CurrentId
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task">.
  remarks: "CurrentId is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing. It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance. If you attempt to retrieve the CurrentId value from outside the code that a task is executing, the property returns `null`.  \n  \n Note that although collisions are very rare, task identifiers are not guaranteed to be unique."
  syntax:
    content: public static Nullable<int> CurrentId { get; }
    return:
      type: System.Nullable{System.Int32}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Delay(System.Int32)
  id: Delay(System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Delay(Int32)
  nameWithType: Task.Delay(Int32)
  fullName: System.Threading.Tasks.Task.Delay(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that completes after a time delay.
  remarks: "The Delay method is typically used to delay the operation of all or part of a task for a specified time interval. Most commonly, the time delay is introduced:  \n  \n-   At the beginning of the task, as the following example shows.  \n  \n     [!CODE [System.Threading.Tasks.Task.Delay#5](../../add/codesnippet/system.threading.tasks.task.md)]  \n  \n-   Sometime while the task is executing. In this case, the call to the Delay method executes as a child task within a task, as the following example shows. Note that since the task that calls the Delay method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.  \n  \n     [!CODE [System.Threading.Tasks.Task.Delay#7](../../add/codesnippet/system.threading.tasks.task.md)]  \n  \n After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the  argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems."
  example:
  - "The following example shows a simple use of the Delay method.  \n  \n [!CODE [System.Threading.Tasks.Task.Delay#1](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public static System.Threading.Tasks.Task Delay (int millisecondsDelay);
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the time delay.
  overload: System.Threading.Tasks.Task.Delay*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  id: Delay(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Delay(TimeSpan)
  nameWithType: Task.Delay(TimeSpan)
  fullName: System.Threading.Tasks.Task.Delay(TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that completes after a specified time interval.
  remarks: "After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.  \n  \n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the  argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems."
  example:
  - "The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.  \n  \n [!CODE [System.Threading.Tasks.Task.Delay#2](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public static System.Threading.Tasks.Task Delay (TimeSpan delay);
    parameters:
    - id: delay
      type: System.TimeSpan
      description: The time span to wait before completing the returned task, or `TimeSpan.FromMilliseconds(-1)` to wait indefinitely.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the time delay.
  overload: System.Threading.Tasks.Task.Delay*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  id: Delay(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Delay(Int32,CancellationToken)
  nameWithType: Task.Delay(Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a cancellable task that completes after a time delay.
  remarks: "If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed.  \n  \n For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.  \n  \n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the  argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems."
  example:
  - "The following example launches a task that includes a call to the Delay method with a one second delay. Before the delay interval elapses, the token is cancelled. The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>.  \n  \n [!CODE [System.Threading.Tasks.Task.Delay#3](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be checked prior to completing the returned task.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the time delay.
  overload: System.Threading.Tasks.Task.Delay*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  id: Delay(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Delay(TimeSpan,CancellationToken)
  nameWithType: Task.Delay(TimeSpan,CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(TimeSpan,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a cancellable task that completes after a specified time interval.
  remarks: "If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state once the specified time delay has elapsed.  \n  \n For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.  \n  \n This method depends on the system clock. This means that the time delay will approximately equal the resolution of the system clock if the  argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems."
  example:
  - "The following example launches a task that includes a call to the Delay method with a one-and-a-half second delay. Before the delay interval elapses, the token is cancelled. The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName>.  \n  \n [!CODE [System.Threading.Tasks.Task.Delay#4](../../add/codesnippet/system.threading.tasks.task.md)]  \n  \n Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled. Although the 1.5 second delay from the call to the Delay method makes that assumption likely, it is nevertheless possible that the call to the Delay method could return before the token is cancelled. In that case, the example produces the following output:  \n  \n```  \nTask t Status: RanToCompletion, Result: 42  \n```"
  syntax:
    content: public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: delay
      type: System.TimeSpan
      description: The time span to wait before completing the returned task, or `TimeSpan.FromMilliseconds(-1)` to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be checked prior to completing the returned task.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the time delay.
  overload: System.Threading.Tasks.Task.Delay*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Dispose
  id: Dispose
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Dispose()
  nameWithType: Task.Dispose()
  fullName: System.Threading.Tasks.Task.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task"> class.
  remarks: The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>. However, particularly if your app targets the [!INCLUDE[net_v45](../../add/includes/net-v45-md.md)] or later, there is no need to call Dispose unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks. For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.Tasks.Task.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Task.Dispose(Boolean)
  fullName: System.Threading.Tasks.Task.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Disposes the <see cref="T:System.Threading.Tasks.Task">, releasing all of its unmanaged resources.
  remarks: The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>. However, particularly if your app targets the [!INCLUDE[net_v45](../../add/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks. For more information, see [Do I need to dispose of Tasks?](http://blogs.msdn.com/b/pfxteam/archive/2012/03/25/10287435.aspx) in the Parallel Programming with .NET blog.
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: A Boolean value that indicates whether this method is being called due to a call to <xref:System.Threading.Tasks.Task.Dispose%2A>.
  overload: System.Threading.Tasks.Task.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Exception
  id: Exception
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Exception
  nameWithType: Task.Exception
  fullName: System.Threading.Tasks.Task.Exception
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets the <see cref="T:System.AggregateException"> that caused the <xref:System.Threading.Tasks.Task> to end prematurely. If the <xref:System.Threading.Tasks.Task> completed successfully or has not yet thrown any exceptions, this will return `null`.
  remarks: Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the Exception property. Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread. For more information and an example, see [Exception Handling (Task Parallel Library)](../Topic/Exception%20Handling%20\(Task%20Parallel%20Library\).md).
  syntax:
    content: public AggregateException Exception { get; }
    return:
      type: System.AggregateException
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Factory
  id: Factory
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Factory
  nameWithType: Task.Factory
  fullName: System.Threading.Tasks.Task.Factory
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task"> and <xref:System.Threading.Tasks.Task%601> instances.
  remarks: "This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=fullName> constructor. It has the following property values:  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=fullName>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskContinuationOptions?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=fullName>|`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=fullName>|  \n  \n The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v45](../../add/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.  \n  \n The following example uses the static Factory property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method. The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory. It then calls the [TaskFactory.ContinueWhenAll(Task\\[\\], Action\\<Task\\[\\]>)](assetId:///M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})?qualifyHint=True&autoUpgrade=False) method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.  \n  \n [!CODE [System.Threading.Tasks.Task.Factory#1](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public static System.Threading.Tasks.TaskFactory Factory { get; }
    return:
      type: System.Threading.Tasks.TaskFactory
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  id: FromCanceled(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: FromCanceled(CancellationToken)
  nameWithType: Task.FromCanceled(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a <see cref="T:System.Threading.Tasks.Task"> that's completed due to cancellation with a specified cancellation token.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token with which to complete the task.
    return:
      type: System.Threading.Tasks.Task
      description: The canceled task.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  id: FromCanceled``1(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: FromCanceled(CancellationToken)
  nameWithType: Task.FromCanceled(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> FromCanceled<TResult> (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.FromException(System.Exception)
  id: FromException(System.Exception)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: FromException(Exception)
  nameWithType: Task.FromException(Exception)
  fullName: System.Threading.Tasks.Task.FromException(Exception)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a <see cref="T:System.Threading.Tasks.Task"> that has completed with a specified exception.
  remarks: This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains . The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path. For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.
  syntax:
    content: public static System.Threading.Tasks.Task FromException (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: The exception with which to complete the task.
    return:
      type: System.Threading.Tasks.Task
      description: The faulted task.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)
  id: FromException``1(System.Exception)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: FromException(Exception)
  nameWithType: Task.FromException(Exception)
  fullName: System.Threading.Tasks.Task.FromException(Exception)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> FromException<TResult> (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.FromResult``1(``0)
  id: FromResult``1(``0)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: FromResult(TResult)
  nameWithType: Task.FromResult(TResult)
  fullName: System.Threading.Tasks.Task.FromResult(TResult)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> FromResult<TResult> (TResult result);
    parameters:
    - id: result
      type: TResult
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.GetAwaiter
  id: GetAwaiter
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: GetAwaiter()
  nameWithType: Task.GetAwaiter()
  fullName: System.Threading.Tasks.Task.GetAwaiter()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task">.
  remarks: This method is intended for compiler use rather than for use in application code.
  syntax:
    content: public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();
    parameters: []
    return:
      type: System.Runtime.CompilerServices.TaskAwaiter
      description: An awaiter instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Id
  id: Id
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Id
  nameWithType: Task.Id
  fullName: System.Threading.Tasks.Task.Id
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets an ID for this <see cref="T:System.Threading.Tasks.Task"> instance.
  remarks: "Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created. Note that although collisions are very rare, task identifiers are not guaranteed to be unique.  \n  \n To get the task ID of the currently executing task from within code that that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property."
  syntax:
    content: public int Id { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.IsCanceled
  id: IsCanceled
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: IsCanceled
  nameWithType: Task.IsCanceled
  fullName: System.Threading.Tasks.Task.IsCanceled
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets whether this <see cref="T:System.Threading.Tasks.Task"> instance has completed execution due to being canceled.
  remarks: "A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state under any of the following conditions:  \n  \n-   Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,  \n  \n-   The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.  \n  \n-   The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.  \n  \n> [!IMPORTANT]\n>  Retrieving the value of the IsCanceled property does not block the calling thread until the task has completed."
  syntax:
    content: public bool IsCanceled { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.IsCompleted
  id: IsCompleted
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: IsCompleted
  nameWithType: Task.IsCompleted
  fullName: System.Threading.Tasks.Task.IsCompleted
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets whether this <see cref="T:System.Threading.Tasks.Task"> has completed.
  remarks: "IsCompleted will return `true` when the task is in one of the three final states: <xref:System.Threading.Tasks.TaskStatus>, <xref:System.Threading.Tasks.TaskStatus>, or <xref:System.Threading.Tasks.TaskStatus>.  \n  \n> [!IMPORTANT]\n>  Retrieving the value of the IsCompleted property does not block the calling thread until the task has completed."
  syntax:
    content: public bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.IsFaulted
  id: IsFaulted
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: IsFaulted
  nameWithType: Task.IsFaulted
  fullName: System.Threading.Tasks.Task.IsFaulted
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets whether the <see cref="T:System.Threading.Tasks.Task"> completed due to an unhandled exception.
  remarks: "If IsFaulted is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null.  \n  \n> [!IMPORTANT]\n>  Retrieving the value of the IsFaulted property does not block the calling thread until the task has completed."
  syntax:
    content: public bool IsFaulted { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run(System.Action)
  id: Run(System.Action)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Action)
  nameWithType: Task.Run(Action)
  fullName: System.Threading.Tasks.Task.Run(Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task"> object that represents that work.
  remarks: "The Run method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. It creates a task with the following default values:  \n  \n-   Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>.  \n  \n-   Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.  \n  \n-   It uses the default task scheduler.  \n  \n For information on handling exceptions thrown by task operations, see [Exception Handling](../Topic/Exception%20Handling%20\\(Task%20Parallel%20Library\\).md)."
  example:
  - "The following example defines a `ShowThreadInfo` method  that displays the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=fullName>of the current thread. It is called directly from the application thread, and is called from the <xref:System.Action> delegate passed to the Run method.  \n  \n [!CODE [System.Threading.Tasks.Task.Run#11](../../add/codesnippet/system.threading.tasks.task.md)]  \n  \n The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.  \n  \n [!CODE [System.Threading.Tasks.Task.Run#3](../../add/codesnippet/system.threading.tasks.task.md)]  \n  \n The examples show that the asynchronous task executes on a different thread than the main application thread.  \n  \n The call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that the task completes and displays its output before the application ends. Otherwise, it is possible that the `Main` method will complete before the task finishes.  \n  \n The following example illustrates the Run method. It defines an array of directory names and starts a separate task to retrieve the file names in each directory. All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object. The example then calls the [WaitAll(Task\\[\\])](assetId:///M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])?qualifyHint=False&autoUpgrade=False) method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.  \n  \n [!CODE [System.Threading.Tasks.Task.Run#1](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public static System.Threading.Tasks.Task Run (Action action);
    parameters:
    - id: action
      type: System.Action
      description: The work to execute asynchronously
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the work queued to execute in the ThreadPool.
  overload: System.Threading.Tasks.Task.Run*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  id: Run(System.Func{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<Task>)
  nameWithType: Task.Run(Func<Task>)
  fullName: System.Threading.Tasks.Task.Run(Func<Task>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the thread pool and returns a proxy for the  task returned by .
  remarks: For information on handling exceptions thrown by task operations, see [Exception Handling](../Topic/Exception%20Handling%20\(Task%20Parallel%20Library\).md).
  syntax:
    content: public static System.Threading.Tasks.Task Run (Func<System.Threading.Tasks.Task> function);
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task}
      description: The work to execute asynchronously
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents a proxy for the task returned by .
  overload: System.Threading.Tasks.Task.Run*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  id: Run(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Action,CancellationToken)
  nameWithType: Task.Run(Action,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Action,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task"> object that represents that work. A cancellation token allows the work to be cancelled.
  remarks: "If cancellation is requested before the task begins execution, the task does not execute. Instead it is set to the <xref:System.Threading.Tasks.TaskStatus> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.  \n  \n The Run method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. It creates a task with the following default values:  \n  \n-   Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>.  \n  \n-   It uses the default task scheduler.  \n  \n For information on handling exceptions thrown by task operations, see [Exception Handling](../Topic/Exception%20Handling%20\\(Task%20Parallel%20Library\\).md)."
  example:
  - "The following example calls the Run method to create a task that iterates the files in the C:\\Windows\\System32 directory. The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object. Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method. The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=fullName> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> method.  \n  \n [!CODE [System.Threading.Tasks.Task.Run#4](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: action
      type: System.Action
      description: The work to execute asynchronously
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used to cancel the work
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the work queued to execute in the thread pool.
  overload: System.Threading.Tasks.Task.Run*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<Task>,CancellationToken)
  nameWithType: Task.Run(Func<Task>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<Task>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the thread pool and returns a proxy for the task returned by .
  remarks: For information on handling exceptions thrown by task operations, see [Exception Handling](../Topic/Exception%20Handling%20\(Task%20Parallel%20Library\).md).
  syntax:
    content: public static System.Threading.Tasks.Task Run (Func<System.Threading.Tasks.Task> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task}
      description: The work to execute asynchronously.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that should be used to cancel the work.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents a proxy for the task returned by .
  overload: System.Threading.Tasks.Task.Run*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<Task<TResult>>)
  nameWithType: Task.Run(Func<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.Run(Func<Task<TResult>>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<System.Threading.Tasks.Task<TResult>> function);
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.Run<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})
  id: Run``1(System.Func{``0})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<TResult>)
  nameWithType: Task.Run(Func<TResult>)
  fullName: System.Threading.Tasks.Task.Run(Func<TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<TResult> function);
    parameters:
    - id: function
      type: System.Func{TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.Run<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<Task<TResult>>,CancellationToken)
  nameWithType: Task.Run(Func<Task<TResult>>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<Task<TResult>>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<System.Threading.Tasks.Task<TResult>> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.Run<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  id: Run``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<TResult>,CancellationToken)
  nameWithType: Task.Run(Func<TResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<TResult>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.Run<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.RunSynchronously
  id: RunSynchronously
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: RunSynchronously()
  nameWithType: Task.RunSynchronously()
  fullName: System.Threading.Tasks.Task.RunSynchronously()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Runs the <see cref="T:System.Threading.Tasks.Task"> synchronously on the current <xref:System.Threading.Tasks.TaskScheduler>.
  remarks: "Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread. Tasks executed by calling the RunSynchronously method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread. If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution. Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.  For more information on exception handling, see [Exception Handling](../Topic/Exception%20Handling%20\\(Task%20Parallel%20Library\\).md).  \n  \n Tasks executed by calling the RunSynchronously method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor. The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception."
  example:
  - "The following example compares a task executed by calling the RunSynchronously method with one executed asynchronously. In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running. The task calculates the sum of the integers between 1 and 1,000,000. As the output from the example shows, the task executed by calling the RunSynchronously method runs on the application thread, while the asynchronous task does not.  \n  \n [!CODE [System.Threading.Tasks.Task.RunSynchronously#1](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public void RunSynchronously ();
    parameters: []
  overload: System.Threading.Tasks.Task.RunSynchronously*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  id: RunSynchronously(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: RunSynchronously(TaskScheduler)
  nameWithType: Task.RunSynchronously(TaskScheduler)
  fullName: System.Threading.Tasks.Task.RunSynchronously(TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Runs the <see cref="T:System.Threading.Tasks.Task"> synchronously on the <xref:System.Threading.Tasks.TaskScheduler> provided.
  remarks: "Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor. The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state. A task may be started and run only once. Any attempts to schedule a task a second time results in an exception.  \n  \n If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution. Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution. For more information on exception handling for task operations, see [Exception Handling](../Topic/Exception%20Handling%20\\(Task%20Parallel%20Library\\).md)."
  syntax:
    content: public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The scheduler on which to attempt to run this task inline.
  overload: System.Threading.Tasks.Task.RunSynchronously*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Start
  id: Start
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Start()
  nameWithType: Task.Start()
  fullName: System.Threading.Tasks.Task.Start()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Starts the <see cref="T:System.Threading.Tasks.Task">, scheduling it for execution to the current <xref:System.Threading.Tasks.TaskScheduler>.
  remarks: "A task may be started and run only once. Any attempts to schedule a task a second time will result in an exception.  \n  \n The Start is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors. Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created. For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> method.  \n  \n For information on handling exceptions thrown by task operations, see [Exception Handling](../Topic/Exception%20Handling%20\\(Task%20Parallel%20Library\\).md)."
  example:
  - "The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to instantiate a new <xref:System.Threading.Tasks.Task> object that displays its task ID and managed thread ID and then executes a loop. It then calls the Start method to execute the task.  Since this is a console app, the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method is necessary to prevent the app from terminating before the task finishes execution.  \n  \n [!CODE [System.Threading.Tasks.Task.Start#1](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Threading.Tasks.Task.Start*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  id: Start(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Start(TaskScheduler)
  nameWithType: Task.Start(TaskScheduler)
  fullName: System.Threading.Tasks.Task.Start(TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Starts the <see cref="T:System.Threading.Tasks.Task">, scheduling it for execution to the specified <xref:System.Threading.Tasks.TaskScheduler>.
  remarks: "A task may only be started and run only once. Any attempts to schedule a task a second time will result in an exception.  \n  \n For information on handling exceptions thrown by task operations, see [Exception Handling](../Topic/Exception%20Handling%20\\(Task%20Parallel%20Library\\).md)."
  syntax:
    content: public void Start (System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <see cref="T:System.Threading.Tasks.TaskScheduler"> with which to associate and execute this task.
  overload: System.Threading.Tasks.Task.Start*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Status
  id: Status
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Status
  nameWithType: Task.Status
  fullName: System.Threading.Tasks.Task.Status
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets the <see cref="T:System.Threading.Tasks.TaskStatus"> of this task.
  remarks: "Retrieving the value of the Status property does not block the calling thread until the task has completed.  \n  \n For more information and an example, see [Chaining Tasks by Using Continuation Tasks](../Topic/Chaining%20Tasks%20by%20Using%20Continuation%20Tasks.md) and [How to: Cancel a Task and Its Children](../Topic/How%20to:%20Cancel%20a%20Task%20and%20Its%20Children.md)."
  example:
  - "The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million. When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled. The example then examines the Status property of each task to indicate whether it completed successfully or was cancelled. For those that completed, it displays the value returned by the task.  \n  \n [!CODE [System.Threading.Tasks.Task.Run#7](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public System.Threading.Tasks.TaskStatus Status { get; }
    return:
      type: System.Threading.Tasks.TaskStatus
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  isEii: true
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: Task.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets a <see cref="T:System.Threading.WaitHandle"> that can be used to wait for the task to complete.
  remarks: Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=fullName> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality. For more information, see the "Waiting on Tasks" section in [Task-based Asynchronous Programming](../Topic/Task-based%20Asynchronous%20Programming.md) and [Using TPL with Other Asynchronous Patterns](../Topic/Using%20TPL%20with%20Other%20Asynchronous%20Patterns.md).
  syntax:
    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  isEii: true
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: Task.System.IAsyncResult.CompletedSynchronously
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Gets an indication of whether the operation completed synchronously.
  remarks: To be added.
  syntax:
    content: bool System.IAsyncResult.CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Wait
  id: Wait
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Wait()
  nameWithType: Task.Wait()
  fullName: System.Threading.Tasks.Task.Wait()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for the <see cref="T:System.Threading.Tasks.Task"> to complete execution.
  remarks: "<xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed. If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread. If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes. For more information, see [Task.Wait and \"Inlining\"](http://blogs.msdn.com/b/pfxteam/archive/2009/10/15/9907713.aspx) in the Parallel Programming with .NET blog.  \n  \n For more information and an example, see [How to: Wait on One or More Tasks to Complete](../Topic/How%20to:%20Wait%20on%20One%20or%20More%20Tasks%20to%20Complete.md)."
  example:
  - "The following example starts a task that generates one million random integers between 0 and 100 and computes their mean. The example uses the Wait method to ensure that the task completes before the application terminates. Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.  \n  \n [!CODE [System.Threading.Tasks.Task.Wait#1](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public void Wait ();
    parameters: []
  overload: System.Threading.Tasks.Task.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Wait(Int32)
  nameWithType: Task.Wait(Int32)
  fullName: System.Threading.Tasks.Task.Wait(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for the <see cref="T:System.Threading.Tasks.Task"> to complete execution within a specified number of milliseconds.
  remarks: "Wait is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  \n  \n-   The task completes successfully.  \n  \n-   The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.  \n  \n-   The interval defined by  elapses. In this case, the current thread resumes execution and the method returns `false`."
  example:
  - "The following example starts a task that generates five million random integers between 0 and 100 and computes their mean. The example uses the Wait method to wait for the application to complete within 150 milliseconds. If the application completes normally, the task displays the sum and mean of the random numbers that it has generated. If the timeout interval has elapsed, the example displays a message before it terminates.  \n  \n [!CODE [System.Threading.Tasks.Task.Wait#5](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public bool Wait (int millisecondsTimeout);
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Threading.Tasks.Task"> completed execution within the allotted time; otherwise, `false`.'
  overload: System.Threading.Tasks.Task.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Wait(CancellationToken)
  nameWithType: Task.Wait(CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for the <see cref="T:System.Threading.Tasks.Task"> to complete execution. The wait terminates if a cancellation token is canceled before the task completes.
  remarks: "The Wait method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:  \n  \n-   The task completes.  \n  \n-   The cancellation token is canceled. In this case, the call to the Wait method throws an <xref:System.OperationCanceledException>.  \n  \n> [!NOTE]\n>  Canceling the  cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the  object to this method simply allows the wait to be canceled."
  example:
  - "The following example illustrates the simple use of a cancellation token to cancel waiting for a task's completion. A task is launched, calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> method to cancel any of the token source's cancellation tokens, and then delays for five seconds. Note that the task itself has not been passed the cancellation token and is not cancelable. The application thread calls the task's Wait method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <xref:System.OperationCanceledException> is thrown. The exception handler reports the exception and then sleeps for six seconds. As the output from the example shows, that delay allows the task to complete in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n [!CODE [System.Threading.Tasks.Task.Wait#3](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public void Wait (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe while waiting for the task to complete.
  overload: System.Threading.Tasks.Task.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Wait(TimeSpan)
  nameWithType: Task.Wait(TimeSpan)
  fullName: System.Threading.Tasks.Task.Wait(TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for the <see cref="T:System.Threading.Tasks.Task"> to complete execution within a specified time interval.
  remarks: "Wait is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  \n  \n-   The task completes successfully.  \n  \n-   The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.  \n  \n-   The interval defined by  elapses. In this case, the current thread resumes execution and the method returns `false`."
  example:
  - "The following example starts a task that generates five million random integers between 0 and 100 and computes their mean. The example uses the Wait method to wait for the application to complete within 150 milliseconds. If the application completes normally, the task displays the sum and mean of the random numbers that it has generated. If the timeout interval has elapsed, the example displays a message before it terminates.  \n  \n [!CODE [System.Threading.Tasks.Task.Wait#6](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public bool Wait (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan"> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Threading.Tasks.Task"> completed execution within the allotted time; otherwise, `false`.'
  overload: System.Threading.Tasks.Task.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Wait(Int32,CancellationToken)
  nameWithType: Task.Wait(Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for the <see cref="T:System.Threading.Tasks.Task"> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.
  remarks: "Wait is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:  \n  \n-   The task completes successfully.  \n  \n-   The task itself is canceled or throws an exception. In this case, you handle an <xref:System.AggregateException> exception. The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=fullName> property contains details about the exception or exceptions.  \n  \n-   The  cancellation token is canceled. In this case, the call to the Wait method throws an <xref:System.OperationCanceledException>.  \n  \n-   The interval defined by  elapses. In this case, the current thread resumes execution and the method returns `false`.  \n  \n> [!NOTE]\n>  Canceling the  cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation. Passing the  object to this method simply allows the wait to be canceled based on some condition."
  example:
  - "The following example calls the Wait method to provide both a timeout value and a cancellation token that can end the wait for a task's completion. A new thread is started and executes the `CancelToken` method, which pauses and then calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> method to cancel the cancellation tokens. A task is then launched and delays for 5 seconds. The Wait method is then called to wait for the task's completion and is provided both a brief timeout value and a cancellation token.  \n  \n [!CODE [System.Threading.Tasks.Task.Wait#4](../../add/codesnippet/system.threading.tasks.task.md)]  \n  \n Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed."
  syntax:
    content: public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"> (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe while waiting for the task to complete.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Threading.Tasks.Task"> completed execution within the allotted time; otherwise, `false`.'
  overload: System.Threading.Tasks.Task.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  id: WaitAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAll(Task[])
  nameWithType: Task.WaitAll(Task[])
  fullName: System.Threading.Tasks.Task.WaitAll(Task[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"> objects to complete execution.
  remarks: ''
  example:
  - "The following example starts 10 tasks, each of which is passed an index as a state object. Tasks with an index from two to five throw exceptions. The call to the WaitAll method wraps all exceptions in an <xref:System.AggregateException> object and propagates it to the calling thread.  \n  \n [!CODE [System.Threading.Tasks.Task#02](../CodeSnippet/VS_Snippets_CLR_System/system.threading.tasks.task#02)]"
  syntax:
    content: public static void WaitAll (System.Threading.Tasks.Task[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task"> instances on which to wait.
  overload: System.Threading.Tasks.Task.WaitAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  id: WaitAll(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAll(Task[],Int32)
  nameWithType: Task.WaitAll(Task[],Int32)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"> objects to complete execution within a specified number of milliseconds.
  remarks: To be added.
  syntax:
    content: public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task"> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: '`true` if all of the <see cref="T:System.Threading.Tasks.Task"> instances completed execution within the allotted time; otherwise, `false`.'
  overload: System.Threading.Tasks.Task.WaitAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  id: WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAll(Task[],CancellationToken)
  nameWithType: Task.WaitAll(Task[],CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"> objects to complete execution unless the wait is cancelled.
  remarks: The  argument is used to cancel the wait operation. Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.
  syntax:
    content: public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task"> instances on which to wait.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> to observe while waiting for the tasks to complete.
  overload: System.Threading.Tasks.Task.WaitAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  id: WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAll(Task[],TimeSpan)
  nameWithType: Task.WaitAll(Task[],TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task"> objects to complete execution within a specified time interval.
  remarks: To be added.
  syntax:
    content: public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task"> instances on which to wait.
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan"> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: '`true` if all of the <see cref="T:System.Threading.Tasks.Task"> instances completed execution within the allotted time; otherwise, `false`.'
  overload: System.Threading.Tasks.Task.WaitAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  id: WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAll(Task[],Int32,CancellationToken)
  nameWithType: Task.WaitAll(Task[],Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided <see cref="T:System.Threading.Tasks.Task"> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.
  remarks: The  argument is used to cancel the wait operation. Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.
  syntax:
    content: public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task"> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"> (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> to observe while waiting for the tasks to complete.
    return:
      type: System.Boolean
      description: '`true` if all of the <see cref="T:System.Threading.Tasks.Task"> instances completed execution within the allotted time; otherwise, `false`.'
  overload: System.Threading.Tasks.Task.WaitAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  id: WaitAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAny(Task[])
  nameWithType: Task.WaitAny(Task[])
  fullName: System.Threading.Tasks.Task.WaitAny(Task[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"> objects to complete execution.
  remarks: ''
  example:
  - "The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds. The WaitAny method then waits for any of the tasks to complete. The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.  \n  \n [!CODE [System.Threading.Tasks.Task.WaitAny#1](../CodeSnippet/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny#1)]"
  syntax:
    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task"> instances on which to wait.
    return:
      type: System.Int32
      description: The index of the completed <see cref="T:System.Threading.Tasks.Task"> object in the  array.
  overload: System.Threading.Tasks.Task.WaitAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  id: WaitAny(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAny(Task[],Int32)
  nameWithType: Task.WaitAny(Task[],Int32)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"> objects to complete execution within a specified number of milliseconds.
  remarks: To be added.
  syntax:
    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task"> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: The index of the completed task in the  array argument, or -1 if the timeout occurred.
  overload: System.Threading.Tasks.Task.WaitAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  id: WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAny(Task[],CancellationToken)
  nameWithType: Task.WaitAny(Task[],CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"> objects to complete execution unless the wait is cancelled.
  remarks: To be added.
  syntax:
    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task"> instances on which to wait.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> to observe while waiting for a task to complete.
    return:
      type: System.Int32
      description: The index of the completed task in the  array argument.
  overload: System.Threading.Tasks.Task.WaitAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  id: WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAny(Task[],TimeSpan)
  nameWithType: Task.WaitAny(Task[],TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"> objects to complete execution within a specified time interval.
  remarks: To be added.
  syntax:
    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task"> instances on which to wait.
    - id: timeout
      type: System.TimeSpan
      description: A <see cref="T:System.TimeSpan"> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan"> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Int32
      description: The index of the completed task in the  array argument, or -1 if the timeout occurred.
  overload: System.Threading.Tasks.Task.WaitAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  id: WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAny(Task[],Int32,CancellationToken)
  nameWithType: Task.WaitAny(Task[],Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided <see cref="T:System.Threading.Tasks.Task"> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.
  remarks: To be added.
  syntax:
    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <see cref="T:System.Threading.Tasks.Task"> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"> (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> to observe while waiting for a task to complete.
    return:
      type: System.Int32
      description: The index of the completed task in the  array argument, or -1 if the timeout occurred.
  overload: System.Threading.Tasks.Task.WaitAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAll(IEnumerable<Task>)
  nameWithType: Task.WhenAll(IEnumerable<Task>)
  fullName: System.Threading.Tasks.Task.WhenAll(IEnumerable<Task>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task"> objects in an enumerable collection have completed.
  remarks: "The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.  \n  \n> [!NOTE]\n>  The call to WhenAll method does not block the calling thread.  \n  \n If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  \n  \n If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller."
  example:
  - "The following example creates a set of tasks that ping the URLs in an array. The tasks are stored in a `List<Task>` collection that is passed to the WhenAll method. After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property to determine whether any tasks have faulted.  \n  \n [!CODE [System.Threading.Tasks.Task.WhenAll#4](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the completion of all of the supplied tasks.
  overload: System.Threading.Tasks.Task.WhenAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  id: WhenAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAll(Task[])
  nameWithType: Task.WhenAll(Task[])
  fullName: System.Threading.Tasks.Task.WhenAll(Task[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task"> objects in an array have completed.
  remarks: "The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.  \n  \n> [!NOTE]\n>  The call to WhenAll method does not block the calling thread.  \n  \n If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.  \n  \n If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state.  \n  \n If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName> state before it's returned to the caller."
  example:
  - "The following example creates a set of tasks that ping the URLs in an array. The tasks are stored in a `List<Task>` collection that is converted to an array and passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method. After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=fullName> property to determine whether any tasks have faulted.  \n  \n [!CODE [System.Threading.Tasks.Task.WhenAll#3](../../add/codesnippet/system.threading.tasks.task.md)]"
  syntax:
    content: public static System.Threading.Tasks.Task WhenAll (System.Threading.Tasks.Task[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the completion of all of the supplied tasks.
  overload: System.Threading.Tasks.Task.WhenAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAll(IEnumerable<Task<TResult>>)
  nameWithType: Task.WhenAll(IEnumerable<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.WhenAll(IEnumerable<Task<TResult>>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult[]> WhenAll<TResult> (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>> tasks);
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAll<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  id: WhenAll``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAll(Task<TResult>)
  nameWithType: Task.WhenAll(Task<TResult>)
  fullName: System.Threading.Tasks.Task.WhenAll(Task<TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult[]> WhenAll<TResult> (System.Threading.Tasks.Task<TResult>[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAll<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAny(IEnumerable<Task>)
  nameWithType: Task.WhenAny(IEnumerable<Task>)
  fullName: System.Threading.Tasks.Task.WhenAny(IEnumerable<Task>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when any of the supplied tasks have completed.
  remarks: The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.  This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.
  syntax:
    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.
  overload: System.Threading.Tasks.Task.WhenAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  id: WhenAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAny(Task[])
  nameWithType: Task.WhenAny(Task[])
  fullName: System.Threading.Tasks.Task.WhenAny(Task[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when any of the supplied tasks have completed.
  remarks: The returned task will complete when any of the supplied tasks has completed.  The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.  This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.
  syntax:
    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny (System.Threading.Tasks.Task[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.
  overload: System.Threading.Tasks.Task.WhenAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAny(IEnumerable<Task<TResult>>)
  nameWithType: Task.WhenAny(IEnumerable<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.WhenAny(IEnumerable<Task<TResult>>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> WhenAny<TResult> (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>> tasks);
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAny<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  id: WhenAny``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAny(Task<TResult>)
  nameWithType: Task.WhenAny(Task<TResult>)
  fullName: System.Threading.Tasks.Task.WhenAny(Task<TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> WhenAny<TResult> (System.Threading.Tasks.Task<TResult>[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAny<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Yield
  id: Yield
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Yield()
  nameWithType: Task.Yield()
  fullName: System.Threading.Tasks.Task.Yield()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Creates an awaitable task that asynchronously yields back to the current context when awaited.
  remarks: You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously. If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method’s execution back to that context. However, the context will decide how to prioritize this work relative to other work that may be pending. The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work. For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.  For more information, see the entry [Useful Abstractions Enabled with ContinueWith](http://blogs.msdn.com/b/pfxteam/archive/2008/07/23/8768673.aspx) in the Parallel Programming with .NET blog.
  syntax:
    content: public static System.Runtime.CompilerServices.YieldAwaitable Yield ();
    parameters: []
    return:
      type: System.Runtime.CompilerServices.YieldAwaitable
      description: A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <see cref="T:System.Threading.SynchronizationContext"> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.Tasks.Task.#ctor(System.Action)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action)
  nameWithType: Task.Task(Action)
  fullName: System.Threading.Tasks.Task.Task(Action)
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action,CancellationToken)
  nameWithType: Task.Task(Action,CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(Action,CancellationToken)
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action,TaskCreationOptions)
  nameWithType: Task.Task(Action,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action,TaskCreationOptions)
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action<Object>,Object)
  nameWithType: Task.Task(Action<Object>,Object)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object)
- uid: System.Action{System.Object}
  parent: System
  isExternal: false
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action,CancellationToken,TaskCreationOptions)
  nameWithType: Task.Task(Action,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action,CancellationToken,TaskCreationOptions)
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action<Object>,Object,CancellationToken)
  nameWithType: Task.Task(Action<Object>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,CancellationToken)
- uid: System.Action{System.Object}
  parent: System
  isExternal: false
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action<Object>,Object,TaskCreationOptions)
  nameWithType: Task.Task(Action<Object>,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,TaskCreationOptions)
- uid: System.Action{System.Object}
  parent: System
  isExternal: false
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
  nameWithType: Task.Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
- uid: System.Action{System.Object}
  parent: System
  isExternal: false
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.AsyncState
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: AsyncState
  nameWithType: Task.AsyncState
  fullName: System.Threading.Tasks.Task.AsyncState
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task.CompletedTask
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: CompletedTask
  nameWithType: Task.CompletedTask
  fullName: System.Threading.Tasks.Task.CompletedTask
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ConfigureAwait(Boolean)
  nameWithType: Task.ConfigureAwait(Boolean)
  fullName: System.Threading.Tasks.Task.ConfigureAwait(Boolean)
- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: ConfiguredTaskAwaitable
  nameWithType: ConfiguredTaskAwaitable
  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>)
  nameWithType: Task.ContinueWith(Action<Task>)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>,Object)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  isExternal: true
  name: Action<Task,Object>
  nameWithType: Action<Task,Object>
  fullName: System.Action<System.Threading.Tasks.Task,System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>,CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task>,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>,Object,CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  isExternal: true
  name: Action<Task,Object>
  nameWithType: Action<Task,Object>
  fullName: System.Action<System.Threading.Tasks.Task,System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  isExternal: true
  name: Action<Task,Object>
  nameWithType: Action<Task,Object>
  fullName: System.Action<System.Threading.Tasks.Task,System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>,Object,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  isExternal: true
  name: Action<Task,Object>
  nameWithType: Action<Task,Object>
  fullName: System.Action<System.Threading.Tasks.Task,System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  isExternal: true
  name: Action<Task,Object>
  nameWithType: Action<Task,Object>
  fullName: System.Action<System.Threading.Tasks.Task,System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,TResult>)
  nameWithType: Task.ContinueWith(Func<Task,TResult>)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: true
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,Object,TResult>,Object)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
  parent: System
  isExternal: true
  name: Func<Task,Object,TResult>
  nameWithType: Func<Task,Object,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,TResult>,CancellationToken)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: true
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: true
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,TResult>,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: true
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
  parent: System
  isExternal: true
  name: Func<Task,Object,TResult>
  nameWithType: Func<Task,Object,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
  parent: System
  isExternal: true
  name: Func<Task,Object,TResult>
  nameWithType: Func<Task,Object,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
  parent: System
  isExternal: true
  name: Func<Task,Object,TResult>
  nameWithType: Func<Task,Object,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: true
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
  parent: System
  isExternal: true
  name: Func<Task,Object,TResult>
  nameWithType: Func<Task,Object,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.CreationOptions
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: CreationOptions
  nameWithType: Task.CreationOptions
  fullName: System.Threading.Tasks.Task.CreationOptions
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.CurrentId
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: CurrentId
  nameWithType: Task.CurrentId
  fullName: System.Threading.Tasks.Task.CurrentId
- uid: System.Nullable{System.Int32}
  parent: System
  isExternal: false
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
- uid: System.Threading.Tasks.Task.Delay(System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(Int32)
  nameWithType: Task.Delay(Int32)
  fullName: System.Threading.Tasks.Task.Delay(Int32)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(TimeSpan)
  nameWithType: Task.Delay(TimeSpan)
  fullName: System.Threading.Tasks.Task.Delay(TimeSpan)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(Int32,CancellationToken)
  nameWithType: Task.Delay(Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(Int32,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(TimeSpan,CancellationToken)
  nameWithType: Task.Delay(TimeSpan,CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(TimeSpan,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Dispose
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Dispose()
  nameWithType: Task.Dispose()
  fullName: System.Threading.Tasks.Task.Dispose()
- uid: System.Threading.Tasks.Task.Dispose(System.Boolean)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Task.Dispose(Boolean)
  fullName: System.Threading.Tasks.Task.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.Exception
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Exception
  nameWithType: Task.Exception
  fullName: System.Threading.Tasks.Task.Exception
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  nameWithType: AggregateException
  fullName: System.AggregateException
- uid: System.Threading.Tasks.Task.Factory
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Factory
  nameWithType: Task.Factory
  fullName: System.Threading.Tasks.Task.Factory
- uid: System.Threading.Tasks.TaskFactory
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskFactory
  nameWithType: TaskFactory
  fullName: System.Threading.Tasks.TaskFactory
- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromCanceled(CancellationToken)
  nameWithType: Task.FromCanceled(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromCanceled(CancellationToken)
  nameWithType: Task.FromCanceled(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled(CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.FromException(System.Exception)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromException(Exception)
  nameWithType: Task.FromException(Exception)
  fullName: System.Threading.Tasks.Task.FromException(Exception)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromException(Exception)
  nameWithType: Task.FromException(Exception)
  fullName: System.Threading.Tasks.Task.FromException(Exception)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Threading.Tasks.Task.FromResult``1(``0)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromResult(TResult)
  nameWithType: Task.FromResult(TResult)
  fullName: System.Threading.Tasks.Task.FromResult(TResult)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: TResult
  parent: ''
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Threading.Tasks.Task.GetAwaiter
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: GetAwaiter()
  nameWithType: Task.GetAwaiter()
  fullName: System.Threading.Tasks.Task.GetAwaiter()
- uid: System.Runtime.CompilerServices.TaskAwaiter
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: TaskAwaiter
  nameWithType: TaskAwaiter
  fullName: System.Runtime.CompilerServices.TaskAwaiter
- uid: System.Threading.Tasks.Task.Id
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Id
  nameWithType: Task.Id
  fullName: System.Threading.Tasks.Task.Id
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task.IsCanceled
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IsCanceled
  nameWithType: Task.IsCanceled
  fullName: System.Threading.Tasks.Task.IsCanceled
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.IsCompleted
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IsCompleted
  nameWithType: Task.IsCompleted
  fullName: System.Threading.Tasks.Task.IsCompleted
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.IsFaulted
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IsFaulted
  nameWithType: Task.IsFaulted
  fullName: System.Threading.Tasks.Task.IsFaulted
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.Run(System.Action)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Action)
  nameWithType: Task.Run(Action)
  fullName: System.Threading.Tasks.Task.Run(Action)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<Task>)
  nameWithType: Task.Run(Func<Task>)
  fullName: System.Threading.Tasks.Task.Run(Func<Task>)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Action,CancellationToken)
  nameWithType: Task.Run(Action,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Action,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<Task>,CancellationToken)
  nameWithType: Task.Run(Func<Task>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<Task>,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<Task<TResult>>)
  nameWithType: Task.Run(Func<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.Run(Func<Task<TResult>>)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task{TResult}}
  parent: System
  isExternal: true
  name: Func<Task<TResult>>
  nameWithType: Func<Task<TResult>>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<TResult>)
  nameWithType: Task.Run(Func<TResult>)
  fullName: System.Threading.Tasks.Task.Run(Func<TResult>)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{TResult}
  parent: System
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<Task<TResult>>,CancellationToken)
  nameWithType: Task.Run(Func<Task<TResult>>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<Task<TResult>>,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task{TResult}}
  parent: System
  isExternal: true
  name: Func<Task<TResult>>
  nameWithType: Func<Task<TResult>>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<TResult>,CancellationToken)
  nameWithType: Task.Run(Func<TResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<TResult>,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{TResult}
  parent: System
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.RunSynchronously
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: RunSynchronously()
  nameWithType: Task.RunSynchronously()
  fullName: System.Threading.Tasks.Task.RunSynchronously()
- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: RunSynchronously(TaskScheduler)
  nameWithType: Task.RunSynchronously(TaskScheduler)
  fullName: System.Threading.Tasks.Task.RunSynchronously(TaskScheduler)
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.Start
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Start()
  nameWithType: Task.Start()
  fullName: System.Threading.Tasks.Task.Start()
- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Start(TaskScheduler)
  nameWithType: Task.Start(TaskScheduler)
  fullName: System.Threading.Tasks.Task.Start(TaskScheduler)
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.Status
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Status
  nameWithType: Task.Status
  fullName: System.Threading.Tasks.Task.Status
- uid: System.Threading.Tasks.TaskStatus
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskStatus
  nameWithType: TaskStatus
  fullName: System.Threading.Tasks.TaskStatus
- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: Task.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: Task.System.IAsyncResult.CompletedSynchronously
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.Wait
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait()
  nameWithType: Task.Wait()
  fullName: System.Threading.Tasks.Task.Wait()
- uid: System.Threading.Tasks.Task.Wait(System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(Int32)
  nameWithType: Task.Wait(Int32)
  fullName: System.Threading.Tasks.Task.Wait(Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(CancellationToken)
  nameWithType: Task.Wait(CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(TimeSpan)
  nameWithType: Task.Wait(TimeSpan)
  fullName: System.Threading.Tasks.Task.Wait(TimeSpan)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(Int32,CancellationToken)
  nameWithType: Task.Wait(Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(Int32,CancellationToken)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[])
  nameWithType: Task.WaitAll(Task[])
  fullName: System.Threading.Tasks.Task.WaitAll(Task[])
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[],Int32)
  nameWithType: Task.WaitAll(Task[],Int32)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[],CancellationToken)
  nameWithType: Task.WaitAll(Task[],CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[],TimeSpan)
  nameWithType: Task.WaitAll(Task[],TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],TimeSpan)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[],Int32,CancellationToken)
  nameWithType: Task.WaitAll(Task[],Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],Int32,CancellationToken)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[])
  nameWithType: Task.WaitAny(Task[])
  fullName: System.Threading.Tasks.Task.WaitAny(Task[])
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[],Int32)
  nameWithType: Task.WaitAny(Task[],Int32)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[],CancellationToken)
  nameWithType: Task.WaitAny(Task[],CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],CancellationToken)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[],TimeSpan)
  nameWithType: Task.WaitAny(Task[],TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[],Int32,CancellationToken)
  nameWithType: Task.WaitAny(Task[],Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],Int32,CancellationToken)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll(IEnumerable<Task>)
  nameWithType: Task.WhenAll(IEnumerable<Task>)
  fullName: System.Threading.Tasks.Task.WhenAll(IEnumerable<Task>)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Task>
  nameWithType: IEnumerable<Task>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll(Task[])
  nameWithType: Task.WhenAll(Task[])
  fullName: System.Threading.Tasks.Task.WhenAll(Task[])
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll(IEnumerable<Task<TResult>>)
  nameWithType: Task.WhenAll(IEnumerable<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.WhenAll(IEnumerable<Task<TResult>>)
- uid: System.Threading.Tasks.Task{TResult}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult[]>
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Task<TResult>>
  nameWithType: IEnumerable<Task<TResult>>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll(Task<TResult>)
  nameWithType: Task.WhenAll(Task<TResult>)
  fullName: System.Threading.Tasks.Task.WhenAll(Task<TResult>)
- uid: System.Threading.Tasks.Task{TResult}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult[]>
- uid: System.Threading.Tasks.Task{TResult}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>[]
- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny(IEnumerable<Task>)
  nameWithType: Task.WhenAny(IEnumerable<Task>)
  fullName: System.Threading.Tasks.Task.WhenAny(IEnumerable<Task>)
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Task>
  nameWithType: Task<Task>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Task>
  nameWithType: IEnumerable<Task>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny(Task[])
  nameWithType: Task.WhenAny(Task[])
  fullName: System.Threading.Tasks.Task.WhenAny(Task[])
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Task>
  nameWithType: Task<Task>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny(IEnumerable<Task<TResult>>)
  nameWithType: Task.WhenAny(IEnumerable<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.WhenAny(IEnumerable<Task<TResult>>)
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Task<TResult>>
  nameWithType: Task<Task<TResult>>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Task<TResult>>
  nameWithType: IEnumerable<Task<TResult>>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny(Task<TResult>)
  nameWithType: Task.WhenAny(Task<TResult>)
  fullName: System.Threading.Tasks.Task.WhenAny(Task<TResult>)
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Task<TResult>>
  nameWithType: Task<Task<TResult>>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>
- uid: System.Threading.Tasks.Task{TResult}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>[]
- uid: System.Threading.Tasks.Task.Yield
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Yield()
  nameWithType: Task.Yield()
  fullName: System.Threading.Tasks.Task.Yield()
- uid: System.Runtime.CompilerServices.YieldAwaitable
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: YieldAwaitable
  nameWithType: YieldAwaitable
  fullName: System.Runtime.CompilerServices.YieldAwaitable
- uid: System.Threading.Tasks.Task.ContinueWith*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.ContinueWith<TResult>*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.Delay*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.Dispose*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.Run*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.Run<TResult>*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.RunSynchronously*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.Start*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.Wait*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.WaitAll*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.WaitAny*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.WhenAll*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.WhenAll<TResult>*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.WhenAny*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
- uid: System.Threading.Tasks.Task.WhenAny<TResult>*
  parent: System.Threading.Tasks.Task
  isExternal: false
  nameWithType: Task.
