### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.TaskFactory
  id: TaskFactory
  children:
  - System.Threading.Tasks.TaskFactory.#ctor
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.CancellationToken
  - System.Threading.Tasks.TaskFactory.ContinuationOptions
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.CreationOptions
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.Scheduler
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  langs:
  - csharp
  - vb
  name: TaskFactory
  nameWithType: TaskFactory
  fullName: System.Threading.Tasks.TaskFactory
  type: Class
  syntax:
    content: public class TaskFactory
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: System.Threading.Tasks.TaskFactory.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory()
  nameWithType: TaskFactory.TaskFactory()
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public TaskFactory ();
    parameters: []
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(CancellationToken)
  nameWithType: TaskFactory.TaskFactory(CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(CancellationToken)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public TaskFactory (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(TaskScheduler)
  nameWithType: TaskFactory.TaskFactory(TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(TaskScheduler)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(TaskCreationOptions,TaskContinuationOptions)
  nameWithType: TaskFactory.TaskFactory(TaskCreationOptions,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(TaskCreationOptions,TaskContinuationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
- uid: System.Threading.Tasks.TaskFactory.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: CancellationToken
  nameWithType: TaskFactory.CancellationToken
  fullName: System.Threading.Tasks.TaskFactory.CancellationToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.CancellationToken CancellationToken { get; }
    return:
      type: System.Threading.CancellationToken
      description: Return description to be filled
- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinuationOptions
  nameWithType: TaskFactory.ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory.ContinuationOptions
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Return description to be filled
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[],Action)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Action)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[],Action,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Action,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Action,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[],Action,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Action,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Action,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task,Action)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Action)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task,Action,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Action,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Action,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task,Action,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Action,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Action,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}[]}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[],Func)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Func)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Func)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[],Func,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Func,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Func,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[],Func,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Func,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Func,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task,Func)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Func)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Func)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task,Func,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Func,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Func,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task,Func,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Func,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Func,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[],Action)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Action)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[],Action,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Action,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Action,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[],Action,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Action,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Action,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task,Action)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Action)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task,Action,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Action,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Action,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task,Action,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Action,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Action,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TAntecedentResult}}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[],Func)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Func)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Func)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[],Func,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Func,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Func,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[],Func,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Func,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Func,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task,Func)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Func)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Func)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task,Func,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Func,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Func,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task,Func,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Func,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Func,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>*
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: Parameter description to be filled
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>*
- uid: System.Threading.Tasks.TaskFactory.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: CreationOptions
  nameWithType: TaskFactory.CreationOptions
  fullName: System.Threading.Tasks.TaskFactory.CreationOptions
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: Return description to be filled
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult,Action)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Action)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync*
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Action,Object)
  nameWithType: TaskFactory.FromAsync(Func,Action,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync*
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult,Action,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Action,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Action,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync*
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Action,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Action,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync*
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult,Action,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Action,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Action,TaskCreationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Action,TArg1,Object)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Action,TArg1,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult,Func)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Func)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Func)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TResult>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Func,Object)
  nameWithType: TaskFactory.FromAsync(Func,Func,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TResult>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult,Func,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Func,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Func,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TResult>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Func,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Func,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TResult>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult,Func,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Func,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Func,TaskCreationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TResult>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Action,TArg1,TArg2,Object)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,TArg2,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,TArg2,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Action,TArg1,TArg2,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,TArg2,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,TArg2,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Func,TArg1,Object)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TResult> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TResult>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Func,TArg1,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TResult> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TResult>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Action,TArg1,TArg2,TArg3,Object)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,TArg2,TArg3,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,TArg2,TArg3,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: arg3
      type: TArg3
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2,TArg3>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Action,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: arg3
      type: TArg3
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2,TArg3>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Func,TArg1,TArg2,Object)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,TArg2,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,TArg2,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TResult> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2,TResult>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Func,TArg1,TArg2,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,TArg2,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,TArg2,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TResult> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2,TResult>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Func,TArg1,TArg2,TArg3,Object)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,TArg2,TArg3,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,TArg2,TArg3,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3,TResult> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: arg3
      type: TArg3
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>*
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func,Func,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3,TResult> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: Parameter description to be filled
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: Parameter description to be filled
    - id: arg1
      type: TArg1
      description: Parameter description to be filled
    - id: arg2
      type: TArg2
      description: Parameter description to be filled
    - id: arg3
      type: TArg3
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>*
- uid: System.Threading.Tasks.TaskFactory.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: Scheduler
  nameWithType: TaskFactory.Scheduler
  fullName: System.Threading.Tasks.TaskFactory.Scheduler
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.TaskScheduler Scheduler { get; }
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: Return description to be filled
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  id: StartNew(System.Action)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action)
  nameWithType: TaskFactory.StartNew(Action)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action action);
    parameters:
    - id: action
      type: System.Action
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew*
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  id: StartNew(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action,CancellationToken)
  nameWithType: TaskFactory.StartNew(Action,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: action
      type: System.Action
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew*
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action,TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Action,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew*
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  id: StartNew(System.Action{System.Object},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action,Object)
  nameWithType: TaskFactory.StartNew(Action,Object)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew*
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action,Object,CancellationToken)
  nameWithType: TaskFactory.StartNew(Action,Object,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,Object,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew*
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action,Object,TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Action,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew*
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.StartNew(Action,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,CancellationToken,TaskCreationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: action
      type: System.Action
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew*
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.StartNew(Action,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew*
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  id: StartNew``1(System.Func{``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Func)
  nameWithType: TaskFactory.StartNew(Func)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function);
    parameters:
    - id: function
      type: System.Func{TResult}
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew<TResult>*
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  id: StartNew``1(System.Func{System.Object,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Func,Object)
  nameWithType: TaskFactory.StartNew(Func,Object)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew<TResult>*
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Func,CancellationToken)
  nameWithType: TaskFactory.StartNew(Func,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew<TResult>*
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Func,TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Func,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{TResult}
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew<TResult>*
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Func,Object,CancellationToken)
  nameWithType: TaskFactory.StartNew(Func,Object,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,Object,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew<TResult>*
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Func,Object,TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Func,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew<TResult>*
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Func,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.StartNew(Func,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,CancellationToken,TaskCreationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: function
      type: System.Func{TResult}
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew<TResult>*
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Func,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.StartNew(Func,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: Parameter description to be filled
    - id: state
      type: System.Object
      description: Parameter description to be filled
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Parameter description to be filled
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: Parameter description to be filled
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: Parameter description to be filled
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: Return description to be filled
  overload: System.Threading.Tasks.TaskFactory.StartNew<TResult>*
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.Tasks.TaskFactory.#ctor
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory()
  nameWithType: TaskFactory.TaskFactory()
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory()
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory(CancellationToken)
  nameWithType: TaskFactory.TaskFactory(CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory(TaskScheduler)
  nameWithType: TaskFactory.TaskFactory(TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(TaskScheduler)
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory(TaskCreationOptions,TaskContinuationOptions)
  nameWithType: TaskFactory.TaskFactory(TaskCreationOptions,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(TaskCreationOptions,TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.CancellationToken
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: CancellationToken
  nameWithType: TaskFactory.CancellationToken
  fullName: System.Threading.Tasks.TaskFactory.CancellationToken
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinuationOptions
  nameWithType: TaskFactory.ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory.ContinuationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[],Action)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Action)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Action)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[],Action,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Action,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Action,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[],Action,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Action,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Action,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task,Action)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Action)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Action)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task,Action,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Action,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Action,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task,Action,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Action,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Action,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[],Func)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Func)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Func)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[],Func,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Func,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Func,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[],Func,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Func,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Func,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task,Func)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Func)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Func)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task,Func,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Func,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Func,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task,Func,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Func,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Func,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAll(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[],Action)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Action)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Action)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[],Action,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Action,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Action,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[],Action,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Action,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Action,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task,Action)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Action)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Action)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task,Action,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Action,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Action,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task,Action,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Action,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Action,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Action,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[],Func)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Func)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Func)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[],Func,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Func,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Func,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[],Func,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Func,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Func,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task[],Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task,Func)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Func)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Func)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task,Func,CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Func,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Func,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task,Func,TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Func,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Func,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: ContinueWhenAny(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Task,Func,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.CreationOptions
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: CreationOptions
  nameWithType: TaskFactory.CreationOptions
  fullName: System.Threading.Tasks.TaskFactory.CreationOptions
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(IAsyncResult,Action)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Action)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Action)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Action,Object)
  nameWithType: TaskFactory.FromAsync(Func,Action,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,Object)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(IAsyncResult,Action,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Action,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Action,TaskCreationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Action,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Action,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(IAsyncResult,Action,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Action,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Action,TaskCreationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Action,TArg1,Object)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,Object)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Action,TArg1,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(IAsyncResult,Func)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Func)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Func)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Func,Object)
  nameWithType: TaskFactory.FromAsync(Func,Func,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,Object)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(IAsyncResult,Func,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Func,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Func,TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Func,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Func,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(IAsyncResult,Func,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.FromAsync(IAsyncResult,Func,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(IAsyncResult,Func,TaskCreationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Action,TArg1,TArg2,Object)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,TArg2,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,TArg2,Object)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Action,TArg1,TArg2,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,TArg2,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,TArg2,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Func,TArg1,Object)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,Object)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Func,TArg1,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Action,TArg1,TArg2,TArg3,Object)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,TArg2,TArg3,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,TArg2,TArg3,Object)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Action,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Action,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Action,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Func,TArg1,TArg2,Object)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,TArg2,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,TArg2,Object)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Func,TArg1,TArg2,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,TArg2,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,TArg2,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Func,TArg1,TArg2,TArg3,Object)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,TArg2,TArg3,Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,TArg2,TArg3,Object)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: FromAsync(Func,Func,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func,Func,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(Func,Func,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.Scheduler
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: Scheduler
  nameWithType: TaskFactory.Scheduler
  fullName: System.Threading.Tasks.TaskFactory.Scheduler
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action)
  nameWithType: TaskFactory.StartNew(Action)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action,CancellationToken)
  nameWithType: TaskFactory.StartNew(Action,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action,TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Action,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,TaskCreationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action,Object)
  nameWithType: TaskFactory.StartNew(Action,Object)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,Object)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action,Object,CancellationToken)
  nameWithType: TaskFactory.StartNew(Action,Object,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,Object,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action,Object,TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Action,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.StartNew(Action,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,CancellationToken,TaskCreationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Action,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.StartNew(Action,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Action,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Func)
  nameWithType: TaskFactory.StartNew(Func)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Func,Object)
  nameWithType: TaskFactory.StartNew(Func,Object)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,Object)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Func,CancellationToken)
  nameWithType: TaskFactory.StartNew(Func,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Func,TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Func,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Func,Object,CancellationToken)
  nameWithType: TaskFactory.StartNew(Func,Object,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,Object,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Func,Object,TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Func,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Func,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.StartNew(Func,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,CancellationToken,TaskCreationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  name: StartNew(Func,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory.StartNew(Func,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(Func,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult,TResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult,TResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.FromAsync*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.FromAsync<TResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2,TArg3>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2,TResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.FromAsync<TArg1,TArg2,TArg3,TResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.StartNew*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
- uid: System.Threading.Tasks.TaskFactory.StartNew<TResult>*
  parent: System.Threading.Tasks.TaskFactory
  isExternal: false
  nameWithType: TaskFactory.
