### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.PasswordDeriveBytes
  id: PasswordDeriveBytes
  children:
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  - System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  - System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)
  - System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)
  - System.Security.Cryptography.PasswordDeriveBytes.HashName
  - System.Security.Cryptography.PasswordDeriveBytes.IterationCount
  - System.Security.Cryptography.PasswordDeriveBytes.Reset
  - System.Security.Cryptography.PasswordDeriveBytes.Salt
  langs:
  - csharp
  name: PasswordDeriveBytes
  nameWithType: PasswordDeriveBytes
  fullName: System.Security.Cryptography.PasswordDeriveBytes
  type: Class
  summary: Derives a key from a password using an extension of the PBKDF1 algorithm.
  remarks: "This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password. The standard is documented in IETF RRC 2898.  \n  \n> [!IMPORTANT]\n>  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe."
  example:
  - "The following code example creates a key from a password using the PasswordDeriveBytes class.  \n  \n [!CODE [Cryptography.PasswordDerivedbytes#1](../CodeSnippet/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes
  inheritance:
  - System.Object
  - System.Security.Cryptography.DeriveBytes
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.DeriveBytes.Dispose
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])
  id: '#ctor(System.Byte[],System.Byte[])'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(Byte[],Byte[])
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes"> class specifying the password and key salt to use to derive the key.
  remarks: >-
    > [!IMPORTANT]

    >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\(IL%20Disassembler\).md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.
  example:
  - "The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.  \n  \n [!CODE [Cryptography.PasswordDerivedbytes#1](../CodeSnippet/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes#1)]"
  syntax:
    content: public PasswordDeriveBytes (byte[] password, byte[] salt);
    parameters:
    - id: password
      type: System.Byte[]
      description: The password to derive the key for.
    - id: salt
      type: System.Byte[]
      description: The key salt to use to derive the key.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])
  id: '#ctor(System.String,System.Byte[])'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(String,Byte[])
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes"> class with the password and key salt to use to derive the key.
  remarks: >-
    > [!IMPORTANT]

    >  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\(IL%20Disassembler\).md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.
  syntax:
    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);
    parameters:
    - id: strPassword
      type: System.String
      description: The password for which to derive the key.
    - id: rgbSalt
      type: System.Byte[]
      description: The key salt to use to derive the key.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(Byte[],Byte[],CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes"> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.
  remarks: >-
    > [!IMPORTANT]

    >  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\(IL%20Disassembler\).md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.
  example:
  - "The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.  \n  \n [!CODE [Cryptography.PasswordDerivedbytes#1](../CodeSnippet/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes#1)]"
  syntax:
    content: public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);
    parameters:
    - id: password
      type: System.Byte[]
      description: The password to derive the key for.
    - id: salt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: cspParams
      type: System.Security.Cryptography.CspParameters
      description: The cryptographic service provider (CSP) parameters for the operation.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)
  id: '#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(String,Byte[],CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes"> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.
  remarks: >-
    > [!IMPORTANT]

    >  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\(IL%20Disassembler\).md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.
  syntax:
    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);
    parameters:
    - id: strPassword
      type: System.String
      description: The password for which to derive the key.
    - id: rgbSalt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: cspParams
      type: System.Security.Cryptography.CspParameters
      description: The CSP parameters for the operation.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)
  id: '#ctor(System.Byte[],System.Byte[],System.String,System.Int32)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes"> class specifying the password, key salt, hash name, and iterations to use to derive the key.
  remarks: "> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \n  \n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class."
  syntax:
    content: public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);
    parameters:
    - id: password
      type: System.Byte[]
      description: The password to derive the key for.
    - id: salt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: hashName
      type: System.String
      description: The hash algorithm to use to derive the key.
    - id: iterations
      type: System.Int32
      description: The iteration count to use to derive the key.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)
  id: '#ctor(System.String,System.Byte[],System.String,System.Int32)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(String,Byte[],String,Int32)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes"> class with the password, key salt, hash name, and number of iterations to use to derive the key.
  remarks: "> [!IMPORTANT]\n>  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.  \n  \n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class."
  syntax:
    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);
    parameters:
    - id: strPassword
      type: System.String
      description: The password for which to derive the key.
    - id: rgbSalt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: strHashName
      type: System.String
      description: The name of the hash algorithm for the operation.
    - id: iterations
      type: System.Int32
      description: The number of iterations for the operation.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  id: '#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes"> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.
  remarks: "> [!IMPORTANT]\n>  Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  \n  \n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class."
  syntax:
    content: public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);
    parameters:
    - id: password
      type: System.Byte[]
      description: The password to derive the key for.
    - id: salt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: hashName
      type: System.String
      description: The hash algorithm to use to derive the key.
    - id: iterations
      type: System.Int32
      description: The iteration count to use to derive the key.
    - id: cspParams
      type: System.Security.Cryptography.CspParameters
      description: The cryptographic service provider (CSP) parameters for the operation.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  id: '#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)'
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes"> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.
  remarks: "> [!IMPORTANT]\n>  Never hard-code a password within your source code.  Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.  \n  \n For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class."
  syntax:
    content: public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);
    parameters:
    - id: strPassword
      type: System.String
      description: The password for which to derive the key.
    - id: rgbSalt
      type: System.Byte[]
      description: The key salt to use to derive the key.
    - id: strHashName
      type: System.String
      description: The name of the hash algorithm for the operation.
    - id: iterations
      type: System.Int32
      description: The number of iterations for the operation.
    - id: cspParams
      type: System.Security.Cryptography.CspParameters
      description: The CSP parameters for the operation.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  id: CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: CryptDeriveKey(String,String,Int32,Byte[])
  nameWithType: PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes"> object.
  remarks: "This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.  \n  \n If the  parameter is set to 0 bits, the default key size for the specified algorithm is used."
  example:
  - "This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.  \n  \n [!CODE [Cryptography.PasswordDerivedbytes#2](../CodeSnippet/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes#2)]"
  syntax:
    content: public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);
    parameters:
    - id: algname
      type: System.String
      description: The algorithm name for which to derive the key.
    - id: alghashname
      type: System.String
      description: The hash algorithm name to use to derive the key.
    - id: keySize
      type: System.Int32
      description: The size of the key, in bits, to derive.
    - id: rgbIV
      type: System.Byte[]
      description: The initialization vector (IV) to use to derive the key.
    return:
      type: System.Byte[]
      description: The derived key.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: PasswordDeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes"> class and optionally releases the managed resources.
  remarks: "This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the  parameter set to `true`. `Finalize` invokes `Dispose` with  set to `false`.  \n  \n When the  parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)
  id: GetBytes(System.Int32)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: GetBytes(Int32)
  nameWithType: PasswordDeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Returns pseudo-random key bytes.
  remarks: This method can create any number of pseudo-random bytes. However, the strength of the byte sequence is limited by the number of bytes in the hash output.
  syntax:
    content: public override byte[] GetBytes (int cb);
    parameters:
    - id: cb
      type: System.Int32
      description: The number of pseudo-random key bytes to generate.
    return:
      type: System.Byte[]
      description: A byte array filled with pseudo-random key bytes.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.HashName
  id: HashName
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: HashName
  nameWithType: PasswordDeriveBytes.HashName
  fullName: System.Security.Cryptography.PasswordDeriveBytes.HashName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets or sets the name of the hash algorithm for the operation.
  remarks: To be added.
  syntax:
    content: public string HashName { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.IterationCount
  id: IterationCount
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: IterationCount
  nameWithType: PasswordDeriveBytes.IterationCount
  fullName: System.Security.Cryptography.PasswordDeriveBytes.IterationCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets or sets the number of iterations for the operation.
  remarks: To be added.
  syntax:
    content: public int IterationCount { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.Reset
  id: Reset
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: Reset()
  nameWithType: PasswordDeriveBytes.Reset()
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Resets the state of the operation.
  remarks: To be added.
  syntax:
    content: public override void Reset ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.PasswordDeriveBytes.Salt
  id: Salt
  parent: System.Security.Cryptography.PasswordDeriveBytes
  langs:
  - csharp
  name: Salt
  nameWithType: PasswordDeriveBytes.Salt
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Salt
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets or sets the key salt value for the operation.
  remarks: A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys. This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation. These random bytes are known as salt.
  syntax:
    content: public byte[] Salt { get; set; }
    return:
      type: System.Byte[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: System.Security.Cryptography.DeriveBytes
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(Byte[],Byte[])
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(String,Byte[])
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[])
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(Byte[],Byte[],CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],CspParameters)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(String,Byte[],CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],CspParameters)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(String,Byte[],String,Int32)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(Byte[],Byte[],String,Int32,CspParameters)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
  nameWithType: PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.PasswordDeriveBytes(String,Byte[],String,Int32,CspParameters)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CspParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
- uid: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: CryptDeriveKey(String,String,Int32,Byte[])
  nameWithType: PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  fullName: System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: PasswordDeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: GetBytes(Int32)
  nameWithType: PasswordDeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.PasswordDeriveBytes.GetBytes(Int32)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.PasswordDeriveBytes.HashName
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: HashName
  nameWithType: PasswordDeriveBytes.HashName
  fullName: System.Security.Cryptography.PasswordDeriveBytes.HashName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.PasswordDeriveBytes.IterationCount
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: IterationCount
  nameWithType: PasswordDeriveBytes.IterationCount
  fullName: System.Security.Cryptography.PasswordDeriveBytes.IterationCount
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.PasswordDeriveBytes.Reset
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: Reset()
  nameWithType: PasswordDeriveBytes.Reset()
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Reset()
- uid: System.Security.Cryptography.PasswordDeriveBytes.Salt
  parent: System.Security.Cryptography.PasswordDeriveBytes
  isExternal: false
  name: Salt
  nameWithType: PasswordDeriveBytes.Salt
  fullName: System.Security.Cryptography.PasswordDeriveBytes.Salt
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
