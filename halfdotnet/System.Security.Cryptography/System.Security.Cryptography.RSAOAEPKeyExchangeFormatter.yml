### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  id: RSAOAEPKeyExchangeFormatter
  children:
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  langs:
  - csharp
  name: RSAOAEPKeyExchangeFormatter
  nameWithType: RSAOAEPKeyExchangeFormatter
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  type: Class
  summary: Creates Optimal Asymmetric Encryption Padding (OAEP) key exchange data using <see cref="T:System.Security.Cryptography.RSA">.
  remarks: "Key exchange allows a sender to create secret information, for example, random data that can be used as a key in a symmetric encryption algorithm, and use encryption to send it to the intended recipient.  \n  \n Use <xref:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter> to receive the key exchange and extract the secret information from it.  \n  \n> [!CAUTION]\n>  It is highly recommended that you not attempt to create your own key exchange method from the basic functionality provided, because many details of the operation must be performed carefully in order for the key exchange to be successful."
  example:
  - "The following example shows how to use the RSAOAEPKeyExchangeFormatter class to create an exchange key for a message recipient.  \n  \n [!CODE [System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter2#1](../CodeSnippet/VS_Snippets_CLR_System/system.security.cryptography.rsaoaepkeyexchangedeformatter2#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class RSAOAEPKeyExchangeFormatter : System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: RSAOAEPKeyExchangeFormatter()
  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter"> class.
  remarks: Use <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey%2A> to set the key before calling <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>.
  syntax:
    content: public RSAOAEPKeyExchangeFormatter ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)
  id: '#ctor(System.Security.Cryptography.AsymmetricAlgorithm)'
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter"> class with the specified key.
  remarks: To be added.
  syntax:
    content: public RSAOAEPKeyExchangeFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);
    parameters:
    - id: key
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: The instance of the <see cref="T:System.Security.Cryptography.RSA"> algorithm that holds the public key.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  id: CreateKeyExchange(System.Byte[])
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: CreateKeyExchange(Byte[])
  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates the encrypted key exchange data from the specified input data.
  remarks: This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information.
  syntax:
    content: public override byte[] CreateKeyExchange (byte[] rgbData);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: The secret information to be passed in the key exchange.
    return:
      type: System.Byte[]
      description: The encrypted key exchange data to be sent to the intended recipient.
  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  id: CreateKeyExchange(System.Byte[],System.Type)
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: CreateKeyExchange(Byte[],Type)
  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates the encrypted key exchange data from the specified input data.
  remarks: This data can be interpreted only by the holder of the private key corresponding to the public key used to encrypt the data. This helps to ensure that only the intended recipient can access the secret information.
  example:
  - "The following example shows how to use the CreateKeyExchange method to create an exchange key for a message recipient. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class  \n  \n [!CODE [System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter2#2](../CodeSnippet/VS_Snippets_CLR_System/system.security.cryptography.rsapkcs1keyexchangeformatter2#2)]"
  syntax:
    content: public override byte[] CreateKeyExchange (byte[] rgbData, Type symAlgType);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: The secret information to be passed in the key exchange.
    - id: symAlgType
      type: System.Type
      description: This parameter is not used in the current version.
    return:
      type: System.Byte[]
      description: The encrypted key exchange data to be sent to the intended recipient.
  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter
  id: Parameter
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: Parameter
  nameWithType: RSAOAEPKeyExchangeFormatter.Parameter
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets or sets the parameter used to create padding in the key exchange creation process.
  remarks: ''
  example:
  - "The following code example demonstrates how to set the Parameter property to an <xref:System.Security.Cryptography.RSAParameters.InverseQ> field. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \n  \n [!CODE [System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#7](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#7)]"
  syntax:
    content: public byte[] Parameter { get; set; }
    return:
      type: System.Byte[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters
  id: Parameters
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: Parameters
  nameWithType: RSAOAEPKeyExchangeFormatter.Parameters
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets the parameters for the Optimal Asymmetric Encryption Padding (OAEP) key exchange.
  remarks: ''
  example:
  - "The following code example demonstrates how to call the Parameters property to retrieve an XML representation of the parameters. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \n  \n [!CODE [System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#13](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#13)]"
  syntax:
    content: public override string Parameters { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng
  id: Rng
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: Rng
  nameWithType: RSAOAEPKeyExchangeFormatter.Rng
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets or sets the random number generator algorithm to use in the creation of the key exchange.
  remarks: If this property is `null`, the default random number generator algorithm is used.
  example:
  - "The following code example demonstrates how to set the Rng property to a random number. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \n  \n [!CODE [System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#6](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#6)]"
  syntax:
    content: public System.Security.Cryptography.RandomNumberGenerator Rng { get; set; }
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Sets the public key to use for encrypting the key exchange data.
  remarks: You must set the key before calling <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>.
  example:
  - "The following code example demonstrates how to use the SetKey method to set an <xref:System.Security.Cryptography.RSA> key for decryption. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \n  \n [!CODE [System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#5](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#5)]"
  syntax:
    content: public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);
    parameters:
    - id: key
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: The instance of the <see cref="T:System.Security.Cryptography.RSA"> algorithm that holds the public key.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: RSAOAEPKeyExchangeFormatter()
  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange(Byte[])
  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange(Byte[],Type)
  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: Parameter
  nameWithType: RSAOAEPKeyExchangeFormatter.Parameter
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: Parameters
  nameWithType: RSAOAEPKeyExchangeFormatter.Parameters
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: Rng
  nameWithType: RSAOAEPKeyExchangeFormatter.Rng
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng
- uid: System.Security.Cryptography.RandomNumberGenerator
  parent: System.Security.Cryptography
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange*
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  nameWithType: RSAOAEPKeyExchangeFormatter.
