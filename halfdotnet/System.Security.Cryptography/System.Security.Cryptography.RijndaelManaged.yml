### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RijndaelManaged
  id: RijndaelManaged
  children:
  - System.Security.Cryptography.RijndaelManaged.#ctor
  - System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.RijndaelManaged.GenerateIV
  - System.Security.Cryptography.RijndaelManaged.GenerateKey
  langs:
  - csharp
  name: RijndaelManaged
  nameWithType: RijndaelManaged
  fullName: System.Security.Cryptography.RijndaelManaged
  type: Class
  summary: Accesses the managed version of the <see cref="T:System.Security.Cryptography.Rijndael"> algorithm. This class cannot be inherited.
  remarks: "This algorithm supports key lengths of 128, 192, or 256 bits; defaulting to 256 bits. This algorithm supports block sizes of 128, 192, or 256 bits; defaulting to 128 bits (<xref:System.Security.Cryptography.Aes>-compatible).  \n  \n The <xref:System.Security.Cryptography.Rijndael> algorithm is the predecessor of <xref:System.Security.Cryptography.Aes>. You should use the <xref:System.Security.Cryptography.Aes> class instead of RijndaelManaged. For more information, see the entry [The Differences Between Rijndael and AES](http://go.microsoft.com/fwlink/?LinkId=200932) in the .NET Security blog."
  example:
  - "The following example demonstrates how to encrypt and decrypt sample data using the `RijndaelManaged` class.  \n  \n [!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class RijndaelManaged : System.Security.Cryptography.Rijndael
  inheritance:
  - System.Object
  - System.Security.Cryptography.SymmetricAlgorithm
  - System.Security.Cryptography.Rijndael
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.Rijndael.Create
  - System.Security.Cryptography.Rijndael.Create(System.String)
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.Key
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RijndaelManaged.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RijndaelManaged
  langs:
  - csharp
  name: RijndaelManaged()
  nameWithType: RijndaelManaged.RijndaelManaged()
  fullName: System.Security.Cryptography.RijndaelManaged.RijndaelManaged()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.RijndaelManaged"> class.
  remarks: ''
  example:
  - "The following example creates a new instance of the `RijndaelManaged` class.  \n  \n [!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]"
  syntax:
    content: public RijndaelManaged ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])
  id: CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.RijndaelManaged
  langs:
  - csharp
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: RijndaelManaged.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.RijndaelManaged.CreateDecryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates a symmetric <see cref="T:System.Security.Cryptography.Rijndael"> decryptor object with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>).
  remarks: "This method decrypts an encrypted message created using the <xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A> overload with the same signature.  \n  \n The  size must be 128, 192, or 256 bits."
  example:
  - "The following code example demonstrates how to use the CreateDecryptor method to decrypt messages encoded with the same signature parameter.  \n  \n [!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: The secret key to be used for the symmetric algorithm. The key size must be 128, 192, or 256 bits.
    - id: rgbIV
      type: System.Byte[]
      description: The IV to be used for the symmetric algorithm.
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: A symmetric <see cref="T:System.Security.Cryptography.Rijndael"> decryptor object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])
  id: CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.RijndaelManaged
  langs:
  - csharp
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: RijndaelManaged.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.RijndaelManaged.CreateEncryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates a symmetric <see cref="T:System.Security.Cryptography.Rijndael"> encryptor object with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>).
  remarks: "Use the <xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A> overload with the same signature to decrypt the result of this method.  \n  \n The  size must be 128, 192, or 256 bits."
  example:
  - "The following code examples demonstrates how to encrypt a message using the `CreateEncryptor` method.  \n  \n [!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: The secret key to be used for the symmetric algorithm. The key size must be 128, 192, or 256 bits.
    - id: rgbIV
      type: System.Byte[]
      description: The IV to be used for the symmetric algorithm.
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: A symmetric <see cref="T:System.Security.Cryptography.Rijndael"> encryptor object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RijndaelManaged.GenerateIV
  id: GenerateIV
  parent: System.Security.Cryptography.RijndaelManaged
  langs:
  - csharp
  name: GenerateIV()
  nameWithType: RijndaelManaged.GenerateIV()
  fullName: System.Security.Cryptography.RijndaelManaged.GenerateIV()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Generates a random initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to be used for the algorithm.
  remarks: Use this method to generate a random IV when none is specified.
  example:
  - '[!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]'
  syntax:
    content: public override void GenerateIV ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RijndaelManaged.GenerateKey
  id: GenerateKey
  parent: System.Security.Cryptography.RijndaelManaged
  langs:
  - csharp
  name: GenerateKey()
  nameWithType: RijndaelManaged.GenerateKey()
  fullName: System.Security.Cryptography.RijndaelManaged.GenerateKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Generates a random <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> to be used for the algorithm.
  remarks: Use this method to generate a random key when none is specified.
  example:
  - '[!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]'
  syntax:
    content: public override void GenerateKey ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Security.Cryptography.Rijndael
  isExternal: false
  name: System.Security.Cryptography.Rijndael
- uid: System.Security.Cryptography.RijndaelManaged.#ctor
  parent: System.Security.Cryptography.RijndaelManaged
  isExternal: false
  name: RijndaelManaged()
  nameWithType: RijndaelManaged.RijndaelManaged()
  fullName: System.Security.Cryptography.RijndaelManaged.RijndaelManaged()
- uid: System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.RijndaelManaged
  isExternal: false
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: RijndaelManaged.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.RijndaelManaged.CreateDecryptor(Byte[],Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.RijndaelManaged
  isExternal: false
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: RijndaelManaged.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.RijndaelManaged.CreateEncryptor(Byte[],Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.RijndaelManaged.GenerateIV
  parent: System.Security.Cryptography.RijndaelManaged
  isExternal: false
  name: GenerateIV()
  nameWithType: RijndaelManaged.GenerateIV()
  fullName: System.Security.Cryptography.RijndaelManaged.GenerateIV()
- uid: System.Security.Cryptography.RijndaelManaged.GenerateKey
  parent: System.Security.Cryptography.RijndaelManaged
  isExternal: false
  name: GenerateKey()
  nameWithType: RijndaelManaged.GenerateKey()
  fullName: System.Security.Cryptography.RijndaelManaged.GenerateKey()
