### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDiffieHellman
  id: ECDiffieHellman
  children:
  - System.Security.Cryptography.ECDiffieHellman.#ctor
  - System.Security.Cryptography.ECDiffieHellman.Create
  - System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDiffieHellman.PublicKey
  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  langs:
  - csharp
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
  type: Class
  summary: Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.
  remarks: This class serves as the abstract base class for ECDH implementations.
  syntax:
    content: 'public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ECDiffieHellman()
  nameWithType: ECDiffieHellman.ECDiffieHellman()
  fullName: System.Security.Cryptography.ECDiffieHellman.ECDiffieHellman()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman"> class.
  remarks: This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class. The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)]. For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method.
  syntax:
    content: protected ECDiffieHellman ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  id: Create
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: System.Security.Cryptography.ECDiffieHellman.Create()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.
  remarks: To be added.
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: A new instance of the default implementation of this class.
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)
  id: Create(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create(ECCurve)
  nameWithType: ECDiffieHellman.Create(ECCurve)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(ECCurve)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with a new public/private key-pair generated over the specified curve.
  remarks: "curve must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method.  \n  \n Characteristic-2 curves are not supported on Windows."
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECCurve curve);
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
      description: The curve to use to generate a new public/private key-pair.
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)
  id: Create(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create(ECParameters)
  nameWithType: ECDiffieHellman.Create(ECParameters)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(ECParameters)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with the key described by the specified  <see cref="T:System.Security.Cryptography.ECParameters"> object.
  remarks: "must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method. Parameters over implicit curves are not supported.  \n  \n Characteristic-2 curves are not supported on Windows."
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.ECParameters
      description: The parameters  for the elliptic curve cryptography (ECC) algorithm.
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.
  remarks: "If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the Create method overload to create a custom  string that specifies your implementation.  \n  \n The  parameter specifies the name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)]:  \n  \n-   \"ECDH\"  \n  \n-   \"ECDiffieHellman\"  \n  \n-   \"ECDiffieHellmanCng\"  \n  \n-   \"System.Security.Cryptography.ECDiffieHellmanCng\"  \n  \n You can also provide the name of a custom ECDH implementation for the  parameter. If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created."
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: The name of an implementation of the ECDH algorithm.
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns `null`.
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.
  remarks: This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> method passing `null` as the prepend and append values.
  syntax:
    content: public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm  to use to derive the key material.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.
  remarks: To be added.
  syntax:
    content: public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm  to use to derive the key material.
    - id: secretPrepend
      type: System.Byte[]
      description: A value to prepend to the derived secret before hashing.
    - id: secretAppend
      type: System.Byte[]
      description: A value to append to the derived secret before hashing.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).
  remarks: This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> method passing `null` as the prepend and append values.
  syntax:
    content: public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm to use to derive the key material.
    - id: hmacKey
      type: System.Byte[]
      description: The key for the HMAC.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).
  remarks: To be added.
  syntax:
    content: public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm to use to derive the key material.
    - id: hmacKey
      type: System.Byte[]
      description: The key for the HMAC.
    - id: secretPrepend
      type: System.Byte[]
      description: A value to prepend to the derived secret before hashing.
    - id: secretAppend
      type: System.Byte[]
      description: A value to append to the derived secret before hashing.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives bytes that can be used as a key, given another party's public key.
  remarks: For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class.
  syntax:
    content: public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.
  remarks: To be added.
  syntax:
    content: public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: prfLabel
      type: System.Byte[]
      description: The ASCII-encoded PRF label.
    - id: prfSeed
      type: System.Byte[]
      description: The 64-byte PRF seed.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)
  id: ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDiffieHellman.ExportExplicitParameters(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, exports either the public or the public and private key information using the explicit curve form from a working <see cref="T:System.Security.Cryptography.ECDiffieHellman"> key to an <xref:System.Security.Cryptography.ECParameters> structure so that it can be passed to the <xref:System.Security.Cryptography.ECDiffieHellman.ImportParameters%2A?displayProperty=fullName> method.
  remarks: To be added.
  syntax:
    content: public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.Security.Cryptography.ECParameters
      description: An object that represents the point on the curve for this key, using the explicit curve format.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: ECDiffieHellman.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellman.ExportParameters(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, exports either the public or the public and private key information from a working <see cref="T:System.Security.Cryptography.ECDiffieHellman"> key to an <xref:System.Security.Cryptography.ECParameters> structure so that it can be passed to the <xref:System.Security.Cryptography.ECDiffieHellman.ImportParameters%2A?displayProperty=fullName> method.
  remarks: If the curve has a name, the <xref:System.Security.Cryptography.ECParameters.Curve> property contains named curve parameters; otherwise, it will contain explicit parameters.
  syntax:
    content: public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otehrwise,  `false` to include public parameters only.'
    return:
      type: System.Security.Cryptography.ECParameters
      description: An object that represents the point on the curve for this key. It can be passed to the <xref:System.Security.Cryptography.ECDiffieHellman.ImportParameters%2A?displayProperty=fullName> method.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)
  id: GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: GenerateKey(ECCurve)
  nameWithType: ECDiffieHellman.GenerateKey(ECCurve)
  fullName: System.Security.Cryptography.ECDiffieHellman.GenerateKey(ECCurve)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve.
  remarks: "must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method) and must not be implicit.  \n  \n Characteristic-2 curves are not supported on Windows."
  syntax:
    content: public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
      description: The curve used to generate an ephemeral public/private key pair.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)
  id: ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ImportParameters(ECParameters)
  nameWithType: ECDiffieHellman.ImportParameters(ECParameters)
  fullName: System.Security.Cryptography.ECDiffieHellman.ImportParameters(ECParameters)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve"> as an ephemeral key into the current <xref:System.Security.Cryptography.ECDiffieHellman> object.
  remarks: "must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method. Parameters over implicit curves are not supported.  \n  \n Characteristic-2 curves are not supported on Windows."
  syntax:
    content: public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.ECParameters
      description: The curve's parameters to import.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets the name of the key exchange algorithm.
  remarks: "The default (non-overridden) implementation of this property returns the string \"ECDiffieHellman\".  \n  \n This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class."
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellman.PublicKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.
  remarks: To be added.
  syntax:
    content: public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets the name of the signature algorithm.
  remarks: "This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.  \n  \n The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation. Therefore, this property returns `null`."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ECDiffieHellman()
  nameWithType: ECDiffieHellman.ECDiffieHellman()
  fullName: System.Security.Cryptography.ECDiffieHellman.ECDiffieHellman()
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: System.Security.Cryptography.ECDiffieHellman.Create()
- uid: System.Security.Cryptography.ECDiffieHellman
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(ECCurve)
  nameWithType: ECDiffieHellman.Create(ECCurve)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(ECCurve)
- uid: System.Security.Cryptography.ECDiffieHellman
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
- uid: System.Security.Cryptography.ECCurve
  parent: System.Security.Cryptography
  isExternal: false
  name: ECCurve
  nameWithType: ECCurve
  fullName: System.Security.Cryptography.ECCurve
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(ECParameters)
  nameWithType: ECDiffieHellman.Create(ECParameters)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(ECParameters)
- uid: System.Security.Cryptography.ECDiffieHellman
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
- uid: System.Security.Cryptography.ECParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: ECParameters
  nameWithType: ECParameters
  fullName: System.Security.Cryptography.ECParameters
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(String)
- uid: System.Security.Cryptography.ECDiffieHellman
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDiffieHellman.ExportExplicitParameters(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(Boolean)
- uid: System.Security.Cryptography.ECParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: ECParameters
  nameWithType: ECParameters
  fullName: System.Security.Cryptography.ECParameters
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: ECDiffieHellman.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.ECDiffieHellman.ExportParameters(Boolean)
- uid: System.Security.Cryptography.ECParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: ECParameters
  nameWithType: ECParameters
  fullName: System.Security.Cryptography.ECParameters
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: GenerateKey(ECCurve)
  nameWithType: ECDiffieHellman.GenerateKey(ECCurve)
  fullName: System.Security.Cryptography.ECDiffieHellman.GenerateKey(ECCurve)
- uid: System.Security.Cryptography.ECCurve
  parent: System.Security.Cryptography
  isExternal: false
  name: ECCurve
  nameWithType: ECCurve
  fullName: System.Security.Cryptography.ECCurve
- uid: System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ImportParameters(ECParameters)
  nameWithType: ECDiffieHellman.ImportParameters(ECParameters)
  fullName: System.Security.Cryptography.ECDiffieHellman.ImportParameters(ECParameters)
- uid: System.Security.Cryptography.ECParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: ECParameters
  nameWithType: ECParameters
  fullName: System.Security.Cryptography.ECParameters
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellman.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDiffieHellman.Create*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  nameWithType: ECDiffieHellman.
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  nameWithType: ECDiffieHellman.
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  nameWithType: ECDiffieHellman.
