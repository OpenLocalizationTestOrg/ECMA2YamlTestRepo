### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RC2CryptoServiceProvider
  id: RC2CryptoServiceProvider
  children:
  - System.Security.Cryptography.RC2CryptoServiceProvider.#ctor
  - System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize
  - System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV
  - System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey
  - System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt
  langs:
  - csharp
  name: RC2CryptoServiceProvider
  nameWithType: RC2CryptoServiceProvider
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider
  type: Class
  summary: Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.RC2"> algorithm. This class cannot be inherited.
  remarks: "The RC2CryptoServiceProvider implementation supports key lengths from 40 bits to 128 bits in increments of 8 bits.  \n  \n The RC2CryptoServiceProvider object is a block cipher that encrypts and decrypts data in blocks of 8 bytes.  This class pads the final block of data if it is less than 8 bytes.  As a result of this padding, the length of encrypted data could be greater than the original plaintext.  \n  \n Note that the RC2CryptoServiceProvider object does not use salt.  \n  \n> [!NOTE]\n>  A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> algorithm and its derived classes instead of the RC2CryptoServiceProvider class. Use RC2CryptoServiceProvider only for compatibility with legacy applications and data."
  example:
  - "The following code example encrypts and then decrypts a string.  \n  \n [!CODE [System.Security.Cryptography.RC2CryptoServiceProvider Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class RC2CryptoServiceProvider : System.Security.Cryptography.RC2
  inheritance:
  - System.Object
  - System.Security.Cryptography.SymmetricAlgorithm
  - System.Security.Cryptography.RC2
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.RC2.Create
  - System.Security.Cryptography.RC2.Create(System.String)
  - System.Security.Cryptography.RC2.EffectiveKeySizeValue
  - System.Security.Cryptography.RC2.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.Key
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  langs:
  - csharp
  name: RC2CryptoServiceProvider()
  nameWithType: RC2CryptoServiceProvider.RC2CryptoServiceProvider()
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.RC2CryptoServiceProvider()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <see cref="T:System.Security.Cryptography.RC2CryptoServiceProvider"> class.
  remarks: ''
  example:
  - "The following code example encrypts and then decrypts a string.  \n  \n [!CODE [System.Security.Cryptography.RC2CryptoServiceProvider Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example#1)]"
  syntax:
    content: public RC2CryptoServiceProvider ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])
  id: CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  langs:
  - csharp
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: RC2CryptoServiceProvider.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates a symmetric <see cref="T:System.Security.Cryptography.RC2"> decryptor object with the specified key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>)and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>).
  remarks: This method is used to decrypt an encrypted message created using the <xref:System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor%2A> overload with the same parameters.
  example:
  - "The following code example encrypts and then decrypts a string.  \n  \n [!CODE [System.Security.Cryptography.RC2CryptoServiceProvider Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example#1)]"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: The secret key to use for the symmetric algorithm.
    - id: rgbIV
      type: System.Byte[]
      description: The initialization vector to use for the symmetric algorithm.
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: A symmetric <see cref="T:System.Security.Cryptography.RC2"> decryptor object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])
  id: CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  langs:
  - csharp
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: RC2CryptoServiceProvider.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates a symmetric <see cref="T:System.Security.Cryptography.RC2"> encryptor object with the specified key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>).
  remarks: Use the <xref:System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor%2A> overload with the same parameters to decrypt the result of this method.
  example:
  - "The following code example encrypts and then decrypts a string.  \n  \n [!CODE [System.Security.Cryptography.RC2CryptoServiceProvider Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example#1)]"
  syntax:
    content: public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: The secret key to use for the symmetric algorithm.
    - id: rgbIV
      type: System.Byte[]
      description: The initialization vector to use for the symmetric algorithm.
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: A symmetric <see cref="T:System.Security.Cryptography.RC2"> encryptor object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize
  id: EffectiveKeySize
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  langs:
  - csharp
  name: EffectiveKeySize
  nameWithType: RC2CryptoServiceProvider.EffectiveKeySize
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets or sets the effective size, in bits, of the secret key used by the <see cref="T:System.Security.Cryptography.RC2"> algorithm.
  remarks: To be added.
  syntax:
    content: public override int EffectiveKeySize { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV
  id: GenerateIV
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  langs:
  - csharp
  name: GenerateIV()
  nameWithType: RC2CryptoServiceProvider.GenerateIV()
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Generates a random initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) to use for the algorithm.
  remarks: Use this method to generate a random <xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A> when none is specified.
  example:
  - "The following code example encrypts and then decrypts a string.  \n  \n [!CODE [System.Security.Cryptography.RC2CryptoServiceProvider Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example#1)]"
  syntax:
    content: public override void GenerateIV ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey
  id: GenerateKey
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  langs:
  - csharp
  name: GenerateKey()
  nameWithType: RC2CryptoServiceProvider.GenerateKey()
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Generates a random key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) to be used for the algorithm.
  remarks: "Use this method to generate a random key when none is specified.  \n  \n The <xref:System.Security.Cryptography.RC2CryptoServiceProvider> implementation supports key lengths from 40 bits to 128 bits in increments of 8 bits."
  example:
  - "The following code example encrypts and then decrypts a string.  \n  \n [!CODE [System.Security.Cryptography.RC2CryptoServiceProvider Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.RC2CryptoServiceProvider Example#1)]"
  syntax:
    content: public override void GenerateKey ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt
  id: UseSalt
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  langs:
  - csharp
  name: UseSalt
  nameWithType: RC2CryptoServiceProvider.UseSalt
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Gets or sets a value that determines whether to create a key with an 11-byte-long, zero-value salt.
  remarks: The UseSalt property allows you to interoperate with an existing application that uses an 11-byte-long, zero-value salt.  For most scenarios, you should not use a salt with an <xref:System.Security.Cryptography.RC2CryptoServiceProvider> key.
  example:
  - "The following code example sets the UseSalt property to `true`, and then encrypts and decrypts a value.  \n  \n [!CODE [Cryptography.RC2CryptoServiceProvider#1](../CodeSnippet/VS_Snippets_CLR/Cryptography.RC2CryptoServiceProvider#1)]"
  syntax:
    content: public bool UseSalt { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Security.Cryptography.RC2
  isExternal: false
  name: System.Security.Cryptography.RC2
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.#ctor
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  isExternal: false
  name: RC2CryptoServiceProvider()
  nameWithType: RC2CryptoServiceProvider.RC2CryptoServiceProvider()
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.RC2CryptoServiceProvider()
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  isExternal: false
  name: CreateDecryptor(Byte[],Byte[])
  nameWithType: RC2CryptoServiceProvider.CreateDecryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.CreateDecryptor(Byte[],Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  isExternal: false
  name: CreateEncryptor(Byte[],Byte[])
  nameWithType: RC2CryptoServiceProvider.CreateEncryptor(Byte[],Byte[])
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.CreateEncryptor(Byte[],Byte[])
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  isExternal: false
  name: EffectiveKeySize
  nameWithType: RC2CryptoServiceProvider.EffectiveKeySize
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.EffectiveKeySize
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  isExternal: false
  name: GenerateIV()
  nameWithType: RC2CryptoServiceProvider.GenerateIV()
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.GenerateIV()
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  isExternal: false
  name: GenerateKey()
  nameWithType: RC2CryptoServiceProvider.GenerateKey()
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.GenerateKey()
- uid: System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt
  parent: System.Security.Cryptography.RC2CryptoServiceProvider
  isExternal: false
  name: UseSalt
  nameWithType: RC2CryptoServiceProvider.UseSalt
  fullName: System.Security.Cryptography.RC2CryptoServiceProvider.UseSalt
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
