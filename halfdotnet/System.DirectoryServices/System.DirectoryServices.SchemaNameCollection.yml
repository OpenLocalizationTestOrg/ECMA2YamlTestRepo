### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SchemaNameCollection
  id: SchemaNameCollection
  children:
  - System.DirectoryServices.SchemaNameCollection.Add(System.String)
  - System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  - System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  - System.DirectoryServices.SchemaNameCollection.Clear
  - System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  - System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  - System.DirectoryServices.SchemaNameCollection.Count
  - System.DirectoryServices.SchemaNameCollection.GetEnumerator
  - System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  - System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  - System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  - System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
  type: Class
  summary: Contains a list of the schema names that the <xref:System.DirectoryServices.DirectoryEntries.SchemaFilter%2A> property of a <xref:System.DirectoryServices.DirectoryEntries> object can use.
  remarks: To be added.
  syntax:
    content: 'public class SchemaNameCollection : System.Collections.IList'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)
  id: Add(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: SchemaNameCollection.Add(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Add(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Appends a specified schema name to this collection.
  remarks: To be added.
  syntax:
    content: public int Add (string value);
    parameters:
    - id: value
      type: System.String
      description: The schema name to add to this collection.
    return:
      type: System.Int32
      description: The zero-based index of the specified property value. If the object is not found, the return value is -1.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  id: AddRange(System.DirectoryServices.SchemaNameCollection)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: AddRange(SchemaNameCollection)
  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(SchemaNameCollection)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Appends a set of specified schema names to this collection.
  remarks: To be added.
  syntax:
    content: public void AddRange (System.DirectoryServices.SchemaNameCollection value);
    parameters:
    - id: value
      type: System.DirectoryServices.SchemaNameCollection
      description: A <see cref="T:System.DirectoryServices.SchemaNameCollection"> that contains the schema names to add.
  overload: System.DirectoryServices.SchemaNameCollection.AddRange*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  id: AddRange(System.String[])
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: AddRange(String[])
  nameWithType: SchemaNameCollection.AddRange(String[])
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(String[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Appends a set of specified schema names to this collection.
  remarks: To be added.
  syntax:
    content: public void AddRange (string[] value);
    parameters:
    - id: value
      type: System.String[]
      description: An array of type <see cref="T:System.String"> that contains the schema names to add.
  overload: System.DirectoryServices.SchemaNameCollection.AddRange*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.Clear
  id: Clear
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: SchemaNameCollection.Clear()
  fullName: System.DirectoryServices.SchemaNameCollection.Clear()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Removes all objects from this collection.
  remarks: To be added.
  syntax:
    content: public void Clear ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: SchemaNameCollection.Contains(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Contains(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Determines whether this collection contains a specified schema name.
  remarks: To be added.
  syntax:
    content: public bool Contains (string value);
    parameters:
    - id: value
      type: System.String
      description: The schema name to search for.
    return:
      type: System.Boolean
      description: The return value is `true` if the specified property belongs to this collection; otherwise, `false`.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  id: CopyTo(System.String[],System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: CopyTo(String[],Int32)
  nameWithType: SchemaNameCollection.CopyTo(String[],Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.CopyTo(String[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Copies the schema names from this collection to an array, starting at a particular index of the array.
  remarks: To be added.
  syntax:
    content: public void CopyTo (string[] stringArray, int index);
    parameters:
    - id: stringArray
      type: System.String[]
      description: An array of type <see cref="T:System.String"> that receives this collection's schema names.
    - id: index
      type: System.Int32
      description: The zero-based array index at which to begin copying the schema names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.Count
  id: Count
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Count
  nameWithType: SchemaNameCollection.Count
  fullName: System.DirectoryServices.SchemaNameCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: The Count property gets the number of objects in this collection.
  remarks: To be added.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SchemaNameCollection.GetEnumerator()
  fullName: System.DirectoryServices.SchemaNameCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Returns an enumerator that you can use to iterate through this collection.
  remarks: To be added.
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An enumerator that you can used to iterate through this collection.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: IndexOf(String)
  nameWithType: SchemaNameCollection.IndexOf(String)
  fullName: System.DirectoryServices.SchemaNameCollection.IndexOf(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Determines the index of a specified schema name in this collection.
  remarks: To be added.
  syntax:
    content: public int IndexOf (string value);
    parameters:
    - id: value
      type: System.String
      description: The schema name to search for.
    return:
      type: System.Int32
      description: The zero-based index of the specified schema name, or -1 if the schema name was not found in the collection.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Insert(Int32,String)
  nameWithType: SchemaNameCollection.Insert(Int32,String)
  fullName: System.DirectoryServices.SchemaNameCollection.Insert(Int32,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Inserts a schema name into this collection at a specified index.
  remarks: If the  parameter equals the number of items in the collection, this method appends the value to the end of the collection.
  syntax:
    content: public void Insert (int index, string value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index into the collection at which to insert the schema name.
    - id: value
      type: System.String
      description: The schema name to insert into this collection.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SchemaNameCollection.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Gets or sets the object that exists at a specified index.
  remarks: "In C#, this property is the indexer for the <xref:System.DirectoryServices.SchemaNameCollection> class.  \n  \n In JScript, you can use the default indexed properties defined by a type, but you cannot explicitly define your own. However, specifying the expando attribute on a class automatically provides a default indexed property whose type is Object and whose index type is <xref:System.String>."
  syntax:
    content: public string this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index into the collection.
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: SchemaNameCollection.Remove(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Remove(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Removes a specified schema name from this collection.
  remarks: To be added.
  syntax:
    content: public void Remove (string value);
    parameters:
    - id: value
      type: System.String
      description: The schema name to remove.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SchemaNameCollection.RemoveAt(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Removes the schema name that is at a specified index from this collection.
  remarks: To be added.
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the schema name to remove.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Copies the elements of the <see cref="T:System.Collections.ICollection"> to an <xref:System.Array>, starting at a particular <xref:System.Array> index.
  remarks: To be added.
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <see cref="T:System.Array"> that is the destination of the elements copied from <xref:System.Collections.ICollection>. The <see cref="T:System.Array"> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in  at which copying begins.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"> is synchronized (thread safe).
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>.  \n  \n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n [Visual Basic, C#]  \n  \n The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \n  \n```c#  \nICollection myCollection = new ICollection();  \n  lock(myCollection.SyncRoot) {  \n  foreach (Object item in myCollection) {  \n  // Insert your code here.  \n  }  \n }  \n```  \n  \n```vb#  \nDim myCollection As New ICollection()  \n Dim item As Object  \n SyncLock myCollection.SyncRoot  \n  For Each item In myCollection  \n  ' Insert your code here.  \n  Next item  \n End SyncLock  \n```"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection">.
  remarks: "For collections with an underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's `SyncRoot` property.  \n  \n Most collection classes in the <xref:System.Collections?displayProperty=fullName> namespace also implement a `Synchronized` method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property. The synchronizing code must perform operations on the <xref:System.Collections.ICollection.SyncRoot%2A> of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.  \n  \n In the absence of a `Synchronized` method on a collection, the expected usage for <xref:System.Collections.ICollection.SyncRoot%2A> looks like this:  \n  \n```c#  \nICollection MyCollection =...  \n lock(MyCollection.SyncRoot) {  \n  // Some operation on the collection, which is now thread safe.  \n }  \n```  \n  \n```vb#  \nDim myCollection as New ICollection()  \n SyncLock myCollection.SyncRoot  \n  ' Some operation on the collection, which is now thread safe.  \n End SyncLock  \n```  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n [Visual Basic, C#]  \n  \n The following example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> during the entire enumeration:  \n  \n```c#  \nICollection myCollection = new ICollection();  \n lock(myCollection.SyncRoot) {  \n  foreach (Object item in myCollection) {  \n  // Insert your code here.  \n  }  \n }  \n```  \n  \n```vb#  \nDim myCollection As New ICollection()  \n Dim item As Object  \n SyncLock myCollection.SyncRoot  \n  For Each item In myCollection  \n  ' Insert your code here.  \n  Next item  \n End SyncLock  \n```"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Add(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Adds an item to the list.
  remarks: To be added.
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: The item to add to the list.
    return:
      type: System.Int32
      description: The position into which the new item was inserted.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Determines whether the list contains a specified value.
  remarks: Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: The value to locate in the list.
    return:
      type: System.Boolean
      description: '`true` if the value is found in the list, otherwise `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Determines the index of a specified item in the list.
  remarks: Starting with the .NET Framework 2.0, this method uses the Equals and CompareTo methods of the objects in the collection to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the Equals and CompareTo methods of the item parameter on the objects in the collection.
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: The item to locate in the list.
    return:
      type: System.Int32
      description: The index of  if found in the list; otherwise, -1.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Inserts an item to the list at the specified index.
  remarks: "If  equals the number of items in the list, then *value* is appended to the end.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which value should be inserted.
    - id: value
      type: System.Object
      description: The item to insert into the list.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Gets a value indicating whether the <see cref="T:System.Collections.IList"> has a fixed size.
  remarks: A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Gets a value indicating whether the <see cref="T:System.Collections.IList"> is read-only.
  remarks: A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: SchemaNameCollection.System.Collections.IList.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Gets or sets the element at the specified index.
  remarks: 'This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.'
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: Removes the first occurrence of a specific  from the list.
  remarks: In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated.
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: The  to remove from the list.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Add(String)
  nameWithType: SchemaNameCollection.Add(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Add(String)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange(SchemaNameCollection)
  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(SchemaNameCollection)
- uid: System.DirectoryServices.SchemaNameCollection
  parent: System.DirectoryServices
  isExternal: false
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange(String[])
  nameWithType: SchemaNameCollection.AddRange(String[])
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(String[])
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.DirectoryServices.SchemaNameCollection.Clear
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Clear()
  nameWithType: SchemaNameCollection.Clear()
  fullName: System.DirectoryServices.SchemaNameCollection.Clear()
- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Contains(String)
  nameWithType: SchemaNameCollection.Contains(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: CopyTo(String[],Int32)
  nameWithType: SchemaNameCollection.CopyTo(String[],Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.CopyTo(String[],Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SchemaNameCollection.Count
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Count
  nameWithType: SchemaNameCollection.Count
  fullName: System.DirectoryServices.SchemaNameCollection.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: SchemaNameCollection.GetEnumerator()
  fullName: System.DirectoryServices.SchemaNameCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: IndexOf(String)
  nameWithType: SchemaNameCollection.IndexOf(String)
  fullName: System.DirectoryServices.SchemaNameCollection.IndexOf(String)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Insert(Int32,String)
  nameWithType: SchemaNameCollection.Insert(Int32,String)
  fullName: System.DirectoryServices.SchemaNameCollection.Insert(Int32,String)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: SchemaNameCollection.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.Item(Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Remove(String)
  nameWithType: SchemaNameCollection.Remove(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Remove(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SchemaNameCollection.RemoveAt(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.RemoveAt(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.SyncRoot
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Add(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Add(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IndexOf(Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsFixedSize
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: SchemaNameCollection.System.Collections.IList.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Item(Int32)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Remove(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SchemaNameCollection.AddRange*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  nameWithType: SchemaNameCollection.
