### YamlMime:ManagedReference
items:
- uid: System.Configuration.ConfigurationElement
  id: ConfigurationElement
  children:
  - System.Configuration.ConfigurationElement.#ctor
  - System.Configuration.ConfigurationElement.CurrentConfiguration
  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  - System.Configuration.ConfigurationElement.ElementInformation
  - System.Configuration.ConfigurationElement.ElementProperty
  - System.Configuration.ConfigurationElement.Equals(System.Object)
  - System.Configuration.ConfigurationElement.EvaluationContext
  - System.Configuration.ConfigurationElement.GetHashCode
  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  - System.Configuration.ConfigurationElement.HasContext
  - System.Configuration.ConfigurationElement.Init
  - System.Configuration.ConfigurationElement.InitializeDefault
  - System.Configuration.ConfigurationElement.IsModified
  - System.Configuration.ConfigurationElement.IsReadOnly
  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationElement.Item(System.String)
  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  - System.Configuration.ConfigurationElement.LockAllAttributesExcept
  - System.Configuration.ConfigurationElement.LockAllElementsExcept
  - System.Configuration.ConfigurationElement.LockAttributes
  - System.Configuration.ConfigurationElement.LockElements
  - System.Configuration.ConfigurationElement.LockItem
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  - System.Configuration.ConfigurationElement.PostDeserialize
  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  - System.Configuration.ConfigurationElement.Properties
  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElement.ResetModified
  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  - System.Configuration.ConfigurationElement.SetReadOnly
  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  langs:
  - csharp
  name: ConfigurationElement
  nameWithType: ConfigurationElement
  fullName: System.Configuration.ConfigurationElement
  type: Class
  summary: Represents a configuration element within a configuration file.
  remarks: "The ConfigurationElement is an abstract class that is used to represent an XML element in a configuration file (such as Web.config). An element in a configuration file can contain zero, one, or more child elements.  \n  \n Because the ConfigurationElement class is defined as abstract, you cannot create an instance of it. You can only derive classes from it. The .NET Framework includes classes that derive from the ConfigurationElement class in order to represent standard XML configuration elements, such as <xref:System.Configuration.ConfigurationSection>. You can also extend the ConfigurationElement class to access custom configuration elements and sections. The example included later in this topic shows how to access custom configuration elements and sections by using custom classes that derive from ConfigurationElement.  \n  \n You can also extend the standard configuration types such as ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, and <xref:System.Configuration.ConfigurationSection>. For more information, see the documentation for those classes.  \n  \n For more information about how to access information in configuration files, see the <xref:System.Configuration.ConfigurationManager> class and the <xref:System.Web.Configuration.WebConfigurationManager> class."
  example:
  - "The following code example shows how to implement a custom ConfigurationElement both as an individual element in a custom section and as a collection of elements in a custom section. The example consists of the following files:  \n  \n-   An app.config file that contains a custom section that is named `MyUrls`. This section contains a simple element (it does not contain any other elements) and a collection of elements. The simple element is named `simple` and the collection is named `urls`.  \n  \n-   A console application. The application reads the contents of the app.config file and writes the information to the console. It uses classes that derive from ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, and <xref:System.Configuration.ConfigurationSection>.  \n  \n-   A class named `UrlsSection` that derives from the <xref:System.Configuration.ConfigurationSection> class. This class is used to access the `MyUrls` section in the configuration file.  \n  \n-   A class named `UrlsCollection` that derives from the <xref:System.Configuration.ConfigurationElementCollection> class. This class is used to access the `urls` collection in the configuration file.  \n  \n-   A class named `UrlConfigElement` that derives from the ConfigurationElement class. This class is used to access the `simple` element and the members of the `urls` collection in the configuration file.  \n  \n To run the example, perform the following steps:  \n  \n1.  Create a solution that has a console application project and a class library project that is named `ConfigurationElement`.  \n  \n2.  Put the three class files in the class library project and put the other files in the console library project.  \n  \n3.  In both projects set a reference to `System.Configuration`.  \n  \n4.  In the console application project set a project reference to the class library project.  \n  \n [!CODE [System.Configuration.ConfigurationElement#150](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#150)]  \n  \n [!CODE [System.Configuration.ConfigurationElement#151](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#151)]  \n  \n [!CODE [System.Configuration.ConfigurationElement#71](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#71)]  \n  \n [!CODE [System.Configuration.ConfigurationElement#51](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#51)]  \n  \n [!CODE [System.Configuration.ConfigurationElement#31](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#31)]"
  syntax:
    content: public abstract class ConfigurationElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.#ctor
  id: '#ctor'
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ConfigurationElement()
  nameWithType: ConfigurationElement.ConfigurationElement()
  fullName: System.Configuration.ConfigurationElement.ConfigurationElement()
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationElement"> class.
  remarks: You create a new instance of the <xref:System.Configuration.ConfigurationElement> class, for example, every time your application needs to add a new element to the related <xref:System.Configuration.ConfigurationElementCollection> collection.
  example:
  - "The following example shows how to use a customized constructor.  \n  \n [!CODE [System.Configuration.ConfigurationElement#32](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#32)]"
  syntax:
    content: protected ConfigurationElement ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.CurrentConfiguration
  id: CurrentConfiguration
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: CurrentConfiguration
  nameWithType: ConfigurationElement.CurrentConfiguration
  fullName: System.Configuration.ConfigurationElement.CurrentConfiguration
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets a reference to the top-level <see cref="T:System.Configuration.Configuration"> instance that represents the configuration hierarchy that the current <xref:System.Configuration.ConfigurationElement> instance belongs to.
  remarks: The CurrentConfiguration property makes it easy to determine which version of the [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)] is targeted. The <xref:System.Configuration.Configuration.TargetFramework%2A> property of the top-level <xref:System.Configuration.Configuration> instance indicates the targeted framework version.
  syntax:
    content: public System.Configuration.Configuration CurrentConfiguration { get; }
    return:
      type: System.Configuration.Configuration
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  id: DeserializeElement(System.Xml.XmlReader,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: DeserializeElement(XmlReader,Boolean)
  nameWithType: ConfigurationElement.DeserializeElement(XmlReader,Boolean)
  fullName: System.Configuration.ConfigurationElement.DeserializeElement(XmlReader,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Reads XML from the configuration file.
  remarks: ''
  example:
  - "The following example demonstrates how to extend the DeserializeElement method.  \n  \n [!CODE [System.Configuration.ConfigurationElement#33](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#33)]"
  syntax:
    content: protected virtual void DeserializeElement (System.Xml.XmlReader reader, bool serializeCollectionKey);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: The <xref:System.Xml.XmlReader> that reads from the configuration file.
    - id: serializeCollectionKey
      type: System.Boolean
      description: '`true` to serialize only the collection key properties; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.ElementInformation
  id: ElementInformation
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ElementInformation
  nameWithType: ConfigurationElement.ElementInformation
  fullName: System.Configuration.ConfigurationElement.ElementInformation
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets an <see cref="T:System.Configuration.ElementInformation"> object that contains the non-customizable information and functionality of the <xref:System.Configuration.ConfigurationElement> object.
  remarks: ''
  example:
  - "The following example shows how to use the ElementInformation property.  \n  \n [!CODE [System.Configuration.ConfigurationElement#80](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#80)]"
  syntax:
    content: public System.Configuration.ElementInformation ElementInformation { get; }
    return:
      type: System.Configuration.ElementInformation
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.ElementProperty
  id: ElementProperty
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ElementProperty
  nameWithType: ConfigurationElement.ElementProperty
  fullName: System.Configuration.ConfigurationElement.ElementProperty
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the <see cref="T:System.Configuration.ConfigurationElementProperty"> object that represents the <xref:System.Configuration.ConfigurationElement> object itself.
  remarks: To be added.
  syntax:
    content: protected virtual System.Configuration.ConfigurationElementProperty ElementProperty { get; }
    return:
      type: System.Configuration.ConfigurationElementProperty
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ConfigurationElement.Equals(Object)
  fullName: System.Configuration.ConfigurationElement.Equals(Object)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Compares the current <see cref="T:System.Configuration.ConfigurationElement"> instance to the specified object.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object compareTo);
    parameters:
    - id: compareTo
      type: System.Object
      description: The object to compare with.
    return:
      type: System.Boolean
      description: '`true` if the object to compare with is equal to the current <see cref="T:System.Configuration.ConfigurationElement"> instance; otherwise, `false`. The default is `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.EvaluationContext
  id: EvaluationContext
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: EvaluationContext
  nameWithType: ConfigurationElement.EvaluationContext
  fullName: System.Configuration.ConfigurationElement.EvaluationContext
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the <see cref="T:System.Configuration.ContextInformation"> object for the <xref:System.Configuration.ConfigurationElement> object.
  remarks: "A <xref:System.Configuration.ContextInformation> object provides the context necessary for a <xref:System.Configuration.ConfigurationElement> object to make decisions based upon where it is being evaluated.  \n  \n The <xref:System.Configuration.ContextInformation> object provides environment details related to an element of the configuration. For example, you can use the <xref:System.Configuration.ContextInformation.IsMachineLevel%2A> property to determine whether a <xref:System.Configuration.ConfigurationElement> was set in Machine.config, or you can determine which hierarchy a <xref:System.Configuration.ConfigurationElement> element belongs to by using the <xref:System.Configuration.ContextInformation.HostingContext%2A> property."
  syntax:
    content: protected System.Configuration.ContextInformation EvaluationContext { get; }
    return:
      type: System.Configuration.ContextInformation
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.GetHashCode
  id: GetHashCode
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ConfigurationElement.GetHashCode()
  fullName: System.Configuration.ConfigurationElement.GetHashCode()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets a unique value representing the current <see cref="T:System.Configuration.ConfigurationElement"> instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A unique value representing the current <see cref="T:System.Configuration.ConfigurationElement"> instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  id: GetTransformedAssemblyString(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: GetTransformedAssemblyString(String)
  nameWithType: ConfigurationElement.GetTransformedAssemblyString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Returns the transformed version of the specified assembly name.
  remarks: The <xref:System.Configuration.ConfigurationElement.SerializeElement%2A> method and the <xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A> method call this method in order to transform an assembly name when an earlier version of the [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)] is targeted.
  syntax:
    content: protected virtual string GetTransformedAssemblyString (string assemblyName);
    parameters:
    - id: assemblyName
      type: System.String
      description: The name of the assembly.
    return:
      type: System.String
      description: The transformed version of the assembly name. If no transformer is available, the  parameter value is returned unchanged. The <xref:System.Configuration.Configuration.TypeStringTransformer%2A> property is `null` if no transformer is available.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  id: GetTransformedTypeString(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: GetTransformedTypeString(String)
  nameWithType: ConfigurationElement.GetTransformedTypeString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedTypeString(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Returns the transformed version of the specified type name.
  remarks: The <xref:System.Configuration.ConfigurationElement.SerializeElement%2A> method and the <xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A> method call this method in order to transform a type name when an earlier version of the [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)] is targeted.
  syntax:
    content: protected virtual string GetTransformedTypeString (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: The name of the type.
    return:
      type: System.String
      description: The transformed version of the specified type name. If no transformer is available, the  parameter value is returned unchanged. The <xref:System.Configuration.Configuration.TypeStringTransformer%2A> property is `null` if no transformer is available.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.HasContext
  id: HasContext
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: HasContext
  nameWithType: ConfigurationElement.HasContext
  fullName: System.Configuration.ConfigurationElement.HasContext
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets a value that indicates whether the <xref:System.Configuration.ConfigurationElement.CurrentConfiguration%2A> property is `null`.
  remarks: To be added.
  syntax:
    content: protected bool HasContext { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.Init
  id: Init
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Init()
  nameWithType: ConfigurationElement.Init()
  fullName: System.Configuration.ConfigurationElement.Init()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Sets the <see cref="T:System.Configuration.ConfigurationElement"> object to its initial state.
  remarks: To be added.
  syntax:
    content: protected virtual void Init ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.InitializeDefault
  id: InitializeDefault
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: InitializeDefault()
  nameWithType: ConfigurationElement.InitializeDefault()
  fullName: System.Configuration.ConfigurationElement.InitializeDefault()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Used to initialize a default set of values for the <see cref="T:System.Configuration.ConfigurationElement"> object.
  remarks: Called to set the internal state of the object to appropriate default values.
  syntax:
    content: protected virtual void InitializeDefault ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.IsModified
  id: IsModified
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: IsModified()
  nameWithType: ConfigurationElement.IsModified()
  fullName: System.Configuration.ConfigurationElement.IsModified()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Indicates whether this configuration element has been modified since it was last saved or loaded, when implemented in a derived class.
  remarks: "The IsModified method determines whether this <xref:System.Configuration.ConfigurationElement> object will be written to the configuration file when the <xref:System.Configuration.Configuration.Save%2A> method is called. If the return value is `false`, it is assumed that the configuration file represents the current state of the element.  \n  \n By default, IsModified returns `true` after a property is set through the indexer to this <xref:System.Configuration.ConfigurationElement> object.  \n  \n Override the IsModified method to provide custom indication of the state of this <xref:System.Configuration.ConfigurationElement> element."
  example:
  - "The following example shows how to extend IsModified.  \n  \n [!CODE [System.Configuration.ConfigurationElement#35](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#35)]  \n  \n The method shown in the previous example is called when a configuration element is modified, as in the following example.  \n  \n [!CODE [System.Configuration.ConfigurationElement#6](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#6)]"
  syntax:
    content: protected virtual bool IsModified ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the element has been modified; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.IsReadOnly
  id: IsReadOnly
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: ConfigurationElement.IsReadOnly()
  fullName: System.Configuration.ConfigurationElement.IsReadOnly()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets a value indicating whether the <see cref="T:System.Configuration.ConfigurationElement"> object is read-only.
  remarks: "The system defines configuration elements that cannot be modified.  \n  \n To determine which elements can be modified, use the IsReadOnly method."
  example:
  - "The following example shows how to use the IsReadOnly method. It is used on a custom section and returns `false`.  \n  \n [!CODE [System.Configuration.ConfigurationElement#7](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#7)]"
  syntax:
    content: public virtual bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Configuration.ConfigurationElement"> object is read-only; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  id: Item(System.Configuration.ConfigurationProperty)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Item(ConfigurationProperty)
  nameWithType: ConfigurationElement.Item(ConfigurationProperty)
  fullName: System.Configuration.ConfigurationElement.Item(ConfigurationProperty)
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets or sets a property or attribute of this configuration element.
  remarks: "Use the Item property to get or set the values of a <xref:System.Configuration.ConfigurationProperty> object.  \n  \n In C#, this property is the indexer for the <xref:System.Configuration.ConfigurationSectionCollection> class."
  syntax:
    content: protected object this[System.Configuration.ConfigurationProperty prop] { get; set; }
    parameters:
    - id: prop
      type: System.Configuration.ConfigurationProperty
      description: The property to access.
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.Item(System.String)
  id: Item(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Item(String)
  nameWithType: ConfigurationElement.Item(String)
  fullName: System.Configuration.ConfigurationElement.Item(String)
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets or sets a property, attribute, or child element of this configuration element.
  remarks: "Use the Item property to get or set the values of a <xref:System.Configuration.ConfigurationProperty> object.  \n  \n In C#, this property is the indexer for the <xref:System.Configuration.ConfigurationSectionCollection> class."
  syntax:
    content: protected object this[string propertyName] { get; set; }
    parameters:
    - id: propertyName
      type: System.String
      description: The name of the <see cref="T:System.Configuration.ConfigurationProperty"> to access.
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  id: ListErrors(System.Collections.IList)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ListErrors(IList)
  nameWithType: ConfigurationElement.ListErrors(IList)
  fullName: System.Configuration.ConfigurationElement.ListErrors(IList)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Adds the invalid-property errors in this <see cref="T:System.Configuration.ConfigurationElement"> object, and in all subelements, to the passed list.
  remarks: To be added.
  syntax:
    content: protected virtual void ListErrors (System.Collections.IList errorList);
    parameters:
    - id: errorList
      type: System.Collections.IList
      description: An object that implements the <see cref="T:System.Collections.IList"> interface.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept
  id: LockAllAttributesExcept
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockAllAttributesExcept
  nameWithType: ConfigurationElement.LockAllAttributesExcept
  fullName: System.Configuration.ConfigurationElement.LockAllAttributesExcept
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the collection of locked attributes.
  remarks: "The LockAllAttributesExcept property allows you to lock all the attributes at once, with the exception of the one you specify. To do that, you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the Example section.  \n  \n> [!NOTE]\n>  The LockAllAttributesExcept property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use the <xref:System.Configuration.ConfigurationElement.LockItem%2A> property if you want to put a general lock on the parent element itself and its child elements."
  example:
  - "The following example shows how to use the LockAllAttributesExcept.  \n  \n [!CODE [System.Configuration.ConfigurationElement#9](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#9)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockAllAttributesExcept { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept
  id: LockAllElementsExcept
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockAllElementsExcept
  nameWithType: ConfigurationElement.LockAllElementsExcept
  fullName: System.Configuration.ConfigurationElement.LockAllElementsExcept
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the collection of locked elements.
  remarks: "The LockAllElementsExcept property allows you to lock all the elements at once, except for the one you specify.  \n  \n> [!NOTE]\n>  The LockAllElementsExcept property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use the <xref:System.Configuration.ConfigurationElement.LockItem%2A> property if you want to put a general lock on the element itself and its child elements."
  example:
  - "The following example shows how to use the LockAllElementsExcept property.  \n  \n [!CODE [System.Configuration.ConfigurationElement#5](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#5)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockAllElementsExcept { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.LockAttributes
  id: LockAttributes
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockAttributes
  nameWithType: ConfigurationElement.LockAttributes
  fullName: System.Configuration.ConfigurationElement.LockAttributes
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the collection of locked attributes
  remarks: "The LockAttributes property allows you to lock all the attributes you specify.  \n  \n To do that you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the Example section.  \n  \n> [!NOTE]\n>  The LockAttributes property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use <xref:System.Configuration.ConfigurationElement.LockItem%2A> if you want to put a general lock on the element itself and its child elements."
  example:
  - "The following example shows how to use the LockAttributes property.  \n  \n [!CODE [System.Configuration.ConfigurationElement#8](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#8)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockAttributes { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.LockElements
  id: LockElements
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockElements
  nameWithType: ConfigurationElement.LockElements
  fullName: System.Configuration.ConfigurationElement.LockElements
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the collection of locked elements.
  remarks: "The LockElements property allows you to lock all the elements you specify.  \n  \n To do that, you use the <xref:System.Configuration.ConfigurationLockCollection.Contains%2A> method, as explained in the next example.  \n  \n> [!NOTE]\n>  The LockElements property allows you to prevent the child configuration elements of the element to which you apply the rule from being modified. Use <xref:System.Configuration.ConfigurationElement.LockItem%2A> if you want to put a general lock on the element itself and its child elements."
  example:
  - "The following example shows how to use the LockElements property.  \n  \n [!CODE [System.Configuration.ConfigurationElement#4](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#4)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockElements { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.LockItem
  id: LockItem
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockItem
  nameWithType: ConfigurationElement.LockItem
  fullName: System.Configuration.ConfigurationElement.LockItem
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets or sets a value indicating whether the element is locked.
  remarks: Use the LockItem property if you want to put a general lock on the element itself and its child elements.
  example:
  - "The following example shows how to use the LockItem.  \n  \n [!CODE [System.Configuration.ConfigurationElement#3](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#3)]"
  syntax:
    content: public bool LockItem { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  id: OnDeserializeUnrecognizedAttribute(System.String,System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: OnDeserializeUnrecognizedAttribute(String,String)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets a value indicating whether an unknown attribute is encountered during deserialization.
  remarks: The OnDeserializeUnrecognizedAttribute is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object.
  syntax:
    content: protected virtual bool OnDeserializeUnrecognizedAttribute (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: The name of the unrecognized attribute.
    - id: value
      type: System.String
      description: The value of the unrecognized attribute.
    return:
      type: System.Boolean
      description: '`true` when an unknown attribute is encountered while deserializing; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  id: OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: OnDeserializeUnrecognizedElement(String,XmlReader)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets a value indicating whether an unknown element is encountered during deserialization.
  remarks: The OnDeserializeUnrecognizedElement is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object.
  syntax:
    content: protected virtual bool OnDeserializeUnrecognizedElement (string elementName, System.Xml.XmlReader reader);
    parameters:
    - id: elementName
      type: System.String
      description: The name of the unknown subelement.
    - id: reader
      type: System.Xml.XmlReader
      description: The <xref:System.Xml.XmlReader> being used for deserialization.
    return:
      type: System.Boolean
      description: '`true` when an unknown element is encountered while deserializing; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  id: OnRequiredPropertyNotFound(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: OnRequiredPropertyNotFound(String)
  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound(String)
  fullName: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Throws an exception when a required property is not found.
  remarks: The <xref:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement%2A> is invoked when an unknown attribute is encountered while deserializing the <xref:System.Configuration.ConfigurationElement> object.
  syntax:
    content: protected virtual object OnRequiredPropertyNotFound (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of the required attribute that was not found.
    return:
      type: System.Object
      description: None.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.PostDeserialize
  id: PostDeserialize
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: PostDeserialize()
  nameWithType: ConfigurationElement.PostDeserialize()
  fullName: System.Configuration.ConfigurationElement.PostDeserialize()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Called after deserialization.
  remarks: To be added.
  syntax:
    content: protected virtual void PostDeserialize ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  id: PreSerialize(System.Xml.XmlWriter)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: PreSerialize(XmlWriter)
  nameWithType: ConfigurationElement.PreSerialize(XmlWriter)
  fullName: System.Configuration.ConfigurationElement.PreSerialize(XmlWriter)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Called before serialization.
  remarks: To be added.
  syntax:
    content: protected virtual void PreSerialize (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The <xref:System.Xml.XmlWriter> that will be used to serialize the <xref:System.Configuration.ConfigurationElement>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.Properties
  id: Properties
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Properties
  nameWithType: ConfigurationElement.Properties
  fullName: System.Configuration.ConfigurationElement.Properties
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the collection of properties.
  remarks: The Properties property, also called the property bag, contains all the properties (attributes) that apply to the element.
  example:
  - For an example that shows how to use the Properties property, refer to the <xref:System.Configuration.ConfigurationProperty> class.
  syntax:
    content: protected virtual System.Configuration.ConfigurationPropertyCollection Properties { get; }
    return:
      type: System.Configuration.ConfigurationPropertyCollection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  id: Reset(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Reset(ConfigurationElement)
  nameWithType: ConfigurationElement.Reset(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElement.Reset(ConfigurationElement)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Resets the internal state of the <see cref="T:System.Configuration.ConfigurationElement"> object, including the locks and the properties collections.
  remarks: To be added.
  syntax:
    content: protected virtual void Reset (System.Configuration.ConfigurationElement parentElement);
    parameters:
    - id: parentElement
      type: System.Configuration.ConfigurationElement
      description: The parent node of the configuration element.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.ResetModified
  id: ResetModified
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ResetModified()
  nameWithType: ConfigurationElement.ResetModified()
  fullName: System.Configuration.ConfigurationElement.ResetModified()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Resets the value of the <xref:System.Configuration.ConfigurationElement.IsModified%2A> method to `false` when implemented in a derived class.
  remarks: The ResetModified method is automatically called after changes to this <xref:System.Configuration.ConfigurationElement> object have been written to the configuration file.
  syntax:
    content: protected virtual void ResetModified ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  id: SerializeElement(System.Xml.XmlWriter,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SerializeElement(XmlWriter,Boolean)
  nameWithType: ConfigurationElement.SerializeElement(XmlWriter,Boolean)
  fullName: System.Configuration.ConfigurationElement.SerializeElement(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Writes the contents of this configuration element to the configuration file when implemented in a derived class.
  remarks: ''
  example:
  - "The following example shows how to extend the SerializeElement method.  \n  \n [!CODE [System.Configuration.ConfigurationElement#34](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationElement#34)]"
  syntax:
    content: protected virtual bool SerializeElement (System.Xml.XmlWriter writer, bool serializeCollectionKey);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The <xref:System.Xml.XmlWriter> that writes to the configuration file.
    - id: serializeCollectionKey
      type: System.Boolean
      description: '`true` to serialize only the collection key properties; otherwise, `false`.'
    return:
      type: System.Boolean
      description: '`true` if any data was actually serialized; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  id: SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SerializeToXmlElement(XmlWriter,String)
  nameWithType: ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
  fullName: System.Configuration.ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Writes the outer tags of this configuration element to the configuration file when implemented in a derived class.
  remarks: The SerializeToXmlElement method is called after the call to the <xref:System.Configuration.ConfigurationElement.Unmerge%2A> method during serialization. The SerializeToXmlElement method writes out the contents of the configuration element between the beginning and ending tags of the element. Override SerializeToXmlElement to provide a custom serialization method.
  syntax:
    content: protected virtual bool SerializeToXmlElement (System.Xml.XmlWriter writer, string elementName);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The <xref:System.Xml.XmlWriter> that writes to the configuration file.
    - id: elementName
      type: System.String
      description: The name of the <see cref="T:System.Configuration.ConfigurationElement"> to be written.
    return:
      type: System.Boolean
      description: '`true` if writing was successful; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  id: SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SetPropertyValue(ConfigurationProperty,Object,Boolean)
  nameWithType: ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
  fullName: System.Configuration.ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Sets a property to the specified value.
  remarks: To be added.
  syntax:
    content: protected void SetPropertyValue (System.Configuration.ConfigurationProperty prop, object value, bool ignoreLocks);
    parameters:
    - id: prop
      type: System.Configuration.ConfigurationProperty
      description: The element property to set.
    - id: value
      type: System.Object
      description: The value to assign to the property.
    - id: ignoreLocks
      type: System.Boolean
      description: '`true` if the locks on the property should be ignored; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.SetReadOnly
  id: SetReadOnly
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SetReadOnly()
  nameWithType: ConfigurationElement.SetReadOnly()
  fullName: System.Configuration.ConfigurationElement.SetReadOnly()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Sets the <xref:System.Configuration.ConfigurationElement.IsReadOnly%2A> property for the <xref:System.Configuration.ConfigurationElement> object and all subelements.
  remarks: "This method is used internally to set aside those system-configuration elements that cannot be modified.  \n  \n To determine which elements can be modified, use the <xref:System.Configuration.ConfigurationElement.IsReadOnly%2A> method."
  syntax:
    content: protected virtual void SetReadOnly ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  id: Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  nameWithType: ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  fullName: System.Configuration.ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Modifies the <see cref="T:System.Configuration.ConfigurationElement"> object to remove all values that should not be saved.
  remarks: This method is called before the <xref:System.Configuration.ConfigurationElement> object is saved by the <xref:System.Configuration.Configuration> object in order to remove all unneeded properties.
  syntax:
    content: protected virtual void Unmerge (System.Configuration.ConfigurationElement sourceElement, System.Configuration.ConfigurationElement parentElement, System.Configuration.ConfigurationSaveMode saveMode);
    parameters:
    - id: sourceElement
      type: System.Configuration.ConfigurationElement
      description: A <see cref="T:System.Configuration.ConfigurationElement"> at the current level containing a merged view of the properties.
    - id: parentElement
      type: System.Configuration.ConfigurationElement
      description: The parent <see cref="T:System.Configuration.ConfigurationElement">, or `null` if this is the top level.
    - id: saveMode
      type: System.Configuration.ConfigurationSaveMode
      description: A <see cref="T:System.Configuration.ConfigurationSaveMode"> that determines which property values to include.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationElement.#ctor
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ConfigurationElement()
  nameWithType: ConfigurationElement.ConfigurationElement()
  fullName: System.Configuration.ConfigurationElement.ConfigurationElement()
- uid: System.Configuration.ConfigurationElement.CurrentConfiguration
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: CurrentConfiguration
  nameWithType: ConfigurationElement.CurrentConfiguration
  fullName: System.Configuration.ConfigurationElement.CurrentConfiguration
- uid: System.Configuration.Configuration
  parent: System.Configuration
  isExternal: false
  name: Configuration
  nameWithType: Configuration
  fullName: System.Configuration.Configuration
- uid: System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: DeserializeElement(XmlReader,Boolean)
  nameWithType: ConfigurationElement.DeserializeElement(XmlReader,Boolean)
  fullName: System.Configuration.ConfigurationElement.DeserializeElement(XmlReader,Boolean)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationElement.ElementInformation
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ElementInformation
  nameWithType: ConfigurationElement.ElementInformation
  fullName: System.Configuration.ConfigurationElement.ElementInformation
- uid: System.Configuration.ElementInformation
  parent: System.Configuration
  isExternal: false
  name: ElementInformation
  nameWithType: ElementInformation
  fullName: System.Configuration.ElementInformation
- uid: System.Configuration.ConfigurationElement.ElementProperty
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ElementProperty
  nameWithType: ConfigurationElement.ElementProperty
  fullName: System.Configuration.ConfigurationElement.ElementProperty
- uid: System.Configuration.ConfigurationElementProperty
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElementProperty
  nameWithType: ConfigurationElementProperty
  fullName: System.Configuration.ConfigurationElementProperty
- uid: System.Configuration.ConfigurationElement.Equals(System.Object)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Equals(Object)
  nameWithType: ConfigurationElement.Equals(Object)
  fullName: System.Configuration.ConfigurationElement.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Configuration.ConfigurationElement.EvaluationContext
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: EvaluationContext
  nameWithType: ConfigurationElement.EvaluationContext
  fullName: System.Configuration.ConfigurationElement.EvaluationContext
- uid: System.Configuration.ContextInformation
  parent: System.Configuration
  isExternal: false
  name: ContextInformation
  nameWithType: ContextInformation
  fullName: System.Configuration.ContextInformation
- uid: System.Configuration.ConfigurationElement.GetHashCode
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetHashCode()
  nameWithType: ConfigurationElement.GetHashCode()
  fullName: System.Configuration.ConfigurationElement.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetTransformedAssemblyString(String)
  nameWithType: ConfigurationElement.GetTransformedAssemblyString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetTransformedTypeString(String)
  nameWithType: ConfigurationElement.GetTransformedTypeString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedTypeString(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationElement.HasContext
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: HasContext
  nameWithType: ConfigurationElement.HasContext
  fullName: System.Configuration.ConfigurationElement.HasContext
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationElement.Init
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Init()
  nameWithType: ConfigurationElement.Init()
  fullName: System.Configuration.ConfigurationElement.Init()
- uid: System.Configuration.ConfigurationElement.InitializeDefault
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: InitializeDefault()
  nameWithType: ConfigurationElement.InitializeDefault()
  fullName: System.Configuration.ConfigurationElement.InitializeDefault()
- uid: System.Configuration.ConfigurationElement.IsModified
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: IsModified()
  nameWithType: ConfigurationElement.IsModified()
  fullName: System.Configuration.ConfigurationElement.IsModified()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationElement.IsReadOnly
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: IsReadOnly()
  nameWithType: ConfigurationElement.IsReadOnly()
  fullName: System.Configuration.ConfigurationElement.IsReadOnly()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Item(ConfigurationProperty)
  nameWithType: ConfigurationElement.Item(ConfigurationProperty)
  fullName: System.Configuration.ConfigurationElement.Item(ConfigurationProperty)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Configuration.ConfigurationProperty
  parent: System.Configuration
  isExternal: false
  name: ConfigurationProperty
  nameWithType: ConfigurationProperty
  fullName: System.Configuration.ConfigurationProperty
- uid: System.Configuration.ConfigurationElement.Item(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Item(String)
  nameWithType: ConfigurationElement.Item(String)
  fullName: System.Configuration.ConfigurationElement.Item(String)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ListErrors(IList)
  nameWithType: ConfigurationElement.ListErrors(IList)
  fullName: System.Configuration.ConfigurationElement.ListErrors(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAllAttributesExcept
  nameWithType: ConfigurationElement.LockAllAttributesExcept
  fullName: System.Configuration.ConfigurationElement.LockAllAttributesExcept
- uid: System.Configuration.ConfigurationLockCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationLockCollection
  nameWithType: ConfigurationLockCollection
  fullName: System.Configuration.ConfigurationLockCollection
- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAllElementsExcept
  nameWithType: ConfigurationElement.LockAllElementsExcept
  fullName: System.Configuration.ConfigurationElement.LockAllElementsExcept
- uid: System.Configuration.ConfigurationLockCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationLockCollection
  nameWithType: ConfigurationLockCollection
  fullName: System.Configuration.ConfigurationLockCollection
- uid: System.Configuration.ConfigurationElement.LockAttributes
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAttributes
  nameWithType: ConfigurationElement.LockAttributes
  fullName: System.Configuration.ConfigurationElement.LockAttributes
- uid: System.Configuration.ConfigurationLockCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationLockCollection
  nameWithType: ConfigurationLockCollection
  fullName: System.Configuration.ConfigurationLockCollection
- uid: System.Configuration.ConfigurationElement.LockElements
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockElements
  nameWithType: ConfigurationElement.LockElements
  fullName: System.Configuration.ConfigurationElement.LockElements
- uid: System.Configuration.ConfigurationLockCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationLockCollection
  nameWithType: ConfigurationLockCollection
  fullName: System.Configuration.ConfigurationLockCollection
- uid: System.Configuration.ConfigurationElement.LockItem
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockItem
  nameWithType: ConfigurationElement.LockItem
  fullName: System.Configuration.ConfigurationElement.LockItem
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnDeserializeUnrecognizedAttribute(String,String)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnDeserializeUnrecognizedElement(String,XmlReader)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnRequiredPropertyNotFound(String)
  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound(String)
  fullName: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(String)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationElement.PostDeserialize
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: PostDeserialize()
  nameWithType: ConfigurationElement.PostDeserialize()
  fullName: System.Configuration.ConfigurationElement.PostDeserialize()
- uid: System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: PreSerialize(XmlWriter)
  nameWithType: ConfigurationElement.PreSerialize(XmlWriter)
  fullName: System.Configuration.ConfigurationElement.PreSerialize(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Configuration.ConfigurationElement.Properties
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Properties
  nameWithType: ConfigurationElement.Properties
  fullName: System.Configuration.ConfigurationElement.Properties
- uid: System.Configuration.ConfigurationPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationPropertyCollection
  nameWithType: ConfigurationPropertyCollection
  fullName: System.Configuration.ConfigurationPropertyCollection
- uid: System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Reset(ConfigurationElement)
  nameWithType: ConfigurationElement.Reset(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElement.Reset(ConfigurationElement)
- uid: System.Configuration.ConfigurationElement
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElement
  nameWithType: ConfigurationElement
  fullName: System.Configuration.ConfigurationElement
- uid: System.Configuration.ConfigurationElement.ResetModified
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ResetModified()
  nameWithType: ConfigurationElement.ResetModified()
  fullName: System.Configuration.ConfigurationElement.ResetModified()
- uid: System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SerializeElement(XmlWriter,Boolean)
  nameWithType: ConfigurationElement.SerializeElement(XmlWriter,Boolean)
  fullName: System.Configuration.ConfigurationElement.SerializeElement(XmlWriter,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SerializeToXmlElement(XmlWriter,String)
  nameWithType: ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
  fullName: System.Configuration.ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SetPropertyValue(ConfigurationProperty,Object,Boolean)
  nameWithType: ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
  fullName: System.Configuration.ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
- uid: System.Configuration.ConfigurationProperty
  parent: System.Configuration
  isExternal: false
  name: ConfigurationProperty
  nameWithType: ConfigurationProperty
  fullName: System.Configuration.ConfigurationProperty
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationElement.SetReadOnly
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SetReadOnly()
  nameWithType: ConfigurationElement.SetReadOnly()
  fullName: System.Configuration.ConfigurationElement.SetReadOnly()
- uid: System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  nameWithType: ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  fullName: System.Configuration.ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
- uid: System.Configuration.ConfigurationElement
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElement
  nameWithType: ConfigurationElement
  fullName: System.Configuration.ConfigurationElement
- uid: System.Configuration.ConfigurationElement
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElement
  nameWithType: ConfigurationElement
  fullName: System.Configuration.ConfigurationElement
- uid: System.Configuration.ConfigurationSaveMode
  parent: System.Configuration
  isExternal: false
  name: ConfigurationSaveMode
  nameWithType: ConfigurationSaveMode
  fullName: System.Configuration.ConfigurationSaveMode
