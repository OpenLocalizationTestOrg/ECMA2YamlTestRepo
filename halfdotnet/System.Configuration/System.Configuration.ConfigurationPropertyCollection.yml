### YamlMime:ManagedReference
items:
- uid: System.Configuration.ConfigurationPropertyCollection
  id: ConfigurationPropertyCollection
  children:
  - System.Configuration.ConfigurationPropertyCollection.#ctor
  - System.Configuration.ConfigurationPropertyCollection.Add(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationPropertyCollection.Clear
  - System.Configuration.ConfigurationPropertyCollection.Contains(System.String)
  - System.Configuration.ConfigurationPropertyCollection.CopyTo(System.Configuration.ConfigurationProperty[],System.Int32)
  - System.Configuration.ConfigurationPropertyCollection.Count
  - System.Configuration.ConfigurationPropertyCollection.GetEnumerator
  - System.Configuration.ConfigurationPropertyCollection.IsSynchronized
  - System.Configuration.ConfigurationPropertyCollection.Item(System.String)
  - System.Configuration.ConfigurationPropertyCollection.Remove(System.String)
  - System.Configuration.ConfigurationPropertyCollection.SyncRoot
  - System.Configuration.ConfigurationPropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  langs:
  - csharp
  name: ConfigurationPropertyCollection
  nameWithType: ConfigurationPropertyCollection
  fullName: System.Configuration.ConfigurationPropertyCollection
  type: Class
  summary: Represents a collection of configuration-element properties.
  remarks: "The ConfigurationPropertyCollection class represents the collection of the <xref:System.Configuration.ConfigurationProperty> objects that can be attributes or <xref:System.Configuration.ConfigurationElement> objects of a configuration element.  \n  \n The <xref:System.Configuration.ConfigurationProperty> class represents an individual configuration setting. It allows you to get or set the name, type, and default value for a particular configuration entity (attribute or element). Additional options allow you to specify whether the attribute is required, is an element key, or represents a default element collection."
  example:
  - "The following example shows one possible use of the ConfigurationPropertyCollection. Refer to the example of the related type <xref:System.Configuration.ConfigurationProperty>.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#13](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#13)]  \n  \n The following is an excerpt from the configuration used by the above example.  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<configuration>  \n  <configSections>  \n    <section name=\"CustomSection\" type=\"Samples.AspNet, ConfigurationProperty, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" allowDefinition=\"Everywhere\" allowExeDefinition=\"MachineToApplication\" restartOnExternalChanges=\"true\" />  \n    </configSections>  \n    <CustomSection fileName=\"default.txt\" alias=\"alias.txt\" maxUsers=\"1000\"  \n      maxIdleTime=\"00:05:00\" />  \n</configuration>  \n```"
  syntax:
    content: 'public class ConfigurationPropertyCollection : System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.#ctor
  id: '#ctor'
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: ConfigurationPropertyCollection()
  nameWithType: ConfigurationPropertyCollection.ConfigurationPropertyCollection()
  fullName: System.Configuration.ConfigurationPropertyCollection.ConfigurationPropertyCollection()
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Initializes a new instance of the <see cref="T:System.Configuration.ConfigurationPropertyCollection"> class.
  remarks: You use the ConfigurationPropertyCollection to create a new collection that will contain the <xref:System.Configuration.ConfigurationProperty> objects as they apply to your configuration element.
  example:
  - "The following example shows how to use the ConfigurationPropertyCollection constructor.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#25](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#25)]"
  syntax:
    content: public ConfigurationPropertyCollection ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.Add(System.Configuration.ConfigurationProperty)
  id: Add(System.Configuration.ConfigurationProperty)
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: Add(ConfigurationProperty)
  nameWithType: ConfigurationPropertyCollection.Add(ConfigurationProperty)
  fullName: System.Configuration.ConfigurationPropertyCollection.Add(ConfigurationProperty)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Adds a configuration property to the collection.
  remarks: By default, the Add method will add the specified <xref:System.Configuration.ConfigurationProperty> object, if it is not already contained within the collection.
  example:
  - "The following example shows how to use the Add method.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#26](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#26)]"
  syntax:
    content: public void Add (System.Configuration.ConfigurationProperty property);
    parameters:
    - id: property
      type: System.Configuration.ConfigurationProperty
      description: The <see cref="T:System.Configuration.ConfigurationProperty"> to add.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.Clear
  id: Clear
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: ConfigurationPropertyCollection.Clear()
  fullName: System.Configuration.ConfigurationPropertyCollection.Clear()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Removes all configuration property objects from the collection.
  remarks: ''
  example:
  - "The following example shows how to use the Clear method.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#20](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#20)]  \n  \n The following example shows how to call the above method and save the changes to the configuration file.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#21](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#21)]"
  syntax:
    content: public void Clear ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: ConfigurationPropertyCollection.Contains(String)
  fullName: System.Configuration.ConfigurationPropertyCollection.Contains(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Specifies whether the configuration property is contained in this collection.
  remarks: ''
  example:
  - "The following example shows how to use the Contains method.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#14](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#14)]"
  syntax:
    content: public bool Contains (string name);
    parameters:
    - id: name
      type: System.String
      description: An identifier for the <see cref="T:System.Configuration.ConfigurationProperty"> to verify.
    return:
      type: System.Boolean
      description: '`true` if the specified <see cref="T:System.Configuration.ConfigurationProperty"> is contained in the collection; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.CopyTo(System.Configuration.ConfigurationProperty[],System.Int32)
  id: CopyTo(System.Configuration.ConfigurationProperty[],System.Int32)
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: CopyTo(ConfigurationProperty[],Int32)
  nameWithType: ConfigurationPropertyCollection.CopyTo(ConfigurationProperty[],Int32)
  fullName: System.Configuration.ConfigurationPropertyCollection.CopyTo(ConfigurationProperty[],Int32)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Copies this ConfigurationPropertyCollection to an array.
  remarks: ''
  example:
  - "The following example shows how to use the CopyTo method.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#18](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#18)]"
  syntax:
    content: public void CopyTo (System.Configuration.ConfigurationProperty[] array, int index);
    parameters:
    - id: array
      type: System.Configuration.ConfigurationProperty[]
      description: Array to which to copy.
    - id: index
      type: System.Int32
      description: Index at which to begin copying.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.Count
  id: Count
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: Count
  nameWithType: ConfigurationPropertyCollection.Count
  fullName: System.Configuration.ConfigurationPropertyCollection.Count
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the number of properties in the collection.
  remarks: To be added.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ConfigurationPropertyCollection.GetEnumerator()
  fullName: System.Configuration.ConfigurationPropertyCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the <see cref="T:System.Collections.IEnumerator"> object as it applies to the collection.
  remarks: ''
  example:
  - "The following example shows how to use the GetEnumerator method.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#22](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#22)]  \n  \n The following example shows how to call the above method to enumerate the <xref:System.Configuration.ConfigurationProperty> objects in the collection.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#23](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#23)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: The <see cref="T:System.Collections.IEnumerator"> object as it applies to the collection
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ConfigurationPropertyCollection.IsSynchronized
  fullName: System.Configuration.ConfigurationPropertyCollection.IsSynchronized
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets a value indicating whether access to the collection is synchronized (thread safe).
  remarks: ''
  example:
  - "The following example shows how to get the IsSynchronized property value.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#19](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#19)]"
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: ConfigurationPropertyCollection.Item(String)
  fullName: System.Configuration.ConfigurationPropertyCollection.Item(String)
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the collection item with the specified name.
  remarks: ''
  example:
  - "The following example shows how to use the <xref:System.Configuration.ConfigurationPropertyCollection.Count%2A> property.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#15](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#15)]"
  syntax:
    content: public System.Configuration.ConfigurationProperty this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: The <see cref="T:System.Configuration.ConfigurationProperty"> to return.
    return:
      type: System.Configuration.ConfigurationProperty
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: ConfigurationPropertyCollection.Remove(String)
  fullName: System.Configuration.ConfigurationPropertyCollection.Remove(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Removes a configuration property from the collection.
  remarks: A return value of `false` indicates that the specified <xref:System.Configuration.ConfigurationProperty> object was not contained within the collection.
  example:
  - "The following example shows how to use the Remove method.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#16](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#16)]  \n  \n The following example shows how to call the above method and save the changes to the configuration file.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#17](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#17)]"
  syntax:
    content: public bool Remove (string name);
    parameters:
    - id: name
      type: System.String
      description: The <see cref="T:System.Configuration.ConfigurationProperty"> to remove.
    return:
      type: System.Boolean
      description: '`true` if the specified <see cref="T:System.Configuration.ConfigurationProperty"> was removed; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.SyncRoot
  id: SyncRoot
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ConfigurationPropertyCollection.SyncRoot
  fullName: System.Configuration.ConfigurationPropertyCollection.SyncRoot
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Gets the object to synchronize access to the collection.
  remarks: ''
  example:
  - "The following example shows how to get the SyncRoot property value.  \n  \n [!CODE [System.Configuration.ConfigurationProperty#24](../CodeSnippet/VS_Snippets_WebNet/System.Configuration.ConfigurationProperty#24)]"
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Configuration.ConfigurationPropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Configuration.ConfigurationPropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ConfigurationPropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Configuration.ConfigurationPropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: Copies this collection to an array.
  remarks: To be added.
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The array to which to copy.
    - id: index
      type: System.Int32
      description: The index location at which to begin copying.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationPropertyCollection.#ctor
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: ConfigurationPropertyCollection()
  nameWithType: ConfigurationPropertyCollection.ConfigurationPropertyCollection()
  fullName: System.Configuration.ConfigurationPropertyCollection.ConfigurationPropertyCollection()
- uid: System.Configuration.ConfigurationPropertyCollection.Add(System.Configuration.ConfigurationProperty)
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: Add(ConfigurationProperty)
  nameWithType: ConfigurationPropertyCollection.Add(ConfigurationProperty)
  fullName: System.Configuration.ConfigurationPropertyCollection.Add(ConfigurationProperty)
- uid: System.Configuration.ConfigurationProperty
  parent: System.Configuration
  isExternal: false
  name: ConfigurationProperty
  nameWithType: ConfigurationProperty
  fullName: System.Configuration.ConfigurationProperty
- uid: System.Configuration.ConfigurationPropertyCollection.Clear
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: Clear()
  nameWithType: ConfigurationPropertyCollection.Clear()
  fullName: System.Configuration.ConfigurationPropertyCollection.Clear()
- uid: System.Configuration.ConfigurationPropertyCollection.Contains(System.String)
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: Contains(String)
  nameWithType: ConfigurationPropertyCollection.Contains(String)
  fullName: System.Configuration.ConfigurationPropertyCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationPropertyCollection.CopyTo(System.Configuration.ConfigurationProperty[],System.Int32)
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: CopyTo(ConfigurationProperty[],Int32)
  nameWithType: ConfigurationPropertyCollection.CopyTo(ConfigurationProperty[],Int32)
  fullName: System.Configuration.ConfigurationPropertyCollection.CopyTo(ConfigurationProperty[],Int32)
- uid: System.Configuration.ConfigurationProperty
  parent: System.Configuration
  isExternal: false
  name: ConfigurationProperty
  nameWithType: ConfigurationProperty
  fullName: System.Configuration.ConfigurationProperty[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Configuration.ConfigurationPropertyCollection.Count
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: Count
  nameWithType: ConfigurationPropertyCollection.Count
  fullName: System.Configuration.ConfigurationPropertyCollection.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Configuration.ConfigurationPropertyCollection.GetEnumerator
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: ConfigurationPropertyCollection.GetEnumerator()
  fullName: System.Configuration.ConfigurationPropertyCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Configuration.ConfigurationPropertyCollection.IsSynchronized
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ConfigurationPropertyCollection.IsSynchronized
  fullName: System.Configuration.ConfigurationPropertyCollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationPropertyCollection.Item(System.String)
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: Item(String)
  nameWithType: ConfigurationPropertyCollection.Item(String)
  fullName: System.Configuration.ConfigurationPropertyCollection.Item(String)
- uid: System.Configuration.ConfigurationProperty
  parent: System.Configuration
  isExternal: false
  name: ConfigurationProperty
  nameWithType: ConfigurationProperty
  fullName: System.Configuration.ConfigurationProperty
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationPropertyCollection.Remove(System.String)
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: Remove(String)
  nameWithType: ConfigurationPropertyCollection.Remove(String)
  fullName: System.Configuration.ConfigurationPropertyCollection.Remove(String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationPropertyCollection.SyncRoot
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: SyncRoot
  nameWithType: ConfigurationPropertyCollection.SyncRoot
  fullName: System.Configuration.ConfigurationPropertyCollection.SyncRoot
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Configuration.ConfigurationPropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Configuration.ConfigurationPropertyCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ConfigurationPropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Configuration.ConfigurationPropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
