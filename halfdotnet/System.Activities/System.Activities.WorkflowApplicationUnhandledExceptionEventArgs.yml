### YamlMime:ManagedReference
items:
- uid: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs
  id: WorkflowApplicationUnhandledExceptionEventArgs
  children:
  - System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource
  - System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId
  - System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException
  langs:
  - csharp
  name: WorkflowApplicationUnhandledExceptionEventArgs
  nameWithType: WorkflowApplicationUnhandledExceptionEventArgs
  fullName: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs
  type: Class
  summary: Provides information about an unhandled exception that occurred in a workflow instance.
  remarks: If an exception is thrown by an activity and is unhandled, the default behavior is to terminate the workflow instance. If an <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is present, it can override this default behavior. This handler gives the workflow host author an opportunity to provide the appropriate handling, such as custom logging, aborting the workflow, canceling the workflow, or terminating the workflow.
  example:
  - "The following example invokes a workflow that throws an exception. The exception is unhandled by the workflow and the <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is invoked. The WorkflowApplicationUnhandledExceptionEventArgs are inspected to provide information about the exception, and the workflow is terminated.  \n  \n [!CODE [CFX_WorkflowApplicationExample#1](../CodeSnippet/VS_Snippets_CFX/cfx_workflowapplicationexample#1)]"
  syntax:
    content: 'public class WorkflowApplicationUnhandledExceptionEventArgs : System.Activities.WorkflowApplicationEventArgs'
  inheritance:
  - System.Object
  - System.EventArgs
  - System.Activities.WorkflowApplicationEventArgs
  implements: []
  inheritedMembers:
  - System.Activities.WorkflowApplicationEventArgs.GetInstanceExtensions``1
  - System.Activities.WorkflowApplicationEventArgs.InstanceId
  - System.EventArgs.Empty
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource
  id: ExceptionSource
  parent: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs
  langs:
  - csharp
  name: ExceptionSource
  nameWithType: WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource
  fullName: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: Gets the activity that is the source of the unhandled exception.
  remarks: If an exception is thrown by an activity and is unhandled, the default behavior is to terminate the workflow instance. If an <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is present, it can override this default behavior. This handler gives the workflow host author an opportunity to provide the appropriate handling, such as custom logging, aborting the workflow, canceling the workflow, or terminating the workflow.
  example:
  - "The following example invokes a workflow that throws an exception. The exception is unhandled by the workflow and the <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is invoked. The <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> are inspected to provide information about the exception, and the workflow is terminated.  \n  \n [!CODE [CFX_WorkflowApplicationExample#1](../CodeSnippet/VS_Snippets_CFX/cfx_workflowapplicationexample#1)]"
  syntax:
    content: public System.Activities.Activity ExceptionSource { get; }
    return:
      type: System.Activities.Activity
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId
  id: ExceptionSourceInstanceId
  parent: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs
  langs:
  - csharp
  name: ExceptionSourceInstanceId
  nameWithType: WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId
  fullName: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: Gets the unique identifier of the activity instance that is the source of the unhandled exception.
  remarks: If an exception is thrown by an activity and is unhandled, the default behavior is to terminate the workflow instance. If an <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is present, it can override this default behavior. This handler gives the workflow host author an opportunity to provide the appropriate handling, such as custom logging, aborting the workflow, canceling the workflow, or terminating the workflow.
  example:
  - "The following example invokes a workflow that throws an exception. The exception is unhandled by the workflow and the <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is invoked. The <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> are inspected to provide information about the exception, and the workflow is terminated.  \n  \n [!CODE [CFX_WorkflowApplicationExample#1](../CodeSnippet/VS_Snippets_CFX/cfx_workflowapplicationexample#1)]"
  syntax:
    content: public string ExceptionSourceInstanceId { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException
  id: UnhandledException
  parent: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs
  langs:
  - csharp
  name: UnhandledException
  nameWithType: WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException
  fullName: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: Gets the <see cref="T:System.Exception"> that was unhandled by the workflow instance.
  remarks: If an exception is thrown by an activity and is unhandled, the default behavior is to terminate the workflow instance. If an <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is present, it can override this default behavior. This handler gives the workflow host author an opportunity to provide the appropriate handling, such as custom logging, aborting the workflow, canceling the workflow, or terminating the workflow.
  example:
  - "The following example invokes a workflow that throws an exception. The exception is unhandled by the workflow and the <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> handler is invoked. The <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> are inspected to provide information about the exception, and the workflow is terminated.  \n  \n [!CODE [CFX_WorkflowApplicationExample#1](../CodeSnippet/VS_Snippets_CFX/cfx_workflowapplicationexample#1)]"
  syntax:
    content: public Exception UnhandledException { get; }
    return:
      type: System.Exception
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Activities.WorkflowApplicationEventArgs
  isExternal: false
  name: System.Activities.WorkflowApplicationEventArgs
- uid: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource
  parent: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionSource
  nameWithType: WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource
  fullName: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource
- uid: System.Activities.Activity
  parent: System.Activities
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Activities.Activity
- uid: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId
  parent: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionSourceInstanceId
  nameWithType: WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId
  fullName: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException
  parent: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledException
  nameWithType: WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException
  fullName: System.Activities.WorkflowApplicationUnhandledExceptionEventArgs.UnhandledException
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
