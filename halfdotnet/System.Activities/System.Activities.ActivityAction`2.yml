### YamlMime:ManagedReference
items:
- uid: System.Activities.ActivityAction`2
  id: ActivityAction`2
  children:
  - System.Activities.ActivityAction`2.#ctor
  - System.Activities.ActivityAction`2.Argument1
  - System.Activities.ActivityAction`2.Argument2
  langs:
  - csharp
  - vb
  name: ActivityAction<T1,T2>
  nameWithType: ActivityAction<T1,T2>
  fullName: System.Activities.ActivityAction<T1,T2>
  type: Class
  syntax:
    content: 'public sealed class ActivityAction<T1,T2> : System.Activities.ActivityDelegate'
    typeParameters:
    - id: T1
      description: Parameter description to be filled
    - id: T2
      description: Parameter description to be filled
  inheritance:
  - System.Object
  - System.Activities.ActivityDelegate
  implements: []
  inheritedMembers:
  - System.Activities.ActivityDelegate.DisplayName
  - System.Activities.ActivityDelegate.GetResultArgument
  - System.Activities.ActivityDelegate.Handler
  - System.Activities.ActivityDelegate.OnGetRuntimeDelegateArguments(System.Collections.Generic.IList{System.Activities.RuntimeDelegateArgument})
  - System.Activities.ActivityDelegate.ShouldSerializeDisplayName
  - System.Activities.ActivityDelegate.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Activities.ActivityAction`2.#ctor
  id: '#ctor'
  parent: System.Activities.ActivityAction`2
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: ActivityAction<T1,T2>..ctor
  fullName: System.Activities.ActivityAction<T1,T2>..ctor
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public ActivityAction ();
    parameters: []
- uid: System.Activities.ActivityAction`2.Argument1
  id: Argument1
  parent: System.Activities.ActivityAction`2
  langs:
  - csharp
  - vb
  name: Argument1
  nameWithType: ActivityAction<T1,T2>.Argument1
  fullName: System.Activities.ActivityAction<T1,T2>.Argument1
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public System.Activities.DelegateInArgument<T1> Argument1 { get; set; }
    return:
      type: System.Activities.DelegateInArgument{T1}
      description: Return description to be filled
- uid: System.Activities.ActivityAction`2.Argument2
  id: Argument2
  parent: System.Activities.ActivityAction`2
  langs:
  - csharp
  - vb
  name: Argument2
  nameWithType: ActivityAction<T1,T2>.Argument2
  fullName: System.Activities.ActivityAction<T1,T2>.Argument2
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public System.Activities.DelegateInArgument<T2> Argument2 { get; set; }
    return:
      type: System.Activities.DelegateInArgument{T2}
      description: Return description to be filled
references:
- uid: System.Activities.ActivityDelegate
  isExternal: false
  name: System.Activities.ActivityDelegate
- uid: System.Activities.ActivityAction`2.#ctor
  parent: System.Activities.ActivityAction`2
  isExternal: false
  name: .ctor
  nameWithType: ActivityAction<T1,T2>..ctor
  fullName: System.Activities.ActivityAction<T1,T2>..ctor
- uid: System.Activities.ActivityAction`2.Argument1
  parent: System.Activities.ActivityAction`2
  isExternal: false
  name: Argument1
  nameWithType: ActivityAction<T1,T2>.Argument1
  fullName: System.Activities.ActivityAction<T1,T2>.Argument1
- uid: System.Activities.ActivityAction`2.Argument2
  parent: System.Activities.ActivityAction`2
  isExternal: false
  name: Argument2
  nameWithType: ActivityAction<T1,T2>.Argument2
  fullName: System.Activities.ActivityAction<T1,T2>.Argument2
