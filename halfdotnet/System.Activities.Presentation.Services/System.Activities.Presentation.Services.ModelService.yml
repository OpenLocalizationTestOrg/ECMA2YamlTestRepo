### YamlMime:ManagedReference
items:
- uid: System.Activities.Presentation.Services.ModelService
  id: ModelService
  children:
  - System.Activities.Presentation.Services.ModelService.#ctor
  - System.Activities.Presentation.Services.ModelService.CreateItem(System.Object)
  - System.Activities.Presentation.Services.ModelService.CreateItem(System.Type,System.Activities.Presentation.Model.CreateOptions,System.Object[])
  - System.Activities.Presentation.Services.ModelService.CreateStaticMemberItem(System.Type,System.String)
  - System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Predicate{System.Type})
  - System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Type)
  - System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String)
  - System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String,System.StringComparison)
  - System.Activities.Presentation.Services.ModelService.ModelChanged
  - System.Activities.Presentation.Services.ModelService.Root
  langs:
  - csharp
  name: ModelService
  nameWithType: ModelService
  fullName: System.Activities.Presentation.Services.ModelService
  type: Class
  summary: This class is the main entry point that the designer uses to interact with the model.
  remarks: The service has a split between public and protected methods that you must implement when you create a derived class. The public methods are callable by anyone. The protected methods are invoked by the model.
  example:
  - '[!CODE [WFD_Services.ModelService#0](WFD_Services.ModelService#0)]'
  syntax:
    content: public abstract class ModelService
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.Presentation.Services.ModelService.#ctor
  id: '#ctor'
  parent: System.Activities.Presentation.Services.ModelService
  langs:
  - csharp
  name: ModelService()
  nameWithType: ModelService.ModelService()
  fullName: System.Activities.Presentation.Services.ModelService.ModelService()
  type: Constructor
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Services
  summary: Creates a new <see cref="T:System.Activities.Presentation.Services.ModelService">.
  remarks: To be added.
  syntax:
    content: protected ModelService ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.Presentation.Services.ModelService.CreateItem(System.Object)
  id: CreateItem(System.Object)
  parent: System.Activities.Presentation.Services.ModelService
  langs:
  - csharp
  name: CreateItem(Object)
  nameWithType: ModelService.CreateItem(Object)
  fullName: System.Activities.Presentation.Services.ModelService.CreateItem(Object)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Services
  summary: Takes an existing instance and creates a model item that is a deep clone of the instance.
  remarks: To be added.
  syntax:
    content: protected abstract System.Activities.Presentation.Model.ModelItem CreateItem (object item);
    parameters:
    - id: item
      type: System.Object
      description: The item to clone and wrap.
    return:
      type: System.Activities.Presentation.Model.ModelItem
      description: Returns a newly created <see cref="T:System.Activities.Presentation.Model.ModelItem"> that is a clone of the existing item.
  overload: System.Activities.Presentation.Services.ModelService.CreateItem*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.Presentation.Services.ModelService.CreateItem(System.Type,System.Activities.Presentation.Model.CreateOptions,System.Object[])
  id: CreateItem(System.Type,System.Activities.Presentation.Model.CreateOptions,System.Object[])
  parent: System.Activities.Presentation.Services.ModelService
  langs:
  - csharp
  name: CreateItem(Type,CreateOptions,Object[])
  nameWithType: ModelService.CreateItem(Type,CreateOptions,Object[])
  fullName: System.Activities.Presentation.Services.ModelService.CreateItem(Type,CreateOptions,Object[])
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Services
  summary: Creates a <see cref="T:System.Activities.Presentation.Model.ModelItem"> for a given type. This method is called by <xref:System.Activities.Presentation.Model.ModelFactory> when the user wants to create a new item.
  remarks: To be added.
  syntax:
    content: protected abstract System.Activities.Presentation.Model.ModelItem CreateItem (Type itemType, System.Activities.Presentation.Model.CreateOptions options, object[] arguments);
    parameters:
    - id: itemType
      type: System.Type
      description: The type of item to create.
    - id: options
      type: System.Activities.Presentation.Model.CreateOptions
      description: Creation options. You can specify whether you would like to initialize default values for an item.
    - id: arguments
      type: System.Object[]
      description: An array of arguments to the constructor of the item.
    return:
      type: System.Activities.Presentation.Model.ModelItem
      description: Returns the newly created <see cref="T:System.Activities.Presentation.Model.ModelItem">.
  overload: System.Activities.Presentation.Services.ModelService.CreateItem*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.Presentation.Services.ModelService.CreateStaticMemberItem(System.Type,System.String)
  id: CreateStaticMemberItem(System.Type,System.String)
  parent: System.Activities.Presentation.Services.ModelService
  langs:
  - csharp
  name: CreateStaticMemberItem(Type,String)
  nameWithType: ModelService.CreateStaticMemberItem(Type,String)
  fullName: System.Activities.Presentation.Services.ModelService.CreateStaticMemberItem(Type,String)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Services
  summary: Creates a new model item that represents the value of a static member of the given class.
  remarks: For example, to add a reference to `Brushes.Red` to the model, call this method with `typeof(Brushes)` and the string "Red" as the parameters. This will be serialized into XAML as `{x:Static Brushes.Red}`.
  syntax:
    content: protected abstract System.Activities.Presentation.Model.ModelItem CreateStaticMemberItem (Type type, string memberName);
    parameters:
    - id: type
      type: System.Type
      description: The type that contains the static member being referenced.
    - id: memberName
      type: System.String
      description: The name of the static member being referenced.
    return:
      type: System.Activities.Presentation.Model.ModelItem
      description: Returns <see cref="T:System.Activities.Presentation.Model.ModelItem">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Predicate{System.Type})
  id: Find(System.Activities.Presentation.Model.ModelItem,System.Predicate{System.Type})
  parent: System.Activities.Presentation.Services.ModelService
  langs:
  - csharp
  name: Find(ModelItem,Predicate<Type>)
  nameWithType: ModelService.Find(ModelItem,Predicate<Type>)
  fullName: System.Activities.Presentation.Services.ModelService.Find(ModelItem,Predicate<Type>)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Services
  summary: Finds matching model items given a starting point from which to look.
  remarks: All walks are recursive.
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<System.Activities.Presentation.Model.ModelItem> Find (System.Activities.Presentation.Model.ModelItem startingItem, Predicate<Type> match);
    parameters:
    - id: startingItem
      type: System.Activities.Presentation.Model.ModelItem
      description: The <see cref="T:System.Activities.Presentation.Model.ModelItem"> from which to start the search. Items above this item will be ignored. This item, and any item below it in the hierarchy, will be included in the search. If this value is `null`, <xref:System.Activities.Presentation.Services.ModelService.Root%2A> is used instead.
    - id: match
      type: System.Predicate{System.Type}
      description: A predicate that allows more complex type matching to be used. This method will enumerate all items within the given parent scope that match the predicate.
    return:
      type: System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelItem}
      description: Returns an <xref:System.Collections.Generic.IEnumerable%601> that contains all model items that match the query.
  overload: System.Activities.Presentation.Services.ModelService.Find*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Type)
  id: Find(System.Activities.Presentation.Model.ModelItem,System.Type)
  parent: System.Activities.Presentation.Services.ModelService
  langs:
  - csharp
  name: Find(ModelItem,Type)
  nameWithType: ModelService.Find(ModelItem,Type)
  fullName: System.Activities.Presentation.Services.ModelService.Find(ModelItem,Type)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Services
  summary: Finds matching model items given a starting point from which to look.
  remarks: All walks are recursive.
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<System.Activities.Presentation.Model.ModelItem> Find (System.Activities.Presentation.Model.ModelItem startingItem, Type type);
    parameters:
    - id: startingItem
      type: System.Activities.Presentation.Model.ModelItem
      description: The <see cref="T:System.Activities.Presentation.Model.ModelItem"> from which to start the search. Items above this item will be ignored. This item, and any item below it in the hierarchy, will be included in the search. If this value is `null`, <xref:System.Activities.Presentation.Services.ModelService.Root%2A> is used instead.
    - id: type
      type: System.Type
      description: The <see cref="T:System.Type"> of the object to find. This method will enumerate all items within the given parent scope that are of the requested type.
    return:
      type: System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelItem}
      description: Returns an <xref:System.Collections.Generic.IEnumerable%601> that contains all model items that match the query.
  overload: System.Activities.Presentation.Services.ModelService.Find*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String)
  id: FromName(System.Activities.Presentation.Model.ModelItem,System.String)
  parent: System.Activities.Presentation.Services.ModelService
  langs:
  - csharp
  name: FromName(ModelItem,String)
  nameWithType: ModelService.FromName(ModelItem,String)
  fullName: System.Activities.Presentation.Services.ModelService.FromName(ModelItem,String)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Services
  summary: Locates the <see cref="T:System.Activities.Presentation.Model.ModelItem"> in the given scope with the given name.
  remarks: To be added.
  syntax:
    content: public System.Activities.Presentation.Model.ModelItem FromName (System.Activities.Presentation.Model.ModelItem scope, string name);
    parameters:
    - id: scope
      type: System.Activities.Presentation.Model.ModelItem
      description: An optional scope to provide. If the scope is not provided, <xref:System.Activities.Presentation.Services.ModelService.Root%2A> will be used as a scope. If the scope is provided, the nearest <xref:System.Windows.Markup.INameScope> in the hierarchy will be used to locate the item.
    - id: name
      type: System.String
      description: The name to locate.
    return:
      type: System.Activities.Presentation.Model.ModelItem
      description: Returns a <see cref="T:System.Activities.Presentation.Model.ModelItem"> whose name matches , or `null` if no match was found.
  overload: System.Activities.Presentation.Services.ModelService.FromName*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String,System.StringComparison)
  id: FromName(System.Activities.Presentation.Model.ModelItem,System.String,System.StringComparison)
  parent: System.Activities.Presentation.Services.ModelService
  langs:
  - csharp
  name: FromName(ModelItem,String,StringComparison)
  nameWithType: ModelService.FromName(ModelItem,String,StringComparison)
  fullName: System.Activities.Presentation.Services.ModelService.FromName(ModelItem,String,StringComparison)
  type: Method
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Services
  summary: Locates the <see cref="T:System.Activities.Presentation.Model.ModelItem"> in the given scope with the given name.
  remarks: To be added.
  syntax:
    content: public abstract System.Activities.Presentation.Model.ModelItem FromName (System.Activities.Presentation.Model.ModelItem scope, string name, StringComparison comparison);
    parameters:
    - id: scope
      type: System.Activities.Presentation.Model.ModelItem
      description: An optional scope to provide. If the scope is not provided, <xref:System.Activities.Presentation.Services.ModelService.Root%2A> will be used as a scope. If the scope is provided, the nearest <xref:System.Windows.Markup.INameScope> in the hierarchy will be used to locate the item.
    - id: name
      type: System.String
      description: The name to locate.
    - id: comparison
      type: System.StringComparison
      description: Determines how the name should be compared. The default is to compare against ordinal.
    return:
      type: System.Activities.Presentation.Model.ModelItem
      description: Returns a <see cref="T:System.Activities.Presentation.Model.ModelItem"> whose name matches , or `null` if no match was found.
  overload: System.Activities.Presentation.Services.ModelService.FromName*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.Presentation.Services.ModelService.ModelChanged
  id: ModelChanged
  parent: System.Activities.Presentation.Services.ModelService
  langs:
  - csharp
  name: ModelChanged
  nameWithType: ModelService.ModelChanged
  fullName: System.Activities.Presentation.Services.ModelService.ModelChanged
  type: Event
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Services
  summary: This event is raised when something in the model has changed.
  remarks: The event arguments in the event can be used to find what has changed.
  syntax:
    content: public abstract event EventHandler<System.Activities.Presentation.Services.ModelChangedEventArgs> ModelChanged;
    return:
      type: System.EventHandler{System.Activities.Presentation.Services.ModelChangedEventArgs}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Activities.Presentation.Services.ModelService.Root
  id: Root
  parent: System.Activities.Presentation.Services.ModelService
  langs:
  - csharp
  name: Root
  nameWithType: ModelService.Root
  fullName: System.Activities.Presentation.Services.ModelService.Root
  type: Property
  assemblies:
  - System.Activities.Presentation
  namespace: System.Activities.Presentation.Services
  summary: The root of the object hierarchy.
  remarks: For linear stores, the root is the first object in the store. For stores that represent a tree of objects, this returns the topmost node of the tree.
  syntax:
    content: public abstract System.Activities.Presentation.Model.ModelItem Root { get; }
    return:
      type: System.Activities.Presentation.Model.ModelItem
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Activities.Presentation.Services.ModelService.#ctor
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  name: ModelService()
  nameWithType: ModelService.ModelService()
  fullName: System.Activities.Presentation.Services.ModelService.ModelService()
- uid: System.Activities.Presentation.Services.ModelService.CreateItem(System.Object)
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  name: CreateItem(Object)
  nameWithType: ModelService.CreateItem(Object)
  fullName: System.Activities.Presentation.Services.ModelService.CreateItem(Object)
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Activities.Presentation.Services.ModelService.CreateItem(System.Type,System.Activities.Presentation.Model.CreateOptions,System.Object[])
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  name: CreateItem(Type,CreateOptions,Object[])
  nameWithType: ModelService.CreateItem(Type,CreateOptions,Object[])
  fullName: System.Activities.Presentation.Services.ModelService.CreateItem(Type,CreateOptions,Object[])
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Activities.Presentation.Model.CreateOptions
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: CreateOptions
  nameWithType: CreateOptions
  fullName: System.Activities.Presentation.Model.CreateOptions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Activities.Presentation.Services.ModelService.CreateStaticMemberItem(System.Type,System.String)
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  name: CreateStaticMemberItem(Type,String)
  nameWithType: ModelService.CreateStaticMemberItem(Type,String)
  fullName: System.Activities.Presentation.Services.ModelService.CreateStaticMemberItem(Type,String)
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Predicate{System.Type})
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  name: Find(ModelItem,Predicate<Type>)
  nameWithType: ModelService.Find(ModelItem,Predicate<Type>)
  fullName: System.Activities.Presentation.Services.ModelService.Find(ModelItem,Predicate<Type>)
- uid: System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelItem}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ModelItem>
  nameWithType: IEnumerable<ModelItem>
  fullName: System.Collections.Generic.IEnumerable<System.Activities.Presentation.Model.ModelItem>
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Predicate{System.Type}
  parent: System
  isExternal: false
  name: Predicate<Type>
  nameWithType: Predicate<Type>
  fullName: System.Predicate<System.Type>
- uid: System.Activities.Presentation.Services.ModelService.Find(System.Activities.Presentation.Model.ModelItem,System.Type)
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  name: Find(ModelItem,Type)
  nameWithType: ModelService.Find(ModelItem,Type)
  fullName: System.Activities.Presentation.Services.ModelService.Find(ModelItem,Type)
- uid: System.Collections.Generic.IEnumerable{System.Activities.Presentation.Model.ModelItem}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ModelItem>
  nameWithType: IEnumerable<ModelItem>
  fullName: System.Collections.Generic.IEnumerable<System.Activities.Presentation.Model.ModelItem>
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String)
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  name: FromName(ModelItem,String)
  nameWithType: ModelService.FromName(ModelItem,String)
  fullName: System.Activities.Presentation.Services.ModelService.FromName(ModelItem,String)
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Activities.Presentation.Services.ModelService.FromName(System.Activities.Presentation.Model.ModelItem,System.String,System.StringComparison)
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  name: FromName(ModelItem,String,StringComparison)
  nameWithType: ModelService.FromName(ModelItem,String,StringComparison)
  fullName: System.Activities.Presentation.Services.ModelService.FromName(ModelItem,String,StringComparison)
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.StringComparison
  parent: System
  isExternal: false
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: System.Activities.Presentation.Services.ModelService.ModelChanged
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  name: ModelChanged
  nameWithType: ModelService.ModelChanged
  fullName: System.Activities.Presentation.Services.ModelService.ModelChanged
- uid: System.EventHandler{System.Activities.Presentation.Services.ModelChangedEventArgs}
  parent: System
  isExternal: false
  name: EventHandler<ModelChangedEventArgs>
  nameWithType: EventHandler<ModelChangedEventArgs>
  fullName: System.EventHandler<System.Activities.Presentation.Services.ModelChangedEventArgs>
- uid: System.Activities.Presentation.Services.ModelService.Root
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  name: Root
  nameWithType: ModelService.Root
  fullName: System.Activities.Presentation.Services.ModelService.Root
- uid: System.Activities.Presentation.Model.ModelItem
  parent: System.Activities.Presentation.Model
  isExternal: false
  name: ModelItem
  nameWithType: ModelItem
  fullName: System.Activities.Presentation.Model.ModelItem
- uid: System.Activities.Presentation.Services.ModelService.CreateItem*
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  nameWithType: ModelService.
- uid: System.Activities.Presentation.Services.ModelService.Find*
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  nameWithType: ModelService.
- uid: System.Activities.Presentation.Services.ModelService.FromName*
  parent: System.Activities.Presentation.Services.ModelService
  isExternal: false
  nameWithType: ModelService.
