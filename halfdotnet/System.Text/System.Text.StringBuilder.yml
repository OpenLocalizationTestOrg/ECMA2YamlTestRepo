### YamlMime:ManagedReference
items:
- uid: System.Text.StringBuilder
  id: StringBuilder
  children:
  - System.Text.StringBuilder.#ctor
  - System.Text.StringBuilder.#ctor(System.Int32)
  - System.Text.StringBuilder.#ctor(System.String)
  - System.Text.StringBuilder.#ctor(System.Int32,System.Int32)
  - System.Text.StringBuilder.#ctor(System.String,System.Int32)
  - System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)
  - System.Text.StringBuilder.Append(System.Boolean)
  - System.Text.StringBuilder.Append(System.Byte)
  - System.Text.StringBuilder.Append(System.Char)
  - System.Text.StringBuilder.Append(System.Char[])
  - System.Text.StringBuilder.Append(System.Decimal)
  - System.Text.StringBuilder.Append(System.Double)
  - System.Text.StringBuilder.Append(System.Int16)
  - System.Text.StringBuilder.Append(System.Int32)
  - System.Text.StringBuilder.Append(System.Int64)
  - System.Text.StringBuilder.Append(System.Object)
  - System.Text.StringBuilder.Append(System.SByte)
  - System.Text.StringBuilder.Append(System.Single)
  - System.Text.StringBuilder.Append(System.String)
  - System.Text.StringBuilder.Append(System.UInt16)
  - System.Text.StringBuilder.Append(System.UInt32)
  - System.Text.StringBuilder.Append(System.UInt64)
  - System.Text.StringBuilder.Append(System.Char,System.Int32)
  - System.Text.StringBuilder.Append(System.Char*,System.Int32)
  - System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)
  - System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object[])
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  - System.Text.StringBuilder.AppendLine
  - System.Text.StringBuilder.AppendLine(System.String)
  - System.Text.StringBuilder.Capacity
  - System.Text.StringBuilder.Chars(System.Int32)
  - System.Text.StringBuilder.Clear
  - System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  - System.Text.StringBuilder.EnsureCapacity(System.Int32)
  - System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  - System.Text.StringBuilder.Insert(System.Int32,System.Boolean)
  - System.Text.StringBuilder.Insert(System.Int32,System.Byte)
  - System.Text.StringBuilder.Insert(System.Int32,System.Char)
  - System.Text.StringBuilder.Insert(System.Int32,System.Char[])
  - System.Text.StringBuilder.Insert(System.Int32,System.Decimal)
  - System.Text.StringBuilder.Insert(System.Int32,System.Double)
  - System.Text.StringBuilder.Insert(System.Int32,System.Int16)
  - System.Text.StringBuilder.Insert(System.Int32,System.Int32)
  - System.Text.StringBuilder.Insert(System.Int32,System.Int64)
  - System.Text.StringBuilder.Insert(System.Int32,System.Object)
  - System.Text.StringBuilder.Insert(System.Int32,System.SByte)
  - System.Text.StringBuilder.Insert(System.Int32,System.Single)
  - System.Text.StringBuilder.Insert(System.Int32,System.String)
  - System.Text.StringBuilder.Insert(System.Int32,System.UInt16)
  - System.Text.StringBuilder.Insert(System.Int32,System.UInt32)
  - System.Text.StringBuilder.Insert(System.Int32,System.UInt64)
  - System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)
  - System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  - System.Text.StringBuilder.Length
  - System.Text.StringBuilder.MaxCapacity
  - System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  - System.Text.StringBuilder.Replace(System.Char,System.Char)
  - System.Text.StringBuilder.Replace(System.String,System.String)
  - System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)
  - System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)
  - System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Text.StringBuilder.ToString
  - System.Text.StringBuilder.ToString(System.Int32,System.Int32)
  langs:
  - csharp
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
  type: Class
  summary: "Represents a mutable string of characters. This class cannot be inherited.  \n  \n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n This class represents a string-like object whose value is a mutable sequence of characters.  \n  \n In this section:  \n  \n-   [The String and StringBuilder types](#StringAndSB)  \n  \n-   [How StringBuilder works](#HowWorks)  \n  \n-   [Memory allocation](#Memory)  \n  \n-   [Instantiating a StringBuilder object](#Instantiating)  \n  \n-   [Calling StringBuilder methods](#Calling)  \n  \n-   [Performing StringBuilder operations](#Operations)  \n  \n    -   [Iterating StringBuilder characters](#Iterating)  \n  \n    -   [Adding text to a StringBuilder object](#Adding)  \n  \n    -   [Deleting text from a StringBuilder object](#Deleting)  \n  \n    -   [Modifying the text in a StringBuilder object](#Modifying)  \n  \n-   [Searching the text in a StringBuilder object](#Searching)  \n  \n-   [Converting the StringBuilder object to a string](#Converting)  \n  \n<a name=\"StringAndSB\"></a>   \n## The String and StringBuilder types  \n Although StringBuilder and <xref:System.String> both represent sequences of characters, they are implemented differently. <xref:System.String> is an immutable type. That is, each operation that appears to modify a <xref:System.String> object actually creates a new string.  \n  \n For example, the call to the <xref:System.String.Concat%2A?displayProperty=fullName> method in the following C# example appears to change the value of a string variable named `value`. In fact, the <xref:System.String.Concat%2A> method returns a `value` object that has a different value and address from the `value` object that was passed to the method. Note that the example must be compiled using the `/unsafe` compiler option.  \n  \n For routines that perform extensive string manipulation (such as apps that modify a string numerous times in a loop), modifying a string repeatedly can exact a significant performance penalty. The alternative is to use StringBuilder, which is a mutable string class. Mutability means that once an instance of the class has been created, it can be modified by appending, removing, replacing, or inserting characters. A StringBuilder object maintains a buffer to accommodate expansions to the string. New data is appended to the buffer if room is available; otherwise, a new, larger buffer is allocated, data from the original buffer is copied to the new buffer, and the new data is then appended to the new buffer.  \n  \n> [!IMPORTANT]\n>  Although the StringBuilder class generally offers better performance than the <xref:System.String> class, you should not automatically replace <xref:System.String> with StringBuilder whenever you want to manipulate strings. Performance depends on the size of the string, the amount of memory to be allocated for the new string, the system on which your app is executing, and the type of operation. You should be prepared to test your app to determine whether StringBuilder actually offers a significant performance improvement.  \n  \n Consider using the <xref:System.String> class under these conditions:  \n  \n-   When the number of changes that your app will make to a string is small. In these cases, StringBuilder might offer negligible or no performance improvement over <xref:System.String>.  \n  \n-   When you are performing a fixed number of concatenation operations, particularly with string literals. In this case, the compiler might combine the concatenation operations into a single operation.  \n  \n-   When you have to perform extensive search operations while you are building your string. The StringBuilder class lacks search methods such as `IndexOf` or `StartsWith`. You'll have to convert the StringBuilder object to a <xref:System.String> for these operations, and this can negate the performance benefit from using StringBuilder. For more information, see the [Searching the text in a StringBuilder object](#Searching) section.  \n  \n Consider using the StringBuilder class under these conditions:  \n  \n-   When you expect your app to make an unknown number of changes to a string at design time (for example, when you are using a loop to concatenate a random number of strings that contain user input).  \n  \n-   When you expect your app to make a significant number of changes to a string.  \n  \n<a name=\"HowWorks\"></a>   \n## How StringBuilder works  \n The <xref:System.Text.StringBuilder.Length%2A?displayProperty=fullName> property indicates the number of characters the StringBuilder object currently contains. If you add characters to the StringBuilder object, its length increases until it equals the size of the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property, which defines the number of characters that the object can contain. If the number of added characters causes the length of the StringBuilder object to exceed its current capacity, new memory is allocated, the value of the <xref:System.Text.StringBuilder.Capacity%2A> property is doubled, new characters are added to the StringBuilder object, and its <xref:System.Text.StringBuilder.Length%2A> property is adjusted. Additional memory for the StringBuilder object is allocated dynamically until it reaches the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=fullName> property. When the maximum capacity is reached, no further memory can be allocated for the StringBuilder object, and trying to add characters or expand it beyond its maximum capacity throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.OutOfMemoryException> exception.  \n  \n The following example illustrates how a StringBuilder object allocates new memory and increases its capacity dynamically as the string assigned to the object expands. The code creates a StringBuilder object by calling its default (parameterless) constructor. The default capacity of this object is 16 characters, and its maximum capacity is more than 2 billion characters. Appending the string \"This is a sentence.\" results in a new memory allocation because the string length (19 characters) exceeds the default capacity of the StringBuilder object. The capacity of the object doubles to 32 characters, the new string is added, and the length of the object now equals 19 characters. The code then appends the string \"This is an additional sentence.\" to the value of the StringBuilder object 11 times. Whenever the append operation causes the length of the StringBuilder object to exceed its capacity, its existing capacity is doubled and the <xref:System.Text.StringBuilder.Append%2A> operation succeeds.  \n  \n 
  <a name=\"Memory\"></a>   \n## Memory allocation  \n The default capacity of a StringBuilder object is 16 characters, and its default maximum capacity is <xref:System.Int32.MaxValue?displayProperty=fullName>. These default values are used if you call the <xref:System.Text.StringBuilder.%23ctor> and <xref:System.Text.StringBuilder.%23ctor%28System.String%29> constructors.  \n  \n You can explicitly define the initial capacity of a StringBuilder object in the following ways:  \n  \n-   By calling any of the StringBuilder constructors that includes a  parameter when you create the object.  \n  \n-   By explicitly assigning a new value to the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property to expand an existing StringBuilder object. Note that the property throws an exception if the new capacity is less than the existing capacity or greater than the StringBuilder object's maximum capacity.  \n  \n-   By calling the <xref:System.Text.StringBuilder.EnsureCapacity%2A?displayProperty=fullName> method with the new capacity. The new capacity must not be greater than the StringBuilder object's maximum capacity. However, unlike an assignment to the <xref:System.Text.StringBuilder.Capacity%2A> property, <xref:System.Text.StringBuilder.EnsureCapacity%2A> does not throw an exception if the desired new capacity is less than the existing capacity; in this case, the method call has no effect.  \n  \n If the length of the string assigned to the StringBuilder object in the constructor call exceeds either the default capacity or the specified capacity, the <xref:System.Text.StringBuilder.Capacity%2A> property is set to the length of the string specified with the  parameter.  \n  \n You can explicitly define the maximum capacity of a StringBuilder object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor. You can't change the maximum capacity by assigning a new value to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property, because it is read-only.  \n  \n As the previous section shows, whenever the existing capacity is inadequate, additional memory is allocated and the capacity of a StringBuilder object doubles up to the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A> property.  \n  \n In general, the default capacity and maximum capacity are adequate for most apps. You might consider setting these values under the following conditions:  \n  \n-   If the eventual size of the StringBuilder object is likely to grow exceedingly large, typically in excess of several megabytes. In this case, there may be some performance benefit from setting the initial <xref:System.Text.StringBuilder.Capacity%2A> property to a significantly high value to eliminate the need for too many memory reallocations.  \n  \n-   If your app is running on a system with limited memory. In this case, you may want to consider setting the <xref:System.Text.StringBuilder.MaxCapacity%2A> property to less than <xref:System.Int32.MaxValue?displayProperty=fullName> if your app is handling large strings that may cause it to execute in a memory-constrained environment.  \n  \n<a name=\"Instantiating\"></a>   \n## Instantiating a StringBuilder object  \n You instantiate a StringBuilder object by calling one of its six overloaded class constructors, which are listed in the following table. Three of the constructors instantiate a StringBuilder object whose value is an empty string, but set its <xref:System.Text.StringBuilder.Capacity%2A> and <xref:System.Text.StringBuilder.MaxCapacity%2A> values differently. The remaining three constructors define a StringBuilder object that has a specific string value and capacity. Two of the three constructors use the default maximum capacity of <xref:System.Int32.MaxValue?displayProperty=fullName>, whereas the third allows you to set the maximum capacity.  \n  \n|Constructor|String value|Capacity|Maximum capacity|  \n|-----------------|------------------|--------------|----------------------|  \n|<xref:System.Text.StringBuilder.%23ctor>|<xref:System.String.Empty?displayProperty=fullName>|16|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \n|<xref:System.Text.StringBuilder.%23ctor%28System.Int32%29>|<xref:System.String.Empty?displayProperty=fullName>|Defined by the  parameter|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \n|<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29>|<xref:System.String.Empty?displayProperty=fullName>|Defined by the  parameter|Defined by the  parameter|  \n|<xref:System.Text.StringBuilder.%23ctor%28System.String%29>|Defined by the  parameter|16 or . <xref:System.String.Length%2A>, whichever is greater|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \n|<xref:System.Text.StringBuilder.%23ctor%28System.String%2CSystem.Int32%29>|Defined by the  parameter|Defined by the  parameter or . <xref:System.String.Length%2A>, whichever is greater.|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \n|<xref:System.Text.StringBuilder.%23ctor%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>|Defined by . <xref:System.String.Substring%2A>(,)|Defined by the  parameter or . <xref:System.String.Length%2A>, whichever is greater.|Defined by the  parameter|  \n  \n The following example uses three of these constructor overloads to instantiate StringBuilder objects.  \n  \n <a name=\"Calling\"></a>   \n## Calling StringBuilder methods  \n Most of the methods that modify the string in a StringBuilder instance return a reference to that same instance. This enables you to call StringBuilder methods in two ways:  \n  \n-   You can make individual method calls and ignore the return value, as the following example does.  \n  \n-   You can make a series of method calls in a single statement. This can be convenient if you want to write a single statement that chains successive operations. The following example consolidates three method calls from the previous example into a single line of code.  \n  \n     \n<a name=\"Operations\"></a>   \n## Performing StringBuilder operations  \n You can use the methods of the StringBuilder class to iterate, add, delete, or modify characters in a StringBuilder object.  \n  \n<a name=\"Iterating\"></a>   \n### Iterating StringBuilder characters  \n You can access the characters in a StringBuilder object by using the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property. In C#, <xref:System.Text.StringBuilder.Chars%2A> is an indexer; in Visual Basic, it is the default property of the StringBuilder class. This enables you to set or retrieve individual characters by using their index only, without explicitly referencing the <xref:System.Text.StringBuilder.Chars%2A> property. Characters in a StringBuilder object begin at index 0 (zero) and continue to index <xref:System.Text.StringBuilder.Length%2A> - 1.  \n  \n The following example illustrates the <xref:System.Text.StringBuilder.Chars%2A> property. It appends ten random numbers to a StringBuilder object, and then iterates each character. If the character's Unicode category is <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, it decreases the number by 1 (or changes the number to 9 if its value is 0). The example displays the contents of the StringBuilder object both before and after the values of individual characters were changed.  \n  \n<a name=\"Adding\"></a>   \n### Adding text to a StringBuilder object  \n The StringBuilder class includes the following methods for expanding the contents of a StringBuilder object:  \n  \n-   The <xref:System.Text.StringBuilder.Append%2A> method appends a string, a substring, a character array, a portion of a character array, a single character repeated multiple times, or the string representation of a primitive data type to a StringBuilder object.  \n  \n-   The <xref:System.Text.StringBuilder.AppendLine%2A> method appends a line terminator or a string along with a line terminator to a StringBuilder object.  \n  \n-   The <xref:System.Text.StringBuilder.AppendFormat%2A> method appends a  to a StringBuilder object. The string representations of objects included in the result string can reflect the formatting conventions of the current system culture or a specified culture.  \n  \n-   The <xref:System.Text.StringBuilder.Insert%2A> method inserts a string, a substring, multiple repetitions of a string, a character array, a portion of a character array, or the string representation of a primitive data type at a specified position in the StringBuilder object. The position is defined by a zero-based index.  \n  \n The following example uses the <xref:System.Text.StringBuilder.Append%2A>, <xref:System.Text.StringBuilder.AppendLine%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and <xref:System.Text.StringBuilder.Insert%2A> methods to expand the text of a StringBuilder object.  \n  \n <a name=\"Deleting\"></a>   \n### Deleting text from a StringBuilder object  \n The StringBuilder class includes methods that can reduce the size of the current StringBuilder instance. The <xref:System.Text.StringBuilder.Clear%2A> method removes all characters and sets the <xref:System.Text.StringBuilder.Length%2A> property to zero. The <xref:System.Text.StringBuilder.Remove%2A> method deletes a specified number of characters starting at a particular index position. In addition, you can remove characters from the end of a StringBuilder object by setting its <xref:System.Text.StringBuilder.Length%2A> property to a value that is less than the length of the current instance.  \n  \n The following example removes some of the text from a StringBuilder object, displays its resulting capacity, maximum capacity, and length property values, and then calls the <xref:System.Text.StringBuilder.Clear%2A> method to remove all the characters from the StringBuilder object.  \n  \n\n<a name=\"Modifying\"></a>   \n### Modifying the text in a StringBuilder object  \n The <xref:System.Text.StringBuilder.Replace%2A?displayProperty=fullName> method replaces all occurrences of a character or a string in the entire StringBuilder object or in a particular character range. The following example uses the <xref:System.Text.StringBuilder.Replace%2A> method to replace all exclamation points (!) with question marks (?) in the StringBuilder object.  \n  \n  \n<a name=\"Searching\"></a>   \n## Searching the text in a StringBuilder object  \n The StringBuilder class does not include methods similar to the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.IndexOf%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods provided by the <xref:System.String> class, which allow you to search the object for a particular character or a substring. Determining the presence or starting character position of a substring requires that you search a <xref:System.String> value by using either a string search method or a regular expression method. There are four ways to implement such searches, as the following table shows.  \n  \n|Technique|Pros|Cons|  \n|---------------|----------|----------|  \n|Search string values before adding them to the StringBuilder object.|Useful for determining whether a substring exists.|Cannot be used when the index position of a substring is important.|  \n|Call <xref:System.Text.StringBuilder.ToString%2A> and search the returned <xref:System.String> object.|Easy to use if you assign all the text to a StringBuilder object, and then begin to modify it.|Cumbersome to repeatedly call <xref:System.Text.StringBuilder.ToString%2A> if you must make modifications before all text is added to the StringBuilder object.<br /><br /> You must remember to work from the end of the StringBuilder object's text if you're making changes.|  \n|Use the <xref:System.Text.StringBuilder.Chars%2A> property to sequentially search a range of characters.|Useful if you're concerned with individual characters or a small substring.|Cumbersome if the number of characters to search is large or if the search logic is complex.|  \n|Convert the StringBuilder object to a <xref:System.String> object, and perform modifications on the <xref:System.String> object.|Useful if the number of modifications is small.|Negates the performance benefit of the StringBuilder class if the number of modifications is large.|  \n  \n Let's examine these techniques in greater detail.  \n  \n-   If the goal of the search is to determine whether a particular substring exists (that is, if you aren't interested in the position of the substring), you can search strings before storing them in the StringBuilder object. The following example provides one possible implementation. It defines a `StringBuilderFinder` class whose constructor is passed a reference to a StringBuilder object and the substring to find in the string. In this case, the example tries to determine whether recorded temperatures are in Fahrenheit or Celsius, and adds the appropriate introductory text to the beginning of the StringBuilder object. A random number generator is used to select an array that contains data in either degrees Celsius or degrees Fahrenheit.  \n  \n  \n-   Call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the StringBuilder object to a <xref:System.String> object. You can search the string by using methods such as <xref:System.String.LastIndexOf%2A?displayProperty=fullName> or <xref:System.String.StartsWith%2A?displayProperty=fullName>, or you can use regular expressions and the <xref:System.Text.RegularExpressions.Regex> class to search for patterns. Because both StringBuilder and <xref:System.String> objects use UTF-16 encoding to store characters, the index positions of characters, substrings, and regular expression matches are the same in both objects. This enables you to use StringBuilder methods to make changes at the same position at which that text is found in the <xref:System.String> object.  \n  \n    > [!NOTE]\n    >  If you adopt this approach, you should work from the end of the StringBuilder object to its beginning so that you don't have to repeatedly convert the StringBuilder object to a string.  \n  \n     The following example illustrates this approach. It stores four occurrences of each letter of the English alphabet in a StringBuilder object. It then converts the text to a <xref:System.String> object and uses a regular expression to identify the starting position of each four-character sequence. Finally, it adds an underscore before each four-character sequence except for the first sequence, and converts the first character of the sequence to uppercase.  \n  \n     \n-   Use the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property to sequentially search a range of characters in a StringBuilder object. This approach may not be practical if the number of characters to be searched is large or the search logic is particularly complex.  \n  \n     The following example is identical in functionality to the previous example but differs in implementation. It uses the <xref:System.Text.StringBuilder.Chars%2A> property to detect when a character value has changed, inserts an underscore at that position, and converts the first character in the new sequence to uppercase.  \n  \n      \n-   Store all the unmodified text in the StringBuilder object, call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the StringBuilder object to a <xref:System.String> object, and perform the modifications on the <xref:System.String> object. You can use this approach if you have only a few modifications; otherwise, the cost of working with immutable strings may negate the performance benefits of using a StringBuilder object.  \n  \n     The following example is identical in functionality to the previous two examples but differs in implementation. It creates a StringBuilder object, converts it to a <xref:System.String> object, and then uses a regular expression to perform all remaining modifications on the string. The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method uses a lambda expression to perform the replacement on each match.  \n  \n      \n<a name=\"Converting\"></a>   \n## Converting the StringBuilder object to a string  \n You must convert the StringBuilder object to a <xref:System.String> object before you can pass the string represented by the StringBuilder object to a method that has a <xref:System.String> parameter or display it in the user interface. You perform this conversion by calling the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method. For an illustration, see the previous example, which calls the <xref:System.Text.StringBuilder.ToString%2A> method to convert a StringBuilder object to a string so that it can be passed to a regular expression method."
  example:
  - "The following example shows how to call many of the methods defined by the StringBuilder class.  \n  \n [!CODE [StringBuilder#1](../CodeSnippet/VS_Snippets_CLR/StringBuilder#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class StringBuilder : System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.#ctor
  id: '#ctor'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: StringBuilder()
  nameWithType: StringBuilder.StringBuilder()
  fullName: System.Text.StringBuilder.StringBuilder()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.StringBuilder"> class.
  remarks: The string value of this instance is set to <xref:System.String.Empty?displayProperty=fullName>, and the capacity is set to the implementation-specific default capacity.
  example:
  - "The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with no parameters.  \n  \n [!CODE [System.Text.StringBuilder.Constructors#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors#1)]"
  syntax:
    content: public StringBuilder ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: StringBuilder(Int32)
  nameWithType: StringBuilder.StringBuilder(Int32)
  fullName: System.Text.StringBuilder.StringBuilder(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.StringBuilder"> class using the specified capacity.
  remarks: "The  parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this  value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \n  \n The string value of this instance is set to <xref:System.String.Empty?displayProperty=fullName>. If  is zero, the implementation-specific default capacity is used."
  example:
  - "The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with a specified capacity.  \n  \n [!CODE [System.Text.StringBuilder.Constructors#3](../CodeSnippet/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors#3)]"
  syntax:
    content: public StringBuilder (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: The suggested starting size of this instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: StringBuilder(String)
  nameWithType: StringBuilder.StringBuilder(String)
  fullName: System.Text.StringBuilder.StringBuilder(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.StringBuilder"> class using the specified string.
  remarks: If  is `null`, the new <xref:System.Text.StringBuilder> will contain the empty string (that is, it contains <xref:System.String.Empty>).
  example:
  - "The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with the specified string.  \n  \n [!CODE [System.Text.StringBuilder.Constructors#4](../CodeSnippet/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors#4)]"
  syntax:
    content: public StringBuilder (string value);
    parameters:
    - id: value
      type: System.String
      description: The string used to initialize the value of the instance. If  is `null`, the new <see cref="T:System.Text.StringBuilder"> will contain the empty string (that is, it contains <xref:System.String.Empty>).
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: StringBuilder(Int32,Int32)
  nameWithType: StringBuilder.StringBuilder(Int32,Int32)
  fullName: System.Text.StringBuilder.StringBuilder(Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.StringBuilder"> class that starts with a specified capacity and can grow to a specified maximum.
  remarks: "The  parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this  value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \n  \n If  is zero, the implementation-specific default capacity is used.  \n  \n The  property defines the maximum number of characters that the current instance can hold. Its value is assigned to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property. If the number of characters to be stored in the current instance exceeds this  value, the <xref:System.Text.StringBuilder> object does not allocate additional memory, but instead throws an exception."
  example:
  - "The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with a specified capacity and maximum capacity.  \n  \n [!CODE [System.Text.StringBuilder.Constructors#5](../CodeSnippet/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors#5)]"
  syntax:
    content: public StringBuilder (int capacity, int maxCapacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: The suggested starting size of the <see cref="T:System.Text.StringBuilder">.
    - id: maxCapacity
      type: System.Int32
      description: The maximum number of characters the current string can contain.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: StringBuilder(String,Int32)
  nameWithType: StringBuilder.StringBuilder(String,Int32)
  fullName: System.Text.StringBuilder.StringBuilder(String,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.StringBuilder"> class using the specified string and capacity.
  remarks: "The  parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this  value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \n  \n If  is zero, the implementation-specific default capacity is used."
  example:
  - "The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with an initial string and a specified capacity.  \n  \n [!CODE [System.Text.StringBuilder.Constructors#7](../CodeSnippet/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors#7)]"
  syntax:
    content: public StringBuilder (string value, int capacity);
    parameters:
    - id: value
      type: System.String
      description: The string used to initialize the value of the instance. If  is `null`, the new <see cref="T:System.Text.StringBuilder"> will contain the empty string (that is, it contains <xref:System.String.Empty>).
    - id: capacity
      type: System.Int32
      description: The suggested starting size of the <see cref="T:System.Text.StringBuilder">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32,System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: StringBuilder(String,Int32,Int32,Int32)
  nameWithType: StringBuilder.StringBuilder(String,Int32,Int32,Int32)
  fullName: System.Text.StringBuilder.StringBuilder(String,Int32,Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.StringBuilder"> class from the specified substring and capacity.
  remarks: "The  parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this  value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \n  \n If  is zero, the implementation-specific default capacity is used."
  example:
  - "The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with the specified string.  \n  \n [!CODE [System.Text.StringBuilder.Constructors#6](../CodeSnippet/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors#6)]"
  syntax:
    content: public StringBuilder (string value, int startIndex, int length, int capacity);
    parameters:
    - id: value
      type: System.String
      description: The string that contains the substring used to initialize the value of this instance. If  is `null`, the new <see cref="T:System.Text.StringBuilder"> will contain the empty string (that is, it contains <xref:System.String.Empty>).
    - id: startIndex
      type: System.Int32
      description: The position within  where the substring begins.
    - id: length
      type: System.Int32
      description: The number of characters in the substring.
    - id: capacity
      type: System.Int32
      description: The suggested starting size of the <see cref="T:System.Text.StringBuilder">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Boolean)
  id: Append(System.Boolean)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Boolean)
  nameWithType: StringBuilder.Append(Boolean)
  fullName: System.Text.StringBuilder.Append(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified Boolean value to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n The Append method calls the <xref:System.Boolean.ToString?displayProperty=fullName> method to get the string representation of . The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: The Boolean value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Byte)
  id: Append(System.Byte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Byte)
  nameWithType: StringBuilder.Append(Byte)
  fullName: System.Text.StringBuilder.Append(Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified 8-bit unsigned integer to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n  \n The Append method calls the <xref:System.Byte.ToString%28System.IFormatProvider%29> method to get the string representation of  for the current culture. To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Char)
  id: Append(System.Char)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Char)
  nameWithType: StringBuilder.Append(Char)
  fullName: System.Text.StringBuilder.Append(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified <xref:System.Char> object to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (char value);
    parameters:
    - id: value
      type: System.Char
      description: The UTF-16-encoded code unit to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Char[])
  id: Append(System.Char[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Char[])
  nameWithType: StringBuilder.Append(Char[])
  fullName: System.Text.StringBuilder.Append(Char[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of the Unicode characters in a specified array to this instance.
  remarks: "This method appends all the characters in the specified array to the current instance in the same order as they appear in . If  is `null`, no changes are made.  \n  \n The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (char[] value);
    parameters:
    - id: value
      type: System.Char[]
      description: The array of characters to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Decimal)
  id: Append(System.Decimal)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Decimal)
  nameWithType: StringBuilder.Append(Decimal)
  fullName: System.Text.StringBuilder.Append(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified decimal number to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n The Append method calls the <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of  for the current culture. To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Double)
  id: Append(System.Double)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Double)
  nameWithType: StringBuilder.Append(Double)
  fullName: System.Text.StringBuilder.Append(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified double-precision floating-point number to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n   \n The Append method calls the <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of  for the current culture. To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (double value);
    parameters:
    - id: value
      type: System.Double
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Int16)
  id: Append(System.Int16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Int16)
  nameWithType: StringBuilder.Append(Int16)
  fullName: System.Text.StringBuilder.Append(Int16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified 16-bit signed integer to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n  \n The Append method calls the <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of  for the current culture. To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (short value);
    parameters:
    - id: value
      type: System.Int16
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Int32)
  id: Append(System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Int32)
  nameWithType: StringBuilder.Append(Int32)
  fullName: System.Text.StringBuilder.Append(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified 32-bit signed integer to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n  \n The Append method calls the <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of  for the current culture. To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (int value);
    parameters:
    - id: value
      type: System.Int32
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Int64)
  id: Append(System.Int64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Int64)
  nameWithType: StringBuilder.Append(Int64)
  fullName: System.Text.StringBuilder.Append(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified 64-bit signed integer to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n n The Append method calls the <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName> to get the string representation of  for the current culture. To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (long value);
    parameters:
    - id: value
      type: System.Int64
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Object)
  id: Append(System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Object)
  nameWithType: StringBuilder.Append(Object)
  fullName: System.Text.StringBuilder.Append(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified object to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates. It defines a `Dog` class, creates a `Dog` object, and makes three calls to the <xref:System.Text.StringBuilder.Append%2A> method to create a string that contains the dog's name and breed.  \n  \n \n The Append method calls the <xref:System.Object.ToString%2A?displayProperty=fullName> method to get the string representation of . If  is `null`, no changes are made to the <xref:System.Text.StringBuilder> object.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.SByte)
  id: Append(System.SByte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(SByte)
  nameWithType: StringBuilder.Append(SByte)
  fullName: System.Text.StringBuilder.Append(SByte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified 8-bit signed integer to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n   \n The Append method calls the <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName> method  to get the string representation of  for the current culture. To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Single)
  id: Append(System.Single)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Single)
  nameWithType: StringBuilder.Append(Single)
  fullName: System.Text.StringBuilder.Append(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified single-precision floating-point number to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n  The Append method calls the <xref:System.Single.ToString%2A?displayProperty=fullName> method to get the string representation of  for the current culture. To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (float value);
    parameters:
    - id: value
      type: System.Single
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.String)
  id: Append(System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(String)
  nameWithType: StringBuilder.Append(String)
  fullName: System.Text.StringBuilder.Append(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends a copy of the specified string to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n   \n If  is `null`, no changes are made.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (string value);
    parameters:
    - id: value
      type: System.String
      description: The string to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.UInt16)
  id: Append(System.UInt16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(UInt16)
  nameWithType: StringBuilder.Append(UInt16)
  fullName: System.Text.StringBuilder.Append(UInt16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified 16-bit unsigned integer to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n  \n The Append method calls the <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of . To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.UInt32)
  id: Append(System.UInt32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(UInt32)
  nameWithType: StringBuilder.Append(UInt32)
  fullName: System.Text.StringBuilder.Append(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified 32-bit unsigned integer to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n \n The Append calls the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method to get the string representation of  for the current culture. To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.UInt64)
  id: Append(System.UInt64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(UInt64)
  nameWithType: StringBuilder.Append(UInt64)
  fullName: System.Text.StringBuilder.Append(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified 64-bit unsigned integer to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n  \n The Append method calls the <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of  for the current culture. To control the formatting of , call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Char,System.Int32)
  id: Append(System.Char,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Char,Int32)
  nameWithType: StringBuilder.Append(Char,Int32)
  fullName: System.Text.StringBuilder.Append(Char,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends a specified number of copies of the string representation of a Unicode character to this instance.
  remarks: "The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (char value, int repeatCount);
    parameters:
    - id: value
      type: System.Char
      description: The character to append.
    - id: repeatCount
      type: System.Int32
      description: The number of times to append .
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Char*,System.Int32)
  id: Append(System.Char*,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Char*,Int32)
  nameWithType: StringBuilder.Append(Char*,Int32)
  fullName: System.Text.StringBuilder.Append(Char*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends an array of Unicode characters starting at a specified address to this instance.
  remarks: "This method appends  characters starting at address  to the current instance.  \n  \n The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (char* value, int valueCount);
    parameters:
    - id: value
      type: System.Char*
      description: A pointer to an array of characters.
    - id: valueCount
      type: System.Int32
      description: The number of characters in the array.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)
  id: Append(System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(Char[],Int32,Int32)
  nameWithType: StringBuilder.Append(Char[],Int32,Int32)
  fullName: System.Text.StringBuilder.Append(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string representation of a specified subarray of Unicode characters to this instance.
  remarks: "This method appends the specified range of characters in  to the current instance. If  is `null` and  and  are both zero, no changes are made.  \n  \n The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (char[] value, int startIndex, int charCount);
    parameters:
    - id: value
      type: System.Char[]
      description: A character array.
    - id: startIndex
      type: System.Int32
      description: The starting position in .
    - id: charCount
      type: System.Int32
      description: The number of characters to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)
  id: Append(System.String,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Append(String,Int32,Int32)
  nameWithType: StringBuilder.Append(String,Int32,Int32)
  fullName: System.Text.StringBuilder.Append(String,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends a copy of a specified substring to this instance.
  remarks: "This method appends the specified range of characters in  to the current instance. If  is `null` and  and  are both zero, no changes are made.  \n  \n The Append method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder Append (string value, int startIndex, int count);
    parameters:
    - id: value
      type: System.String
      description: The string that contains the substring to append.
    - id: startIndex
      type: System.Int32
      description: The starting position of the substring within .
    - id: count
      type: System.Int32
      description: The number of characters in  to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.Append*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object)
  id: AppendFormat(System.String,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: AppendFormat(String,Object)
  nameWithType: StringBuilder.AppendFormat(String,Object)
  fullName: System.Text.StringBuilder.AppendFormat(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
  remarks: "This method uses the [composite formatting feature](../Topic/Composite%20Formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The  parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of the format items must be 0, to correspond to , the single object in the parameter list of this method. The formatting process replaces each format item with the string representation of .  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](../Topic/Enumeration%20Format%20Strings.md).  \n  \n represents the object to be formatted. Each format item in  is replaced with the string representation of . If the format item includes  and  implements the <xref:System.IFormattable> interface, then `arg0.ToString(formatString, null)` defines the formatting. Otherwise, `arg0.ToString()` defines the formatting.  \n  \n If the string assigned to  is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and  is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\""
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n [!CODE [stringbuilder.appendformat#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.appendformat#1)]"
  syntax:
    content: public System.Text.StringBuilder AppendFormat (string format, object arg0);
    parameters:
    - id: format
      type: System.String
      description: A composite format string (see Remarks).
    - id: arg0
      type: System.Object
      description: An object to format.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance with  appended. Each format item in  is replaced by the string representation of .
  overload: System.Text.StringBuilder.AppendFormat*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object[])
  id: AppendFormat(System.String,System.Object[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: AppendFormat(String,Object[])
  nameWithType: StringBuilder.AppendFormat(String,Object[])
  fullName: System.Text.StringBuilder.AppendFormat(String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.
  remarks: "This method uses the [composite formatting feature](../Topic/Composite%20Formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The  parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](../Topic/Enumeration%20Format%20Strings.md).  \n  \n represents the objects to be formatted. Each format item in  is replaced with the string representation of the corresponding object in . If the format item includes  and the corresponding object in  implements the <xref:System.IFormattable> interface, then `args[index].ToString(formatString, provider)` defines the formatting. Otherwise, `args[index].ToString()` defines the formatting.  \n  \n If the string assigned to  is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and  is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\""
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n [!CODE [stringbuilder.appendformat#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.appendformat#1)]"
  syntax:
    content: public System.Text.StringBuilder AppendFormat (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: A composite format string (see Remarks).
    - id: args
      type: System.Object[]
      description: An array of objects to format.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance with  appended. Each format item in  is replaced by the string representation of the corresponding object argument.
  overload: System.Text.StringBuilder.AppendFormat*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)
  id: AppendFormat(System.IFormatProvider,System.String,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: AppendFormat(IFormatProvider,String,Object)
  nameWithType: StringBuilder.AppendFormat(IFormatProvider,String,Object)
  fullName: System.Text.StringBuilder.AppendFormat(IFormatProvider,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider.
  remarks: "This method uses the  [composite formatting feature](../Topic/Composite%20Formatting.md) of the .NET Framework to convert the value of  to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The  parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of each format item must be zero (0) since this method includes an argument list with a single argument. The formatting process replaces each format item with the string representation of .  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. In this case, since the AppendFormat method has a single argument in the argument list, the value of *index* must always be 0. If it is not, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](../Topic/Enumeration%20Format%20Strings.md).  \n  \n The  parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for the objects in .  can be any of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for  if it is a numeric value.  \n  \n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for  if it is a date and time value.  \n  \n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for . Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.  \n  \n If the  parameter is `null`, formatting information is obtained from the current culture.  \n  \n represents the object to be formatted. Each format item in  is replaced with the string representation of . If the format item includes  and  implements the <xref:System.IFormattable> interface, then `arg0.ToString(formatString, provider)` defines the formatting. Otherwise, `arg0.ToString()` defines the formatting."
  example:
  - "The following includes two calls to the AppendFormat method. Both use the formatting conventions of the English-Great Britain (en-GB) culture. The first inserts the string representation of a <xref:System.Decimal> value currency in a result string. The second inserts a <xref:System.DateTime> value in two places in a result string, the first including only the short date string and the second the short time string.  \n  \n "
  syntax:
    content: public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    - id: format
      type: System.String
      description: A composite format string (see Remarks).
    - id: arg0
      type: System.Object
      description: The object to format.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of  in which any format specification is replaced by the string representation of .
  overload: System.Text.StringBuilder.AppendFormat*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])
  id: AppendFormat(System.IFormatProvider,System.String,System.Object[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: AppendFormat(IFormatProvider,String,Object[])
  nameWithType: StringBuilder.AppendFormat(IFormatProvider,String,Object[])
  fullName: System.Text.StringBuilder.AppendFormat(IFormatProvider,String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.
  remarks: "This method uses the [composite formatting feature](../Topic/Composite%20Formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The  parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](../Topic/Enumeration%20Format%20Strings.md).  \n  \n The  parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for the objects in .  can be any of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for numeric values in .  \n  \n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for date and time values in .  \n  \n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for one or more of the objects in . Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface. The second example in the next section illustrates an AppendFormat method call with a custom <xref:System.IFormatProvider> implementation.  \n  \n If the  parameter is `null`, format provider information is obtained from the current culture.  \n  \n represents the objects to be formatted. Each format item in  is replaced with the string representation of the corresponding object in . If the format item includes  and the corresponding object in  implements the <xref:System.IFormattable> interface, then `args[index].ToString(formatString, provider)` defines the formatting. Otherwise, `args[index].ToString()` defines the formatting."
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n [!CODE [stringbuilder.appendformat#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.appendformat#1)]  \n  \n The following example defines a custom <xref:System.IFormatProvider> implementation named `CustomerFormatter` that formats a 10-digit customer number with hyphens after the fourth and seventh digits. It is passed to the AppendFormat method to create a string that includes the formatted customer number and customer name.  \n  \n "
  syntax:
    content: public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object[] args);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    - id: format
      type: System.String
      description: A composite format string (see Remarks).
    - id: args
      type: System.Object[]
      description: An array of objects to format.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of  where any format specification is replaced by the string representation of the corresponding object argument.
  overload: System.Text.StringBuilder.AppendFormat*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)
  id: AppendFormat(System.String,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: AppendFormat(String,Object,Object)
  nameWithType: StringBuilder.AppendFormat(String,Object,Object)
  fullName: System.Text.StringBuilder.AppendFormat(String,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.
  remarks: "This method uses the [composite formatting feature](../Topic/Composite%20Formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The  parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to  and , the two objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](../Topic/Enumeration%20Format%20Strings.md).  \n  \n and  represent the objects to be formatted. Each format item in  is replaced with the string representation of either  or . If the format item includes  and the corresponding object implements the <xref:System.IFormattable> interface, then `arg`*x*`.ToString(formatString, provider)` defines the formatting, where *x* is the index of the argument. Otherwise, `arg`*x*`.ToString()` defines the formatting.  \n  \n If the string assigned to  is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and  is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\""
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n [!CODE [stringbuilder.appendformat#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.appendformat#1)]"
  syntax:
    content: public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1);
    parameters:
    - id: format
      type: System.String
      description: A composite format string (see Remarks).
    - id: arg0
      type: System.Object
      description: The first object to format.
    - id: arg1
      type: System.Object
      description: The second object to format.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance with  appended. Each format item in  is replaced by the string representation of the corresponding object argument.
  overload: System.Text.StringBuilder.AppendFormat*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  id: AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: AppendFormat(IFormatProvider,String,Object,Object)
  nameWithType: StringBuilder.AppendFormat(IFormatProvider,String,Object,Object)
  fullName: System.Text.StringBuilder.AppendFormat(IFormatProvider,String,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.
  remarks: "This method uses the [composite formatting feature](../Topic/Composite%20Formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The  parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](../Topic/Enumeration%20Format%20Strings.md).  \n  \n The  parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for  and .  can be any of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for  or  if they are numeric values.  \n  \n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for  or  if they are date and time values.  \n  \n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for  and . Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.  \n  \n If the  parameter is `null`, format provider information is obtained from the current culture.  \n  \n and  represent the objects to be formatted. Each format item in  is replaced with the string representation of the object that has the corresponding index. If the format item includes  and the corresponding argument implements the <xref:System.IFormattable> interface, then the argument's `ToString(formatString, provider)` method defines the formatting. Otherwise, the argument's `ToString()` method defines the formatting."
  example:
  - "The following example uses the AppendFormat method to display time and temperature data stored in a generic <xref:System.Collections.Generic.Dictionary%602> object. Note that the format string has three format items, although there are only to objects to format. This is because the first object in the list (a date and time value) is used by two format items: The first format item displays the time, and the second displays the date.  \n  \n "
  syntax:
    content: public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0, object arg1);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    - id: format
      type: System.String
      description: A composite format string (see Remarks).
    - id: arg0
      type: System.Object
      description: The first object to format.
    - id: arg1
      type: System.Object
      description: The second object to format.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of  where any format specification is replaced by the string representation of the corresponding object argument.
  overload: System.Text.StringBuilder.AppendFormat*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)
  id: AppendFormat(System.String,System.Object,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: AppendFormat(String,Object,Object,Object)
  nameWithType: StringBuilder.AppendFormat(String,Object,Object,Object)
  fullName: System.Text.StringBuilder.AppendFormat(String,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.
  remarks: "This method uses the [composite formatting feature](../Topic/Composite%20Formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The  parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to  through , the objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](../Topic/Enumeration%20Format%20Strings.md).  \n  \n , , and  represent the objects to be formatted. Each format item in  is replaced with the string representation of either , , or , depending on the index of the format item. If the format item includes  and the corresponding object in  implements the <xref:System.IFormattable> interface, then `arg`*x*`.ToString(formatString, null)` defines the formatting, where *x* is the index of the argument. Otherwise, `arg`*x*`.ToString()` defines the formatting.  \n  \n If the string assigned to  is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and  is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\""
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n [!CODE [stringbuilder.appendformat#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.appendformat#1)]"
  syntax:
    content: public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1, object arg2);
    parameters:
    - id: format
      type: System.String
      description: A composite format string (see Remarks).
    - id: arg0
      type: System.Object
      description: The first object to format.
    - id: arg1
      type: System.Object
      description: The second object to format.
    - id: arg2
      type: System.Object
      description: The third object to format.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance with  appended. Each format item in  is replaced by the string representation of the corresponding object argument.
  overload: System.Text.StringBuilder.AppendFormat*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  id: AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: AppendFormat(IFormatProvider,String,Object,Object,Object)
  nameWithType: StringBuilder.AppendFormat(IFormatProvider,String,Object,Object,Object)
  fullName: System.Text.StringBuilder.AppendFormat(IFormatProvider,String,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.
  remarks: "This method uses the [composite formatting feature](../Topic/Composite%20Formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The  parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](../Topic/Enumeration%20Format%20Strings.md).  \n  \n The  parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for  and .  can be any of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for  or  if they are numeric values.  \n  \n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for , , or  if they are date and time values.  \n  \n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for ,  , and . Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.  \n  \n If the  parameter is `null`, format provider information is obtained from the current culture.  \n  \n , , and  represent the objects to be formatted. Each format item in  is replaced with the string representation of the object that has the corresponding index. If the format item includes  and the corresponding argument implements the <xref:System.IFormattable> interface, then the argument's `ToString(formatString, provider)` method defines the formatting. Otherwise, the argument's `ToString()` method defines the formatting."
  example:
  - "The following example uses the AppendFormat method to illustrate the result of a Boolean `And` operation with integer values. Note that the format string includes six format items, but the method has only three items in its argument list, because each item is formatted in two different ways.  \n  \n "
  syntax:
    content: public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0, object arg1, object arg2);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    - id: format
      type: System.String
      description: A composite format string (see Remarks).
    - id: arg0
      type: System.Object
      description: The first object to format.
    - id: arg1
      type: System.Object
      description: The second object to format.
    - id: arg2
      type: System.Object
      description: The third object to format.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of  where any format specification is replaced by the string representation of the corresponding object argument.
  overload: System.Text.StringBuilder.AppendFormat*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.AppendLine
  id: AppendLine
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: AppendLine()
  nameWithType: StringBuilder.AppendLine()
  fullName: System.Text.StringBuilder.AppendLine()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder"> object.
  remarks: "The default line terminator is the current value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property.  \n  \n The capacity of this instance is adjusted as needed."
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.AppendLine%2A> method.  \n  \n [!CODE [stringbuilder.appendline#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.appendline#1)]"
  syntax:
    content: public System.Text.StringBuilder AppendLine ();
    parameters: []
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.AppendLine*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.AppendLine(System.String)
  id: AppendLine(System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: AppendLine(String)
  nameWithType: StringBuilder.AppendLine(String)
  fullName: System.Text.StringBuilder.AppendLine(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Appends a copy of the specified string followed by the default line terminator to the end of the current <see cref="T:System.Text.StringBuilder"> object.
  remarks: "The default line terminator is the current value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property.  \n  \n The capacity of this instance is adjusted as needed."
  syntax:
    content: public System.Text.StringBuilder AppendLine (string value);
    parameters:
    - id: value
      type: System.String
      description: The string to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the append operation has completed.
  overload: System.Text.StringBuilder.AppendLine*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Capacity
  id: Capacity
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Capacity
  nameWithType: StringBuilder.Capacity
  fullName: System.Text.StringBuilder.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.
  remarks: "Capacity does not affect the string value of the current instance. Capacity can be decreased as long as it is not less than <xref:System.Text.StringBuilder.Length%2A>.  \n  \n The <xref:System.Text.StringBuilder> dynamically allocates more space when required and increases Capacity accordingly. For performance reasons, a <xref:System.Text.StringBuilder> might allocate more memory than needed. The amount of memory allocated is implementation-specific."
  example:
  - "The following example demonstrates the Capacity property.  \n  \n [!CODE [stringbuilder.ensurecapacity#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.ensurecapacity#1)]"
  syntax:
    content: public int Capacity { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Chars(System.Int32)
  id: Chars(System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Chars(Int32)
  nameWithType: StringBuilder.Chars(Int32)
  fullName: System.Text.StringBuilder.Chars(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Gets or sets the character at the specified character position in this instance.
  remarks: "The  parameter is the position of a character within the <xref:System.Text.StringBuilder>. The first character in the string is at index 0. The length of a string is the number of characters it contains. The last accessible character of a <xref:System.Text.StringBuilder> instance is at index <xref:System.Text.StringBuilder.Length%2A> - 1.  \n  \n Chars is the default property of the <xref:System.Text.StringBuilder> class. In C#, it is an indexer. This means that individual characters can be retrieved from the Chars property as shown in the following example, which counts the number of alphabetic, white-space, and punctuation characters in a string.  \n  \n [!CODE [System.Text.StringBuilder.Chars#1](../CodeSnippet/VS_Snippets_CLR_System/system.text.stringbuilder.chars#1)]"
  syntax:
    content: public char this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The position of the character.
    return:
      type: System.Char
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Clear
  id: Clear
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Clear()
  nameWithType: StringBuilder.Clear()
  fullName: System.Text.StringBuilder.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Removes all characters from the current <see cref="T:System.Text.StringBuilder"> instance.
  remarks: "Clear is a convenience method that is equivalent to setting the <xref:System.Text.StringBuilder.Length%2A> property of the current instance to 0 (zero).  \n  \n Calling the Clear method does not modify the current instance's <xref:System.Text.StringBuilder.Capacity%2A> or <xref:System.Text.StringBuilder.MaxCapacity%2A> property."
  example:
  - "The following example instantiates a <xref:System.Text.StringBuilder> object with a string, calls the Clear method, and then appends a new string.  \n  \n [!CODE [System.Text.StringBuilder.Clear#1](../CodeSnippet/VS_Snippets_CLR_System/system.text.stringbuilder.clear#1)]"
  syntax:
    content: public System.Text.StringBuilder Clear ();
    parameters: []
    return:
      type: System.Text.StringBuilder
      description: An object whose <xref:System.Text.StringBuilder.Length%2A> is 0 (zero).
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: CopyTo(Int32,Char[],Int32,Int32)
  nameWithType: StringBuilder.CopyTo(Int32,Char[],Int32,Int32)
  fullName: System.Text.StringBuilder.CopyTo(Int32,Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Copies the characters from a specified segment of this instance to a specified segment of a destination <xref:System.Char> array.
  remarks: "The CopyTo method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <xref:System.Text.StringBuilder> object to an array. The array should be a fixed size, preallocated, reusable, and possibly globally accessible.  \n  \n For example, your application could populate a <xref:System.Text.StringBuilder> object with a large number of characters then use the CopyTo method to copy small, successive pieces of the <xref:System.Text.StringBuilder> object to an array where the pieces are processed. When all the data in the <xref:System.Text.StringBuilder> object is processed, the size of the <xref:System.Text.StringBuilder> object is set to zero and the cycle is repeated."
  example:
  - "The following example demonstrates the CopyTo method.  \n  \n [!CODE [stringbuilder.copyto2#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.copyto2#1)]"
  syntax:
    content: public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);
    parameters:
    - id: sourceIndex
      type: System.Int32
      description: The starting position in this instance where characters will be copied from. The index is zero-based.
    - id: destination
      type: System.Char[]
      description: The array where characters will be copied.
    - id: destinationIndex
      type: System.Int32
      description: The starting position in  where characters will be copied. The index is zero-based.
    - id: count
      type: System.Int32
      description: The number of characters to be copied.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.EnsureCapacity(System.Int32)
  id: EnsureCapacity(System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: EnsureCapacity(Int32)
  nameWithType: StringBuilder.EnsureCapacity(Int32)
  fullName: System.Text.StringBuilder.EnsureCapacity(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Ensures that the capacity of this instance of <see cref="T:System.Text.StringBuilder"> is at least the specified value.
  remarks: If the current capacity is less than the  parameter, memory for this instance is reallocated to hold at least  number of characters; otherwise, no memory is changed.
  example:
  - "The following example demonstrates the EnsureCapacity method.  \n  \n [!CODE [stringbuilder.ensurecapacity#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.ensurecapacity#1)]"
  syntax:
    content: public int EnsureCapacity (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: The minimum capacity to ensure.
    return:
      type: System.Int32
      description: The new capacity of this instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  id: Equals(System.Text.StringBuilder)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Equals(StringBuilder)
  nameWithType: StringBuilder.Equals(StringBuilder)
  fullName: System.Text.StringBuilder.Equals(StringBuilder)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Returns a value indicating whether this instance is equal to a specified object.
  remarks: ''
  example:
  - "The following code uses the Equals method to check whether two <xref:System.Text.StringBuilder> objects are equal. The method is called repeatedly after small changes are made to each object, and the results are displayed to the console.  \n  \n [!CODE [stringbuilder.ensurecapacity#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.ensurecapacity#1)]"
  syntax:
    content: public bool Equals (System.Text.StringBuilder sb);
    parameters:
    - id: sb
      type: System.Text.StringBuilder
      description: An object to compare with this instance, or `null`.
    return:
      type: System.Boolean
      description: '`true` if this instance and  have equal string, <xref:System.Text.StringBuilder.Capacity%2A>, and <xref:System.Text.StringBuilder.MaxCapacity%2A> values; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Boolean)
  id: Insert(System.Int32,System.Boolean)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Boolean)
  nameWithType: StringBuilder.Insert(Int32,Boolean)
  fullName: System.Text.StringBuilder.Insert(Int32,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a Boolean value into this instance at the specified character position.
  remarks: <xref:System.Boolean.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, bool value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Boolean
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Byte)
  id: Insert(System.Int32,System.Byte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Byte)
  nameWithType: StringBuilder.Insert(Int32,Byte)
  fullName: System.Text.StringBuilder.Insert(Int32,Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.
  remarks: <xref:System.Byte.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, byte value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Byte
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char)
  id: Insert(System.Int32,System.Char)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Char)
  nameWithType: StringBuilder.Insert(Int32,Char)
  fullName: System.Text.StringBuilder.Insert(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a specified Unicode character into this instance at the specified character position.
  remarks: <xref:System.Char.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, char value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Char
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[])
  id: Insert(System.Int32,System.Char[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Char[])
  nameWithType: StringBuilder.Insert(Int32,Char[])
  fullName: System.Text.StringBuilder.Insert(Int32,Char[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.
  remarks: "Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  \n  \n If  is `null`, the <xref:System.Text.StringBuilder> is not changed."
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, char[] value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Char[]
      description: The character array to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Decimal)
  id: Insert(System.Int32,System.Decimal)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Decimal)
  nameWithType: StringBuilder.Insert(Int32,Decimal)
  fullName: System.Text.StringBuilder.Insert(Int32,Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a decimal number into this instance at the specified character position.
  remarks: <xref:System.Decimal.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, decimal value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Decimal
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Double)
  id: Insert(System.Int32,System.Double)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Double)
  nameWithType: StringBuilder.Insert(Int32,Double)
  fullName: System.Text.StringBuilder.Insert(Int32,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.
  remarks: <xref:System.Double.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, double value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Double
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int16)
  id: Insert(System.Int32,System.Int16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Int16)
  nameWithType: StringBuilder.Insert(Int32,Int16)
  fullName: System.Text.StringBuilder.Insert(Int32,Int16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.
  remarks: <xref:System.Int16.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, short value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Int16
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int32)
  id: Insert(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Int32)
  nameWithType: StringBuilder.Insert(Int32,Int32)
  fullName: System.Text.StringBuilder.Insert(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.
  remarks: <xref:System.Int32.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, int value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Int32
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int64)
  id: Insert(System.Int32,System.Int64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Int64)
  nameWithType: StringBuilder.Insert(Int32,Int64)
  fullName: System.Text.StringBuilder.Insert(Int32,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.
  remarks: <xref:System.Int64.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, long value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Int64
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: StringBuilder.Insert(Int32,Object)
  fullName: System.Text.StringBuilder.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of an object into this instance at the specified character position.
  remarks: "<xref:System.Object.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  \n  \n If  is `null`, the value of this instance is unchanged."
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Object
      description: The object to insert, or `null`.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.SByte)
  id: Insert(System.Int32,System.SByte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,SByte)
  nameWithType: StringBuilder.Insert(Int32,SByte)
  fullName: System.Text.StringBuilder.Insert(Int32,SByte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.
  remarks: <xref:System.SByte.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, sbyte value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.SByte
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Single)
  id: Insert(System.Int32,System.Single)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Single)
  nameWithType: StringBuilder.Insert(Int32,Single)
  fullName: System.Text.StringBuilder.Insert(Int32,Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a single-precision floating point number into this instance at the specified character position.
  remarks: <xref:System.Single.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, float value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Single
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,String)
  nameWithType: StringBuilder.Insert(Int32,String)
  fullName: System.Text.StringBuilder.Insert(Int32,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts a string into this instance at the specified character position.
  remarks: "Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.  \n  \n This instance of <xref:System.Text.StringBuilder> is not changed if  is `null`, or  is not `null` but its length is zero."
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, string value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.String
      description: The string to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt16)
  id: Insert(System.Int32,System.UInt16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,UInt16)
  nameWithType: StringBuilder.Insert(Int32,UInt16)
  fullName: System.Text.StringBuilder.Insert(Int32,UInt16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.
  remarks: <xref:System.UInt16.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, ushort value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.UInt16
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt32)
  id: Insert(System.Int32,System.UInt32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,UInt32)
  nameWithType: StringBuilder.Insert(Int32,UInt32)
  fullName: System.Text.StringBuilder.Insert(Int32,UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.
  remarks: <xref:System.UInt32.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, uint value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.UInt32
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt64)
  id: Insert(System.Int32,System.UInt64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,UInt64)
  nameWithType: StringBuilder.Insert(Int32,UInt64)
  fullName: System.Text.StringBuilder.Insert(Int32,UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.
  remarks: <xref:System.UInt64.ToString%2A?displayProperty=fullName> is used to get a string representation of . Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, ulong value);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.UInt64
      description: The value to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)
  id: Insert(System.Int32,System.String,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,String,Int32)
  nameWithType: StringBuilder.Insert(Int32,String,Int32)
  fullName: System.Text.StringBuilder.Insert(Int32,String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts one or more copies of a specified string into this instance at the specified character position.
  remarks: "Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  \n  \n This <xref:System.Text.StringBuilder> object is not changed if  is `null`,  is not `null` but its length is zero, or  is zero."
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, string value, int count);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.String
      description: The string to insert.
    - id: count
      type: System.Int32
      description: The number of times to insert .
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after insertion has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  id: Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Insert(Int32,Char[],Int32,Int32)
  nameWithType: StringBuilder.Insert(Int32,Char[],Int32,Int32)
  fullName: System.Text.StringBuilder.Insert(Int32,Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.
  remarks: Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \n  \n [!CODE [stringbuilder.insert#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.insert#1)]"
  syntax:
    content: public System.Text.StringBuilder Insert (int index, char[] value, int startIndex, int charCount);
    parameters:
    - id: index
      type: System.Int32
      description: The position in this instance where insertion begins.
    - id: value
      type: System.Char[]
      description: A character array.
    - id: startIndex
      type: System.Int32
      description: The starting index within .
    - id: charCount
      type: System.Int32
      description: The number of characters to insert.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the insert operation has completed.
  overload: System.Text.StringBuilder.Insert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Length
  id: Length
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Length
  nameWithType: StringBuilder.Length
  fullName: System.Text.StringBuilder.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Gets or sets the length of the current <see cref="T:System.Text.StringBuilder"> object.
  remarks: "The length of a <xref:System.Text.StringBuilder> object is defined by its number of <xref:System.Char> objects.  \n  \n Like the<xref:System.String.Length%2A?displayProperty=fullName> property, the Length property indicates the length of the current string object. Unlike the <xref:System.String.Length%2A?displayProperty=fullName> property, which is read-only, the Length property allows you to modify the length of the string stored to the <xref:System.Text.StringBuilder> object.  \n  \n If the specified length is less than the current length, the current <xref:System.Text.StringBuilder> object is truncated to the specified length. If the specified length is greater than the current length, the end of the string value of the current <xref:System.Text.StringBuilder> object is padded with the Unicode NULL character (U+0000).  \n  \n If the specified length is greater than the current capacity, <xref:System.Text.StringBuilder.Capacity%2A> increases so that it is greater than or equal to the specified length."
  example:
  - "The following example demonstrates the Length property.  \n  \n [!CODE [stringbuilder.ensurecapacity#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.ensurecapacity#1)]"
  syntax:
    content: public int Length { get; set; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.MaxCapacity
  id: MaxCapacity
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: MaxCapacity
  nameWithType: StringBuilder.MaxCapacity
  fullName: System.Text.StringBuilder.MaxCapacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Gets the maximum capacity of this instance.
  remarks: "The maximum capacity for this implementation is <xref:System.Int32?displayProperty=fullName>. However, this value is implementation-specific and might be different in other or later implementations. You can explicitly set the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.  \n  \n In the[!INCLUDE[net_v40_short](../../add/includes/net-v40-short-md.md)] and the [!INCLUDE[net_v45](../../add/includes/net-v45-md.md)], when you instantiate the <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor, both the length and the capacity of the <xref:System.Text.StringBuilder> instance can grow beyond the value of its MaxCapacity property. This can occur particularly when you call the <xref:System.Text.StringBuilder.Append%2A> and <xref:System.Text.StringBuilder.AppendFormat%2A> methods to append small strings."
  syntax:
    content: public int MaxCapacity { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  id: Remove(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Remove(Int32,Int32)
  nameWithType: StringBuilder.Remove(Int32,Int32)
  fullName: System.Text.StringBuilder.Remove(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Removes the specified range of characters from this instance.
  remarks: "The current method removes the specified range of characters from the current instance. The characters at ( + ) are moved to , and the string value of the current instance is shortened by . The capacity of the current instance is unaffected.  \n  \n> [!NOTE]\n>  The Remove method modifies the value of the current <xref:System.Text.StringBuilder> instance and returns that instance. It does not create and return a new <xref:System.Text.StringBuilder> object."
  example:
  - "The following example demonstrates the Remove method.  \n  \n [!CODE [stringbuilder.remove#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.remove#1)]"
  syntax:
    content: public System.Text.StringBuilder Remove (int startIndex, int length);
    parameters:
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: length
      type: System.Int32
      description: The number of characters to remove.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance after the excise operation has completed.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Replace(System.Char,System.Char)
  id: Replace(System.Char,System.Char)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Replace(Char,Char)
  nameWithType: StringBuilder.Replace(Char,Char)
  fullName: System.Text.StringBuilder.Replace(Char,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Replaces all occurrences of a specified character in this instance with another specified character.
  remarks: This method performs an ordinal, case-sensitive comparison to identify occurrences of  in the current instance. The size of the current <xref:System.Text.StringBuilder> instance is unchanged after the replacement.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Replace%2A> method.  \n  \n [!CODE [stringbuilder.replace#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.replace#1)]"
  syntax:
    content: public System.Text.StringBuilder Replace (char oldChar, char newChar);
    parameters:
    - id: oldChar
      type: System.Char
      description: The character to replace.
    - id: newChar
      type: System.Char
      description: The character that replaces .
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance with  replaced by .
  overload: System.Text.StringBuilder.Replace*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Replace(System.String,System.String)
  id: Replace(System.String,System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Replace(String,String)
  nameWithType: StringBuilder.Replace(String,String)
  fullName: System.Text.StringBuilder.Replace(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Replaces all occurrences of a specified string in this instance with another specified string.
  remarks: This method performs an ordinal, case-sensitive comparison to identify occurrences of  in the current instance. If  is `null`or<xref:System.String?displayProperty=fullName>, all occurrences of  are removed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Replace%2A> method.  \n  \n [!CODE [stringbuilder.replace#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.replace#1)]"
  syntax:
    content: public System.Text.StringBuilder Replace (string oldValue, string newValue);
    parameters:
    - id: oldValue
      type: System.String
      description: The string to replace.
    - id: newValue
      type: System.String
      description: The string that replaces , or `null`.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance with all instances of  replaced by .
  overload: System.Text.StringBuilder.Replace*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)
  id: Replace(System.Char,System.Char,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Replace(Char,Char,Int32,Int32)
  nameWithType: StringBuilder.Replace(Char,Char,Int32,Int32)
  fullName: System.Text.StringBuilder.Replace(Char,Char,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.
  remarks: This method performs an ordinal, case-sensitive comparison to identify occurrences of  in the current instance. The size of the current <xref:System.Text.StringBuilder> object is unchanged after the replacement.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Replace%2A> method.  \n  \n [!CODE [stringbuilder.replace#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.replace#1)]"
  syntax:
    content: public System.Text.StringBuilder Replace (char oldChar, char newChar, int startIndex, int count);
    parameters:
    - id: oldChar
      type: System.Char
      description: The character to replace.
    - id: newChar
      type: System.Char
      description: The character that replaces .
    - id: startIndex
      type: System.Int32
      description: The position in this instance where the substring begins.
    - id: count
      type: System.Int32
      description: The length of the substring.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance with  replaced by  in the range from  to  +  -1.
  overload: System.Text.StringBuilder.Replace*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)
  id: Replace(System.String,System.String,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: Replace(String,String,Int32,Int32)
  nameWithType: StringBuilder.Replace(String,String,Int32,Int32)
  fullName: System.Text.StringBuilder.Replace(String,String,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.
  remarks: This method performs an ordinal, case-sensitive comparison to identify occurrences of  in the specified substring. If  is `null`or<xref:System.String?displayProperty=fullName>, all occurrences of  are removed.
  example:
  - "The following example demonstrates the <xref:System.Text.StringBuilder.Replace%2A> method.  \n  \n [!CODE [stringbuilder.replace#1](../CodeSnippet/VS_Snippets_CLR/stringbuilder.replace#1)]"
  syntax:
    content: public System.Text.StringBuilder Replace (string oldValue, string newValue, int startIndex, int count);
    parameters:
    - id: oldValue
      type: System.String
      description: The string to replace.
    - id: newValue
      type: System.String
      description: The string that replaces , or `null`.
    - id: startIndex
      type: System.Int32
      description: The position in this instance where the substring begins.
    - id: count
      type: System.Int32
      description: The length of the substring.
    return:
      type: System.Text.StringBuilder
      description: A reference to this instance with all instances of  replaced by  in the range from  to  +  - 1.
  overload: System.Text.StringBuilder.Replace*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: StringBuilder.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Text.StringBuilder.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Populates a <xref:System.Runtime.Serialization.SerializationInfo?displayProperty=fullName> object with the data necessary to deserialize the current <xref:System.Text.StringBuilder> object.
  remarks: "The  parameter is reserved for future use and does not participate in this operation.  \n  \n For more information, see the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%28System.String%2CSystem.Object%2CSystem.Type%29?displayProperty=fullName> method."
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object to populate with serialization information.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The place to store and retrieve serialized data. Reserved for future use.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.ToString
  id: ToString
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: ToString()
  nameWithType: StringBuilder.ToString()
  fullName: System.Text.StringBuilder.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Converts the value of this instance to a <xref:System.String>.
  remarks: You must call the ToString method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface.
  example:
  - "The following example demonstrates calling the ToString method. This example is part of a larger example provided for the <xref:System.Text.StringBuilder> class.  \n  \n [!CODE [StringBuilder#5](../CodeSnippet/VS_Snippets_CLR/StringBuilder#5)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string whose value is the same as this instance.
  overload: System.Text.StringBuilder.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.StringBuilder.ToString(System.Int32,System.Int32)
  id: ToString(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  name: ToString(Int32,Int32)
  nameWithType: StringBuilder.ToString(Int32,Int32)
  fullName: System.Text.StringBuilder.ToString(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Converts the value of a substring of this instance to a <xref:System.String>.
  remarks: You must call the <xref:System.Text.StringBuilder.ToString%2A> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface.
  syntax:
    content: public string ToString (int startIndex, int length);
    parameters:
    - id: startIndex
      type: System.Int32
      description: The starting position of the substring in this instance.
    - id: length
      type: System.Int32
      description: The length of the substring.
    return:
      type: System.String
      description: A string whose value is the same as the specified substring of this instance.
  overload: System.Text.StringBuilder.ToString*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Text.StringBuilder.#ctor
  parent: System.Text.StringBuilder
  isExternal: false
  name: StringBuilder()
  nameWithType: StringBuilder.StringBuilder()
  fullName: System.Text.StringBuilder.StringBuilder()
- uid: System.Text.StringBuilder.#ctor(System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: StringBuilder(Int32)
  nameWithType: StringBuilder.StringBuilder(Int32)
  fullName: System.Text.StringBuilder.StringBuilder(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.#ctor(System.String)
  parent: System.Text.StringBuilder
  isExternal: false
  name: StringBuilder(String)
  nameWithType: StringBuilder.StringBuilder(String)
  fullName: System.Text.StringBuilder.StringBuilder(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.StringBuilder.#ctor(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: StringBuilder(Int32,Int32)
  nameWithType: StringBuilder.StringBuilder(Int32,Int32)
  fullName: System.Text.StringBuilder.StringBuilder(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: StringBuilder(String,Int32)
  nameWithType: StringBuilder.StringBuilder(String,Int32)
  fullName: System.Text.StringBuilder.StringBuilder(String,Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: StringBuilder(String,Int32,Int32,Int32)
  nameWithType: StringBuilder.StringBuilder(String,Int32,Int32,Int32)
  fullName: System.Text.StringBuilder.StringBuilder(String,Int32,Int32,Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Append(System.Boolean)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Boolean)
  nameWithType: StringBuilder.Append(Boolean)
  fullName: System.Text.StringBuilder.Append(Boolean)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.StringBuilder.Append(System.Byte)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Byte)
  nameWithType: StringBuilder.Append(Byte)
  fullName: System.Text.StringBuilder.Append(Byte)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Text.StringBuilder.Append(System.Char)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Char)
  nameWithType: StringBuilder.Append(Char)
  fullName: System.Text.StringBuilder.Append(Char)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Text.StringBuilder.Append(System.Char[])
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Char[])
  nameWithType: StringBuilder.Append(Char[])
  fullName: System.Text.StringBuilder.Append(Char[])
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Text.StringBuilder.Append(System.Decimal)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Decimal)
  nameWithType: StringBuilder.Append(Decimal)
  fullName: System.Text.StringBuilder.Append(Decimal)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Text.StringBuilder.Append(System.Double)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Double)
  nameWithType: StringBuilder.Append(Double)
  fullName: System.Text.StringBuilder.Append(Double)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Text.StringBuilder.Append(System.Int16)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Int16)
  nameWithType: StringBuilder.Append(Int16)
  fullName: System.Text.StringBuilder.Append(Int16)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Text.StringBuilder.Append(System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Int32)
  nameWithType: StringBuilder.Append(Int32)
  fullName: System.Text.StringBuilder.Append(Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Append(System.Int64)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Int64)
  nameWithType: StringBuilder.Append(Int64)
  fullName: System.Text.StringBuilder.Append(Int64)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Text.StringBuilder.Append(System.Object)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Object)
  nameWithType: StringBuilder.Append(Object)
  fullName: System.Text.StringBuilder.Append(Object)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.StringBuilder.Append(System.SByte)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(SByte)
  nameWithType: StringBuilder.Append(SByte)
  fullName: System.Text.StringBuilder.Append(SByte)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Text.StringBuilder.Append(System.Single)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Single)
  nameWithType: StringBuilder.Append(Single)
  fullName: System.Text.StringBuilder.Append(Single)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Text.StringBuilder.Append(System.String)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(String)
  nameWithType: StringBuilder.Append(String)
  fullName: System.Text.StringBuilder.Append(String)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.StringBuilder.Append(System.UInt16)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(UInt16)
  nameWithType: StringBuilder.Append(UInt16)
  fullName: System.Text.StringBuilder.Append(UInt16)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Text.StringBuilder.Append(System.UInt32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(UInt32)
  nameWithType: StringBuilder.Append(UInt32)
  fullName: System.Text.StringBuilder.Append(UInt32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Text.StringBuilder.Append(System.UInt64)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(UInt64)
  nameWithType: StringBuilder.Append(UInt64)
  fullName: System.Text.StringBuilder.Append(UInt64)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Text.StringBuilder.Append(System.Char,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Char,Int32)
  nameWithType: StringBuilder.Append(Char,Int32)
  fullName: System.Text.StringBuilder.Append(Char,Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Append(System.Char*,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Char*,Int32)
  nameWithType: StringBuilder.Append(Char*,Int32)
  fullName: System.Text.StringBuilder.Append(Char*,Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(Char[],Int32,Int32)
  nameWithType: StringBuilder.Append(Char[],Int32,Int32)
  fullName: System.Text.StringBuilder.Append(Char[],Int32,Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Append(String,Int32,Int32)
  nameWithType: StringBuilder.Append(String,Int32,Int32)
  fullName: System.Text.StringBuilder.Append(String,Int32,Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object)
  parent: System.Text.StringBuilder
  isExternal: false
  name: AppendFormat(String,Object)
  nameWithType: StringBuilder.AppendFormat(String,Object)
  fullName: System.Text.StringBuilder.AppendFormat(String,Object)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object[])
  parent: System.Text.StringBuilder
  isExternal: false
  name: AppendFormat(String,Object[])
  nameWithType: StringBuilder.AppendFormat(String,Object[])
  fullName: System.Text.StringBuilder.AppendFormat(String,Object[])
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)
  parent: System.Text.StringBuilder
  isExternal: false
  name: AppendFormat(IFormatProvider,String,Object)
  nameWithType: StringBuilder.AppendFormat(IFormatProvider,String,Object)
  fullName: System.Text.StringBuilder.AppendFormat(IFormatProvider,String,Object)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])
  parent: System.Text.StringBuilder
  isExternal: false
  name: AppendFormat(IFormatProvider,String,Object[])
  nameWithType: StringBuilder.AppendFormat(IFormatProvider,String,Object[])
  fullName: System.Text.StringBuilder.AppendFormat(IFormatProvider,String,Object[])
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)
  parent: System.Text.StringBuilder
  isExternal: false
  name: AppendFormat(String,Object,Object)
  nameWithType: StringBuilder.AppendFormat(String,Object,Object)
  fullName: System.Text.StringBuilder.AppendFormat(String,Object,Object)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  parent: System.Text.StringBuilder
  isExternal: false
  name: AppendFormat(IFormatProvider,String,Object,Object)
  nameWithType: StringBuilder.AppendFormat(IFormatProvider,String,Object,Object)
  fullName: System.Text.StringBuilder.AppendFormat(IFormatProvider,String,Object,Object)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)
  parent: System.Text.StringBuilder
  isExternal: false
  name: AppendFormat(String,Object,Object,Object)
  nameWithType: StringBuilder.AppendFormat(String,Object,Object,Object)
  fullName: System.Text.StringBuilder.AppendFormat(String,Object,Object,Object)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  parent: System.Text.StringBuilder
  isExternal: false
  name: AppendFormat(IFormatProvider,String,Object,Object,Object)
  nameWithType: StringBuilder.AppendFormat(IFormatProvider,String,Object,Object,Object)
  fullName: System.Text.StringBuilder.AppendFormat(IFormatProvider,String,Object,Object,Object)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.StringBuilder.AppendLine
  parent: System.Text.StringBuilder
  isExternal: false
  name: AppendLine()
  nameWithType: StringBuilder.AppendLine()
  fullName: System.Text.StringBuilder.AppendLine()
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text.StringBuilder.AppendLine(System.String)
  parent: System.Text.StringBuilder
  isExternal: false
  name: AppendLine(String)
  nameWithType: StringBuilder.AppendLine(String)
  fullName: System.Text.StringBuilder.AppendLine(String)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.StringBuilder.Capacity
  parent: System.Text.StringBuilder
  isExternal: false
  name: Capacity
  nameWithType: StringBuilder.Capacity
  fullName: System.Text.StringBuilder.Capacity
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Chars(System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Chars(Int32)
  nameWithType: StringBuilder.Chars(Int32)
  fullName: System.Text.StringBuilder.Chars(Int32)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Clear
  parent: System.Text.StringBuilder
  isExternal: false
  name: Clear()
  nameWithType: StringBuilder.Clear()
  fullName: System.Text.StringBuilder.Clear()
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: CopyTo(Int32,Char[],Int32,Int32)
  nameWithType: StringBuilder.CopyTo(Int32,Char[],Int32,Int32)
  fullName: System.Text.StringBuilder.CopyTo(Int32,Char[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.EnsureCapacity(System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: EnsureCapacity(Int32)
  nameWithType: StringBuilder.EnsureCapacity(Int32)
  fullName: System.Text.StringBuilder.EnsureCapacity(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Equals(StringBuilder)
  nameWithType: StringBuilder.Equals(StringBuilder)
  fullName: System.Text.StringBuilder.Equals(StringBuilder)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Boolean)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Boolean)
  nameWithType: StringBuilder.Insert(Int32,Boolean)
  fullName: System.Text.StringBuilder.Insert(Int32,Boolean)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Byte)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Byte)
  nameWithType: StringBuilder.Insert(Int32,Byte)
  fullName: System.Text.StringBuilder.Insert(Int32,Byte)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Char)
  nameWithType: StringBuilder.Insert(Int32,Char)
  fullName: System.Text.StringBuilder.Insert(Int32,Char)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[])
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Char[])
  nameWithType: StringBuilder.Insert(Int32,Char[])
  fullName: System.Text.StringBuilder.Insert(Int32,Char[])
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Decimal)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Decimal)
  nameWithType: StringBuilder.Insert(Int32,Decimal)
  fullName: System.Text.StringBuilder.Insert(Int32,Decimal)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Double)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Double)
  nameWithType: StringBuilder.Insert(Int32,Double)
  fullName: System.Text.StringBuilder.Insert(Int32,Double)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int16)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Int16)
  nameWithType: StringBuilder.Insert(Int32,Int16)
  fullName: System.Text.StringBuilder.Insert(Int32,Int16)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Int32)
  nameWithType: StringBuilder.Insert(Int32,Int32)
  fullName: System.Text.StringBuilder.Insert(Int32,Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int64)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Int64)
  nameWithType: StringBuilder.Insert(Int32,Int64)
  fullName: System.Text.StringBuilder.Insert(Int32,Int64)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Object)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: StringBuilder.Insert(Int32,Object)
  fullName: System.Text.StringBuilder.Insert(Int32,Object)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.StringBuilder.Insert(System.Int32,System.SByte)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,SByte)
  nameWithType: StringBuilder.Insert(Int32,SByte)
  fullName: System.Text.StringBuilder.Insert(Int32,SByte)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Single)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Single)
  nameWithType: StringBuilder.Insert(Int32,Single)
  fullName: System.Text.StringBuilder.Insert(Int32,Single)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Text.StringBuilder.Insert(System.Int32,System.String)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,String)
  nameWithType: StringBuilder.Insert(Int32,String)
  fullName: System.Text.StringBuilder.Insert(Int32,String)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt16)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,UInt16)
  nameWithType: StringBuilder.Insert(Int32,UInt16)
  fullName: System.Text.StringBuilder.Insert(Int32,UInt16)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,UInt32)
  nameWithType: StringBuilder.Insert(Int32,UInt32)
  fullName: System.Text.StringBuilder.Insert(Int32,UInt32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt64)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,UInt64)
  nameWithType: StringBuilder.Insert(Int32,UInt64)
  fullName: System.Text.StringBuilder.Insert(Int32,UInt64)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,String,Int32)
  nameWithType: StringBuilder.Insert(Int32,String,Int32)
  fullName: System.Text.StringBuilder.Insert(Int32,String,Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Insert(Int32,Char[],Int32,Int32)
  nameWithType: StringBuilder.Insert(Int32,Char[],Int32,Int32)
  fullName: System.Text.StringBuilder.Insert(Int32,Char[],Int32,Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Length
  parent: System.Text.StringBuilder
  isExternal: false
  name: Length
  nameWithType: StringBuilder.Length
  fullName: System.Text.StringBuilder.Length
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.MaxCapacity
  parent: System.Text.StringBuilder
  isExternal: false
  name: MaxCapacity
  nameWithType: StringBuilder.MaxCapacity
  fullName: System.Text.StringBuilder.MaxCapacity
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Remove(Int32,Int32)
  nameWithType: StringBuilder.Remove(Int32,Int32)
  fullName: System.Text.StringBuilder.Remove(Int32,Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Replace(System.Char,System.Char)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Replace(Char,Char)
  nameWithType: StringBuilder.Replace(Char,Char)
  fullName: System.Text.StringBuilder.Replace(Char,Char)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Text.StringBuilder.Replace(System.String,System.String)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Replace(String,String)
  nameWithType: StringBuilder.Replace(String,String)
  fullName: System.Text.StringBuilder.Replace(String,String)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Replace(Char,Char,Int32,Int32)
  nameWithType: StringBuilder.Replace(Char,Char,Int32,Int32)
  fullName: System.Text.StringBuilder.Replace(Char,Char,Int32,Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: Replace(String,String,Int32,Int32)
  nameWithType: StringBuilder.Replace(String,String,Int32,Int32)
  fullName: System.Text.StringBuilder.Replace(String,String,Int32,Int32)
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Text.StringBuilder
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: StringBuilder.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Text.StringBuilder.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Text.StringBuilder.ToString
  parent: System.Text.StringBuilder
  isExternal: false
  name: ToString()
  nameWithType: StringBuilder.ToString()
  fullName: System.Text.StringBuilder.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.StringBuilder.ToString(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  isExternal: false
  name: ToString(Int32,Int32)
  nameWithType: StringBuilder.ToString(Int32,Int32)
  fullName: System.Text.StringBuilder.ToString(Int32,Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder.Append*
  parent: System.Text.StringBuilder
  isExternal: false
  nameWithType: StringBuilder.
- uid: System.Text.StringBuilder.AppendFormat*
  parent: System.Text.StringBuilder
  isExternal: false
  nameWithType: StringBuilder.
- uid: System.Text.StringBuilder.AppendLine*
  parent: System.Text.StringBuilder
  isExternal: false
  nameWithType: StringBuilder.
- uid: System.Text.StringBuilder.Insert*
  parent: System.Text.StringBuilder
  isExternal: false
  nameWithType: StringBuilder.
- uid: System.Text.StringBuilder.Replace*
  parent: System.Text.StringBuilder
  isExternal: false
  nameWithType: StringBuilder.
- uid: System.Text.StringBuilder.ToString*
  parent: System.Text.StringBuilder
  isExternal: false
  nameWithType: StringBuilder.
