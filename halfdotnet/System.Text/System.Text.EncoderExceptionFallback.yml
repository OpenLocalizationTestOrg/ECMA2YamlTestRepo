### YamlMime:ManagedReference
items:
- uid: System.Text.EncoderExceptionFallback
  id: EncoderExceptionFallback
  children:
  - System.Text.EncoderExceptionFallback.#ctor
  - System.Text.EncoderExceptionFallback.CreateFallbackBuffer
  - System.Text.EncoderExceptionFallback.Equals(System.Object)
  - System.Text.EncoderExceptionFallback.GetHashCode
  - System.Text.EncoderExceptionFallback.MaxCharCount
  langs:
  - csharp
  name: EncoderExceptionFallback
  nameWithType: EncoderExceptionFallback
  fullName: System.Text.EncoderExceptionFallback
  type: Class
  summary: Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback throws an exception if an input character cannot be converted to an output byte sequence. This class cannot be inherited.
  remarks: "## Remarks  \n An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link. Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <xref:System.Text.Encoding> class. Specifically, the encoding type's `GetBytes` method encodes a character to a byte sequence, and the `GetChars` method decodes a byte sequence to a character.  \n  \n An encoding operation can fail if the input character cannot be represented by the encoding. For example, a <xref:System.Text.ASCIIEncoding> object cannot encode a character that yields a Unicode code point value that is outside the range U+0000 to U+007F.  \n  \n In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback. Your application can use the predefined .NET Framework encoder fallback, or it can create a custom encoder fallback derived from the <xref:System.Text.EncoderFallback> and <xref:System.Text.EncoderFallbackBuffer> classes.  \n  \n The .NET Framework provides two predefined classes that implement different fallback strategies for handling encoding conversion failures. The <xref:System.Text.EncoderReplacementFallback> class substitutes a string provided for any input character that cannot be converted. The substitute string is encoded in place of the invalid character, and then the encoding operation continues converting the remainder of the input. In contrast, the EncoderExceptionFallback class throws a <xref:System.Text.EncoderFallbackException> when an invalid character is encountered."
  example:
  - "## Examples  \n The following code example demonstrates the EncoderExceptionFallback and <xref:System.Text.EncoderFallbackException> classes.  \n  \n [!CODE [sys.txt.fallbackEncExc#1](../CodeSnippet/VS_Snippets_CLR/sys.txt.fallbackEncExc#1)]"
  syntax:
    content: 'public sealed class EncoderExceptionFallback : System.Text.EncoderFallback'
  inheritance:
  - System.Object
  - System.Text.EncoderFallback
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Text.EncoderFallback.ExceptionFallback
  - System.Text.EncoderFallback.ReplacementFallback
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.EncoderExceptionFallback.#ctor
  id: '#ctor'
  parent: System.Text.EncoderExceptionFallback
  langs:
  - csharp
  name: EncoderExceptionFallback()
  nameWithType: EncoderExceptionFallback.EncoderExceptionFallback()
  fullName: System.Text.EncoderExceptionFallback.EncoderExceptionFallback()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.EncoderExceptionFallback"> class.
  remarks: To be added.
  syntax:
    content: public EncoderExceptionFallback ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.EncoderExceptionFallback.CreateFallbackBuffer
  id: CreateFallbackBuffer
  parent: System.Text.EncoderExceptionFallback
  langs:
  - csharp
  name: CreateFallbackBuffer()
  nameWithType: EncoderExceptionFallback.CreateFallbackBuffer()
  fullName: System.Text.EncoderExceptionFallback.CreateFallbackBuffer()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Returns an encoder fallback buffer that throws an exception if it cannot convert a character sequence to a byte sequence.
  remarks: "  \n  \n## Remarks  \n An encoder fallback buffer is responsible for receiving and handling characters that an encoder cannot convert to a byte sequence. This method returns an instance of the <xref:System.Text.EncoderExceptionFallbackBuffer> class, which is a subclass of  the <xref:System.Text.EncoderFallbackBuffer> class. An <xref:System.Text.EncoderExceptionFallbackBuffer> object throws an <xref:System.Text.EncoderFallbackException> exception whenever characters are passed to its <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=fullName> method.  \n  \n "
  syntax:
    content: public override System.Text.EncoderFallbackBuffer CreateFallbackBuffer ();
    parameters: []
    return:
      type: System.Text.EncoderFallbackBuffer
      description: An encoder fallback buffer that throws an exception when it cannot encode a character sequence.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.EncoderExceptionFallback.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.EncoderExceptionFallback
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: EncoderExceptionFallback.Equals(Object)
  fullName: System.Text.EncoderExceptionFallback.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Indicates whether the current <see cref="T:System.Text.EncoderExceptionFallback"> object and a specified object are equal.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that derives from the <see cref="T:System.Text.EncoderExceptionFallback"> class.
    return:
      type: System.Boolean
      description: '`true` if  is not `null` (`Nothing` in Visual Basic .NET) and is a <see cref="T:System.Text.EncoderExceptionFallback"> object; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.EncoderExceptionFallback.GetHashCode
  id: GetHashCode
  parent: System.Text.EncoderExceptionFallback
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: EncoderExceptionFallback.GetHashCode()
  fullName: System.Text.EncoderExceptionFallback.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Retrieves the hash code for this instance.
  remarks: "  \n  \n## Remarks  \n Because the GetHashCode method always returns the same value, the application should not use this value to distinguish one instance of the <xref:System.Text.EncoderExceptionFallback> class from another.  \n  \n "
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: The return value is always the same arbitrary value, and has no special significance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.EncoderExceptionFallback.MaxCharCount
  id: MaxCharCount
  parent: System.Text.EncoderExceptionFallback
  langs:
  - csharp
  name: MaxCharCount
  nameWithType: EncoderExceptionFallback.MaxCharCount
  fullName: System.Text.EncoderExceptionFallback.MaxCharCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Gets the maximum number of characters this instance can return.
  remarks: To be added.
  syntax:
    content: public override int MaxCharCount { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Text.EncoderFallback
  isExternal: false
  name: System.Text.EncoderFallback
- uid: System.Text.EncoderExceptionFallback.#ctor
  parent: System.Text.EncoderExceptionFallback
  isExternal: false
  name: EncoderExceptionFallback()
  nameWithType: EncoderExceptionFallback.EncoderExceptionFallback()
  fullName: System.Text.EncoderExceptionFallback.EncoderExceptionFallback()
- uid: System.Text.EncoderExceptionFallback.CreateFallbackBuffer
  parent: System.Text.EncoderExceptionFallback
  isExternal: false
  name: CreateFallbackBuffer()
  nameWithType: EncoderExceptionFallback.CreateFallbackBuffer()
  fullName: System.Text.EncoderExceptionFallback.CreateFallbackBuffer()
- uid: System.Text.EncoderFallbackBuffer
  parent: System.Text
  isExternal: false
  name: EncoderFallbackBuffer
  nameWithType: EncoderFallbackBuffer
  fullName: System.Text.EncoderFallbackBuffer
- uid: System.Text.EncoderExceptionFallback.Equals(System.Object)
  parent: System.Text.EncoderExceptionFallback
  isExternal: false
  name: Equals(Object)
  nameWithType: EncoderExceptionFallback.Equals(Object)
  fullName: System.Text.EncoderExceptionFallback.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.EncoderExceptionFallback.GetHashCode
  parent: System.Text.EncoderExceptionFallback
  isExternal: false
  name: GetHashCode()
  nameWithType: EncoderExceptionFallback.GetHashCode()
  fullName: System.Text.EncoderExceptionFallback.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.EncoderExceptionFallback.MaxCharCount
  parent: System.Text.EncoderExceptionFallback
  isExternal: false
  name: MaxCharCount
  nameWithType: EncoderExceptionFallback.MaxCharCount
  fullName: System.Text.EncoderExceptionFallback.MaxCharCount
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
