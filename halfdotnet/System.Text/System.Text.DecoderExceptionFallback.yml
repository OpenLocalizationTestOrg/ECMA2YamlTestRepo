### YamlMime:ManagedReference
items:
- uid: System.Text.DecoderExceptionFallback
  id: DecoderExceptionFallback
  children:
  - System.Text.DecoderExceptionFallback.#ctor
  - System.Text.DecoderExceptionFallback.CreateFallbackBuffer
  - System.Text.DecoderExceptionFallback.Equals(System.Object)
  - System.Text.DecoderExceptionFallback.GetHashCode
  - System.Text.DecoderExceptionFallback.MaxCharCount
  langs:
  - csharp
  name: DecoderExceptionFallback
  nameWithType: DecoderExceptionFallback
  fullName: System.Text.DecoderExceptionFallback
  type: Class
  summary: Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an input character. The fallback throws an exception instead of decoding the input byte sequence. This class cannot be inherited.
  remarks: "An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link. Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <xref:System.Text.Encoding> class. Specifically, the encoding type's `GetBytes` method encodes a character to a byte sequence, and the `GetChars` method decodes a byte sequence to a character.  \n  \n A decoding operation can fail if the input byte sequence cannot be mapped by the encoding. For example, an <xref:System.Text.ASCIIEncoding> object cannot decode a byte sequence that yields a character having a code point value that is outside the range U+0000 to U+007F.  \n  \n In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback. Your application can use the predefined .NET Framework decoder fallback, or it can create a custom decoder fallback derived from the <xref:System.Text.DecoderFallback> and <xref:System.Text.DecoderFallbackBuffer> classes.  \n  \n The .NET Framework provides two predefined classes that implement different fallback strategies for handling decoding conversion failures. The <xref:System.Text.DecoderReplacementFallback> class substitutes a string provided in place of any input byte sequence that cannot be converted. After the substitute string is emitted, the decoding operation continues converting the remainder of the input. In contrast, the DecoderExceptionFallback class throws a <xref:System.Text.DecoderFallbackException> when an invalid byte sequence is encountered."
  example:
  - "The following code example demonstrates the DecoderExceptionFallback and <xref:System.Text.DecoderFallbackException> classes.  \n  \n [!CODE [sys.txt.fallbackDecExc#1](../CodeSnippet/VS_Snippets_CLR/sys.txt.fallbackDecExc#1)]"
  syntax:
    content: 'public sealed class DecoderExceptionFallback : System.Text.DecoderFallback'
  inheritance:
  - System.Object
  - System.Text.DecoderFallback
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Text.DecoderFallback.ExceptionFallback
  - System.Text.DecoderFallback.ReplacementFallback
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.DecoderExceptionFallback.#ctor
  id: '#ctor'
  parent: System.Text.DecoderExceptionFallback
  langs:
  - csharp
  name: DecoderExceptionFallback()
  nameWithType: DecoderExceptionFallback.DecoderExceptionFallback()
  fullName: System.Text.DecoderExceptionFallback.DecoderExceptionFallback()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.DecoderExceptionFallback"> class.
  remarks: To be added.
  syntax:
    content: public DecoderExceptionFallback ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.DecoderExceptionFallback.CreateFallbackBuffer
  id: CreateFallbackBuffer
  parent: System.Text.DecoderExceptionFallback
  langs:
  - csharp
  name: CreateFallbackBuffer()
  nameWithType: DecoderExceptionFallback.CreateFallbackBuffer()
  fullName: System.Text.DecoderExceptionFallback.CreateFallbackBuffer()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Returns a decoder fallback buffer that throws an exception if it cannot convert a sequence of bytes to a character.
  remarks: A decoder fallback buffer is responsible for receiving and handling byte sequences that a decoder cannot convert to characters. This method returns an instance of the <xref:System.Text.DecoderExceptionFallbackBuffer> class, which is a subclass of  the <xref:System.Text.DecoderFallbackBuffer> class. A <xref:System.Text.DecoderExceptionFallbackBuffer> object throws an <xref:System.Text.DecoderFallbackException> exception whenever a sequence of bytes is passed to its <xref:System.Text.DecoderExceptionFallbackBuffer.Fallback%2A> method.
  syntax:
    content: public override System.Text.DecoderFallbackBuffer CreateFallbackBuffer ();
    parameters: []
    return:
      type: System.Text.DecoderFallbackBuffer
      description: A decoder fallback buffer that throws an exception when it cannot decode a byte sequence.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.DecoderExceptionFallback.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.DecoderExceptionFallback
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: DecoderExceptionFallback.Equals(Object)
  fullName: System.Text.DecoderExceptionFallback.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Indicates whether the current <see cref="T:System.Text.DecoderExceptionFallback"> object and a specified object are equal.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object that derives from the <see cref="T:System.Text.DecoderExceptionFallback"> class.
    return:
      type: System.Boolean
      description: '`true` if  is not `null` and is a <see cref="T:System.Text.DecoderExceptionFallback"> object; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.DecoderExceptionFallback.GetHashCode
  id: GetHashCode
  parent: System.Text.DecoderExceptionFallback
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DecoderExceptionFallback.GetHashCode()
  fullName: System.Text.DecoderExceptionFallback.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Retrieves the hash code for this instance.
  remarks: Because the GetHashCode method always returns the same value, the application should not use this value to distinguish one <xref:System.Text.DecoderExceptionFallback> object from another.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: The return value is always the same arbitrary value, and has no special significance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.DecoderExceptionFallback.MaxCharCount
  id: MaxCharCount
  parent: System.Text.DecoderExceptionFallback
  langs:
  - csharp
  name: MaxCharCount
  nameWithType: DecoderExceptionFallback.MaxCharCount
  fullName: System.Text.DecoderExceptionFallback.MaxCharCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Gets the maximum number of characters this instance can return.
  remarks: To be added.
  syntax:
    content: public override int MaxCharCount { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Text.DecoderFallback
  isExternal: false
  name: System.Text.DecoderFallback
- uid: System.Text.DecoderExceptionFallback.#ctor
  parent: System.Text.DecoderExceptionFallback
  isExternal: false
  name: DecoderExceptionFallback()
  nameWithType: DecoderExceptionFallback.DecoderExceptionFallback()
  fullName: System.Text.DecoderExceptionFallback.DecoderExceptionFallback()
- uid: System.Text.DecoderExceptionFallback.CreateFallbackBuffer
  parent: System.Text.DecoderExceptionFallback
  isExternal: false
  name: CreateFallbackBuffer()
  nameWithType: DecoderExceptionFallback.CreateFallbackBuffer()
  fullName: System.Text.DecoderExceptionFallback.CreateFallbackBuffer()
- uid: System.Text.DecoderFallbackBuffer
  parent: System.Text
  isExternal: false
  name: DecoderFallbackBuffer
  nameWithType: DecoderFallbackBuffer
  fullName: System.Text.DecoderFallbackBuffer
- uid: System.Text.DecoderExceptionFallback.Equals(System.Object)
  parent: System.Text.DecoderExceptionFallback
  isExternal: false
  name: Equals(Object)
  nameWithType: DecoderExceptionFallback.Equals(Object)
  fullName: System.Text.DecoderExceptionFallback.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.DecoderExceptionFallback.GetHashCode
  parent: System.Text.DecoderExceptionFallback
  isExternal: false
  name: GetHashCode()
  nameWithType: DecoderExceptionFallback.GetHashCode()
  fullName: System.Text.DecoderExceptionFallback.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.DecoderExceptionFallback.MaxCharCount
  parent: System.Text.DecoderExceptionFallback
  isExternal: false
  name: MaxCharCount
  nameWithType: DecoderExceptionFallback.MaxCharCount
  fullName: System.Text.DecoderExceptionFallback.MaxCharCount
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
