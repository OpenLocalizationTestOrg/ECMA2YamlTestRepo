### YamlMime:ManagedReference
items:
- uid: System.Text.UTF7Encoding
  id: UTF7Encoding
  children:
  - System.Text.UTF7Encoding.#ctor
  - System.Text.UTF7Encoding.#ctor(System.Boolean)
  - System.Text.UTF7Encoding.Equals(System.Object)
  - System.Text.UTF7Encoding.GetByteCount(System.String)
  - System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
  - System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  - System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
  - System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.UTF7Encoding.GetDecoder
  - System.Text.UTF7Encoding.GetEncoder
  - System.Text.UTF7Encoding.GetHashCode
  - System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  - System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  - System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: UTF7Encoding
  nameWithType: UTF7Encoding
  fullName: System.Text.UTF7Encoding
  type: Class
  summary: Represents a UTF-7 encoding of Unicode characters.
  remarks: "Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  \n  \n The UTF-7 encoding represents Unicode characters as sequences of 7-bit ASCII characters. This encoding supports certain protocols for which it is required, most often e-mail or newsgroup protocols. Since UTF-7 is not particularly secure or robust, and most modern systems allow 8-bit encodings, UTF-8 should normally be preferred to UTF-7.  \n  \n> [!NOTE]\n>  UTF7Encoding does not provide error detection. For security reasons, the application should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.  \n  \n For more information about the UTFs and other encodings supported by <xref:System.Text>, see [Character Encoding in the .NET Framework](../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md).  \n  \n The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF7Encoding.GetBytes%2A> method performs the actual encoding.  \n  \n Likewise, the <xref:System.Text.UTF7Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF7Encoding.GetChars%2A> and <xref:System.Text.UTF7Encoding.GetString%2A> methods perform the actual decoding.  \n  \n UTF7Encoding corresponds to the Windows code page 65000.  \n  \n> [!NOTE]\n>  The state of a UTF-7 encoded object is not preserved if the object is serialized and deserialized using different .NET Framework versions."
  example:
  - "The following code example demonstrates how to use a UTF7Encoding to encode a string of Unicode characters and store them in a byte array. Notice that when the byte array is decoded back to a string, no data is lost.  \n  \n [!CODE [System.Text.UTF7Encoding Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding Example#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class UTF7Encoding : System.Text.Encoding
  inheritance:
  - System.Object
  - System.Text.Encoding
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Text.Encoding.ASCII
  - System.Text.Encoding.BigEndianUnicode
  - System.Text.Encoding.BodyName
  - System.Text.Encoding.Clone
  - System.Text.Encoding.CodePage
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.DecoderFallback
  - System.Text.Encoding.Default
  - System.Text.Encoding.EncoderFallback
  - System.Text.Encoding.EncodingName
  - System.Text.Encoding.GetByteCount(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.String)
  - System.Text.Encoding.GetCharCount(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncoding(System.String)
  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncodings
  - System.Text.Encoding.GetPreamble
  - System.Text.Encoding.GetString(System.Byte*,System.Int32)
  - System.Text.Encoding.GetString(System.Byte[])
  - System.Text.Encoding.HeaderName
  - System.Text.Encoding.IsAlwaysNormalized
  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  - System.Text.Encoding.IsBrowserDisplay
  - System.Text.Encoding.IsBrowserSave
  - System.Text.Encoding.IsMailNewsDisplay
  - System.Text.Encoding.IsMailNewsSave
  - System.Text.Encoding.IsReadOnly
  - System.Text.Encoding.IsSingleByte
  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  - System.Text.Encoding.Unicode
  - System.Text.Encoding.UTF32
  - System.Text.Encoding.UTF7
  - System.Text.Encoding.UTF8
  - System.Text.Encoding.WebName
  - System.Text.Encoding.WindowsCodePage
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.#ctor
  id: '#ctor'
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: UTF7Encoding()
  nameWithType: UTF7Encoding.UTF7Encoding()
  fullName: System.Text.UTF7Encoding.UTF7Encoding()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding"> class.
  remarks: "This constructor creates an instance that does not allow optional characters. Calling the UTF7Encoding constructor is equivalent to calling the <xref:System.Text.UTF7Encoding.%23ctor%28System.Boolean%29?displayProperty=fullName> constructor that takes an  parameter and specifying `false` for that parameter.  \n  \n If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance and display the name of the encoding.  \n  \n [!CODE [System.Text.UTF7Encoding.ctor1 Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor1 Example#1)]"
  syntax:
    content: public UTF7Encoding ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: UTF7Encoding(Boolean)
  nameWithType: UTF7Encoding.UTF7Encoding(Boolean)
  fullName: System.Text.UTF7Encoding.UTF7Encoding(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.UTF7Encoding"> class. A parameter specifies whether to allow optional characters.
  remarks: "If an instance allows optional characters, Unicode code points are encoded with a corresponding optional character instead of a modified base 64 character. The optional characters are exclamation point (\"!\"), backward slash (\"\\\\\"), vertical line (\"&#124;\"), double quote (\"\"\"), number sign (\"#\"), dollar sign (\"$\"), percent sign (\"%\"), ampersand (\"&\"), asterisk (\"*\"), semicolon (\";\"), left angle bracket (\"\\<\"), right angle bracket (\">\"), left curly bracket (\"{\"), right curly bracket (\"}\"), left square bracket (\"[\"), right square bracket (\"]\"), equal sign (\"=\"), at sign (\"@\"), circumflex accent (\"^\"), underscore (\"_\"), and grave accent (\"`\").  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example demonstrates how to create a new <xref:System.Text.UTF7Encoding> instance that allows optional characters.  \n  \n [!CODE [System.Text.UTF7Encoding.ctor2 Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.ctor2 Example#1)]"
  syntax:
    content: public UTF7Encoding (bool allowOptionals);
    parameters:
    - id: allowOptionals
      type: System.Boolean
      description: '`true` to specify that optional characters are allowed; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: UTF7Encoding.Equals(Object)
  fullName: System.Text.UTF7Encoding.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Gets a value indicating whether the specified object is equal to the current <see cref="T:System.Text.UTF7Encoding"> object.
  remarks: Two <xref:System.Text.UTF7Encoding> objects are equal if they both either allow or disallow optional characters, and if their underlying <xref:System.Text.Encoding.EncoderFallback%2A> and <xref:System.Text.Encoding.DecoderFallback%2A> properties are equal.
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object to compare to the current <see cref="T:System.Text.UTF7Encoding"> object.
    return:
      type: System.Boolean
      description: '`true` if  is a <see cref="T:System.Text.UTF7Encoding"> object and is equal to the current <see cref="T:System.Text.UTF7Encoding"> object; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetByteCount(String)
  nameWithType: UTF7Encoding.GetByteCount(String)
  fullName: System.Text.UTF7Encoding.GetByteCount(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding the characters in the specified <xref:System.String> object.
  remarks: To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetByteCount%2A> method to return the number of bytes required to encode a character array.  \n  \n [!CODE [System.Text.UTF7Encoding.GetByteCount Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example#1)]"
  syntax:
    content: public override int GetByteCount (string s);
    parameters:
    - id: s
      type: System.String
      description: The <xref:System.String> object containing the set of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.UTF7Encoding.GetByteCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
  id: GetByteCount(System.Char*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetByteCount(Char*,Int32)
  nameWithType: UTF7Encoding.GetByteCount(Char*,Int32)
  fullName: System.Text.UTF7Encoding.GetByteCount(Char*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.
  remarks: To calculate the exact array size that <xref:System.Text.UTF7Encoding.GetBytes%2A> requires to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.
  syntax:
    content: public override int GetByteCount (char* chars, int count);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.UTF7Encoding.GetByteCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetByteCount(Char[],Int32,Int32)
  nameWithType: UTF7Encoding.GetByteCount(Char[],Int32,Int32)
  fullName: System.Text.UTF7Encoding.GetByteCount(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding a set of characters from the specified character array.
  remarks: To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses GetByteCount. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The GetByteCount method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.
  example:
  - "The following code example demonstrates how to use the GetByteCount method to return the number of bytes required to encode an array of Unicode characters.  \n  \n [!CODE [System.Text.UTF7Encoding.GetByteCount Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetByteCount Example#1)]"
  syntax:
    content: public override int GetByteCount (char[] chars, int index, int count);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: index
      type: System.Int32
      description: The index of the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.UTF7Encoding.GetByteCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetBytes(Char*,Int32,Byte*,Int32)
  nameWithType: UTF7Encoding.GetBytes(Char*,Int32,Byte*,Int32)
  fullName: System.Text.UTF7Encoding.GetBytes(Char*,Int32,Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  syntax:
    content: public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte*
      description: A pointer to the location at which to start writing the resulting sequence of bytes.
    - id: byteCount
      type: System.Int32
      description: The maximum number of bytes to write.
    return:
      type: System.Int32
      description: The actual number of bytes written at the location indicated by .
  overload: System.Text.UTF7Encoding.GetBytes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetBytes(Char[],Int32,Int32,Byte[],Int32)
  nameWithType: UTF7Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)
  fullName: System.Text.UTF7Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Encodes a set of characters from the specified character array into the specified byte array.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example demonstrates how to use the <xref:System.Text.UTF7Encoding.GetBytes%2A> method to encode a range of characters from a <xref:System.String> and store the encoded bytes in a range of elements in a byte array.  \n  \n [!CODE [System.Text.UTF7Encoding.GetBytes Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example#1)]"
  syntax:
    content: public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into .
  overload: System.Text.UTF7Encoding.GetBytes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetBytes(String,Int32,Int32,Byte[],Int32)
  nameWithType: UTF7Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)
  fullName: System.Text.UTF7Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Encodes a set of characters from the specified <xref:System.String> into the specified byte array.
  remarks: "To calculate the exact array size required by GetBytes to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. Invalid characters are encoded as a modified base 64 character. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example demonstrates how to use the GetBytes method to encode a range of elements from a Unicode character array, and store the encoded bytes in a range of elements in a byte array.  \n  \n [!CODE [System.Text.UTF7Encoding.GetBytes Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetBytes Example#1)]"
  syntax:
    content: public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
    parameters:
    - id: s
      type: System.String
      description: The <xref:System.String> containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into .
  overload: System.Text.UTF7Encoding.GetBytes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
  id: GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetCharCount(Byte*,Int32)
  nameWithType: UTF7Encoding.GetCharCount(Byte*,Int32)
  fullName: System.Text.UTF7Encoding.GetCharCount(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.
  remarks: To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.
  syntax:
    content: public override int GetCharCount (byte* bytes, int count);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.UTF7Encoding.GetCharCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetCharCount(Byte[],Int32,Int32)
  nameWithType: UTF7Encoding.GetCharCount(Byte[],Int32,Int32)
  fullName: System.Text.UTF7Encoding.GetCharCount(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
  remarks: To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use GetCharCount. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The GetCharCount method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.
  example:
  - "The following code example demonstrates how to use the GetCharCount method to return the number of characters produced by decoding a range of elements in a byte array.  \n  \n [!CODE [System.Text.UnicodeEncoding.GetCharCount Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UnicodeEncoding.GetCharCount Example#1)]"
  syntax:
    content: public override int GetCharCount (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.UTF7Encoding.GetCharCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetChars(Byte*,Int32,Char*,Int32)
  nameWithType: UTF7Encoding.GetChars(Byte*,Int32,Char*,Int32)
  fullName: System.Text.UTF7Encoding.GetChars(Byte*,Int32,Char*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the  array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  syntax:
    content: public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char*
      description: A pointer to the location at which to start writing the resulting set of characters.
    - id: charCount
      type: System.Int32
      description: The maximum number of characters to write.
    return:
      type: System.Int32
      description: The actual number of characters written at the location indicated by .
  overload: System.Text.UTF7Encoding.GetChars*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetChars(Byte[],Int32,Int32,Char[],Int32)
  nameWithType: UTF7Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)
  fullName: System.Text.UTF7Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Decodes a sequence of bytes from the specified byte array into the specified character array.
  remarks: "To calculate the exact array size required by GetChars to store the resulting characters, use <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the  array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example demonstrates how to use the GetChars method to decode a range of elements in a byte array and store the result in a character array.  \n  \n [!CODE [System.Text.UTF7Encoding.GetChars Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetChars Example#1)]"
  syntax:
    content: public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: byteIndex
      type: System.Int32
      description: The index of the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char[]
      description: The character array to contain the resulting set of characters.
    - id: charIndex
      type: System.Int32
      description: The index at which to start writing the resulting set of characters.
    return:
      type: System.Int32
      description: The actual number of characters written into .
  overload: System.Text.UTF7Encoding.GetChars*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetDecoder
  id: GetDecoder
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetDecoder()
  nameWithType: UTF7Encoding.GetDecoder()
  fullName: System.Text.UTF7Encoding.GetDecoder()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Obtains a decoder that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.
  remarks: The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, GetDecoder and <xref:System.Text.UTF7Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.
  example:
  - "The following code example demonstrates how to use the GetDecoder method to obtain a decoder to convert the UTF-7 encoded bytes into a sequence of characters.  \n  \n [!CODE [System.Text.UTF7Encoding.GetDecoder Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetDecoder Example#1)]"
  syntax:
    content: public override System.Text.Decoder GetDecoder ();
    parameters: []
    return:
      type: System.Text.Decoder
      description: A <see cref="T:System.Text.Decoder"> that converts a UTF-7 encoded sequence of bytes into a sequence of Unicode characters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetEncoder
  id: GetEncoder
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetEncoder()
  nameWithType: UTF7Encoding.GetEncoder()
  fullName: System.Text.UTF7Encoding.GetEncoder()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Obtains an encoder that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.
  remarks: The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF7Encoding.GetChars%2A> method. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF7Encoding.GetDecoder%2A> and GetEncoder are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.
  example:
  - "The following code example demonstrates how to use the GetEncoder method to obtain an encoder to convert a sequence of characters into a UTF-7 encoded sequence of bytes.  \n  \n [!CODE [System.Text.UTF7Encoding.GetEncoder Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetEncoder Example#1)]"
  syntax:
    content: public override System.Text.Encoder GetEncoder ();
    parameters: []
    return:
      type: System.Text.Encoder
      description: A <see cref="T:System.Text.Encoder"> that converts a sequence of Unicode characters into a UTF-7 encoded sequence of bytes.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetHashCode
  id: GetHashCode
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: UTF7Encoding.GetHashCode()
  fullName: System.Text.UTF7Encoding.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Returns the hash code for the current <see cref="T:System.Text.UTF7Encoding"> object.
  remarks: The value returned by the GetHashCode method is not suitable for distinguishing one <xref:System.Text.UTF7Encoding> object from another. If your application needs a unique hash code, it should override the GetHashCode method.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetMaxByteCount(Int32)
  nameWithType: UTF7Encoding.GetMaxByteCount(Int32)
  fullName: System.Text.UTF7Encoding.GetMaxByteCount(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the maximum number of bytes produced by encoding the specified number of characters.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.UTF7Encoding.GetByteCount%2A>. To calculate the maximum array size, the application should use GetMaxByteCount. The <xref:System.Text.UTF7Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the GetMaxByteCount method generally executes faster.  \n  \n GetMaxByteCount is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, GetMaxByteCount can return large values.  \n  \n In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>. While UTF-7 is very efficient at encoding ASCII data, one byte per character, it is extremely inefficient for other data. As remarked above, GetMaxByteCount deals with a worst case. If the data to be encoded is largely ASCII, and especially if the ASCII characters cluster together, UTF-7 is significantly more efficient than the number returned by this method suggests.  \n  \n GetMaxByteCount has no relation to <xref:System.Text.UTF7Encoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetChars%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxCharCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`."
  example:
  - "The following code example demonstrates how to use the GetMaxByteCount method to return the maximum number of bytes required to encode a specified number of characters.  \n  \n [!CODE [System.Text.UTF7Encoding.GetMaxByteCount Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxByteCount Example#1)]"
  syntax:
    content: public override int GetMaxByteCount (int charCount);
    parameters:
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The maximum number of bytes produced by encoding the specified number of characters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetMaxCharCount(Int32)
  nameWithType: UTF7Encoding.GetMaxCharCount(Int32)
  fullName: System.Text.UTF7Encoding.GetMaxCharCount(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the maximum number of characters produced by decoding the specified number of bytes.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF7Encoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.UTF7Encoding.GetCharCount%2A>. To calculate the maximum array size, the application should use GetMaxCharCount. The <xref:System.Text.UTF7Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the GetMaxCharCount method generally executes faster.  \n  \n GetMaxCharCount is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, GetMaxCharCount can return large values.  \n  \n In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach using <xref:System.Text.UTF7Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName>.  \n  \n GetMaxCharCount has no relation to <xref:System.Text.UTF7Encoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.UTF7Encoding.GetBytes%2A>, it should use <xref:System.Text.UTF7Encoding.GetMaxByteCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`."
  example:
  - "The following code example demonstrates how to use the GetMaxCharCount method to return the maximum number of characters produced by decoding a specified number of bytes.  \n  \n [!CODE [System.Text.UTF7Encoding.GetMaxCharCount Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.GetMaxCharCount Example#1)]"
  syntax:
    content: public override int GetMaxCharCount (int byteCount);
    parameters:
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The maximum number of characters produced by decoding the specified number of bytes.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  langs:
  - csharp
  name: GetString(Byte[],Int32,Int32)
  nameWithType: UTF7Encoding.GetString(Byte[],Int32,Int32)
  fullName: System.Text.UTF7Encoding.GetString(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Decodes a range of bytes from a byte array into a string.
  remarks: "Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF7Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF7Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  <xref:System.Text.UTF7Encoding> does not provide error detection. When invalid bytes are encountered, <xref:System.Text.UTF7Encoding> generally emits the invalid bytes. If a byte is larger than hexadecimal 0x7F, the byte value is zero-extended into a Unicode character, the result is stored in the  array, and any shift sequence is terminated. For example, if the byte to encode is hexadecimal 0x81, the resulting character is U+0081. For security reasons, your applications are recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "The following code example encodes a string into an array of bytes, and then decodes the bytes back into a string.  \n  \n [!CODE [System.Text.UTF7Encoding.getstring#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.UTF7Encoding.getstring#1)]"
  syntax:
    content: public override string GetString (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.String
      description: A <xref:System.String> containing the results of decoding the specified sequence of bytes.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Text.Encoding
  isExternal: false
  name: System.Text.Encoding
- uid: System.Text.UTF7Encoding.#ctor
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: UTF7Encoding()
  nameWithType: UTF7Encoding.UTF7Encoding()
  fullName: System.Text.UTF7Encoding.UTF7Encoding()
- uid: System.Text.UTF7Encoding.#ctor(System.Boolean)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: UTF7Encoding(Boolean)
  nameWithType: UTF7Encoding.UTF7Encoding(Boolean)
  fullName: System.Text.UTF7Encoding.UTF7Encoding(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.UTF7Encoding.Equals(System.Object)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: Equals(Object)
  nameWithType: UTF7Encoding.Equals(Object)
  fullName: System.Text.UTF7Encoding.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.UTF7Encoding.GetByteCount(System.String)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetByteCount(String)
  nameWithType: UTF7Encoding.GetByteCount(String)
  fullName: System.Text.UTF7Encoding.GetByteCount(String)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.UTF7Encoding.GetByteCount(System.Char*,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetByteCount(Char*,Int32)
  nameWithType: UTF7Encoding.GetByteCount(Char*,Int32)
  fullName: System.Text.UTF7Encoding.GetByteCount(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetByteCount(Char[],Int32,Int32)
  nameWithType: UTF7Encoding.GetByteCount(Char[],Int32,Int32)
  fullName: System.Text.UTF7Encoding.GetByteCount(Char[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetBytes(Char*,Int32,Byte*,Int32)
  nameWithType: UTF7Encoding.GetBytes(Char*,Int32,Byte*,Int32)
  fullName: System.Text.UTF7Encoding.GetBytes(Char*,Int32,Byte*,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetBytes(Char[],Int32,Int32,Byte[],Int32)
  nameWithType: UTF7Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)
  fullName: System.Text.UTF7Encoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetBytes(String,Int32,Int32,Byte[],Int32)
  nameWithType: UTF7Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)
  fullName: System.Text.UTF7Encoding.GetBytes(String,Int32,Int32,Byte[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetCharCount(Byte*,Int32)
  nameWithType: UTF7Encoding.GetCharCount(Byte*,Int32)
  fullName: System.Text.UTF7Encoding.GetCharCount(Byte*,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetCharCount(Byte[],Int32,Int32)
  nameWithType: UTF7Encoding.GetCharCount(Byte[],Int32,Int32)
  fullName: System.Text.UTF7Encoding.GetCharCount(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetChars(Byte*,Int32,Char*,Int32)
  nameWithType: UTF7Encoding.GetChars(Byte*,Int32,Char*,Int32)
  fullName: System.Text.UTF7Encoding.GetChars(Byte*,Int32,Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetChars(Byte[],Int32,Int32,Char[],Int32)
  nameWithType: UTF7Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)
  fullName: System.Text.UTF7Encoding.GetChars(Byte[],Int32,Int32,Char[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetDecoder
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetDecoder()
  nameWithType: UTF7Encoding.GetDecoder()
  fullName: System.Text.UTF7Encoding.GetDecoder()
- uid: System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  nameWithType: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.UTF7Encoding.GetEncoder
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetEncoder()
  nameWithType: UTF7Encoding.GetEncoder()
  fullName: System.Text.UTF7Encoding.GetEncoder()
- uid: System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  nameWithType: Encoder
  fullName: System.Text.Encoder
- uid: System.Text.UTF7Encoding.GetHashCode
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetHashCode()
  nameWithType: UTF7Encoding.GetHashCode()
  fullName: System.Text.UTF7Encoding.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetMaxByteCount(System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetMaxByteCount(Int32)
  nameWithType: UTF7Encoding.GetMaxByteCount(Int32)
  fullName: System.Text.UTF7Encoding.GetMaxByteCount(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetMaxCharCount(System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetMaxCharCount(Int32)
  nameWithType: UTF7Encoding.GetMaxCharCount(Int32)
  fullName: System.Text.UTF7Encoding.GetMaxCharCount(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF7Encoding
  isExternal: false
  name: GetString(Byte[],Int32,Int32)
  nameWithType: UTF7Encoding.GetString(Byte[],Int32,Int32)
  fullName: System.Text.UTF7Encoding.GetString(Byte[],Int32,Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.UTF7Encoding.GetByteCount*
  parent: System.Text.UTF7Encoding
  isExternal: false
  nameWithType: UTF7Encoding.
- uid: System.Text.UTF7Encoding.GetBytes*
  parent: System.Text.UTF7Encoding
  isExternal: false
  nameWithType: UTF7Encoding.
- uid: System.Text.UTF7Encoding.GetCharCount*
  parent: System.Text.UTF7Encoding
  isExternal: false
  nameWithType: UTF7Encoding.
- uid: System.Text.UTF7Encoding.GetChars*
  parent: System.Text.UTF7Encoding
  isExternal: false
  nameWithType: UTF7Encoding.
