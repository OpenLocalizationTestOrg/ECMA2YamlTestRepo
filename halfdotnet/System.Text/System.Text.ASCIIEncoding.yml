### YamlMime:ManagedReference
items:
- uid: System.Text.ASCIIEncoding
  id: ASCIIEncoding
  children:
  - System.Text.ASCIIEncoding.#ctor
  - System.Text.ASCIIEncoding.GetByteCount(System.String)
  - System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)
  - System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  - System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)
  - System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.ASCIIEncoding.GetDecoder
  - System.Text.ASCIIEncoding.GetEncoder
  - System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  - System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  - System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  - System.Text.ASCIIEncoding.IsSingleByte
  langs:
  - csharp
  name: ASCIIEncoding
  nameWithType: ASCIIEncoding
  fullName: System.Text.ASCIIEncoding
  type: Class
  summary: Represents an ASCII character encoding of Unicode characters.
  remarks: "## Remarks  \n Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  \n  \n ASCIIEncoding corresponds to the Windows code page 20127. Because ASCII is a 7-bit encoding, ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F. If you use the default encoder returned by the <xref:System.Text.Encoding.ASCII%2A?displayProperty=fullName> property or the <xref:System.Text.ASCIIEncoding.%23ctor%2A> constructor, characters outside that range are replaced with a question mark (?) before the encoding operation is performed.  Because the ASCIIEncoding class supports only a limited character set, the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> classes are better suited for globalized applications. The following considerations can help you to decide whether to use ASCIIEncoding:  \n  \n-   Some protocols require ASCII or a subset of ASCII. In these cases ASCII encoding is appropriate.  \n  \n-   If an 8-bit encoding is expected, then ASCII probably isn't the correct choice. Instead, consider using UTF8 instead of ASCII. For the characters U+0000 through U+007F, the results are identical, but all Unicode characters are representable in UTF-8, which avoids data loss.  \n  \n> [!CAUTION]\n>  ASCIIEncoding does not provide error detection. For security reasons, you should use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.  \n  \n The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method performs the actual encoding.  \n  \n Likewise, the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.ASCIIEncoding.GetChars%2A> and <xref:System.Text.ASCIIEncoding.GetString%2A> methods perform the actual decoding.  \n  \n Note that the default ASCIIEncoding constructor by itself might not have the appropriate behavior for your application. You might want to consider setting the <xref:System.Text.Encoding.EncoderFallback%2A> or <xref:System.Text.Encoding.DecoderFallback%2A> property to <xref:System.Text.EncoderExceptionFallback> or <xref:System.Text.DecoderExceptionFallback> to prevent sequences with the 8th bit set. Custom behavior might also be appropriate for these cases."
  example:
  - "## Examples  \n The following example demonstrates how to encode Unicode characters into ASCII. Notice the loss of data that occurs when your application uses ASCIIEncoding to encode Unicode characters outside of the ASCII range.  \n  \n [!CODE [System.Text.ASCIIEncoding Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding Example#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ASCIIEncoding : System.Text.Encoding
  inheritance:
  - System.Object
  - System.Text.Encoding
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Text.Encoding.ASCII
  - System.Text.Encoding.BigEndianUnicode
  - System.Text.Encoding.BodyName
  - System.Text.Encoding.Clone
  - System.Text.Encoding.CodePage
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.DecoderFallback
  - System.Text.Encoding.Default
  - System.Text.Encoding.EncoderFallback
  - System.Text.Encoding.EncodingName
  - System.Text.Encoding.Equals(System.Object)
  - System.Text.Encoding.GetByteCount(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.String)
  - System.Text.Encoding.GetCharCount(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncoding(System.String)
  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncodings
  - System.Text.Encoding.GetHashCode
  - System.Text.Encoding.GetPreamble
  - System.Text.Encoding.GetString(System.Byte*,System.Int32)
  - System.Text.Encoding.GetString(System.Byte[])
  - System.Text.Encoding.HeaderName
  - System.Text.Encoding.IsAlwaysNormalized
  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  - System.Text.Encoding.IsBrowserDisplay
  - System.Text.Encoding.IsBrowserSave
  - System.Text.Encoding.IsMailNewsDisplay
  - System.Text.Encoding.IsMailNewsSave
  - System.Text.Encoding.IsReadOnly
  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  - System.Text.Encoding.Unicode
  - System.Text.Encoding.UTF32
  - System.Text.Encoding.UTF7
  - System.Text.Encoding.UTF8
  - System.Text.Encoding.WebName
  - System.Text.Encoding.WindowsCodePage
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.#ctor
  id: '#ctor'
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: ASCIIEncoding()
  nameWithType: ASCIIEncoding.ASCIIEncoding()
  fullName: System.Text.ASCIIEncoding.ASCIIEncoding()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Initializes a new instance of the <see cref="T:System.Text.ASCIIEncoding"> class.
  remarks: "## Remarks  \n  \n> [!CAUTION]\n>  The <xref:System.Text.ASCIIEncoding> class does not provide error detection. For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> class and enable error detection.  \n  \n If you choose to use ASCII encoding, this constructor may not provide the appropriate fallback behavior for your application. It uses the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallback> classes to replace every character outside the range of U+0000 through U+007F with a question mark (?). Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> or <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> method and pass it <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> objects to use exception fallback.  \n  \n> [!NOTE]\n>  <xref:System.Text.ASCIIEncoding> supports only the Unicode character values between U+0000 and U+007F. Therefore, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> are better suited for globalized applications."
  example:
  - "## Examples  \n The following example demonstrates how to create a new <xref:System.Text.ASCIIEncoding> instance and display the name of the encoding.  \n  \n [!CODE [System.Text.ASCIIEncoding.ctor Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.ctor Example#1)]"
  syntax:
    content: public ASCIIEncoding ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetByteCount(String)
  nameWithType: ASCIIEncoding.GetByteCount(String)
  fullName: System.Text.ASCIIEncoding.GetByteCount(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding the characters in the specified <xref:System.String>.
  remarks: "## Remarks  \n To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster."
  example:
  - "## Examples  \n The following example demonstrates how to use the <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method to return the number of bytes required to encode a string using <xref:System.Text.ASCIIEncoding>.  \n  \n [!CODE [System.Text.ASCIIEncoding.GetByteCount2 Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount2 Example#1)]"
  syntax:
    content: public override int GetByteCount (string chars);
    parameters:
    - id: chars
      type: System.String
      description: The <xref:System.String> containing the set of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.ASCIIEncoding.GetByteCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)
  id: GetByteCount(System.Char*,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetByteCount(Char*,Int32)
  nameWithType: ASCIIEncoding.GetByteCount(Char*,Int32)
  fullName: System.Text.ASCIIEncoding.GetByteCount(Char*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.
  remarks: "  \n  \n## Remarks  \n To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n "
  syntax:
    content: public override int GetByteCount (char* chars, int count);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.ASCIIEncoding.GetByteCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetByteCount(Char[],Int32,Int32)
  nameWithType: ASCIIEncoding.GetByteCount(Char[],Int32,Int32)
  fullName: System.Text.ASCIIEncoding.GetByteCount(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding a set of characters from the specified character array.
  remarks: "## Remarks  \n To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses GetByteCount. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The GetByteCount method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster."
  example:
  - "## Examples  \n The following example demonstrates how to use the GetByteCount method to return the number of bytes required to encode an array of Unicode characters using <xref:System.Text.ASCIIEncoding>.  \n  \n [!CODE [System.Text.ASCIIEncoding.GetByteCount1 Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount1 Example#1)]"
  syntax:
    content: public override int GetByteCount (char[] chars, int index, int count);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: index
      type: System.Int32
      description: The index of the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.ASCIIEncoding.GetByteCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetBytes(Char*,Int32,Byte*,Int32)
  nameWithType: ASCIIEncoding.GetBytes(Char*,Int32,Byte*,Int32)
  fullName: System.Text.ASCIIEncoding.GetBytes(Char*,Int32,Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.
  remarks: "  \n  \n## Remarks  \n To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is translated to an ASCII question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.  \n  \n "
  syntax:
    content: public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte*
      description: A pointer to the location at which to start writing the resulting sequence of bytes.
    - id: byteCount
      type: System.Int32
      description: The maximum number of bytes to write.
    return:
      type: System.Int32
      description: The actual number of bytes written at the location indicated by .
  overload: System.Text.ASCIIEncoding.GetBytes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetBytes(Char[],Int32,Int32,Byte[],Int32)
  nameWithType: ASCIIEncoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)
  fullName: System.Text.ASCIIEncoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Encodes a set of characters from the specified character array into the specified byte array.
  remarks: "## Remarks  \n To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetBytes%2A> to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "## Examples  \n The following example demonstrates how to use the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method to encode a range of characters from a string and store the encoded characters in a range of elements in a byte array.  \n  \n [!CODE [System.Text.ASCIIEncoding.GetBytes1 Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes1 Example#1)]"
  syntax:
    content: public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into .
  overload: System.Text.ASCIIEncoding.GetBytes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetBytes(String,Int32,Int32,Byte[],Int32)
  nameWithType: ASCIIEncoding.GetBytes(String,Int32,Int32,Byte[],Int32)
  fullName: System.Text.ASCIIEncoding.GetBytes(String,Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Encodes a set of characters from the specified <xref:System.String> into the specified byte array.
  remarks: "## Remarks  \n To calculate the exact array size required by GetBytes to store the resulting bytes, the application uses <xref:System.Text.ASCIIEncoding.GetByteCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "## Examples  \n The following example demonstrates how to use the GetBytes method to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.  \n  \n [!CODE [System.Text.ASCIIEncoding.GetBytes2#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes2#1)]"
  syntax:
    content: public override int GetBytes (string chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
    parameters:
    - id: chars
      type: System.String
      description: The <xref:System.String> containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into .
  overload: System.Text.ASCIIEncoding.GetBytes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)
  id: GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetCharCount(Byte*,Int32)
  nameWithType: ASCIIEncoding.GetCharCount(Byte*,Int32)
  fullName: System.Text.ASCIIEncoding.GetCharCount(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.
  remarks: "  \n  \n## Remarks  \n To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n "
  syntax:
    content: public override int GetCharCount (byte* bytes, int count);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.ASCIIEncoding.GetCharCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetCharCount(Byte[],Int32,Int32)
  nameWithType: ASCIIEncoding.GetCharCount(Byte[],Int32,Int32)
  fullName: System.Text.ASCIIEncoding.GetCharCount(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
  remarks: "## Remarks  \n To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses GetCharCount. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The GetCharCount method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster."
  example:
  - "## Examples  \n The following example demonstrates how to use the GetCharCount method to return the number of characters produced by decoding a range of elements in a byte array.  \n  \n [!CODE [System.Text.ASCIIEncoding.GetCharCount Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetCharCount Example#1)]"
  syntax:
    content: public override int GetCharCount (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.ASCIIEncoding.GetCharCount*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetChars(Byte*,Int32,Char*,Int32)
  nameWithType: ASCIIEncoding.GetChars(Byte*,Int32,Char*,Int32)
  fullName: System.Text.ASCIIEncoding.GetChars(Byte*,Int32,Char*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.
  remarks: "  \n  \n## Remarks  \n To calculate the exact array size required by <xref:System.Text.ASCIIEncoding.GetChars%2A> to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection.  \n  \n "
  syntax:
    content: public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char*
      description: A pointer to the location at which to start writing the resulting set of characters.
    - id: charCount
      type: System.Int32
      description: The maximum number of characters to write.
    return:
      type: System.Int32
      description: The actual number of characters written at the location indicated by .
  overload: System.Text.ASCIIEncoding.GetChars*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetChars(Byte[],Int32,Int32,Char[],Int32)
  nameWithType: ASCIIEncoding.GetChars(Byte[],Int32,Int32,Char[],Int32)
  fullName: System.Text.ASCIIEncoding.GetChars(Byte[],Int32,Int32,Char[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Decodes a sequence of bytes from the specified byte array into the specified character array.
  remarks: "## Remarks  \n To calculate the exact array size required by GetChars to store the resulting characters, the application uses <xref:System.Text.ASCIIEncoding.GetCharCount%2A>. To calculate the maximum array size, the application should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, your application is recommended to use <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> and enable error detection."
  example:
  - "## Examples  \n The following example demonstrates how to decode a range of elements from a byte array and store the result in a set of elements in a Unicode character array.  \n  \n [!CODE [System.Text.ASCIIEncoding.GetChars Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetChars Example#1)]"
  syntax:
    content: public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: byteIndex
      type: System.Int32
      description: The index of the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char[]
      description: The character array to contain the resulting set of characters.
    - id: charIndex
      type: System.Int32
      description: The index at which to start writing the resulting set of characters.
    return:
      type: System.Int32
      description: The actual number of characters written into .
  overload: System.Text.ASCIIEncoding.GetChars*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetDecoder
  id: GetDecoder
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetDecoder()
  nameWithType: ASCIIEncoding.GetDecoder()
  fullName: System.Text.ASCIIEncoding.GetDecoder()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Obtains a decoder that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.
  remarks: "  \n  \n## Remarks  \n The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, GetDecoder and <xref:System.Text.ASCIIEncoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \n  \n "
  syntax:
    content: public override System.Text.Decoder GetDecoder ();
    parameters: []
    return:
      type: System.Text.Decoder
      description: A <see cref="T:System.Text.Decoder"> that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetEncoder
  id: GetEncoder
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetEncoder()
  nameWithType: ASCIIEncoding.GetEncoder()
  fullName: System.Text.ASCIIEncoding.GetEncoder()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Obtains an encoder that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.
  remarks: "  \n  \n## Remarks  \n The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method of this class. However, an <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.ASCIIEncoding.GetDecoder%2A> and GetEncoder are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \n  \n "
  syntax:
    content: public override System.Text.Encoder GetEncoder ();
    parameters: []
    return:
      type: System.Text.Encoder
      description: An <see cref="T:System.Text.Encoder"> that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetMaxByteCount(Int32)
  nameWithType: ASCIIEncoding.GetMaxByteCount(Int32)
  fullName: System.Text.ASCIIEncoding.GetMaxByteCount(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the maximum number of bytes produced by encoding the specified number of characters.
  remarks: "## Remarks  \n The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetBytes%2A> method to store the resulting bytes, whereas the GetMaxByteCount method calculates the maximum array size. The <xref:System.Text.ASCIIEncoding.GetByteCount%2A> method generally allocates less memory, but the GetMaxByteCount method generally executes faster.  \n  \n GetMaxByteCount is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>.  If you choose a replacement fallback with a potentially large string, GetMaxByteCount can return large values.  \n  \n The GetMaxByteCount method considers potential leftover surrogates from a previous encoding operation. As a result, if the <xref:System.Text.ASCIIEncoding> object uses the default replacement fallback, or if a custom replacement fallback has been defined with a single possible fallback character, the method returns  + 1. If the <xref:System.Text.ASCIIEncoding> object uses a replacement fallback with more than one possible fallback character, the method returns *n* \\* ( + 1), where *n* is the maximum number of fallback characters.  \n  \n GetMaxByteCount has no relation to <xref:System.Text.ASCIIEncoding.GetChars%2A>. If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetChars%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`."
  example:
  - "## Examples  \n The following example demonstrates how to use the GetMaxByteCount method to calculate the bytes required to encode a specified number of characters.  \n  \n [!CODE [System.Text.ASCIIEncoding.GetMaxByteCount Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxByteCount Example#1)]"
  syntax:
    content: public override int GetMaxByteCount (int charCount);
    parameters:
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The maximum number of bytes produced by encoding the specified number of characters.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetMaxCharCount(Int32)
  nameWithType: ASCIIEncoding.GetMaxCharCount(Int32)
  fullName: System.Text.ASCIIEncoding.GetMaxCharCount(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Calculates the maximum number of characters produced by decoding the specified number of bytes.
  remarks: "## Remarks  \n The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.ASCIIEncoding.GetChars%2A> method to store the resulting characters, whereas  the GetMaxCharCount method calculates the maximum array size. The <xref:System.Text.ASCIIEncoding.GetCharCount%2A> method generally allocates less memory, while the GetMaxCharCount method generally executes faster.  \n  \n GetMaxCharCount retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a decoder fallback is present that has a maximum fallback length of *n*, the GetMaxCharCount method returns *n* * .  \n  \n GetMaxCharCount has no relation to <xref:System.Text.ASCIIEncoding.GetBytes%2A>. If your application needs a similar function to use with <xref:System.Text.ASCIIEncoding.GetBytes%2A>, it should use <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`."
  example:
  - "## Examples  \n The following example demonstrates how to use the GetMaxCharCount method to calculate the maximum number of characters needed to decode a specified number of bytes.  \n  \n [!CODE [System.Text.ASCIIEncoding.GetMaxCharCount Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxCharCount Example#1)]"
  syntax:
    content: public override int GetMaxCharCount (int byteCount);
    parameters:
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The maximum number of characters produced by decoding the specified number of bytes.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: GetString(Byte[],Int32,Int32)
  nameWithType: ASCIIEncoding.GetString(Byte[],Int32,Int32)
  fullName: System.Text.ASCIIEncoding.GetString(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Decodes a range of bytes from a byte array into a string.
  remarks: "## Remarks  \n Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.ASCIIEncoding.GetDecoder%2A> method or the <xref:System.Text.ASCIIEncoding.GetEncoder%2A> method, respectively.  \n  \n <xref:System.Text.ASCIIEncoding> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").  \n  \n> [!CAUTION]\n>  For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> classes and enable error detection instead of using the <xref:System.Text.ASCIIEncoding> class."
  example:
  - "## Examples  \n The following example demonstrates how to use the GetString method to convert a byte array into a <xref:System.String>.  \n  \n [!CODE [System.Text.ASCIIEncoding.GetString1 Example#1](../CodeSnippet/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetString1 Example#1)]"
  syntax:
    content: public override string GetString (byte[] bytes, int byteIndex, int byteCount);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: byteIndex
      type: System.Int32
      description: The index of the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.String
      description: A <xref:System.String> containing the results of decoding the specified sequence of bytes.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Text.ASCIIEncoding.IsSingleByte
  id: IsSingleByte
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  name: IsSingleByte
  nameWithType: ASCIIEncoding.IsSingleByte
  fullName: System.Text.ASCIIEncoding.IsSingleByte
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Text
  summary: Gets a value indicating whether the current encoding uses single-byte code points.
  remarks: "  \n  \n## Remarks  \n Instead of using the IsSingleByte property to determine the size of a byte array for encoding operations  and the size of a character array for decoding operations (for example, so that the size of the byte array is IsSingleByte * the number of characters to be encoded), you should call the <xref:System.Text.ASCIIEncoding.GetByteCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> method for encoding operations and the <xref:System.Text.ASCIIEncoding.GetCharCount%2A> or <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> method for decoding operations. These methods takes the <xref:System.Text.ASCIIEncoding> object's replacement fallback strategy into account when calculating the required array size.  \n  \n "
  syntax:
    content: public override bool IsSingleByte { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Text.Encoding
  isExternal: false
  name: System.Text.Encoding
- uid: System.Text.ASCIIEncoding.#ctor
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: ASCIIEncoding()
  nameWithType: ASCIIEncoding.ASCIIEncoding()
  fullName: System.Text.ASCIIEncoding.ASCIIEncoding()
- uid: System.Text.ASCIIEncoding.GetByteCount(System.String)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetByteCount(String)
  nameWithType: ASCIIEncoding.GetByteCount(String)
  fullName: System.Text.ASCIIEncoding.GetByteCount(String)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetByteCount(Char*,Int32)
  nameWithType: ASCIIEncoding.GetByteCount(Char*,Int32)
  fullName: System.Text.ASCIIEncoding.GetByteCount(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetByteCount(Char[],Int32,Int32)
  nameWithType: ASCIIEncoding.GetByteCount(Char[],Int32,Int32)
  fullName: System.Text.ASCIIEncoding.GetByteCount(Char[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetBytes(Char*,Int32,Byte*,Int32)
  nameWithType: ASCIIEncoding.GetBytes(Char*,Int32,Byte*,Int32)
  fullName: System.Text.ASCIIEncoding.GetBytes(Char*,Int32,Byte*,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetBytes(Char[],Int32,Int32,Byte[],Int32)
  nameWithType: ASCIIEncoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)
  fullName: System.Text.ASCIIEncoding.GetBytes(Char[],Int32,Int32,Byte[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetBytes(String,Int32,Int32,Byte[],Int32)
  nameWithType: ASCIIEncoding.GetBytes(String,Int32,Int32,Byte[],Int32)
  fullName: System.Text.ASCIIEncoding.GetBytes(String,Int32,Int32,Byte[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetCharCount(Byte*,Int32)
  nameWithType: ASCIIEncoding.GetCharCount(Byte*,Int32)
  fullName: System.Text.ASCIIEncoding.GetCharCount(Byte*,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetCharCount(Byte[],Int32,Int32)
  nameWithType: ASCIIEncoding.GetCharCount(Byte[],Int32,Int32)
  fullName: System.Text.ASCIIEncoding.GetCharCount(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetChars(Byte*,Int32,Char*,Int32)
  nameWithType: ASCIIEncoding.GetChars(Byte*,Int32,Char*,Int32)
  fullName: System.Text.ASCIIEncoding.GetChars(Byte*,Int32,Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetChars(Byte[],Int32,Int32,Char[],Int32)
  nameWithType: ASCIIEncoding.GetChars(Byte[],Int32,Int32,Char[],Int32)
  fullName: System.Text.ASCIIEncoding.GetChars(Byte[],Int32,Int32,Char[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetDecoder
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetDecoder()
  nameWithType: ASCIIEncoding.GetDecoder()
  fullName: System.Text.ASCIIEncoding.GetDecoder()
- uid: System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  nameWithType: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.ASCIIEncoding.GetEncoder
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetEncoder()
  nameWithType: ASCIIEncoding.GetEncoder()
  fullName: System.Text.ASCIIEncoding.GetEncoder()
- uid: System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  nameWithType: Encoder
  fullName: System.Text.Encoder
- uid: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetMaxByteCount(Int32)
  nameWithType: ASCIIEncoding.GetMaxByteCount(Int32)
  fullName: System.Text.ASCIIEncoding.GetMaxByteCount(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetMaxCharCount(Int32)
  nameWithType: ASCIIEncoding.GetMaxCharCount(Int32)
  fullName: System.Text.ASCIIEncoding.GetMaxCharCount(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: GetString(Byte[],Int32,Int32)
  nameWithType: ASCIIEncoding.GetString(Byte[],Int32,Int32)
  fullName: System.Text.ASCIIEncoding.GetString(Byte[],Int32,Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.ASCIIEncoding.IsSingleByte
  parent: System.Text.ASCIIEncoding
  isExternal: false
  name: IsSingleByte
  nameWithType: ASCIIEncoding.IsSingleByte
  fullName: System.Text.ASCIIEncoding.IsSingleByte
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.ASCIIEncoding.GetByteCount*
  parent: System.Text.ASCIIEncoding
  isExternal: false
  nameWithType: ASCIIEncoding.
- uid: System.Text.ASCIIEncoding.GetBytes*
  parent: System.Text.ASCIIEncoding
  isExternal: false
  nameWithType: ASCIIEncoding.
- uid: System.Text.ASCIIEncoding.GetCharCount*
  parent: System.Text.ASCIIEncoding
  isExternal: false
  nameWithType: ASCIIEncoding.
- uid: System.Text.ASCIIEncoding.GetChars*
  parent: System.Text.ASCIIEncoding
  isExternal: false
  nameWithType: ASCIIEncoding.
