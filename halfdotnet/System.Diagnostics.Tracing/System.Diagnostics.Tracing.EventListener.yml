### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Tracing.EventListener
  id: EventListener
  children:
  - System.Diagnostics.Tracing.EventListener.#ctor
  - System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.Dispose
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  - System.Diagnostics.Tracing.EventListener.EventSourceCreated
  - System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.EventWritten
  - System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  langs:
  - csharp
  name: EventListener
  nameWithType: EventListener
  fullName: System.Diagnostics.Tracing.EventListener
  type: Class
  summary: Provides methods for enabling and disabling events from event sources.
  remarks: "An event listener represents the target for all events generated by event source (<xref:System.Diagnostics.Tracing.EventSource> object) implementations in the current application domain. When a new event listener is created, it is logically attached to all event sources in that application domain.  \n  \n> [!NOTE]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you must dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \n  \n An event listener can enable or disable on a per-current event source basis by using event levels (<xref:System.Diagnostics.Tracing.EventLevel>) and event keywords (<xref:System.Diagnostics.Tracing.EventKeywords>) to further restrict the set of events to be sent to the listener. The listener can also send arbitrary commands to a specific current event source by using the <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> method. The meanings of the commands are specific to the implementation of the event source.  \n  \n If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the <xref:System.Diagnostics.Tracing.EventSource> object that is used to enable or disable events is <xref:System.Guid.Empty>, all event sources in the application domain are affected.  \n  \n Multiple event listeners can be defined in a single application domain. Each listener is logically independent of the other listeners so that events that are enabled or disabled by one listener affect only that listener. It is possible for commands sent with the <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> method to do a semantic operation (such as a garbage collection or flushing data) that affects the other listeners, but this is the exception rather than the rule.  \n  \n Each event source   keeps a list of event listeners that it sends events to. A set of filtering criteria is associated with each event source-listener pair. These criteria determine the events that listener will receive for the current event source. Listeners receive the events on their <xref:System.Diagnostics.Tracing.EventListener.OnEventWritten%2A> method. Therefore, subclasses of EventListener must override this method to do something useful with the data.  \n  \n When a new event source is created, the <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> method is called. Every current event listener gets exactly one <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> call for every current event source that can send it log messages. When an event listener is created, a series of <xref:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated%2A> calls are made to notify the new listener of all the event sources that existed before the listener was created."
  syntax:
    content: 'public class EventListener : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: EventListener()
  nameWithType: EventListener.EventListener()
  fullName: System.Diagnostics.Tracing.EventListener.EventListener()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Creates a new instance of the <see cref="T:System.Diagnostics.Tracing.EventListener"> class.
  remarks: All events are disabled when a new instance is created. Use the <xref:System.Diagnostics.Tracing.EventListener.EnableEvents%2A> methods to enable events.
  syntax:
    content: public EventListener ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  id: DisableEvents(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: DisableEvents(EventSource)
  nameWithType: EventListener.DisableEvents(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.DisableEvents(EventSource)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Disables all events for the specified event source.
  remarks: If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property for  is <xref:System.Guid.Empty>, events for all event sources in the application domain are disabled for this event listener.
  syntax:
    content: public void DisableEvents (System.Diagnostics.Tracing.EventSource eventSource);
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: The event source to disable events for.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.Dispose
  id: Dispose
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: Dispose()
  nameWithType: EventListener.Dispose()
  fullName: System.Diagnostics.Tracing.EventListener.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Releases the resources used by the current instance of the <see cref="T:System.Diagnostics.Tracing.EventListener"> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.Diagnostics.Tracing.EventListener>. The `Dispose` method leaves the <xref:System.Diagnostics.Tracing.EventListener> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Diagnostics.Tracing.EventListener> so the garbage collector can reclaim the memory that the <xref:System.Diagnostics.Tracing.EventListener> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md) and [Implementing a Dispose Method](../Topic/Implementing%20a%20Dispose%20Method.md)."
  syntax:
    content: public virtual void Dispose ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: EnableEvents(EventSource,EventLevel)
  nameWithType: EventListener.EnableEvents(EventSource,EventLevel)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(EventSource,EventLevel)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Enables events for the specified event source that has the specified verbosity level or lower.
  remarks: If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the specified  is <xref:System.Guid.Empty>, all event sources in the application domain are affected.
  syntax:
    content: public void EnableEvents (System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level);
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: The event source to enable events for.
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: The level of events to enable.
  overload: System.Diagnostics.Tracing.EventListener.EnableEvents*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: EnableEvents(EventSource,EventLevel,EventKeywords)
  nameWithType: EventListener.EnableEvents(EventSource,EventLevel,EventKeywords)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(EventSource,EventLevel,EventKeywords)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Enables events for the specified event source that has the specified verbosity level or lower, and matching keyword flags.
  remarks: If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the specified  is <xref:System.Guid.Empty>, all event sources in the application domain are affected.
  syntax:
    content: public void EnableEvents (System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword);
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: The event source to enable events for.
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: The level of events to enable.
    - id: matchAnyKeyword
      type: System.Diagnostics.Tracing.EventKeywords
      description: The keyword flags necessary to enable the events.
  overload: System.Diagnostics.Tracing.EventListener.EnableEvents*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: EnableEvents(EventSource,EventLevel,EventKeywords,IDictionary<String,String>)
  nameWithType: EventListener.EnableEvents(EventSource,EventLevel,EventKeywords,IDictionary<String,String>)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(EventSource,EventLevel,EventKeywords,IDictionary<String,String>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Enables events for the specified event source that has the specified verbosity level or lower, matching event keyword flag, and matching arguments.
  remarks: If the <xref:System.Diagnostics.Tracing.EventSource.Guid%2A> property in the specified  is <xref:System.Guid.Empty>, all event sources in the application domain are affected.
  syntax:
    content: public void EnableEvents (System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword, System.Collections.Generic.IDictionary<string,string> arguments);
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: The event source to enable events for.
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: The level of events to enable.
    - id: matchAnyKeyword
      type: System.Diagnostics.Tracing.EventKeywords
      description: The keyword flags necessary to enable the events.
    - id: arguments
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: The arguments to be matched to enable the events.
  overload: System.Diagnostics.Tracing.EventListener.EnableEvents*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.EventSourceCreated
  id: EventSourceCreated
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: EventSourceCreated
  nameWithType: EventListener.EventSourceCreated
  fullName: System.Diagnostics.Tracing.EventListener.EventSourceCreated
  type: Event
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Occurs when an event source (<see cref="T:System.Diagnostics.Tracing.EventSource"> object) is attached to the dispatcher.
  remarks: The EventSourceCreated occurs for all existing event sources when the event listener is created, as well as for any event sources that are created after the event listener's creation.
  syntax:
    content: public event EventHandler<System.Diagnostics.Tracing.EventSourceCreatedEventArgs> EventSourceCreated;
    return:
      type: System.EventHandler{System.Diagnostics.Tracing.EventSourceCreatedEventArgs}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  id: EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: EventSourceIndex(EventSource)
  nameWithType: EventListener.EventSourceIndex(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.EventSourceIndex(EventSource)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Gets a small non-negative number that represents the specified event source.
  remarks: The value returned by EventSourceIndex identifies an event source that is suitable for indexing an array. This integer is unique within the application domain. An event listener might find it useful to store additional information about each event source that is connected to it. The value returned by EventSourceIndex allows this extra information to be efficiently stored in a  expandable array such as `List<T>`.
  syntax:
    content: public static int EventSourceIndex (System.Diagnostics.Tracing.EventSource eventSource);
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: The event source to find the index for.
    return:
      type: System.Int32
      description: A small non-negative number that represents the specified event source.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.EventWritten
  id: EventWritten
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: EventWritten
  nameWithType: EventListener.EventWritten
  fullName: System.Diagnostics.Tracing.EventListener.EventWritten
  type: Event
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Occurs when an event has been written by an event source (<see cref="T:System.Diagnostics.Tracing.EventSource"> object) for which          the event listener has enabled events.
  remarks: To be added.
  syntax:
    content: public event EventHandler<System.Diagnostics.Tracing.EventWrittenEventArgs> EventWritten;
    return:
      type: System.EventHandler{System.Diagnostics.Tracing.EventWrittenEventArgs}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  id: OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: OnEventSourceCreated(EventSource)
  nameWithType: EventListener.OnEventSourceCreated(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(EventSource)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Called for all existing event sources when the event listener is created and when a new event source is attached to the listener.
  remarks: "Event source implementations should be aware that these callbacks are issued for existing event sources when the event listener is instantiated.  \n  \n In a multithreaded environment, it is possible for <xref:System.Diagnostics.Tracing.EventListener.OnEventWritten%2A> callbacks  to occur before the OnEventSourceCreated callback."
  syntax:
    content: protected virtual void OnEventSourceCreated (System.Diagnostics.Tracing.EventSource eventSource);
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: The event source.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  id: OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  name: OnEventWritten(EventWrittenEventArgs)
  nameWithType: EventListener.OnEventWritten(EventWrittenEventArgs)
  fullName: System.Diagnostics.Tracing.EventListener.OnEventWritten(EventWrittenEventArgs)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Diagnostics.Tracing
  summary: Called whenever an event has been written by an event source for which the event listener has enabled events.
  remarks: To be added.
  syntax:
    content: protected virtual void OnEventWritten (System.Diagnostics.Tracing.EventWrittenEventArgs eventData);
    parameters:
    - id: eventData
      type: System.Diagnostics.Tracing.EventWrittenEventArgs
      description: The event arguments that describe the event.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Diagnostics.Tracing.EventListener.#ctor
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: EventListener()
  nameWithType: EventListener.EventListener()
  fullName: System.Diagnostics.Tracing.EventListener.EventListener()
- uid: System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: DisableEvents(EventSource)
  nameWithType: EventListener.DisableEvents(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.DisableEvents(EventSource)
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSource
  nameWithType: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventListener.Dispose
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: Dispose()
  nameWithType: EventListener.Dispose()
  fullName: System.Diagnostics.Tracing.EventListener.Dispose()
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: EnableEvents(EventSource,EventLevel)
  nameWithType: EventListener.EnableEvents(EventSource,EventLevel)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(EventSource,EventLevel)
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSource
  nameWithType: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventLevel
  nameWithType: EventLevel
  fullName: System.Diagnostics.Tracing.EventLevel
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: EnableEvents(EventSource,EventLevel,EventKeywords)
  nameWithType: EventListener.EnableEvents(EventSource,EventLevel,EventKeywords)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(EventSource,EventLevel,EventKeywords)
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSource
  nameWithType: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventLevel
  nameWithType: EventLevel
  fullName: System.Diagnostics.Tracing.EventLevel
- uid: System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventKeywords
  nameWithType: EventKeywords
  fullName: System.Diagnostics.Tracing.EventKeywords
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: EnableEvents(EventSource,EventLevel,EventKeywords,IDictionary<String,String>)
  nameWithType: EventListener.EnableEvents(EventSource,EventLevel,EventKeywords,IDictionary<String,String>)
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(EventSource,EventLevel,EventKeywords,IDictionary<String,String>)
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSource
  nameWithType: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventLevel
  nameWithType: EventLevel
  fullName: System.Diagnostics.Tracing.EventLevel
- uid: System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventKeywords
  nameWithType: EventKeywords
  fullName: System.Diagnostics.Tracing.EventKeywords
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: false
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
- uid: System.Diagnostics.Tracing.EventListener.EventSourceCreated
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: EventSourceCreated
  nameWithType: EventListener.EventSourceCreated
  fullName: System.Diagnostics.Tracing.EventListener.EventSourceCreated
- uid: System.EventHandler{System.Diagnostics.Tracing.EventSourceCreatedEventArgs}
  parent: System
  isExternal: false
  name: EventHandler<EventSourceCreatedEventArgs>
  nameWithType: EventHandler<EventSourceCreatedEventArgs>
  fullName: System.EventHandler<System.Diagnostics.Tracing.EventSourceCreatedEventArgs>
- uid: System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: EventSourceIndex(EventSource)
  nameWithType: EventListener.EventSourceIndex(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.EventSourceIndex(EventSource)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSource
  nameWithType: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventListener.EventWritten
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: EventWritten
  nameWithType: EventListener.EventWritten
  fullName: System.Diagnostics.Tracing.EventListener.EventWritten
- uid: System.EventHandler{System.Diagnostics.Tracing.EventWrittenEventArgs}
  parent: System
  isExternal: false
  name: EventHandler<EventWrittenEventArgs>
  nameWithType: EventHandler<EventWrittenEventArgs>
  fullName: System.EventHandler<System.Diagnostics.Tracing.EventWrittenEventArgs>
- uid: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: OnEventSourceCreated(EventSource)
  nameWithType: EventListener.OnEventSourceCreated(EventSource)
  fullName: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(EventSource)
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSource
  nameWithType: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  name: OnEventWritten(EventWrittenEventArgs)
  nameWithType: EventListener.OnEventWritten(EventWrittenEventArgs)
  fullName: System.Diagnostics.Tracing.EventListener.OnEventWritten(EventWrittenEventArgs)
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventWrittenEventArgs
  nameWithType: EventWrittenEventArgs
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents*
  parent: System.Diagnostics.Tracing.EventListener
  isExternal: false
  nameWithType: EventListener.
