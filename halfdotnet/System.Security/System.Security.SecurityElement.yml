### YamlMime:ManagedReference
items:
- uid: System.Security.SecurityElement
  id: SecurityElement
  children:
  - System.Security.SecurityElement.#ctor(System.String)
  - System.Security.SecurityElement.#ctor(System.String,System.String)
  - System.Security.SecurityElement.AddAttribute(System.String,System.String)
  - System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  - System.Security.SecurityElement.Attribute(System.String)
  - System.Security.SecurityElement.Attributes
  - System.Security.SecurityElement.Children
  - System.Security.SecurityElement.Copy
  - System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  - System.Security.SecurityElement.Escape(System.String)
  - System.Security.SecurityElement.FromString(System.String)
  - System.Security.SecurityElement.IsValidAttributeName(System.String)
  - System.Security.SecurityElement.IsValidAttributeValue(System.String)
  - System.Security.SecurityElement.IsValidTag(System.String)
  - System.Security.SecurityElement.IsValidText(System.String)
  - System.Security.SecurityElement.SearchForChildByTag(System.String)
  - System.Security.SecurityElement.SearchForTextOfTag(System.String)
  - System.Security.SecurityElement.Tag
  - System.Security.SecurityElement.Text
  - System.Security.SecurityElement.ToString
  langs:
  - csharp
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
  type: Class
  summary: Represents the XML object model for encoding security objects. This class cannot be inherited.
  remarks: "This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model. This documentation assumes a basic knowledge of XML.  \n  \n The simple XML object model for an element consists of the following parts:  \n  \n-   The tag is the element name.  \n  \n-   The attributes are zero or more name/value attribute pairs on the element.  \n  \n-   The children are zero or more elements nested within `<tag>` and `</tag>`.  \n  \n It is strongly suggested that attribute based XML representation is used to express security elements and their values. This means properties of an element are expressed as attributes and property values are expressed as attribute values. Avoid nesting text within tags. For any `<tag>text</tag>` representation a representation of type `<tag value=\"text\"/>` is usually available. Using this attribute-based XML representation increases readability and allows easy WMI portability of the resulting XML serialization.  \n  \n An attribute name must be one character or longer, and cannot be `null`. If element-based value representation is used, elements with a text string that is `null` are represented in the `<tag/>` form; otherwise, text is delimited by the `<tag>` and `</tag>` tokens. Both forms can be combined with attributes, which are shown if present.  \n  \n The tags, attributes, and text of elements, if present, are always case-sensitive. The XML form contains quotations and escapes where necessary. String values that include characters invalid for use in XML result in an <xref:System.ArgumentException>. These rules apply to all properties and methods.  \n  \n> [!NOTE]\n>  For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method. Static methods allow explicit checking where needed."
  example:
  - "The following example shows the use of members of the SecurityElement class.  \n  \n [!CODE [SecurityElementMembers#1](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SecurityElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SecurityElement(String)
  nameWithType: SecurityElement.SecurityElement(String)
  fullName: System.Security.SecurityElement.SecurityElement(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Initializes a new instance of the <see cref="T:System.Security.SecurityElement"> class with the specified tag.
  remarks: The  parameter must consist of a valid XML tag name. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.
  example:
  - "The following code shows the use of  the SecurityElement constructor to create a new <xref:System.Security.SecurityElement> object.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#2](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#2)]"
  syntax:
    content: public SecurityElement (string tag);
    parameters:
    - id: tag
      type: System.String
      description: The tag name of an XML element.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SecurityElement(String,String)
  nameWithType: SecurityElement.SecurityElement(String,String)
  fullName: System.Security.SecurityElement.SecurityElement(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Initializes a new instance of the <see cref="T:System.Security.SecurityElement"> class with the specified tag and text.
  remarks: If the  parameter is `null` this constructor produces an element identical to the default constructor.
  syntax:
    content: public SecurityElement (string tag, string text);
    parameters:
    - id: tag
      type: System.String
      description: The tag name of the XML element.
    - id: text
      type: System.String
      description: The text content within the element.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.AddAttribute(System.String,System.String)
  id: AddAttribute(System.String,System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: AddAttribute(String,String)
  nameWithType: SecurityElement.AddAttribute(String,String)
  fullName: System.Security.SecurityElement.AddAttribute(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Adds a name/value attribute to an XML element.
  remarks: "Names and values in attributes should only contain valid XML attribute characters. XML attribute names must be unique. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  \n  \n There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting."
  example:
  - "The following code shows the use of the AddAttribute method to add a name/value attribute to an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#4](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#4)]"
  syntax:
    content: public void AddAttribute (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: The name of the attribute.
    - id: value
      type: System.String
      description: The value of the attribute.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  id: AddChild(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: AddChild(SecurityElement)
  nameWithType: SecurityElement.AddChild(SecurityElement)
  fullName: System.Security.SecurityElement.AddChild(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Adds a child element to the XML element.
  remarks: The child element is added following any previously existing child elements.
  example:
  - "The following code shows the use of the AddChild method to add a child element to the XML element.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#5](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#5)]"
  syntax:
    content: public void AddChild (System.Security.SecurityElement child);
    parameters:
    - id: child
      type: System.Security.SecurityElement
      description: The child element to add.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.Attribute(System.String)
  id: Attribute(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Attribute(String)
  nameWithType: SecurityElement.Attribute(String)
  fullName: System.Security.SecurityElement.Attribute(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Finds an attribute by name in an XML element.
  remarks: "With XML as follows, `Attribute(\"B\")` would return \"456\".  \n  \n```  \n<thetag A=\"123\" B=\"456\" C=\"789\">text</thetag>  \n```"
  example:
  - "The following code shows the use of the Attribute method to find an attribute by name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#13](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#13)]"
  syntax:
    content: public string Attribute (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of the attribute for which to search.
    return:
      type: System.String
      description: The value associated with the named attribute, or `null` if no attribute with  exists.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.Attributes
  id: Attributes
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Attributes
  nameWithType: SecurityElement.Attributes
  fullName: System.Security.SecurityElement.Attributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Gets or sets the attributes of an XML element as name/value pairs.
  remarks: "Each attribute is stored in the <xref:System.Collections.Hashtable> as a name/value pair.  \n  \n Names and values in attributes should contain only valid XML attribute characters. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  \n  \n There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting."
  example:
  - "The following code shows the use of the Attributes property to get an attribute of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#15](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#15)]"
  syntax:
    content: public System.Collections.Hashtable Attributes { get; set; }
    return:
      type: System.Collections.Hashtable
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.Children
  id: Children
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Children
  nameWithType: SecurityElement.Children
  fullName: System.Security.SecurityElement.Children
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Gets or sets the array of child elements of the XML element.
  remarks: If a <xref:System.Security.SecurityElement> contains both <xref:System.Security.SecurityElement.Text%2A> and Children, <xref:System.Security.SecurityElement.Text%2A> will appear first.
  example:
  - "The following code shows the use of the Children property to get the array of child elements of the XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#14](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#14)]"
  syntax:
    content: public System.Collections.ArrayList Children { get; set; }
    return:
      type: System.Collections.ArrayList
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.Copy
  id: Copy
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Copy()
  nameWithType: SecurityElement.Copy()
  fullName: System.Security.SecurityElement.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Creates and returns an identical copy of the current <see cref="T:System.Security.SecurityElement"> object.
  remarks: The copy includes both the <xref:System.Security.SecurityElement.Children%2A> and <xref:System.Security.SecurityElement.Attributes%2A> properties.
  syntax:
    content: public System.Security.SecurityElement Copy ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: A copy of the current <see cref="T:System.Security.SecurityElement"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  id: Equal(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Equal(SecurityElement)
  nameWithType: SecurityElement.Equal(SecurityElement)
  fullName: System.Security.SecurityElement.Equal(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Compares two XML element objects for equality.
  remarks: "If there are child elements, comparison extends recursively to them.  \n  \n There is no support for comparing different XML representations of the same characters."
  example:
  - "The following code shows the use of the Equal method to compare two XML elements. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#22](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#22)]"
  syntax:
    content: public bool Equal (System.Security.SecurityElement other);
    parameters:
    - id: other
      type: System.Security.SecurityElement
      description: An XML element object to which to compare the current XML element object.
    return:
      type: System.Boolean
      description: '`true` if the tag, attribute names and values, child elements, and text fields in the current XML element are identical to their counterparts in the  parameter; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.Escape(System.String)
  id: Escape(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Escape(String)
  nameWithType: SecurityElement.Escape(String)
  fullName: System.Security.SecurityElement.Escape(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Replaces invalid XML characters in a string with their valid XML equivalent.
  remarks: "Use this method to replace invalid characters in a string before using the string in a <xref:System.Security.SecurityElement>. If invalid characters are used in a <xref:System.Security.SecurityElement> without being escaped, an <xref:System.ArgumentException> is thrown.  \n  \n The following table shows the invalid XML characters and their escaped equivalents.  \n  \n|invalid XML Character|Replaced With|  \n|---------------------------|-------------------|  \n|\"\\<\"|\"&lt;\"|  \n|\">\"|\"&gt;\"|  \n|\"\\\\\"\"|\"&quot;\"|  \n|\"\\\\'\"|\"&apos;\"|  \n|\"&\"|\"&amp;\"|"
  example:
  - "The following code shows the use of the Escape method to replace invalid XML characters in a string with their valid XML equivalent. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#19](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#19)]"
  syntax:
    content: public static string Escape (string str);
    parameters:
    - id: str
      type: System.String
      description: The string within which to escape invalid characters.
    return:
      type: System.String
      description: The input string with invalid characters replaced.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.FromString(System.String)
  id: FromString(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: FromString(String)
  nameWithType: SecurityElement.FromString(String)
  fullName: System.Security.SecurityElement.FromString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Creates a security element from an XML-encoded string.
  remarks: "Do not use single quotation marks in the XML string; instead, use escaped double quotation marks. For example, instead of \"`<value name='Company'>Microsoft</value>\"` use \"`<value name=\\\"Company\\\">Microsoft</value>\"`.  \n  \n Using single quotation marks can result in either an exception being thrown or, in some cases, the single quotation marks being treated as text in the string."
  syntax:
    content: public static System.Security.SecurityElement FromString (string xml);
    parameters:
    - id: xml
      type: System.String
      description: The XML-encoded string from which to create the security element.
    return:
      type: System.Security.SecurityElement
      description: A <see cref="T:System.Security.SecurityElement"> created from the XML.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.IsValidAttributeName(System.String)
  id: IsValidAttributeName(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidAttributeName(String)
  nameWithType: SecurityElement.IsValidAttributeName(String)
  fullName: System.Security.SecurityElement.IsValidAttributeName(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Determines whether a string is a valid attribute name.
  remarks: This method can be used to test an attribute before adding it to a security element.
  example:
  - "The following code shows the use of the IsValidAttributeName method to determine whether a string is a valid attribute name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#6](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#6)]"
  syntax:
    content: public static bool IsValidAttributeName (string name);
    parameters:
    - id: name
      type: System.String
      description: The attribute name to test for validity.
    return:
      type: System.Boolean
      description: '`true` if the  parameter is a valid XML attribute name; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.IsValidAttributeValue(System.String)
  id: IsValidAttributeValue(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidAttributeValue(String)
  nameWithType: SecurityElement.IsValidAttributeValue(String)
  fullName: System.Security.SecurityElement.IsValidAttributeValue(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Determines whether a string is a valid attribute value.
  remarks: This method can be used to test an attribute before adding it to a security element.
  example:
  - "The following code shows the use of the IsValidAttributeValue method to determine whether a string is a valid attribute value. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#7](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#7)]"
  syntax:
    content: public static bool IsValidAttributeValue (string value);
    parameters:
    - id: value
      type: System.String
      description: The attribute value to test for validity.
    return:
      type: System.Boolean
      description: '`true` if the  parameter is a valid XML attribute value; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.IsValidTag(System.String)
  id: IsValidTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidTag(String)
  nameWithType: SecurityElement.IsValidTag(String)
  fullName: System.Security.SecurityElement.IsValidTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Determines whether a string is a valid tag.
  remarks: This can be used to test a <xref:System.Security.SecurityElement.Tag%2A> before setting it.
  example:
  - "The following code shows the use of the IsValidTag method to determine whether a string is a valid attribute tag. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#10](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#10)]"
  syntax:
    content: public static bool IsValidTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: The tag to test for validity.
    return:
      type: System.Boolean
      description: '`true` if the  parameter is a valid XML tag; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.IsValidText(System.String)
  id: IsValidText(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidText(String)
  nameWithType: SecurityElement.IsValidText(String)
  fullName: System.Security.SecurityElement.IsValidText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Determines whether a string is valid as text within an XML element.
  remarks: This method can be used to test <xref:System.Security.SecurityElement.Text%2A> before setting it.
  example:
  - "The following code shows the use of the IsValidText method to determine whether a string is valid as XML element text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#9](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#9)]"
  syntax:
    content: public static bool IsValidText (string text);
    parameters:
    - id: text
      type: System.String
      description: The text to test for validity.
    return:
      type: System.Boolean
      description: '`true` if the  parameter is a valid XML text element; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.SearchForChildByTag(System.String)
  id: SearchForChildByTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SearchForChildByTag(String)
  nameWithType: SecurityElement.SearchForChildByTag(String)
  fullName: System.Security.SecurityElement.SearchForChildByTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Finds a child by its tag name.
  remarks: "With XML as follows, `SearchForChildByTag(\"second\")` would return the child element `<second>`.  \n  \n```  \n<thetag A=\"123\" B=\"456\" C=\"789\"> <first>text1</first>  \n       <second>text2</second></thetag>  \n```"
  example:
  - "The following code shows the use of the SearchForChildByTag method to find a child by its tag name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#17](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#17)]"
  syntax:
    content: public System.Security.SecurityElement SearchForChildByTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: The tag for which to search in child elements.
    return:
      type: System.Security.SecurityElement
      description: The first child XML element with the specified tag value, or `null` if no child element with  exists.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.SearchForTextOfTag(System.String)
  id: SearchForTextOfTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SearchForTextOfTag(String)
  nameWithType: SecurityElement.SearchForTextOfTag(String)
  fullName: System.Security.SecurityElement.SearchForTextOfTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Finds a child by its tag name and returns the contained text.
  remarks: "This method is equivalent to the following:  \n  \n [!CODE [System.Security.SecurityElement#1](../CodeSnippet/VS_Snippets_CLR_System/system.security.securityelement#1)]  \n  \n With XML as follows, `SearchForTextOfTag(\"second\")` would return \"text2\".  \n  \n```  \n<thetag A=\"123\" B=\"456\" C=\"789\"> <first>text1</first>  \n    <second>text2</second></thetag>  \n```"
  example:
  - "The following code shows the use of the SearchForTextOfTag method to find a child by its tag name and return the contained text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#18](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#18)]"
  syntax:
    content: public string SearchForTextOfTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: The tag for which to search in child elements.
    return:
      type: System.String
      description: The text contents of the first child element with the specified tag value.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.Tag
  id: Tag
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Tag
  nameWithType: SecurityElement.Tag
  fullName: System.Security.SecurityElement.Tag
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Gets or sets the tag name of an XML element.
  remarks: "In XML, the tag appears in the script as appears below:  \n  \n```  \n<tag attributes>text</tag>  \n```  \n  \n If this element has child elements, the children will replace `text`.  \n  \n Assign only valid XML tag strings to this property. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string."
  example:
  - "The following code shows the use of the Tag property to get the tag name of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#11](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#11)]"
  syntax:
    content: public string Tag { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.Text
  id: Text
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Text
  nameWithType: SecurityElement.Text
  fullName: System.Security.SecurityElement.Text
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Gets or sets the text within an XML element.
  remarks: "The text should not contain XML special characters. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  \n  \n If a <xref:System.Security.SecurityElement> contains both Text and <xref:System.Security.SecurityElement.Children%2A>, Text will appear first."
  example:
  - "The following code shows the use of the Text property to get the text of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!CODE [SecurityElementMembers#12](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#12)]"
  syntax:
    content: public string Text { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.SecurityElement.ToString
  id: ToString
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: ToString()
  nameWithType: SecurityElement.ToString()
  fullName: System.Security.SecurityElement.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Produces a string representation of an XML element and its constituent attributes, child elements, and text.
  remarks: This method is useful in debugging to see the XML representation of the element.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The XML element and its contents.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityElement.#ctor(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement(String)
  nameWithType: SecurityElement.SecurityElement(String)
  fullName: System.Security.SecurityElement.SecurityElement(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.#ctor(System.String,System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement(String,String)
  nameWithType: SecurityElement.SecurityElement(String,String)
  fullName: System.Security.SecurityElement.SecurityElement(String,String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.AddAttribute(System.String,System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddAttribute(String,String)
  nameWithType: SecurityElement.AddAttribute(String,String)
  fullName: System.Security.SecurityElement.AddAttribute(String,String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddChild(SecurityElement)
  nameWithType: SecurityElement.AddChild(SecurityElement)
  fullName: System.Security.SecurityElement.AddChild(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.SecurityElement.Attribute(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attribute(String)
  nameWithType: SecurityElement.Attribute(String)
  fullName: System.Security.SecurityElement.Attribute(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.Attributes
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attributes
  nameWithType: SecurityElement.Attributes
  fullName: System.Security.SecurityElement.Attributes
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Security.SecurityElement.Children
  parent: System.Security.SecurityElement
  isExternal: false
  name: Children
  nameWithType: SecurityElement.Children
  fullName: System.Security.SecurityElement.Children
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Security.SecurityElement.Copy
  parent: System.Security.SecurityElement
  isExternal: false
  name: Copy()
  nameWithType: SecurityElement.Copy()
  fullName: System.Security.SecurityElement.Copy()
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Equal(SecurityElement)
  nameWithType: SecurityElement.Equal(SecurityElement)
  fullName: System.Security.SecurityElement.Equal(SecurityElement)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.SecurityElement.Escape(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Escape(String)
  nameWithType: SecurityElement.Escape(String)
  fullName: System.Security.SecurityElement.Escape(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.FromString(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: FromString(String)
  nameWithType: SecurityElement.FromString(String)
  fullName: System.Security.SecurityElement.FromString(String)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.IsValidAttributeName(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeName(String)
  nameWithType: SecurityElement.IsValidAttributeName(String)
  fullName: System.Security.SecurityElement.IsValidAttributeName(String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.IsValidAttributeValue(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeValue(String)
  nameWithType: SecurityElement.IsValidAttributeValue(String)
  fullName: System.Security.SecurityElement.IsValidAttributeValue(String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.IsValidTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidTag(String)
  nameWithType: SecurityElement.IsValidTag(String)
  fullName: System.Security.SecurityElement.IsValidTag(String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.IsValidText(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidText(String)
  nameWithType: SecurityElement.IsValidText(String)
  fullName: System.Security.SecurityElement.IsValidText(String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.SearchForChildByTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForChildByTag(String)
  nameWithType: SecurityElement.SearchForChildByTag(String)
  fullName: System.Security.SecurityElement.SearchForChildByTag(String)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.SearchForTextOfTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForTextOfTag(String)
  nameWithType: SecurityElement.SearchForTextOfTag(String)
  fullName: System.Security.SecurityElement.SearchForTextOfTag(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.Tag
  parent: System.Security.SecurityElement
  isExternal: false
  name: Tag
  nameWithType: SecurityElement.Tag
  fullName: System.Security.SecurityElement.Tag
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.Text
  parent: System.Security.SecurityElement
  isExternal: false
  name: Text
  nameWithType: SecurityElement.Text
  fullName: System.Security.SecurityElement.Text
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.ToString
  parent: System.Security.SecurityElement
  isExternal: false
  name: ToString()
  nameWithType: SecurityElement.ToString()
  fullName: System.Security.SecurityElement.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
