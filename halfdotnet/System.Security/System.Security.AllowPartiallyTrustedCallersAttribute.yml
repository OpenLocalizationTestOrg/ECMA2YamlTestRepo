### YamlMime:ManagedReference
items:
- uid: System.Security.AllowPartiallyTrustedCallersAttribute
  id: AllowPartiallyTrustedCallersAttribute
  children:
  - System.Security.AllowPartiallyTrustedCallersAttribute.#ctor
  - System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel
  langs:
  - csharp
  name: AllowPartiallyTrustedCallersAttribute
  nameWithType: AllowPartiallyTrustedCallersAttribute
  fullName: System.Security.AllowPartiallyTrustedCallersAttribute
  type: Class
  summary: Allows an assembly to be called by partially trusted code. Without this declaration, only fully trusted callers are able to use the assembly. This class cannot be inherited.
  remarks: "> [!NOTE]\n>  The [!INCLUDE[net_v40_long](../../add/includes/net-v40-long-md.md)] introduces new security rules that affect the behavior of the AllowPartiallyTrustedCallersAttribute attribute (see [Security-Transparent Code, Level 2](../Topic/Security-Transparent%20Code,%20Level%202.md)). In the [!INCLUDE[net_v40_short](../../add/includes/net-v40-short-md.md)], all code defaults to security-transparent, that is, partially trusted. However, you can annotate individual types and members to assign them other transparency attributes. For this and other security changes, see [Security Changes](../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md).  \n  \n .NET Framework version 2.0 () assemblies must be strong-named to effectively use the AllowPartiallyTrustedCallersAttribute (APTCA) attribute. [!INCLUDE[net_v40_short](../../add/includes/net-v40-short-md.md)] () assemblies do not have to be strong-named for the APTCA attribute to be effective, and they can contain transparent, security-critical and security-safe-critical code. For more information about applying attributes at the assembly level, see [Applying Attributes](../Topic/Applying%20Attributes.md).  \n  \n By default, if a strong-named,  assembly does not explicitly apply this attribute at the assembly level, it can be called only by other assemblies that are granted full trust. This restriction is enforced by placing a <xref:System.Security.Permissions.SecurityAction> for `FullTrust` on every public or protected method on every publicly accessible class in the assembly. Assemblies that are intended to be called by partially trusted code can declare their intent through the use of AllowPartiallyTrustedCallersAttribute. An example of the declaration in C# is `[assembly:AllowPartiallyTrustedCallers]`; an example in Visual Basic is `<assembly:AllowPartiallyTrustedCallers>`.  \n  \n> [!CAUTION]\n>  The presence of this assembly-level attribute prevents the default behavior of placing `FullTrust`<xref:System.Security.Permissions.SecurityAction> security checks, and makes the assembly callable from any other (partially or fully trusted) assembly.  \n  \n When the APTCA attribute is present, all other security checks function as intended, including any class-level or method-level declarative security attributes that are present. This attribute blocks only the implicit, fully trusted caller demand.  \n  \n This is not a declarative security attribute, but a regular attribute (it derives from <xref:System.Attribute?displayProperty=fullName>, not from <xref:System.Security.Permissions.SecurityAttribute?displayProperty=fullName>).  \n  \n For more information, see [Using Libraries from Partially Trusted Code](../Topic/Using%20Libraries%20from%20Partially%20Trusted%20Code.md)."
  example:
  - "The following example shows how to use the AllowPartiallyTrustedCallersAttribute class.  \n  \n [!CODE [System.Security.AllowPartiallyTrustedCallersAttribute#1](../CodeSnippet/VS_Snippets_CLR_System/system.Security.AllowPartiallyTrustedCallersAttribute#1)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class AllowPartiallyTrustedCallersAttribute : Attribute
  inheritance:
  - System.Object
  - System.Attribute
  implements: []
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetHashCode
  - System.Attribute.IsDefaultAttribute
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.Match(System.Object)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Attribute.TypeId
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.AllowPartiallyTrustedCallersAttribute.#ctor
  id: '#ctor'
  parent: System.Security.AllowPartiallyTrustedCallersAttribute
  langs:
  - csharp
  name: AllowPartiallyTrustedCallersAttribute()
  nameWithType: AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute()
  fullName: System.Security.AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Initializes a new instance of the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute"> class.
  remarks: This attribute should be applied only at the assembly level.
  example:
  - For an example of how to use this constructor, see the code example provided for the <xref:System.Security.AllowPartiallyTrustedCallersAttribute> class.
  syntax:
    content: public AllowPartiallyTrustedCallersAttribute ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel
  id: PartialTrustVisibilityLevel
  parent: System.Security.AllowPartiallyTrustedCallersAttribute
  langs:
  - csharp
  name: PartialTrustVisibilityLevel
  nameWithType: AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel
  fullName: System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: Gets or sets the default partial trust visibility for code that is marked with the <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute"> (APTCA) attribute.
  remarks: "The following examples demonstrate how to use this property.  \n  \n-   Default, unconditional APTCA:  \n  \n    ```  \n    [assembly: AllowPartiallyTrustedCallers]  \n    ```  \n  \n     Defaults to <xref:System.Security.PartialTrustVisibilityLevel>.  \n  \n-   Explicit, unconditional APTCA:  \n  \n    ```  \n    [assembly: AllowPartiallyTrustedCallers(PartialTrustVisibilityLevel=VisibleToAllHosts)]  \n    ```  \n  \n     The assembly can always be called by partial-trust code.  \n  \n-   Explicit, conditional APTCA:  \n  \n    ```  \n    [assembly: AllowPartiallyTrustedCallers(PartialTrustVisibilityLevel=NotVisibleByDefault)]  \n    ```  \n  \n     The assembly has been audited for partial trust, but it is not visible to partial-trust code by default. To make the assembly visible to partial-trust code, add it to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A?displayProperty=fullName> property."
  syntax:
    content: public System.Security.PartialTrustVisibilityLevel PartialTrustVisibilityLevel { get; set; }
    return:
      type: System.Security.PartialTrustVisibilityLevel
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Security.AllowPartiallyTrustedCallersAttribute.#ctor
  parent: System.Security.AllowPartiallyTrustedCallersAttribute
  isExternal: false
  name: AllowPartiallyTrustedCallersAttribute()
  nameWithType: AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute()
  fullName: System.Security.AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute()
- uid: System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel
  parent: System.Security.AllowPartiallyTrustedCallersAttribute
  isExternal: false
  name: PartialTrustVisibilityLevel
  nameWithType: AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel
  fullName: System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel
- uid: System.Security.PartialTrustVisibilityLevel
  parent: System.Security
  isExternal: false
  name: PartialTrustVisibilityLevel
  nameWithType: PartialTrustVisibilityLevel
  fullName: System.Security.PartialTrustVisibilityLevel
