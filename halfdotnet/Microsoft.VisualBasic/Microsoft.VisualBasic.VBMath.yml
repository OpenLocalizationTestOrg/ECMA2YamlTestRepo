### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.VBMath
  id: VBMath
  children:
  - Microsoft.VisualBasic.VBMath.Randomize
  - Microsoft.VisualBasic.VBMath.Randomize(System.Double)
  - Microsoft.VisualBasic.VBMath.Rnd
  - Microsoft.VisualBasic.VBMath.Rnd(System.Single)
  langs:
  - csharp
  name: VBMath
  nameWithType: VBMath
  fullName: Microsoft.VisualBasic.VBMath
  type: Class
  summary: The `VbMath` module contains procedures used to perform mathematical operations.
  remarks: This module supports the Visual Basic language keywords and run-time library members for generating random numbers.
  example:
  - "This example uses the `Rnd` function to generate a random integer value in the range from 1 to 6.  \n  \n [!CODE [VbVbalrMath#21](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#21)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class VBMath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.VBMath.Randomize
  id: Randomize
  parent: Microsoft.VisualBasic.VBMath
  langs:
  - csharp
  name: Randomize()
  nameWithType: VBMath.Randomize()
  fullName: Microsoft.VisualBasic.VBMath.Randomize()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Initializes the random-number generator.
  remarks: "This overload of the `Randomize` method does not take a seed value. Instead, the value returned by the system timer is used as the new seed value.  \n  \n If `Randomize` is not used, the `Rnd` function (with no arguments) uses the same number as a seed the first time it is called, and thereafter uses the last-generated number as a seed value.  \n  \n> [!NOTE]\n>  To repeat sequences of random numbers, call `Rnd` with a negative argument immediately before using `Randomize` with a numeric argument.  \n  \n> [!IMPORTANT]\n>  Because the `Random` statement and the `Rnd` function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them. Consequently, the `Random` statement and the `Rnd` function should not be used to generate random numbers for use in cryptography. For more information, see <xref:System.Security.Cryptography.RandomNumberGenerator>."
  example:
  - "This example uses the `Randomize` statement to initialize the random-number generator. Because the number argument has been omitted, `Randomize` uses the return value from the `Timer` function as the new seed value.  \n  \n [!CODE [VbVbalrMath#21](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#21)]"
  syntax:
    content: public static void Randomize ();
    parameters: []
  overload: Microsoft.VisualBasic.VBMath.Randomize*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.VBMath.Randomize(System.Double)
  id: Randomize(System.Double)
  parent: Microsoft.VisualBasic.VBMath
  langs:
  - csharp
  name: Randomize(Double)
  nameWithType: VBMath.Randomize(Double)
  fullName: Microsoft.VisualBasic.VBMath.Randomize(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Initializes the random-number generator.
  remarks: "`Randomize` uses  to initialize the `Rnd` function's random-number generator, giving it a new seed value. If you omit , the value returned by the system timer is used as the new seed value.  \n  \n If `Randomize` is not used, the `Rnd` function (with no arguments) uses the same number as a seed the first time it is called, and thereafter uses the last-generated number as a seed value.  \n  \n> [!NOTE]\n>  To repeat sequences of random numbers, call `Rnd` with a negative argument immediately before using `Randomize` with a numeric argument. Using `Randomize` with the same value for  does not repeat the previous sequence.  \n  \n> [!IMPORTANT]\n>  Because the `Random` statement and the `Rnd` function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them. Consequently, the `Random` statement and the `Rnd` function should not be used to generate random numbers for use in cryptography. For more information, see <xref:System.Security.Cryptography.RandomNumberGenerator>."
  example:
  - "This example uses the `Randomize` statement to initialize the random-number generator. Because the number argument has been omitted, `Randomize` uses the return value from the `Timer` function as the new seed value.  \n  \n [!CODE [VbVbalrMath#21](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#21)]"
  syntax:
    content: public static void Randomize (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: Optional. An `Object` or any valid numeric expression.
  overload: Microsoft.VisualBasic.VBMath.Randomize*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.VBMath.Rnd
  id: Rnd
  parent: Microsoft.VisualBasic.VBMath
  langs:
  - csharp
  name: Rnd()
  nameWithType: VBMath.Rnd()
  fullName: Microsoft.VisualBasic.VBMath.Rnd()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a random number of type `Single`.
  remarks: "The `Rnd` function returns a value less than 1, but greater than or equal to zero.  \n  \n Before calling `Rnd`, use the `Randomize` statement without an argument to initialize the random-number generator with a seed based on the system timer.  \n  \n To produce random integers in a given range, use the following formula.  \n  \n [!CODE [VbVbalrMath#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#30)]  \n  \n Here, `upperbound` is the highest number in the range, and `lowerbound` is the lowest number in the range.  \n  \n> [!NOTE]\n>  To repeat sequences of random numbers, call `Rnd` with a negative argument immediately before using `Randomize` with a numeric argument.  \n  \n> [!IMPORTANT]\n>  Because the `Random` statement and the `Rnd` function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them. Consequently, the `Random` statement and the `Rnd` function should not be used to generate random numbers for use in cryptography."
  example:
  - "This example uses the `Rnd` function to generate a random integer value in the range from 1 to 6.  \n  \n [!CODE [VbVbalrMath#21](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#21)]"
  syntax:
    content: public static float Rnd ();
    parameters: []
    return:
      type: System.Single
      description: The next random number in the sequence.
  overload: Microsoft.VisualBasic.VBMath.Rnd*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.VBMath.Rnd(System.Single)
  id: Rnd(System.Single)
  parent: Microsoft.VisualBasic.VBMath
  langs:
  - csharp
  name: Rnd(Single)
  nameWithType: VBMath.Rnd(Single)
  fullName: Microsoft.VisualBasic.VBMath.Rnd(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a random number of type `Single`.
  remarks: "The `Rnd` function returns a value less than 1, but greater than or equal to zero.  \n  \n The value of  determines how `Rnd` generates a random number.  \n  \n For any given initial seed, the same number sequence is generated because each successive call to the `Rnd` function uses the previously generated number as a seed for the next number in the sequence.  \n  \n Before calling `Rnd`, use the `Randomize` statement without an argument to initialize the random-number generator with a seed based on the system timer.  \n  \n To produce random integers in a given range, use the following formula.  \n  \n [!CODE [VbVbalrMath#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#30)]  \n  \n Here, `upperbound` is the highest number in the range, and `lowerbound` is the lowest number in the range.  \n  \n> [!NOTE]\n>  To repeat sequences of random numbers, call `Rnd` with a negative argument immediately before using `Randomize` with a numeric argument. Using `Randomize` with the same value for  does not repeat the previous sequence.  \n  \n> [!IMPORTANT]\n>  Because the `Random` statement and the `Rnd` function start with a seed value and generate numbers that fall within a finite range, the results may be predictable by someone who knows the algorithm used to generate them. Consequently, the `Random` statement and the `Rnd` function should not be used to generate random numbers for use in cryptography."
  example:
  - "This example uses the `Rnd` function to generate a random integer value in the range from 1 to 6.  \n  \n [!CODE [VbVbalrMath#21](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#21)]"
  syntax:
    content: public static float Rnd (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: Optional. A `Single` value or any valid `Single` expression.
    return:
      type: System.Single
      description: If number is less than zero, Rnd generates the same number every time, using  as the seed. If number is greater than zero, Rnd generates the next random number in the sequence. If number is equal to zero, Rnd generates the most recently generated number. If number is not supplied, Rnd generates the next random number in the sequence.
  overload: Microsoft.VisualBasic.VBMath.Rnd*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.VisualBasic.VBMath.Randomize
  parent: Microsoft.VisualBasic.VBMath
  isExternal: false
  name: Randomize()
  nameWithType: VBMath.Randomize()
  fullName: Microsoft.VisualBasic.VBMath.Randomize()
- uid: Microsoft.VisualBasic.VBMath.Randomize(System.Double)
  parent: Microsoft.VisualBasic.VBMath
  isExternal: false
  name: Randomize(Double)
  nameWithType: VBMath.Randomize(Double)
  fullName: Microsoft.VisualBasic.VBMath.Randomize(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.VBMath.Rnd
  parent: Microsoft.VisualBasic.VBMath
  isExternal: false
  name: Rnd()
  nameWithType: VBMath.Rnd()
  fullName: Microsoft.VisualBasic.VBMath.Rnd()
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.VBMath.Rnd(System.Single)
  parent: Microsoft.VisualBasic.VBMath
  isExternal: false
  name: Rnd(Single)
  nameWithType: VBMath.Rnd(Single)
  fullName: Microsoft.VisualBasic.VBMath.Rnd(Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.VBMath.Randomize*
  parent: Microsoft.VisualBasic.VBMath
  isExternal: false
  nameWithType: VBMath.
- uid: Microsoft.VisualBasic.VBMath.Rnd*
  parent: Microsoft.VisualBasic.VBMath
  isExternal: false
  nameWithType: VBMath.
