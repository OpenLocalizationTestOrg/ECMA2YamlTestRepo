### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Conversion
  id: Conversion
  children:
  - Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  - Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  - Microsoft.VisualBasic.Conversion.ErrorToString
  - Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  - Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  - Microsoft.VisualBasic.Conversion.Fix(System.Double)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  - Microsoft.VisualBasic.Conversion.Fix(System.Object)
  - Microsoft.VisualBasic.Conversion.Fix(System.Single)
  - Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  - Microsoft.VisualBasic.Conversion.Hex(System.Object)
  - Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  - Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  - Microsoft.VisualBasic.Conversion.Int(System.Double)
  - Microsoft.VisualBasic.Conversion.Int(System.Int16)
  - Microsoft.VisualBasic.Conversion.Int(System.Int32)
  - Microsoft.VisualBasic.Conversion.Int(System.Int64)
  - Microsoft.VisualBasic.Conversion.Int(System.Object)
  - Microsoft.VisualBasic.Conversion.Int(System.Single)
  - Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  - Microsoft.VisualBasic.Conversion.Oct(System.Object)
  - Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  - Microsoft.VisualBasic.Conversion.Str(System.Object)
  - Microsoft.VisualBasic.Conversion.Val(System.Char)
  - Microsoft.VisualBasic.Conversion.Val(System.Object)
  - Microsoft.VisualBasic.Conversion.Val(System.String)
  langs:
  - csharp
  name: Conversion
  nameWithType: Conversion
  fullName: Microsoft.VisualBasic.Conversion
  type: Class
  summary: The `Conversion` module contains the procedures used to perform various conversion operations.
  remarks: This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!CODE [VbVbalrStrings#16](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#16)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Conversion
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  id: CTypeDynamic(System.Object,System.Type)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: CTypeDynamic(Object,Type)
  nameWithType: Conversion.CTypeDynamic(Object,Type)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Converts an object to the specified type.
  remarks: "The `CTypeDynamic` method converts the object passed as the  parameter to the type specified by the  parameter. If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.  \n  \n The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions."
  example:
  - "The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.  \n  \n```vb#  \nImports System.Dynamic  \n  \nModule Module1  \n    Sub Main()  \n        Dim dyn As Object = New SampleDynamicObject  \n        Dim sampleString = CTypeDynamic(dyn, GetType(String))  \n        Console.WriteLine(sampleString)  \n    End Sub  \nEnd Module  \n  \nClass SampleDynamicObject  \n    Inherits DynamicObject  \n  \n    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  \n                                         ByRef result As Object) As Boolean  \n  \n        If binder.Type = GetType(String) Then  \n            result = \"Sample String\"  \n            Return True  \n        End If  \n  \n        Return False  \n    End Function  \nEnd Class  \n```"
  syntax:
    content: public static object CTypeDynamic (object Expression, Type TargetType);
    parameters:
    - id: Expression
      type: System.Object
      description: The object to convert.
    - id: TargetType
      type: System.Type
      description: The type to which to convert the object.
    return:
      type: System.Object
      description: An object whose type at run time is the requested target type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  id: CTypeDynamic``1(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: CTypeDynamic(Object)
  nameWithType: Conversion.CTypeDynamic(Object)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static TargetType CTypeDynamic<TargetType> (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: To be added.
    return:
      type: TargetType
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.ErrorToString
  id: ErrorToString
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: ErrorToString()
  nameWithType: Conversion.ErrorToString()
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns the error message that corresponds to a given error number.
  remarks: "The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If no run-time error has occurred, `ErrorToString` returns a zero-length string (\"\").  \n  \n In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function."
  example:
  - "The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \n  \n [!CODE [VbVbalrCatRef#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#4)]"
  syntax:
    content: public static string ErrorToString ();
    parameters: []
    return:
      type: System.String
      description: The error message that corresponds to the most recent run-time error.
  overload: Microsoft.VisualBasic.Conversion.ErrorToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  id: ErrorToString(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: ErrorToString(Int32)
  nameWithType: Conversion.ErrorToString(Int32)
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns the error message that corresponds to a given error number.
  remarks: "The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If  is a valid error number but is not defined, `ErrorToString` returns the string `\"Application-defined or object-defined error.\"` If  is not valid, an error occurs. If  is omitted, the message corresponding to the most recent run-time error is returned. If no run-time error has occurred or  is 0, `ErrorToString` returns a zero-length string (\"\").  \n  \n In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function."
  example:
  - "The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \n  \n [!CODE [VbVbalrCatRef#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrCatRef#4)]"
  syntax:
    content: public static string ErrorToString (int ErrorNumber);
    parameters:
    - id: ErrorNumber
      type: System.Int32
      description: Optional. Any valid error number.
    return:
      type: System.String
      description: The error message that corresponds to a given error number.
  overload: Microsoft.VisualBasic.Conversion.ErrorToString*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  id: Fix(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Decimal)
  nameWithType: Conversion.Fix(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static decimal Fix (decimal Number);
    parameters:
    - id: Number
      type: System.Decimal
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Decimal
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Fix*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)
  id: Fix(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Double)
  nameWithType: Conversion.Fix(Double)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static double Fix (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Double
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Fix*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  id: Fix(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int16)
  nameWithType: Conversion.Fix(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static short Fix (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Int16
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Fix*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  id: Fix(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int32)
  nameWithType: Conversion.Fix(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static int Fix (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Int32
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Fix*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  id: Fix(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int64)
  nameWithType: Conversion.Fix(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static long Fix (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Int64
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Fix*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)
  id: Fix(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Object)
  nameWithType: Conversion.Fix(Object)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static object Fix (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Object
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Fix*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)
  id: Fix(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Single)
  nameWithType: Conversion.Fix(Single)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static float Fix (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Single
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Fix*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  id: Hex(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Byte)
  nameWithType: Conversion.Hex(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the hexadecimal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If  is|Hex returns|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!CODE [VbVbalrStrings#16](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#16)]"
  syntax:
    content: public static string Hex (byte Number);
    parameters:
    - id: Number
      type: System.Byte
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the hexadecimal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Hex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  id: Hex(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int16)
  nameWithType: Conversion.Hex(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the hexadecimal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If  is|Hex returns|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!CODE [VbVbalrStrings#16](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#16)]"
  syntax:
    content: public static string Hex (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the hexadecimal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Hex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  id: Hex(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int32)
  nameWithType: Conversion.Hex(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the hexadecimal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If  is|Hex returns|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!CODE [VbVbalrStrings#16](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#16)]"
  syntax:
    content: public static string Hex (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the hexadecimal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Hex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  id: Hex(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int64)
  nameWithType: Conversion.Hex(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the hexadecimal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If  is|Hex returns|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!CODE [VbVbalrStrings#16](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#16)]"
  syntax:
    content: public static string Hex (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the hexadecimal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Hex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)
  id: Hex(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Object)
  nameWithType: Conversion.Hex(Object)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the hexadecimal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If  is|Hex returns|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!CODE [VbVbalrStrings#16](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#16)]"
  syntax:
    content: public static string Hex (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the hexadecimal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Hex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  id: Hex(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(SByte)
  nameWithType: Conversion.Hex(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the hexadecimal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If  is|Hex returns|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!CODE [VbVbalrStrings#16](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#16)]"
  syntax:
    content: public static string Hex (sbyte Number);
    parameters:
    - id: Number
      type: System.SByte
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the hexadecimal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Hex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  id: Hex(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt16)
  nameWithType: Conversion.Hex(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the hexadecimal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If  is|Hex returns|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!CODE [VbVbalrStrings#16](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#16)]"
  syntax:
    content: public static string Hex (ushort Number);
    parameters:
    - id: Number
      type: System.UInt16
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the hexadecimal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Hex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  id: Hex(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt32)
  nameWithType: Conversion.Hex(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the hexadecimal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If  is|Hex returns|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!CODE [VbVbalrStrings#16](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#16)]"
  syntax:
    content: public static string Hex (uint Number);
    parameters:
    - id: Number
      type: System.UInt32
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the hexadecimal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Hex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  id: Hex(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt64)
  nameWithType: Conversion.Hex(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the hexadecimal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If  is|Hex returns|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!CODE [VbVbalrStrings#16](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#16)]"
  syntax:
    content: public static string Hex (ulong Number);
    parameters:
    - id: Number
      type: System.UInt64
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the hexadecimal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Hex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  id: Int(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Decimal)
  nameWithType: Conversion.Int(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static decimal Int (decimal Number);
    parameters:
    - id: Number
      type: System.Decimal
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Decimal
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Int*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)
  id: Int(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Double)
  nameWithType: Conversion.Int(Double)
  fullName: Microsoft.VisualBasic.Conversion.Int(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static double Int (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Double
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Int*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)
  id: Int(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int16)
  nameWithType: Conversion.Int(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static short Int (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Int16
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Int*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)
  id: Int(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int32)
  nameWithType: Conversion.Int(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static int Int (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Int32
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Int*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)
  id: Int(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int64)
  nameWithType: Conversion.Int(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static long Int (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Int64
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Int*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)
  id: Int(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Object)
  nameWithType: Conversion.Int(Object)
  fullName: Microsoft.VisualBasic.Conversion.Int(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static object Int (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Object
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Int*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)
  id: Int(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Single)
  nameWithType: Conversion.Int(Single)
  fullName: Microsoft.VisualBasic.Conversion.Int(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Return the integer portion of a number.
  remarks: "Both the `Int` and `Fix` functions remove the fractional part of  and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if  is negative, `Int` returns the first negative integer less than or equal to , whereas `Fix` returns the first negative integer greater than or equal to . For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!CODE [VbVbalrMath#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#4)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!CODE [VbVbalrMath#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#5)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!CODE [VbVbalrMath#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMath#6)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](../Topic/Type%20Conversion%20Functions%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public static float Int (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: Required. A number of type `Double` or any valid numeric expression. If  contains `Nothing`, `Nothing` is returned.
    return:
      type: System.Single
      description: Return the integer portion of a number.
  overload: Microsoft.VisualBasic.Conversion.Int*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  id: Oct(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Byte)
  nameWithType: Conversion.Oct(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the octal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If Number is|Oct returns|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!CODE [VbVbalrStrings#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#30)]"
  syntax:
    content: public static string Oct (byte Number);
    parameters:
    - id: Number
      type: System.Byte
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the octal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Oct*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  id: Oct(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int16)
  nameWithType: Conversion.Oct(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the octal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If Number is|Oct returns|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!CODE [VbVbalrStrings#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#30)]"
  syntax:
    content: public static string Oct (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the octal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Oct*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  id: Oct(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int32)
  nameWithType: Conversion.Oct(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the octal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If Number is|Oct returns|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!CODE [VbVbalrStrings#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#30)]"
  syntax:
    content: public static string Oct (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the octal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Oct*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  id: Oct(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int64)
  nameWithType: Conversion.Oct(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the octal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If Number is|Oct returns|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!CODE [VbVbalrStrings#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#30)]"
  syntax:
    content: public static string Oct (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the octal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Oct*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)
  id: Oct(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Object)
  nameWithType: Conversion.Oct(Object)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the octal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If Number is|Oct returns|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!CODE [VbVbalrStrings#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#30)]"
  syntax:
    content: public static string Oct (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the octal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Oct*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  id: Oct(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(SByte)
  nameWithType: Conversion.Oct(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the octal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If Number is|Oct returns|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!CODE [VbVbalrStrings#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#30)]"
  syntax:
    content: public static string Oct (sbyte Number);
    parameters:
    - id: Number
      type: System.SByte
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the octal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Oct*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  id: Oct(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt16)
  nameWithType: Conversion.Oct(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the octal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If Number is|Oct returns|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!CODE [VbVbalrStrings#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#30)]"
  syntax:
    content: public static string Oct (ushort Number);
    parameters:
    - id: Number
      type: System.UInt16
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the octal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Oct*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  id: Oct(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt32)
  nameWithType: Conversion.Oct(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the octal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If Number is|Oct returns|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!CODE [VbVbalrStrings#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#30)]"
  syntax:
    content: public static string Oct (uint Number);
    parameters:
    - id: Number
      type: System.UInt32
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the octal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Oct*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  id: Oct(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt64)
  nameWithType: Conversion.Oct(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a string representing the octal value of a number.
  remarks: "If  is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|||  \n|-|-|  \n|If Number is|Oct returns|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!CODE [VbVbalrStrings#30](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#30)]"
  syntax:
    content: public static string Oct (ulong Number);
    parameters:
    - id: Number
      type: System.UInt64
      description: Required. Any valid numeric expression or `String` expression.
    return:
      type: System.String
      description: Returns a string representing the octal value of a number.
  overload: Microsoft.VisualBasic.Conversion.Oct*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)
  id: Str(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Str(Object)
  nameWithType: Conversion.Str(Object)
  fullName: Microsoft.VisualBasic.Conversion.Str(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns a `String` representation of a number.
  remarks: "When numbers are converted to strings, a leading space is always reserved for the sign of . If  is positive, the returned string contains a leading space, and the plus sign is implied. A negative number will include the minus sign (-) and no leading space.  \n  \n Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats. Unlike the `Str` function, the `Format` function does not include a leading space for the sign of .  \n  \n> [!NOTE]\n>  The `Str` function recognizes only the period (`.`) as a valid decimal separator. If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string. To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method. For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string."
  example:
  - "This example uses the `Str` function to return a `String` representation of a number. When a positive number is converted to a string, a leading space is always reserved for its sign.  \n  \n [!CODE [VbVbalrStrings#1](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrStrings#1)]"
  syntax:
    content: public static string Str (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: Required. An `Object` containing any valid numeric expression.
    return:
      type: System.String
      description: Returns a `String` representation of a number.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)
  id: Val(System.Char)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(Char)
  nameWithType: Conversion.Val(Char)
  fullName: Microsoft.VisualBasic.Conversion.Val(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns the numbers contained in a string as a numeric value of appropriate type.
  remarks: "The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are stripped from the argument.  \n  \n The following call returns the value 1615198.  \n  \n```  \n  \nVal(\" 1615 198th Street N.E.\")   \n```  \n  \n The following call returns the decimal value -1.  \n  \n```  \n  \nVal(\"&HFFFF\")   \n```  \n  \n> [!NOTE]\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \n>   \n>  `' These examples cause run-time errors.`  \n>   \n>  `'Console.WriteLine(Val(\"1.34%\"))`  \n>   \n>  `'Console.WriteLine(Val(\"1.34&\"))`  \n>   \n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.  \n>   \n>  `' These examples cause compiler errors.`  \n>   \n>  `'Dim m = 1.34%`  \n>   \n>  `'Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!CODE [VbVbalrFunctions#54](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#54)]"
  syntax:
    content: public static int Val (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: Required. Any valid `String` expression, `Object` variable, or `Char` value. If  is of type `Object`, its value must be convertible to `String` or an <see cref="T:System.ArgumentException"> error occurs.
    return:
      type: System.Int32
      description: Returns the numbers contained in a string as a numeric value of appropriate type.
  overload: Microsoft.VisualBasic.Conversion.Val*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)
  id: Val(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(Object)
  nameWithType: Conversion.Val(Object)
  fullName: Microsoft.VisualBasic.Conversion.Val(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns the numbers contained in a string as a numeric value of appropriate type.
  remarks: "The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.  \n  \n The following call returns the value 1234123.  \n  \n```  \n  \nVal(\" 1234 123th Street N.E.\")   \n```  \n  \n The following call returns the decimal value -1.  \n  \n```  \n  \nVal(\"&HFFFF\")   \n```  \n  \n> [!NOTE]\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \n>   \n>  `' These examples cause run-time errors.`  \n>   \n>  `'Console.WriteLine(Val(\"1.34%\"))`  \n>   \n>  `'Console.WriteLine(Val(\"1.34&\"))`  \n>   \n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.  \n>   \n>  `' These examples cause compiler errors.`  \n>   \n>  `'Dim m = 1.34%`  \n>   \n>  `'Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!CODE [VbVbalrFunctions#54](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#54)]"
  syntax:
    content: public static double Val (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: Required. Any valid `String` expression, `Object` variable, or `Char` value. If  is of type `Object`, its value must be convertible to `String` or an <see cref="T:System.ArgumentException"> error occurs.
    return:
      type: System.Double
      description: Returns the numbers contained in a string as a numeric value of appropriate type.
  overload: Microsoft.VisualBasic.Conversion.Val*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.VisualBasic.Conversion.Val(System.String)
  id: Val(System.String)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(String)
  nameWithType: Conversion.Val(String)
  fullName: Microsoft.VisualBasic.Conversion.Val(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: Returns the numbers contained in a string as a numeric value of appropriate type.
  remarks: "The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.  \n  \n The following call returns the value 1234123.  \n  \n```  \n  \nVal(\" 1234 123th Street N.E.\")   \n```  \n  \n The following call returns the decimal value -1.  \n  \n```  \n  \nVal(\"&HFFFF\")   \n```  \n  \n> [!NOTE]\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \n>   \n>  `' These examples cause run-time errors.`  \n>   \n>  `'Console.WriteLine(Val(\"1.34%\"))`  \n>   \n>  `'Console.WriteLine(Val(\"1.34&\"))`  \n>   \n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.  \n>   \n>  `' These examples cause compiler errors.`  \n>   \n>  `'Dim m = 1.34%`  \n>   \n>  `'Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!CODE [VbVbalrFunctions#54](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrFunctions#54)]"
  syntax:
    content: public static double Val (string InputStr);
    parameters:
    - id: InputStr
      type: System.String
      description: Required. Any valid `String` expression, `Object` variable, or `Char` value. If  is of type `Object`, its value must be convertible to `String` or an <see cref="T:System.ArgumentException"> error occurs.
    return:
      type: System.Double
      description: Returns the numbers contained in a string as a numeric value of appropriate type.
  overload: Microsoft.VisualBasic.Conversion.Val*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic(Object,Type)
  nameWithType: Conversion.CTypeDynamic(Object,Type)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic(Object)
  nameWithType: Conversion.CTypeDynamic(Object)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)
- uid: TargetType
  parent: ''
  isExternal: true
  name: TargetType
  nameWithType: TargetType
  fullName: TargetType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.VisualBasic.Conversion.ErrorToString
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString()
  nameWithType: Conversion.ErrorToString()
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString(Int32)
  nameWithType: Conversion.ErrorToString(Int32)
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Decimal)
  nameWithType: Conversion.Fix(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Double)
  nameWithType: Conversion.Fix(Double)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int16)
  nameWithType: Conversion.Fix(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int32)
  nameWithType: Conversion.Fix(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int64)
  nameWithType: Conversion.Fix(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Object)
  nameWithType: Conversion.Fix(Object)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Single)
  nameWithType: Conversion.Fix(Single)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Byte)
  nameWithType: Conversion.Hex(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int16)
  nameWithType: Conversion.Hex(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int32)
  nameWithType: Conversion.Hex(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int64)
  nameWithType: Conversion.Hex(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Object)
  nameWithType: Conversion.Hex(Object)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(SByte)
  nameWithType: Conversion.Hex(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt16)
  nameWithType: Conversion.Hex(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt32)
  nameWithType: Conversion.Hex(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt64)
  nameWithType: Conversion.Hex(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Decimal)
  nameWithType: Conversion.Int(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Double)
  nameWithType: Conversion.Int(Double)
  fullName: Microsoft.VisualBasic.Conversion.Int(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int16)
  nameWithType: Conversion.Int(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int32)
  nameWithType: Conversion.Int(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int64)
  nameWithType: Conversion.Int(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Object)
  nameWithType: Conversion.Int(Object)
  fullName: Microsoft.VisualBasic.Conversion.Int(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Single)
  nameWithType: Conversion.Int(Single)
  fullName: Microsoft.VisualBasic.Conversion.Int(Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Byte)
  nameWithType: Conversion.Oct(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int16)
  nameWithType: Conversion.Oct(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int32)
  nameWithType: Conversion.Oct(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int64)
  nameWithType: Conversion.Oct(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Object)
  nameWithType: Conversion.Oct(Object)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(SByte)
  nameWithType: Conversion.Oct(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt16)
  nameWithType: Conversion.Oct(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt32)
  nameWithType: Conversion.Oct(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt64)
  nameWithType: Conversion.Oct(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Str(Object)
  nameWithType: Conversion.Str(Object)
  fullName: Microsoft.VisualBasic.Conversion.Str(Object)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(Char)
  nameWithType: Conversion.Val(Char)
  fullName: Microsoft.VisualBasic.Conversion.Val(Char)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(Object)
  nameWithType: Conversion.Val(Object)
  fullName: Microsoft.VisualBasic.Conversion.Val(Object)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.VisualBasic.Conversion.Val(System.String)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(String)
  nameWithType: Conversion.Val(String)
  fullName: Microsoft.VisualBasic.Conversion.Val(String)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Conversion.ErrorToString*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  nameWithType: Conversion.
- uid: Microsoft.VisualBasic.Conversion.Fix*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  nameWithType: Conversion.
- uid: Microsoft.VisualBasic.Conversion.Hex*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  nameWithType: Conversion.
- uid: Microsoft.VisualBasic.Conversion.Int*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  nameWithType: Conversion.
- uid: Microsoft.VisualBasic.Conversion.Oct*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  nameWithType: Conversion.
- uid: Microsoft.VisualBasic.Conversion.Val*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  nameWithType: Conversion.
