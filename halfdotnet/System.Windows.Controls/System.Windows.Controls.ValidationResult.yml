### YamlMime:ManagedReference
items:
- uid: System.Windows.Controls.ValidationResult
  id: ValidationResult
  children:
  - System.Windows.Controls.ValidationResult.#ctor(System.Boolean,System.Object)
  - System.Windows.Controls.ValidationResult.Equals(System.Object)
  - System.Windows.Controls.ValidationResult.ErrorContent
  - System.Windows.Controls.ValidationResult.GetHashCode
  - System.Windows.Controls.ValidationResult.IsValid
  - System.Windows.Controls.ValidationResult.op_Equality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)
  - System.Windows.Controls.ValidationResult.op_Inequality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)
  - System.Windows.Controls.ValidationResult.ValidResult
  langs:
  - csharp
  name: ValidationResult
  nameWithType: ValidationResult
  fullName: System.Windows.Controls.ValidationResult
  type: Class
  summary: Represents the result returned by the <see cref="T:System.Windows.Controls.ValidationRule">.<xref:System.Windows.Controls.ValidationRule.Validate%2A> method that indicates whether the checked value passed the <see cref="T:System.Windows.Controls.ValidationRule">.
  remarks: "The [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] data binding model enables you to associate <xref:System.Windows.Data.Binding.ValidationRules%2A> with your <xref:System.Windows.Data.Binding> or <xref:System.Windows.Data.MultiBinding> object. You can create custom rules by subclassing the <xref:System.Windows.Controls.ValidationRule> class and implementing the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method returns a ValidationResult object to report whether the checked value is valid.  \n  \n For a detailed discussion of the validation process, see \"Data Validation\" in [Data Binding Overview](../Topic/Data%20Binding%20Overview.md)."
  example:
  - "The following example shows the implementation of a validation rule that marks the input value as invalid if it contains non-numeric characters or outside the lower and upper bounds. If the value is invalid, the <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> property and the <xref:System.Windows.Controls.ValidationResult.IsValid%2A> property of the returned ValidationResult are set to the appropriate error message and `false` respectively.  \n  \n For the complete example, see [How to: Implement Binding Validation](../Topic/How%20to:%20Implement%20Binding%20Validation.md).  \n  \n [!code-cs[BindValidation#3](../../add/codesnippet/CSharp/BindingValidation/AgeRangeRule.cs#3)]"
  syntax:
    content: public class ValidationResult
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Controls.ValidationResult.#ctor(System.Boolean,System.Object)
  id: '#ctor(System.Boolean,System.Object)'
  parent: System.Windows.Controls.ValidationResult
  langs:
  - csharp
  name: ValidationResult(Boolean,Object)
  nameWithType: ValidationResult.ValidationResult(Boolean,Object)
  fullName: System.Windows.Controls.ValidationResult.ValidationResult(Boolean,Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: Initializes a new instance of the <see cref="T:System.Windows.Controls.ValidationResult"> class.
  remarks: "The [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] data binding model enables you to associate <xref:System.Windows.Data.Binding.ValidationRules%2A> with your <xref:System.Windows.Data.Binding> or <xref:System.Windows.Data.MultiBinding> object. You can create custom rules by subclassing the <xref:System.Windows.Controls.ValidationRule> class and implementing the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method returns a <xref:System.Windows.Controls.ValidationResult> object to report whether the checked value is valid.  \n  \n For a detailed discussion of the validation process, see \"Data Validation\" in [Data Binding Overview](../Topic/Data%20Binding%20Overview.md)."
  example:
  - "The following example shows the implementation of a validation rule that marks the input value as invalid if it contains non-numeric characters or outside the lower and upper bounds. If the value is invalid, the <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> property and the <xref:System.Windows.Controls.ValidationResult.IsValid%2A> property of the returned <xref:System.Windows.Controls.ValidationResult> are set to the appropriate error message and `false` respectively.  \n  \n For the complete example, see [How to: Implement Binding Validation](../Topic/How%20to:%20Implement%20Binding%20Validation.md).  \n  \n [!code-cs[BindValidation#3](../../add/codesnippet/CSharp/BindingValidation/AgeRangeRule.cs#3)]"
  syntax:
    content: public ValidationResult (bool isValid, object errorContent);
    parameters:
    - id: isValid
      type: System.Boolean
      description: Whether or not the value checked against the <see cref="T:System.Windows.Controls.ValidationRule"> is valid.
    - id: errorContent
      type: System.Object
      description: Information about the invalidity.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Controls.ValidationResult.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Controls.ValidationResult
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ValidationResult.Equals(Object)
  fullName: System.Windows.Controls.ValidationResult.Equals(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: Compares the specified instance and the current instance of <see cref="T:System.Windows.Controls.ValidationResult"> for value equality.
  remarks: This method is called by the operator overrides.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The <see cref="T:System.Windows.Controls.ValidationResult"> instance to compare.
    return:
      type: System.Boolean
      description: '`true` if  and this instance of <see cref="T:System.Windows.Controls.ValidationResult">.have the same values.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Controls.ValidationResult.ErrorContent
  id: ErrorContent
  parent: System.Windows.Controls.ValidationResult
  langs:
  - csharp
  name: ErrorContent
  nameWithType: ValidationResult.ErrorContent
  fullName: System.Windows.Controls.ValidationResult.ErrorContent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: Gets an object that provides additional information about the invalidity.
  remarks: "The [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] data binding model enables you to associate <xref:System.Windows.Data.Binding.ValidationRules%2A> with your <xref:System.Windows.Data.Binding> or <xref:System.Windows.Data.MultiBinding> object. You can create custom rules by subclassing the <xref:System.Windows.Controls.ValidationRule> class and implementing the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method returns a <xref:System.Windows.Controls.ValidationResult> object to report whether the checked value is valid.  \n  \n For a detailed discussion of the validation process, see \"Data Validation\" in [Data Binding Overview](../Topic/Data%20Binding%20Overview.md)."
  example:
  - "The following example shows the implementation of a validation rule that marks the input value as invalid if it contains non-numeric characters or outside the lower and upper bounds. If the value is invalid, the ErrorContent property and the <xref:System.Windows.Controls.ValidationResult.IsValid%2A> property of the returned <xref:System.Windows.Controls.ValidationResult> are set to the appropriate error message and `false` respectively.  \n  \n For the complete example, see [How to: Implement Binding Validation](../Topic/How%20to:%20Implement%20Binding%20Validation.md).  \n  \n [!code-cs[BindValidation#3](../../add/codesnippet/CSharp/BindingValidation/AgeRangeRule.cs#3)]"
  syntax:
    content: public object ErrorContent { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Controls.ValidationResult.GetHashCode
  id: GetHashCode
  parent: System.Windows.Controls.ValidationResult
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ValidationResult.GetHashCode()
  fullName: System.Windows.Controls.ValidationResult.GetHashCode()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: Returns the hash code for this <see cref="T:System.Windows.Controls.ValidationResult">.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: The hash code for this <see cref="T:System.Windows.Controls.ValidationResult">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Controls.ValidationResult.IsValid
  id: IsValid
  parent: System.Windows.Controls.ValidationResult
  langs:
  - csharp
  name: IsValid
  nameWithType: ValidationResult.IsValid
  fullName: System.Windows.Controls.ValidationResult.IsValid
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: Gets a value that indicates whether the value checked against the <see cref="T:System.Windows.Controls.ValidationRule"> is valid.
  remarks: "The [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] data binding model enables you to associate <xref:System.Windows.Data.Binding.ValidationRules%2A> with your <xref:System.Windows.Data.Binding> or <xref:System.Windows.Data.MultiBinding> object. You can create custom rules by subclassing the <xref:System.Windows.Controls.ValidationRule> class and implementing the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method. The <xref:System.Windows.Controls.ValidationRule.Validate%2A> method returns a <xref:System.Windows.Controls.ValidationResult> object to report whether the checked value is valid.  \n  \n For a detailed discussion of the validation process, see \"Data Validation\" in [Data Binding Overview](../Topic/Data%20Binding%20Overview.md)."
  example:
  - "The following example shows the implementation of a validation rule that marks the input value as invalid if it contains non-numeric characters or outside the lower and upper bounds. If the value is invalid, the <xref:System.Windows.Controls.ValidationResult.ErrorContent%2A> property and the IsValid property of the returned <xref:System.Windows.Controls.ValidationResult> are set to the appropriate error message and `false` respectively.  \n  \n For the complete example, see [How to: Implement Binding Validation](../Topic/How%20to:%20Implement%20Binding%20Validation.md).  \n  \n [!code-cs[BindValidation#3](../../add/codesnippet/CSharp/BindingValidation/AgeRangeRule.cs#3)]"
  syntax:
    content: public bool IsValid { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Controls.ValidationResult.op_Equality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)
  id: op_Equality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)
  parent: System.Windows.Controls.ValidationResult
  langs:
  - csharp
  name: op_Equality(ValidationResult,ValidationResult)
  nameWithType: ValidationResult.op_Equality(ValidationResult,ValidationResult)
  fullName: System.Windows.Controls.ValidationResult.op_Equality(ValidationResult,ValidationResult)
  type: Operator
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: Compares two <see cref="T:System.Windows.Controls.ValidationResult"> objects for value equality.
  remarks: To be added.
  syntax:
    content: public static bool op_Equality (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);
    parameters:
    - id: left
      type: System.Windows.Controls.ValidationResult
      description: The first instance to compare.
    - id: right
      type: System.Windows.Controls.ValidationResult
      description: The second instance to compare.
    return:
      type: System.Boolean
      description: '`true` if the two objects are equal; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Controls.ValidationResult.op_Inequality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)
  id: op_Inequality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)
  parent: System.Windows.Controls.ValidationResult
  langs:
  - csharp
  name: op_Inequality(ValidationResult,ValidationResult)
  nameWithType: ValidationResult.op_Inequality(ValidationResult,ValidationResult)
  fullName: System.Windows.Controls.ValidationResult.op_Inequality(ValidationResult,ValidationResult)
  type: Operator
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: Compares two <see cref="T:System.Windows.Controls.ValidationResult"> objects for value inequality.
  remarks: To be added.
  syntax:
    content: public static bool op_Inequality (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);
    parameters:
    - id: left
      type: System.Windows.Controls.ValidationResult
      description: The first instance to compare.
    - id: right
      type: System.Windows.Controls.ValidationResult
      description: The second instance to compare.
    return:
      type: System.Boolean
      description: '`true` if the values are not equal; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Controls.ValidationResult.ValidResult
  id: ValidResult
  parent: System.Windows.Controls.ValidationResult
  langs:
  - csharp
  name: ValidResult
  nameWithType: ValidationResult.ValidResult
  fullName: System.Windows.Controls.ValidationResult.ValidResult
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Controls
  summary: Gets a valid instance of <see cref="T:System.Windows.Controls.ValidationResult">.
  remarks: To be added.
  syntax:
    content: public static System.Windows.Controls.ValidationResult ValidResult { get; }
    return:
      type: System.Windows.Controls.ValidationResult
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Controls.ValidationResult.#ctor(System.Boolean,System.Object)
  parent: System.Windows.Controls.ValidationResult
  isExternal: false
  name: ValidationResult(Boolean,Object)
  nameWithType: ValidationResult.ValidationResult(Boolean,Object)
  fullName: System.Windows.Controls.ValidationResult.ValidationResult(Boolean,Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Controls.ValidationResult.Equals(System.Object)
  parent: System.Windows.Controls.ValidationResult
  isExternal: false
  name: Equals(Object)
  nameWithType: ValidationResult.Equals(Object)
  fullName: System.Windows.Controls.ValidationResult.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Controls.ValidationResult.ErrorContent
  parent: System.Windows.Controls.ValidationResult
  isExternal: false
  name: ErrorContent
  nameWithType: ValidationResult.ErrorContent
  fullName: System.Windows.Controls.ValidationResult.ErrorContent
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Controls.ValidationResult.GetHashCode
  parent: System.Windows.Controls.ValidationResult
  isExternal: false
  name: GetHashCode()
  nameWithType: ValidationResult.GetHashCode()
  fullName: System.Windows.Controls.ValidationResult.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Controls.ValidationResult.IsValid
  parent: System.Windows.Controls.ValidationResult
  isExternal: false
  name: IsValid
  nameWithType: ValidationResult.IsValid
  fullName: System.Windows.Controls.ValidationResult.IsValid
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.ValidationResult.op_Equality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)
  parent: System.Windows.Controls.ValidationResult
  isExternal: false
  name: op_Equality(ValidationResult,ValidationResult)
  nameWithType: ValidationResult.op_Equality(ValidationResult,ValidationResult)
  fullName: System.Windows.Controls.ValidationResult.op_Equality(ValidationResult,ValidationResult)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.ValidationResult
  parent: System.Windows.Controls
  isExternal: false
  name: ValidationResult
  nameWithType: ValidationResult
  fullName: System.Windows.Controls.ValidationResult
- uid: System.Windows.Controls.ValidationResult
  parent: System.Windows.Controls
  isExternal: false
  name: ValidationResult
  nameWithType: ValidationResult
  fullName: System.Windows.Controls.ValidationResult
- uid: System.Windows.Controls.ValidationResult.op_Inequality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)
  parent: System.Windows.Controls.ValidationResult
  isExternal: false
  name: op_Inequality(ValidationResult,ValidationResult)
  nameWithType: ValidationResult.op_Inequality(ValidationResult,ValidationResult)
  fullName: System.Windows.Controls.ValidationResult.op_Inequality(ValidationResult,ValidationResult)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Controls.ValidationResult
  parent: System.Windows.Controls
  isExternal: false
  name: ValidationResult
  nameWithType: ValidationResult
  fullName: System.Windows.Controls.ValidationResult
- uid: System.Windows.Controls.ValidationResult
  parent: System.Windows.Controls
  isExternal: false
  name: ValidationResult
  nameWithType: ValidationResult
  fullName: System.Windows.Controls.ValidationResult
- uid: System.Windows.Controls.ValidationResult.ValidResult
  parent: System.Windows.Controls.ValidationResult
  isExternal: false
  name: ValidResult
  nameWithType: ValidationResult.ValidResult
  fullName: System.Windows.Controls.ValidationResult.ValidResult
- uid: System.Windows.Controls.ValidationResult
  parent: System.Windows.Controls
  isExternal: false
  name: ValidationResult
  nameWithType: ValidationResult
  fullName: System.Windows.Controls.ValidationResult
