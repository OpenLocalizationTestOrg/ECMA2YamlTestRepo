### YamlMime:ManagedReference
items:
- uid: System.Windows.Media.Animation.CubicEase
  id: CubicEase
  children:
  - System.Windows.Media.Animation.CubicEase.#ctor
  - System.Windows.Media.Animation.CubicEase.CreateInstanceCore
  - System.Windows.Media.Animation.CubicEase.EaseInCore(System.Double)
  langs:
  - csharp
  name: CubicEase
  nameWithType: CubicEase
  fullName: System.Windows.Media.Animation.CubicEase
  type: Class
  summary: Represents an easing function that creates an animation that accelerates and/or decelerates using the formula *f*(*t*) = *t*<sup>3</sup>.
  remarks: "You can control whether the animation accelerates, decelerates, or both by specifying the <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. The following graph demonstrates the different values of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>, where *f*(*t*) represents the animation progress and *t* represents time.  \n  \n ![CubicEase EasingMode graphs.](../../add/media/cubicease-graph.png \"CubicEase EasingMode graphs.\")  \n  \n The formula used for this function is the following.  \n  \n *f*(*t*) = *t*<sup>3</sup>  \n  \n There are several other easing functions besides CubicEase which you can explore using the following Silverlight sample.  \n  \n [Run this sample](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  \n  \n In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from <xref:System.Windows.Media.Animation.EasingFunctionBase>.  \n  \n<a name=\"xamlObjectElementUsage_CubicEase\"></a>   \n## XAML Object Element Usage  \n  \n```  \n<CubicEase .../>  \n```"
  example:
  - "The following example applies a CubicEase easing function to a <xref:System.Windows.Media.Animation.DoubleAnimation> to create a decelerating animation.  \n  \n [!CODE [CubicEase#CubicEase](../CodeSnippet/VS_Snippets_Wpf/cubicease#cubicease)]"
  syntax:
    content: 'public class CubicEase : System.Windows.Media.Animation.EasingFunctionBase'
  inheritance:
  - System.Windows.Freezable
  - System.Windows.Media.Animation.EasingFunctionBase
  implements: []
  inheritedMembers:
  - System.Windows.Media.Animation.EasingFunctionBase.Ease(System.Double)
  - System.Windows.Media.Animation.EasingFunctionBase.EasingMode
  - System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.CubicEase.#ctor
  id: '#ctor'
  parent: System.Windows.Media.Animation.CubicEase
  langs:
  - csharp
  name: CubicEase()
  nameWithType: CubicEase.CubicEase()
  fullName: System.Windows.Media.Animation.CubicEase.CubicEase()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.CubicEase"> class.
  remarks: To be added.
  syntax:
    content: public CubicEase ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.CubicEase.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Media.Animation.CubicEase
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: CubicEase.CreateInstanceCore()
  fullName: System.Windows.Media.Animation.CubicEase.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: Creates a new instance of the <xref:System.Windows.Freezable> derived class. When creating a derived class, you must override this method.
  remarks: Animation classes inherit indirectly from <xref:System.Windows.Freezable>. Because of this, you need to override the <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> method to construct a custom animation object.
  example:
  - "The following example shows a typical implementation of <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  \n  \n [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](../../add/codesnippet/VisualBasic/freezablesample_visualbasic/freezablesample.vb#createinstancecoreexample)]\n [!code-cs[freezablesample_procedural#CreateInstanceCoreExample](../../add/codesnippet/CSharp/freezablesample_csharp/freezablesample.cs#createinstancecoreexample)]"
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: The new instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.Media.Animation.CubicEase.EaseInCore(System.Double)
  id: EaseInCore(System.Double)
  parent: System.Windows.Media.Animation.CubicEase
  langs:
  - csharp
  name: EaseInCore(Double)
  nameWithType: CubicEase.EaseInCore(Double)
  fullName: System.Windows.Media.Animation.CubicEase.EaseInCore(Double)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: Provides the logic portion of the easing function that you can override to produce the <see cref="T:System.Windows.Media.Animation.EasingMode"> mode of the custom easing function.
  remarks: "This method transforms normalized time to control the pace of an animation for the <xref:System.Windows.Media.Animation.EasingMode> case of <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  \n  \n You only have to specify your easing function for the <xref:System.Windows.Media.Animation.EasingMode> case because the implementation of the <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> method transforms  for the <xref:System.Windows.Media.Animation.EasingMode> and <xref:System.Windows.Media.Animation.EasingMode> cases."
  syntax:
    content: protected override double EaseInCore (double normalizedTime);
    parameters:
    - id: normalizedTime
      type: System.Double
      description: Normalized time (progress) of the animation.
    return:
      type: System.Double
      description: A double that represents the transformed progress.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Windows.Media.Animation.EasingFunctionBase
  isExternal: false
  name: System.Windows.Media.Animation.EasingFunctionBase
- uid: System.Windows.Media.Animation.CubicEase.#ctor
  parent: System.Windows.Media.Animation.CubicEase
  isExternal: false
  name: CubicEase()
  nameWithType: CubicEase.CubicEase()
  fullName: System.Windows.Media.Animation.CubicEase.CubicEase()
- uid: System.Windows.Media.Animation.CubicEase.CreateInstanceCore
  parent: System.Windows.Media.Animation.CubicEase
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: CubicEase.CreateInstanceCore()
  fullName: System.Windows.Media.Animation.CubicEase.CreateInstanceCore()
- uid: System.Windows.Freezable
  parent: System.Windows
  isExternal: true
  name: Freezable
  nameWithType: Freezable
  fullName: System.Windows.Freezable
- uid: System.Windows.Media.Animation.CubicEase.EaseInCore(System.Double)
  parent: System.Windows.Media.Animation.CubicEase
  isExternal: false
  name: EaseInCore(Double)
  nameWithType: CubicEase.EaseInCore(Double)
  fullName: System.Windows.Media.Animation.CubicEase.EaseInCore(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
