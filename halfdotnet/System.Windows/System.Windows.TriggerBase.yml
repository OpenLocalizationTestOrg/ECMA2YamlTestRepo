### YamlMime:ManagedReference
items:
- uid: System.Windows.TriggerBase
  id: TriggerBase
  children:
  - System.Windows.TriggerBase.EnterActions
  - System.Windows.TriggerBase.ExitActions
  langs:
  - csharp
  name: TriggerBase
  nameWithType: TriggerBase
  fullName: System.Windows.TriggerBase
  type: Class
  summary: Represents the base class for specifying a conditional value within a <see cref="T:System.Windows.Style"> object.
  remarks: The [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] styling and templating model allows you to specify triggers within your <xref:System.Windows.Style>, <xref:System.Windows.Controls.ControlTemplate>, and <xref:System.Windows.DataTemplate>. Essentially, TriggerBase is the base class for objects that allow you to apply changes when certain conditions (such as when a certain property value becomes `true`, or when an event occurs) are satisfied.
  example:
  - "There are several different types of triggers: <xref:System.Windows.Trigger>, <xref:System.Windows.MultiTrigger>, <xref:System.Windows.EventTrigger>, <xref:System.Windows.DataTrigger>, and <xref:System.Windows.MultiDataTrigger>.  \n  \n The <xref:System.Windows.Trigger> class is the simplest type of triggers. A <xref:System.Windows.Trigger> object allows you to apply changes based on the value of a property. For example, the following example shows a named <xref:System.Windows.Style> available to <xref:System.Windows.Controls.Button> controls. The <xref:System.Windows.Style> defines a <xref:System.Windows.Trigger> element that changes the <xref:System.Windows.Controls.Control.Foreground%2A> property of a button when the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property is `true`.  \n  \n [!code-xml[BtnStyles#2](../../add/codesnippet/Xaml/ButtonStyles2/app.xaml#2)]  \n  \n If you need to apply changes based on the state of multiple properties, you can use the <xref:System.Windows.MultiTrigger>. For an example, see the <xref:System.Windows.MultiTrigger> page.  \n  \n The <xref:System.Windows.EventTrigger> class allows you to apply changes when an event occurs. The following example contains two <xref:System.Windows.EventTrigger> objects, one of which occurs when the mouse enters the element and the other occurs when the mouse leaves the element.  \n  \n [!CODE [StyleEventTriggerAnimation#EventTriggerSnippet](../CodeSnippet/VS_Snippets_Wpf/StyleEventTriggerAnimation#eventtriggersnippet)]  \n  \n These are also the <xref:System.Windows.DataTrigger> and the <xref:System.Windows.MultiDataTrigger> classes. These are similar to <xref:System.Windows.Trigger> and <xref:System.Windows.MultiTrigger> except that they are for data-bound properties."
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)]

      public abstract class TriggerBase : System.Windows.DependencyObject
  inheritance:
  - System.Windows.DependencyObject
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.TriggerBase.EnterActions
  id: EnterActions
  parent: System.Windows.TriggerBase
  langs:
  - csharp
  name: EnterActions
  nameWithType: TriggerBase.EnterActions
  fullName: System.Windows.TriggerBase.EnterActions
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets a collection of <see cref="T:System.Windows.TriggerAction"> objects to apply when the trigger object becomes active. This property does not apply to the <xref:System.Windows.EventTrigger> class.
  remarks: "This property does not apply to the <xref:System.Windows.EventTrigger> class because an event represents a point in time while EnterActions and <xref:System.Windows.TriggerBase.ExitActions%2A> correspond to object states. For <xref:System.Windows.EventTrigger> objects, use the <xref:System.Windows.EventTrigger.Actions%2A> property instead.  \n  \n> [!NOTE]\n>  This property can only be set in [!INCLUDE[TLA#tla_xaml](../../add/includes/tlasharptla-xaml-md.md)] via the collection syntax shown, or by accessing the collection object and using its various methods such as Add. The property to access the collection object itself is read-only, the collection itself is read-write.  \n  \n<a name=\"xamlPropertyElementUsage_EnterActions\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.EnterActions>  \n    OneOrMoreTriggerActions  \n  </object.EnterActions >  \n</object>  \n```  \n  \n<a name=\"xamlValues_EnterActions\"></a>   \n## XAML Values  \n *OneOrMoreTriggerActions*  \n One or more <xref:System.Windows.TriggerAction> objects."
  syntax:
    content: public System.Windows.TriggerActionCollection EnterActions { get; }
    return:
      type: System.Windows.TriggerActionCollection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Windows.TriggerBase.ExitActions
  id: ExitActions
  parent: System.Windows.TriggerBase
  langs:
  - csharp
  name: ExitActions
  nameWithType: TriggerBase.ExitActions
  fullName: System.Windows.TriggerBase.ExitActions
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Gets a collection of <see cref="T:System.Windows.TriggerAction"> objects to apply when the trigger object becomes inactive. This property does not apply to the <xref:System.Windows.EventTrigger> class.
  remarks: "This property does not apply to the <xref:System.Windows.EventTrigger> class because an event represents a point in time while <xref:System.Windows.TriggerBase.EnterActions%2A> and ExitActions correspond to object states. For <xref:System.Windows.EventTrigger> objects, use the <xref:System.Windows.EventTrigger.Actions%2A> property instead.  \n  \n> [!NOTE]\n>  This property can only be set in [!INCLUDE[TLA#tla_xaml](../../add/includes/tlasharptla-xaml-md.md)] via the collection syntax shown, or by accessing the collection object and using its various methods such as Add. The property to access the collection object itself is read-only, the collection itself is read-write.  \n  \n<a name=\"xamlPropertyElementUsage_ExitActions\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.ExitActions>  \n    OneOrMoreTriggerActions  \n  </object.ExitActions >  \n</object>  \n```  \n  \n<a name=\"xamlValues_ExitActions\"></a>   \n## XAML Values  \n *OneOrMoreTriggerActions*  \n One or more <xref:System.Windows.TriggerAction> objects."
  syntax:
    content: public System.Windows.TriggerActionCollection ExitActions { get; }
    return:
      type: System.Windows.TriggerActionCollection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Windows.DependencyObject
  isExternal: false
  name: System.Windows.DependencyObject
- uid: System.Windows.TriggerBase.EnterActions
  parent: System.Windows.TriggerBase
  isExternal: false
  name: EnterActions
  nameWithType: TriggerBase.EnterActions
  fullName: System.Windows.TriggerBase.EnterActions
- uid: System.Windows.TriggerActionCollection
  parent: System.Windows
  isExternal: false
  name: TriggerActionCollection
  nameWithType: TriggerActionCollection
  fullName: System.Windows.TriggerActionCollection
- uid: System.Windows.TriggerBase.ExitActions
  parent: System.Windows.TriggerBase
  isExternal: false
  name: ExitActions
  nameWithType: TriggerBase.ExitActions
  fullName: System.Windows.TriggerBase.ExitActions
- uid: System.Windows.TriggerActionCollection
  parent: System.Windows
  isExternal: false
  name: TriggerActionCollection
  nameWithType: TriggerActionCollection
  fullName: System.Windows.TriggerActionCollection
