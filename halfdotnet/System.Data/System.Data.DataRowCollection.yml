### YamlMime:ManagedReference
items:
- uid: System.Data.DataRowCollection
  id: DataRowCollection
  children:
  - System.Data.DataRowCollection.Add(System.Data.DataRow)
  - System.Data.DataRowCollection.Add(System.Object[])
  - System.Data.DataRowCollection.Clear
  - System.Data.DataRowCollection.Contains(System.Object)
  - System.Data.DataRowCollection.Contains(System.Object[])
  - System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  - System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  - System.Data.DataRowCollection.Count
  - System.Data.DataRowCollection.Find(System.Object)
  - System.Data.DataRowCollection.Find(System.Object[])
  - System.Data.DataRowCollection.GetEnumerator
  - System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  - System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  - System.Data.DataRowCollection.Item(System.Int32)
  - System.Data.DataRowCollection.Remove(System.Data.DataRow)
  - System.Data.DataRowCollection.RemoveAt(System.Int32)
  langs:
  - csharp
  name: DataRowCollection
  nameWithType: DataRowCollection
  fullName: System.Data.DataRowCollection
  type: Class
  summary: Represents a collection of rows for a <see cref="T:System.Data.DataTable">.
  remarks: "The DataRowCollection is a major component of the <xref:System.Data.DataTable>. While the <xref:System.Data.DataColumnCollection> defines the schema of the table, the DataRowCollection contains the actual data for the table, where each <xref:System.Data.DataRow> in the DataRowCollection represents a single row.  \n  \n You can call the <xref:System.Data.DataRowCollection.Add%2A> and <xref:System.Data.DataRowCollection.Remove%2A> methods to insert and delete <xref:System.Data.DataRow> objects from the DataRowCollection. You can also call the <xref:System.Data.DataRowCollection.Find%2A> method to search for <xref:System.Data.DataRow> objects that contain specific values in primary key columns, and the <xref:System.Data.DataRowCollection.Contains%2A> method to search character-based data for single words or phrases.  \n  \n For other operations, such as sorting or filtering the DataRowCollection, use methods on the DataRowCollectionâ€™s associated <xref:System.Data.DataTable>."
  example:
  - "The first example in this section prints the value of column 1 for every row in a DataRowCollection. The second example adds a new row created by using the <xref:System.Data.DataTable.NewRow%2A> method to the DataRowCollection.  \n  \n [!CODE [Classic WebData DataRowCollection Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRowCollection Example#1)]"
  syntax:
    content: 'public sealed class DataRowCollection : System.Data.InternalDataCollectionBase'
  inheritance:
  - System.Object
  - System.Data.InternalDataCollectionBase
  implements: []
  inheritedMembers:
  - System.Data.InternalDataCollectionBase.IsReadOnly
  - System.Data.InternalDataCollectionBase.IsSynchronized
  - System.Data.InternalDataCollectionBase.List
  - System.Data.InternalDataCollectionBase.SyncRoot
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.Add(System.Data.DataRow)
  id: Add(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Add(DataRow)
  nameWithType: DataRowCollection.Add(DataRow)
  fullName: System.Data.DataRowCollection.Add(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Adds the specified <see cref="T:System.Data.DataRow"> to the <xref:System.Data.DataRowCollection> object.
  remarks: "To create a new <xref:System.Data.DataRow>, you must use the <xref:System.Data.DataTable.NewRow%2A> method of the <xref:System.Data.DataTable> class. When you use the <xref:System.Data.DataTable.NewRow%2A> method, a new <xref:System.Data.DataRow> object is returned using the schema of parent <xref:System.Data.DataTable>. After you create the <xref:System.Data.DataRow> object and set the values for each of its columns, use the Add method to add the object to the collection.  \n  \n Generates an exception if the user generates an exception in the <xref:System.Data.DataTable.RowChanging> event. If an exception occurs, the row is not added to the table."
  example:
  - "The following example uses the Add method to add a new <xref:System.Data.DataRow> to a <xref:System.Data.DataRowCollection> object.  \n  \n [!CODE [Classic WebData DataRowCollection.Add Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRowCollection.Add Example#1)]"
  syntax:
    content: public void Add (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: The <see cref="T:System.Data.DataRow"> to add.
  overload: System.Data.DataRowCollection.Add*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.Add(System.Object[])
  id: Add(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Add(Object[])
  nameWithType: DataRowCollection.Add(Object[])
  fullName: System.Data.DataRowCollection.Add(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Creates a row using specified values and adds it to the <see cref="T:System.Data.DataRowCollection">.
  remarks: "If a <xref:System.Data.DataColumn> object has its <xref:System.Data.DataColumn.AutoIncrement%2A> set to True, null should be passed to get the default value for that column.  \n  \n Exceptions can also occur if you generate an exception during either a <xref:System.Data.DataTable.ColumnChanging> or <xref:System.Data.DataTable.RowChanging> event. If an exception occurs, the row is not added to the table."
  example:
  - "The following example uses the <xref:System.Data.DataRowCollection.Add%2A> method to create and add a new <xref:System.Data.DataRow> object to a <xref:System.Data.DataRowCollection>.  \n  \n [!CODE [Classic WebData DataRowCollection.Add1 Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRowCollection.Add1 Example#1)]"
  syntax:
    content: public System.Data.DataRow Add (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: The array of values that are used to create the new row.
    return:
      type: System.Data.DataRow
      description: None.
  overload: System.Data.DataRowCollection.Add*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.Clear
  id: Clear
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: DataRowCollection.Clear()
  fullName: System.Data.DataRowCollection.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Clears the collection of all rows.
  remarks: To be added.
  syntax:
    content: public void Clear ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: DataRowCollection.Contains(Object)
  fullName: System.Data.DataRowCollection.Contains(Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Gets a value that indicates whether the primary key of any row in the collection contains the specified value.
  remarks: "To use the Contains method, the <xref:System.Data.DataTable> object to which the <xref:System.Data.DataRowCollection> object belongs to must have at least one column designated as a primary key column. See the <xref:System.Data.DataTable.PrimaryKey%2A> property for more information about how to create a primary key column.  \n  \n As soon as you have determined that a row contains the specified value, you can use the <xref:System.Data.DataRowCollection.Find%2A> method to return the specific <xref:System.Data.DataRow> object that has the value."
  example:
  - "The following Visual Basic example uses the Contains method to determine whether a <xref:System.Data.DataRowCollection> object contains a specific value.  \n  \n [!CODE [Classic WebData DataRowCollection.Contains Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRowCollection.Contains Example#1)]"
  syntax:
    content: public bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: The value of the primary key to test for.
    return:
      type: System.Boolean
      description: '`true` if the collection contains a <see cref="T:System.Data.DataRow"> with the specified primary key value; otherwise, `false`.'
  overload: System.Data.DataRowCollection.Contains*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.Contains(System.Object[])
  id: Contains(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Contains(Object[])
  nameWithType: DataRowCollection.Contains(Object[])
  fullName: System.Data.DataRowCollection.Contains(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Gets a value that indicates whether the primary key columns of any row in the collection contain the values specified in the object array.
  remarks: "To use the <xref:System.Data.DataRowCollection.Contains%2A> method with an array of values, the <xref:System.Data.DataTable> object to which the <xref:System.Data.DataRowCollection> object belongs must have an array of columns designated as primary keys. See the <xref:System.Data.DataTable.PrimaryKey%2A> property for more information about how to create an array of primary key columns. The number of array elements must correspond to the number of primary key columns in the <xref:System.Data.DataTable>.  \n  \n As soon as you have determined that a row contains the specified value, use the <xref:System.Data.DataRowCollection.Find%2A> method to return the specific <xref:System.Data.DataRow> object that has the value."
  example:
  - "The following Visual Basic example uses the <xref:System.Data.DataRowCollection.Contains%2A> method to find a particular row in a <xref:System.Data.DataRowCollection> object. The example creates an array of values, one element for each primary key in the table, and then passes the array to the method to return a `true` or `false`.  \n  \n [!CODE [Classic WebData DataRowCollection.Contains1 Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRowCollection.Contains1 Example#1)]"
  syntax:
    content: public bool Contains (object[] keys);
    parameters:
    - id: keys
      type: System.Object[]
      description: An array of primary key values to test for.
    return:
      type: System.Boolean
      description: '`true` if the <see cref="T:System.Data.DataRowCollection"> contains a <xref:System.Data.DataRow> with the specified key values; otherwise, `false`.'
  overload: System.Data.DataRowCollection.Contains*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: DataRowCollection.CopyTo(Array,Int32)
  fullName: System.Data.DataRowCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Copies all the <see cref="T:System.Data.DataRow"> objects from the collection into the given array, starting at the given destination array index.
  remarks: To be added.
  syntax:
    content: public override void CopyTo (Array ar, int index);
    parameters:
    - id: ar
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from the `DataRowCollection`. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in the array at which copying begins.
  overload: System.Data.DataRowCollection.CopyTo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  id: CopyTo(System.Data.DataRow[],System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: CopyTo(DataRow[],Int32)
  nameWithType: DataRowCollection.CopyTo(DataRow[],Int32)
  fullName: System.Data.DataRowCollection.CopyTo(DataRow[],Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Copies all the <see cref="T:System.Data.DataRow"> objects from the collection into the given array, starting at the given destination array index.
  remarks: To be added.
  syntax:
    content: public void CopyTo (System.Data.DataRow[] array, int index);
    parameters:
    - id: array
      type: System.Data.DataRow[]
      description: The one-dimensional array that is the destination of the elements copied from the `DataRowCollection`. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in the array at which copying begins.
  overload: System.Data.DataRowCollection.CopyTo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.Count
  id: Count
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Count
  nameWithType: DataRowCollection.Count
  fullName: System.Data.DataRowCollection.Count
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Gets the total number of <see cref="T:System.Data.DataRow"> objects in this collection.
  remarks: To be added.
  syntax:
    content: public override int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.Find(System.Object)
  id: Find(System.Object)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Find(Object)
  nameWithType: DataRowCollection.Find(Object)
  fullName: System.Data.DataRowCollection.Find(Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Gets the row specified by the primary key value.
  remarks: To use the `Find` method, the <xref:System.Data.DataTable> object to which the <xref:System.Data.DataRowCollection> object belongs must have at least one column designated as a primary key column. See the <xref:System.Data.DataTable.PrimaryKey%2A> property for more information about how to create a primary key column.
  example:
  - "The following example uses the Find method to find the primary key value \"2\" in a collection of <xref:System.Data.DataRow> objects. The method returns the specific <xref:System.Data.DataRow> object letting you change its values, as needed.  \n  \n [!CODE [Classic WebData DataRowCollection.Find Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRowCollection.Find Example#1)]"
  syntax:
    content: public System.Data.DataRow Find (object key);
    parameters:
    - id: key
      type: System.Object
      description: The primary key value of the <see cref="T:System.Data.DataRow"> to find.
    return:
      type: System.Data.DataRow
      description: A <see cref="T:System.Data.DataRow"> that contains the primary key value specified; otherwise a null value if the primary key value does not exist in the <xref:System.Data.DataRowCollection>.
  overload: System.Data.DataRowCollection.Find*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.Find(System.Object[])
  id: Find(System.Object[])
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Find(Object[])
  nameWithType: DataRowCollection.Find(Object[])
  fullName: System.Data.DataRowCollection.Find(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Gets the row that contains the specified primary key values.
  remarks: To use the <xref:System.Data.DataRowCollection.Find%2A> method, the <xref:System.Data.DataTable> object to which the <xref:System.Data.DataRowCollection> object belongs must have at least one column designated as a primary key column. When two or more rows have the same primary key value, then the first row found is returned. This occurs when <xref:System.Data.DataSet.EnforceConstraints%2A> is set to false. See the <xref:System.Data.DataTable.PrimaryKey%2A> property for more information about how to create a <xref:System.Data.DataTable.PrimaryKey%2A> column, or an array of <xref:System.Data.DataColumn> objects when the table has more than one primary key.
  example:
  - "The following example uses the values of an array to find a specific row in a collection of <xref:System.Data.DataRow> objects. The method assumes that a <xref:System.Data.DataTable> exists with three primary key columns. After creating an array of the values, the code uses the <xref:System.Data.DataRowCollection.Find%2A> method with the array to get the particular object that you want.  \n  \n [!CODE [Classic WebData DataRowCollection.Find1 Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRowCollection.Find1 Example#1)]"
  syntax:
    content: public System.Data.DataRow Find (object[] keys);
    parameters:
    - id: keys
      type: System.Object[]
      description: An array of primary key values to find. The type of the array is `Object`.
    return:
      type: System.Data.DataRow
      description: A <see cref="T:System.Data.DataRow"> object that contains the primary key values specified; otherwise a null value if the primary key value does not exist in the <xref:System.Data.DataRowCollection>.
  overload: System.Data.DataRowCollection.Find*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: DataRowCollection.GetEnumerator()
  fullName: System.Data.DataRowCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Gets an <see cref="T:System.Collections.IEnumerator"> for this collection.
  remarks: To be added.
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <see cref="T:System.Collections.IEnumerator"> for this collection.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  id: IndexOf(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: IndexOf(DataRow)
  nameWithType: DataRowCollection.IndexOf(DataRow)
  fullName: System.Data.DataRowCollection.IndexOf(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Gets the index of the specified <see cref="T:System.Data.DataRow"> object.
  remarks: To be added.
  syntax:
    content: public int IndexOf (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: The `DataRow` to search for.
    return:
      type: System.Int32
      description: The zero-based index of the row, or -1 if the row is not found in the collection.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  id: InsertAt(System.Data.DataRow,System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: InsertAt(DataRow,Int32)
  nameWithType: DataRowCollection.InsertAt(DataRow,Int32)
  fullName: System.Data.DataRowCollection.InsertAt(DataRow,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Inserts a new row into the collection at the specified location.
  remarks: "The location specified by InsertAt is reflected by the order of rows in the <xref:System.Data.DataRowCollection> only. If more than one row is returned in a <xref:System.Data.DataRow> array, the inserted row may not be returned in the location specified by InsertAt. For example, the <xref:System.Data.DataTable.Rows%2A> property returns the row in the specified insert position. <xref:System.Data.DataTable.Select%2A> and <xref:System.Data.DataRow.GetChildRows%2A> may not. When you write the contents of the <xref:System.Data.DataRowCollection> as XML, for example, <xref:System.Data.DataSet.WriteXml%2A>, the rows are written according to the order specified by the <xref:System.Data.DataRowCollection>.  \n  \n If the value specified for the  parameter is greater than the number of rows in the collection, the new row is added to the end."
  syntax:
    content: public void InsertAt (System.Data.DataRow row, int pos);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: The <see cref="T:System.Data.DataRow"> to add.
    - id: pos
      type: System.Int32
      description: The (zero-based) location in the collection where you want to add the `DataRow`.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: DataRowCollection.Item(Int32)
  fullName: System.Data.DataRowCollection.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Gets the row at the specified index.
  remarks: Use the <xref:System.Data.DataRowCollection.Contains%2A> method to determine whether a specific value exists in the key column of a row.
  example:
  - "The following example prints the value of column 1 of each row in a <xref:System.Data.DataRowCollection>.  \n  \n [!CODE [Classic WebData DataRowCollection.this Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRowCollection.this Example#1)]"
  syntax:
    content: public System.Data.DataRow this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the row to return.
    return:
      type: System.Data.DataRow
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.Remove(System.Data.DataRow)
  id: Remove(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: Remove(DataRow)
  nameWithType: DataRowCollection.Remove(DataRow)
  fullName: System.Data.DataRowCollection.Remove(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Removes the specified <see cref="T:System.Data.DataRow"> from the collection.
  remarks: "When a row is removed, all data in that row is lost. You can also call the <xref:System.Data.DataRow.Delete%2A> method of the <xref:System.Data.DataRow> class to just mark a row for removal. Calling `Remove` is the same as calling <xref:System.Data.DataRow.Delete%2A> and then calling <xref:System.Data.DataRow.AcceptChanges%2A>.  \n  \n Remove should not be called in a foreach loop while iterating through a <xref:System.Data.DataRowCollection> object. Remove modifies the state of the collection.  \n  \n You can also use the <xref:System.Data.DataRowCollection.Clear%2A> method to remove all members of the collection at one time."
  example:
  - "The following example uses the Remove method to delete a found row in a <xref:System.Data.DataRowCollection> object. The example first uses the <xref:System.Data.DataRowCollection.Contains%2A> method to determine whether the rows collection contains a row. If it does, the <xref:System.Data.DataRowCollection.Find%2A> method is used to find the specific row, and the Remove method is then used to remove the row.  \n  \n [!CODE [Classic WebData DataRowCollection.Remove Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRowCollection.Remove Example#1)]"
  syntax:
    content: public void Remove (System.Data.DataRow row);
    parameters:
    - id: row
      type: System.Data.DataRow
      description: The <see cref="T:System.Data.DataRow"> to remove.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.DataRowCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Data.DataRowCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: DataRowCollection.RemoveAt(Int32)
  fullName: System.Data.DataRowCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: Removes the row at the specified index from the collection.
  remarks: "When a row is removed, all data in that row is lost. You can also call the <xref:System.Data.DataRow.Delete%2A> method of the <xref:System.Data.DataRow> class to just mark a row for removal. Calling `RemoveAt` is the same as calling <xref:System.Data.DataRow.Delete%2A> and then calling <xref:System.Data.DataRow.AcceptChanges%2A>.  \n  \n You can use the <xref:System.Data.DataRowCollection.Clear%2A> method to remove all members of the collection at one time."
  example:
  - "The following example removes the last row in a <xref:System.Data.DataRowCollection> by calling the RemoveAt method.  \n  \n [!CODE [Classic WebData DataRowCollection.RemoveAt Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRowCollection.RemoveAt Example#1)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The index of the row to remove.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Data.InternalDataCollectionBase
  isExternal: false
  name: System.Data.InternalDataCollectionBase
- uid: System.Data.DataRowCollection.Add(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add(DataRow)
  nameWithType: DataRowCollection.Add(DataRow)
  fullName: System.Data.DataRowCollection.Add(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataRowCollection.Add(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Add(Object[])
  nameWithType: DataRowCollection.Add(Object[])
  fullName: System.Data.DataRowCollection.Add(Object[])
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Data.DataRowCollection.Clear
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Clear()
  nameWithType: DataRowCollection.Clear()
  fullName: System.Data.DataRowCollection.Clear()
- uid: System.Data.DataRowCollection.Contains(System.Object)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains(Object)
  nameWithType: DataRowCollection.Contains(Object)
  fullName: System.Data.DataRowCollection.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataRowCollection.Contains(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Contains(Object[])
  nameWithType: DataRowCollection.Contains(Object[])
  fullName: System.Data.DataRowCollection.Contains(Object[])
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: DataRowCollection.CopyTo(Array,Int32)
  fullName: System.Data.DataRowCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: CopyTo(DataRow[],Int32)
  nameWithType: DataRowCollection.CopyTo(DataRow[],Int32)
  fullName: System.Data.DataRowCollection.CopyTo(DataRow[],Int32)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRowCollection.Count
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Count
  nameWithType: DataRowCollection.Count
  fullName: System.Data.DataRowCollection.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRowCollection.Find(System.Object)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find(Object)
  nameWithType: DataRowCollection.Find(Object)
  fullName: System.Data.DataRowCollection.Find(Object)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.DataRowCollection.Find(System.Object[])
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Find(Object[])
  nameWithType: DataRowCollection.Find(Object[])
  fullName: System.Data.DataRowCollection.Find(Object[])
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Data.DataRowCollection.GetEnumerator
  parent: System.Data.DataRowCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: DataRowCollection.GetEnumerator()
  fullName: System.Data.DataRowCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.DataRowCollection.IndexOf(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: IndexOf(DataRow)
  nameWithType: DataRowCollection.IndexOf(DataRow)
  fullName: System.Data.DataRowCollection.IndexOf(DataRow)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: InsertAt(DataRow,Int32)
  nameWithType: DataRowCollection.InsertAt(DataRow,Int32)
  fullName: System.Data.DataRowCollection.InsertAt(DataRow,Int32)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRowCollection.Item(System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: DataRowCollection.Item(Int32)
  fullName: System.Data.DataRowCollection.Item(Int32)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRowCollection.Remove(System.Data.DataRow)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: Remove(DataRow)
  nameWithType: DataRowCollection.Remove(DataRow)
  fullName: System.Data.DataRowCollection.Remove(DataRow)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataRowCollection.RemoveAt(System.Int32)
  parent: System.Data.DataRowCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: DataRowCollection.RemoveAt(Int32)
  fullName: System.Data.DataRowCollection.RemoveAt(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRowCollection.Add*
  parent: System.Data.DataRowCollection
  isExternal: false
  nameWithType: DataRowCollection.
- uid: System.Data.DataRowCollection.Contains*
  parent: System.Data.DataRowCollection
  isExternal: false
  nameWithType: DataRowCollection.
- uid: System.Data.DataRowCollection.CopyTo*
  parent: System.Data.DataRowCollection
  isExternal: false
  nameWithType: DataRowCollection.
- uid: System.Data.DataRowCollection.Find*
  parent: System.Data.DataRowCollection
  isExternal: false
  nameWithType: DataRowCollection.
