### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.ConcurrentStack`1
  id: ConcurrentStack`1
  children:
  - System.Collections.Concurrent.ConcurrentStack`1.#ctor
  - System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Concurrent.ConcurrentStack`1.Clear
  - System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.ConcurrentStack`1.Count
  - System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
  - System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
  - System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
  - System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
  - System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.ConcurrentStack`1.ToArray
  - System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
  - System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
  - System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
  - System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: ConcurrentStack<T>
  nameWithType: ConcurrentStack<T>
  fullName: System.Collections.Concurrent.ConcurrentStack<T>
  type: Class
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Concurrent.SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1))]

      public class ConcurrentStack<T> : System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>
    typeParameters:
    - id: T
      description: Parameter description to be filled
  inheritance:
  - System.Object
  implements:
  - System.Collections.Concurrent.IProducerConsumerCollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: ConcurrentStack<T>..ctor
  fullName: System.Collections.Concurrent.ConcurrentStack<T>..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public ConcurrentStack ();
    parameters: []
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: .ctor
  nameWithType: ConcurrentStack<T>..ctor
  fullName: System.Collections.Concurrent.ConcurrentStack<T>..ctor
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public ConcurrentStack (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{T}
      description: Parameter description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.Clear
  id: Clear
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: Clear
  nameWithType: ConcurrentStack<T>.Clear
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Clear
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public void Clear ();
    parameters: []
    return:
      type: System.Void
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: CopyTo
  nameWithType: ConcurrentStack<T>.CopyTo
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.CopyTo
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: Parameter description to be filled
    - id: index
      type: System.Int32
      description: Parameter description to be filled
    return:
      type: System.Void
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.Count
  id: Count
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ConcurrentStack<T>.Count
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: GetEnumerator
  nameWithType: ConcurrentStack<T>.GetEnumerator
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.GetEnumerator
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{T}
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: ConcurrentStack<T>.IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IsEmpty
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
  id: Push(`0)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: Push
  nameWithType: ConcurrentStack<T>.Push
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Push
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public void Push (T item);
    parameters:
    - id: item
      type: T
      description: Parameter description to be filled
    return:
      type: System.Void
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
  id: PushRange(`0[])
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: PushRange
  nameWithType: ConcurrentStack<T>.PushRange
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public void PushRange (T[] items);
    parameters:
    - id: items
      type: T[]
      description: Parameter description to be filled
    return:
      type: System.Void
      description: Return description to be filled
  overload: System.Collections.Concurrent.ConcurrentStack`1.PushRange*
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
  id: PushRange(`0[],System.Int32,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: PushRange
  nameWithType: ConcurrentStack<T>.PushRange
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public void PushRange (T[] items, int startIndex, int count);
    parameters:
    - id: items
      type: T[]
      description: Parameter description to be filled
    - id: startIndex
      type: System.Int32
      description: Parameter description to be filled
    - id: count
      type: System.Int32
      description: Parameter description to be filled
    return:
      type: System.Void
      description: Return description to be filled
  overload: System.Collections.Concurrent.ConcurrentStack`1.PushRange*
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
  nameWithType: ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: bool IProducerConsumerCollection<T>.TryAdd (T item);
    parameters:
    - id: item
      type: T
      description: Parameter description to be filled
    return:
      type: System.Boolean
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
  nameWithType: ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: bool IProducerConsumerCollection<T>.TryTake (out T item);
    parameters:
    - id: item
      type: T
      description: Parameter description to be filled
    return:
      type: System.Boolean
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: System.Collections.ICollection.CopyTo
  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.CopyTo
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.CopyTo
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: Parameter description to be filled
    - id: index
      type: System.Int32
      description: Parameter description to be filled
    return:
      type: System.Void
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ConcurrentStack<T>.System.Collections.IEnumerable.GetEnumerator
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.IEnumerable.GetEnumerator
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: ToArray
  nameWithType: ConcurrentStack<T>.ToArray
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ToArray
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
  id: TryPeek(`0@)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: TryPeek
  nameWithType: ConcurrentStack<T>.TryPeek
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPeek
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryPeek (out T result);
    parameters:
    - id: result
      type: T
      description: Parameter description to be filled
    return:
      type: System.Boolean
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
  id: TryPop(`0@)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: TryPop
  nameWithType: ConcurrentStack<T>.TryPop
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPop
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryPop (out T result);
    parameters:
    - id: result
      type: T
      description: Parameter description to be filled
    return:
      type: System.Boolean
      description: Return description to be filled
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
  id: TryPopRange(`0[])
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: TryPopRange
  nameWithType: ConcurrentStack<T>.TryPopRange
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public int TryPopRange (T[] items);
    parameters:
    - id: items
      type: T[]
      description: Parameter description to be filled
    return:
      type: System.Int32
      description: Return description to be filled
  overload: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange*
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
  id: TryPopRange(`0[],System.Int32,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  - vb
  name: TryPopRange
  nameWithType: ConcurrentStack<T>.TryPopRange
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: public int TryPopRange (T[] items, int startIndex, int count);
    parameters:
    - id: items
      type: T[]
      description: Parameter description to be filled
    - id: startIndex
      type: System.Int32
      description: Parameter description to be filled
    - id: count
      type: System.Int32
      description: Parameter description to be filled
    return:
      type: System.Int32
      description: Return description to be filled
  overload: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange*
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: .ctor
  nameWithType: ConcurrentStack<T>..ctor
  fullName: System.Collections.Concurrent.ConcurrentStack<T>..ctor
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: .ctor
  nameWithType: ConcurrentStack<T>..ctor
  fullName: System.Collections.Concurrent.ConcurrentStack<T>..ctor
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Concurrent.ConcurrentStack`1.Clear
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Clear
  nameWithType: ConcurrentStack<T>.Clear
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Clear
- uid: System.Void
  parent: System
  isExternal: false
  name: Void
  nameWithType: Void
  fullName: System.Void
- uid: System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: CopyTo
  nameWithType: ConcurrentStack<T>.CopyTo
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.CopyTo
- uid: System.Void
  parent: System
  isExternal: false
  name: Void
  nameWithType: Void
  fullName: System.Void
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.ConcurrentStack`1.Count
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Count
  nameWithType: ConcurrentStack<T>.Count
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: GetEnumerator
  nameWithType: ConcurrentStack<T>.GetEnumerator
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.GetEnumerator
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: IsEmpty
  nameWithType: ConcurrentStack<T>.IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IsEmpty
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Push
  nameWithType: ConcurrentStack<T>.Push
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Push
- uid: System.Void
  parent: System
  isExternal: false
  name: Void
  nameWithType: Void
  fullName: System.Void
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: PushRange
  nameWithType: ConcurrentStack<T>.PushRange
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange
- uid: System.Void
  parent: System
  isExternal: false
  name: Void
  nameWithType: Void
  fullName: System.Void
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: PushRange
  nameWithType: ConcurrentStack<T>.PushRange
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange
- uid: System.Void
  parent: System
  isExternal: false
  name: Void
  nameWithType: Void
  fullName: System.Void
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
  nameWithType: ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
  nameWithType: ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.CopyTo
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.CopyTo
- uid: System.Void
  parent: System
  isExternal: false
  name: Void
  nameWithType: Void
  fullName: System.Void
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.ICollection.SyncRoot
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ConcurrentStack<T>.System.Collections.IEnumerable.GetEnumerator
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Concurrent.ConcurrentStack`1.ToArray
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: ToArray
  nameWithType: ConcurrentStack<T>.ToArray
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ToArray
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPeek
  nameWithType: ConcurrentStack<T>.TryPeek
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPeek
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPop
  nameWithType: ConcurrentStack<T>.TryPop
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPop
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPopRange
  nameWithType: ConcurrentStack<T>.TryPopRange
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPopRange
  nameWithType: ConcurrentStack<T>.TryPopRange
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Clear
  nameWithType: ConcurrentStack<T>.Clear
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Clear
  nameWithType: ConcurrentStack<T>.Clear
