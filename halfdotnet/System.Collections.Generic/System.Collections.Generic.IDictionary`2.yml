### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.IDictionary`2
  id: IDictionary`2
  children:
  - System.Collections.Generic.IDictionary`2.Add(`0,`1)
  - System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  - System.Collections.Generic.IDictionary`2.Item(`0)
  - System.Collections.Generic.IDictionary`2.Keys
  - System.Collections.Generic.IDictionary`2.Remove(`0)
  - System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Generic.IDictionary`2.Values
  langs:
  - csharp
  - vb
  name: IDictionary<TKey,TValue>
  nameWithType: IDictionary<TKey,TValue>
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>
  type: Interface
  syntax:
    content: 'public interface IDictionary<TKey,TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>'
    typeParameters:
    - id: TKey
      description: Parameter description to be filled
    - id: TValue
      description: Parameter description to be filled
  implements:
  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  - vb
  name: Add
  nameWithType: IDictionary<TKey,TValue>.Add
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Add
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: public void Add (TKey key, TValue value);
    parameters:
    - id: key
      type: TKey
      description: Parameter description to be filled
    - id: value
      type: TValue
      description: Parameter description to be filled
    return:
      type: System.Void
      description: Return description to be filled
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey
  nameWithType: IDictionary<TKey,TValue>.ContainsKey
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.ContainsKey
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: public bool ContainsKey (TKey key);
    parameters:
    - id: key
      type: TKey
      description: Parameter description to be filled
    return:
      type: System.Boolean
      description: Return description to be filled
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  - vb
  name: Item
  nameWithType: IDictionary<TKey,TValue>.Item
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Item
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: TKey
      description: Parameter description to be filled
    return:
      type: TValue
      description: Return description to be filled
- uid: System.Collections.Generic.IDictionary`2.Keys
  id: Keys
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: IDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.ICollection<TKey> Keys { get; }
    return:
      type: System.Collections.Generic.ICollection{TKey}
      description: Return description to be filled
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  - vb
  name: Remove
  nameWithType: IDictionary<TKey,TValue>.Remove
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Remove
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: public bool Remove (TKey key);
    parameters:
    - id: key
      type: TKey
      description: Parameter description to be filled
    return:
      type: System.Boolean
      description: Return description to be filled
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue
  nameWithType: IDictionary<TKey,TValue>.TryGetValue
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.TryGetValue
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: public bool TryGetValue (TKey key, out TValue value);
    parameters:
    - id: key
      type: TKey
      description: Parameter description to be filled
    - id: value
      type: TValue
      description: Parameter description to be filled
    return:
      type: System.Boolean
      description: Return description to be filled
- uid: System.Collections.Generic.IDictionary`2.Values
  id: Values
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: IDictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.ICollection<TValue> Values { get; }
    return:
      type: System.Collections.Generic.ICollection{TValue}
      description: Return description to be filled
references:
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Add
  nameWithType: IDictionary<TKey,TValue>.Add
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Add
- uid: System.Void
  parent: System
  isExternal: false
  name: Void
  nameWithType: Void
  fullName: System.Void
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: ContainsKey
  nameWithType: IDictionary<TKey,TValue>.ContainsKey
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.ContainsKey
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Item
  nameWithType: IDictionary<TKey,TValue>.Item
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Item
- uid: System.Collections.Generic.IDictionary`2.Keys
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Keys
  nameWithType: IDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Remove
  nameWithType: IDictionary<TKey,TValue>.Remove
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Remove
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: TryGetValue
  nameWithType: IDictionary<TKey,TValue>.TryGetValue
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.TryGetValue
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary`2.Values
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Values
  nameWithType: IDictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Values
