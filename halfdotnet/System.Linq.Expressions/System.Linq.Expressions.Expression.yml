### YamlMime:ManagedReference
items:
- uid: System.Linq.Expressions.Expression
  id: Expression
  children:
  - System.Linq.Expressions.Expression.#ctor
  - System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)
  - System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.CanReduce
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Constant(System.Object)
  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Default(System.Type)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Empty
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.GetActionType(System.Type[])
  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Label
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Label(System.String)
  - System.Linq.Expressions.Expression.Label(System.Type)
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Label(System.Type,System.String)
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  - System.Linq.Expressions.Expression.New(System.Type)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NodeType
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Parameter(System.Type)
  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Reduce
  - System.Linq.Expressions.Expression.ReduceAndCheck
  - System.Linq.Expressions.Expression.ReduceExtensions
  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Rethrow
  - System.Linq.Expressions.Expression.Rethrow(System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.SymbolDocument(System.String)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ToString
  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.Type
  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  langs:
  - csharp
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
  type: Class
  summary: Provides the base class from which the classes that represent expression tree nodes are derived. It also contains `static` (`Shared` in Visual Basic) factory methods to create the various node types. This is an `abstract` class.
  remarks: ''
  example:
  - "The following code example shows how to create a block expression. The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#13](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#13)]"
  syntax:
    content: public abstract class Expression
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.#ctor
  id: '#ctor'
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Expression()
  nameWithType: Expression.Expression()
  fullName: System.Linq.Expressions.Expression.Expression()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression">.
  remarks: To be added.
  syntax:
    content: protected Expression ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)
  id: '#ctor(System.Linq.Expressions.ExpressionType,System.Type)'
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Expression(ExpressionType,Type)
  nameWithType: Expression.Expression(ExpressionType,Type)
  fullName: System.Linq.Expressions.Expression.Expression(ExpressionType,Type)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression"> class.
  remarks: This constructor is called from constructors in derived classes.
  syntax:
    content: protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);
    parameters:
    - id: nodeType
      type: System.Linq.Expressions.ExpressionType
      description: The <see cref="T:System.Linq.Expressions.ExpressionType"> to set as the node type.
    - id: type
      type: System.Type
      description: The <xref:System.Linq.Expressions.Expression.Type%2A> of this <xref:System.Linq.Expressions.Expression>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  id: Accept(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Accept(ExpressionVisitor)
  nameWithType: Expression.Accept(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.Accept(ExpressionVisitor)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression"> calls the <xref:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall%2A>.
  remarks: This default implementation for <xref:System.Linq.Expressions.ExpressionType> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.
  syntax:
    content: protected virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: The visitor to visit this node with.
    return:
      type: System.Linq.Expressions.Expression
      description: The result of visiting this node.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Add(Expression,Expression)
  nameWithType: Expression.Add(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Add(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic addition operation that does not have overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator."
  example:
  - "The following code example shows how to create an expression that adds two integers.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#1](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#1)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Add*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Add(Expression,Expression,MethodInfo)
  nameWithType: Expression.Add(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Add(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A> and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Add*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssign(Expression,Expression)
  nameWithType: Expression.AddAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an addition assignment operation that does not have overflow checking.
  remarks: ''
  example:
  - "The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#18](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#18)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.AddAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an addition assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.AddAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an addition assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssignChecked(Expression,Expression)
  nameWithType: Expression.AddAssignChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an addition assignment operation that has overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssignChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssignChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.AddAssignChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an addition assignment operation that has overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssignChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an addition assignment operation that has overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddAssignChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddChecked(Expression,Expression)
  nameWithType: Expression.AddChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.AddChecked(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic addition operation that has overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AddChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.AddChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddChecked(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A> and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AddChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: And(Expression,Expression)
  nameWithType: Expression.And(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.And(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise `AND` operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator."
  example:
  - "The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#2](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#2)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.And*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: And(Expression,Expression,MethodInfo)
  nameWithType: Expression.And(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.And(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise `AND` operation. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.And*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AndAlso(Expression,Expression)
  nameWithType: Expression.AndAlso(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.AndAlso(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a conditional `AND` operation that evaluates the second operand only if the first operand evaluates to `true`.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](../../add/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if .Type and .Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   .Type and .Type are the same Boolean type.  \n  \n-   If .Type and .Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.  \n  \n-   If .Type and .Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator."
  example:
  - "The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#19](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#19)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AndAlso*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AndAlso(Expression,Expression,MethodInfo)
  nameWithType: Expression.AndAlso(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAlso(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a conditional `AND` operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](../../add/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if .Type and .Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   .Type and .Type are the same Boolean type.  \n  \n-   If .Type and .Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.  \n  \n-   If .Type and .Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AndAlso*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AndAssign(Expression,Expression)
  nameWithType: Expression.AndAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise AND assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AndAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AndAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.AndAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise AND assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AndAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: AndAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.AndAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise AND assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.AndAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayAccess(Expression,IEnumerable<Expression>)
  nameWithType: Expression.ArrayAccess(Expression,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ArrayAccess(Expression,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an <see cref="T:System.Linq.Expressions.IndexExpression"> to access a multidimensional array.
  remarks: The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.
  example:
  - "The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#21](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#21)]"
  syntax:
    content: public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An expression that represents the multidimensional array.
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> containing expressions used to index the array.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <see cref="T:System.Linq.Expressions.IndexExpression">.
  overload: System.Linq.Expressions.Expression.ArrayAccess*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayAccess(Expression,Expression[])
  nameWithType: Expression.ArrayAccess(Expression,Expression[])
  fullName: System.Linq.Expressions.Expression.ArrayAccess(Expression,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an <see cref="T:System.Linq.Expressions.IndexExpression"> to access an array.
  remarks: "The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.  \n  \n For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method."
  example:
  - "The following code example shows how to change a value of an array element by using the `ArrayAccess` method.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#20](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#20)]"
  syntax:
    content: public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An expression representing the array to index.
    - id: indexes
      type: System.Linq.Expressions.Expression[]
      description: An array that contains expressions used to index the array.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <see cref="T:System.Linq.Expressions.IndexExpression">.
  overload: System.Linq.Expressions.Expression.ArrayAccess*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayIndex(Expression,IEnumerable<Expression>)
  nameWithType: Expression.ArrayIndex(Expression,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents applying an array index operator to an array of rank more than one.
  remarks: "Each element of  must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent an array type whose rank matches the number of elements in .  \n  \n If the rank of .Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to  and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of . The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of .Type.  \n  \n If the rank of .Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of ."
  example:
  - "The following example demonstrates how to use the [ArrayIndex(Expression, Expression\\[\\])](assetId:///M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])?qualifyHint=False&autoUpgrade=False) method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.  \n  \n [!CODE [System.Linq.Expressions.Expression#3](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#3)]"
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property equal to.
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects to use to populate the <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ArrayIndex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayIndex(Expression,Expression)
  nameWithType: Expression.ArrayIndex(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents applying an array index operator to an array of rank one.
  remarks: "must represent an index of type <xref:System.Int32>.  \n  \n The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of .Type. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: index
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ArrayIndex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayIndex(Expression,Expression[])
  nameWithType: Expression.ArrayIndex(Expression,Expression[])
  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents applying an array index operator to a multidimensional array.
  remarks: "Each element of  must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent an array type whose rank matches the number of elements in .  \n  \n If the rank of .Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to  and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of . The <xref:System.Linq.Expressions.Expression.Type%2A> property of the<xref:System.Linq.Expressions.BinaryExpression> represents the element type of .Type.  \n  \n If the rank of .Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of ."
  example:
  - "The following example demonstrates how to use the ArrayIndex method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.  \n  \n [!CODE [System.Linq.Expressions.Expression#3](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#3)]"
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> instances - indexes for the array index operation.
    - id: indexes
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects to use to populate the <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ArrayIndex*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  id: ArrayLength(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ArrayLength(Expression)
  nameWithType: Expression.ArrayLength(Expression)
  fullName: System.Linq.Expressions.Expression.ArrayLength(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents an expression for obtaining the length of a one-dimensional array.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent an array type.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Assign(Expression,Expression)
  nameWithType: Expression.Assign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Assign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an assignment operation.
  remarks: The `Assign` expression copies a value for value types, and it copies a reference for reference types.
  example:
  - "The following code example shows how to create an expression that represents an assignment operation.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#12](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#12)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Bind(MemberInfo,Expression)
  nameWithType: Expression.Bind(MemberInfo,Expression)
  fullName: System.Linq.Expressions.Expression.Bind(MemberInfo,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberAssignment"> that represents the initialization of a field or property.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of .
  syntax:
    content: public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: A <see cref="T:System.Reflection.MemberInfo"> to set the <xref:System.Linq.Expressions.MemberBinding.Member%2A> property equal to.
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.MemberAssignment.Expression%2A> property equal to.
    return:
      type: System.Linq.Expressions.MemberAssignment
      description: A <see cref="T:System.Linq.Expressions.MemberAssignment"> that has <xref:System.Linq.Expressions.MemberBinding.BindingType%2A> equal to <xref:System.Linq.Expressions.MemberBindingType> and the <xref:System.Linq.Expressions.MemberBinding.Member%2A> and <xref:System.Linq.Expressions.MemberAssignment.Expression%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Bind*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Bind(MethodInfo,Expression)
  nameWithType: Expression.Bind(MethodInfo,Expression)
  fullName: System.Linq.Expressions.Expression.Bind(MethodInfo,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberAssignment"> that represents the initialization of a member by using a property accessor method.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in .
  syntax:
    content: public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents a property accessor method.
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.MemberAssignment.Expression%2A> property equal to.
    return:
      type: System.Linq.Expressions.MemberAssignment
      description: A <see cref="T:System.Linq.Expressions.MemberAssignment"> that has the <xref:System.Linq.Expressions.MemberBinding.BindingType%2A> property equal to <xref:System.Linq.Expressions.MemberBindingType>, the <xref:System.Linq.Expressions.MemberBinding.Member%2A> property set to the <xref:System.Reflection.PropertyInfo> that represents the property accessed in , and the <xref:System.Linq.Expressions.MemberAssignment.Expression%2A> property set to .
  overload: System.Linq.Expressions.Expression.Bind*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(IEnumerable<Expression>)
  nameWithType: Expression.Block(IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains the given expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);
    parameters:
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  id: Block(System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Expression[])
  nameWithType: Expression.Block(Expression[])
  fullName: System.Linq.Expressions.Expression.Block(Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains the given expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  example:
  - "The following code example shows how to create a block expression. The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#13](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#13)]"
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression[] expressions);
    parameters:
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)
  nameWithType: Expression.Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains the given variables and expressions.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  example:
  - "The following code example shows how to pass a parameter to a block expression and process this parameter within a block.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#14](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#14)]"
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(IEnumerable<ParameterExpression>,Expression[])
  nameWithType: Expression.Block(IEnumerable<ParameterExpression>,Expression[])
  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<ParameterExpression>,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains the given variables and expressions.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Linq.Expressions.Expression[] expressions);
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Expression,Expression)
  nameWithType: Expression.Block(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains two expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Type,IEnumerable<Expression>)
  nameWithType: Expression.Block(Type,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains the given expressions, has no variables and has specific result type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Type,Expression[])
  nameWithType: Expression.Block(Type,Expression[])
  fullName: System.Linq.Expressions.Expression.Block(Type,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains the given expressions, has no variables and has specific result type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Linq.Expressions.Expression[] expressions);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Expression,Expression,Expression)
  nameWithType: Expression.Block(Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains three expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)
  nameWithType: Expression.Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains the given variables and expressions.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Type,IEnumerable<ParameterExpression>,Expression[])
  nameWithType: Expression.Block(Type,IEnumerable<ParameterExpression>,Expression[])
  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<ParameterExpression>,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains the given variables and expressions.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Linq.Expressions.Expression[] expressions);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Expression,Expression,Expression,Expression)
  nameWithType: Expression.Block(Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains four expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Block(Expression,Expression,Expression,Expression,Expression)
  nameWithType: Expression.Block(Expression,Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BlockExpression"> that contains five expressions and has no variables.
  remarks: When the block expression is executed, it returns the value of the last expression in the block.
  syntax:
    content: public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth expression in the block.
    - id: arg4
      type: System.Linq.Expressions.Expression
      description: The fifth expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created <see cref="T:System.Linq.Expressions.BlockExpression">.
  overload: System.Linq.Expressions.Expression.Block*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  id: Break(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Break(LabelTarget)
  nameWithType: Expression.Break(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Break(LabelTarget)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a break statement.
  remarks: ''
  example:
  - "The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the Break method.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#44](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#44)]"
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Break, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Break*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Break(LabelTarget,Expression)
  nameWithType: Expression.Break(LabelTarget,Expression)
  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a break statement. The value passed to the label upon jumping can be specified.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Break, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , and  to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Break*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Break(LabelTarget,Type)
  nameWithType: Expression.Break(LabelTarget,Type)
  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a break statement with the specified type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: type
      type: System.Type
      description: An <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Break, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , and the <xref:System.Linq.Expressions.Expression.Type%2A> property set to .
  overload: System.Linq.Expressions.Expression.Break*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Break(LabelTarget,Expression,Type)
  nameWithType: Expression.Break(LabelTarget,Expression,Type)
  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Break, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , the <xref:System.Linq.Expressions.Expression.Type%2A> property set to , and  to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Break*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression,MethodInfo)
  nameWithType: Expression.Call(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a method that takes no arguments.
  remarks: "To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the  parameter when you call this method.  \n  \n If  represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of  must be assignable to the declaring type of the method represented by .  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by ."
  example:
  - "The following code example shows how to create an expression that calls a method without arguments.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#15](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#15)]"
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo,IEnumerable<Expression>)
  nameWithType: Expression.Call(MethodInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a static (Shared in Visual Basic) method.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: The <see cref="T:System.Reflection.MethodInfo"> that represents the target method.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: A collection of <see cref="T:System.Linq.Expressions.Expression"> that represents the call arguments.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo,Expression)
  nameWithType: Expression.Call(MethodInfo,Expression)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a `static` (`Shared` in Visual Basic) method that takes one argument.
  remarks: ''
  example:
  - "The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#16](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#16)]"
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the first argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo,Expression[])
  nameWithType: Expression.Call(MethodInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a `static` (`Shared` in Visual Basic) method that has arguments.
  remarks: "If  is not `null`, it must have the same number of elements as the number of parameters for the method represented by . Each element in  must not be `null` and must be assignable to the corresponding parameter of , possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if  is `null`. Otherwise, it contains the same elements as , some of which may be quoted.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by . The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`."
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents a `static` (`Shared` in Visual Basic) method to set the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects to use to populate the <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression,MethodInfo,IEnumerable<Expression>)
  nameWithType: Expression.Call(Expression,MethodInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a method that takes arguments.
  remarks: "To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the  parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  \n  \n If  represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of  must be assignable to the declaring type of the method represented by .  \n  \n If  is not `null`, it must have the same number of elements as the number of parameters for the method represented by . Each element in  must not be `null` and must be assignable to the corresponding parameter of , possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if  is `null`. Otherwise, it contains the same elements as , some of which may be quoted.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by ."
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property equal to (pass `null` for a `static` (`Shared` in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects to use to populate the <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A>, <xref:System.Linq.Expressions.MethodCallExpression.Method%2A>, and <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression,MethodInfo,Expression[])
  nameWithType: Expression.Call(Expression,MethodInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a method that takes arguments.
  remarks: "To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the  parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  \n  \n If  represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of  must be assignable to the declaring type of the method represented by .  \n  \n If  is not `null`, it must have the same number of elements as the number of parameters for the method represented by . Each element in  must not be `null` and must be assignable to the corresponding parameter of , possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  \n  \n The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if  is `null`. Otherwise, it contains the same elements as , some of which may be quoted.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by ."
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects to use to populate the <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A>, <xref:System.Linq.Expressions.MethodCallExpression.Method%2A>, and <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo,Expression,Expression)
  nameWithType: Expression.Call(MethodInfo,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a static method that takes two arguments.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the second argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression,MethodInfo,Expression,Expression)
  nameWithType: Expression.Call(Expression,MethodInfo,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a method that takes two arguments.
  remarks: ''
  example:
  - "The following code example shows how to create an expression that calls an instance method that has two arguments.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#17](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#17)]"
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: The <see cref="T:System.Reflection.MethodInfo"> that represents the target method.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the second argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression,String,Type[],Expression[])
  nameWithType: Expression.Call(Expression,String,Type[],Expression[])
  fullName: System.Linq.Expressions.Expression.Call(Expression,String,Type[],Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a method by calling the appropriate factory method.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by .
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> whose <xref:System.Linq.Expressions.Expression.Type%2A> property value will be searched for a specific method.
    - id: methodName
      type: System.String
      description: The name of the method.
    - id: typeArguments
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects that represents the arguments to the method.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType>, the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property equal to , <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> set to the <xref:System.Reflection.MethodInfo> that represents the specified instance method, and <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> set to the specified arguments.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo,Expression,Expression,Expression)
  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a static method that takes three arguments.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the third argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Type,String,Type[],Expression[])
  nameWithType: Expression.Call(Type,String,Type[],Expression[])
  fullName: System.Linq.Expressions.Expression.Call(Type,String,Type[],Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a `static` (`Shared` in Visual Basic) method by calling the appropriate factory method.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by . The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: type
      type: System.Type
      description: The <see cref="T:System.Type"> that specifies the type that contains the specified `static` (`Shared` in Visual Basic) method.
    - id: methodName
      type: System.String
      description: The name of the method.
    - id: typeArguments
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects that represent the arguments to the method.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType>, the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property set to the <xref:System.Reflection.MethodInfo> that represents the specified `static` (`Shared` in Visual Basic) method, and the <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property set to the specified arguments.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(Expression,MethodInfo,Expression,Expression,Expression)
  nameWithType: Expression.Call(Expression,MethodInfo,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a method that takes three arguments.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: The <see cref="T:System.Reflection.MethodInfo"> that represents the target method.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the third argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo,Expression,Expression,Expression,Expression)
  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a static method that takes four arguments.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the third argument.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the fourth argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)
  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression"> that represents a call to a static method that takes five arguments.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the third argument.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the fourth argument.
    - id: arg4
      type: System.Linq.Expressions.Expression
      description: The <see cref="T:System.Linq.Expressions.Expression"> that represents the fifth argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A <see cref="T:System.Linq.Expressions.MethodCallExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> and <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Call*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.CanReduce
  id: CanReduce
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: CanReduce
  nameWithType: Expression.CanReduce
  fullName: System.Linq.Expressions.Expression.CanReduce
  type: Property
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.
  remarks: To be added.
  syntax:
    content: public virtual bool CanReduce { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Catch(ParameterExpression,Expression)
  nameWithType: Expression.Catch(ParameterExpression,Expression)
  fullName: System.Linq.Expressions.Expression.Catch(ParameterExpression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.CatchBlock"> representing a catch statement with a reference to the caught <xref:System.Exception> object for use in the handler body.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A <see cref="T:System.Linq.Expressions.ParameterExpression"> representing a reference to the <xref:System.Exception> object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <see cref="T:System.Linq.Expressions.CatchBlock">.
  overload: System.Linq.Expressions.Expression.Catch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Catch(Type,Expression)
  nameWithType: Expression.Catch(Type,Expression)
  fullName: System.Linq.Expressions.Expression.Catch(Type,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.CatchBlock"> representing a catch statement.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.
  syntax:
    content: public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);
    parameters:
    - id: type
      type: System.Type
      description: The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> this <xref:System.Linq.Expressions.CatchBlock> will handle.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <see cref="T:System.Linq.Expressions.CatchBlock">.
  overload: System.Linq.Expressions.Expression.Catch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Catch(ParameterExpression,Expression,Expression)
  nameWithType: Expression.Catch(ParameterExpression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Catch(ParameterExpression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.CatchBlock"> representing a catch statement with an <xref:System.Exception> filter and a reference to the caught <xref:System.Exception> object.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A <see cref="T:System.Linq.Expressions.ParameterExpression"> representing a reference to the <xref:System.Exception> object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    - id: filter
      type: System.Linq.Expressions.Expression
      description: The body of the <see cref="T:System.Exception"> filter.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <see cref="T:System.Linq.Expressions.CatchBlock">.
  overload: System.Linq.Expressions.Expression.Catch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Catch(Type,Expression,Expression)
  nameWithType: Expression.Catch(Type,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Catch(Type,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.CatchBlock"> representing a catch statement with an <xref:System.Exception> filter but no reference to the caught <xref:System.Exception> object.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);
    parameters:
    - id: type
      type: System.Type
      description: The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> this <xref:System.Linq.Expressions.CatchBlock> will handle.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    - id: filter
      type: System.Linq.Expressions.Expression
      description: The body of the <see cref="T:System.Exception"> filter.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <see cref="T:System.Linq.Expressions.CatchBlock">.
  overload: System.Linq.Expressions.Expression.Catch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  id: ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ClearDebugInfo(SymbolDocumentInfo)
  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)
  fullName: System.Linq.Expressions.Expression.ClearDebugInfo(SymbolDocumentInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression"> for clearing a sequence point.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"> that represents the source file.
    return:
      type: System.Linq.Expressions.DebugInfoExpression
      description: An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression"> for clearning a sequence point.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Coalesce(Expression,Expression)
  nameWithType: Expression.Coalesce(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Coalesce(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a coalescing operation.
  remarks: "The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n#### Result Type  \n The following rules determine the result type:  \n  \n-   If .Type represents a nullable type and .Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of .Type.  \n  \n-   Otherwise, if .Type is implicitly convertible to .Type, the result type is .Type.  \n  \n-   Otherwise, if the non-nullable equivalent of .Type is implicitly convertible to .Type, the result type is .Type."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Coalesce*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Coalesce(Expression,Expression,LambdaExpression)
  nameWithType: Expression.Coalesce(Expression,Expression,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.Coalesce(Expression,Expression,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a coalescing operation, given a conversion function.
  remarks: "The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.  \n  \n The following rules determine the result type:  \n  \n-   If .Type represents a nullable type and .Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of .Type.  \n  \n-   Otherwise, if .Type is implicitly convertible to .Type, the result type is .Type.  \n  \n-   Otherwise, if the non-nullable equivalent of .Type is implicitly convertible to .Type, the result type is .Type."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A> and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Coalesce*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Condition(Expression,Expression,Expression)
  nameWithType: Expression.Condition(Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Condition(Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression"> that represents a conditional statement.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of .
  example:
  - "The following code example shows how to create an expression that represents a conditional statement. If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#3](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#3)]"
  syntax:
    content: public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.Test%2A> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A> property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A <see cref="T:System.Linq.Expressions.ConditionalExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ConditionalExpression.Test%2A>, <xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A>, and <xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Condition*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Condition(Expression,Expression,Expression,Type)
  nameWithType: Expression.Condition(Expression,Expression,Expression,Type)
  fullName: System.Linq.Expressions.Expression.Condition(Expression,Expression,Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression"> that represents a conditional statement.
  remarks: This method allows explicitly unifying the result type of the conditional expression in cases where the types of  and  expressions are not equal. Types of both  and  must be implicitly reference assignable to the result type. The  is allowed to be <xref:System.Void>.
  syntax:
    content: public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.Test%2A> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A> property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A> property equal to.
    - id: type
      type: System.Type
      description: A <xref:System.Linq.Expressions.Expression.Type%2A> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A <see cref="T:System.Linq.Expressions.ConditionalExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ConditionalExpression.Test%2A>, <xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A>, and <xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Condition*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Constant(System.Object)
  id: Constant(System.Object)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Constant(Object)
  nameWithType: Expression.Constant(Object)
  fullName: System.Linq.Expressions.Expression.Constant(Object)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ConstantExpression"> that has the <xref:System.Linq.Expressions.ConstantExpression.Value%2A> property set to the specified value.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of . If  is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.  \n  \n To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type."
  example:
  - "The following code example shows how to create an expression that represents a constant value.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#4](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#4)]"
  syntax:
    content: public static System.Linq.Expressions.ConstantExpression Constant (object value);
    parameters:
    - id: value
      type: System.Object
      description: An <see cref="T:System.Object"> to set the <xref:System.Linq.Expressions.ConstantExpression.Value%2A> property equal to.
    return:
      type: System.Linq.Expressions.ConstantExpression
      description: A <see cref="T:System.Linq.Expressions.ConstantExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ConstantExpression.Value%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.Constant*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  id: Constant(System.Object,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Constant(Object,Type)
  nameWithType: Expression.Constant(Object,Type)
  fullName: System.Linq.Expressions.Expression.Constant(Object,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ConstantExpression"> that has the <xref:System.Linq.Expressions.ConstantExpression.Value%2A> and <xref:System.Linq.Expressions.Expression.Type%2A> properties set to the specified values.
  remarks: This method can be useful for representing values of nullable types.
  example:
  - "The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#22](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#22)]"
  syntax:
    content: public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);
    parameters:
    - id: value
      type: System.Object
      description: An <see cref="T:System.Object"> to set the <xref:System.Linq.Expressions.ConstantExpression.Value%2A> property equal to.
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.ConstantExpression
      description: A <see cref="T:System.Linq.Expressions.ConstantExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ConstantExpression.Value%2A> and <xref:System.Linq.Expressions.Expression.Type%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Constant*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  id: Continue(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Continue(LabelTarget)
  nameWithType: Expression.Continue(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Continue(LabelTarget)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a continue statement.
  remarks: ''
  example:
  - "The following example demonstrates how to create a loop expression that uses the Continue method.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#46](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#46)]"
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Continue, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Continue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  id: Continue(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Continue(LabelTarget,Type)
  nameWithType: Expression.Continue(LabelTarget,Type)
  fullName: System.Linq.Expressions.Expression.Continue(LabelTarget,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a continue statement with the specified type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: type
      type: System.Type
      description: An <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Continue, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , the <xref:System.Linq.Expressions.Expression.Type%2A> property set to , and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Continue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  id: Convert(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Convert(Expression,Type)
  nameWithType: Expression.Convert(Expression,Type)
  fullName: System.Linq.Expressions.Expression.Convert(Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a type conversion operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If either .Type or  is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both .Type and  represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either .Type or  is a reference type and an explicit boxing, unboxing, or reference conversion exists from .Type to , the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to , the node is not lifted.  \n  \n-   If one or both of .Type or  is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both .Type and  are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted."
  example:
  - "The following code example shows how to create an expression that represents a type convertion operation.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#23](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#23)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> and <xref:System.Linq.Expressions.Expression.Type%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Convert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Convert(Expression,Type,MethodInfo)
  nameWithType: Expression.Convert(Expression,Type,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Convert(Expression,Type,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a conversion operation for which the implementing method is specified.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.  \n  \n-   Otherwise, if either .Type or  is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both .Type and  represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either .Type or  is a reference type and an explicit boxing, unboxing, or reference conversion exists from .Type to , the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to , the node is not lifted.  \n  \n-   If either or both of .Type or  are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both .Type and  are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A>, <xref:System.Linq.Expressions.Expression.Type%2A>, and <xref:System.Linq.Expressions.UnaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Convert*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ConvertChecked(Expression,Type)
  nameWithType: Expression.ConvertChecked(Expression,Type)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a conversion operation that throws an exception if the target type is overflowed.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If either .Type or  is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both .Type and  represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either .Type or  is a reference type and an explicit boxing, unboxing, or reference conversion exists from .Type to , the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to , the node is not lifted.  \n  \n-   If either or both of .Type or  are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both .Type and  are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> and <xref:System.Linq.Expressions.Expression.Type%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ConvertChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ConvertChecked(Expression,Type,MethodInfo)
  nameWithType: Expression.ConvertChecked(Expression,Type,MethodInfo)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(Expression,Type,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.  \n  \n-   Otherwise, if either .Type or  is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise:  \n  \n    -   If both .Type and  represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  \n  \n    -   If either .Type or  is a reference type and an explicit boxing, unboxing, or reference conversion exists from .Type to , the implementing method is `null`.  \n  \n#### Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to , the node is not lifted.  \n  \n-   If either or both of .Type or  are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  \n  \n If the implementing method is `null`:  \n  \n-   If both .Type and  are non-nullable, the node is not lifted.  \n  \n-   Otherwise the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A>, <xref:System.Linq.Expressions.Expression.Type%2A>, and <xref:System.Linq.Expressions.UnaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ConvertChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)
  nameWithType: Expression.DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)
  fullName: System.Linq.Expressions.Expression.DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression"> with the specified span.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"> that represents the source file.
    - id: startLine
      type: System.Int32
      description: The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression">. Must be greater than 0.
    - id: startColumn
      type: System.Int32
      description: The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression">. Must be greater than 0.
    - id: endLine
      type: System.Int32
      description: The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression">. Must be greater or equal than the start line.
    - id: endColumn
      type: System.Int32
      description: The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression">. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.
    return:
      type: System.Linq.Expressions.DebugInfoExpression
      description: An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  id: Decrement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Decrement(Expression)
  nameWithType: Expression.Decrement(Expression)
  fullName: System.Linq.Expressions.Expression.Decrement(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the decrementing of the expression by 1.
  remarks: This expression is functional and does not change the value of the object passed to it.
  example:
  - "The following code example shows how to create an expression that substracts 1 from a given value.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#5](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#5)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to decrement.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the decremented expression.
  overload: System.Linq.Expressions.Expression.Decrement*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Decrement(Expression,MethodInfo)
  nameWithType: Expression.Decrement(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Decrement(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the decrementing of the expression by 1.
  remarks: This expression is functional and does not change the value of the object passed to it.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to decrement.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the decremented expression.
  overload: System.Linq.Expressions.Expression.Decrement*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Default(System.Type)
  id: Default(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Default(Type)
  nameWithType: Expression.Default(Type)
  fullName: System.Linq.Expressions.Expression.Default(Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DefaultExpression"> that has the <xref:System.Linq.Expressions.Expression.Type%2A> property set to the specified type.
  remarks: ''
  example:
  - "The following code example shows how to create an expression that represents a default vaule for a given type.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#6](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#6)]"
  syntax:
    content: public static System.Linq.Expressions.DefaultExpression Default (Type type);
    parameters:
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.DefaultExpression
      description: A <see cref="T:System.Linq.Expressions.DefaultExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.Expression.Type%2A> property set to the specified type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Divide(Expression,Expression)
  nameWithType: Expression.Divide(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Divide(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic division operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator."
  example:
  - "The following code example shows how to create an expression that divides divides its first argument by its second argument.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#7](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#7)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Divide*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Divide(Expression,Expression,MethodInfo)
  nameWithType: Expression.Divide(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Divide(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic division operation. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Divide*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: DivideAssign(Expression,Expression)
  nameWithType: Expression.DivideAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a division assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.DivideAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: DivideAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.DivideAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a division assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.DivideAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a division assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.DivideAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The arguments to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.Binder%2A> and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder,Type,Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression)
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.Binder%2A> and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder,Type,Expression[])
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression[])
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: The arguments to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.Binder%2A> and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder,Type,Expression,Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.Binder%2A> and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.Binder%2A> and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder>.
  remarks: The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: returnType
      type: System.Type
      description: The result type of the dynamic expression.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third argument to the dynamic operation.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.Binder%2A> and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.Dynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ElementInit(MethodInfo,IEnumerable<Expression>)
  nameWithType: Expression.ElementInit(MethodInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ElementInit(MethodInfo,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an <see cref="T:System.Linq.Expressions.ElementInit">, given an <xref:System.Collections.Generic.IEnumerable%601> as the second argument.
  remarks: "The  parameter must represent an instance method named \"Add\" (case insensitive). The add method must have the same number of parameters as the number of elements in . The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in  must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of ."
  example:
  - "The following example demonstrates how to use the [ElementInit(MethodInfo, Expression\\[\\])](assetId:///M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])?qualifyHint=False&autoUpgrade=False) method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.  \n  \n [!CODE [System.Linq.Expressions.Expression#4](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#4)]"
  syntax:
    content: public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects to set the <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property equal to.
    return:
      type: System.Linq.Expressions.ElementInit
      description: An <see cref="T:System.Linq.Expressions.ElementInit"> that has the <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> and <xref:System.Linq.Expressions.ElementInit.Arguments%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ElementInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ElementInit(MethodInfo,Expression[])
  nameWithType: Expression.ElementInit(MethodInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.ElementInit(MethodInfo,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an <see cref="T:System.Linq.Expressions.ElementInit">, given an array of values as the second argument.
  remarks: "The  parameter must represent an instance method named \"Add\" (case insensitive). The add method must have the same number of parameters as the number of elements in . The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in  must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of ."
  example:
  - "The following example demonstrates how to use the ElementInit method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.  \n  \n [!CODE [System.Linq.Expressions.Expression#4](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#4)]"
  syntax:
    content: public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects to set the <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property equal to.
    return:
      type: System.Linq.Expressions.ElementInit
      description: An <see cref="T:System.Linq.Expressions.ElementInit"> that has the <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> and <xref:System.Linq.Expressions.ElementInit.Arguments%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ElementInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Empty
  id: Empty
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Empty()
  nameWithType: Expression.Empty()
  fullName: System.Linq.Expressions.Expression.Empty()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an empty expression that has <see cref="T:System.Void"> type.
  remarks: An empty expression can be used where an expression is expected but no action is desired. For example, you can use an empty expression as the last expression in a block expression. In this case, the block expression's return value is void.
  example:
  - "The following code example shows how to create an empty expression and add it to a block expression.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#31](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#31)]"
  syntax:
    content: public static System.Linq.Expressions.DefaultExpression Empty ();
    parameters: []
    return:
      type: System.Linq.Expressions.DefaultExpression
      description: A <see cref="T:System.Linq.Expressions.DefaultExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.Expression.Type%2A> property set to <xref:System.Void>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Equal(Expression,Expression)
  nameWithType: Expression.Equal(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Equal(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an equality comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  example:
  - "The following code example shows how to create an expression that checks whether the values of its two arguments are equal.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#8](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#8)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Equal*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Equal(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.Equal(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Equal(Expression,Expression,Boolean,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an equality comparison. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `true`; `false` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Equal*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ExclusiveOr(Expression,Expression)
  nameWithType: Expression.ExclusiveOr(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise `XOR` operation, using `op_ExclusiveOr` for user-defined types.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator."
  example:
  - "The following code example shows how to create an expression that represents the logical XOR operation.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#9](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#9)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ExclusiveOr*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ExclusiveOr(Expression,Expression,MethodInfo)
  nameWithType: Expression.ExclusiveOr(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise `XOR` operation, using `op_ExclusiveOr` for user-defined types. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the chosen implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ExclusiveOr*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ExclusiveOrAssign(Expression,Expression)
  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise XOR assignment operation, using `op_ExclusiveOr` for user-defined types.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ExclusiveOrAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise XOR assignment operation, using `op_ExclusiveOr` for user-defined types.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise XOR assignment operation, using `op_ExclusiveOr` for user-defined types.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ExclusiveOrAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  id: Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Field(Expression,FieldInfo)
  nameWithType: Expression.Field(Expression,FieldInfo)
  fullName: System.Linq.Expressions.Expression.Field(Expression,FieldInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberExpression"> that represents accessing a field.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of .
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.MemberExpression.Expression%2A> property equal to. For `static` (`Shared` in Visual Basic),  must be `null`.
    - id: field
      type: System.Reflection.FieldInfo
      description: The <see cref="T:System.Reflection.FieldInfo"> to set the <xref:System.Linq.Expressions.MemberExpression.Member%2A> property equal to.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <see cref="T:System.Linq.Expressions.MemberExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MemberExpression.Expression%2A> and <xref:System.Linq.Expressions.MemberExpression.Member%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Field*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  id: Field(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Field(Expression,String)
  nameWithType: Expression.Field(Expression,String)
  fullName: System.Linq.Expressions.Expression.Field(Expression,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberExpression"> that represents accessing a field given the name of the field.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by .  \n  \n This method searches .Type and its base types for a field that has the name . Public fields are given preference over non-public fields. If a matching field is found, this method passes  and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>."
  example:
  - "The following code example shows how to create an expression that represents accessing a field.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#37](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#37)]"
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> whose <xref:System.Linq.Expressions.Expression.Type%2A> contains a field named . This can be null for static fields.
    - id: fieldName
      type: System.String
      description: The name of a field to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <see cref="T:System.Linq.Expressions.MemberExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType>, the <xref:System.Linq.Expressions.MemberExpression.Expression%2A> property set to , and the <xref:System.Linq.Expressions.MemberExpression.Member%2A> property set to the <xref:System.Reflection.FieldInfo> that represents the field denoted by .
  overload: System.Linq.Expressions.Expression.Field*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Field(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Field(Expression,Type,String)
  nameWithType: Expression.Field(Expression,Type,String)
  fullName: System.Linq.Expressions.Expression.Field(Expression,Type,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberExpression"> that represents accessing a field.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The containing object of the field. This can be null for static fields.
    - id: type
      type: System.Type
      description: The <xref:System.Linq.Expressions.Expression.Type%2A> that contains the field.
    - id: fieldName
      type: System.String
      description: The field to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The created <see cref="T:System.Linq.Expressions.MemberExpression">.
  overload: System.Linq.Expressions.Expression.Field*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  id: GetActionType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GetActionType(Type[])
  nameWithType: Expression.GetActionType(Type[])
  fullName: System.Linq.Expressions.Expression.GetActionType(Type[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Type"> object that represents a generic `System.Action` delegate type that has specific type arguments.
  remarks: As an example, if the elements of  represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.
  syntax:
    content: public static Type GetActionType (Type[] typeArgs);
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of up to sixteen <see cref="T:System.Type"> objects that specify the type arguments for the `System.Action` delegate type.
    return:
      type: System.Type
      description: The type of a `System.Action` delegate that has the specified type arguments.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  id: GetDelegateType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GetDelegateType(Type[])
  nameWithType: Expression.GetDelegateType(Type[])
  fullName: System.Linq.Expressions.Expression.GetDelegateType(Type[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Gets a <xref:System.Linq.Expressions.Expression.Type%2A> object that represents a generic `System.Func` or `System.Action` delegate type that has specific type arguments.
  remarks: "The last type argument determines the return type of the delegate. If no Func or Action is large enough, it will generate a custom delegate type.  \n  \n As with Func, the last argument is the return type. It can be set to System.Void to produce an Action."
  syntax:
    content: public static Type GetDelegateType (Type[] typeArgs);
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: The type arguments of the delegate.
    return:
      type: System.Type
      description: The delegate type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  id: GetFuncType(System.Type[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GetFuncType(Type[])
  nameWithType: Expression.GetFuncType(Type[])
  fullName: System.Linq.Expressions.Expression.GetFuncType(Type[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <xref:System.Linq.Expressions.Expression.Type%2A> object that represents a generic `System.Func` delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.
  remarks: "must contain at least one and at most seventeen elements.  \n  \n As an example, if the elements of  represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic."
  syntax:
    content: public static Type GetFuncType (Type[] typeArgs);
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of one to seventeen <see cref="T:System.Type"> objects that specify the type arguments for the `System.Func` delegate type.
    return:
      type: System.Type
      description: The type of a `System.Func` delegate that has the specified type arguments.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  id: Goto(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Goto(LabelTarget)
  nameWithType: Expression.Goto(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a "go to" statement.
  remarks: ''
  example:
  - "The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#45](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#45)]"
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Goto, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to the specified value, and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Goto*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Goto(LabelTarget,Expression)
  nameWithType: Expression.Goto(LabelTarget,Expression)
  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a "go to" statement. The value passed to the label upon jumping can be specified.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Goto, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , and  to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Goto*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Goto(LabelTarget,Type)
  nameWithType: Expression.Goto(LabelTarget,Type)
  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a "go to" statement with the specified type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: type
      type: System.Type
      description: An <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Goto, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to the specified value, the <xref:System.Linq.Expressions.Expression.Type%2A> property set to , and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Goto*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Goto(LabelTarget,Expression,Type)
  nameWithType: Expression.Goto(LabelTarget,Expression,Type)
  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a "go to" statement with the specified type. The value passed to the label upon jumping can be specified.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Goto, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , the <xref:System.Linq.Expressions.Expression.Type%2A> property set to , and  to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Goto*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GreaterThan(Expression,Expression)
  nameWithType: Expression.GreaterThan(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThan(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a "greater than" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the \"greater than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  example:
  - "The following code example shows how to create an expression that compares two integers.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#10](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#10)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.GreaterThan*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GreaterThan(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.GreaterThan(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThan(Expression,Expression,Boolean,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a "greater than" numeric comparison. The implementing method can be specified.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation :  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the \"greater than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `true`; `false` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.GreaterThan*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GreaterThanOrEqual(Expression,Expression)
  nameWithType: Expression.GreaterThanOrEqual(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a "greater than or equal" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the \"greater than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  example:
  - "The following code example shows how to create an expression that compares two integers.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#11](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#11)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.GreaterThanOrEqual*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a "greater than or equal" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the \"greater than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `true`; `false` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.GreaterThanOrEqual*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IfThen(Expression,Expression)
  nameWithType: Expression.IfThen(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.IfThen(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression"> that represents a conditional block with an `if` statement.
  remarks: ''
  example:
  - "The following code example shows how to create an expression that represents a conditional block.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#32](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#32)]"
  syntax:
    content: public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.Test%2A> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A <see cref="T:System.Linq.Expressions.ConditionalExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ConditionalExpression.Test%2A>, <xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A>, properties set to the specified values. The <xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression"> returned by this method is <xref:System.Void>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IfThenElse(Expression,Expression,Expression)
  nameWithType: Expression.IfThenElse(Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.IfThenElse(Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression"> that represents a conditional block with `if` and `else` statements.
  remarks: ''
  example:
  - "The following code example shows how to create an expression that represents a conditional block.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#33](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#33)]"
  syntax:
    content: public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.Test%2A> property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A> property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A> property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A <see cref="T:System.Linq.Expressions.ConditionalExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ConditionalExpression.Test%2A>, <xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A>, and <xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A> properties set to the specified values. The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression"> returned by this method is <xref:System.Void>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  id: Increment(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Increment(Expression)
  nameWithType: Expression.Increment(Expression)
  fullName: System.Linq.Expressions.Expression.Increment(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the incrementing of the expression value by 1.
  remarks: This expression is functional and does not change the value of the object that is passed to it.
  example:
  - "The following code example shows how to create an expression that represents an increment operation.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#24](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#24)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to increment.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the incremented expression.
  overload: System.Linq.Expressions.Expression.Increment*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Increment(Expression,MethodInfo)
  nameWithType: Expression.Increment(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Increment(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the incrementing of the expression by 1.
  remarks: This expression is functional and does not change the value of the object that is passed to it.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to increment.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the incremented expression.
  overload: System.Linq.Expressions.Expression.Increment*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Invoke(Expression,IEnumerable<Expression>)
  nameWithType: Expression.Invoke(Expression,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Invoke(Expression,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an <see cref="T:System.Linq.Expressions.InvocationExpression"> that applies a delegate or lambda expression to a list of argument expressions.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by .Type.  \n  \n The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if  is `null`. Otherwise, it contains the same elements as  except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding parameter of the delegate represented by  is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of ."
  example:
  - "The following example demonstrates how to use the [Invoke(Expression, Expression\\[\\])](assetId:///M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])?qualifyHint=False&autoUpgrade=False) method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.  \n  \n [!CODE [System.Linq.Expressions.Expression#6](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#6)]"
  syntax:
    content: public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the delegate or lambda expression to be applied to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects that represent the arguments that the delegate or lambda expression is applied to.
    return:
      type: System.Linq.Expressions.InvocationExpression
      description: An <see cref="T:System.Linq.Expressions.InvocationExpression"> that applies the specified delegate or lambda expression to the provided arguments.
  overload: System.Linq.Expressions.Expression.Invoke*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Invoke(Expression,Expression[])
  nameWithType: Expression.Invoke(Expression,Expression[])
  fullName: System.Linq.Expressions.Expression.Invoke(Expression,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an <see cref="T:System.Linq.Expressions.InvocationExpression"> that applies a delegate or lambda expression to a list of argument expressions.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by .Type.  \n  \n The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if  is `null`. Otherwise, it contains the same elements as  except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if the corresponding parameter of the delegate represented by  is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of ."
  example:
  - "The following example demonstrates how to use the Invoke method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.  \n  \n [!CODE [System.Linq.Expressions.Expression#6](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#6)]"
  syntax:
    content: public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the delegate or lambda expression to be applied.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects that represent the arguments that the delegate or lambda expression is applied to.
    return:
      type: System.Linq.Expressions.InvocationExpression
      description: An <see cref="T:System.Linq.Expressions.InvocationExpression"> that applies the specified delegate or lambda expression to the provided arguments.
  overload: System.Linq.Expressions.Expression.Invoke*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  id: IsFalse(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IsFalse(Expression)
  nameWithType: Expression.IsFalse(Expression)
  fullName: System.Linq.Expressions.Expression.IsFalse(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to false.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to evaluate.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <see cref="T:System.Linq.Expressions.UnaryExpression">.
  overload: System.Linq.Expressions.Expression.IsFalse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IsFalse(Expression,MethodInfo)
  nameWithType: Expression.IsFalse(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsFalse(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to false.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to evaluate.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <see cref="T:System.Linq.Expressions.UnaryExpression">.
  overload: System.Linq.Expressions.Expression.IsFalse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  id: IsTrue(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IsTrue(Expression)
  nameWithType: Expression.IsTrue(Expression)
  fullName: System.Linq.Expressions.Expression.IsTrue(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to true.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to evaluate.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <see cref="T:System.Linq.Expressions.UnaryExpression">.
  overload: System.Linq.Expressions.Expression.IsTrue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: IsTrue(Expression,MethodInfo)
  nameWithType: Expression.IsTrue(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsTrue(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to true.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to evaluate.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <see cref="T:System.Linq.Expressions.UnaryExpression">.
  overload: System.Linq.Expressions.Expression.IsTrue*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Label
  id: Label
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label()
  nameWithType: Expression.Label()
  fullName: System.Linq.Expressions.Expression.Label()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LabelTarget"> representing a label with void type and no name.
  remarks: ''
  example:
  - "The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#43](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#43)]"
  syntax:
    content: public static System.Linq.Expressions.LabelTarget Label ();
    parameters: []
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new <see cref="T:System.Linq.Expressions.LabelTarget">.
  overload: System.Linq.Expressions.Expression.Label*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  id: Label(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label(LabelTarget)
  nameWithType: Expression.Label(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Label(LabelTarget)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LabelExpression"> representing a label without a default value.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> which this <xref:System.Linq.Expressions.LabelExpression> will be associated with.
    return:
      type: System.Linq.Expressions.LabelExpression
      description: A <see cref="T:System.Linq.Expressions.LabelExpression"> without a default value.
  overload: System.Linq.Expressions.Expression.Label*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Label(System.String)
  id: Label(System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label(String)
  nameWithType: Expression.Label(String)
  fullName: System.Linq.Expressions.Expression.Label(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LabelTarget"> representing a label with void type and the given name.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LabelTarget Label (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of the label.
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new <see cref="T:System.Linq.Expressions.LabelTarget">.
  overload: System.Linq.Expressions.Expression.Label*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Label(System.Type)
  id: Label(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label(Type)
  nameWithType: Expression.Label(Type)
  fullName: System.Linq.Expressions.Expression.Label(Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LabelTarget"> representing a label with the given type.
  remarks: ''
  example:
  - "The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#44](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#44)]"
  syntax:
    content: public static System.Linq.Expressions.LabelTarget Label (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type of value that is passed when jumping to the label.
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new <see cref="T:System.Linq.Expressions.LabelTarget">.
  overload: System.Linq.Expressions.Expression.Label*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label(LabelTarget,Expression)
  nameWithType: Expression.Label(LabelTarget,Expression)
  fullName: System.Linq.Expressions.Expression.Label(LabelTarget,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LabelExpression"> representing a label with the given default value.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> which this <xref:System.Linq.Expressions.LabelExpression> will be associated with.
    - id: defaultValue
      type: System.Linq.Expressions.Expression
      description: The value of this <see cref="T:System.Linq.Expressions.LabelExpression"> when the label is reached through regular control flow.
    return:
      type: System.Linq.Expressions.LabelExpression
      description: A <see cref="T:System.Linq.Expressions.LabelExpression"> with the given default value.
  overload: System.Linq.Expressions.Expression.Label*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)
  id: Label(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Label(Type,String)
  nameWithType: Expression.Label(Type,String)
  fullName: System.Linq.Expressions.Expression.Label(Type,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LabelTarget"> representing a label with the given type and name.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LabelTarget Label (Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: The type of value that is passed when jumping to the label.
    - id: name
      type: System.String
      description: The name of the label.
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new <see cref="T:System.Linq.Expressions.LabelTarget">.
  overload: System.Linq.Expressions.Expression.Label*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ParameterExpression> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that has the <xref:System.Linq.Expressions.LambdaExpression.NodeType%2A> property equal to Lambda and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,ParameterExpression[])
  nameWithType: Expression.Lambda(Expression,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,ParameterExpression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LambdaExpression"> by first constructing a delegate type.
  remarks: "The  parameter must not have more than sixteen elements.  \n  \n The elements of  must be reference equal to the parameter expressions in .  \n  \n This method constructs an appropriate delegate type from one of the `System.Func` generic delegates. It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>."
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of <see cref="T:System.Linq.Expressions.ParameterExpression"> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: tailCall
      type: System.Boolean
      description: A <see cref="T:System.Boolean"> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ParameterExpression> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that has the <xref:System.Linq.Expressions.LambdaExpression.NodeType%2A> property equal to Lambda and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,Boolean,ParameterExpression[])
  nameWithType: Expression.Lambda(Expression,Boolean,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,ParameterExpression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: tailCall
      type: System.Boolean
      description: A <see cref="T:System.Boolean"> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression"> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that has the <xref:System.Linq.Expressions.LambdaExpression.NodeType%2A> property equal to Lambda and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,String,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ParameterExpression> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that has the <xref:System.Linq.Expressions.LambdaExpression.NodeType%2A> property equal to Lambda and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type,Expression,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type,Expression,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LambdaExpression"> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.
  remarks: "The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  \n  \n The number of parameters for the delegate type represented by must equal the length of .  \n  \n The elements of  must be reference equal to the parameter expressions in .  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to . If  is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection."
  example:
  - "The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#42](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#42)]"
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <see cref="T:System.Type"> that represents a delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ParameterExpression> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: An object that represents a lambda expression which has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type,Expression,ParameterExpression[])
  nameWithType: Expression.Lambda(Type,Expression,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,ParameterExpression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LambdaExpression"> by first constructing a delegate type. It can be used when the delegate type is not known at compile time.
  remarks: "The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  \n  \n The number of parameters for the delegate type represented by  must equal the length of .  \n  \n The elements of  must be reference equal to the parameter expressions in .  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to . If  is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection."
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <see cref="T:System.Type"> that represents a delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of <see cref="T:System.Linq.Expressions.ParameterExpression"> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: An object that represents a lambda expression which has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: tailCall
      type: System.Boolean
      description: A <see cref="T:System.Boolean"> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ParameterExpression> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that has the <xref:System.Linq.Expressions.LambdaExpression.NodeType%2A> property equal to Lambda and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <xref:System.Linq.Expressions.Expression.Type%2A> representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: tailCall
      type: System.Boolean
      description: A <see cref="T:System.Boolean"> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ParameterExpression> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that has the <xref:System.Linq.Expressions.LambdaExpression.NodeType%2A> property equal to Lambda and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type,Expression,Boolean,ParameterExpression[])
  nameWithType: Expression.Lambda(Type,Expression,Boolean,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,Boolean,ParameterExpression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <xref:System.Linq.Expressions.Expression.Type%2A> representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: tailCall
      type: System.Boolean
      description: A <see cref="T:System.Boolean"> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression"> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that has the <xref:System.Linq.Expressions.LambdaExpression.NodeType%2A> property equal to Lambda and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <xref:System.Linq.Expressions.Expression.Type%2A> representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ParameterExpression> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that has the <xref:System.Linq.Expressions.LambdaExpression.NodeType%2A> property equal to Lambda and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: delegateType
      type: System.Type
      description: A <xref:System.Linq.Expressions.Expression.Type%2A> representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: tailCall
      type: System.Boolean
      description: A <see cref="T:System.Boolean"> that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ParameterExpression> objects to use to populate the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that has the <xref:System.Linq.Expressions.LambdaExpression.NodeType%2A> property equal to Lambda and the <xref:System.Linq.Expressions.LambdaExpression.Body%2A> and <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Lambda*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: To be added.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: To be added.
    return:
      type: System.Linq.Expressions.Expression`1
      description: To be added.
  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,ParameterExpression[])
  nameWithType: Expression.Lambda(Expression,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,ParameterExpression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: To be added.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: To be added.
    return:
      type: System.Linq.Expressions.Expression`1
      description: To be added.
  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: To be added.
    - id: tailCall
      type: System.Boolean
      description: To be added.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: To be added.
    return:
      type: System.Linq.Expressions.Expression`1
      description: To be added.
  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,Boolean,ParameterExpression[])
  nameWithType: Expression.Lambda(Expression,Boolean,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,ParameterExpression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: To be added.
    - id: tailCall
      type: System.Boolean
      description: To be added.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: To be added.
    return:
      type: System.Linq.Expressions.Expression`1
      description: To be added.
  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,String,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: To be added.
    return:
      type: System.Linq.Expressions.Expression`1
      description: To be added.
  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate> (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: tailCall
      type: System.Boolean
      description: To be added.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: To be added.
    return:
      type: System.Linq.Expressions.Expression`1
      description: To be added.
  overload: System.Linq.Expressions.Expression.Lambda<TDelegate>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LeftShift(Expression,Expression)
  nameWithType: Expression.LeftShift(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.LeftShift(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise left-shift operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and .Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LeftShift*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LeftShift(Expression,Expression,MethodInfo)
  nameWithType: Expression.LeftShift(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShift(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise left-shift operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and .Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LeftShift*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LeftShiftAssign(Expression,Expression)
  nameWithType: Expression.LeftShiftAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise left-shift assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LeftShiftAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LeftShiftAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.LeftShiftAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise left-shift assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LeftShiftAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise left-shift assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LeftShiftAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LessThan(Expression,Expression)
  nameWithType: Expression.LessThan(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.LessThan(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a "less than" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the \"less than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  example:
  - "The following code example shows how to create an expression that compares two integers.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#25](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#25)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LessThan*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LessThan(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.LessThan(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThan(Expression,Expression,Boolean,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a "less than" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the \"less than\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `true`; `false` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LessThan*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LessThanOrEqual(Expression,Expression)
  nameWithType: Expression.LessThanOrEqual(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a " less than or equal" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the \"less than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  example:
  - "The following code example shows how to create an expression that compares two integers.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#26](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#26)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LessThanOrEqual*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a "less than or equal" numeric comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the \"less than or equal\" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `true`; `false` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.LessThanOrEqual*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListBind(MemberInfo,IEnumerable<ElementInit>)
  nameWithType: Expression.ListBind(MemberInfo,IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListBind(MemberInfo,IEnumerable<ElementInit>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberListBinding"> where the member is a field or property.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: A <see cref="T:System.Reflection.MemberInfo"> that represents a field or property to set the <xref:System.Linq.Expressions.MemberBinding.Member%2A> property equal to.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ElementInit> objects to use to populate the <xref:System.Linq.Expressions.MemberListBinding.Initializers%2A> collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A <see cref="T:System.Linq.Expressions.MemberListBinding"> that has the <xref:System.Linq.Expressions.MemberBinding.BindingType%2A> property equal to <xref:System.Linq.Expressions.MemberBindingType> and the <xref:System.Linq.Expressions.MemberBinding.Member%2A> and <xref:System.Linq.Expressions.MemberListBinding.Initializers%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ListBind*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListBind(MemberInfo,ElementInit[])
  nameWithType: Expression.ListBind(MemberInfo,ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListBind(MemberInfo,ElementInit[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberListBinding"> where the member is a field or property.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Linq.Expressions.ElementInit[] initializers);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: A <see cref="T:System.Reflection.MemberInfo"> that represents a field or property to set the <xref:System.Linq.Expressions.MemberBinding.Member%2A> property equal to.
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: An array of <see cref="T:System.Linq.Expressions.ElementInit"> objects to use to populate the <xref:System.Linq.Expressions.MemberListBinding.Initializers%2A> collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A <see cref="T:System.Linq.Expressions.MemberListBinding"> that has the <xref:System.Linq.Expressions.MemberBinding.BindingType%2A> property equal to <xref:System.Linq.Expressions.MemberBindingType> and the <xref:System.Linq.Expressions.MemberBinding.Member%2A> and <xref:System.Linq.Expressions.MemberListBinding.Initializers%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ListBind*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListBind(MethodInfo,IEnumerable<ElementInit>)
  nameWithType: Expression.ListBind(MethodInfo,IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListBind(MethodInfo,IEnumerable<ElementInit>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberListBinding"> based on a specified property accessor method.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents a property accessor method.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ElementInit> objects to use to populate the <xref:System.Linq.Expressions.MemberListBinding.Initializers%2A> collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A <see cref="T:System.Linq.Expressions.MemberListBinding"> that has the <xref:System.Linq.Expressions.MemberBinding.BindingType%2A> property equal to <xref:System.Linq.Expressions.MemberBindingType>, the <xref:System.Linq.Expressions.MemberBinding.Member%2A> property set to the <xref:System.Reflection.MemberInfo> that represents the property accessed in , and <xref:System.Linq.Expressions.MemberListBinding.Initializers%2A> populated with the elements of .
  overload: System.Linq.Expressions.Expression.ListBind*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListBind(MethodInfo,ElementInit[])
  nameWithType: Expression.ListBind(MethodInfo,ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListBind(MethodInfo,ElementInit[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberListBinding"> object based on a specified property accessor method.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.ElementInit[] initializers);
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents a property accessor method.
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: An array of <see cref="T:System.Linq.Expressions.ElementInit"> objects to use to populate the <xref:System.Linq.Expressions.MemberListBinding.Initializers%2A> collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A <see cref="T:System.Linq.Expressions.MemberListBinding"> that has the <xref:System.Linq.Expressions.MemberBinding.BindingType%2A> property equal to <xref:System.Linq.Expressions.MemberBindingType>, the <xref:System.Linq.Expressions.MemberBinding.Member%2A> property set to the <xref:System.Reflection.MemberInfo> that represents the property accessed in , and <xref:System.Linq.Expressions.MemberListBinding.Initializers%2A> populated with the elements of .
  overload: System.Linq.Expressions.Expression.ListBind*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression,IEnumerable<ElementInit>)
  nameWithType: Expression.ListInit(NewExpression,IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,IEnumerable<ElementInit>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"> that uses specified <xref:System.Linq.Expressions.ElementInit> objects to initialize a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type."
  example:
  - "The following example demonstrates how to use the [ListInit(NewExpression, ElementInit\\[\\])](assetId:///M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])?qualifyHint=False&autoUpgrade=False) method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.  \n  \n [!CODE [System.Linq.Expressions.Expression#7](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#7)]"
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> to set the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> property equal to.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.ElementInit> objects to use to populate the <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <see cref="T:System.Linq.Expressions.ListInitExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> and <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ListInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression,IEnumerable<Expression>)
  nameWithType: Expression.ListInit(NewExpression,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"> that uses a method named "Add" to add elements to a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n In order to use this overload of ListInit, .Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of .  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of . The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of . The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on .Type or its base type.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type."
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> to set the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> property equal to.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects to use to populate the <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <see cref="T:System.Linq.Expressions.ListInitExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.ListInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression,ElementInit[])
  nameWithType: Expression.ListInit(NewExpression,ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,ElementInit[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"> that uses specified <xref:System.Linq.Expressions.ElementInit> objects to initialize a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type."
  example:
  - "The following example demonstrates how to use the ListInit method to create a <xref:System.Linq.Expressions.ListInitExpression>that represents the initialization of a new dictionary instance with two key-value pairs.  \n  \n [!CODE [System.Linq.Expressions.Expression#7](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#7)]"
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.ElementInit[] initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> to set the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> property equal to.
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: An array of <see cref="T:System.Linq.Expressions.ElementInit"> objects to use to populate the <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <see cref="T:System.Linq.Expressions.ListInitExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> and <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ListInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression,Expression[])
  nameWithType: Expression.ListInit(NewExpression,Expression[])
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"> that uses a method named "Add" to add elements to a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n In order to use this overload of ListInit, .Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of .  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of . The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of . The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on .Type or its base type.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type."
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.Expression[] initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> to set the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> property equal to.
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects to use to populate the <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <see cref="T:System.Linq.Expressions.ListInitExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.ListInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)
  nameWithType: Expression.ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"> that uses a specified method to add elements to a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n If  is `null`, .Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. If  is not `null`, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must be assignable to the argument type of the add method.  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of . The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of . The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to .  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type."
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> to set the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> property equal to.
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects to use to populate the <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <see cref="T:System.Linq.Expressions.ListInitExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.ListInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ListInit(NewExpression,MethodInfo,Expression[])
  nameWithType: Expression.ListInit(NewExpression,MethodInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,MethodInfo,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ListInitExpression"> that uses a specified method to add elements to a collection.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  \n  \n If  is `null`, .Type or its base type must declare a single method named \"Add\" (case insensitive) that takes exactly one argument. If  is not `null`, it must represent an instance method named \"Add\" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must be assignable to the argument type of the add method.  \n  \n The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of . The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of . The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to .  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type."
  syntax:
    content: public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] initializers);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> to set the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> property equal to.
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents an instance method that takes one argument, that adds an element to a collection.
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects to use to populate the <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A <see cref="T:System.Linq.Expressions.ListInitExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.ListInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  id: Loop(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Loop(Expression)
  nameWithType: Expression.Loop(Expression)
  fullName: System.Linq.Expressions.Expression.Loop(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LoopExpression"> with the given body.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created <see cref="T:System.Linq.Expressions.LoopExpression">.
  overload: System.Linq.Expressions.Expression.Loop*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Loop(Expression,LabelTarget)
  nameWithType: Expression.Loop(Expression,LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(Expression,LabelTarget)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LoopExpression"> with the given body and break target.
  remarks: ''
  example:
  - "The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#44](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#44)]"
  syntax:
    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    - id: break
      type: System.Linq.Expressions.LabelTarget
      description: The break target used by the loop body.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created <see cref="T:System.Linq.Expressions.LoopExpression">.
  overload: System.Linq.Expressions.Expression.Loop*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Loop(Expression,LabelTarget,LabelTarget)
  nameWithType: Expression.Loop(Expression,LabelTarget,LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(Expression,LabelTarget,LabelTarget)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.LoopExpression"> with the given body.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    - id: break
      type: System.Linq.Expressions.LabelTarget
      description: The break target used by the loop body.
    - id: continue
      type: System.Linq.Expressions.LabelTarget
      description: The continue target used by the loop body.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created <see cref="T:System.Linq.Expressions.LoopExpression">.
  overload: System.Linq.Expressions.Expression.Loop*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeBinary(ExpressionType,Expression,Expression)
  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression">, given the left and right operands, by calling an appropriate factory method.
  remarks: The  parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls. For example, if  is <xref:System.Linq.Expressions.ExpressionType>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.
  example:
  - "The following example demonstrates how to use the MakeBinary method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.  \n  \n [!CODE [System.Linq.Expressions.Expression#8](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#8)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: The <see cref="T:System.Linq.Expressions.ExpressionType"> that specifies the type of binary operation.
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the left operand.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the right operand.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: The <see cref="T:System.Linq.Expressions.BinaryExpression"> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeBinary*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression">, given the left operand, right operand and implementing method, by calling the appropriate factory method.
  remarks: The  parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if  is <xref:System.Linq.Expressions.ExpressionType>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The  and  parameters are ignored if the appropriate factory method does not have a corresponding parameter.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: The <see cref="T:System.Linq.Expressions.ExpressionType"> that specifies the type of binary operation.
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the left operand.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the right operand.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `true`; `false` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that specifies the implementing method.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: The <see cref="T:System.Linq.Expressions.BinaryExpression"> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeBinary*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)
  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression">, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.
  remarks: The  parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if  is <xref:System.Linq.Expressions.ExpressionType>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The ,  and  parameters are ignored if the appropriate factory method does not have a corresponding parameter.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: The <see cref="T:System.Linq.Expressions.ExpressionType"> that specifies the type of binary operation.
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the left operand.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the right operand.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `true`; `false` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that specifies the implementing method.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> that represents a type conversion function. This parameter is used only if  is <xref:System.Linq.Expressions.ExpressionType> or compound assignment..
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: The <see cref="T:System.Linq.Expressions.BinaryExpression"> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeBinary*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeCatchBlock(Type,ParameterExpression,Expression,Expression)
  nameWithType: Expression.MakeCatchBlock(Type,ParameterExpression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MakeCatchBlock(Type,ParameterExpression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.CatchBlock"> representing a catch statement with the specified elements.
  remarks: must be non-null and match the type of  (if it is supplied).
  syntax:
    content: public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);
    parameters:
    - id: type
      type: System.Type
      description: The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> this <xref:System.Linq.Expressions.CatchBlock> will handle.
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A <see cref="T:System.Linq.Expressions.ParameterExpression"> representing a reference to the <xref:System.Exception> object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    - id: filter
      type: System.Linq.Expressions.Expression
      description: The body of the <see cref="T:System.Exception"> filter.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created <see cref="T:System.Linq.Expressions.CatchBlock">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder>.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite">.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The arguments to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>, <xref:System.Linq.Expressions.DynamicExpression.Binder%2A>, and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type,CallSiteBinder,Expression)
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression)
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder> and one argument.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite">.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>, <xref:System.Linq.Expressions.DynamicExpression.Binder%2A>, and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type,CallSiteBinder,Expression[])
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression[])
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder>.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite">.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: The arguments to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>, <xref:System.Linq.Expressions.DynamicExpression.Binder%2A>, and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression)
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder> and two arguments.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite">.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>, <xref:System.Linq.Expressions.DynamicExpression.Binder%2A>, and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder> and three arguments.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite">.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>, <xref:System.Linq.Expressions.DynamicExpression.Binder%2A>, and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.DynamicExpression"> that represents a dynamic operation bound by the provided <xref:System.Runtime.CompilerServices.CallSiteBinder> and four arguments.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite">.
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: The runtime binder for the dynamic operation.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first argument to the dynamic operation.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second argument to the dynamic operation.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third argument to the dynamic operation.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth argument to the dynamic operation.
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: A <see cref="T:System.Linq.Expressions.DynamicExpression"> that has <xref:System.Linq.Expressions.Expression.NodeType%2A> equal to <xref:System.Linq.Expressions.ExpressionType> and has the <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>, <xref:System.Linq.Expressions.DynamicExpression.Binder%2A>, and <xref:System.Linq.Expressions.DynamicExpression.Arguments%2A> set to the specified values.
  overload: System.Linq.Expressions.Expression.MakeDynamic*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)
  nameWithType: Expression.MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)
  fullName: System.Linq.Expressions.Expression.MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a jump of the specified <xref:System.Linq.Expressions.GotoExpressionKind>. The value passed to the label upon jumping can also be specified.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);
    parameters:
    - id: kind
      type: System.Linq.Expressions.GotoExpressionKind
      description: The <see cref="T:System.Linq.Expressions.GotoExpressionKind"> of the <xref:System.Linq.Expressions.GotoExpression>.
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to , the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , the <xref:System.Linq.Expressions.Expression.Type%2A> property set to , and  to be passed to the target label upon jumping.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)
  nameWithType: Expression.MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an <see cref="T:System.Linq.Expressions.IndexExpression"> that represents accessing an indexed property in an object.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. It should be null if the property is `static` (`shared` in Visual Basic).
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: An <see cref="T:System.Linq.Expressions.Expression"> representing the property to index.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An `IEnumerable<Expression>` (`IEnumerable (Of Expression)` in Visual Basic) that contains the arguments that will be used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <see cref="T:System.Linq.Expressions.IndexExpression">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  id: MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeMemberAccess(Expression,MemberInfo)
  nameWithType: Expression.MakeMemberAccess(Expression,MemberInfo)
  fullName: System.Linq.Expressions.Expression.MakeMemberAccess(Expression,MemberInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberExpression"> that represents accessing either a field or a property.
  remarks: This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of . If  is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>. If  is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.
  syntax:
    content: public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the object that the member belongs to. This can be null for static members.
    - id: member
      type: System.Reflection.MemberInfo
      description: The <see cref="T:System.Reflection.MemberInfo"> that describes the field or property to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The <see cref="T:System.Linq.Expressions.MemberExpression"> that results from calling the appropriate factory method.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  id: MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)
  nameWithType: Expression.MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)
  fullName: System.Linq.Expressions.Expression.MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.TryExpression"> representing a try block with the specified elements.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock> handlers);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the try expression. If null, bodh and all handlers must have identical type.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block. Pass null if the try block has no finally block associated with it.
    - id: fault
      type: System.Linq.Expressions.Expression
      description: The body of the fault block. Pass null if the try block has no fault block associated with it.
    - id: handlers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
      description: A collection of <see cref="T:System.Linq.Expressions.CatchBlock">s representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <see cref="T:System.Linq.Expressions.TryExpression">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeUnary(ExpressionType,Expression,Type)
  nameWithType: Expression.MakeUnary(ExpressionType,Expression,Type)
  fullName: System.Linq.Expressions.Expression.MakeUnary(ExpressionType,Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression">, given an operand, by calling the appropriate factory method.
  remarks: The  parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if  is equal to <xref:System.Linq.Expressions.ExpressionType>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The parameter is ignored if it does not apply to the factory method that is called.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
      description: The <see cref="T:System.Linq.Expressions.ExpressionType"> that specifies the type of unary operation.
    - id: operand
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the operand.
    - id: type
      type: System.Type
      description: The <see cref="T:System.Type"> that specifies the type to be converted to (pass `null` if not applicable).
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: The <see cref="T:System.Linq.Expressions.UnaryExpression"> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeUnary*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MakeUnary(ExpressionType,Expression,Type,MethodInfo)
  nameWithType: Expression.MakeUnary(ExpressionType,Expression,Type,MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeUnary(ExpressionType,Expression,Type,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression">, given an operand and implementing method, by calling the appropriate factory method.
  remarks: The  parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if  is equal to <xref:System.Linq.Expressions.ExpressionType>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The  and  parameters are ignored if they do not apply to the factory method that is called.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
      description: The <see cref="T:System.Linq.Expressions.ExpressionType"> that specifies the type of unary operation.
    - id: operand
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> that represents the operand.
    - id: type
      type: System.Type
      description: The <see cref="T:System.Type"> that specifies the type to be converted to (pass `null` if not applicable).
    - id: method
      type: System.Reflection.MethodInfo
      description: The <see cref="T:System.Reflection.MethodInfo"> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: The <see cref="T:System.Linq.Expressions.UnaryExpression"> that results from calling the appropriate factory method.
  overload: System.Linq.Expressions.Expression.MakeUnary*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberBind(MemberInfo,IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberBind(MemberInfo,IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberBind(MemberInfo,IEnumerable<MemberBinding>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding"> that represents the recursive initialization of members of a field or property.
  remarks: The  parameter must represent a field or property.
  syntax:
    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: The <see cref="T:System.Reflection.MemberInfo"> to set the <xref:System.Linq.Expressions.MemberBinding.Member%2A> property equal to.
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.MemberBinding> objects to use to populate the <xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A> collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A <see cref="T:System.Linq.Expressions.MemberMemberBinding"> that has the <xref:System.Linq.Expressions.MemberBinding.BindingType%2A> property equal to <xref:System.Linq.Expressions.MemberBindingType> and the <xref:System.Linq.Expressions.MemberBinding.Member%2A> and <xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberBind*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberBind(MemberInfo,MemberBinding[])
  nameWithType: Expression.MemberBind(MemberInfo,MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberBind(MemberInfo,MemberBinding[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding"> that represents the recursive initialization of members of a field or property.
  remarks: The  parameter must represent a field or property.
  syntax:
    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Linq.Expressions.MemberBinding[] bindings);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: The <see cref="T:System.Reflection.MemberInfo"> to set the <xref:System.Linq.Expressions.MemberBinding.Member%2A> property equal to.
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: An array of <see cref="T:System.Linq.Expressions.MemberBinding"> objects to use to populate the <xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A> collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A <see cref="T:System.Linq.Expressions.MemberMemberBinding"> that has the <xref:System.Linq.Expressions.MemberBinding.BindingType%2A> property equal to <xref:System.Linq.Expressions.MemberBindingType> and the <xref:System.Linq.Expressions.MemberBinding.Member%2A> and <xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberBind*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberBind(MethodInfo,IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberBind(MethodInfo,IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberBind(MethodInfo,IEnumerable<MemberBinding>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding"> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: The <see cref="T:System.Reflection.MethodInfo"> that represents a property accessor method.
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.MemberBinding> objects to use to populate the <xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A> collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A <see cref="T:System.Linq.Expressions.MemberMemberBinding"> that has the <xref:System.Linq.Expressions.MemberBinding.BindingType%2A> property equal to <xref:System.Linq.Expressions.MemberBindingType>, the <xref:System.Linq.Expressions.MemberBinding.Member%2A> property set to the <xref:System.Reflection.PropertyInfo> that represents the property accessed in , and <xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberBind*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberBind(MethodInfo,MemberBinding[])
  nameWithType: Expression.MemberBind(MethodInfo,MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberBind(MethodInfo,MemberBinding[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding"> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.MemberBinding[] bindings);
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: The <see cref="T:System.Reflection.MethodInfo"> that represents a property accessor method.
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: An array of <see cref="T:System.Linq.Expressions.MemberBinding"> objects to use to populate the <xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A> collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A <see cref="T:System.Linq.Expressions.MemberMemberBinding"> that has the <xref:System.Linq.Expressions.MemberBinding.BindingType%2A> property equal to <xref:System.Linq.Expressions.MemberBindingType>, the <xref:System.Linq.Expressions.MemberBinding.Member%2A> property set to the <xref:System.Reflection.PropertyInfo> that represents the property accessed in , and <xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberBind*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberInit(NewExpression,IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberInit(NewExpression,IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberInit(NewExpression,IEnumerable<MemberBinding>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Represents an expression that creates a new object and initializes a property of the object.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of .
  example:
  - "The following example demonstrates an expression that creates a new object and initializes a property of the object.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#40](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#40)]"
  syntax:
    content: public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> to set the <xref:System.Linq.Expressions.MemberInitExpression.NewExpression%2A> property equal to.
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.MemberBinding> objects to use to populate the <xref:System.Linq.Expressions.MemberInitExpression.Bindings%2A> collection.
    return:
      type: System.Linq.Expressions.MemberInitExpression
      description: A <see cref="T:System.Linq.Expressions.MemberInitExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MemberInitExpression.NewExpression%2A> and <xref:System.Linq.Expressions.MemberInitExpression.Bindings%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MemberInit(NewExpression,MemberBinding[])
  nameWithType: Expression.MemberInit(NewExpression,MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberInit(NewExpression,MemberBinding[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression">.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of .
  example:
  - "The following example demonstrates how to use the MemberInit method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.  \n  \n [!CODE [System.Linq.Expressions.Expression#9](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#9)]"
  syntax:
    content: public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.MemberBinding[] bindings);
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> to set the <xref:System.Linq.Expressions.MemberInitExpression.NewExpression%2A> property equal to.
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: An array of <see cref="T:System.Linq.Expressions.MemberBinding"> objects to use to populate the <xref:System.Linq.Expressions.MemberInitExpression.Bindings%2A> collection.
    return:
      type: System.Linq.Expressions.MemberInitExpression
      description: A <see cref="T:System.Linq.Expressions.MemberInitExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MemberInitExpression.NewExpression%2A> and <xref:System.Linq.Expressions.MemberInitExpression.Bindings%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MemberInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Modulo(Expression,Expression)
  nameWithType: Expression.Modulo(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Modulo(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic remainder operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Modulo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Modulo(Expression,Expression,MethodInfo)
  nameWithType: Expression.Modulo(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Modulo(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic remainder operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The implementing method for the operation is chosen based on the following rules:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Modulo*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ModuloAssign(Expression,Expression)
  nameWithType: Expression.ModuloAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a remainder assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ModuloAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ModuloAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.ModuloAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a remainder assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ModuloAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a remainder assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.ModuloAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Multiply(Expression,Expression)
  nameWithType: Expression.Multiply(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Multiply(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic multiplication operation that does not have overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator."
  example:
  - "The following code example shows how to create an expression that multiplies two values.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#27](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#27)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Multiply*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Multiply(Expression,Expression,MethodInfo)
  nameWithType: Expression.Multiply(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Multiply(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic multiplication operation that does not have overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Multiply*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssign(Expression,Expression)
  nameWithType: Expression.MultiplyAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a multiplication assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.MultiplyAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a multiplication assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a multiplication assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssignChecked(Expression,Expression)
  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a multiplication assignment operation that has overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssignChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a multiplication assignment operation that has overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a multiplication assignment operation that has overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyAssignChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyChecked(Expression,Expression)
  nameWithType: Expression.MultiplyChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic multiplication operation that has overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: MultiplyChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.MultiplyChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic multiplication operation that has overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.MultiplyChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  id: Negate(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Negate(Expression)
  nameWithType: Expression.Negate(Expression)
  fullName: System.Linq.Expressions.Expression.Negate(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents an arithmetic negation operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If .Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  example:
  - "The following example demonstrates how to create an expression that represents an arithmetic negation operation.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#50](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#50)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.Negate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Negate(Expression,MethodInfo)
  nameWithType: Expression.Negate(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Negate(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents an arithmetic negation operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If .Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> and <xref:System.Linq.Expressions.UnaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Negate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  id: NegateChecked(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NegateChecked(Expression)
  nameWithType: Expression.NegateChecked(Expression)
  fullName: System.Linq.Expressions.Expression.NegateChecked(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents an arithmetic negation operation that has overflow checking.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If .Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.NegateChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NegateChecked(Expression,MethodInfo)
  nameWithType: Expression.NegateChecked(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.NegateChecked(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If .Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> and <xref:System.Linq.Expressions.UnaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.NegateChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  id: New(System.Reflection.ConstructorInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(ConstructorInfo)
  nameWithType: Expression.New(ConstructorInfo)
  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.NewExpression"> that represents calling the specified constructor that takes no arguments.
  remarks: The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by .
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The <see cref="T:System.Reflection.ConstructorInfo"> to set the <xref:System.Linq.Expressions.NewExpression.Constructor%2A> property equal to.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.NewExpression.Constructor%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.New*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.New(System.Type)
  id: New(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(Type)
  nameWithType: Expression.New(Type)
  fullName: System.Linq.Expressions.Expression.New(Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.NewExpression"> that represents calling the parameterless constructor of the specified type.
  remarks: "The  parameter must represent a type that has a constructor without parameters.  \n  \n The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to ."
  example:
  - "The following example demonstrates how to use the New method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.  \n  \n [!CODE [System.Linq.Expressions.Expression#10](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#10)]"
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (Type type);
    parameters:
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> that has a constructor that takes no arguments.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.NewExpression.Constructor%2A> property set to the <xref:System.Reflection.ConstructorInfo> that represents the constructor without parameters for the specified type.
  overload: System.Linq.Expressions.Expression.New*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(ConstructorInfo,IEnumerable<Expression>)
  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.NewExpression"> that represents calling the specified constructor with the specified arguments.
  remarks: "The  parameter must contain the same number of elements as the number of parameters for the constructor represented by . If  is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by . The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection."
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The <see cref="T:System.Reflection.ConstructorInfo"> to set the <xref:System.Linq.Expressions.NewExpression.Constructor%2A> property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects to use to populate the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.NewExpression.Constructor%2A> and <xref:System.Linq.Expressions.NewExpression.Arguments%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.New*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  id: New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(ConstructorInfo,Expression[])
  nameWithType: Expression.New(ConstructorInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.NewExpression"> that represents calling the specified constructor with the specified arguments.
  remarks: "The  parameter must contain the same number of elements as the number of parameters for the constructor represented by . If  is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by . The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection."
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The <see cref="T:System.Reflection.ConstructorInfo"> to set the <xref:System.Linq.Expressions.NewExpression.Constructor%2A> property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects to use to populate the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.NewExpression.Constructor%2A> and <xref:System.Linq.Expressions.NewExpression.Arguments%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.New*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)
  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)
  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.NewExpression"> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.
  remarks: "The  parameter must contain the same number of elements as the number of parameters for the constructor represented by . If  is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n If  is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If  is not `null`, it must have the same number of elements as  and each element must not be `null`. Each element of  must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by . If it represents a property, the property must have a `get` accessor. The corresponding element of  for each element of  must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the  element represents.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that  represents."
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> members);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The <see cref="T:System.Reflection.ConstructorInfo"> to set the <xref:System.Linq.Expressions.NewExpression.Constructor%2A> property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects to use to populate the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> collection.
    - id: members
      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Reflection.MemberInfo> objects to use to populate the <xref:System.Linq.Expressions.NewExpression.Members%2A> collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.NewExpression.Constructor%2A>, <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.New*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])
  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])
  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.NewExpression"> that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.
  remarks: "The  parameter must contain the same number of elements as the number of parameters for the constructor represented by . If  is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  \n  \n If  is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If  is not `null`, it must have the same number of elements as  and each element must not be `null`. Each element of  must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by . If it represents a property, the property must be able to retrieve the value of the associated field. The corresponding element of  for each element of  must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the  element represents.  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that  represents."
  syntax:
    content: public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, System.Reflection.MemberInfo[] members);
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The <see cref="T:System.Reflection.ConstructorInfo"> to set the <xref:System.Linq.Expressions.NewExpression.Constructor%2A> property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects to use to populate the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> collection.
    - id: members
      type: System.Reflection.MemberInfo[]
      description: An array of <see cref="T:System.Reflection.MemberInfo"> objects to use to populate the <xref:System.Linq.Expressions.NewExpression.Members%2A> collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A <see cref="T:System.Linq.Expressions.NewExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.NewExpression.Constructor%2A>, <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.New*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NewArrayBounds(Type,IEnumerable<Expression>)
  nameWithType: Expression.NewArrayBounds(Type,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(Type,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression"> that represents creating an array that has a specified rank.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of  and whose element type is .  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must represent an integral type."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.  \n  \n [!CODE [System.Linq.Expressions.Expression#2](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#2)]"
  syntax:
    content: public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> bounds);
    parameters:
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> that represents the element type of the array.
    - id: bounds
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects to use to populate the <xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A> collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A <see cref="T:System.Linq.Expressions.NewArrayExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.NewArrayBounds*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NewArrayBounds(Type,Expression[])
  nameWithType: Expression.NewArrayBounds(Type,Expression[])
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(Type,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression"> that represents creating an array that has a specified rank.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of  and whose element type is .  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must represent an integral type."
  example:
  - "The following example demonstrates how to use the NewArrayBounds method to create an expression tree that represents creating a string array that has a rank of 2.  \n  \n [!CODE [System.Linq.Expressions.Expression#2](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#2)]"
  syntax:
    content: public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Linq.Expressions.Expression[] bounds);
    parameters:
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> that represents the element type of the array.
    - id: bounds
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects to use to populate the <xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A> collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A <see cref="T:System.Linq.Expressions.NewArrayExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.NewArrayBounds*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NewArrayInit(Type,IEnumerable<Expression>)
  nameWithType: Expression.NewArrayInit(Type,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.NewArrayInit(Type,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression"> that represents creating a one-dimensional array and initializing it from a list of elements.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must represent a type that is assignable to the type represented by , possibly after it is *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if  is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is ."
  example:
  - "The following example demonstrates how to use the NewArrayInit method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.  \n  \n [!CODE [System.Linq.Expressions.Expression#1](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#1)]"
  syntax:
    content: public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers);
    parameters:
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> that represents the element type of the array.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> that contains <xref:System.Linq.Expressions.Expression> objects to use to populate the <xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A> collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A <see cref="T:System.Linq.Expressions.NewArrayExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.NewArrayInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NewArrayInit(Type,Expression[])
  nameWithType: Expression.NewArrayInit(Type,Expression[])
  fullName: System.Linq.Expressions.Expression.NewArrayInit(Type,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression"> that represents creating a one-dimensional array and initializing it from a list of elements.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must represent a type that is assignable to the type represented by , possibly after it is *quoted*.  \n  \n> [!NOTE]\n>  An element will be quoted only if  is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  \n  \n The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is ."
  example:
  - "The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.  \n  \n [!CODE [System.Linq.Expressions.Expression#1](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#1)]"
  syntax:
    content: public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Linq.Expressions.Expression[] initializers);
    parameters:
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> that represents the element type of the array.
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects to use to populate the <xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A> collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A <see cref="T:System.Linq.Expressions.NewArrayExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.NewArrayInit*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.NodeType
  id: NodeType
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NodeType
  nameWithType: Expression.NodeType
  fullName: System.Linq.Expressions.Expression.NodeType
  type: Property
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Gets the node type of this <see cref="T:System.Linq.Expressions.Expression">.
  remarks: "The NodeType property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type. For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a \"greater than\" operation. The NodeType property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType> and <xref:System.Linq.Expressions.ExpressionType>, respectively.  \n  \n The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property."
  syntax:
    content: public virtual System.Linq.Expressions.ExpressionType NodeType { get; }
    return:
      type: System.Linq.Expressions.ExpressionType
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  id: Not(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Not(Expression)
  nameWithType: Expression.Not(Expression)
  fullName: System.Linq.Expressions.Expression.Not(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a bitwise complement operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If .Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if .Type is a numeric or Boolean type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  example:
  - "The following example demonstrates how to create an expression that represents a logical NOT operation.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#51](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#51)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.Not*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Not(Expression,MethodInfo)
  nameWithType: Expression.Not(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Not(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a bitwise complement operation. The implementing method can be specified.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If .Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> and <xref:System.Linq.Expressions.UnaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Not*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NotEqual(Expression,Expression)
  nameWithType: Expression.NotEqual(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.NotEqual(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an inequality comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.NotEqual*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: NotEqual(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.NotEqual(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.NotEqual(Expression,Expression,Boolean,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an inequality comparison.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is <xref:System.Boolean>.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: liftToNull
      type: System.Boolean
      description: '`true` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `true`; `false` to set <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> to `false`.'
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.NotEqual*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  id: OnesComplement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OnesComplement(Expression)
  nameWithType: Expression.OnesComplement(Expression)
  fullName: System.Linq.Expressions.Expression.OnesComplement(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Returns the expression representing the ones complement.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression">.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <see cref="T:System.Linq.Expressions.UnaryExpression">.
  overload: System.Linq.Expressions.Expression.OnesComplement*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OnesComplement(Expression,MethodInfo)
  nameWithType: Expression.OnesComplement(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.OnesComplement(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Returns the expression representing the ones complement.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression">.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <see cref="T:System.Linq.Expressions.UnaryExpression">.
  overload: System.Linq.Expressions.Expression.OnesComplement*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Or(Expression,Expression)
  nameWithType: Expression.Or(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Or(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise `OR` operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator."
  example:
  - "The following code example shows how to create an expression that represents a logical OR operation.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#28](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#28)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Or*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Or(Expression,Expression,MethodInfo)
  nameWithType: Expression.Or(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Or(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise `OR` operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Or*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OrAssign(Expression,Expression)
  nameWithType: Expression.OrAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise OR assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.OrAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OrAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.OrAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise OR assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.OrAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OrAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.OrAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise OR assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.OrAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OrElse(Expression,Expression)
  nameWithType: Expression.OrElse(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.OrElse(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](../../add/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if .Type and .Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   .Type and .Type are the same Boolean type.  \n  \n-   If .Type and .Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.  \n  \n-   If .Type and .Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator."
  example:
  - "The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#29](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#29)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.OrElse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: OrElse(Expression,Expression,MethodInfo)
  nameWithType: Expression.OrElse(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrElse(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A>property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n    > [!NOTE]\n    >  The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](../../add/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.  \n  \n-   Otherwise, if .Type and .Type are Boolean types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   .Type and .Type are the same Boolean type.  \n  \n-   If .Type and .Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.  \n  \n-   If .Type and .Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.OrElse*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Parameter(System.Type)
  id: Parameter(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Parameter(Type)
  nameWithType: Expression.Parameter(Type)
  fullName: System.Linq.Expressions.Expression.Parameter(Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ParameterExpression"> node that can be used to identify a parameter or a variable in an expression tree.
  remarks: ''
  example:
  - "The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#49](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#49)]"
  syntax:
    content: public static System.Linq.Expressions.ParameterExpression Parameter (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A <see cref="T:System.Linq.Expressions.ParameterExpression"> node with the specified name and type.
  overload: System.Linq.Expressions.Expression.Parameter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  id: Parameter(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Parameter(Type,String)
  nameWithType: Expression.Parameter(Type,String)
  fullName: System.Linq.Expressions.Expression.Parameter(Type,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ParameterExpression"> node that can be used to identify a parameter or a variable in an expression tree.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    - id: name
      type: System.String
      description: The name of the parameter or variable, used for debugging or printing purpose only.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A <see cref="T:System.Linq.Expressions.ParameterExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.Expression.Type%2A> and <xref:System.Linq.Expressions.ParameterExpression.Name%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Parameter*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  id: PostDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PostDecrementAssign(Expression)
  nameWithType: Expression.PostDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PostDecrementAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PostDecrementAssign(Expression,MethodInfo)
  nameWithType: Expression.PostDecrementAssign(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PostDecrementAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  id: PostIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PostIncrementAssign(Expression)
  nameWithType: Expression.PostIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PostIncrementAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PostIncrementAssign(Expression,MethodInfo)
  nameWithType: Expression.PostIncrementAssign(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PostIncrementAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Power(Expression,Expression)
  nameWithType: Expression.Power(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Power(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents raising a number to a power.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Power*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Power(Expression,Expression,MethodInfo)
  nameWithType: Expression.Power(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Power(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents raising a number to a power.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Power*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PowerAssign(Expression,Expression)
  nameWithType: Expression.PowerAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents raising an expression to a power and assigning the result back to the expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.PowerAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PowerAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.PowerAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents raising an expression to a power and assigning the result back to the expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.PowerAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents raising an expression to a power and assigning the result back to the expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.PowerAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  id: PreDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PreDecrementAssign(Expression)
  nameWithType: Expression.PreDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that decrements the expression by 1 and assigns the result back to the expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PreDecrementAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PreDecrementAssign(Expression,MethodInfo)
  nameWithType: Expression.PreDecrementAssign(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that decrements the expression by 1 and assigns the result back to the expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PreDecrementAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  id: PreIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PreIncrementAssign(Expression)
  nameWithType: Expression.PreIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that increments the expression by 1 and assigns the result back to the expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PreIncrementAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PreIncrementAssign(Expression,MethodInfo)
  nameWithType: Expression.PreIncrementAssign(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that increments the expression by 1 and assigns the result back to the expression.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the resultant expression.
  overload: System.Linq.Expressions.Expression.PreIncrementAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression,MethodInfo)
  nameWithType: Expression.Property(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Property(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberExpression"> that represents accessing a property by using a property accessor method.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.  \n  \n If the method represented by  is `static` (`Shared` in Visual Basic),  can be `null`."
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.MemberExpression.Expression%2A> property equal to. This can be null for static properties.
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: The <see cref="T:System.Reflection.MethodInfo"> that represents a property accessor method.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <see cref="T:System.Linq.Expressions.MemberExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType>, the <xref:System.Linq.Expressions.MemberExpression.Expression%2A> property set to  and the <xref:System.Linq.Expressions.MemberExpression.Member%2A> property set to the <xref:System.Reflection.PropertyInfo> that represents the property accessed in .
  overload: System.Linq.Expressions.Expression.Property*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression,PropertyInfo)
  nameWithType: Expression.Property(Expression,PropertyInfo)
  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberExpression"> that represents accessing a property.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.  \n  \n If the property represented by  is `static` (`Shared` in Visual Basic),  can be `null`."
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.MemberExpression.Expression%2A> property equal to. This can be null for static properties.
    - id: property
      type: System.Reflection.PropertyInfo
      description: The <see cref="T:System.Reflection.PropertyInfo"> to set the <xref:System.Linq.Expressions.MemberExpression.Member%2A> property equal to.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <see cref="T:System.Linq.Expressions.MemberExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.MemberExpression.Expression%2A> and <xref:System.Linq.Expressions.MemberExpression.Member%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Property*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  id: Property(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression,String)
  nameWithType: Expression.Property(Expression,String)
  fullName: System.Linq.Expressions.Expression.Property(Expression,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberExpression"> that represents accessing a property.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression>is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by .  \n  \n This method searches .Type and its base types for a property that has the name . Public properties are given preference over non-public properties. If a matching property is found, this method passes  and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>."
  example:
  - "The following example shows how to create an expression that represents accessing a property.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#38](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#38)]"
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> whose <xref:System.Linq.Expressions.Expression.Type%2A> contains a property named . This can be `null` for static properties.
    - id: propertyName
      type: System.String
      description: The name of a property to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <see cref="T:System.Linq.Expressions.MemberExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType>, the <xref:System.Linq.Expressions.MemberExpression.Expression%2A> property set to , and the <xref:System.Linq.Expressions.MemberExpression.Member%2A> property set to the <xref:System.Reflection.PropertyInfo> that represents the property denoted by .
  overload: System.Linq.Expressions.Expression.Property*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression,PropertyInfo,IEnumerable<Expression>)
  nameWithType: Expression.Property(Expression,PropertyInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an <see cref="T:System.Linq.Expressions.IndexExpression"> representing the access to an indexed property.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. If the property is static/shared, it must be null.
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: The <see cref="T:System.Reflection.PropertyInfo"> that represents the property to index.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Linq.Expressions.Expression> objects that are used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <see cref="T:System.Linq.Expressions.IndexExpression">.
  overload: System.Linq.Expressions.Expression.Property*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression,PropertyInfo,Expression[])
  nameWithType: Expression.Property(Expression,PropertyInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an <see cref="T:System.Linq.Expressions.IndexExpression"> representing the access to an indexed property.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. If the property is static/shared, it must be null.
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: The <see cref="T:System.Reflection.PropertyInfo"> that represents the property to index.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects that are used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <see cref="T:System.Linq.Expressions.IndexExpression">.
  overload: System.Linq.Expressions.Expression.Property*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression,String,Expression[])
  nameWithType: Expression.Property(Expression,String,Expression[])
  fullName: System.Linq.Expressions.Expression.Property(Expression,String,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an <see cref="T:System.Linq.Expressions.IndexExpression"> representing the access to an indexed property.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, System.Linq.Expressions.Expression[] arguments);
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. If the property is static/shared, it must be null.
    - id: propertyName
      type: System.String
      description: The name of the indexer.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of <see cref="T:System.Linq.Expressions.Expression"> objects that are used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created <see cref="T:System.Linq.Expressions.IndexExpression">.
  overload: System.Linq.Expressions.Expression.Property*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Property(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Property(Expression,Type,String)
  nameWithType: Expression.Property(Expression,Type,String)
  fullName: System.Linq.Expressions.Expression.Property(Expression,Type,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberExpression"> accessing a property.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The containing object of the property. This can be null for static properties.
    - id: type
      type: System.Type
      description: The <xref:System.Linq.Expressions.Expression.Type%2A> that contains the property.
    - id: propertyName
      type: System.String
      description: The property to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The created <see cref="T:System.Linq.Expressions.MemberExpression">.
  overload: System.Linq.Expressions.Expression.Property*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  id: PropertyOrField(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: PropertyOrField(Expression,String)
  nameWithType: Expression.PropertyOrField(Expression,String)
  fullName: System.Linq.Expressions.Expression.PropertyOrField(Expression,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.MemberExpression"> that represents accessing a property or field.
  remarks: "The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by .  \n  \n This method searches .Type and its base types for a property or field that has the name . Public properties and fields are given preference over non-public properties and fields. Also, properties are given preference over fields. If a matching property or field is found, this method passes  and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively."
  example:
  - "The following example shows how to create an expression that represents accessing a property or field.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#39](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#39)]"
  syntax:
    content: public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> whose <xref:System.Linq.Expressions.Expression.Type%2A> contains a property or field named . This can be null for static members.
    - id: propertyOrFieldName
      type: System.String
      description: The name of a property or field to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A <see cref="T:System.Linq.Expressions.MemberExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType>, the <xref:System.Linq.Expressions.MemberExpression.Expression%2A> property set to , and the <xref:System.Linq.Expressions.MemberExpression.Member%2A> property set to the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents the property or field denoted by .
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  id: Quote(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Quote(Expression)
  nameWithType: Expression.Quote(Expression)
  fullName: System.Linq.Expressions.Expression.Quote(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents an expression that has a constant value of type <xref:System.Linq.Expressions.Expression>.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by .Type. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`. Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property set to the specified value.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Reduce
  id: Reduce
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Reduce()
  nameWithType: Expression.Reduce()
  fullName: System.Linq.Expressions.Expression.Reduce()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.
  remarks: To be added.
  syntax:
    content: public virtual System.Linq.Expressions.Expression Reduce ();
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ReduceAndCheck
  id: ReduceAndCheck
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ReduceAndCheck()
  nameWithType: Expression.ReduceAndCheck()
  fullName: System.Linq.Expressions.Expression.ReduceAndCheck()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.
  remarks: Unlike Reduce, this method checks that the reduced node satisfies certain invariants.
  syntax:
    content: public System.Linq.Expressions.Expression ReduceAndCheck ();
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ReduceExtensions
  id: ReduceExtensions
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ReduceExtensions()
  nameWithType: Expression.ReduceExtensions()
  fullName: System.Linq.Expressions.Expression.ReduceExtensions()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.
  remarks: To be added.
  syntax:
    content: public System.Linq.Expressions.Expression ReduceExtensions ();
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ReferenceEqual(Expression,Expression)
  nameWithType: Expression.ReferenceEqual(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceEqual(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a reference equality comparison.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ReferenceNotEqual(Expression,Expression)
  nameWithType: Expression.ReferenceNotEqual(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceNotEqual(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a reference inequality comparison.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Rethrow
  id: Rethrow
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Rethrow()
  nameWithType: Expression.Rethrow()
  fullName: System.Linq.Expressions.Expression.Rethrow()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a rethrowing of an exception.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Rethrow ();
    parameters: []
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a rethrowing of an exception.
  overload: System.Linq.Expressions.Expression.Rethrow*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)
  id: Rethrow(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Rethrow(Type)
  nameWithType: Expression.Rethrow(Type)
  fullName: System.Linq.Expressions.Expression.Rethrow(Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a rethrowing of an exception with a given type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The new <see cref="T:System.Type"> of the expression.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a rethrowing of an exception.
  overload: System.Linq.Expressions.Expression.Rethrow*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  id: Return(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Return(LabelTarget)
  nameWithType: Expression.Return(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Return(LabelTarget)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a return statement.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Return, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Return*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Return(LabelTarget,Expression)
  nameWithType: Expression.Return(LabelTarget,Expression)
  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a return statement. The value passed to the label upon jumping can be specified.
  remarks: ''
  example:
  - "The following example demonstrates how to create an expression that contains the Return method.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#43](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#43)]"
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Continue, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , and  to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Return*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Return(LabelTarget,Type)
  nameWithType: Expression.Return(LabelTarget,Type)
  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a return statement with the specified type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: type
      type: System.Type
      description: An <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Return, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , the <xref:System.Linq.Expressions.Expression.Type%2A> property set to , and a null value to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Return*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Return(LabelTarget,Expression,Type)
  nameWithType: Expression.Return(LabelTarget,Expression,Type)
  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.GotoExpression"> representing a return statement with the specified type. The value passed to the label upon jumping can be specified.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The <see cref="T:System.Linq.Expressions.LabelTarget"> that the <xref:System.Linq.Expressions.GotoExpression> will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A <see cref="T:System.Linq.Expressions.GotoExpression"> with <xref:System.Linq.Expressions.GotoExpression.Kind%2A> equal to Continue, the <xref:System.Linq.Expressions.GotoExpression.Target%2A> property set to , the <xref:System.Linq.Expressions.Expression.Type%2A> property set to , and  to be passed to the target label upon jumping.
  overload: System.Linq.Expressions.Expression.Return*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RightShift(Expression,Expression)
  nameWithType: Expression.RightShift(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.RightShift(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise right-shift operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and .Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.RightShift*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RightShift(Expression,Expression,MethodInfo)
  nameWithType: Expression.RightShift(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShift(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise right-shift operation.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and .Type is <xref:System.Int32>, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.RightShift*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RightShiftAssign(Expression,Expression)
  nameWithType: Expression.RightShiftAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise right-shift assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.RightShiftAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RightShiftAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.RightShiftAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise right-shift assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.RightShiftAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a bitwise right-shift assignment operation.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.RightShiftAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RuntimeVariables(IEnumerable<ParameterExpression>)
  nameWithType: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(IEnumerable<ParameterExpression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression">.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables);
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: A collection of <see cref="T:System.Linq.Expressions.ParameterExpression"> objects to use to populate the <xref:System.Linq.Expressions.RuntimeVariablesExpression.Variables%2A> collection.
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
      description: An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.RuntimeVariablesExpression.Variables%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.RuntimeVariables*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  id: RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: RuntimeVariables(ParameterExpression[])
  nameWithType: Expression.RuntimeVariables(ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(ParameterExpression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression">.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Linq.Expressions.ParameterExpression[] variables);
    parameters:
    - id: variables
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of <see cref="T:System.Linq.Expressions.ParameterExpression"> objects to use to populate the <xref:System.Linq.Expressions.RuntimeVariablesExpression.Variables%2A> collection.
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
      description: An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.RuntimeVariablesExpression.Variables%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.RuntimeVariables*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Subtract(Expression,Expression)
  nameWithType: Expression.Subtract(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Subtract(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic subtraction operation that does not have overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator."
  example:
  - "The following code example shows how to create an expression that subtracts the argument from the first argument.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#30](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#30)]"
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Subtract*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Subtract(Expression,Expression,MethodInfo)
  nameWithType: Expression.Subtract(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Subtract(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic subtraction operation that does not have overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.Subtract*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssign(Expression,Expression)
  nameWithType: Expression.SubtractAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a subtraction assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.SubtractAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a subtraction assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a subtraction assignment operation that does not have overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssign*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssignChecked(Expression,Expression)
  nameWithType: Expression.SubtractAssignChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a subtraction assignment operation that has overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssignChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.SubtractAssignChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a subtraction assignment operation that has overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents a subtraction assignment operation that has overflow checking.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A <see cref="T:System.Linq.Expressions.LambdaExpression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, <xref:System.Linq.Expressions.BinaryExpression.Method%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractAssignChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractChecked(Expression,Expression)
  nameWithType: Expression.SubtractChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic subtraction operation that has overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the selected implementing method for the operation:  \n  \n-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> and <xref:System.Linq.Expressions.BinaryExpression.Right%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SubtractChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.SubtractChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(Expression,Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.BinaryExpression"> that represents an arithmetic subtraction operation that has overflow checking.
  remarks: "The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  \n  \n The following information describes the implementing method, the node type, and whether a node is lifted.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation :  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  \n  \n-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  \n  \n-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`:  \n  \n-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  \n  \n-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator."
  syntax:
    content: public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A <see cref="T:System.Linq.Expressions.BinaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.BinaryExpression.Left%2A>, <xref:System.Linq.Expressions.BinaryExpression.Right%2A>, and <xref:System.Linq.Expressions.BinaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.SubtractChecked*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Expression,SwitchCase[])
  nameWithType: Expression.Switch(Expression,SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(Expression,SwitchCase[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"> that represents a `switch` statement without a default case.
  remarks: "All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \n  \n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  \n  \n If  does not match any of the cases, no exception is thrown."
  example:
  - "The following example demonstrates how to create an expression that represents a swtich statement without a default case.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#34](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#34)]"
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.SwitchCase[] cases);
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <see cref="T:System.Linq.Expressions.SwitchExpression">.
  overload: System.Linq.Expressions.Expression.Switch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Expression,Expression,SwitchCase[])
  nameWithType: Expression.Switch(Expression,Expression,SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,SwitchCase[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"> that represents a `switch` statement that has a default case.
  remarks: "All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \n  \n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  \n  \n If  does not match any of the cases, the default case represented by  is run."
  example:
  - "The following example demonstrates how to create an expression that represents a swtich statement that has a default case.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#35](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#35)]"
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Linq.Expressions.SwitchCase[] cases);
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if  does not match any of the cases.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <see cref="T:System.Linq.Expressions.SwitchExpression">.
  overload: System.Linq.Expressions.Expression.Switch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
  nameWithType: Expression.Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"> that represents a `switch` statement that has a default case.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases);
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if  does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <see cref="T:System.Linq.Expressions.SwitchExpression">.
  overload: System.Linq.Expressions.Expression.Switch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Expression,Expression,MethodInfo,SwitchCase[])
  nameWithType: Expression.Switch(Expression,Expression,MethodInfo,SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,MethodInfo,SwitchCase[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"> that represents a `switch` statement that has a default case.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if  does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <see cref="T:System.Linq.Expressions.SwitchExpression">.
  overload: System.Linq.Expressions.Expression.Switch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
  nameWithType: Expression.Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
  fullName: System.Linq.Expressions.Expression.Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"> that represents a `switch` statement that has a default case.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the switch.
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if  does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <see cref="T:System.Linq.Expressions.SwitchExpression">.
  overload: System.Linq.Expressions.Expression.Switch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])
  nameWithType: Expression.Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.SwitchExpression"> that represents a `switch` statement that has a default case..
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);
    parameters:
    - id: type
      type: System.Type
      description: The result type of the switch.
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if  does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created <see cref="T:System.Linq.Expressions.SwitchExpression">.
  overload: System.Linq.Expressions.Expression.Switch*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SwitchCase(Expression,IEnumerable<Expression>)
  nameWithType: Expression.SwitchCase(Expression,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.SwitchCase(Expression,IEnumerable<Expression>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.SwitchCase"> object to be used in a <xref:System.Linq.Expressions.SwitchExpression> object.
  remarks: "All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  \n  \n Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another."
  example:
  - "The following example demonstrates how to create an expression that represents a swtich statement that has a default case.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#35](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#35)]"
  syntax:
    content: public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> testValues);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the case.
    - id: testValues
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The test values of the case.
    return:
      type: System.Linq.Expressions.SwitchCase
      description: The created <see cref="T:System.Linq.Expressions.SwitchCase">.
  overload: System.Linq.Expressions.Expression.SwitchCase*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SwitchCase(Expression,Expression[])
  nameWithType: Expression.SwitchCase(Expression,Expression[])
  fullName: System.Linq.Expressions.Expression.SwitchCase(Expression,Expression[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.SwitchCase"> for use in a <xref:System.Linq.Expressions.SwitchExpression>.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression[] testValues);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the case.
    - id: testValues
      type: System.Linq.Expressions.Expression[]
      description: The test values of the case.
    return:
      type: System.Linq.Expressions.SwitchCase
      description: The created <see cref="T:System.Linq.Expressions.SwitchCase">.
  overload: System.Linq.Expressions.Expression.SwitchCase*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  id: SymbolDocument(System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SymbolDocument(String)
  nameWithType: Expression.SymbolDocument(String)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo">.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: A <see cref="T:System.String"> to set the <xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A> equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"> that has the <xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.SymbolDocument*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  id: SymbolDocument(System.String,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SymbolDocument(String,Guid)
  nameWithType: Expression.SymbolDocument(String,Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo">.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);
    parameters:
    - id: fileName
      type: System.String
      description: A <see cref="T:System.String"> to set the <xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A> equal to.
    - id: language
      type: System.Guid
      description: A <see cref="T:System.Guid"> to set the <xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A> equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"> that has the <xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A> and <xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A> properties set to the specified value.
  overload: System.Linq.Expressions.Expression.SymbolDocument*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SymbolDocument(String,Guid,Guid)
  nameWithType: Expression.SymbolDocument(String,Guid,Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid,Guid)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo">.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);
    parameters:
    - id: fileName
      type: System.String
      description: A <see cref="T:System.String"> to set the <xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A> equal to.
    - id: language
      type: System.Guid
      description: A <see cref="T:System.Guid"> to set the <xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A> equal to.
    - id: languageVendor
      type: System.Guid
      description: A <see cref="T:System.Guid"> to set the <xref:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor%2A> equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"> that has the <xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A> and <xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A> and <xref:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor%2A> properties set to the specified value.
  overload: System.Linq.Expressions.Expression.SymbolDocument*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: SymbolDocument(String,Guid,Guid,Guid)
  nameWithType: Expression.SymbolDocument(String,Guid,Guid,Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid,Guid,Guid)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo">.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);
    parameters:
    - id: fileName
      type: System.String
      description: A <see cref="T:System.String"> to set the <xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A> equal to.
    - id: language
      type: System.Guid
      description: A <see cref="T:System.Guid"> to set the <xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A> equal to.
    - id: languageVendor
      type: System.Guid
      description: A <see cref="T:System.Guid"> to set the <xref:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor%2A> equal to.
    - id: documentType
      type: System.Guid
      description: A <see cref="T:System.Guid"> to set the <xref:System.Linq.Expressions.SymbolDocumentInfo.DocumentType%2A> equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"> that has the <xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A> and <xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A> and <xref:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor%2A> and <xref:System.Linq.Expressions.SymbolDocumentInfo.DocumentType%2A> properties set to the specified value.
  overload: System.Linq.Expressions.Expression.SymbolDocument*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  id: Throw(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Throw(Expression)
  nameWithType: Expression.Throw(Expression)
  fullName: System.Linq.Expressions.Expression.Throw(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a throwing of an exception.
  remarks: ''
  example:
  - "The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the Throw method.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#47](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#47)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression">.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the exception.
  overload: System.Linq.Expressions.Expression.Throw*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  id: Throw(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Throw(Expression,Type)
  nameWithType: Expression.Throw(Expression,Type)
  fullName: System.Linq.Expressions.Expression.Throw(Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a throwing of an exception with a given type.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression">.
    - id: type
      type: System.Type
      description: The new <see cref="T:System.Type"> of the expression.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents the exception.
  overload: System.Linq.Expressions.Expression.Throw*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.ToString
  id: ToString
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: ToString()
  nameWithType: Expression.ToString()
  fullName: System.Linq.Expressions.Expression.ToString()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression">.
  remarks: To be added.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A textual representation of the <see cref="T:System.Linq.Expressions.Expression">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryCatch(Expression,CatchBlock[])
  nameWithType: Expression.TryCatch(Expression,CatchBlock[])
  fullName: System.Linq.Expressions.Expression.TryCatch(Expression,CatchBlock[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.TryExpression"> representing a try block with any number of catch statements and neither a fault nor finally block.
  remarks: ''
  example:
  - "The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#47](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#47)]"
  syntax:
    content: public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, System.Linq.Expressions.CatchBlock[] handlers);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
      description: The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock"> expressions representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <see cref="T:System.Linq.Expressions.TryExpression">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryCatchFinally(Expression,Expression,CatchBlock[])
  nameWithType: Expression.TryCatchFinally(Expression,Expression,CatchBlock[])
  fullName: System.Linq.Expressions.Expression.TryCatchFinally(Expression,Expression,CatchBlock[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.TryExpression"> representing a try block with any number of catch statements and a finally block.
  remarks: ''
  example:
  - "The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#48](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#48)]"
  syntax:
    content: public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.CatchBlock[] handlers);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block.
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
      description: The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock"> expressions representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <see cref="T:System.Linq.Expressions.TryExpression">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryFault(Expression,Expression)
  nameWithType: Expression.TryFault(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.TryFault(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.TryExpression"> representing a try block with a fault block and no catch statements.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: fault
      type: System.Linq.Expressions.Expression
      description: The body of the fault block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <see cref="T:System.Linq.Expressions.TryExpression">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryFinally(Expression,Expression)
  nameWithType: Expression.TryFinally(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.TryFinally(Expression,Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.TryExpression"> representing a try block with a finally block and no catch statements.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created <see cref="T:System.Linq.Expressions.TryExpression">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  id: TryGetActionType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryGetActionType(Type[],Type)
  nameWithType: Expression.TryGetActionType(Type[],Type)
  fullName: System.Linq.Expressions.Expression.TryGetActionType(Type[],Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <xref:System.Linq.Expressions.Expression.Type%2A> object that represents a generic System.Action delegate type that has specific type arguments.
  remarks: To be added.
  syntax:
    content: public static bool TryGetActionType (Type[] typeArgs, out Type actionType);
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of Type objects that specify the type arguments for the System.Action delegate type.
    - id: actionType
      type: System.Type
      description: When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the .This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: true if generic System.Action delegate type was created for specific ; false otherwise.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  id: TryGetFuncType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TryGetFuncType(Type[],Type)
  nameWithType: Expression.TryGetFuncType(Type[],Type)
  fullName: System.Linq.Expressions.Expression.TryGetFuncType(Type[],Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <xref:System.Linq.Expressions.Expression.Type%2A> object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.
  remarks: To be added.
  syntax:
    content: public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of Type objects that specify the type arguments for the System.Func delegate type.
    - id: funcType
      type: System.Type
      description: When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the .This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: true if generic System.Func delegate type was created for specific ; false otherwise.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Type
  id: Type
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Type
  nameWithType: Expression.Type
  fullName: System.Linq.Expressions.Expression.Type
  type: Property
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression"> represents.
  remarks: "The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the Type represents the static common language runtime (CLR) type of the expression that the node represents. For example, two nodes with different node types can have the same Type, as shown in the following code example.  \n  \n [!CODE [System.Linq.Expressions.ExpressionDev10#36](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#36)]"
  syntax:
    content: public virtual Type Type { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  id: TypeAs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TypeAs(Expression,Type)
  nameWithType: Expression.TypeAs(Expression,Type)
  fullName: System.Linq.Expressions.Expression.TypeAs(Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents an explicit reference or boxing conversion where `null` is supplied if the conversion fails.
  remarks: The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`. The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.
  example:
  - "The following example demonstrates how to use the TypeAs method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.  \n  \n [!CODE [System.Linq.Expressions.Expression#11](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#11)]"
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    - id: type
      type: System.Type
      description: A <see cref="T:System.Type"> to set the <xref:System.Linq.Expressions.Expression.Type%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> and <xref:System.Linq.Expressions.Expression.Type%2A> properties set to the specified values.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  id: TypeEqual(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TypeEqual(Expression,Type)
  nameWithType: Expression.TypeEqual(Expression,Type)
  fullName: System.Linq.Expressions.Expression.TypeEqual(Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression"> that compares run-time type identity.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <see cref="T:System.Linq.Expressions.Expression"> property equal to.
    - id: type
      type: System.Type
      description: A <xref:System.Linq.Expressions.Expression.Type%2A> to set the <xref:System.Linq.Expressions.TypeBinaryExpression.TypeOperand%2A> property equal to.
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
      description: A <see cref="T:System.Linq.Expressions.TypeBinaryExpression"> for which the <xref:System.Linq.Expressions.Expression.NodeType%2A> property is equal to TypeEqual and for which the <xref:System.Linq.Expressions.Expression> and <xref:System.Linq.Expressions.TypeBinaryExpression.TypeOperand%2A> properties are set to the specified values.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  id: TypeIs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: TypeIs(Expression,Type)
  nameWithType: Expression.TypeIs(Expression,Type)
  fullName: System.Linq.Expressions.Expression.TypeIs(Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression">.
  remarks: The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.
  example:
  - "The following example demonstrates how to use the TypeIs method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.  \n  \n [!CODE [System.Linq.Expressions.Expression#12](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#12)]"
  syntax:
    content: public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.TypeBinaryExpression.Expression%2A> property equal to.
    - id: type
      type: System.Type
      description: A <xref:System.Linq.Expressions.Expression.Type%2A> to set the <xref:System.Linq.Expressions.TypeBinaryExpression.TypeOperand%2A> property equal to.
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
      description: A <see cref="T:System.Linq.Expressions.TypeBinaryExpression"> for which the <xref:System.Linq.Expressions.Expression.NodeType%2A> property is equal to <xref:System.Linq.Expressions.ExpressionType> and for which the <xref:System.Linq.Expressions.TypeBinaryExpression.Expression%2A> and <xref:System.Linq.Expressions.TypeBinaryExpression.TypeOperand%2A> properties are set to the specified values.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  id: UnaryPlus(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: UnaryPlus(Expression)
  nameWithType: Expression.UnaryPlus(Expression)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(Expression)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a unary plus operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If .Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property set to the specified value.
  overload: System.Linq.Expressions.Expression.UnaryPlus*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: UnaryPlus(Expression,MethodInfo)
  nameWithType: Expression.UnaryPlus(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(Expression,MethodInfo)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents a unary plus operation.
  remarks: "The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  \n  \n#### Implementing Method  \n The following rules determine the implementing method for the operation:  \n  \n-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  \n  \n-   If .Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  \n  \n-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  \n  \n#### Node Type and Lifted versus Non-Lifted  \n If the implementing method is not `null`:  \n  \n-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  \n  \n-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  \n  \n    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  \n  \n    -   The return type of the implementing method is a non-nullable value type.  \n  \n If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted."
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to set the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> to set the <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A <see cref="T:System.Linq.Expressions.UnaryExpression"> that has the <xref:System.Linq.Expressions.Expression.NodeType%2A> property equal to <xref:System.Linq.Expressions.ExpressionType> and the <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> and <xref:System.Linq.Expressions.UnaryExpression.Method%2A> properties set to the specified values.
  overload: System.Linq.Expressions.Expression.UnaryPlus*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  id: Unbox(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Unbox(Expression,Type)
  nameWithType: Expression.Unbox(Expression,Type)
  fullName: System.Linq.Expressions.Expression.Unbox(Expression,Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.UnaryExpression"> that represents an explicit unboxing.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An <see cref="T:System.Linq.Expressions.Expression"> to unbox.
    - id: type
      type: System.Type
      description: The new <see cref="T:System.Type"> of the expression.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of <see cref="T:System.Linq.Expressions.UnaryExpression">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Variable(System.Type)
  id: Variable(System.Type)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Variable(Type)
  nameWithType: Expression.Variable(Type)
  fullName: System.Linq.Expressions.Expression.Variable(Type)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ParameterExpression"> node that can be used to identify a parameter or a variable in an expression tree.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.ParameterExpression Variable (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A <see cref="T:System.Linq.Expressions.ParameterExpression"> node with the specified name and type
  overload: System.Linq.Expressions.Expression.Variable*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  id: Variable(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: Variable(Type,String)
  nameWithType: Expression.Variable(Type,String)
  fullName: System.Linq.Expressions.Expression.Variable(Type,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Creates a <see cref="T:System.Linq.Expressions.ParameterExpression"> node that can be used to identify a parameter or a variable in an expression tree.
  remarks: To be added.
  syntax:
    content: public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    - id: name
      type: System.String
      description: The name of the parameter or variable. This name is used for debugging or printing purpose only.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A <see cref="T:System.Linq.Expressions.ParameterExpression"> node with the specified name and type.
  overload: System.Linq.Expressions.Expression.Variable*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  id: VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  langs:
  - csharp
  name: VisitChildren(ExpressionVisitor)
  nameWithType: Expression.VisitChildren(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.VisitChildren(ExpressionVisitor)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq.Expressions
  summary: Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.
  remarks: Override this method to provide logic to walk the node's children. A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.
  syntax:
    content: protected virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: An instance of <xref:System.Func%602>.
    return:
      type: System.Linq.Expressions.Expression
      description: The expression being visited, or an expression which should replace it in the tree.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Linq.Expressions.Expression.#ctor
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Expression()
  nameWithType: Expression.Expression()
  fullName: System.Linq.Expressions.Expression.Expression()
- uid: System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Expression(ExpressionType,Type)
  nameWithType: Expression.Expression(ExpressionType,Type)
  fullName: System.Linq.Expressions.Expression.Expression(ExpressionType,Type)
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Accept(ExpressionVisitor)
  nameWithType: Expression.Accept(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.Accept(ExpressionVisitor)
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionVisitor
  nameWithType: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Add(Expression,Expression)
  nameWithType: Expression.Add(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Add(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Add(Expression,Expression,MethodInfo)
  nameWithType: Expression.Add(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Add(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssign(Expression,Expression)
  nameWithType: Expression.AddAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.AddAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.AddAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssignChecked(Expression,Expression)
  nameWithType: Expression.AddAssignChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssignChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.AddAssignChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddChecked(Expression,Expression)
  nameWithType: Expression.AddChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.AddChecked(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AddChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.AddChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddChecked(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: And(Expression,Expression)
  nameWithType: Expression.And(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.And(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: And(Expression,Expression,MethodInfo)
  nameWithType: Expression.And(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.And(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAlso(Expression,Expression)
  nameWithType: Expression.AndAlso(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.AndAlso(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAlso(Expression,Expression,MethodInfo)
  nameWithType: Expression.AndAlso(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAlso(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAssign(Expression,Expression)
  nameWithType: Expression.AndAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.AndAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: AndAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.AndAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AndAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayAccess(Expression,IEnumerable<Expression>)
  nameWithType: Expression.ArrayAccess(Expression,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ArrayAccess(Expression,IEnumerable<Expression>)
- uid: System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: IndexExpression
  nameWithType: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayAccess(Expression,Expression[])
  nameWithType: Expression.ArrayAccess(Expression,Expression[])
  fullName: System.Linq.Expressions.Expression.ArrayAccess(Expression,Expression[])
- uid: System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: IndexExpression
  nameWithType: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayIndex(Expression,IEnumerable<Expression>)
  nameWithType: Expression.ArrayIndex(Expression,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,IEnumerable<Expression>)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayIndex(Expression,Expression)
  nameWithType: Expression.ArrayIndex(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayIndex(Expression,Expression[])
  nameWithType: Expression.ArrayIndex(Expression,Expression[])
  fullName: System.Linq.Expressions.Expression.ArrayIndex(Expression,Expression[])
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ArrayLength(Expression)
  nameWithType: Expression.ArrayLength(Expression)
  fullName: System.Linq.Expressions.Expression.ArrayLength(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Assign(Expression,Expression)
  nameWithType: Expression.Assign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Assign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Bind(MemberInfo,Expression)
  nameWithType: Expression.Bind(MemberInfo,Expression)
  fullName: System.Linq.Expressions.Expression.Bind(MemberInfo,Expression)
- uid: System.Linq.Expressions.MemberAssignment
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberAssignment
  nameWithType: MemberAssignment
  fullName: System.Linq.Expressions.MemberAssignment
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Bind(MethodInfo,Expression)
  nameWithType: Expression.Bind(MethodInfo,Expression)
  fullName: System.Linq.Expressions.Expression.Bind(MethodInfo,Expression)
- uid: System.Linq.Expressions.MemberAssignment
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberAssignment
  nameWithType: MemberAssignment
  fullName: System.Linq.Expressions.MemberAssignment
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(IEnumerable<Expression>)
  nameWithType: Expression.Block(IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<Expression>)
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Expression[])
  nameWithType: Expression.Block(Expression[])
  fullName: System.Linq.Expressions.Expression.Block(Expression[])
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)
  nameWithType: Expression.Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<ParameterExpression>,IEnumerable<Expression>)
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(IEnumerable<ParameterExpression>,Expression[])
  nameWithType: Expression.Block(IEnumerable<ParameterExpression>,Expression[])
  fullName: System.Linq.Expressions.Expression.Block(IEnumerable<ParameterExpression>,Expression[])
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Expression,Expression)
  nameWithType: Expression.Block(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression)
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Type,IEnumerable<Expression>)
  nameWithType: Expression.Block(Type,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<Expression>)
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Type,Expression[])
  nameWithType: Expression.Block(Type,Expression[])
  fullName: System.Linq.Expressions.Expression.Block(Type,Expression[])
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Expression,Expression,Expression)
  nameWithType: Expression.Block(Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression)
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)
  nameWithType: Expression.Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<ParameterExpression>,IEnumerable<Expression>)
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Type,IEnumerable<ParameterExpression>,Expression[])
  nameWithType: Expression.Block(Type,IEnumerable<ParameterExpression>,Expression[])
  fullName: System.Linq.Expressions.Expression.Block(Type,IEnumerable<ParameterExpression>,Expression[])
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Expression,Expression,Expression,Expression)
  nameWithType: Expression.Block(Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression,Expression)
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Block(Expression,Expression,Expression,Expression,Expression)
  nameWithType: Expression.Block(Expression,Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Block(Expression,Expression,Expression,Expression,Expression)
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Break(LabelTarget)
  nameWithType: Expression.Break(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Break(LabelTarget)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Break(LabelTarget,Expression)
  nameWithType: Expression.Break(LabelTarget,Expression)
  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Expression)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Break(LabelTarget,Type)
  nameWithType: Expression.Break(LabelTarget,Type)
  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Type)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Break(LabelTarget,Expression,Type)
  nameWithType: Expression.Break(LabelTarget,Expression,Type)
  fullName: System.Linq.Expressions.Expression.Break(LabelTarget,Expression,Type)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression,MethodInfo)
  nameWithType: Expression.Call(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo,IEnumerable<Expression>)
  nameWithType: Expression.Call(MethodInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,IEnumerable<Expression>)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo,Expression)
  nameWithType: Expression.Call(MethodInfo,Expression)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo,Expression[])
  nameWithType: Expression.Call(MethodInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression[])
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression,MethodInfo,IEnumerable<Expression>)
  nameWithType: Expression.Call(Expression,MethodInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,IEnumerable<Expression>)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression,MethodInfo,Expression[])
  nameWithType: Expression.Call(Expression,MethodInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression[])
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo,Expression,Expression)
  nameWithType: Expression.Call(MethodInfo,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression,MethodInfo,Expression,Expression)
  nameWithType: Expression.Call(Expression,MethodInfo,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression,Expression)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression,String,Type[],Expression[])
  nameWithType: Expression.Call(Expression,String,Type[],Expression[])
  fullName: System.Linq.Expressions.Expression.Call(Expression,String,Type[],Expression[])
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo,Expression,Expression,Expression)
  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Type,String,Type[],Expression[])
  nameWithType: Expression.Call(Type,String,Type[],Expression[])
  fullName: System.Linq.Expressions.Expression.Call(Type,String,Type[],Expression[])
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(Expression,MethodInfo,Expression,Expression,Expression)
  nameWithType: Expression.Call(Expression,MethodInfo,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(Expression,MethodInfo,Expression,Expression,Expression)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo,Expression,Expression,Expression,Expression)
  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression,Expression)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)
  nameWithType: Expression.Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Call(MethodInfo,Expression,Expression,Expression,Expression,Expression)
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.CanReduce
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: CanReduce
  nameWithType: Expression.CanReduce
  fullName: System.Linq.Expressions.Expression.CanReduce
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Catch(ParameterExpression,Expression)
  nameWithType: Expression.Catch(ParameterExpression,Expression)
  fullName: System.Linq.Expressions.Expression.Catch(ParameterExpression,Expression)
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  nameWithType: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Catch(Type,Expression)
  nameWithType: Expression.Catch(Type,Expression)
  fullName: System.Linq.Expressions.Expression.Catch(Type,Expression)
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  nameWithType: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Catch(ParameterExpression,Expression,Expression)
  nameWithType: Expression.Catch(ParameterExpression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Catch(ParameterExpression,Expression,Expression)
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  nameWithType: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Catch(Type,Expression,Expression)
  nameWithType: Expression.Catch(Type,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Catch(Type,Expression,Expression)
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  nameWithType: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ClearDebugInfo(SymbolDocumentInfo)
  nameWithType: Expression.ClearDebugInfo(SymbolDocumentInfo)
  fullName: System.Linq.Expressions.Expression.ClearDebugInfo(SymbolDocumentInfo)
- uid: System.Linq.Expressions.DebugInfoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DebugInfoExpression
  nameWithType: DebugInfoExpression
  fullName: System.Linq.Expressions.DebugInfoExpression
- uid: System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  name: SymbolDocumentInfo
  nameWithType: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Coalesce(Expression,Expression)
  nameWithType: Expression.Coalesce(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Coalesce(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Coalesce(Expression,Expression,LambdaExpression)
  nameWithType: Expression.Coalesce(Expression,Expression,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.Coalesce(Expression,Expression,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Condition(Expression,Expression,Expression)
  nameWithType: Expression.Condition(Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Condition(Expression,Expression,Expression)
- uid: System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConditionalExpression
  nameWithType: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Condition(Expression,Expression,Expression,Type)
  nameWithType: Expression.Condition(Expression,Expression,Expression,Type)
  fullName: System.Linq.Expressions.Expression.Condition(Expression,Expression,Expression,Type)
- uid: System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConditionalExpression
  nameWithType: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Constant(System.Object)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Constant(Object)
  nameWithType: Expression.Constant(Object)
  fullName: System.Linq.Expressions.Expression.Constant(Object)
- uid: System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConstantExpression
  nameWithType: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Constant(Object,Type)
  nameWithType: Expression.Constant(Object,Type)
  fullName: System.Linq.Expressions.Expression.Constant(Object,Type)
- uid: System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConstantExpression
  nameWithType: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Continue(LabelTarget)
  nameWithType: Expression.Continue(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Continue(LabelTarget)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Continue(LabelTarget,Type)
  nameWithType: Expression.Continue(LabelTarget,Type)
  fullName: System.Linq.Expressions.Expression.Continue(LabelTarget,Type)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Convert(Expression,Type)
  nameWithType: Expression.Convert(Expression,Type)
  fullName: System.Linq.Expressions.Expression.Convert(Expression,Type)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Convert(Expression,Type,MethodInfo)
  nameWithType: Expression.Convert(Expression,Type,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Convert(Expression,Type,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ConvertChecked(Expression,Type)
  nameWithType: Expression.ConvertChecked(Expression,Type)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(Expression,Type)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ConvertChecked(Expression,Type,MethodInfo)
  nameWithType: Expression.ConvertChecked(Expression,Type,MethodInfo)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(Expression,Type,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)
  nameWithType: Expression.DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)
  fullName: System.Linq.Expressions.Expression.DebugInfo(SymbolDocumentInfo,Int32,Int32,Int32,Int32)
- uid: System.Linq.Expressions.DebugInfoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DebugInfoExpression
  nameWithType: DebugInfoExpression
  fullName: System.Linq.Expressions.DebugInfoExpression
- uid: System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  name: SymbolDocumentInfo
  nameWithType: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Decrement(Expression)
  nameWithType: Expression.Decrement(Expression)
  fullName: System.Linq.Expressions.Expression.Decrement(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Decrement(Expression,MethodInfo)
  nameWithType: Expression.Decrement(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Decrement(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Default(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Default(Type)
  nameWithType: Expression.Default(Type)
  fullName: System.Linq.Expressions.Expression.Default(Type)
- uid: System.Linq.Expressions.DefaultExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DefaultExpression
  nameWithType: DefaultExpression
  fullName: System.Linq.Expressions.DefaultExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Divide(Expression,Expression)
  nameWithType: Expression.Divide(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Divide(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Divide(Expression,Expression,MethodInfo)
  nameWithType: Expression.Divide(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Divide(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: DivideAssign(Expression,Expression)
  nameWithType: Expression.DivideAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: DivideAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.DivideAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,IEnumerable<Expression>)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder,Type,Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression)
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder,Type,Expression[])
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression[])
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression[])
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder,Type,Expression,Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)
  nameWithType: Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Dynamic(CallSiteBinder,Type,Expression,Expression,Expression,Expression)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ElementInit(MethodInfo,IEnumerable<Expression>)
  nameWithType: Expression.ElementInit(MethodInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ElementInit(MethodInfo,IEnumerable<Expression>)
- uid: System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: false
  name: ElementInit
  nameWithType: ElementInit
  fullName: System.Linq.Expressions.ElementInit
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ElementInit(MethodInfo,Expression[])
  nameWithType: Expression.ElementInit(MethodInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.ElementInit(MethodInfo,Expression[])
- uid: System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: false
  name: ElementInit
  nameWithType: ElementInit
  fullName: System.Linq.Expressions.ElementInit
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Empty
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Empty()
  nameWithType: Expression.Empty()
  fullName: System.Linq.Expressions.Expression.Empty()
- uid: System.Linq.Expressions.DefaultExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DefaultExpression
  nameWithType: DefaultExpression
  fullName: System.Linq.Expressions.DefaultExpression
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Equal(Expression,Expression)
  nameWithType: Expression.Equal(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Equal(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Equal(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.Equal(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Equal(Expression,Expression,Boolean,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOr(Expression,Expression)
  nameWithType: Expression.ExclusiveOr(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOr(Expression,Expression,MethodInfo)
  nameWithType: Expression.ExclusiveOr(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOrAssign(Expression,Expression)
  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOrAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Field(Expression,FieldInfo)
  nameWithType: Expression.Field(Expression,FieldInfo)
  fullName: System.Linq.Expressions.Expression.Field(Expression,FieldInfo)
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Field(Expression,String)
  nameWithType: Expression.Field(Expression,String)
  fullName: System.Linq.Expressions.Expression.Field(Expression,String)
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Field(Expression,Type,String)
  nameWithType: Expression.Field(Expression,Type,String)
  fullName: System.Linq.Expressions.Expression.Field(Expression,Type,String)
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GetActionType(Type[])
  nameWithType: Expression.GetActionType(Type[])
  fullName: System.Linq.Expressions.Expression.GetActionType(Type[])
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GetDelegateType(Type[])
  nameWithType: Expression.GetDelegateType(Type[])
  fullName: System.Linq.Expressions.Expression.GetDelegateType(Type[])
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GetFuncType(Type[])
  nameWithType: Expression.GetFuncType(Type[])
  fullName: System.Linq.Expressions.Expression.GetFuncType(Type[])
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Goto(LabelTarget)
  nameWithType: Expression.Goto(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Goto(LabelTarget,Expression)
  nameWithType: Expression.Goto(LabelTarget,Expression)
  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Expression)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Goto(LabelTarget,Type)
  nameWithType: Expression.Goto(LabelTarget,Type)
  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Type)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Goto(LabelTarget,Expression,Type)
  nameWithType: Expression.Goto(LabelTarget,Expression,Type)
  fullName: System.Linq.Expressions.Expression.Goto(LabelTarget,Expression,Type)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GreaterThan(Expression,Expression)
  nameWithType: Expression.GreaterThan(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThan(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GreaterThan(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.GreaterThan(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThan(Expression,Expression,Boolean,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GreaterThanOrEqual(Expression,Expression)
  nameWithType: Expression.GreaterThanOrEqual(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(Expression,Expression,Boolean,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IfThen(Expression,Expression)
  nameWithType: Expression.IfThen(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.IfThen(Expression,Expression)
- uid: System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConditionalExpression
  nameWithType: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IfThenElse(Expression,Expression,Expression)
  nameWithType: Expression.IfThenElse(Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.IfThenElse(Expression,Expression,Expression)
- uid: System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ConditionalExpression
  nameWithType: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Increment(Expression)
  nameWithType: Expression.Increment(Expression)
  fullName: System.Linq.Expressions.Expression.Increment(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Increment(Expression,MethodInfo)
  nameWithType: Expression.Increment(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Increment(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Invoke(Expression,IEnumerable<Expression>)
  nameWithType: Expression.Invoke(Expression,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Invoke(Expression,IEnumerable<Expression>)
- uid: System.Linq.Expressions.InvocationExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: InvocationExpression
  nameWithType: InvocationExpression
  fullName: System.Linq.Expressions.InvocationExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Invoke(Expression,Expression[])
  nameWithType: Expression.Invoke(Expression,Expression[])
  fullName: System.Linq.Expressions.Expression.Invoke(Expression,Expression[])
- uid: System.Linq.Expressions.InvocationExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: InvocationExpression
  nameWithType: InvocationExpression
  fullName: System.Linq.Expressions.InvocationExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IsFalse(Expression)
  nameWithType: Expression.IsFalse(Expression)
  fullName: System.Linq.Expressions.Expression.IsFalse(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IsFalse(Expression,MethodInfo)
  nameWithType: Expression.IsFalse(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsFalse(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IsTrue(Expression)
  nameWithType: Expression.IsTrue(Expression)
  fullName: System.Linq.Expressions.Expression.IsTrue(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: IsTrue(Expression,MethodInfo)
  nameWithType: Expression.IsTrue(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsTrue(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Label
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label()
  nameWithType: Expression.Label()
  fullName: System.Linq.Expressions.Expression.Label()
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label(LabelTarget)
  nameWithType: Expression.Label(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Label(LabelTarget)
- uid: System.Linq.Expressions.LabelExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelExpression
  nameWithType: LabelExpression
  fullName: System.Linq.Expressions.LabelExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression.Label(System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label(String)
  nameWithType: Expression.Label(String)
  fullName: System.Linq.Expressions.Expression.Label(String)
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.Label(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label(Type)
  nameWithType: Expression.Label(Type)
  fullName: System.Linq.Expressions.Expression.Label(Type)
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label(LabelTarget,Expression)
  nameWithType: Expression.Label(LabelTarget,Expression)
  fullName: System.Linq.Expressions.Expression.Label(LabelTarget,Expression)
- uid: System.Linq.Expressions.LabelExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelExpression
  nameWithType: LabelExpression
  fullName: System.Linq.Expressions.LabelExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Label(Type,String)
  nameWithType: Expression.Label(Type,String)
  fullName: System.Linq.Expressions.Expression.Label(Type,String)
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,ParameterExpression[])
  nameWithType: Expression.Lambda(Expression,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,ParameterExpression[])
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression[]
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,Boolean,ParameterExpression[])
  nameWithType: Expression.Lambda(Expression,Boolean,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,ParameterExpression[])
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression[]
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,String,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type,Expression,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type,Expression,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type,Expression,ParameterExpression[])
  nameWithType: Expression.Lambda(Type,Expression,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,ParameterExpression[])
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression[]
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,Boolean,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type,Expression,Boolean,ParameterExpression[])
  nameWithType: Expression.Lambda(Type,Expression,Boolean,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,Boolean,ParameterExpression[])
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression[]
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,String,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Type,Expression,String,Boolean,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,ParameterExpression[])
  nameWithType: Expression.Lambda(Expression,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,ParameterExpression[])
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression[]
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,Boolean,ParameterExpression[])
  nameWithType: Expression.Lambda(Expression,Boolean,ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,Boolean,ParameterExpression[])
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression[]
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,String,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
  nameWithType: Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.Lambda(Expression,String,Boolean,IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShift(Expression,Expression)
  nameWithType: Expression.LeftShift(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.LeftShift(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShift(Expression,Expression,MethodInfo)
  nameWithType: Expression.LeftShift(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShift(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShiftAssign(Expression,Expression)
  nameWithType: Expression.LeftShiftAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShiftAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.LeftShiftAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LessThan(Expression,Expression)
  nameWithType: Expression.LessThan(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.LessThan(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LessThan(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.LessThan(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThan(Expression,Expression,Boolean,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LessThanOrEqual(Expression,Expression)
  nameWithType: Expression.LessThanOrEqual(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(Expression,Expression,Boolean,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListBind(MemberInfo,IEnumerable<ElementInit>)
  nameWithType: Expression.ListBind(MemberInfo,IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListBind(MemberInfo,IEnumerable<ElementInit>)
- uid: System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberListBinding
  nameWithType: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ElementInit>
  nameWithType: IEnumerable<ElementInit>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListBind(MemberInfo,ElementInit[])
  nameWithType: Expression.ListBind(MemberInfo,ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListBind(MemberInfo,ElementInit[])
- uid: System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberListBinding
  nameWithType: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: false
  name: ElementInit
  nameWithType: ElementInit
  fullName: System.Linq.Expressions.ElementInit[]
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListBind(MethodInfo,IEnumerable<ElementInit>)
  nameWithType: Expression.ListBind(MethodInfo,IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListBind(MethodInfo,IEnumerable<ElementInit>)
- uid: System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberListBinding
  nameWithType: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ElementInit>
  nameWithType: IEnumerable<ElementInit>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListBind(MethodInfo,ElementInit[])
  nameWithType: Expression.ListBind(MethodInfo,ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListBind(MethodInfo,ElementInit[])
- uid: System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberListBinding
  nameWithType: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: false
  name: ElementInit
  nameWithType: ElementInit
  fullName: System.Linq.Expressions.ElementInit[]
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression,IEnumerable<ElementInit>)
  nameWithType: Expression.ListInit(NewExpression,IEnumerable<ElementInit>)
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,IEnumerable<ElementInit>)
- uid: System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ListInitExpression
  nameWithType: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ElementInit>
  nameWithType: IEnumerable<ElementInit>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression,IEnumerable<Expression>)
  nameWithType: Expression.ListInit(NewExpression,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,IEnumerable<Expression>)
- uid: System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ListInitExpression
  nameWithType: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression,ElementInit[])
  nameWithType: Expression.ListInit(NewExpression,ElementInit[])
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,ElementInit[])
- uid: System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ListInitExpression
  nameWithType: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: false
  name: ElementInit
  nameWithType: ElementInit
  fullName: System.Linq.Expressions.ElementInit[]
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression,Expression[])
  nameWithType: Expression.ListInit(NewExpression,Expression[])
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,Expression[])
- uid: System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ListInitExpression
  nameWithType: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)
  nameWithType: Expression.ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,MethodInfo,IEnumerable<Expression>)
- uid: System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ListInitExpression
  nameWithType: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ListInit(NewExpression,MethodInfo,Expression[])
  nameWithType: Expression.ListInit(NewExpression,MethodInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.ListInit(NewExpression,MethodInfo,Expression[])
- uid: System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ListInitExpression
  nameWithType: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Loop(Expression)
  nameWithType: Expression.Loop(Expression)
  fullName: System.Linq.Expressions.Expression.Loop(Expression)
- uid: System.Linq.Expressions.LoopExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LoopExpression
  nameWithType: LoopExpression
  fullName: System.Linq.Expressions.LoopExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Loop(Expression,LabelTarget)
  nameWithType: Expression.Loop(Expression,LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(Expression,LabelTarget)
- uid: System.Linq.Expressions.LoopExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LoopExpression
  nameWithType: LoopExpression
  fullName: System.Linq.Expressions.LoopExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Loop(Expression,LabelTarget,LabelTarget)
  nameWithType: Expression.Loop(Expression,LabelTarget,LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(Expression,LabelTarget,LabelTarget)
- uid: System.Linq.Expressions.LoopExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LoopExpression
  nameWithType: LoopExpression
  fullName: System.Linq.Expressions.LoopExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeBinary(ExpressionType,Expression,Expression)
  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)
  nameWithType: Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(ExpressionType,Expression,Expression,Boolean,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeCatchBlock(Type,ParameterExpression,Expression,Expression)
  nameWithType: Expression.MakeCatchBlock(Type,ParameterExpression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MakeCatchBlock(Type,ParameterExpression,Expression,Expression)
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  nameWithType: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,IEnumerable<Expression>)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type,CallSiteBinder,Expression)
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression)
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type,CallSiteBinder,Expression[])
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression[])
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression[])
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression)
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)
  nameWithType: Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MakeDynamic(Type,CallSiteBinder,Expression,Expression,Expression,Expression)
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  nameWithType: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  nameWithType: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)
  nameWithType: Expression.MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)
  fullName: System.Linq.Expressions.Expression.MakeGoto(GotoExpressionKind,LabelTarget,Expression,Type)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.GotoExpressionKind
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpressionKind
  nameWithType: GotoExpressionKind
  fullName: System.Linq.Expressions.GotoExpressionKind
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)
  nameWithType: Expression.MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.MakeIndex(Expression,PropertyInfo,IEnumerable<Expression>)
- uid: System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: IndexExpression
  nameWithType: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeMemberAccess(Expression,MemberInfo)
  nameWithType: Expression.MakeMemberAccess(Expression,MemberInfo)
  fullName: System.Linq.Expressions.Expression.MakeMemberAccess(Expression,MemberInfo)
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)
  nameWithType: Expression.MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)
  fullName: System.Linq.Expressions.Expression.MakeTry(Type,Expression,Expression,Expression,IEnumerable<CatchBlock>)
- uid: System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TryExpression
  nameWithType: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<CatchBlock>
  nameWithType: IEnumerable<CatchBlock>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeUnary(ExpressionType,Expression,Type)
  nameWithType: Expression.MakeUnary(ExpressionType,Expression,Type)
  fullName: System.Linq.Expressions.Expression.MakeUnary(ExpressionType,Expression,Type)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MakeUnary(ExpressionType,Expression,Type,MethodInfo)
  nameWithType: Expression.MakeUnary(ExpressionType,Expression,Type,MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeUnary(ExpressionType,Expression,Type,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberBind(MemberInfo,IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberBind(MemberInfo,IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberBind(MemberInfo,IEnumerable<MemberBinding>)
- uid: System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberMemberBinding
  nameWithType: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<MemberBinding>
  nameWithType: IEnumerable<MemberBinding>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberBind(MemberInfo,MemberBinding[])
  nameWithType: Expression.MemberBind(MemberInfo,MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberBind(MemberInfo,MemberBinding[])
- uid: System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberMemberBinding
  nameWithType: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Linq.Expressions.MemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberBinding
  nameWithType: MemberBinding
  fullName: System.Linq.Expressions.MemberBinding[]
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberBind(MethodInfo,IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberBind(MethodInfo,IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberBind(MethodInfo,IEnumerable<MemberBinding>)
- uid: System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberMemberBinding
  nameWithType: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<MemberBinding>
  nameWithType: IEnumerable<MemberBinding>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberBind(MethodInfo,MemberBinding[])
  nameWithType: Expression.MemberBind(MethodInfo,MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberBind(MethodInfo,MemberBinding[])
- uid: System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberMemberBinding
  nameWithType: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.MemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberBinding
  nameWithType: MemberBinding
  fullName: System.Linq.Expressions.MemberBinding[]
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberInit(NewExpression,IEnumerable<MemberBinding>)
  nameWithType: Expression.MemberInit(NewExpression,IEnumerable<MemberBinding>)
  fullName: System.Linq.Expressions.Expression.MemberInit(NewExpression,IEnumerable<MemberBinding>)
- uid: System.Linq.Expressions.MemberInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberInitExpression
  nameWithType: MemberInitExpression
  fullName: System.Linq.Expressions.MemberInitExpression
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<MemberBinding>
  nameWithType: IEnumerable<MemberBinding>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MemberInit(NewExpression,MemberBinding[])
  nameWithType: Expression.MemberInit(NewExpression,MemberBinding[])
  fullName: System.Linq.Expressions.Expression.MemberInit(NewExpression,MemberBinding[])
- uid: System.Linq.Expressions.MemberInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberInitExpression
  nameWithType: MemberInitExpression
  fullName: System.Linq.Expressions.MemberInitExpression
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Linq.Expressions.MemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberBinding
  nameWithType: MemberBinding
  fullName: System.Linq.Expressions.MemberBinding[]
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Modulo(Expression,Expression)
  nameWithType: Expression.Modulo(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Modulo(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Modulo(Expression,Expression,MethodInfo)
  nameWithType: Expression.Modulo(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Modulo(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ModuloAssign(Expression,Expression)
  nameWithType: Expression.ModuloAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ModuloAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.ModuloAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Multiply(Expression,Expression)
  nameWithType: Expression.Multiply(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Multiply(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Multiply(Expression,Expression,MethodInfo)
  nameWithType: Expression.Multiply(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Multiply(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssign(Expression,Expression)
  nameWithType: Expression.MultiplyAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.MultiplyAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssignChecked(Expression,Expression)
  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssignChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyChecked(Expression,Expression)
  nameWithType: Expression.MultiplyChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: MultiplyChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.MultiplyChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Negate(Expression)
  nameWithType: Expression.Negate(Expression)
  fullName: System.Linq.Expressions.Expression.Negate(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Negate(Expression,MethodInfo)
  nameWithType: Expression.Negate(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Negate(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NegateChecked(Expression)
  nameWithType: Expression.NegateChecked(Expression)
  fullName: System.Linq.Expressions.Expression.NegateChecked(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NegateChecked(Expression,MethodInfo)
  nameWithType: Expression.NegateChecked(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.NegateChecked(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(ConstructorInfo)
  nameWithType: Expression.New(ConstructorInfo)
  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo)
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Linq.Expressions.Expression.New(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(Type)
  nameWithType: Expression.New(Type)
  fullName: System.Linq.Expressions.Expression.New(Type)
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(ConstructorInfo,IEnumerable<Expression>)
  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>)
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(ConstructorInfo,Expression[])
  nameWithType: Expression.New(ConstructorInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,Expression[])
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)
  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)
  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>,IEnumerable<MemberInfo>)
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<MemberInfo>
  nameWithType: IEnumerable<MemberInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])
  nameWithType: Expression.New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])
  fullName: System.Linq.Expressions.Expression.New(ConstructorInfo,IEnumerable<Expression>,MemberInfo[])
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NewArrayBounds(Type,IEnumerable<Expression>)
  nameWithType: Expression.NewArrayBounds(Type,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(Type,IEnumerable<Expression>)
- uid: System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewArrayExpression
  nameWithType: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NewArrayBounds(Type,Expression[])
  nameWithType: Expression.NewArrayBounds(Type,Expression[])
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(Type,Expression[])
- uid: System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewArrayExpression
  nameWithType: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NewArrayInit(Type,IEnumerable<Expression>)
  nameWithType: Expression.NewArrayInit(Type,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.NewArrayInit(Type,IEnumerable<Expression>)
- uid: System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewArrayExpression
  nameWithType: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NewArrayInit(Type,Expression[])
  nameWithType: Expression.NewArrayInit(Type,Expression[])
  fullName: System.Linq.Expressions.Expression.NewArrayInit(Type,Expression[])
- uid: System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: NewArrayExpression
  nameWithType: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.NodeType
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NodeType
  nameWithType: Expression.NodeType
  fullName: System.Linq.Expressions.Expression.NodeType
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Not(Expression)
  nameWithType: Expression.Not(Expression)
  fullName: System.Linq.Expressions.Expression.Not(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Not(Expression,MethodInfo)
  nameWithType: Expression.Not(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Not(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NotEqual(Expression,Expression)
  nameWithType: Expression.NotEqual(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.NotEqual(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: NotEqual(Expression,Expression,Boolean,MethodInfo)
  nameWithType: Expression.NotEqual(Expression,Expression,Boolean,MethodInfo)
  fullName: System.Linq.Expressions.Expression.NotEqual(Expression,Expression,Boolean,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OnesComplement(Expression)
  nameWithType: Expression.OnesComplement(Expression)
  fullName: System.Linq.Expressions.Expression.OnesComplement(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OnesComplement(Expression,MethodInfo)
  nameWithType: Expression.OnesComplement(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.OnesComplement(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Or(Expression,Expression)
  nameWithType: Expression.Or(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Or(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Or(Expression,Expression,MethodInfo)
  nameWithType: Expression.Or(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Or(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrAssign(Expression,Expression)
  nameWithType: Expression.OrAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.OrAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.OrAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.OrAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrElse(Expression,Expression)
  nameWithType: Expression.OrElse(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.OrElse(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: OrElse(Expression,Expression,MethodInfo)
  nameWithType: Expression.OrElse(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrElse(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Parameter(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Parameter(Type)
  nameWithType: Expression.Parameter(Type)
  fullName: System.Linq.Expressions.Expression.Parameter(Type)
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Parameter(Type,String)
  nameWithType: Expression.Parameter(Type,String)
  fullName: System.Linq.Expressions.Expression.Parameter(Type,String)
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PostDecrementAssign(Expression)
  nameWithType: Expression.PostDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PostDecrementAssign(Expression,MethodInfo)
  nameWithType: Expression.PostDecrementAssign(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PostIncrementAssign(Expression)
  nameWithType: Expression.PostIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PostIncrementAssign(Expression,MethodInfo)
  nameWithType: Expression.PostIncrementAssign(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Power(Expression,Expression)
  nameWithType: Expression.Power(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Power(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Power(Expression,Expression,MethodInfo)
  nameWithType: Expression.Power(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Power(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PowerAssign(Expression,Expression)
  nameWithType: Expression.PowerAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PowerAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.PowerAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PreDecrementAssign(Expression)
  nameWithType: Expression.PreDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PreDecrementAssign(Expression,MethodInfo)
  nameWithType: Expression.PreDecrementAssign(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PreIncrementAssign(Expression)
  nameWithType: Expression.PreIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PreIncrementAssign(Expression,MethodInfo)
  nameWithType: Expression.PreIncrementAssign(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression,MethodInfo)
  nameWithType: Expression.Property(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Property(Expression,MethodInfo)
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression,PropertyInfo)
  nameWithType: Expression.Property(Expression,PropertyInfo)
  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo)
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression,String)
  nameWithType: Expression.Property(Expression,String)
  fullName: System.Linq.Expressions.Expression.Property(Expression,String)
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression,PropertyInfo,IEnumerable<Expression>)
  nameWithType: Expression.Property(Expression,PropertyInfo,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo,IEnumerable<Expression>)
- uid: System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: IndexExpression
  nameWithType: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression,PropertyInfo,Expression[])
  nameWithType: Expression.Property(Expression,PropertyInfo,Expression[])
  fullName: System.Linq.Expressions.Expression.Property(Expression,PropertyInfo,Expression[])
- uid: System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: IndexExpression
  nameWithType: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression,String,Expression[])
  nameWithType: Expression.Property(Expression,String,Expression[])
  fullName: System.Linq.Expressions.Expression.Property(Expression,String,Expression[])
- uid: System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: IndexExpression
  nameWithType: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Property(Expression,Type,String)
  nameWithType: Expression.Property(Expression,Type,String)
  fullName: System.Linq.Expressions.Expression.Property(Expression,Type,String)
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: PropertyOrField(Expression,String)
  nameWithType: Expression.PropertyOrField(Expression,String)
  fullName: System.Linq.Expressions.Expression.PropertyOrField(Expression,String)
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Quote(Expression)
  nameWithType: Expression.Quote(Expression)
  fullName: System.Linq.Expressions.Expression.Quote(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Reduce
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Reduce()
  nameWithType: Expression.Reduce()
  fullName: System.Linq.Expressions.Expression.Reduce()
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.ReduceAndCheck
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReduceAndCheck()
  nameWithType: Expression.ReduceAndCheck()
  fullName: System.Linq.Expressions.Expression.ReduceAndCheck()
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.ReduceExtensions
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReduceExtensions()
  nameWithType: Expression.ReduceExtensions()
  fullName: System.Linq.Expressions.Expression.ReduceExtensions()
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReferenceEqual(Expression,Expression)
  nameWithType: Expression.ReferenceEqual(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceEqual(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ReferenceNotEqual(Expression,Expression)
  nameWithType: Expression.ReferenceNotEqual(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceNotEqual(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Rethrow
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Rethrow()
  nameWithType: Expression.Rethrow()
  fullName: System.Linq.Expressions.Expression.Rethrow()
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Rethrow(Type)
  nameWithType: Expression.Rethrow(Type)
  fullName: System.Linq.Expressions.Expression.Rethrow(Type)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Return(LabelTarget)
  nameWithType: Expression.Return(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Return(LabelTarget)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Return(LabelTarget,Expression)
  nameWithType: Expression.Return(LabelTarget,Expression)
  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Expression)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Return(LabelTarget,Type)
  nameWithType: Expression.Return(LabelTarget,Type)
  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Type)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Return(LabelTarget,Expression,Type)
  nameWithType: Expression.Return(LabelTarget,Expression,Type)
  fullName: System.Linq.Expressions.Expression.Return(LabelTarget,Expression,Type)
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShift(Expression,Expression)
  nameWithType: Expression.RightShift(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.RightShift(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShift(Expression,Expression,MethodInfo)
  nameWithType: Expression.RightShift(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShift(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShiftAssign(Expression,Expression)
  nameWithType: Expression.RightShiftAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShiftAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.RightShiftAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RuntimeVariables(IEnumerable<ParameterExpression>)
  nameWithType: Expression.RuntimeVariables(IEnumerable<ParameterExpression>)
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(IEnumerable<ParameterExpression>)
- uid: System.Linq.Expressions.RuntimeVariablesExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: RuntimeVariablesExpression
  nameWithType: RuntimeVariablesExpression
  fullName: System.Linq.Expressions.RuntimeVariablesExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: RuntimeVariables(ParameterExpression[])
  nameWithType: Expression.RuntimeVariables(ParameterExpression[])
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(ParameterExpression[])
- uid: System.Linq.Expressions.RuntimeVariablesExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: RuntimeVariablesExpression
  nameWithType: RuntimeVariablesExpression
  fullName: System.Linq.Expressions.RuntimeVariablesExpression
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression[]
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Subtract(Expression,Expression)
  nameWithType: Expression.Subtract(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.Subtract(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Subtract(Expression,Expression,MethodInfo)
  nameWithType: Expression.Subtract(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.Subtract(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssign(Expression,Expression)
  nameWithType: Expression.SubtractAssign(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssign(Expression,Expression,MethodInfo)
  nameWithType: Expression.SubtractAssign(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssignChecked(Expression,Expression)
  nameWithType: Expression.SubtractAssignChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssignChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.SubtractAssignChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  nameWithType: Expression.SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(Expression,Expression,MethodInfo,LambdaExpression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractChecked(Expression,Expression)
  nameWithType: Expression.SubtractChecked(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(Expression,Expression)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SubtractChecked(Expression,Expression,MethodInfo)
  nameWithType: Expression.SubtractChecked(Expression,Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(Expression,Expression,MethodInfo)
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Expression,SwitchCase[])
  nameWithType: Expression.Switch(Expression,SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(Expression,SwitchCase[])
- uid: System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchExpression
  nameWithType: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase[]
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Expression,Expression,SwitchCase[])
  nameWithType: Expression.Switch(Expression,Expression,SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,SwitchCase[])
- uid: System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchExpression
  nameWithType: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase[]
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
  nameWithType: Expression.Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
- uid: System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchExpression
  nameWithType: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<SwitchCase>
  nameWithType: IEnumerable<SwitchCase>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Expression,Expression,MethodInfo,SwitchCase[])
  nameWithType: Expression.Switch(Expression,Expression,MethodInfo,SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(Expression,Expression,MethodInfo,SwitchCase[])
- uid: System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchExpression
  nameWithType: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase[]
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
  nameWithType: Expression.Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
  fullName: System.Linq.Expressions.Expression.Switch(Type,Expression,Expression,MethodInfo,IEnumerable<SwitchCase>)
- uid: System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchExpression
  nameWithType: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<SwitchCase>
  nameWithType: IEnumerable<SwitchCase>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])
  nameWithType: Expression.Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])
  fullName: System.Linq.Expressions.Expression.Switch(Type,Expression,Expression,MethodInfo,SwitchCase[])
- uid: System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchExpression
  nameWithType: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase[]
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SwitchCase(Expression,IEnumerable<Expression>)
  nameWithType: Expression.SwitchCase(Expression,IEnumerable<Expression>)
  fullName: System.Linq.Expressions.Expression.SwitchCase(Expression,IEnumerable<Expression>)
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SwitchCase(Expression,Expression[])
  nameWithType: Expression.SwitchCase(Expression,Expression[])
  fullName: System.Linq.Expressions.Expression.SwitchCase(Expression,Expression[])
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression[]
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SymbolDocument(String)
  nameWithType: Expression.SymbolDocument(String)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(String)
- uid: System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  name: SymbolDocumentInfo
  nameWithType: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SymbolDocument(String,Guid)
  nameWithType: Expression.SymbolDocument(String,Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid)
- uid: System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  name: SymbolDocumentInfo
  nameWithType: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SymbolDocument(String,Guid,Guid)
  nameWithType: Expression.SymbolDocument(String,Guid,Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid,Guid)
- uid: System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  name: SymbolDocumentInfo
  nameWithType: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: SymbolDocument(String,Guid,Guid,Guid)
  nameWithType: Expression.SymbolDocument(String,Guid,Guid,Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(String,Guid,Guid,Guid)
- uid: System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  name: SymbolDocumentInfo
  nameWithType: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Throw(Expression)
  nameWithType: Expression.Throw(Expression)
  fullName: System.Linq.Expressions.Expression.Throw(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Throw(Expression,Type)
  nameWithType: Expression.Throw(Expression,Type)
  fullName: System.Linq.Expressions.Expression.Throw(Expression,Type)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.ToString
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: ToString()
  nameWithType: Expression.ToString()
  fullName: System.Linq.Expressions.Expression.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryCatch(Expression,CatchBlock[])
  nameWithType: Expression.TryCatch(Expression,CatchBlock[])
  fullName: System.Linq.Expressions.Expression.TryCatch(Expression,CatchBlock[])
- uid: System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TryExpression
  nameWithType: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  nameWithType: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock[]
- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryCatchFinally(Expression,Expression,CatchBlock[])
  nameWithType: Expression.TryCatchFinally(Expression,Expression,CatchBlock[])
  fullName: System.Linq.Expressions.Expression.TryCatchFinally(Expression,Expression,CatchBlock[])
- uid: System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TryExpression
  nameWithType: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  nameWithType: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock[]
- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryFault(Expression,Expression)
  nameWithType: Expression.TryFault(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.TryFault(Expression,Expression)
- uid: System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TryExpression
  nameWithType: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryFinally(Expression,Expression)
  nameWithType: Expression.TryFinally(Expression,Expression)
  fullName: System.Linq.Expressions.Expression.TryFinally(Expression,Expression)
- uid: System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TryExpression
  nameWithType: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryGetActionType(Type[],Type)
  nameWithType: Expression.TryGetActionType(Type[],Type)
  fullName: System.Linq.Expressions.Expression.TryGetActionType(Type[],Type)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TryGetFuncType(Type[],Type)
  nameWithType: Expression.TryGetFuncType(Type[],Type)
  fullName: System.Linq.Expressions.Expression.TryGetFuncType(Type[],Type)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Type
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Type
  nameWithType: Expression.Type
  fullName: System.Linq.Expressions.Expression.Type
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TypeAs(Expression,Type)
  nameWithType: Expression.TypeAs(Expression,Type)
  fullName: System.Linq.Expressions.Expression.TypeAs(Expression,Type)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TypeEqual(Expression,Type)
  nameWithType: Expression.TypeEqual(Expression,Type)
  fullName: System.Linq.Expressions.Expression.TypeEqual(Expression,Type)
- uid: System.Linq.Expressions.TypeBinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TypeBinaryExpression
  nameWithType: TypeBinaryExpression
  fullName: System.Linq.Expressions.TypeBinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: TypeIs(Expression,Type)
  nameWithType: Expression.TypeIs(Expression,Type)
  fullName: System.Linq.Expressions.Expression.TypeIs(Expression,Type)
- uid: System.Linq.Expressions.TypeBinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: TypeBinaryExpression
  nameWithType: TypeBinaryExpression
  fullName: System.Linq.Expressions.TypeBinaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: UnaryPlus(Expression)
  nameWithType: Expression.UnaryPlus(Expression)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(Expression)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: UnaryPlus(Expression,MethodInfo)
  nameWithType: Expression.UnaryPlus(Expression,MethodInfo)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(Expression,MethodInfo)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Unbox(Expression,Type)
  nameWithType: Expression.Unbox(Expression,Type)
  fullName: System.Linq.Expressions.Expression.Unbox(Expression,Type)
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Variable(System.Type)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Variable(Type)
  nameWithType: Expression.Variable(Type)
  fullName: System.Linq.Expressions.Expression.Variable(Type)
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: Variable(Type,String)
  nameWithType: Expression.Variable(Type,String)
  fullName: System.Linq.Expressions.Expression.Variable(Type,String)
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  isExternal: false
  name: VisitChildren(ExpressionVisitor)
  nameWithType: Expression.VisitChildren(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.VisitChildren(ExpressionVisitor)
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionVisitor
  nameWithType: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: System.Linq.Expressions.Expression.Add*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.AddAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.AddAssignChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.AddChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.And*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.AndAlso*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.AndAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.ArrayAccess*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.ArrayIndex*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Bind*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Block*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Break*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Call*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Catch*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Coalesce*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Condition*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Constant*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Continue*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Convert*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.ConvertChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Decrement*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Divide*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.DivideAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Dynamic*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.ElementInit*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Equal*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.ExclusiveOr*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Field*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Goto*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.GreaterThan*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Increment*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Invoke*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.IsFalse*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.IsTrue*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Label*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Lambda*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Lambda<TDelegate>*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.LeftShift*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.LeftShiftAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.LessThan*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.LessThanOrEqual*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.ListBind*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.ListInit*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Loop*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.MakeBinary*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.MakeDynamic*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.MakeUnary*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.MemberBind*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.MemberInit*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Modulo*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.ModuloAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Multiply*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.MultiplyAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.MultiplyChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Negate*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.NegateChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.New*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.NewArrayBounds*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.NewArrayInit*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Not*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.NotEqual*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.OnesComplement*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Or*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.OrAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.OrElse*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Parameter*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.PostDecrementAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.PostIncrementAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Power*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.PowerAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.PreDecrementAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.PreIncrementAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Property*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Rethrow*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Return*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.RightShift*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.RightShiftAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.RuntimeVariables*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Subtract*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.SubtractAssign*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.SubtractChecked*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Switch*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.SwitchCase*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.SymbolDocument*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Throw*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.UnaryPlus*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
- uid: System.Linq.Expressions.Expression.Variable*
  parent: System.Linq.Expressions.Expression
  isExternal: false
  nameWithType: Expression.
