### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlTransaction
  id: SqlTransaction
  children:
  - System.Data.SqlClient.SqlTransaction.Commit
  - System.Data.SqlClient.SqlTransaction.Connection
  - System.Data.SqlClient.SqlTransaction.DbConnection
  - System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlTransaction.IsolationLevel
  - System.Data.SqlClient.SqlTransaction.Rollback
  - System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  - System.Data.SqlClient.SqlTransaction.Save(System.String)
  langs:
  - csharp
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
  type: Class
  summary: Represents a [!INCLUDE[tsql](../../add/includes/tsql-md.md)] transaction to be made in a [!INCLUDE[ssNoVersion](../../add/includes/ssnoversion-md.md)] database. This class cannot be inherited.
  remarks: "The application creates a SqlTransaction object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the SqlTransaction object.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a SqlTransaction. Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on [!INCLUDE[ssNoVersion](../../add/includes/ssnoversion-md.md)] transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\\(SQL.105\\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\\(SQL.105\\).aspx)."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a SqlTransaction. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error, or if it is disposed without first being committed. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!CODE [Classic WebData SqlConnection.BeginTransaction Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example#1)]"
  syntax:
    content: 'public sealed class SqlTransaction : System.Data.Common.DbTransaction'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbTransaction
  implements: []
  inheritedMembers:
  - System.Data.Common.DbTransaction.Dispose
  - System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.SqlClient.SqlTransaction.Commit
  id: Commit
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: Commits the database transaction.
  remarks: "The Commit method is equivalent to the Transact-SQL COMMIT TRANSACTION statement. You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database. For more information, see SQL Server Books Online.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>. Both `Commit` and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the Commit, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!CODE [Classic WebData SqlConnection.BeginTransaction Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example#1)]"
  syntax:
    content: public override void Commit ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.SqlClient.SqlTransaction.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: Gets the <see cref="T:System.Data.SqlClient.SqlConnection"> object associated with the transaction, or `null` if the transaction is no longer valid.
  remarks: A single application may have multiple database connections, each with zero or more transactions. This property lets you determine the connection object associated with a particular transaction created by <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.
  syntax:
    content: public System.Data.SqlClient.SqlConnection Connection { get; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  id: DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override System.Data.Common.DbConnection DbConnection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  id: IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: Specifies the <see cref="T:System.Data.IsolationLevel"> for this transaction.
  remarks: "Parallel transactions are not supported. Therefore, the <xref:System.Data.IsolationLevel> applies to the whole transaction.  \n  \n For more information on SQL Server isolation levels, see \"Isolation Levels in the Database Engine\" in SQL Server Books Online."
  syntax:
    content: public override System.Data.IsolationLevel IsolationLevel { get; }
    return:
      type: System.Data.IsolationLevel
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  id: Rollback
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: Rolls back a transaction from a pending state.
  remarks: "The Rollback method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see SQL Server Books Online.  \n  \n The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called). The transaction is rolled back in the event it is disposed before `Commit` or `Rollback` is called.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when rolling back a transaction. A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and Rollback methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!CODE [Classic WebData SqlConnection.BeginTransaction Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example#1)]"
  syntax:
    content: public override void Rollback ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  id: Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.
  remarks: "The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see \"Explicit Transactions\" and \"Transaction Savepoints\" in SQL Server Books Online.  \n  \n The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called). The transaction is rolled back if it is disposed before `Commit` or `Rollback` is called.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when rolling back a transaction. A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!CODE [Classic WebData SqlConnection.BeginTransaction2 Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example#1)]"
  syntax:
    content: public void Rollback (string transactionName);
    parameters:
    - id: transactionName
      type: System.String
      description: The name of the transaction to roll back, or the savepoint to which to roll back.
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  id: Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.
  remarks: "Save method is equivalent to the Transact-SQL SAVE TRANSACTION statement.  \n  \n The value used in the  parameter can be the same value used in the  parameter of some implementations of the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method.  \n  \n Savepoints offer a mechanism to roll back parts of transactions. You create a savepoint using the Save method, and then later call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to roll back to the savepoint instead of rolling back to the start of the transaction."
  syntax:
    content: public void Save (string savePointName);
    parameters:
    - id: savePointName
      type: System.String
      description: The name of the savepoint.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Data.Common.DbTransaction
  isExternal: false
  name: System.Data.Common.DbTransaction
- uid: System.Data.SqlClient.SqlTransaction.Commit
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
- uid: System.Data.SqlClient.SqlTransaction.Connection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlTransaction.Rollback*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  nameWithType: SqlTransaction.
