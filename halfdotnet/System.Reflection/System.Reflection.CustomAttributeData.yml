### YamlMime:ManagedReference
items:
- uid: System.Reflection.CustomAttributeData
  id: CustomAttributeData
  children:
  - System.Reflection.CustomAttributeData.#ctor
  - System.Reflection.CustomAttributeData.AttributeType
  - System.Reflection.CustomAttributeData.Constructor
  - System.Reflection.CustomAttributeData.ConstructorArguments
  - System.Reflection.CustomAttributeData.Equals(System.Object)
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Reflection.CustomAttributeData.GetHashCode
  - System.Reflection.CustomAttributeData.NamedArguments
  - System.Reflection.CustomAttributeData.ToString
  langs:
  - csharp
  name: CustomAttributeData
  nameWithType: CustomAttributeData
  fullName: System.Reflection.CustomAttributeData
  type: Class
  summary: Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.
  remarks: "Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.  \n  \n The CustomAttributeData class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes. The members of this class can be used to obtain the positional arguments and named arguments of the attribute. Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeTypedArgument> structures that represent the positional arguments, and use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> property to get a list of <xref:System.Reflection.CustomAttributeNamedArgument> structures that represent the named arguments.  \n  \n> [!NOTE]\n>  The <xref:System.Reflection.CustomAttributeNamedArgument> structure only provides information about the attribute property used to get and set the argument value. To obtain the type and value of the argument, use the <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName> property to obtain a <xref:System.Reflection.CustomAttributeTypedArgument> structure.  \n  \n When you have a <xref:System.Reflection.CustomAttributeTypedArgument> structure for an argument, whether named or positional, use the <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A?displayProperty=fullName> property to get the type and the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property to get the value.  \n  \n> [!NOTE]\n>  For an array argument, the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A?displayProperty=fullName> property returns a generic <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Reflection.CustomAttributeTypedArgument> objects. Each <xref:System.Reflection.CustomAttributeTypedArgument> object in the collection represents the corresponding element of the array.  \n  \n CustomAttributeData can be used in the execution context as well as in the reflection-only context. For example, you might want to avoid loading the assembly that contains the code for a custom attribute. Using the CustomAttributeData class is different from using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>:  \n  \n-   The properties and methods of CustomAttributeData only provide you with the values that were specified for the attribute instance, not the semantics of the constructor. For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.  \n  \n-   The properties and methods of CustomAttributeData do not allow you to retrieve the custom attributes inherited from base classes.  \n  \n To create instances of the CustomAttributeData class, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> factory methods."
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class CustomAttributeData
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.#ctor
  id: '#ctor'
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: CustomAttributeData()
  nameWithType: CustomAttributeData.CustomAttributeData()
  fullName: System.Reflection.CustomAttributeData.CustomAttributeData()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeData"> class.
  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.CustomAttributeData> objects.
  syntax:
    content: protected CustomAttributeData ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.AttributeType
  id: AttributeType
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: AttributeType
  nameWithType: CustomAttributeData.AttributeType
  fullName: System.Reflection.CustomAttributeData.AttributeType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the type of the attribute.
  remarks: To be added.
  syntax:
    content: public Type AttributeType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.Constructor
  id: Constructor
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: Constructor
  nameWithType: CustomAttributeData.Constructor
  fullName: System.Reflection.CustomAttributeData.Constructor
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a <see cref="T:System.Reflection.ConstructorInfo"> object that represents the constructor that would have initialized the custom attribute.
  remarks: If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <xref:System.Reflection.CustomAttributeData> object.
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n The Constructor property is used in the `ShowAttributeData` method that displays custom attribute data. In this code example, the <xref:System.Reflection.ConstructorInfo> returned by this property is used to display a text string that describes the constructor, demonstrating that the property returns the constructor that would initialize the attribute.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: public virtual System.Reflection.ConstructorInfo Constructor { get; }
    return:
      type: System.Reflection.ConstructorInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.ConstructorArguments
  id: ConstructorArguments
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: ConstructorArguments
  nameWithType: CustomAttributeData.ConstructorArguments
  fullName: System.Reflection.CustomAttributeData.ConstructorArguments
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the list of positional arguments specified for the attribute instance represented by the <see cref="T:System.Reflection.CustomAttributeData"> object.
  remarks: "This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the reflection-only context.  \n  \n Use the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A> method to get the named arguments specified for the attribute instance."
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n The ConstructorArguments property is used in the `ShowAttributeData` method that displays custom attribute data. In this code example, this property is used to display the list of arguments passed to the constructor that initialized the attribute.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument> ConstructorArguments { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CustomAttributeData.Equals(Object)
  fullName: System.Reflection.CustomAttributeData.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or `null`.
    return:
      type: System.Boolean
      description: '`true` if  is equal to the current instance; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  id: GetCustomAttributes(System.Reflection.Assembly)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: GetCustomAttributes(Assembly)
  nameWithType: CustomAttributeData.GetCustomAttributes(Assembly)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(Assembly)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a list of <see cref="T:System.Reflection.CustomAttributeData"> objects representing data about the attributes that have been applied to the target assembly.
  remarks: This method provides an alternative to the <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to get the custom attributes applied to the assembly. The return value of the method is passed to the `ShowAttributeData` method.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes (System.Reflection.Assembly target);
    parameters:
    - id: target
      type: System.Reflection.Assembly
      description: The assembly whose custom attribute data is to be retrieved.
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: A list of objects that represent data about the attributes that have been applied to the target assembly.
  overload: System.Reflection.CustomAttributeData.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  id: GetCustomAttributes(System.Reflection.MemberInfo)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: GetCustomAttributes(MemberInfo)
  nameWithType: CustomAttributeData.GetCustomAttributes(MemberInfo)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(MemberInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a list of <see cref="T:System.Reflection.CustomAttributeData"> objects representing data about the attributes that have been applied to the target member.
  remarks: This method overload gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>.
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to get the custom attributes that were applied to a type and to a test method (<xref:System.Type> derives from <xref:System.Reflection.MemberInfo>). The return value of <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> is passed to the `ShowAttributeData` method.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes (System.Reflection.MemberInfo target);
    parameters:
    - id: target
      type: System.Reflection.MemberInfo
      description: The member whose attribute data is to be retrieved.
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: A list of objects that represent data about the attributes that have been applied to the target member.
  overload: System.Reflection.CustomAttributeData.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  id: GetCustomAttributes(System.Reflection.Module)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: GetCustomAttributes(Module)
  nameWithType: CustomAttributeData.GetCustomAttributes(Module)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(Module)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a list of <see cref="T:System.Reflection.CustomAttributeData"> objects representing data about the attributes that have been applied to the target module.
  remarks: To be added.
  syntax:
    content: public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes (System.Reflection.Module target);
    parameters:
    - id: target
      type: System.Reflection.Module
      description: The module whose custom attribute data is to be retrieved.
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: A list of objects that represent data about the attributes that have been applied to the target module.
  overload: System.Reflection.CustomAttributeData.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  id: GetCustomAttributes(System.Reflection.ParameterInfo)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: GetCustomAttributes(ParameterInfo)
  nameWithType: CustomAttributeData.GetCustomAttributes(ParameterInfo)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(ParameterInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a list of <see cref="T:System.Reflection.CustomAttributeData"> objects representing data about the attributes that have been applied to the target parameter.
  remarks: This method provides an alternative to the <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A> method that can always be used in the Reflection-only context.
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n The <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> method is used in `Main()` to retrieve the custom attributes applied to a parameter of a test method. The return value of <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> is passed to the `ShowAttributeData` method.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: public static System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributes (System.Reflection.ParameterInfo target);
    parameters:
    - id: target
      type: System.Reflection.ParameterInfo
      description: The parameter whose attribute data is to be retrieved.
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: A list of objects that represent data about the attributes that have been applied to the target parameter.
  overload: System.Reflection.CustomAttributeData.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.GetHashCode
  id: GetHashCode
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CustomAttributeData.GetHashCode()
  fullName: System.Reflection.CustomAttributeData.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Serves as a hash function for a particular type.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A hash code for the current <see cref="T:System.Object">.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.NamedArguments
  id: NamedArguments
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: NamedArguments
  nameWithType: CustomAttributeData.NamedArguments
  fullName: System.Reflection.CustomAttributeData.NamedArguments
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the list of named arguments specified for the attribute instance represented by the <see cref="T:System.Reflection.CustomAttributeData"> object.
  remarks: "This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the Reflection-only context.  \n  \n The list that is returned contains only the named arguments that were specified for the attribute instance.  \n  \n Use the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A> method to get the positional arguments that were specified for the attribute instance."
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n The NamedArguments property is used in the `ShowAttributeData` method that displays custom attribute data. In this code example, this property is used to display the list of named arguments specified for the attribute.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument> NamedArguments { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeData.ToString
  id: ToString
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  name: ToString()
  nameWithType: CustomAttributeData.ToString()
  fullName: System.Reflection.CustomAttributeData.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a string representation of the custom attribute.
  remarks: The string value includes the attribute type, the attribute parameters, and the named parameters.
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n In this example, the ToString method is used in the `ShowAttributeData` method, to identify the attribute whose data is being displayed.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string value that represents the custom attribute.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.CustomAttributeData.#ctor
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: CustomAttributeData()
  nameWithType: CustomAttributeData.CustomAttributeData()
  fullName: System.Reflection.CustomAttributeData.CustomAttributeData()
- uid: System.Reflection.CustomAttributeData.AttributeType
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: AttributeType
  nameWithType: CustomAttributeData.AttributeType
  fullName: System.Reflection.CustomAttributeData.AttributeType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.CustomAttributeData.Constructor
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: Constructor
  nameWithType: CustomAttributeData.Constructor
  fullName: System.Reflection.CustomAttributeData.Constructor
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.CustomAttributeData.ConstructorArguments
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: ConstructorArguments
  nameWithType: CustomAttributeData.ConstructorArguments
  fullName: System.Reflection.CustomAttributeData.ConstructorArguments
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeTypedArgument>
  nameWithType: IList<CustomAttributeTypedArgument>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument>
- uid: System.Reflection.CustomAttributeData.Equals(System.Object)
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: Equals(Object)
  nameWithType: CustomAttributeData.Equals(Object)
  fullName: System.Reflection.CustomAttributeData.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: GetCustomAttributes(Assembly)
  nameWithType: CustomAttributeData.GetCustomAttributes(Assembly)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(Assembly)
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeData>
  nameWithType: IList<CustomAttributeData>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: GetCustomAttributes(MemberInfo)
  nameWithType: CustomAttributeData.GetCustomAttributes(MemberInfo)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(MemberInfo)
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeData>
  nameWithType: IList<CustomAttributeData>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: GetCustomAttributes(Module)
  nameWithType: CustomAttributeData.GetCustomAttributes(Module)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(Module)
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeData>
  nameWithType: IList<CustomAttributeData>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: GetCustomAttributes(ParameterInfo)
  nameWithType: CustomAttributeData.GetCustomAttributes(ParameterInfo)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(ParameterInfo)
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeData>
  nameWithType: IList<CustomAttributeData>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Reflection.CustomAttributeData.GetHashCode
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: GetHashCode()
  nameWithType: CustomAttributeData.GetHashCode()
  fullName: System.Reflection.CustomAttributeData.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.CustomAttributeData.NamedArguments
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: NamedArguments
  nameWithType: CustomAttributeData.NamedArguments
  fullName: System.Reflection.CustomAttributeData.NamedArguments
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeNamedArgument>
  nameWithType: IList<CustomAttributeNamedArgument>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument>
- uid: System.Reflection.CustomAttributeData.ToString
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  name: ToString()
  nameWithType: CustomAttributeData.ToString()
  fullName: System.Reflection.CustomAttributeData.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes*
  parent: System.Reflection.CustomAttributeData
  isExternal: false
  nameWithType: CustomAttributeData.
