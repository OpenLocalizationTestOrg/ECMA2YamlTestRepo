### YamlMime:ManagedReference
items:
- uid: System.Reflection.MethodInfo
  id: MethodInfo
  children:
  - System.Reflection.MethodInfo.#ctor
  - System.Reflection.MethodInfo.CreateDelegate(System.Type)
  - System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
  - System.Reflection.MethodInfo.Equals(System.Object)
  - System.Reflection.MethodInfo.GetBaseDefinition
  - System.Reflection.MethodInfo.GetGenericArguments
  - System.Reflection.MethodInfo.GetGenericMethodDefinition
  - System.Reflection.MethodInfo.GetHashCode
  - System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  - System.Reflection.MethodInfo.MemberType
  - System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  - System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  - System.Reflection.MethodInfo.ReturnParameter
  - System.Reflection.MethodInfo.ReturnType
  - System.Reflection.MethodInfo.ReturnTypeCustomAttributes
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
  type: Class
  summary: Discovers the attributes of a method and provides access to method metadata.
  remarks: "The MethodInfo class represents a method of a type. You can use a MethodInfo object to obtain information about the method that the object represents and to invoke the method. For example:  \n  \n-   You can determine the method's visibility by retrieving the values of the <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, <xref:System.Reflection.MethodBase.IsPrivate%2A>, and <xref:System.Reflection.MethodBase.IsPublic%2A> properties.  \n  \n-   You can discover what attributes are applied to the method by retrieving the value of the <xref:System.Reflection.MethodBase.Attributes%2A> property or calling the <xref:System.Reflection.Assembly.GetCustomAttributes%2A>method.  \n  \n-   You can determine whether the method is a generic method, an open constructed generic method, or a closed constructed generic method, by retrieving the values of the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> and <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> properties.  \n  \n-   You can get information about the method's parameters and return type from the <xref:System.Reflection.MethodBase.GetParameters%2A> method and the <xref:System.Reflection.MethodInfo.ReturnParameter%2A>, <xref:System.Reflection.MethodInfo.ReturnType%2A>, and <xref:System.Reflection.MethodInfo.ReturnTypeCustomAttributes%2A> properties.  \n  \n-   You can execute a method on a class instance by calling the <xref:System.Reflection.MethodBase.Invoke%2A> method.  \n  \n-   You can instantiate a MethodInfo object that represents a constructed generic method from one that represents a generic method definition by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.  \n  \n You can instantiate a MethodInfo instances by calling the <xref:System.Type.GetMethods%2A?displayProperty=fullName> or <xref:System.Type.GetMethod%2A?displayProperty=fullName> method, or by calling the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName> method of a MethodInfo object that represents a generic method definition.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodInfo))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class MethodInfo : System.Reflection.MethodBase, System.Runtime.InteropServices._MethodInfo
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  - System.Reflection.MethodBase
  implements:
  - System.Runtime.InteropServices._MethodInfo
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.ReflectedType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodBase.Attributes
  - System.Reflection.MethodBase.CallingConvention
  - System.Reflection.MethodBase.ContainsGenericParameters
  - System.Reflection.MethodBase.GetCurrentMethod
  - System.Reflection.MethodBase.GetMethodBody
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.MethodBase.GetMethodImplementationFlags
  - System.Reflection.MethodBase.GetParameters
  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  - System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Reflection.MethodBase.IsAbstract
  - System.Reflection.MethodBase.IsAssembly
  - System.Reflection.MethodBase.IsConstructor
  - System.Reflection.MethodBase.IsFamily
  - System.Reflection.MethodBase.IsFamilyAndAssembly
  - System.Reflection.MethodBase.IsFamilyOrAssembly
  - System.Reflection.MethodBase.IsFinal
  - System.Reflection.MethodBase.IsGenericMethod
  - System.Reflection.MethodBase.IsGenericMethodDefinition
  - System.Reflection.MethodBase.IsHideBySig
  - System.Reflection.MethodBase.IsPrivate
  - System.Reflection.MethodBase.IsPublic
  - System.Reflection.MethodBase.IsSecurityCritical
  - System.Reflection.MethodBase.IsSecuritySafeCritical
  - System.Reflection.MethodBase.IsSecurityTransparent
  - System.Reflection.MethodBase.IsSpecialName
  - System.Reflection.MethodBase.IsStatic
  - System.Reflection.MethodBase.IsVirtual
  - System.Reflection.MethodBase.MethodHandle
  - System.Reflection.MethodBase.MethodImplementationFlags
  - System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  - System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.#ctor
  id: '#ctor'
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: MethodInfo()
  nameWithType: MethodInfo.MethodInfo()
  fullName: System.Reflection.MethodInfo.MethodInfo()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.MethodInfo"> class.
  remarks: To be added.
  syntax:
    content: protected MethodInfo ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)
  id: CreateDelegate(System.Type)
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: CreateDelegate(Type)
  nameWithType: MethodInfo.CreateDelegate(Type)
  fullName: System.Reflection.MethodInfo.CreateDelegate(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Creates a delegate of the specified type from this method.
  remarks: To be added.
  syntax:
    content: public virtual Delegate CreateDelegate (Type delegateType);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate to create.
    return:
      type: System.Delegate
      description: The delegate for this method.
  overload: System.Reflection.MethodInfo.CreateDelegate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
  id: CreateDelegate(System.Type,System.Object)
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: CreateDelegate(Type,Object)
  nameWithType: MethodInfo.CreateDelegate(Type,Object)
  fullName: System.Reflection.MethodInfo.CreateDelegate(Type,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Creates a delegate of the specified type with the specified target from this method.
  remarks: To be added.
  syntax:
    content: public virtual Delegate CreateDelegate (Type delegateType, object target);
    parameters:
    - id: delegateType
      type: System.Type
      description: The type of the delegate to create.
    - id: target
      type: System.Object
      description: The object targeted by the delegate.
    return:
      type: System.Delegate
      description: The delegate for this method.
  overload: System.Reflection.MethodInfo.CreateDelegate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: MethodInfo.Equals(Object)
  fullName: System.Reflection.MethodInfo.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or `null`.
    return:
      type: System.Boolean
      description: '`true` if  equals the type and value of this instance; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.GetBaseDefinition
  id: GetBaseDefinition
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: GetBaseDefinition()
  nameWithType: MethodInfo.GetBaseDefinition()
  fullName: System.Reflection.MethodInfo.GetBaseDefinition()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: When overridden in a derived class, returns the <see cref="T:System.Reflection.MethodInfo"> object for the method on the direct or indirect base class in which the method represented by this instance was first declared.
  remarks: "The GetBaseDefinition method returns the first definition of the specified method in the class hierarchy. You can determine the type on which the first definition of the method is found by retrieving the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property on the returned <xref:System.Reflection.MethodInfo> object.  \n  \n The GetBaseDefinition method behaves as follows:  \n  \n-   If the current <xref:System.Reflection.MethodInfo> object represents an interface implementation, the GetBaseDefinition method returns the current <xref:System.Reflection.MethodInfo> object.  \n  \n-   If the current <xref:System.Reflection.MethodInfo> object represents a method that overrides a virtual definition in a base class, the GetBaseDefinition method returns a <xref:System.Reflection.MethodInfo> object that represents the virtual definition.  \n  \n-   If the current <xref:System.Reflection.MethodInfo> object represents a method that is specified with the `new` keyword in C# or the `Shadows` keyword in Visual Basic (as in `newslot`, as described in [Common Type System](../Topic/Common%20Type%20System.md)), the GetBaseDefinition method returns the current <xref:System.Reflection.MethodInfo> object.  \n  \n-   If the current <xref:System.Reflection.MethodInfo> object represents an inherited method (that is, the current method does not provide its own implementation), the GetBaseDefinition method returns a <xref:System.Reflection.MethodInfo> object that represents the lowest method in the class hierarchy. For example, if `Base.ToString` overrides `Object.ToString`, and `Derived.ToString` overrides `Base.ToString`, calling the GetBaseDefinition method on a <xref:System.Reflection.MethodInfo> object that represents `Derived.ToString` returns a <xref:System.Reflection.MethodInfo> object that represents `Object.ToString`.  \n  \n-   If the current <xref:System.Reflection.MethodInfo> object represents a method that is not present in any base class, the GetBaseDefinition method returns the current <xref:System.Reflection.MethodInfo> object.  \n  \n You can determine whether the current method overrides a method in a base class by calling the GetBaseDefinition method. The following example implements an `IsOverride` method that does this.  \n  \n [!CODE [system.reflection.methodinfo.getbasedefinition#2](../CodeSnippet/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition#2)]  \n  \n To call the `GetBaseDefinition` method:  \n  \n1.  Get a <xref:System.Type> object that represents the type (the class or structure) that contains the property. If you are working with an object (an instance of a type), you can call its <xref:System.Object.GetType%2A> method. Otherwise, you can use the C#  operator or the Visual Basic  operator, as the example illustrates.  \n  \n2.  Get a <xref:System.Reflection.MethodInfo> object that represents the method in which you're interested. You can do this by getting an array of all methods from the <xref:System.Type.GetMethods%2A?displayProperty=fullName> method and then iterating the elements in the array, or you can retrieve the <xref:System.Reflection.MethodInfo> object that represents the method directly by calling the <xref:System.Type.GetMethod%28System.String%29?displayProperty=fullName> method and specifying the method name.  \n  \n3.  Call the GetBaseDefinition method to get the value of the <xref:System.Reflection.MethodInfo> object that represents the base method definition."
  example:
  - "The following example demonstrates the behavior of the GetBaseDefinition method.  \n  \n [!CODE [System.Reflection.MethodInfo.GetBaseDefinition#1](../CodeSnippet/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition#1)]"
  syntax:
    content: public abstract System.Reflection.MethodInfo GetBaseDefinition ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> object for the first implementation of this method.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.GetGenericArguments
  id: GetGenericArguments
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: GetGenericArguments()
  nameWithType: MethodInfo.GetGenericArguments()
  fullName: System.Reflection.MethodInfo.GetGenericArguments()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns an array of <see cref="T:System.Type"> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.
  remarks: "The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.  \n  \n-   If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `false`), the array returned by the GetGenericArguments method contains the types that have been assigned to the generic type parameters of the generic method definition.  \n  \n-   If the current method is a generic method definition, the array contains the type parameters.  \n  \n-   If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters. Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart. For a demonstration of this scenario, see the code example for the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."
  example:
  - "The following code example shows how to get the type arguments of a generic method and display them.  \n  \n This example is part of a larger example provided for the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.  \n  \n [!CODE [MethodInfo.Generics#8](../CodeSnippet/VS_Snippets_CLR/MethodInfo.Generics#8)]"
  syntax:
    content: public override Type[] GetGenericArguments ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.GetGenericMethodDefinition
  id: GetGenericMethodDefinition
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: GetGenericMethodDefinition()
  nameWithType: MethodInfo.GetGenericMethodDefinition()
  fullName: System.Reflection.MethodInfo.GetGenericMethodDefinition()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a <see cref="T:System.Reflection.MethodInfo"> object that represents a generic method definition from which the current method can be constructed.
  remarks: "A generic method definition is a template from which methods can be constructed. For example, from the generic method definition `T M<T>(T t)` (expressed in C# syntax; `Function M(Of T)(ByVal tVal As T) As T` in Visual Basic) you can construct and invoke the method `int M<int>(int t)` (`Function M(Of Integer)(ByVal tVal As Integer) As Integer` in Visual Basic). Given a <xref:System.Reflection.MethodInfo> object representing this constructed method, the GetGenericMethodDefinition method returns the generic method definition.  \n  \n If two constructed methods are created from the same generic method definition, the GetGenericMethodDefinition method returns the same <xref:System.Reflection.MethodInfo> object for both methods.  \n  \n If you call GetGenericMethodDefinition on a <xref:System.Reflection.MethodInfo> that already represents a generic method definition, it returns the current <xref:System.Reflection.MethodInfo>.  \n  \n If a generic method definition includes generic parameters of the declaring type, there will be a generic method definition specific to each constructed type. For example, consider the following C#, Visual Basic, and C++ code:  \n  \n```  \nclass B<U,V> {}  \nclass C<T> { public B<T,S> M<S>() {...}}  \n  \nClass B(Of U, V)  \nEnd Class  \nClass C(Of T)  \n    Public Function M(Of S)() As B(Of T, S)  \n        ...  \n    End Function  \nEnd Class   \n  \ngeneric <typename U, typename V> ref class B {};  \ngeneric <typename T> ref class C  \n{  \npublic:  \n    generic <typename S> B<T,S>^ M() {...};  \n};  \n```  \n  \n In the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the generic method `M` returns `B<int, S>`. In the open type `C<T>`, `M` returns `B<T, S>`. In both cases, the <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A> property returns `true` for the <xref:System.Reflection.MethodInfo> that represents `M`, so <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> can be called on both <xref:System.Reflection.MethodInfo> objects. In the case of the constructed type, the result of calling <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> is a <xref:System.Reflection.MethodInfo> that can be invoked. In the case of the open type, the <xref:System.Reflection.MethodInfo> returned by <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> cannot be invoked.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property."
  example:
  - "The following code example shows a class with a generic method and the code required to obtain a <xref:System.Reflection.MethodInfo> for the method, bind the method to type arguments, and get the original generic type definition back from the bound method.  \n  \n This example is part of a larger example provided for the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A> method.  \n  \n [!CODE [MethodInfo.Generics#2](../CodeSnippet/VS_Snippets_CLR/MethodInfo.Generics#2)]  \n[!CODE [MethodInfo.Generics#3](../CodeSnippet/VS_Snippets_CLR/MethodInfo.Generics#3)]  \n[!CODE [MethodInfo.Generics#4](../CodeSnippet/VS_Snippets_CLR/MethodInfo.Generics#4)]"
  syntax:
    content: public virtual System.Reflection.MethodInfo GetGenericMethodDefinition ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> object representing a generic method definition from which the current method can be constructed.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: MethodInfo.GetHashCode()
  fullName: System.Reflection.MethodInfo.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  id: MakeGenericMethod(System.Type[])
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: MakeGenericMethod(Type[])
  nameWithType: MethodInfo.MakeGenericMethod(Type[])
  fullName: System.Reflection.MethodInfo.MakeGenericMethod(Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <see cref="T:System.Reflection.MethodInfo"> object representing the resulting constructed method.
  remarks: "The MakeGenericMethod method allows you to write code that assigns specific types to the type parameters of a generic method definition, thus creating a <xref:System.Reflection.MethodInfo> object that represents a particular constructed method. If the <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property of this <xref:System.Reflection.MethodInfo> object returns `true`, you can use it to invoke the method or to create a delegate to invoke the method.  \n  \n Methods constructed with the MakeGenericMethod method can be open, that is, some of their type arguments can be type parameters of enclosing generic types. You might use such open constructed methods when you generate dynamic assemblies. For example, consider the following C#, Visual Basic, and C++ code.  \n  \n```  \nclass C  \n{  \n    T N<T,U>(T t, U u) {...}  \n    public V M<V>(V v)  \n    {  \n        return N<V,int>(v, 42);  \n    }  \n}  \n  \nClass C  \n    Public Function N(Of T,U)(ByVal ta As T, ByVal ua As U) As T  \n        ...  \n    End Function  \n    Public Function M(Of V)(ByVal va As V ) As V  \n        Return N(Of V, Integer)(va, 42)  \n    End Function  \nEnd Class  \n  \nref class C  \n{  \nprivate:  \n    generic <typename T, typename U> T N(T t, U u) {...}  \npublic:  \n    generic <typename V> V M(V v)  \n    {  \n        return N<V, int>(v, 42);  \n    }  \n};  \n```  \n  \n The method body of `M` contains a call to method `N`, specifying the type parameter of `M` and the type <xref:System.Int32>. The <xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A> property returns `false` for method `N<V,int>`. The <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A> property returns `true`, so method `N<V,int>` cannot be invoked.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property."
  example:
  - "The following code example demonstrates the properties and methods of <xref:System.Reflection.MethodInfo> that support the examination of generic methods. The example does the following:  \n  \n-   Defines a class that has a generic method.  \n  \n-   Creates a <xref:System.Reflection.MethodInfo> that represents the generic method.  \n  \n-   Displays properties of the generic method definition.  \n  \n-   Assigns type arguments to the type parameters of the <xref:System.Reflection.MethodInfo>, and invokes the resulting constructed generic method.  \n  \n-   Displays properties of the constructed generic method.  \n  \n-   Retrieves the generic method definition from the constructed method and compares it to the original definition.  \n  \n [!CODE [MethodInfo.Generics#1](../CodeSnippet/VS_Snippets_CLR/MethodInfo.Generics#1)]"
  syntax:
    content: public virtual System.Reflection.MethodInfo MakeGenericMethod (Type[] typeArguments);
    parameters:
    - id: typeArguments
      type: System.Type[]
      description: An array of types to be substituted for the type parameters of the current generic method definition.
    return:
      type: System.Reflection.MethodInfo
      description: A <see cref="T:System.Reflection.MethodInfo"> object that represents the constructed method formed by substituting the elements of  for the type parameters of the current generic method definition.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.MemberType
  id: MemberType
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: MemberType
  nameWithType: MethodInfo.MemberType
  fullName: System.Reflection.MethodInfo.MemberType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a <see cref="T:System.Reflection.MemberTypes"> value indicating that this member is a method.
  remarks: "This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=fullName>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a method.  \n  \n To get the `MemberType` property, first get the class `Type`. From the `Type`, get the `MethodInfo`. From the `MethodInfo`, get the `MemberType`."
  example:
  - "The following example displays the type of the specified member.  \n  \n [!CODE [Classic MethodInfo.MemberType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodInfo.MemberType Example#1)]"
  syntax:
    content: public override System.Reflection.MemberTypes MemberType { get; }
    return:
      type: System.Reflection.MemberTypes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  id: op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: op_Equality(MethodInfo,MethodInfo)
  nameWithType: MethodInfo.op_Equality(MethodInfo,MethodInfo)
  fullName: System.Reflection.MethodInfo.op_Equality(MethodInfo,MethodInfo)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Indicates whether two <see cref="T:System.Reflection.MethodInfo"> objects are equal.
  remarks: To be added.
  syntax:
    content: public static bool op_Equality (System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
    parameters:
    - id: left
      type: System.Reflection.MethodInfo
      description: The first object to compare.
    - id: right
      type: System.Reflection.MethodInfo
      description: The second object to compare.
    return:
      type: System.Boolean
      description: '`true` if  is equal to ; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  id: op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: op_Inequality(MethodInfo,MethodInfo)
  nameWithType: MethodInfo.op_Inequality(MethodInfo,MethodInfo)
  fullName: System.Reflection.MethodInfo.op_Inequality(MethodInfo,MethodInfo)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Indicates whether two <see cref="T:System.Reflection.MethodInfo"> objects are not equal.
  remarks: To be added.
  syntax:
    content: public static bool op_Inequality (System.Reflection.MethodInfo left, System.Reflection.MethodInfo right);
    parameters:
    - id: left
      type: System.Reflection.MethodInfo
      description: The first object to compare.
    - id: right
      type: System.Reflection.MethodInfo
      description: The second object to compare.
    return:
      type: System.Boolean
      description: '`true` if  is not equal to ; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.ReturnParameter
  id: ReturnParameter
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: ReturnParameter
  nameWithType: MethodInfo.ReturnParameter
  fullName: System.Reflection.MethodInfo.ReturnParameter
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a <see cref="T:System.Reflection.ParameterInfo"> object that contains information about the return type of the method, such as whether the return type has custom modifiers.
  remarks: Compiler designers can use the <xref:System.Reflection.ParameterInfo> object returned by this property to discover whether custom modifiers, such as <xref:Microsoft.VisualC.IsConstModifier>, have been applied to the return type.
  syntax:
    content: public virtual System.Reflection.ParameterInfo ReturnParameter { get; }
    return:
      type: System.Reflection.ParameterInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.ReturnType
  id: ReturnType
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: ReturnType
  nameWithType: MethodInfo.ReturnType
  fullName: System.Reflection.MethodInfo.ReturnType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the return type of this method.
  remarks: To get the return type property, first get the class `Type`. From the `Type`, get the `MethodInfo`. From the `MethodInfo`, get the `ReturnType`.
  example:
  - "The following example displays the return type of the specified method.  \n  \n [!CODE [Classic MethodInfo.ReturnType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodInfo.ReturnType Example#1)]"
  syntax:
    content: public virtual Type ReturnType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.ReturnTypeCustomAttributes
  id: ReturnTypeCustomAttributes
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: ReturnTypeCustomAttributes
  nameWithType: MethodInfo.ReturnTypeCustomAttributes
  fullName: System.Reflection.MethodInfo.ReturnTypeCustomAttributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the custom attributes for the return type.
  remarks: To be added.
  syntax:
    content: public abstract System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _MethodInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array that receives the IDs corresponding to the names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType
  id: System#Runtime#InteropServices#_MethodInfo#GetType
  isEii: true
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodInfo.GetType()
  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetType()
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Provides access to the <xref:System.Object.GetType%2A> method from COM.
  remarks: To be added.
  syntax:
    content: Type _MethodInfo.GetType ();
    parameters: []
    return:
      type: System.Type
      description: A <see cref="T:System.Type"> object representing the <xref:System.Reflection.MethodInfo> type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the type information for an object, which can be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _MethodInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(UInt32)
  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _MethodInfo.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _MethodInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Reflection.MethodBase
  isExternal: false
  name: System.Reflection.MethodBase
- uid: System.Reflection.MethodInfo.#ctor
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: MethodInfo()
  nameWithType: MethodInfo.MethodInfo()
  fullName: System.Reflection.MethodInfo.MethodInfo()
- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: CreateDelegate(Type)
  nameWithType: MethodInfo.CreateDelegate(Type)
  fullName: System.Reflection.MethodInfo.CreateDelegate(Type)
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: CreateDelegate(Type,Object)
  nameWithType: MethodInfo.CreateDelegate(Type,Object)
  fullName: System.Reflection.MethodInfo.CreateDelegate(Type,Object)
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.MethodInfo.Equals(System.Object)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: MethodInfo.Equals(Object)
  fullName: System.Reflection.MethodInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.MethodInfo.GetBaseDefinition
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: GetBaseDefinition()
  nameWithType: MethodInfo.GetBaseDefinition()
  fullName: System.Reflection.MethodInfo.GetBaseDefinition()
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.MethodInfo.GetGenericArguments
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: GetGenericArguments()
  nameWithType: MethodInfo.GetGenericArguments()
  fullName: System.Reflection.MethodInfo.GetGenericArguments()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.MethodInfo.GetGenericMethodDefinition
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: GetGenericMethodDefinition()
  nameWithType: MethodInfo.GetGenericMethodDefinition()
  fullName: System.Reflection.MethodInfo.GetGenericMethodDefinition()
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.MethodInfo.GetHashCode
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: MethodInfo.GetHashCode()
  fullName: System.Reflection.MethodInfo.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: MakeGenericMethod(Type[])
  nameWithType: MethodInfo.MakeGenericMethod(Type[])
  fullName: System.Reflection.MethodInfo.MakeGenericMethod(Type[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.MethodInfo.MemberType
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: MemberType
  nameWithType: MethodInfo.MemberType
  fullName: System.Reflection.MethodInfo.MemberType
- uid: System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: op_Equality(MethodInfo,MethodInfo)
  nameWithType: MethodInfo.op_Equality(MethodInfo,MethodInfo)
  fullName: System.Reflection.MethodInfo.op_Equality(MethodInfo,MethodInfo)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: op_Inequality(MethodInfo,MethodInfo)
  nameWithType: MethodInfo.op_Inequality(MethodInfo,MethodInfo)
  fullName: System.Reflection.MethodInfo.op_Inequality(MethodInfo,MethodInfo)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.MethodInfo.ReturnParameter
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: ReturnParameter
  nameWithType: MethodInfo.ReturnParameter
  fullName: System.Reflection.MethodInfo.ReturnParameter
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Reflection.MethodInfo.ReturnType
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: ReturnType
  nameWithType: MethodInfo.ReturnType
  fullName: System.Reflection.MethodInfo.ReturnType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.MethodInfo.ReturnTypeCustomAttributes
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: ReturnTypeCustomAttributes
  nameWithType: MethodInfo.ReturnTypeCustomAttributes
  fullName: System.Reflection.MethodInfo.ReturnTypeCustomAttributes
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: System.Runtime.InteropServices._MethodInfo.GetType()
  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetType()
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: System.Runtime.InteropServices._MethodInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(UInt32)
  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.MethodInfo
  isExternal: false
  name: System.Runtime.InteropServices._MethodInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: MethodInfo.System.Runtime.InteropServices._MethodInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.MethodInfo.CreateDelegate*
  parent: System.Reflection.MethodInfo
  isExternal: false
  nameWithType: MethodInfo.
