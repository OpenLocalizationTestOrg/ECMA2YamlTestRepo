### YamlMime:ManagedReference
items:
- uid: System.Reflection.AssemblyFlagsAttribute
  id: AssemblyFlagsAttribute
  children:
  - System.Reflection.AssemblyFlagsAttribute.#ctor(System.Int32)
  - System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)
  - System.Reflection.AssemblyFlagsAttribute.#ctor(System.UInt32)
  - System.Reflection.AssemblyFlagsAttribute.AssemblyFlags
  - System.Reflection.AssemblyFlagsAttribute.Flags
  langs:
  - csharp
  name: AssemblyFlagsAttribute
  nameWithType: AssemblyFlagsAttribute
  fullName: System.Reflection.AssemblyFlagsAttribute
  type: Class
  summary: Specifies a bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags"> flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited.
  remarks: "The <xref:System.Reflection.AssemblyNameFlags> enumeration describes the assembly characteristics that can be set using this attribute.  \n  \n To access the flags that have been specified for an assembly, use the <xref:System.Reflection.Assembly.GetName%2A?displayProperty=fullName> property to obtain an <xref:System.Reflection.AssemblyName> object, then use the <xref:System.Reflection.AssemblyName.Flags%2A?displayProperty=fullName> property to obtain an <xref:System.Reflection.AssemblyNameFlags> value.  \n  \n To specify <xref:System.Reflection.AssemblyNameFlags> flags for a dynamic assembly, set the <xref:System.Reflection.AssemblyName.Flags%2A?displayProperty=fullName> property of the <xref:System.Reflection.AssemblyName> object that you pass to the <xref:System.AppDomain.DefineDynamicAssembly%2A?displayProperty=fullName> method."
  example:
  - "The following code example shows how to apply the AssemblyFlagsAttribute to an assembly, and how to read the flags at run time. The example also creates an instance of the attribute, and uses the <xref:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags%2A> property to display the flags. For an example of how to apply the AssemblyFlagsAttribute to a dynamic assembly, see the <xref:System.Reflection.AssemblyName.Flags%2A?displayProperty=fullName> property.  \n  \n [!CODE [AssemblyFlagsAttribute#1](../CodeSnippet/VS_Snippets_CLR/AssemblyFlagsAttribute#1)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class AssemblyFlagsAttribute : Attribute
  inheritance:
  - System.Object
  - System.Attribute
  implements: []
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetHashCode
  - System.Attribute.IsDefaultAttribute
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.Match(System.Object)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Attribute.TypeId
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyFlagsAttribute.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Reflection.AssemblyFlagsAttribute
  langs:
  - csharp
  name: AssemblyFlagsAttribute(Int32)
  nameWithType: AssemblyFlagsAttribute.AssemblyFlagsAttribute(Int32)
  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlagsAttribute(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute"> class with the specified combination of <xref:System.Reflection.AssemblyNameFlags> flags, cast as an integer value.
  remarks: This untyped constructor is now obsolete. Do not use.
  syntax:
    content: public AssemblyFlagsAttribute (int assemblyFlags);
    parameters:
    - id: assemblyFlags
      type: System.Int32
      description: A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags"> flags, cast as an integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)
  id: '#ctor(System.Reflection.AssemblyNameFlags)'
  parent: System.Reflection.AssemblyFlagsAttribute
  langs:
  - csharp
  name: AssemblyFlagsAttribute(AssemblyNameFlags)
  nameWithType: AssemblyFlagsAttribute.AssemblyFlagsAttribute(AssemblyNameFlags)
  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlagsAttribute(AssemblyNameFlags)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute"> class with the specified combination of <xref:System.Reflection.AssemblyNameFlags> flags.
  remarks: ''
  example:
  - "The following code example shows how to apply the <xref:System.Reflection.AssemblyFlagsAttribute> to an assembly, and how to read the flags at run time. The example also creates an instance of the attribute, and uses the <xref:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags%2A> property to display the flags. For an example of how to apply the <xref:System.Reflection.AssemblyFlagsAttribute> to a dynamic assembly, see the <xref:System.Reflection.AssemblyName.Flags%2A?displayProperty=fullName> property.  \n  \n [!CODE [AssemblyFlagsAttribute#1](../CodeSnippet/VS_Snippets_CLR/AssemblyFlagsAttribute#1)]"
  syntax:
    content: public AssemblyFlagsAttribute (System.Reflection.AssemblyNameFlags assemblyFlags);
    parameters:
    - id: assemblyFlags
      type: System.Reflection.AssemblyNameFlags
      description: A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags"> flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyFlagsAttribute.#ctor(System.UInt32)
  id: '#ctor(System.UInt32)'
  parent: System.Reflection.AssemblyFlagsAttribute
  langs:
  - csharp
  name: AssemblyFlagsAttribute(UInt32)
  nameWithType: AssemblyFlagsAttribute.AssemblyFlagsAttribute(UInt32)
  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlagsAttribute(UInt32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.AssemblyFlagsAttribute"> class with the specified combination of <xref:System.Reflection.AssemblyNameFlags> flags, cast as an unsigned integer value.
  remarks: This untyped constructor is now obsolete. Do not use.
  syntax:
    content: public AssemblyFlagsAttribute (uint flags);
    parameters:
    - id: flags
      type: System.UInt32
      description: A bitwise combination of <see cref="T:System.Reflection.AssemblyNameFlags"> flags, cast as an unsigned integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyFlagsAttribute.AssemblyFlags
  id: AssemblyFlags
  parent: System.Reflection.AssemblyFlagsAttribute
  langs:
  - csharp
  name: AssemblyFlags
  nameWithType: AssemblyFlagsAttribute.AssemblyFlags
  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets an integer value representing the combination of <see cref="T:System.Reflection.AssemblyNameFlags"> flags specified when this attribute instance was created.
  remarks: This property returns an integer for backward compatibility. Cast the value to the <xref:System.Reflection.AssemblyNameFlags> type before using it.
  example:
  - "The following code example shows how to apply the <xref:System.Reflection.AssemblyFlagsAttribute> to an assembly, and how to read the flags at run time. The example also creates an instance of the attribute, and uses the AssemblyFlags property to display the flags. For an example of how to apply the <xref:System.Reflection.AssemblyFlagsAttribute> to a dynamic assembly, see the <xref:System.Reflection.AssemblyName.Flags%2A?displayProperty=fullName> property.  \n  \n [!CODE [AssemblyFlagsAttribute#1](../CodeSnippet/VS_Snippets_CLR/AssemblyFlagsAttribute#1)]"
  syntax:
    content: public int AssemblyFlags { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyFlagsAttribute.Flags
  id: Flags
  parent: System.Reflection.AssemblyFlagsAttribute
  langs:
  - csharp
  name: Flags
  nameWithType: AssemblyFlagsAttribute.Flags
  fullName: System.Reflection.AssemblyFlagsAttribute.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets an unsigned integer value representing the combination of <see cref="T:System.Reflection.AssemblyNameFlags"> flags specified when this attribute instance was created.
  remarks: This property returns an integer for backward compatibility. Cast the value to the <xref:System.Reflection.AssemblyNameFlags> type before using it.
  syntax:
    content: public uint Flags { get; }
    return:
      type: System.UInt32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Reflection.AssemblyFlagsAttribute.#ctor(System.Int32)
  parent: System.Reflection.AssemblyFlagsAttribute
  isExternal: false
  name: AssemblyFlagsAttribute(Int32)
  nameWithType: AssemblyFlagsAttribute.AssemblyFlagsAttribute(Int32)
  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlagsAttribute(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)
  parent: System.Reflection.AssemblyFlagsAttribute
  isExternal: false
  name: AssemblyFlagsAttribute(AssemblyNameFlags)
  nameWithType: AssemblyFlagsAttribute.AssemblyFlagsAttribute(AssemblyNameFlags)
  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlagsAttribute(AssemblyNameFlags)
- uid: System.Reflection.AssemblyNameFlags
  parent: System.Reflection
  isExternal: false
  name: AssemblyNameFlags
  nameWithType: AssemblyNameFlags
  fullName: System.Reflection.AssemblyNameFlags
- uid: System.Reflection.AssemblyFlagsAttribute.#ctor(System.UInt32)
  parent: System.Reflection.AssemblyFlagsAttribute
  isExternal: false
  name: AssemblyFlagsAttribute(UInt32)
  nameWithType: AssemblyFlagsAttribute.AssemblyFlagsAttribute(UInt32)
  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlagsAttribute(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.AssemblyFlagsAttribute.AssemblyFlags
  parent: System.Reflection.AssemblyFlagsAttribute
  isExternal: false
  name: AssemblyFlags
  nameWithType: AssemblyFlagsAttribute.AssemblyFlags
  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlags
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.AssemblyFlagsAttribute.Flags
  parent: System.Reflection.AssemblyFlagsAttribute
  isExternal: false
  name: Flags
  nameWithType: AssemblyFlagsAttribute.Flags
  fullName: System.Reflection.AssemblyFlagsAttribute.Flags
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
