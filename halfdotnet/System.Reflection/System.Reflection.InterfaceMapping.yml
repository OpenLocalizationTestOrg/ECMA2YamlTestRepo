### YamlMime:ManagedReference
items:
- uid: System.Reflection.InterfaceMapping
  id: InterfaceMapping
  children:
  - System.Reflection.InterfaceMapping.InterfaceMethods
  - System.Reflection.InterfaceMapping.InterfaceType
  - System.Reflection.InterfaceMapping.TargetMethods
  - System.Reflection.InterfaceMapping.TargetType
  langs:
  - csharp
  name: InterfaceMapping
  nameWithType: InterfaceMapping
  fullName: System.Reflection.InterfaceMapping
  type: Struct
  summary: Retrieves the mapping of an interface into the actual methods on a class that implements that interface.
  remarks: "Use the InterfaceMapping structure when a type implements interface methods that use method names other than those specified by the interface, or when a type implements multiple interfaces which have a method with the same name.  \n  \n To obtain an InterfaceMapping structure, use the <xref:System.Type.GetInterfaceMap%2A?displayProperty=fullName> method."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public struct InterfaceMapping
  inheritance:
  - System.Object
  - System.ValueType
  implements: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.InterfaceMapping.InterfaceMethods
  id: InterfaceMethods
  parent: System.Reflection.InterfaceMapping
  langs:
  - csharp
  name: InterfaceMethods
  nameWithType: InterfaceMapping.InterfaceMethods
  fullName: System.Reflection.InterfaceMapping.InterfaceMethods
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Shows the methods that are defined on the interface.
  remarks: The elements returned in the `InterfaceMethods` array match their counterpart elements returned from the <xref:System.Reflection.InterfaceMapping.TargetMethods> array. That is, the elements are in the same array indexing order.
  syntax:
    content: public System.Reflection.MethodInfo[] InterfaceMethods;
    return:
      type: System.Reflection.MethodInfo[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.InterfaceMapping.InterfaceType
  id: InterfaceType
  parent: System.Reflection.InterfaceMapping
  langs:
  - csharp
  name: InterfaceType
  nameWithType: InterfaceMapping.InterfaceType
  fullName: System.Reflection.InterfaceMapping.InterfaceType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Shows the type that represents the interface.
  remarks: To be added.
  syntax:
    content: public Type InterfaceType;
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.InterfaceMapping.TargetMethods
  id: TargetMethods
  parent: System.Reflection.InterfaceMapping
  langs:
  - csharp
  name: TargetMethods
  nameWithType: InterfaceMapping.TargetMethods
  fullName: System.Reflection.InterfaceMapping.TargetMethods
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Shows the methods that implement the interface.
  remarks: The elements returned in the <xref:System.Reflection.InterfaceMapping.InterfaceMethods> array match their counterpart elements returned from the `TargetMethods` array. That is, the elements are in the same array indexing order.
  syntax:
    content: public System.Reflection.MethodInfo[] TargetMethods;
    return:
      type: System.Reflection.MethodInfo[]
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.InterfaceMapping.TargetType
  id: TargetType
  parent: System.Reflection.InterfaceMapping
  langs:
  - csharp
  name: TargetType
  nameWithType: InterfaceMapping.TargetType
  fullName: System.Reflection.InterfaceMapping.TargetType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Represents the type that was used to create the interface mapping.
  remarks: The value of the TargetType field is the instance of <xref:System.Type> whose <xref:System.Type.GetInterfaceMap%2A> method returned the current <xref:System.Reflection.InterfaceMapping> structure.
  syntax:
    content: public Type TargetType;
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Reflection.InterfaceMapping.InterfaceMethods
  parent: System.Reflection.InterfaceMapping
  isExternal: false
  name: InterfaceMethods
  nameWithType: InterfaceMapping.InterfaceMethods
  fullName: System.Reflection.InterfaceMapping.InterfaceMethods
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
- uid: System.Reflection.InterfaceMapping.InterfaceType
  parent: System.Reflection.InterfaceMapping
  isExternal: false
  name: InterfaceType
  nameWithType: InterfaceMapping.InterfaceType
  fullName: System.Reflection.InterfaceMapping.InterfaceType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.InterfaceMapping.TargetMethods
  parent: System.Reflection.InterfaceMapping
  isExternal: false
  name: TargetMethods
  nameWithType: InterfaceMapping.TargetMethods
  fullName: System.Reflection.InterfaceMapping.TargetMethods
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
- uid: System.Reflection.InterfaceMapping.TargetType
  parent: System.Reflection.InterfaceMapping
  isExternal: false
  name: TargetType
  nameWithType: InterfaceMapping.TargetType
  fullName: System.Reflection.InterfaceMapping.TargetType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
