### YamlMime:ManagedReference
items:
- uid: System.Reflection.ParameterInfo
  id: ParameterInfo
  children:
  - System.Reflection.ParameterInfo.#ctor
  - System.Reflection.ParameterInfo.Attributes
  - System.Reflection.ParameterInfo.AttrsImpl
  - System.Reflection.ParameterInfo.ClassImpl
  - System.Reflection.ParameterInfo.CustomAttributes
  - System.Reflection.ParameterInfo.DefaultValue
  - System.Reflection.ParameterInfo.DefaultValueImpl
  - System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)
  - System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.ParameterInfo.GetCustomAttributesData
  - System.Reflection.ParameterInfo.GetOptionalCustomModifiers
  - System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)
  - System.Reflection.ParameterInfo.GetRequiredCustomModifiers
  - System.Reflection.ParameterInfo.HasDefaultValue
  - System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)
  - System.Reflection.ParameterInfo.IsIn
  - System.Reflection.ParameterInfo.IsLcid
  - System.Reflection.ParameterInfo.IsOptional
  - System.Reflection.ParameterInfo.IsOut
  - System.Reflection.ParameterInfo.IsRetval
  - System.Reflection.ParameterInfo.Member
  - System.Reflection.ParameterInfo.MemberImpl
  - System.Reflection.ParameterInfo.MetadataToken
  - System.Reflection.ParameterInfo.Name
  - System.Reflection.ParameterInfo.NameImpl
  - System.Reflection.ParameterInfo.ParameterType
  - System.Reflection.ParameterInfo.Position
  - System.Reflection.ParameterInfo.PositionImpl
  - System.Reflection.ParameterInfo.RawDefaultValue
  - System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.ParameterInfo.ToString
  langs:
  - csharp
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
  type: Class
  summary: Discovers the attributes of a parameter and provides access to parameter metadata.
  remarks: "Use an instance of `ParameterInfo` to obtain information about the parameter's data type, default value, and so on.  \n  \n <xref:System.Reflection.MethodBase.GetParameters%2A> returns an array of `ParameterInfo` objects representing the parameters of a method, in order."
  example:
  - "This example shows how to use various reflection classes to analyze the metadata contained in an assembly.  \n  \n [!CODE [Reflection#1](../CodeSnippet/VS_Snippets_CLR/Reflection#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ParameterInfo))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ParameterInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._ParameterInfo, System.Runtime.Serialization.IObjectReference
  inheritance:
  - System.Object
  implements:
  - System.Reflection.ICustomAttributeProvider
  - System.Runtime.InteropServices._ParameterInfo
  - System.Runtime.Serialization.IObjectReference
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.#ctor
  id: '#ctor'
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: ParameterInfo()
  nameWithType: ParameterInfo.ParameterInfo()
  fullName: System.Reflection.ParameterInfo.ParameterInfo()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the `ParameterInfo` class.
  remarks: To be added.
  syntax:
    content: protected ParameterInfo ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.Attributes
  id: Attributes
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: Attributes
  nameWithType: ParameterInfo.Attributes
  fullName: System.Reflection.ParameterInfo.Attributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the attributes for this parameter.
  remarks: "This method utilizes the <xref:System.Reflection.ParameterInfo.AttrsImpl> method.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName>."
  example:
  - "The following example defines a method with three parameters. It uses the Attributes property to get the attributes of the second parameter and display them at the console.  \n  \n [!CODE [ParameterInfo_Attributes1#1](../CodeSnippet/VS_Snippets_CLR/ParameterInfo_Attributes1#1)]"
  syntax:
    content: public virtual System.Reflection.ParameterAttributes Attributes { get; }
    return:
      type: System.Reflection.ParameterAttributes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.AttrsImpl
  id: AttrsImpl
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: AttrsImpl
  nameWithType: ParameterInfo.AttrsImpl
  fullName: System.Reflection.ParameterInfo.AttrsImpl
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The attributes of the parameter.
  remarks: "This field is intended only for users who are deriving classes from `ParameterInfo`.  \n  \n Typical access to parameter attributes is through <xref:System.Reflection.ParameterInfo.Attributes%2A>."
  syntax:
    content: protected System.Reflection.ParameterAttributes AttrsImpl;
    return:
      type: System.Reflection.ParameterAttributes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.ClassImpl
  id: ClassImpl
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: ClassImpl
  nameWithType: ParameterInfo.ClassImpl
  fullName: System.Reflection.ParameterInfo.ClassImpl
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The `Type` of the parameter.
  remarks: "This field is intended only for users who are deriving classes from `ParameterInfo`.  \n  \n Typical access to parameter types is through <xref:System.Reflection.ParameterInfo.ParameterType%2A>."
  syntax:
    content: protected Type ClassImpl;
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: CustomAttributes
  nameWithType: ParameterInfo.CustomAttributes
  fullName: System.Reflection.ParameterInfo.CustomAttributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a collection that contains this parameter's custom attributes.
  remarks: To be added.
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> CustomAttributes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.DefaultValue
  id: DefaultValue
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: DefaultValue
  nameWithType: ParameterInfo.DefaultValue
  fullName: System.Reflection.ParameterInfo.DefaultValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating the default value if the parameter has a default value.
  remarks: "This property is used only in the execution context. In the reflection-only context, use the <xref:System.Reflection.ParameterInfo.RawDefaultValue%2A> property instead.  \n  \n The default value is used when an actual value is not specified in the method call. A parameter can have a default value that is `null`. This is distinct from the case where a default value is not defined.  \n  \n This method utilizes the <xref:System.Reflection.ParameterInfo.DefaultValueImpl> method.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName>."
  syntax:
    content: public virtual object DefaultValue { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.DefaultValueImpl
  id: DefaultValueImpl
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: DefaultValueImpl
  nameWithType: ParameterInfo.DefaultValueImpl
  fullName: System.Reflection.ParameterInfo.DefaultValueImpl
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The default value of the parameter.
  remarks: "This field is intended only for users who are deriving classes from `ParameterInfo`.  \n  \n Typical access to the default value of the parameter is through <xref:System.Reflection.ParameterInfo.DefaultValue%2A>."
  syntax:
    content: protected object DefaultValueImpl;
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: ParameterInfo.GetCustomAttributes(Boolean)
  fullName: System.Reflection.ParameterInfo.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets all the custom attributes defined on this parameter.
  remarks: This method ignores the  parameter. To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> method.
  example:
  - "The following example shows how custom attributes that have been applied to the parameters of methods can be retrieved at run time. The example defines a custom attribute named `MyAttribute` that can be applied to parameters. The example then defines a class named `MyClass` with a method named `MyMethod`, and applies `MyAttribute` to a parameter of the method.  \n  \n When the example is run, it uses the GetCustomAttributes method to retrieve the custom attributes that have been applied to all parameters of all methods in `MyClass`, and displays them at the console.  \n  \n [!CODE [ParameterInfo_GetCustomAttributes#1](../CodeSnippet/VS_Snippets_CLR/ParameterInfo_GetCustomAttributes#1)]"
  syntax:
    content: public virtual object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of this type. See Remarks.
    return:
      type: System.Object[]
      description: An array that contains all the custom attributes applied to this parameter.
  overload: System.Reflection.ParameterInfo.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: ParameterInfo.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.ParameterInfo.GetCustomAttributes(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the custom attributes of the specified type or its derived types that are applied to this parameter.
  remarks: This method ignores the  parameter. To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> method.
  syntax:
    content: public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The custom attributes identified by type.
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of this type. See Remarks.
    return:
      type: System.Object[]
      description: An array that contains the custom attributes of the specified type or its derived types.
  overload: System.Reflection.ParameterInfo.GetCustomAttributes*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.GetCustomAttributesData
  id: GetCustomAttributesData
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: GetCustomAttributesData()
  nameWithType: ParameterInfo.GetCustomAttributesData()
  fullName: System.Reflection.ParameterInfo.GetCustomAttributesData()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a list of <see cref="T:System.Reflection.CustomAttributeData"> objects for the current parameter, which can be used in the reflection-only context.
  remarks: Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods such as <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.ParameterInfo.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and example code, see the <xref:System.Reflection.CustomAttributeData> class.
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: A generic list of <see cref="T:System.Reflection.CustomAttributeData"> objects representing data about the attributes that have been applied to the current parameter.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.GetOptionalCustomModifiers
  id: GetOptionalCustomModifiers
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: GetOptionalCustomModifiers()
  nameWithType: ParameterInfo.GetOptionalCustomModifiers()
  fullName: System.Reflection.ParameterInfo.GetOptionalCustomModifiers()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the optional custom modifiers of the parameter.
  remarks: The GetOptionalCustomModifiers and <xref:System.Reflection.ParameterInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace, and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public virtual Type[] GetOptionalCustomModifiers ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects that identify the optional custom modifiers of the current parameter, such as <xref:System.Runtime.CompilerServices.IsConst> or <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)
  id: GetRealObject(System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: GetRealObject(StreamingContext)
  nameWithType: ParameterInfo.GetRealObject(StreamingContext)
  fullName: System.Reflection.ParameterInfo.GetRealObject(StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns the real object that should be deserialized instead of the object that the serialized stream specifies.
  remarks: This method implements the <xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A?displayProperty=fullName> method.
  syntax:
    content: public object GetRealObject (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The serialized stream from which the current object is deserialized.
    return:
      type: System.Object
      description: The actual object that is put into the graph.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.GetRequiredCustomModifiers
  id: GetRequiredCustomModifiers
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: GetRequiredCustomModifiers()
  nameWithType: ParameterInfo.GetRequiredCustomModifiers()
  fullName: System.Reflection.ParameterInfo.GetRequiredCustomModifiers()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the required custom modifiers of the parameter.
  remarks: The <xref:System.Reflection.ParameterInfo.GetOptionalCustomModifiers%2A> and GetRequiredCustomModifiers methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace, and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public virtual Type[] GetRequiredCustomModifiers ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects that identify the required custom modifiers of the current parameter, such as <xref:System.Runtime.CompilerServices.IsConst> or <xref:System.Runtime.CompilerServices.IsImplicitlyDereferenced>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.HasDefaultValue
  id: HasDefaultValue
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: HasDefaultValue
  nameWithType: ParameterInfo.HasDefaultValue
  fullName: System.Reflection.ParameterInfo.HasDefaultValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value that indicates whether this parameter has a default value.
  remarks: To be added.
  syntax:
    content: public virtual bool HasDefaultValue { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: IsDefined(Type,Boolean)
  nameWithType: ParameterInfo.IsDefined(Type,Boolean)
  fullName: System.Reflection.ParameterInfo.IsDefined(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Determines whether the custom attribute of the specified type or its derived types is applied to this parameter.
  remarks: This method ignores the  parameter. To search the inheritance chain for attributes on parameters, use the appropriate overloads of the <xref:System.Attribute.IsDefined%2A?displayProperty=fullName> method.
  example:
  - "The following example defines two custom attributes, `MyAttribute` and `MyDerivedAttribute`. `MyDerivedAttribute` is derived from `MyAttribute`. The example then applies these attributes to the parameters of a method of an example class.  \n  \n When the example is run, it uses the IsDefined method to test all parameters of all methods in the example class. It then displays the parameters that have `MyAttribute` or `MyDerivedAttribute`.  \n  \n [!CODE [ParameterInfo_GetCustomAttribute_IsDefined#1](../CodeSnippet/VS_Snippets_CLR/ParameterInfo_GetCustomAttribute_IsDefined#1)]"
  syntax:
    content: public virtual bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The `Type` object to search for.
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of this type. See Remarks.
    return:
      type: System.Boolean
      description: '`true` if one or more instances of  or its derived types are applied to this parameter; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.IsIn
  id: IsIn
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: IsIn
  nameWithType: ParameterInfo.IsIn
  fullName: System.Reflection.ParameterInfo.IsIn
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether this is an input parameter.
  remarks: "This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.  \n  \n This method utilizes the `In` flag of the `ParameterAttributes` enumerator.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName>."
  example:
  - "The following example shows how to test method parameters for the <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, and <xref:System.Reflection.ParameterAttributes?displayProperty=fullName> attributes.  \n  \n The example contains a `DefineMethod` method that does the following:  \n  \n-   Creates a dynamic assembly containing a `MyType` type.  \n  \n-   Adds a `MyMethod` method to `MyType`. `MyMethod` has three parameters. The first parameter is defined with <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, the second with <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, and the third with <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>.  \n  \n-   Calls <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName> to complete the type.  \n  \n After executing `DefineMethod`, the example searches the assemblies that are currently loaded until it finds the dynamic assembly. It loads `MyType` from the assembly, gets a <xref:System.Reflection.MethodInfo> object for the `MyMethod` method, and examines the parameters. The example uses the IsIn, <xref:System.Reflection.ParameterInfo.IsOut%2A>, and <xref:System.Reflection.ParameterInfo.IsOptional%2A> properties to display information about the parameters.  \n  \n [!CODE [ParameterInfo_IsIn_IsOut_IsOptional#1](../CodeSnippet/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional#1)]"
  syntax:
    content: public bool IsIn { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.IsLcid
  id: IsLcid
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: IsLcid
  nameWithType: ParameterInfo.IsLcid
  fullName: System.Reflection.ParameterInfo.IsLcid
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether this parameter is a locale identifier (lcid).
  remarks: "This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.  \n  \n This method utilizes the `Lcid` flag of the `ParameterAttributes` enumerator.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName>."
  syntax:
    content: public bool IsLcid { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.IsOptional
  id: IsOptional
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: IsOptional
  nameWithType: ParameterInfo.IsOptional
  fullName: System.Reflection.ParameterInfo.IsOptional
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether this parameter is optional.
  remarks: "This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.  \n  \n This method utilizes the `Optional` flag of the `ParameterAttributes` enumerator.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName>."
  example:
  - "The following example shows how to test method parameters for the <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, and <xref:System.Reflection.ParameterAttributes?displayProperty=fullName> attributes.  \n  \n The example contains a `DefineMethod` method that does the following:  \n  \n-   Creates a dynamic assembly containing a `MyType` type.  \n  \n-   Adds a `MyMethod` method to `MyType`. `MyMethod` has three parameters. The first parameter is defined with <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, the second with <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, and the third with <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>.  \n  \n-   Calls <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName> to complete the type.  \n  \n After executing `DefineMethod`, the example searches the assemblies that are currently loaded until it finds the dynamic assembly. It loads `MyType` from the assembly, gets a <xref:System.Reflection.MethodInfo> object for the `MyMethod` method, and examines the parameters. The example uses the <xref:System.Reflection.ParameterInfo.IsIn%2A>, <xref:System.Reflection.ParameterInfo.IsOut%2A>, and IsOptional properties to display information about the parameters.  \n  \n [!CODE [ParameterInfo_IsIn_IsOut_IsOptional#1](../CodeSnippet/VS_Snippets_CLR/ParameterInfo_IsIn_IsOut_IsOptional#1)]"
  syntax:
    content: public bool IsOptional { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.IsOut
  id: IsOut
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: IsOut
  nameWithType: ParameterInfo.IsOut
  fullName: System.Reflection.ParameterInfo.IsOut
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether this is an output parameter.
  remarks: "This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.  \n  \n This method utilizes the `Out` flag of the `ParameterAttributes` enumerator.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName>."
  example:
  - "The following example shows how to test method parameters for the <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, and <xref:System.Reflection.ParameterAttributes?displayProperty=fullName> attributes.  \n  \n The example contains a `DefineMethod` method that does the following:  \n  \n-   Creates a dynamic assembly containing a `MyType` type.  \n  \n-   Adds a `MyMethod` method to `MyType`. `MyMethod` has three parameters. The first parameter is defined with <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, the second with <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>, and the third with <xref:System.Reflection.ParameterAttributes?displayProperty=fullName>.  \n  \n-   Calls <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName> to complete the type.  \n  \n After executing `DefineMethod`, the example searches the assemblies that are currently loaded until it finds the dynamic assembly. It loads `MyType` from the assembly, gets a <xref:System.Reflection.MethodInfo> object for the `MyMethod` method, and examines the parameters. The example uses the <xref:System.Reflection.ParameterInfo.IsIn%2A>, IsOut, and <xref:System.Reflection.ParameterInfo.IsOptional%2A> properties to display information about the parameters.  \n  \n [!CODE [Classic ParameterInfo.IsOut Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic ParameterInfo.IsOut Example#1)]"
  syntax:
    content: public bool IsOut { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.IsRetval
  id: IsRetval
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: IsRetval
  nameWithType: ParameterInfo.IsRetval
  fullName: System.Reflection.ParameterInfo.IsRetval
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether this is a `Retval` parameter.
  remarks: "This method depends on an optional metadata flag. This flag can be inserted by compilers, but the compilers are not obligated to do so.  \n  \n This method utilizes the `Retval` flag of the `ParameterAttributes` enumerator.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName>."
  syntax:
    content: public bool IsRetval { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.Member
  id: Member
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: Member
  nameWithType: ParameterInfo.Member
  fullName: System.Reflection.ParameterInfo.Member
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating the member in which the parameter is implemented.
  remarks: To be added.
  syntax:
    content: public virtual System.Reflection.MemberInfo Member { get; }
    return:
      type: System.Reflection.MemberInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.MemberImpl
  id: MemberImpl
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: MemberImpl
  nameWithType: ParameterInfo.MemberImpl
  fullName: System.Reflection.ParameterInfo.MemberImpl
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The member in which the field is implemented.
  remarks: "This field is intended only for users who are deriving classes from `ParameterInfo`.  \n  \n Typical access to the parameter name is through the <xref:System.Reflection.ParameterInfo.Member%2A>."
  syntax:
    content: protected System.Reflection.MemberInfo MemberImpl;
    return:
      type: System.Reflection.MemberInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.MetadataToken
  id: MetadataToken
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: MetadataToken
  nameWithType: ParameterInfo.MetadataToken
  fullName: System.Reflection.ParameterInfo.MetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value that identifies this parameter in metadata.
  remarks: "To get the module, use the <xref:System.Reflection.MemberInfo.Module%2A> property of the member that defines this parameter.  \n  \n The tokens obtained using this property can be passed to the unmanaged Reflection API. For more information, please see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)."
  syntax:
    content: public virtual int MetadataToken { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.Name
  id: Name
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: Name
  nameWithType: ParameterInfo.Name
  fullName: System.Reflection.ParameterInfo.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the name of the parameter.
  remarks: "This property utilizes the protected <xref:System.Reflection.ParameterInfo.NameImpl> field, and depends on an optional metadata flag that might not be available in all compilers.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call the <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName> method.  \n  \n> [!WARNING]\n>  If this <xref:System.Reflection.ParameterInfo> represents a return value (that is, if it was obtained by using the <xref:System.Reflection.MethodInfo.ReturnParameter%2A?displayProperty=fullName> property), this property will be `null`."
  example:
  - "The following example shows how to get <xref:System.Reflection.ParameterInfo> objects for the parameters of a method, and then use the Name property to obtain the parameter names.  \n  \n [!CODE [Classic ParameterInfo.Name Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic ParameterInfo.Name Example#1)]"
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.NameImpl
  id: NameImpl
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: NameImpl
  nameWithType: ParameterInfo.NameImpl
  fullName: System.Reflection.ParameterInfo.NameImpl
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The name of the parameter.
  remarks: "This field is intended only for users who are deriving classes from `ParameterInfo`.  \n  \n Typical access to the parameter name is through the <xref:System.Reflection.ParameterInfo.Name%2A>."
  syntax:
    content: protected string NameImpl;
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.ParameterType
  id: ParameterType
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: ParameterType
  nameWithType: ParameterInfo.ParameterType
  fullName: System.Reflection.ParameterInfo.ParameterType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the `Type` of this parameter.
  remarks: "This method depends on an optional metadata and might not be available in all compilers.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName>."
  example:
  - "The following example shows how to get <xref:System.Reflection.ParameterInfo> objects for the parameters of a method, and then use the ParameterType property to display the type of each parameter.  \n  \n [!CODE [Classic ParameterInfo.ParameterType Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic ParameterInfo.ParameterType Example#1)]"
  syntax:
    content: public virtual Type ParameterType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.Position
  id: Position
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: Position
  nameWithType: ParameterInfo.Position
  fullName: System.Reflection.ParameterInfo.Position
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the zero-based position of the parameter in the formal parameter list.
  remarks: "Only parameters in the method signature (that is, in the formal parameter list) are considered when calculating the position. For instance methods, the hidden parameter that represents `this` (`Me` in Visual Basic) is not counted.  \n  \n This method utilizes the <xref:System.Reflection.ParameterInfo.PositionImpl> method.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName>."
  syntax:
    content: public virtual int Position { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.PositionImpl
  id: PositionImpl
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: PositionImpl
  nameWithType: ParameterInfo.PositionImpl
  fullName: System.Reflection.ParameterInfo.PositionImpl
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The zero-based position of the parameter in the parameter list.
  remarks: "This field is intended only for users who are deriving classes from `ParameterInfo`.  \n  \n Typical access to the name of the parameter is through <xref:System.Reflection.ParameterInfo.Position%2A>."
  syntax:
    content: protected int PositionImpl;
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.RawDefaultValue
  id: RawDefaultValue
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: RawDefaultValue
  nameWithType: ParameterInfo.RawDefaultValue
  fullName: System.Reflection.ParameterInfo.RawDefaultValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating the default value if the parameter has a default value.
  remarks: "This property can be used in both the execution context and the reflection-only context.  \n  \n The default value is used when an actual value is not specified in the method call. A parameter can have a default value that is `null`. This is distinct from the case where a default value is not defined.  \n  \n To get the <xref:System.Reflection.ParameterInfo> array, first get the method or the constructor and then call the <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=fullName> method."
  syntax:
    content: public virtual object RawDefaultValue { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _ParameterInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array which receives the IDs corresponding to the names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _ParameterInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(UInt32)
  nameWithType: ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _ParameterInfo.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._ParameterInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: ParameterInfo.System.Runtime.InteropServices._ParameterInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _ParameterInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ParameterInfo.ToString
  id: ToString
  parent: System.Reflection.ParameterInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: ParameterInfo.ToString()
  fullName: System.Reflection.ParameterInfo.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the parameter type and name represented as a string.
  remarks: To be added.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string containing the type and the name of the parameter.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.ParameterInfo.#ctor
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: ParameterInfo()
  nameWithType: ParameterInfo.ParameterInfo()
  fullName: System.Reflection.ParameterInfo.ParameterInfo()
- uid: System.Reflection.ParameterInfo.Attributes
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: Attributes
  nameWithType: ParameterInfo.Attributes
  fullName: System.Reflection.ParameterInfo.Attributes
- uid: System.Reflection.ParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: ParameterAttributes
  nameWithType: ParameterAttributes
  fullName: System.Reflection.ParameterAttributes
- uid: System.Reflection.ParameterInfo.AttrsImpl
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: AttrsImpl
  nameWithType: ParameterInfo.AttrsImpl
  fullName: System.Reflection.ParameterInfo.AttrsImpl
- uid: System.Reflection.ParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: ParameterAttributes
  nameWithType: ParameterAttributes
  fullName: System.Reflection.ParameterAttributes
- uid: System.Reflection.ParameterInfo.ClassImpl
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: ClassImpl
  nameWithType: ParameterInfo.ClassImpl
  fullName: System.Reflection.ParameterInfo.ClassImpl
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.ParameterInfo.CustomAttributes
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: CustomAttributes
  nameWithType: ParameterInfo.CustomAttributes
  fullName: System.Reflection.ParameterInfo.CustomAttributes
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<CustomAttributeData>
  nameWithType: IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
- uid: System.Reflection.ParameterInfo.DefaultValue
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: DefaultValue
  nameWithType: ParameterInfo.DefaultValue
  fullName: System.Reflection.ParameterInfo.DefaultValue
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.ParameterInfo.DefaultValueImpl
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: DefaultValueImpl
  nameWithType: ParameterInfo.DefaultValueImpl
  fullName: System.Reflection.ParameterInfo.DefaultValueImpl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: ParameterInfo.GetCustomAttributes(Boolean)
  fullName: System.Reflection.ParameterInfo.GetCustomAttributes(Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: ParameterInfo.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.ParameterInfo.GetCustomAttributes(Type,Boolean)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterInfo.GetCustomAttributesData
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: GetCustomAttributesData()
  nameWithType: ParameterInfo.GetCustomAttributesData()
  fullName: System.Reflection.ParameterInfo.GetCustomAttributesData()
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeData>
  nameWithType: IList<CustomAttributeData>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
- uid: System.Reflection.ParameterInfo.GetOptionalCustomModifiers
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: GetOptionalCustomModifiers()
  nameWithType: ParameterInfo.GetOptionalCustomModifiers()
  fullName: System.Reflection.ParameterInfo.GetOptionalCustomModifiers()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: GetRealObject(StreamingContext)
  nameWithType: ParameterInfo.GetRealObject(StreamingContext)
  fullName: System.Reflection.ParameterInfo.GetRealObject(StreamingContext)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Reflection.ParameterInfo.GetRequiredCustomModifiers
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: GetRequiredCustomModifiers()
  nameWithType: ParameterInfo.GetRequiredCustomModifiers()
  fullName: System.Reflection.ParameterInfo.GetRequiredCustomModifiers()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.ParameterInfo.HasDefaultValue
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: HasDefaultValue
  nameWithType: ParameterInfo.HasDefaultValue
  fullName: System.Reflection.ParameterInfo.HasDefaultValue
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: IsDefined(Type,Boolean)
  nameWithType: ParameterInfo.IsDefined(Type,Boolean)
  fullName: System.Reflection.ParameterInfo.IsDefined(Type,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterInfo.IsIn
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: IsIn
  nameWithType: ParameterInfo.IsIn
  fullName: System.Reflection.ParameterInfo.IsIn
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterInfo.IsLcid
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: IsLcid
  nameWithType: ParameterInfo.IsLcid
  fullName: System.Reflection.ParameterInfo.IsLcid
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterInfo.IsOptional
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: IsOptional
  nameWithType: ParameterInfo.IsOptional
  fullName: System.Reflection.ParameterInfo.IsOptional
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterInfo.IsOut
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: IsOut
  nameWithType: ParameterInfo.IsOut
  fullName: System.Reflection.ParameterInfo.IsOut
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterInfo.IsRetval
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: IsRetval
  nameWithType: ParameterInfo.IsRetval
  fullName: System.Reflection.ParameterInfo.IsRetval
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterInfo.Member
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: Member
  nameWithType: ParameterInfo.Member
  fullName: System.Reflection.ParameterInfo.Member
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.ParameterInfo.MemberImpl
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: MemberImpl
  nameWithType: ParameterInfo.MemberImpl
  fullName: System.Reflection.ParameterInfo.MemberImpl
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.ParameterInfo.MetadataToken
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: MetadataToken
  nameWithType: ParameterInfo.MetadataToken
  fullName: System.Reflection.ParameterInfo.MetadataToken
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterInfo.Name
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: Name
  nameWithType: ParameterInfo.Name
  fullName: System.Reflection.ParameterInfo.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.ParameterInfo.NameImpl
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: NameImpl
  nameWithType: ParameterInfo.NameImpl
  fullName: System.Reflection.ParameterInfo.NameImpl
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.ParameterInfo.ParameterType
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: ParameterType
  nameWithType: ParameterInfo.ParameterType
  fullName: System.Reflection.ParameterInfo.ParameterType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.ParameterInfo.Position
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: Position
  nameWithType: ParameterInfo.Position
  fullName: System.Reflection.ParameterInfo.Position
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterInfo.PositionImpl
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: PositionImpl
  nameWithType: ParameterInfo.PositionImpl
  fullName: System.Reflection.ParameterInfo.PositionImpl
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterInfo.RawDefaultValue
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: RawDefaultValue
  nameWithType: ParameterInfo.RawDefaultValue
  fullName: System.Reflection.ParameterInfo.RawDefaultValue
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(UInt32)
  nameWithType: ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.ParameterInfo.System#Runtime#InteropServices#_ParameterInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: System.Runtime.InteropServices._ParameterInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: ParameterInfo.System.Runtime.InteropServices._ParameterInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.ParameterInfo.ToString
  parent: System.Reflection.ParameterInfo
  isExternal: false
  name: ToString()
  nameWithType: ParameterInfo.ToString()
  fullName: System.Reflection.ParameterInfo.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.ParameterInfo.GetCustomAttributes*
  parent: System.Reflection.ParameterInfo
  isExternal: false
  nameWithType: ParameterInfo.
