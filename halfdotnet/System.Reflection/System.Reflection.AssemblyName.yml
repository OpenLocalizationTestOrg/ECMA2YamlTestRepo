### YamlMime:ManagedReference
items:
- uid: System.Reflection.AssemblyName
  id: AssemblyName
  children:
  - System.Reflection.AssemblyName.#ctor
  - System.Reflection.AssemblyName.#ctor(System.String)
  - System.Reflection.AssemblyName.Clone
  - System.Reflection.AssemblyName.CodeBase
  - System.Reflection.AssemblyName.ContentType
  - System.Reflection.AssemblyName.CultureInfo
  - System.Reflection.AssemblyName.CultureName
  - System.Reflection.AssemblyName.EscapedCodeBase
  - System.Reflection.AssemblyName.Flags
  - System.Reflection.AssemblyName.FullName
  - System.Reflection.AssemblyName.GetAssemblyName(System.String)
  - System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Reflection.AssemblyName.GetPublicKey
  - System.Reflection.AssemblyName.GetPublicKeyToken
  - System.Reflection.AssemblyName.HashAlgorithm
  - System.Reflection.AssemblyName.KeyPair
  - System.Reflection.AssemblyName.Name
  - System.Reflection.AssemblyName.OnDeserialization(System.Object)
  - System.Reflection.AssemblyName.ProcessorArchitecture
  - System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)
  - System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  - System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  - System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.AssemblyName.ToString
  - System.Reflection.AssemblyName.Version
  - System.Reflection.AssemblyName.VersionCompatibility
  langs:
  - csharp
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
  type: Class
  summary: Describes an assembly's unique identity in full.
  remarks: "The AssemblyName object contains information about an assembly, which you can use to bind to that assembly. An assembly's identity consists of the following:  \n  \n-   Simple name.  \n  \n-   Version number.  \n  \n-   Cryptographic key pair.  \n  \n-   Supported culture.  \n  \n The simple name is typically the file name for the manifest file without its extension. The key pair includes a public and private key, used to create strong-name signatures for assemblies.  \n  \n All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.  \n  \n|Delimiter|Meaning|  \n|---------------|-------------|  \n|Backslash (\\\\)|Escape character.|  \n|Comma (,)|Precedes the assembly name.|  \n|Plus sign (+)|Precedes a nested class.|  \n  \n For example, the fully qualified name for a class might look like this:  \n  \n ContainingClass+NestedClass,MyAssembly  \n  \n A \"++\" becomes \"\\\\+\\\\+\", and a \"\\\\\" becomes \"\\\\\\\\\".  \n  \n This qualified name can be persisted and later used to load the <xref:System.Type>. To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name. <xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly. <xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.  \n  \n A fully specified AssemblyName must have the name, culture, public key or public key token, major version, minor version, build number, and revision number parameters. The last four are packaged in the <xref:System.Version> type.  \n  \n To create a simple name, create an AssemblyName object using the default constructor and set the <xref:System.Reflection.AssemblyName.Name%2A>. The other properties are optional.  \n  \n To create a full strong name, create an AssemblyName object using the default constructor and set the <xref:System.Reflection.AssemblyName.Name%2A> and <xref:System.Reflection.AssemblyName.KeyPair%2A>. The other properties are optional. Use <xref:System.Reflection.AssemblyName.SetPublicKey%2A> and <xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A> to set the public key and the strong name. The strong name signing always uses the <xref:System.Security.Cryptography.SHA1> hash algorithm.  \n  \n To ensure that the names are constructed correctly, use the following properties:  \n  \n-   <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName>  \n  \n-   <xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=fullName>  \n  \n-   <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName>  \n  \n You can also get the name by using the `/l` option with the [Gacutil.exe (Global Assembly Cache Tool)](../Topic/Gacutil.exe%20\\(Global%20Assembly%20Cache%20Tool\\).md)  \n  \n For a partially specified strong name, create an AssemblyName object using the default constructor and set the name and public key. An assembly created using such an AssemblyName can be signed later using the Assembly Linker (Al.exe).  \n  \n It is possible to specify a public key and a <xref:System.Reflection.AssemblyName.KeyPair%2A> with inconsistent values. This can be useful in developer scenarios. In this case, the public key retrieved with <xref:System.Reflection.AssemblyName.GetPublicKey%2A> specifies the correct public key, while the <xref:System.Reflection.AssemblyName.KeyPair%2A> specifies the public and private keys used during development. When the runtime detects a mismatch between the <xref:System.Reflection.AssemblyName.KeyPair%2A> and the public key, it looks up in the registry the correct key that matches the public key.  \n  \n The format of the display name of an AssemblyName is a comma-delimited Unicode string that begins with the name, as follows:  \n  \n `Name <,Culture = CultureInfo> <,Version = Major.Minor.Build.Revision> <, StrongName> <,PublicKeyToken> '\\0'`  \n  \n `Name` is the textual name of the assembly. `CultureInfo` is the RFC1766-format-defined culture. `Major`, `Minor`, `Build`, and `Revision` are the major version, minor version, build number, and revision number of the assembly. `StrongName` is the hexadecimal-encoded low-order 64 bits of the hash value of the public key generated using the SHA-1 hashing algorithm and the public key specified by <xref:System.Reflection.AssemblyName.SetPublicKey%2A>. `PublicKeyToken` is the hexadecimal-encoded public key specified by <xref:System.Reflection.AssemblyName.SetPublicKey%2A>.  \n  \n Hexadecimal encoding is defined as the conversion of each byte of a binary object to two hexadecimal characters, progressing from least to most significant byte. Additional display values will be added as deemed necessary.  \n  \n If the full public key is known, then PublicKey may be substituted for StrongName.  \n  \n Also note that except for `Name`, which must come first, the lexical order of parameters is unimportant. However, any parameter (`Version`, `Culture`, `StrongName` or `PublicKey`) not specifically set is considered to be omitted, and the AssemblyName is then considered partial. When specifying partial information, Name parameters must be specified in the order described above.  \n  \n When supplying a display name, the convention `StrongName =null` or `PublicKey= null` indicates that binding and matching against a simply named assembly is required. Additionally, the convention `Culture= \"\"` (double quote representing an empty string) indicates matching against the default culture.  \n  \n The following example shows an AssemblyName for a simply named assembly with default culture.  \n  \n```  \nExampleAssembly, Culture=\"\"  \n```  \n  \n The following example shows a fully specified reference for a strongly named assembly with culture \"en\".  \n  \n```  \nExampleAssembly, Version=1.0.0.0, Culture=en, PublicKeyToken=a5d015c7d5a0b012  \n```"
  example:
  - "This example shows how to use various reflection classes to analyze the metadata contained in an assembly.  \n  \n [!CODE [Reflection#1](../CodeSnippet/VS_Snippets_CLR/Reflection#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._AssemblyName))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class AssemblyName : ICloneable, System.Runtime.InteropServices._AssemblyName, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Runtime.InteropServices._AssemblyName
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.#ctor
  id: '#ctor'
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: AssemblyName()
  nameWithType: AssemblyName.AssemblyName()
  fullName: System.Reflection.AssemblyName.AssemblyName()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName"> class.
  remarks: ''
  example:
  - "The following example creates a dynamic assembly named `MyAssembly.exe` and saves it to your hard disk. After running the example, you can use the [Ildasm.exe (IL Disassembler)](../Topic/Ildasm.exe%20\\(IL%20Disassembler\\).md) to examine the assembly metadata.  \n  \n [!CODE [AssemblyName_Constructor#1](../CodeSnippet/VS_Snippets_CLR/AssemblyName_Constructor#1)]"
  syntax:
    content: public AssemblyName ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: AssemblyName(String)
  nameWithType: AssemblyName.AssemblyName(String)
  fullName: System.Reflection.AssemblyName.AssemblyName(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.AssemblyName"> class with the specified display name.
  remarks: The supplied  is parsed, and the appropriate fields of the new <xref:System.Reflection.AssemblyName> are initialized with values from the display name. This is the recommended way of parsing display names. Writing your own code to parse display names is not recommended.
  example:
  - "The following example creates an instance of <xref:System.Reflection.AssemblyName> from a display name. The individual elements of the display name are output to the console as properties of the <xref:System.Reflection.AssemblyName>object.  \n  \n [!CODE [AssemblyName_Constructor_2#1](../CodeSnippet/VS_Snippets_CLR/AssemblyName_Constructor_2#1)]"
  syntax:
    content: public AssemblyName (string assemblyName);
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of the assembly, as returned by the <xref:System.Reflection.AssemblyName.FullName%2A> property.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.Clone
  id: Clone
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: Clone()
  nameWithType: AssemblyName.Clone()
  fullName: System.Reflection.AssemblyName.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Makes a copy of this <see cref="T:System.Reflection.AssemblyName"> object.
  remarks: A new object is created, identical to the original.
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: An object that is a copy of this <see cref="T:System.Reflection.AssemblyName"> object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.CodeBase
  id: CodeBase
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: CodeBase
  nameWithType: AssemblyName.CodeBase
  fullName: System.Reflection.AssemblyName.CodeBase
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets the location of the assembly as a URL.
  remarks: "When an assembly is loaded, this value can also be obtained using the <xref:System.Reflection.Assembly.CodeBase%2A?displayProperty=fullName> property.  \n  \n If the assembly was loaded as a byte array, this property returns the location of the caller of the [Load(Byte\\[\\])](assetId:///M:System.Reflection.Assembly.Load(System.Byte[])?qualifyHint=False&autoUpgrade=False) method overload, not the location of the loaded assembly.  \n  \n> [!NOTE]\n>  Do not use an <xref:System.Reflection.AssemblyName> with only the CodeBase property set. The CodeBase property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](../Topic/Best%20Practices%20for%20Assembly%20Loading.md)."
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the CodeBase property is used to specify the directory where the assembly is saved.  \n  \n [!CODE [AssemblyName_CodeBase#1](../CodeSnippet/VS_Snippets_CLR/AssemblyName_CodeBase#1)]"
  syntax:
    content: public string CodeBase { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.ContentType
  id: ContentType
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: ContentType
  nameWithType: AssemblyName.ContentType
  fullName: System.Reflection.AssemblyName.ContentType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets a value that indicates what type of content the assembly contains.
  remarks: To be added.
  syntax:
    content: public System.Reflection.AssemblyContentType ContentType { get; set; }
    return:
      type: System.Reflection.AssemblyContentType
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.CultureInfo
  id: CultureInfo
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: CultureInfo
  nameWithType: AssemblyName.CultureInfo
  fullName: System.Reflection.AssemblyName.CultureInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets the culture supported by the assembly.
  remarks: ''
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the CultureInfo property is used to specify the culture, which is part of the assembly's display name.  \n  \n [!CODE [AssemblyName_CodeBase#2](../CodeSnippet/VS_Snippets_CLR/AssemblyName_CodeBase#2)]"
  syntax:
    content: public System.Globalization.CultureInfo CultureInfo { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.CultureName
  id: CultureName
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: CultureName
  nameWithType: AssemblyName.CultureName
  fullName: System.Reflection.AssemblyName.CultureName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets the name of the culture associated with the assembly.
  remarks: To be added.
  syntax:
    content: public string CultureName { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.EscapedCodeBase
  id: EscapedCodeBase
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: EscapedCodeBase
  nameWithType: AssemblyName.EscapedCodeBase
  fullName: System.Reflection.AssemblyName.EscapedCodeBase
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the URI, including escape characters, that represents the codebase.
  remarks: To be added.
  syntax:
    content: public string EscapedCodeBase { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.Flags
  id: Flags
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: Flags
  nameWithType: AssemblyName.Flags
  fullName: System.Reflection.AssemblyName.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets the attributes of the assembly.
  remarks: ''
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the Flags property is used to specify that the assembly has a public key.  \n  \n [!CODE [AssemblyName_KeyPair#4](../CodeSnippet/VS_Snippets_CLR/AssemblyName_KeyPair#4)]"
  syntax:
    content: public System.Reflection.AssemblyNameFlags Flags { get; set; }
    return:
      type: System.Reflection.AssemblyNameFlags
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.FullName
  id: FullName
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: FullName
  nameWithType: AssemblyName.FullName
  fullName: System.Reflection.AssemblyName.FullName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the full name of the assembly, also known as the display name.
  remarks: "The display name typically consists of the simple name, version number, supported culture, and public key. For example:  \n  \n```  \nmylib, Version=1.2.1900.0, Culture=neutral, PublicKeyToken=a14f3033def15840  \n```  \n  \n Writing your own code to parse display names is not recommended. Instead, pass the display name to the <xref:System.Reflection.AssemblyName.%23ctor%2A> constructor, which parses it and populates the appropriate fields of the new <xref:System.Reflection.AssemblyName>.  \n  \n When an assembly is loaded, this value can also be obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property."
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the code example sets the <xref:System.Reflection.AssemblyName.Name%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, <xref:System.Reflection.AssemblyName.CultureInfo%2A>, and <xref:System.Reflection.AssemblyName.KeyPair%2A> properties, which together comprise an assembly's full name, or display name. The FullName property is then used to retrieve the display name.  \n  \n [!CODE [AssemblyName_CodeBase#4](../CodeSnippet/VS_Snippets_CLR/AssemblyName_CodeBase#4)]"
  syntax:
    content: public string FullName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.GetAssemblyName(System.String)
  id: GetAssemblyName(System.String)
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: GetAssemblyName(String)
  nameWithType: AssemblyName.GetAssemblyName(String)
  fullName: System.Reflection.AssemblyName.GetAssemblyName(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the <see cref="T:System.Reflection.AssemblyName"> for a given file.
  remarks: This will only work if the file contains an assembly manifest. This method causes the file to be opened and closed, but the assembly is not added to this domain.
  example:
  - "The following example gets the <xref:System.Reflection.AssemblyName> for an assembly on disk. It will not run unless you replace the string \"MyAssembly.exe\" with the file name of an assembly (including the path, if necessary) on your hard disk. Alternatively, you can compile this example as \"MyAssembly.exe\".  \n  \n [!CODE [AssemblyName_GetAssemblyName#1](../CodeSnippet/VS_Snippets_CLR/AssemblyName_GetAssemblyName#1)]"
  syntax:
    content: public static System.Reflection.AssemblyName GetAssemblyName (string assemblyFile);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The path for the assembly whose <see cref="T:System.Reflection.AssemblyName"> is to be returned.
    return:
      type: System.Reflection.AssemblyName
      description: An object that represents the given assembly file.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: AssemblyName.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Reflection.AssemblyName.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets serialization information with all the data needed to recreate an instance of this `AssemblyName`.
  remarks: To be added.
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object to be populated with serialization information.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination context of the serialization.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.GetPublicKey
  id: GetPublicKey
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: GetPublicKey()
  nameWithType: AssemblyName.GetPublicKey()
  fullName: System.Reflection.AssemblyName.GetPublicKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the public key of the assembly.
  remarks: ''
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the <xref:System.Reflection.AssemblyName.SetPublicKey%2A> method is used to give the assembly a public key. The GetPublicKey method is then used to retrieve the public key, which is displayed to the console.  \n  \n [!CODE [AssemblyName_KeyPair#2](../CodeSnippet/VS_Snippets_CLR/AssemblyName_KeyPair#2)]"
  syntax:
    content: public byte[] GetPublicKey ();
    parameters: []
    return:
      type: System.Byte[]
      description: A byte array that contains the public key of the assembly.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.GetPublicKeyToken
  id: GetPublicKeyToken
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: GetPublicKeyToken()
  nameWithType: AssemblyName.GetPublicKeyToken()
  fullName: System.Reflection.AssemblyName.GetPublicKeyToken()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.
  remarks: ''
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the <xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A> method is used to set the assembly's public key token. The GetPublicKeyToken method is then used to retrieve the public key token, which is displayed to the console.  \n  \n [!CODE [AssemblyName_KeyPair#3](../CodeSnippet/VS_Snippets_CLR/AssemblyName_KeyPair#3)]"
  syntax:
    content: public byte[] GetPublicKeyToken ();
    parameters: []
    return:
      type: System.Byte[]
      description: A byte array that contains the public key token.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.HashAlgorithm
  id: HashAlgorithm
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: AssemblyName.HashAlgorithm
  fullName: System.Reflection.AssemblyName.HashAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets the hash algorithm used by the assembly manifest.
  remarks: >-
    > [!IMPORTANT]

    >  Starting with the [!INCLUDE[net_v40_long](../../add/includes/net-v40-long-md.md)], the HashAlgorithm property of an <xref:System.Reflection.AssemblyName> object that is returned by the <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=fullName> method is <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> enumeration. In previous versions of the .NET Framework, the HashAlgorithm property returned <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> in this situation.
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the HashAlgorithm property is used to set the hash algorithm for the assembly manifest.  \n  \n [!CODE [AssemblyName_CodeBase#3](../CodeSnippet/VS_Snippets_CLR/AssemblyName_CodeBase#3)]"
  syntax:
    content: public System.Configuration.Assemblies.AssemblyHashAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Configuration.Assemblies.AssemblyHashAlgorithm
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.KeyPair
  id: KeyPair
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: KeyPair
  nameWithType: AssemblyName.KeyPair
  fullName: System.Reflection.AssemblyName.KeyPair
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets the public and private cryptographic key pair that is used to create a strong name signature for the assembly.
  remarks: When the runtime loads an assembly, it does not set the KeyPair property. The getter for the property is only useful if the user set the property before using the <xref:System.Reflection.AssemblyName> object to create a dynamic assembly, and subsequently wants to retrieve the key pair.
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the KeyPair property is used to set the assembly's public and private cryptographic keys. .  \n  \n [!CODE [AssemblyName_KeyPair#1](../CodeSnippet/VS_Snippets_CLR/AssemblyName_KeyPair#1)]"
  syntax:
    content: public System.Reflection.StrongNameKeyPair KeyPair { get; set; }
    return:
      type: System.Reflection.StrongNameKeyPair
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.Name
  id: Name
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: Name
  nameWithType: AssemblyName.Name
  fullName: System.Reflection.AssemblyName.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.
  remarks: "The manifest file is the file that contains the assembly manifest.  \n  \n For example, the simple name of a single-file assembly named \"MyAssembly.dll\" is \"MyAssembly\"."
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the Name property is used to set the simple name of the dynamic assembly.  \n  \n [!CODE [AssemblyName_Constructor#2](../CodeSnippet/VS_Snippets_CLR/AssemblyName_Constructor#2)]"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: AssemblyName.OnDeserialization(Object)
  fullName: System.Reflection.AssemblyName.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Implements the <see cref="T:System.Runtime.Serialization.ISerializable"> interface and is called back by the deserialization event when deserialization is complete.
  remarks: To be added.
  syntax:
    content: public void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: The source of the deserialization event.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.ProcessorArchitecture
  id: ProcessorArchitecture
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: ProcessorArchitecture
  nameWithType: AssemblyName.ProcessorArchitecture
  fullName: System.Reflection.AssemblyName.ProcessorArchitecture
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.
  remarks: Beginning with the [!INCLUDE[net_v40_long](../../add/includes/net-v40-long-md.md)], this property always returns <xref:System.Reflection.ProcessorArchitecture?displayProperty=fullName> for reference assemblies.
  syntax:
    content: public System.Reflection.ProcessorArchitecture ProcessorArchitecture { get; set; }
    return:
      type: System.Reflection.ProcessorArchitecture
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)
  id: ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: ReferenceMatchesDefinition(AssemblyName,AssemblyName)
  nameWithType: AssemblyName.ReferenceMatchesDefinition(AssemblyName,AssemblyName)
  fullName: System.Reflection.AssemblyName.ReferenceMatchesDefinition(AssemblyName,AssemblyName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a value indicating whether two assembly names are the same. The comparison is based on the simple assembly names.
  remarks: The comparison depends only on the simple assembly name. It ignores version, culture, and public key token.
  syntax:
    content: public static bool ReferenceMatchesDefinition (System.Reflection.AssemblyName reference, System.Reflection.AssemblyName definition);
    parameters:
    - id: reference
      type: System.Reflection.AssemblyName
      description: The reference assembly name.
    - id: definition
      type: System.Reflection.AssemblyName
      description: The assembly name that is compared to the reference assembly.
    return:
      type: System.Boolean
      description: '`true` if the simple assembly names are the same; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  id: SetPublicKey(System.Byte[])
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: SetPublicKey(Byte[])
  nameWithType: AssemblyName.SetPublicKey(Byte[])
  fullName: System.Reflection.AssemblyName.SetPublicKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Sets the public key identifying the assembly.
  remarks: You must also use the <xref:System.Reflection.AssemblyName.SetPublicKeyToken%2A> method to provide a public key token. Otherwise, a <xref:System.Security.SecurityException> is thrown when the <xref:System.Reflection.AssemblyName.GetPublicKey%2A> method is called.
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the SetPublicKey method is used to give the assembly a public key. The <xref:System.Reflection.AssemblyName.GetPublicKey%2A> method is then used to retrieve the public key, which is displayed to the console.  \n  \n [!CODE [AssemblyName_SetPublicKey#1](../CodeSnippet/VS_Snippets_CLR/AssemblyName_SetPublicKey#1)]"
  syntax:
    content: public void SetPublicKey (byte[] publicKey);
    parameters:
    - id: publicKey
      type: System.Byte[]
      description: A byte array containing the public key of the assembly.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  id: SetPublicKeyToken(System.Byte[])
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: SetPublicKeyToken(Byte[])
  nameWithType: AssemblyName.SetPublicKeyToken(Byte[])
  fullName: System.Reflection.AssemblyName.SetPublicKeyToken(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.
  remarks: When you set the public key by calling the <xref:System.Reflection.AssemblyName.SetPublicKey%2A> method, you must also use the SetPublicKeyToken method to provide a public key token. Otherwise, a <xref:System.Security.SecurityException> is thrown when the <xref:System.Reflection.AssemblyName.GetPublicKey%2A> method is called.
  example:
  - "The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the SetPublicKeyToken method is used to set the assembly's public key token. The <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method is then used to retrieve the public key token, which is displayed to the console.  \n  \n [!CODE [AssemblyName_SetPublicKey#2](../CodeSnippet/VS_Snippets_CLR/AssemblyName_SetPublicKey#2)]"
  syntax:
    content: public void SetPublicKeyToken (byte[] publicKeyToken);
    parameters:
    - id: publicKeyToken
      type: System.Byte[]
      description: A byte array containing the public key token of the assembly.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: AssemblyName.System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _AssemblyName.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array that receives the IDs corresponding to the names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: System.Runtime.InteropServices._AssemblyName.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: AssemblyName.System.Runtime.InteropServices._AssemblyName.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _AssemblyName.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(UInt32)
  nameWithType: AssemblyName.System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _AssemblyName.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: System.Runtime.InteropServices._AssemblyName.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: AssemblyName.System.Runtime.InteropServices._AssemblyName.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _AssemblyName.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DispIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.ToString
  id: ToString
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: ToString()
  nameWithType: AssemblyName.ToString()
  fullName: System.Reflection.AssemblyName.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns the full name of the assembly, also known as the display name.
  remarks: See the description of <xref:System.Reflection.AssemblyName> for the format of the returned string.
  example:
  - "The following example gets an <xref:System.Reflection.AssemblyName> object for a hypothetical `MyAssembly.exe` assembly, and then uses the ToString method to retrieve the full assembly name, or display name.  \n  \n [!CODE [AssemblyName_GetAssemblyName#2](../CodeSnippet/VS_Snippets_CLR/AssemblyName_GetAssemblyName#2)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The full name of the assembly, or the class name if the full name cannot be determined.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.Version
  id: Version
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: Version
  nameWithType: AssemblyName.Version
  fullName: System.Reflection.AssemblyName.Version
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets the major, minor, build, and revision numbers of the assembly.
  remarks: All components of the version must be integers greater than or equal to zero. Metadata restricts the major, minor, build, and revision components for an assembly to a maximum value of <xref:System.UInt16.MaxValue?displayProperty=fullName> - 1. If a component exceeds this value, no error is thrown; however, in a dynamic assembly, that component is zero.
  example:
  - "This section contains two examples. The first example shows how to retrieve the version of the currently executing assembly. The second example shows how to use the Version property to specify the assembly version when you emit a dynamic assembly.  \n  \n **Example 1**  \n  \n The following example retrieves and displays the version numbers of the currently executing assembly and the assembly that contains the <xref:System.String> class.  \n  \n [!CODE [AssemblyName.Version#1](../CodeSnippet/VS_Snippets_CLR/AssemblyName.Version#1)]  \n  \n **Example 2**  \n  \n The following example emits a dynamic assembly and saves it to the current directory. When the assembly is created, the Version property is used to specify version information for the assembly.  \n  \n [!CODE [AssemblyName_Constructor#3](../CodeSnippet/VS_Snippets_CLR/AssemblyName_Constructor#3)]"
  syntax:
    content: public Version Version { get; set; }
    return:
      type: System.Version
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.AssemblyName.VersionCompatibility
  id: VersionCompatibility
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  name: VersionCompatibility
  nameWithType: AssemblyName.VersionCompatibility
  fullName: System.Reflection.AssemblyName.VersionCompatibility
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets or sets the information related to the assembly's compatibility with other assemblies.
  remarks: "VersionCompatibility information indicates, for example, that the assembly cannot execute side-by-side with other versions due to conflicts over a device driver.  \n  \n Currently, VersionCompatibility always returns <xref:System.Configuration.Assemblies.AssemblyVersionCompatibility?displayProperty=fullName>, and is not used by the loader. This property is reserved for a future feature."
  syntax:
    content: public System.Configuration.Assemblies.AssemblyVersionCompatibility VersionCompatibility { get; set; }
    return:
      type: System.Configuration.Assemblies.AssemblyVersionCompatibility
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.AssemblyName.#ctor
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: AssemblyName()
  nameWithType: AssemblyName.AssemblyName()
  fullName: System.Reflection.AssemblyName.AssemblyName()
- uid: System.Reflection.AssemblyName.#ctor(System.String)
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: AssemblyName(String)
  nameWithType: AssemblyName.AssemblyName(String)
  fullName: System.Reflection.AssemblyName.AssemblyName(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyName.Clone
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: Clone()
  nameWithType: AssemblyName.Clone()
  fullName: System.Reflection.AssemblyName.Clone()
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.AssemblyName.CodeBase
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: CodeBase
  nameWithType: AssemblyName.CodeBase
  fullName: System.Reflection.AssemblyName.CodeBase
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyName.ContentType
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: ContentType
  nameWithType: AssemblyName.ContentType
  fullName: System.Reflection.AssemblyName.ContentType
- uid: System.Reflection.AssemblyContentType
  parent: System.Reflection
  isExternal: false
  name: AssemblyContentType
  nameWithType: AssemblyContentType
  fullName: System.Reflection.AssemblyContentType
- uid: System.Reflection.AssemblyName.CultureInfo
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: CultureInfo
  nameWithType: AssemblyName.CultureInfo
  fullName: System.Reflection.AssemblyName.CultureInfo
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.AssemblyName.CultureName
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: CultureName
  nameWithType: AssemblyName.CultureName
  fullName: System.Reflection.AssemblyName.CultureName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyName.EscapedCodeBase
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: EscapedCodeBase
  nameWithType: AssemblyName.EscapedCodeBase
  fullName: System.Reflection.AssemblyName.EscapedCodeBase
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyName.Flags
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: Flags
  nameWithType: AssemblyName.Flags
  fullName: System.Reflection.AssemblyName.Flags
- uid: System.Reflection.AssemblyNameFlags
  parent: System.Reflection
  isExternal: false
  name: AssemblyNameFlags
  nameWithType: AssemblyNameFlags
  fullName: System.Reflection.AssemblyNameFlags
- uid: System.Reflection.AssemblyName.FullName
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: FullName
  nameWithType: AssemblyName.FullName
  fullName: System.Reflection.AssemblyName.FullName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyName.GetAssemblyName(System.String)
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: GetAssemblyName(String)
  nameWithType: AssemblyName.GetAssemblyName(String)
  fullName: System.Reflection.AssemblyName.GetAssemblyName(String)
- uid: System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: AssemblyName.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Reflection.AssemblyName.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Reflection.AssemblyName.GetPublicKey
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: GetPublicKey()
  nameWithType: AssemblyName.GetPublicKey()
  fullName: System.Reflection.AssemblyName.GetPublicKey()
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.AssemblyName.GetPublicKeyToken
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: GetPublicKeyToken()
  nameWithType: AssemblyName.GetPublicKeyToken()
  fullName: System.Reflection.AssemblyName.GetPublicKeyToken()
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.AssemblyName.HashAlgorithm
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: HashAlgorithm
  nameWithType: AssemblyName.HashAlgorithm
  fullName: System.Reflection.AssemblyName.HashAlgorithm
- uid: System.Configuration.Assemblies.AssemblyHashAlgorithm
  parent: System.Configuration.Assemblies
  isExternal: false
  name: AssemblyHashAlgorithm
  nameWithType: AssemblyHashAlgorithm
  fullName: System.Configuration.Assemblies.AssemblyHashAlgorithm
- uid: System.Reflection.AssemblyName.KeyPair
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: KeyPair
  nameWithType: AssemblyName.KeyPair
  fullName: System.Reflection.AssemblyName.KeyPair
- uid: System.Reflection.StrongNameKeyPair
  parent: System.Reflection
  isExternal: false
  name: StrongNameKeyPair
  nameWithType: StrongNameKeyPair
  fullName: System.Reflection.StrongNameKeyPair
- uid: System.Reflection.AssemblyName.Name
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: Name
  nameWithType: AssemblyName.Name
  fullName: System.Reflection.AssemblyName.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyName.OnDeserialization(System.Object)
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: AssemblyName.OnDeserialization(Object)
  fullName: System.Reflection.AssemblyName.OnDeserialization(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.AssemblyName.ProcessorArchitecture
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: ProcessorArchitecture
  nameWithType: AssemblyName.ProcessorArchitecture
  fullName: System.Reflection.AssemblyName.ProcessorArchitecture
- uid: System.Reflection.ProcessorArchitecture
  parent: System.Reflection
  isExternal: false
  name: ProcessorArchitecture
  nameWithType: ProcessorArchitecture
  fullName: System.Reflection.ProcessorArchitecture
- uid: System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: ReferenceMatchesDefinition(AssemblyName,AssemblyName)
  nameWithType: AssemblyName.ReferenceMatchesDefinition(AssemblyName,AssemblyName)
  fullName: System.Reflection.AssemblyName.ReferenceMatchesDefinition(AssemblyName,AssemblyName)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: SetPublicKey(Byte[])
  nameWithType: AssemblyName.SetPublicKey(Byte[])
  fullName: System.Reflection.AssemblyName.SetPublicKey(Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: SetPublicKeyToken(Byte[])
  nameWithType: AssemblyName.SetPublicKeyToken(Byte[])
  fullName: System.Reflection.AssemblyName.SetPublicKeyToken(Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: AssemblyName.System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: System.Runtime.InteropServices._AssemblyName.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: AssemblyName.System.Runtime.InteropServices._AssemblyName.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(UInt32)
  nameWithType: AssemblyName.System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.AssemblyName.System#Runtime#InteropServices#_AssemblyName#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: System.Runtime.InteropServices._AssemblyName.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: AssemblyName.System.Runtime.InteropServices._AssemblyName.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.AssemblyName.ToString
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: ToString()
  nameWithType: AssemblyName.ToString()
  fullName: System.Reflection.AssemblyName.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyName.Version
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: Version
  nameWithType: AssemblyName.Version
  fullName: System.Reflection.AssemblyName.Version
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Reflection.AssemblyName.VersionCompatibility
  parent: System.Reflection.AssemblyName
  isExternal: false
  name: VersionCompatibility
  nameWithType: AssemblyName.VersionCompatibility
  fullName: System.Reflection.AssemblyName.VersionCompatibility
- uid: System.Configuration.Assemblies.AssemblyVersionCompatibility
  parent: System.Configuration.Assemblies
  isExternal: false
  name: AssemblyVersionCompatibility
  nameWithType: AssemblyVersionCompatibility
  fullName: System.Configuration.Assemblies.AssemblyVersionCompatibility
