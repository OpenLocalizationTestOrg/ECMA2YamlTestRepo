### YamlMime:ManagedReference
items:
- uid: System.Reflection.MethodBody
  id: MethodBody
  children:
  - System.Reflection.MethodBody.#ctor
  - System.Reflection.MethodBody.ExceptionHandlingClauses
  - System.Reflection.MethodBody.GetILAsByteArray
  - System.Reflection.MethodBody.InitLocals
  - System.Reflection.MethodBody.LocalSignatureMetadataToken
  - System.Reflection.MethodBody.LocalVariables
  - System.Reflection.MethodBody.MaxStackSize
  langs:
  - csharp
  name: MethodBody
  nameWithType: MethodBody
  fullName: System.Reflection.MethodBody
  type: Class
  summary: Provides access to the metadata and MSIL for the body of a method.
  remarks: "The MethodBody class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.  \n  \n You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.  \n  \n> [!NOTE]\n>  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n To obtain a MethodBody object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a MethodBody object for the test method.  \n  \n The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n [!CODE [MethodBody#1](../CodeSnippet/VS_Snippets_CLR/MethodBody#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class MethodBody
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBody.#ctor
  id: '#ctor'
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.MethodBody"> class.
  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.
  syntax:
    content: protected MethodBody ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  id: ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a list that includes all the exception-handling clauses in the method body.
  remarks: "The list includes all clauses from all try blocks in the method body. Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.  \n  \n> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The ExceptionHandlingClauses property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#4](../CodeSnippet/VS_Snippets_CLR/MethodBody#4)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]  \n[!CODE [MethodBody#7](../CodeSnippet/VS_Snippets_CLR/MethodBody#7)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause> ExceptionHandlingClauses { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBody.GetILAsByteArray
  id: GetILAsByteArray
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns the MSIL for the method body, as an array of bytes.
  remarks: "You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.  \n  \n> [!NOTE]\n>  Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public virtual byte[] GetILAsByteArray ();
    parameters: []
    return:
      type: System.Byte[]
      description: An array of type <see cref="T:System.Byte"> that contains the MSIL for the method body.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBody.InitLocals
  id: InitLocals
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether local variables in the method body are initialized to the default values for their types.
  remarks: "The InitLocals property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.  \n  \n Reference variables are initialized to `null` by default. Numeric variables are initialized to zero."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and InitLocals properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]"
  syntax:
    content: public virtual bool InitLocals { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  id: LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a metadata token for the signature that describes the local variables for the method in metadata.
  remarks: "Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.  \n  \n> [!NOTE]\n>  Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public virtual int LocalSignatureMetadataToken { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBody.LocalVariables
  id: LocalVariables
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the list of local variables declared in the method body.
  remarks: You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The LocalVariables property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#3](../CodeSnippet/VS_Snippets_CLR/MethodBody#3)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]  \n[!CODE [MethodBody#6](../CodeSnippet/VS_Snippets_CLR/MethodBody#6)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.LocalVariableInfo> LocalVariables { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBody.MaxStackSize
  id: MaxStackSize
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the maximum number of items on the operand stack when the method is executing.
  remarks: 'For more information, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.'
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The MaxStackSize and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]"
  syntax:
    content: public virtual int MaxStackSize { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.MethodBody.#ctor
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
- uid: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<ExceptionHandlingClause>
  nameWithType: IList<ExceptionHandlingClause>
  fullName: System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause>
- uid: System.Reflection.MethodBody.GetILAsByteArray
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.MethodBody.InitLocals
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.MethodBody.LocalVariables
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
- uid: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<LocalVariableInfo>
  nameWithType: IList<LocalVariableInfo>
  fullName: System.Collections.Generic.IList<System.Reflection.LocalVariableInfo>
- uid: System.Reflection.MethodBody.MaxStackSize
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
