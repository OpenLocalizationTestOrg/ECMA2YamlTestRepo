### YamlMime:ManagedReference
items:
- uid: System.Reflection.MethodBase
  id: MethodBase
  children:
  - System.Reflection.MethodBase.#ctor
  - System.Reflection.MethodBase.Attributes
  - System.Reflection.MethodBase.CallingConvention
  - System.Reflection.MethodBase.ContainsGenericParameters
  - System.Reflection.MethodBase.Equals(System.Object)
  - System.Reflection.MethodBase.GetCurrentMethod
  - System.Reflection.MethodBase.GetGenericArguments
  - System.Reflection.MethodBase.GetHashCode
  - System.Reflection.MethodBase.GetMethodBody
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.MethodBase.GetMethodImplementationFlags
  - System.Reflection.MethodBase.GetParameters
  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  - System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Reflection.MethodBase.IsAbstract
  - System.Reflection.MethodBase.IsAssembly
  - System.Reflection.MethodBase.IsConstructor
  - System.Reflection.MethodBase.IsFamily
  - System.Reflection.MethodBase.IsFamilyAndAssembly
  - System.Reflection.MethodBase.IsFamilyOrAssembly
  - System.Reflection.MethodBase.IsFinal
  - System.Reflection.MethodBase.IsGenericMethod
  - System.Reflection.MethodBase.IsGenericMethodDefinition
  - System.Reflection.MethodBase.IsHideBySig
  - System.Reflection.MethodBase.IsPrivate
  - System.Reflection.MethodBase.IsPublic
  - System.Reflection.MethodBase.IsSecurityCritical
  - System.Reflection.MethodBase.IsSecuritySafeCritical
  - System.Reflection.MethodBase.IsSecurityTransparent
  - System.Reflection.MethodBase.IsSpecialName
  - System.Reflection.MethodBase.IsStatic
  - System.Reflection.MethodBase.IsVirtual
  - System.Reflection.MethodBase.MethodHandle
  - System.Reflection.MethodBase.MethodImplementationFlags
  - System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  - System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual
  langs:
  - csharp
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
  type: Class
  summary: Provides information about methods and constructors.
  remarks: '`MethodBase` is the base class of <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo>.'
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MethodBase))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class MethodBase : System.Reflection.MemberInfo, System.Runtime.InteropServices._MethodBase
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  implements:
  - System.Runtime.InteropServices._MethodBase
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.MemberType
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.ReflectedType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.#ctor
  id: '#ctor'
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: MethodBase()
  nameWithType: MethodBase.MethodBase()
  fullName: System.Reflection.MethodBase.MethodBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.MethodBase"> class.
  remarks: To be added.
  syntax:
    content: protected MethodBase ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.Attributes
  id: Attributes
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: Attributes
  nameWithType: MethodBase.Attributes
  fullName: System.Reflection.MethodBase.Attributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the attributes associated with this method.
  remarks: "All members have a set of attributes, which are defined in relation to the specific type of member.  \n  \n To get the <xref:System.Reflection.MethodAttributes>, first get the type. From the type, get the method. From the method, get the <xref:System.Reflection.MethodAttributes>."
  example:
  - "The following code example displays the attributes of the user-defined method Mymethod.  \n  \n [!CODE [Classic MethodBase.Attributes Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example#1)]  \n  \n This code produces the following output:  \n  \n Reflection.MethodBase.Attributes Sample  \n  \n Mymethodbase = Void Mymethod(Int32, System.String ByRef, System.String ByRef)  \n  \n PrivateScope  \n  \n FamANDAssem  \n  \n Family  \n  \n Public  \n  \n HideBySig  \n  \n ReuseSlot"
  syntax:
    content: public abstract System.Reflection.MethodAttributes Attributes { get; }
    return:
      type: System.Reflection.MethodAttributes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.CallingConvention
  id: CallingConvention
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: CallingConvention
  nameWithType: MethodBase.CallingConvention
  fullName: System.Reflection.MethodBase.CallingConvention
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating the calling conventions for this method.
  remarks: To be added.
  syntax:
    content: public virtual System.Reflection.CallingConventions CallingConvention { get; }
    return:
      type: System.Reflection.CallingConventions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: ContainsGenericParameters
  nameWithType: MethodBase.ContainsGenericParameters
  fullName: System.Reflection.MethodBase.ContainsGenericParameters
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the generic method contains unassigned generic type parameters.
  remarks: "A generic method can be invoked only if there are no generic type definitions or open constructed types in the type arguments of the method itself or in any enclosing types. Because types can be arbitrarily complex, making this recursive determination is difficult. For convenience, and to reduce the chance of error, the ContainsGenericParameters property provides a standard way to distinguish between closed constructed methods, which can be invoked, and open constructed methods, which cannot. If the ContainsGenericParameters property returns `true`, the method cannot be invoked.  \n  \n The ContainsGenericParameters property searches recursively for type parameters. For example, it returns `true` for any method in an open type `A<T>` (`A(Of T)` in Visual Basic), even though the method itself is not generic. Contrast this with the behavior of the <xref:System.Reflection.MethodBase.IsGenericMethod%2A> property, which returns `false` for such a method.  \n  \n Similarly, the ContainsGenericParameters property parameter returns `true` for any constructor in an open type, even though constructors cannot have type parameters of their own.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."
  syntax:
    content: public virtual bool ContainsGenericParameters { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: MethodBase.Equals(Object)
  fullName: System.Reflection.MethodBase.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or `null`.
    return:
      type: System.Boolean
      description: '`true` if  equals the type and value of this instance; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.GetCurrentMethod
  id: GetCurrentMethod
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: GetCurrentMethod()
  nameWithType: MethodBase.GetCurrentMethod()
  fullName: System.Reflection.MethodBase.GetCurrentMethod()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a `MethodBase` object representing the currently executing method.
  remarks: "If the currently executing method is defined on a generic type, the <xref:System.Reflection.MethodInfo> that is returned by GetCurrentMethod is obtained from the generic type definition (that is, <xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName> returns `true`). Therefore, it does not reflect the type arguments that were used when the method was called. For example, if a method `M()` is defined on a generic type `C<T>` (`C(Of T)` in Visual Basic), and GetCurrentMethod is called from `C<string>.M()`, then GetCurrentMethod returns `C<T>.M()` (`C(Of T).M()` in Visual Basic).  \n  \n If the currently executing method is a generic method, GetCurrentMethod returns the generic method definition. If the generic method is defined on a generic type, the <xref:System.Reflection.MethodInfo> is obtained from the generic type definition."
  example:
  - "The following example defines two types. The first is a non-generic class, `TestClass`, includes a constructor, a method named `GetValue`, and a read-write property named `GetValue`. The second is a generic class named `TestClass<T>` that includes a constructor, a `GetValue` method, and a generic method, `ConvertValue<Y>`. Each constructor, method, and property accessor includes a call to the GetCurrentMethod method.  \n  \n [!CODE [System.Reflection.MethodBase.GetCurrentMethod#1](../CodeSnippet/VS_Snippets_CLR_System/System.Reflection.MethodBase.GetCurrentMethod#1)]"
  syntax:
    content: public static System.Reflection.MethodBase GetCurrentMethod ();
    parameters: []
    return:
      type: System.Reflection.MethodBase
      description: "GetCurrentMethod is a static method that is called from within an executing method and that returns information about that method.  \n  \n A `MethodBase` object representing the currently executing method."
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.GetGenericArguments
  id: GetGenericArguments
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: GetGenericArguments()
  nameWithType: MethodBase.GetGenericArguments()
  fullName: System.Reflection.MethodBase.GetGenericArguments()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns an array of <see cref="T:System.Type"> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.
  remarks: "The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.  \n  \n-   If the current method is a closed constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `false`), the array returned by the GetGenericArguments method contains the types that have been assigned to the generic type parameters of the generic method definition.  \n  \n-   If the current method is a generic method definition, the array contains the type parameters.  \n  \n-   If the current method is an open constructed method (that is, the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property returns `true`) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters. Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart. For a demonstration of this scenario, see the code example provided for the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property.  \n  \n Generic constructors are not supported in the .NET Framework version 2.0. This property throws <xref:System.NotSupportedException> if not overridden in a derived class, so an exception is thrown if the current instance is of type <xref:System.Reflection.ConstructorInfo>.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."
  syntax:
    content: public virtual Type[] GetGenericArguments ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of <see cref="T:System.Type"> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.GetHashCode
  id: GetHashCode
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: MethodBase.GetHashCode()
  fullName: System.Reflection.MethodBase.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.GetMethodBody
  id: GetMethodBody
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: GetMethodBody()
  nameWithType: MethodBase.GetMethodBody()
  fullName: System.Reflection.MethodBase.GetMethodBody()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: When overridden in a derived class, gets a <see cref="T:System.Reflection.MethodBody"> object that provides access to the MSIL stream, local variables, and exceptions for the current method.
  remarks: You do not have to override the GetMethodBody in order to use it. You can call the GetMethodBody method on <xref:System.Reflection.MethodInfo> and <xref:System.Reflection.ConstructorInfo> objects, because the method is overridden in the runtime versions of these classes. For example, the runtime version of the <xref:System.Reflection.MethodInfo> class derives from the <xref:System.Reflection.MethodInfo> class, which in turn derives from the <xref:System.Reflection.MethodBase> class.
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The GetMethodBody method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.  \n  \n The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and display their types and index order. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n [!CODE [MethodBody#1](../CodeSnippet/VS_Snippets_CLR/MethodBody#1)]"
  syntax:
    content: public virtual System.Reflection.MethodBody GetMethodBody ();
    parameters: []
    return:
      type: System.Reflection.MethodBody
      description: A <see cref="T:System.Reflection.MethodBody"> object that provides access to the MSIL stream, local variables, and exceptions for the current method.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  id: GetMethodFromHandle(System.RuntimeMethodHandle)
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: GetMethodFromHandle(RuntimeMethodHandle)
  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets method information by using the method's internal metadata representation (handle).
  remarks: Handles are valid only in the application domain in which they were obtained.
  syntax:
    content: public static System.Reflection.MethodBase GetMethodFromHandle (RuntimeMethodHandle handle);
    parameters:
    - id: handle
      type: System.RuntimeMethodHandle
      description: The method's handle.
    return:
      type: System.Reflection.MethodBase
      description: A `MethodBase` containing information about the method.
  overload: System.Reflection.MethodBase.GetMethodFromHandle*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: GetMethodFromHandle(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(RuntimeMethodHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a <see cref="T:System.Reflection.MethodBase"> object for the constructor or method represented by the specified handle, for the specified generic type.
  remarks: "Handles are valid only in the application domain in which they were obtained.  \n  \n A <xref:System.RuntimeMethodHandle> structure for a constructor or method of a generic type can represent different <xref:System.Reflection.MethodBase> objects, depending on the types specified for the type parameters of the generic type. For example, if `class G<T>` (`class G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) has a method that returns type `T`, the <xref:System.Reflection.MethodBase> object for that method in a constructed class such as `G<int>` is different from the <xref:System.Reflection.MethodBase> object for that method in the generic type definition."
  syntax:
    content: public static System.Reflection.MethodBase GetMethodFromHandle (RuntimeMethodHandle handle, RuntimeTypeHandle declaringType);
    parameters:
    - id: handle
      type: System.RuntimeMethodHandle
      description: A handle to the internal metadata representation of a constructor or method.
    - id: declaringType
      type: System.RuntimeTypeHandle
      description: A handle to the generic type that defines the constructor or method.
    return:
      type: System.Reflection.MethodBase
      description: A <see cref="T:System.Reflection.MethodBase"> object representing the method or constructor specified by , in the generic type specified by .
  overload: System.Reflection.MethodBase.GetMethodFromHandle*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.GetMethodImplementationFlags
  id: GetMethodImplementationFlags
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: GetMethodImplementationFlags()
  nameWithType: MethodBase.GetMethodImplementationFlags()
  fullName: System.Reflection.MethodBase.GetMethodImplementationFlags()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: When overridden in a derived class, returns the <see cref="T:System.Reflection.MethodImplAttributes"> flags.
  remarks: ''
  example:
  - "The following example defines a constructor in a dynamic assembly and then uses the GetMethodImplementationFlags method to display the method implementation flags that are set by default.  \n  \n [!CODE [ConstructorBuilder_GetModule_4#3](../CodeSnippet/VS_Snippets_CLR/ConstructorBuilder_GetModule_4#3)]"
  syntax:
    content: public abstract System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();
    parameters: []
    return:
      type: System.Reflection.MethodImplAttributes
      description: The `MethodImplAttributes` flags.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.GetParameters
  id: GetParameters
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: GetParameters()
  nameWithType: MethodBase.GetParameters()
  fullName: System.Reflection.MethodBase.GetParameters()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: When overridden in a derived class, gets the parameters of the specified method or constructor.
  remarks: ''
  example:
  - "The following example uses the GetParameters method to retrieve the parameters of the `Invoke` method of a delegate.  \n  \n The example defines a delegate named `MyDelegate` and an event named `ev` of type `MyDelegate`. The code in the `Main` method discovers the event signature by getting the delegate type of the event, getting the `Invoke` method of the delegate type, and then retrieving and displaying the parameters.  \n  \n [!CODE [eventarg#1](../CodeSnippet/VS_Snippets_CLR/EventArg#1)]"
  syntax:
    content: public abstract System.Reflection.ParameterInfo[] GetParameters ();
    parameters: []
    return:
      type: System.Reflection.ParameterInfo[]
      description: An array of type `ParameterInfo` containing information that matches the signature of the method (or constructor) reflected by this `MethodBase` instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  id: Invoke(System.Object,System.Object[])
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: Invoke(Object,Object[])
  nameWithType: MethodBase.Invoke(Object,Object[])
  fullName: System.Reflection.MethodBase.Invoke(Object,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Invokes the method or constructor represented by the current instance, using the specified parameters.
  remarks: "This is a convenience method that calls the [Invoke(Object, BindingFlags, Binder, Object\\[\\], CultureInfo)](assetId:///M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)?qualifyHint=False&autoUpgrade=False) method overload, passing <xref:System.Reflection.BindingFlags> for  and `null` for  and .  \n  \n If the invoked method throws an exception, the <xref:System.Exception.GetBaseException%2A?displayProperty=fullName> method returns the exception.  \n  \n To invoke a static method using its <xref:System.Reflection.MethodInfo> object, pass `null` for .  \n  \n> [!NOTE]\n>  If this method overload is used to invoke an instance constructor, the object supplied for  is reinitialized; that is, all instance initializers are executed. The return value is `null`. If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed. The return value is `null`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later.  \n  \n If a parameter of the current method is a value type, and the corresponding argument in  is `null`, the runtime passes a zero-initialized instance of the value type."
  example:
  - "The following code example demonstrates dynamic method lookup using reflection. Note that you cannot use the <xref:System.Reflection.MethodInfo> object from the base class to invoke the overridden method in the derived class, because late binding cannot resolve overrides.  \n  \n [!CODE [Classic MethodBase.Invoke1 Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.Invoke1 Example#1)]"
  syntax:
    content: public object Invoke (object obj, object[] parameters);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be `null` or an instance of the class that defines the constructor.
    - id: parameters
      type: System.Object[]
      description: "An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters,  should be `null`.  \n  \n If the method or constructor represented by this instance takes a `ref` parameter (`ByRef` in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is `null`. For value-type elements, this value is 0, 0.0, or `false`, depending on the specific element type."
    return:
      type: System.Object
      description: "An object containing the return value of the invoked method, or `null` in the case of a constructor.  \n  \n> [!WARNING]\n>  Elements of the  array that represent parameters declared with the `ref` or `out` keyword may also be modified."
  overload: System.Reflection.MethodBase.Invoke*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  id: Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  nameWithType: MethodBase.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  fullName: System.Reflection.MethodBase.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: When overridden in a derived class, invokes the reflected method or constructor with the given parameters.
  remarks: "Dynamically invokes the method reflected by this instance on , and passes along the specified parameters. If the method is static, the  parameter is ignored. For non-static methods,  should be an instance of a class that inherits or declares the method and must be the same type as this class. If the method has no parameters, the value of  should be `null`. Otherwise, the number, type, and order of elements in  should be identical to the number, type, and order of parameters for the method reflected by this instance.  \n  \n You may not omit optional parameters in calls to `Invoke`. To invoke a method omitting optional parameters, you should call `Type.InvokeMember` instead.  \n  \n> [!NOTE]\n>  If this method overload is used to invoke an instance constructor, the object supplied for  is reinitialized; that is, all instance initializers are executed. The return value is `null`. If a class constructor is invoked, the class is reinitialized; that is, all class initializers are executed. The return value is `null`.  \n  \n For pass-by-value primitive parameters, normal widening is performed (Int16 -> Int32, for example). For pass-by-value reference parameters, normal reference widening is allowed (derived class to base class, and base class to interface type). However, for pass-by-reference primitive parameters, the types must match exactly. For pass-by-reference reference parameters, the normal widening still applies.  \n  \n For example, if the method reflected by this instance is declared as `public boolean Compare(String a, String b)`, then  should be an array of `Objects` with length 2 such that `parameters[0] = new Object(\"SomeString1\") and parameters[1] = new Object(\"SomeString2\")`.  \n  \n If a parameter of the current method is a value type, and the corresponding argument in  is `null`, the runtime passes a zero-initialized instance of the value type.  \n  \n Reflection uses dynamic method lookup when invoking virtual methods. For example, suppose that class B inherits from class A and both implement a virtual method named M. Now suppose that you have a `MethodInfo` object that represents M on class A. If you use the `Invoke` method to invoke M on an object of type B, then reflection will use the implementation given by class B. Even if the object of type B is cast to A, the implementation given by class B is used (see code sample below).  \n  \n On the other hand, if the method is non-virtual, then reflection will use the implementation given by the type from which the `MethodInfo` was obtained, regardless of the type of the object passed as the target.  \n  \n Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked via reflection whenever the code is fully trusted.  \n  \n If the invoked method throws an exception, `TargetInvocationException.GetException` returns the exception. This implementation throws a `NotSupportedException`.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](../../add/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](../../add/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example demonstrates all members of the <xref:System.Reflection.Binder?displayProperty=fullName> class using an overload of <xref:System.Type.InvokeMember%2A?displayProperty=fullName>. The private method `CanConvertFrom` finds compatible types for a given type. For another example of invoking members in a custom binding scenario, see [Dynamically Loading and Using Types](../Topic/Dynamically%20Loading%20and%20Using%20Types.md).  \n  \n [!CODE [Binder_1#1](../CodeSnippet/VS_Snippets_CLR/Binder_1#1)]"
  syntax:
    content: public abstract object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);
    parameters:
    - id: obj
      type: System.Object
      description: The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be `null` or an instance of the class that defines the constructor.
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: A bitmask that is a combination of 0 or more bit flags from <see cref="T:System.Reflection.BindingFlags">. If  is `null`, this parameter is assigned the value <see cref="T:System.Reflection.BindingFlags">; thus, whatever you pass in is ignored.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If  is `null`, the default binder is used.
    - id: parameters
      type: System.Object[]
      description: "An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be `null`.  \n  \n If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is `null`. For value-type elements, this value is 0, 0.0, or `false`, depending on the specific element type."
    - id: culture
      type: System.Globalization.CultureInfo
      description: An instance of `CultureInfo` used to govern the coercion of types. If this is `null`, the `CultureInfo` for the current thread is used. (This is necessary to convert a `String` that represents 1000 to a `Double` value, for example, since 1000 is represented differently by different cultures.)
    return:
      type: System.Object
      description: "An `Object` containing the return value of the invoked method, or `null` in the case of a constructor, or `null` if the method's return type is `void`. Before calling the method or constructor, `Invoke` checks to see if the user has access permission and verifies that the parameters are valid.  \n  \n> [!WARNING]\n>  Elements of the  array that represent parameters declared with the `ref` or `out` keyword may also be modified."
  overload: System.Reflection.MethodBase.Invoke*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsAbstract
  id: IsAbstract
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsAbstract
  nameWithType: MethodBase.IsAbstract
  fullName: System.Reflection.MethodBase.IsAbstract
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the method is abstract.
  remarks: "An abstract member is declared on a base class and has no implementation supplied.  \n  \n To get the <xref:System.Reflection.MethodBase>, first get the type. From the type, get the method. From the method, get the `MethodBase`. If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed. To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`."
  example:
  - "The following example determines whether specified the method is abstract and displays the result.  \n  \n [!CODE [Classic MethodBase.IsAbstract Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.IsAbstract Example#1)]"
  syntax:
    content: public bool IsAbstract { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsAssembly
  id: IsAssembly
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsAssembly
  nameWithType: MethodBase.IsAssembly
  fullName: System.Reflection.MethodBase.IsAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the potential visibility of this method or constructor is described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName>; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.
  remarks: "The actual visibility of a method is limited by the visibility of its type. The IsAssembly property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.  \n  \n The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the only visibility modifier is `internal` (`Friend` in Visual Basic). This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods."
  example:
  - "The following code example defines methods with varying levels of visibility, and displays the values of their IsAssembly, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.  \n  \n> [!NOTE]\n>  The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \n  \n [!CODE [Classic MethodBase.IsAssembly Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example#1)]"
  syntax:
    content: public bool IsAssembly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsConstructor
  id: IsConstructor
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsConstructor
  nameWithType: MethodBase.IsConstructor
  fullName: System.Reflection.MethodBase.IsConstructor
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the method is a constructor.
  remarks: >-
    > [!NOTE]

    >  The IsConstructor property returns `false` for a <xref:System.Reflection.Emit.ConstructorBuilder> object in a dynamic type, unless the <xref:System.Reflection.MethodAttributes?displayProperty=fullName> flag was included in the  parameter when the constructor was defined. Omitting the <xref:System.Reflection.MethodAttributes> flag does not affect the correctness of the emitted constructor.
  syntax:
    content: public bool IsConstructor { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsFamily
  id: IsFamily
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsFamily
  nameWithType: MethodBase.IsFamily
  fullName: System.Reflection.MethodBase.IsFamily
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the visibility of this method or constructor is described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName>; that is, the method or constructor is visible only within its class and derived classes.
  remarks: The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the only visibility modifier is `protected`. This property is `false` for methods that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A> property to identify such methods.
  example:
  - "The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, IsFamily, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.  \n  \n> [!NOTE]\n>  The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \n  \n [!CODE [Classic MethodBase.IsAssembly Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example#1)]"
  syntax:
    content: public bool IsFamily { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsFamilyAndAssembly
  id: IsFamilyAndAssembly
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsFamilyAndAssembly
  nameWithType: MethodBase.IsFamilyAndAssembly
  fullName: System.Reflection.MethodBase.IsFamilyAndAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the visibility of this method or constructor is described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName>; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.
  remarks: The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the visibility modifier is `protected private` in C++. Methods with this visibility cannot be defined in Visual Basic or C#.
  example:
  - "The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, <xref:System.Reflection.MethodBase.IsFamilyOrAssembly%2A>, and IsFamilyAndAssembly properties.  \n  \n> [!NOTE]\n>  The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \n  \n [!CODE [Classic MethodBase.IsAssembly Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example#1)]"
  syntax:
    content: public bool IsFamilyAndAssembly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsFamilyOrAssembly
  id: IsFamilyOrAssembly
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsFamilyOrAssembly
  nameWithType: MethodBase.IsFamilyOrAssembly
  fullName: System.Reflection.MethodBase.IsFamilyOrAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the potential visibility of this method or constructor is described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName>; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.
  remarks: "If a type member has <xref:System.Reflection.MethodAttributes?displayProperty=fullName>visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.  \n  \n The actual visibility of a method is limited by the visibility of its type. The IsFamilyOrAssembly property might be `true` for a method, but if it is a method of a private nested type then the method is not visible outside the containing type.  \n  \n The visibility of a method or constructor is exactly described by <xref:System.Reflection.MethodAttributes?displayProperty=fullName> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++)."
  example:
  - "The following code example defines methods with varying levels of visibility, and displays the values of their <xref:System.Reflection.MethodBase.IsAssembly%2A>, <xref:System.Reflection.MethodBase.IsFamily%2A>, IsFamilyOrAssembly, and <xref:System.Reflection.MethodBase.IsFamilyAndAssembly%2A> properties.  \n  \n> [!NOTE]\n>  The Visual Basic and C# languages cannot define methods with <xref:System.Reflection.MethodAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \n  \n [!CODE [Classic MethodBase.IsAssembly Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.IsAssembly Example#1)]"
  syntax:
    content: public bool IsFamilyOrAssembly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsFinal
  id: IsFinal
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsFinal
  nameWithType: MethodBase.IsFinal
  fullName: System.Reflection.MethodBase.IsFinal
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether this method is `final`.
  remarks: "To determine if a method is overridable, it is not sufficient to check that <xref:System.Reflection.MethodBase.IsVirtual%2A> is `true`. For a method to be overridable, `IsVirtual` must be `true` and `IsFinal` must be `false`. For example, a method might be non-virtual, but it implements an interface method. The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`. So there are cases where a method is marked as `virtual` but is still not overridable.  \n  \n To establish with certainty whether a method is overridable, use code such as this:  \n  \n `if (MethodInfo.IsVirtual && !MethodInfo.IsFinal)`  \n  \n If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden."
  example:
  - "The following example displays `false` for `IsFinal`, which might lead you to think that MyMethod is overridable. The code prints `false` even though MyMethod is not marked `virtual` and thus cannot be overridden.  \n  \n [!CODE [Classic MethodBase.IsVirtual Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example#1)]"
  syntax:
    content: public bool IsFinal { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsGenericMethod
  id: IsGenericMethod
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsGenericMethod
  nameWithType: MethodBase.IsGenericMethod
  fullName: System.Reflection.MethodBase.IsGenericMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the method is generic.
  remarks: "Use the IsGenericMethod property to determine whether the current <xref:System.Reflection.MethodBase> object represents a generic method. Use the <xref:System.Reflection.MethodBase.ContainsGenericParameters%2A> property to determine whether the current <xref:System.Reflection.MethodBase> object represents an open constructed method or a closed constructed method.  \n  \n> [!NOTE]\n>  Generics are not supported by default; this property returns `false` if not overridden in a derived class. Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."
  syntax:
    content: public virtual bool IsGenericMethod { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsGenericMethodDefinition
  id: IsGenericMethodDefinition
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsGenericMethodDefinition
  nameWithType: MethodBase.IsGenericMethodDefinition
  fullName: System.Reflection.MethodBase.IsGenericMethodDefinition
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the method is a generic method definition.
  remarks: "If the current <xref:System.Reflection.MethodBase> represents a generic method definition, then:  \n  \n-   The IsGenericMethodDefinition property is `true`.  \n  \n-   For each <xref:System.Type> object in the array returned by the <xref:System.Reflection.MethodBase.GetGenericArguments%2A> method:  \n  \n    -   The <xref:System.Type.IsGenericParameter%2A?displayProperty=fullName> property is `true`.  \n  \n    -   The <xref:System.Type.DeclaringMethod%2A?displayProperty=fullName> property returns the current instance.  \n  \n    -   The <xref:System.Type.GenericParameterPosition%2A?displayProperty=fullName> property is the same as the position of the <xref:System.Type> object in the array.  \n  \n> [!NOTE]\n>  Generics are not supported by default; this property returns `false` if not overridden in a derived class. Generic constructors are not supported in the .NET Framework version 2.0, so this property returns `false` if the current instance is of type <xref:System.Reflection.ConstructorInfo>.  \n  \n For a list of the invariant conditions for terms specific to generic methods, see the <xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."
  syntax:
    content: public virtual bool IsGenericMethodDefinition { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsHideBySig
  id: IsHideBySig
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsHideBySig
  nameWithType: MethodBase.IsHideBySig
  fullName: System.Reflection.MethodBase.IsHideBySig
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.
  remarks: "When a member in a derived class is declared with the C# `new` modifier or the Visual Basic `Shadows` modifier, it can hide a member of the same name in the base class. C# hides base class members by signature. That is, if the base class member has multiple overloads, the only one that is hidden is the one that has the identical signature. By contrast, Visual Basic hides all the base class overloads. Thus, IsHideBySig returns `false` on a member declared with the Visual Basic `Shadows` modifier, and `true` on a member declared with the C# `new` modifier.  \n  \n> [!WARNING]\n>  This property does not determine whether a method has the <xref:System.Reflection.MethodAttributes> attribute. A method that is declared with either the `new` or the `Shadows` modifier will have the <xref:System.Reflection.MethodAttributes> attribute, but only methods declared with `new` (that is, only C# methods) will have the IsHideBySig property set to `true`.  To determine whether a method has the <xref:System.Reflection.MethodAttributes> attribute, use code similar to the following: `if ((myMethodInfo.Attributes & MethodAttributes.VtableLayoutMask) == MethodAttributes.NewSlot)` in C# or `If (myMethodInfo.Attributes And MethodAttributes.VtableLayoutMask) = MethodAttributes.NewSlot` in Visual Basic. Note, however, that although all methods declared with `new` or `Shadows` have the <xref:System.Reflection.MethodAttributes> attribute, not all methods that have the <xref:System.Reflection.MethodAttributes> attribute are declared with `new` or `Shadows`."
  example:
  - "The following code example contains a base class with an overloaded method, and a derived class that hides one of the overloads. In the Visual Basic version of the code example, the IsHideBySig property returns `false` for the member in the derived class. In the C# version of the code sample, the property returns `true` for the member in the derived class.  \n  \n [!CODE [System.Reflection.MethodBase.IsHideBySig#1](../CodeSnippet/VS_Snippets_CLR_System/system.Reflection.MethodBase.IsHideBySig#1)]"
  syntax:
    content: public bool IsHideBySig { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsPrivate
  id: IsPrivate
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsPrivate
  nameWithType: MethodBase.IsPrivate
  fullName: System.Reflection.MethodBase.IsPrivate
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether this member is private.
  remarks: If a type member has `Private` level visibility, it can be called from any member in the same class and no others.
  syntax:
    content: public bool IsPrivate { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsPublic
  id: IsPublic
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsPublic
  nameWithType: MethodBase.IsPublic
  fullName: System.Reflection.MethodBase.IsPublic
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether this is a public method.
  remarks: To get the <xref:System.Reflection.MethodBase>, first get the type. From the type, get the method. From the method, get the `MethodBase`. If the `MethodBase` or constructor is other than public, it is protected and cannot be readily accessed. To access a non-public method, set the <xref:System.Reflection.BindingFlags> mask to `NonPublic` in `GetMethod`.
  example:
  - "The following example uses the IsPublic property to display a message that indicates whether the specified method is public.  \n  \n [!CODE [Classic MethodBase.IsPublic Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.IsPublic Example#1)]"
  syntax:
    content: public bool IsPublic { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsSecurityCritical
  id: IsSecurityCritical
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsSecurityCritical
  nameWithType: MethodBase.IsSecurityCritical
  fullName: System.Reflection.MethodBase.IsSecurityCritical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value that indicates whether the current method or constructor is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.
  remarks: "The IsSecurityCritical, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md). For information about transparency, see [Security Changes](../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public virtual bool IsSecurityCritical { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsSecuritySafeCritical
  id: IsSecuritySafeCritical
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsSecuritySafeCritical
  nameWithType: MethodBase.IsSecuritySafeCritical
  fullName: System.Reflection.MethodBase.IsSecuritySafeCritical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value that indicates whether the current method or constructor is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.
  remarks: "The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, IsSecuritySafeCritical, and <xref:System.Reflection.MethodBase.IsSecurityTransparent%2A> properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md). For information about transparency, see [Security Changes](../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public virtual bool IsSecuritySafeCritical { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsSecurityTransparent
  id: IsSecurityTransparent
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsSecurityTransparent
  nameWithType: MethodBase.IsSecurityTransparent
  fullName: System.Reflection.MethodBase.IsSecurityTransparent
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value that indicates whether the current method or constructor is transparent at the current trust level, and therefore cannot perform critical operations.
  remarks: "If this property returns `true`, the <xref:System.Reflection.MethodBase.IsSecurityCritical%2A> and <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A> properties return `false`.  \n  \n The <xref:System.Reflection.MethodBase.IsSecurityCritical%2A>, <xref:System.Reflection.MethodBase.IsSecuritySafeCritical%2A>, and IsSecurityTransparent properties report the transparency level of the method or constructor at its current trust level, as determined by the common language runtime (CLR). Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](../Topic/Security%20Considerations%20for%20Reflection.md). For information about transparency, see [Security Changes](../Topic/Security%20Changes%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public virtual bool IsSecurityTransparent { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsSpecialName
  nameWithType: MethodBase.IsSpecialName
  fullName: System.Reflection.MethodBase.IsSpecialName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether this method has a special name.
  remarks: The <xref:System.Reflection.MethodAttributes> bit is set to flag members that are treated in a special way by some compilers (such as property accessors and operator overloading methods).
  example:
  - "This example shows a use of IsSpecialName to filter internal or private members out of a list.  \n  \n [!CODE [Classic Type.IsSpecialName Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic Type.IsSpecialName Example#1)]"
  syntax:
    content: public bool IsSpecialName { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsStatic
  id: IsStatic
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsStatic
  nameWithType: MethodBase.IsStatic
  fullName: System.Reflection.MethodBase.IsStatic
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the method is `static`.
  remarks: A static member cannot implicitly reference instance data in a class.
  syntax:
    content: public bool IsStatic { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.IsVirtual
  id: IsVirtual
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: IsVirtual
  nameWithType: MethodBase.IsVirtual
  fullName: System.Reflection.MethodBase.IsVirtual
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether the method is `virtual`.
  remarks: "A virtual member may reference instance data in a class and must be referenced through an instance of the class.  \n  \n To determine if a method is overridable, it is not sufficient to check that `IsVirtual` is `true`. For a method to be overridable, `IsVirtual` must be `true` and <xref:System.Reflection.MethodBase.IsFinal%2A> must be `false`. For example, a method might be non-virtual, but it implements an interface method. The common language runtime requires that all methods that implement interface members must be marked as `virtual`; therefore, the compiler marks the method `virtual final`. So there are cases where a method is marked as `virtual` but is still not overridable.  \n  \n To establish with certainty whether a method is overridable, use code such as this:  \n  \n```c#  \nif (MethodInfo.IsVirtual && !MethodInfo.IsFinal)  \n```  \n  \n```vb  \nIf MethodInfo.IsVirtual AndAlso Not MethodInfo.IsFinal Then  \n```  \n  \n If `IsVirtual` is `false` or `IsFinal` is `true`, then the method cannot be overridden.  \n  \n You can determine whether the current method overrides a method in a base class by calling the <xref:System.Reflection.MethodInfo.GetBaseDefinition%2A?displayProperty=fullName> method. The following example implements an `IsOverride` method that does this.  \n  \n [!CODE [system.reflection.methodinfo.getbasedefinition#2](../CodeSnippet/VS_Snippets_CLR_System/system.reflection.methodinfo.getbasedefinition#2)]"
  example:
  - "The following example displays `false` for `IsFinal`, which might lead you to think that `MyMethod` is overridable. The code prints `false` even though `MyMethod` is not marked `virtual` and thus cannot be overridden.  \n  \n [!CODE [Classic MethodBase.IsVirtual Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic MethodBase.IsVirtual Example#1)]"
  syntax:
    content: public bool IsVirtual { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.MethodHandle
  id: MethodHandle
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: MethodHandle
  nameWithType: MethodBase.MethodHandle
  fullName: System.Reflection.MethodBase.MethodHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a handle to the internal metadata representation of a method.
  remarks: The handles are valid only in the application domain in which they were obtained.
  syntax:
    content: public abstract RuntimeMethodHandle MethodHandle { get; }
    return:
      type: System.RuntimeMethodHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.MethodImplementationFlags
  id: MethodImplementationFlags
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: MethodImplementationFlags
  nameWithType: MethodBase.MethodImplementationFlags
  fullName: System.Reflection.MethodBase.MethodImplementationFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the <see cref="T:System.Reflection.MethodImplAttributes"> flags that specify the attributes of a method implementation.
  remarks: See the <xref:System.Reflection.MethodBase.GetMethodImplementationFlags%2A> method for more information.
  syntax:
    content: public virtual System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }
    return:
      type: System.Reflection.MethodImplAttributes
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  id: op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: op_Equality(MethodBase,MethodBase)
  nameWithType: MethodBase.op_Equality(MethodBase,MethodBase)
  fullName: System.Reflection.MethodBase.op_Equality(MethodBase,MethodBase)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Indicates whether two <see cref="T:System.Reflection.MethodBase"> objects are equal.
  remarks: To be added.
  syntax:
    content: public static bool op_Equality (System.Reflection.MethodBase left, System.Reflection.MethodBase right);
    parameters:
    - id: left
      type: System.Reflection.MethodBase
      description: The first object to compare.
    - id: right
      type: System.Reflection.MethodBase
      description: The second object to compare.
    return:
      type: System.Boolean
      description: '`true` if  is equal to ; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  id: op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: op_Inequality(MethodBase,MethodBase)
  nameWithType: MethodBase.op_Inequality(MethodBase,MethodBase)
  fullName: System.Reflection.MethodBase.op_Inequality(MethodBase,MethodBase)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Indicates whether two <see cref="T:System.Reflection.MethodBase"> objects are not equal.
  remarks: To be added.
  syntax:
    content: public static bool op_Inequality (System.Reflection.MethodBase left, System.Reflection.MethodBase right);
    parameters:
    - id: left
      type: System.Reflection.MethodBase
      description: The first object to compare.
    - id: right
      type: System.Reflection.MethodBase
      description: The second object to compare.
    return:
      type: System.Boolean
      description: '`true` if  is not equal to ; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _MethodBase.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array which receives the IDs corresponding to the names.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
  id: System#Runtime#InteropServices#_MethodBase#GetType
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.GetType()
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetType()
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.GetType%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: Type _MethodBase.GetType ();
    parameters: []
    return:
      type: System.Type
      description: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.GetType%2A?displayProperty=fullName>.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _MethodBase.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(UInt32)
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _MethodBase.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _MethodBase.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract
  id: System#Runtime#InteropServices#_MethodBase#IsAbstract
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsAbstract
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsAbstract
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsAbstract
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsAbstract%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsAbstract { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly
  id: System#Runtime#InteropServices#_MethodBase#IsAssembly
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsAssembly
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsAssembly
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsAssembly%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsAssembly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor
  id: System#Runtime#InteropServices#_MethodBase#IsConstructor
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsConstructor
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsConstructor
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsConstructor
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsConstructor%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsConstructor { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily
  id: System#Runtime#InteropServices#_MethodBase#IsFamily
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsFamily
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamily
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFamily
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsFamily%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsFamily { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  id: System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  id: System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal
  id: System#Runtime#InteropServices#_MethodBase#IsFinal
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsFinal
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFinal
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFinal
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsFinal%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsFinal { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig
  id: System#Runtime#InteropServices#_MethodBase#IsHideBySig
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsHideBySig
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsHideBySig
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsHideBySig
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsHideBySig%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsHideBySig { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate
  id: System#Runtime#InteropServices#_MethodBase#IsPrivate
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsPrivate
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsPrivate
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsPrivate
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsPrivate%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsPrivate { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic
  id: System#Runtime#InteropServices#_MethodBase#IsPublic
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsPublic
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsPublic
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsPublic
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsPublic%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsPublic { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName
  id: System#Runtime#InteropServices#_MethodBase#IsSpecialName
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsSpecialName
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsSpecialName
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsSpecialName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsSpecialName%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsSpecialName { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic
  id: System#Runtime#InteropServices#_MethodBase#IsStatic
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsStatic
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsStatic
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsStatic
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsStatic%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsStatic { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual
  id: System#Runtime#InteropServices#_MethodBase#IsVirtual
  isEii: true
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  name: System.Runtime.InteropServices._MethodBase.IsVirtual
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsVirtual
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsVirtual
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: For a description of this member, see <xref:System.Runtime.InteropServices._MethodBase.IsVirtual%2A?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Reflection.MethodBase> instance is cast to an <xref:System.Runtime.InteropServices._MethodBase> interface.
  syntax:
    content: bool System.Runtime.InteropServices._MethodBase.IsVirtual { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Reflection.MemberInfo
  isExternal: false
  name: System.Reflection.MemberInfo
- uid: System.Reflection.MethodBase.#ctor
  parent: System.Reflection.MethodBase
  isExternal: false
  name: MethodBase()
  nameWithType: MethodBase.MethodBase()
  fullName: System.Reflection.MethodBase.MethodBase()
- uid: System.Reflection.MethodBase.Attributes
  parent: System.Reflection.MethodBase
  isExternal: false
  name: Attributes
  nameWithType: MethodBase.Attributes
  fullName: System.Reflection.MethodBase.Attributes
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.MethodBase.CallingConvention
  parent: System.Reflection.MethodBase
  isExternal: false
  name: CallingConvention
  nameWithType: MethodBase.CallingConvention
  fullName: System.Reflection.MethodBase.CallingConvention
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Reflection.MethodBase.ContainsGenericParameters
  parent: System.Reflection.MethodBase
  isExternal: false
  name: ContainsGenericParameters
  nameWithType: MethodBase.ContainsGenericParameters
  fullName: System.Reflection.MethodBase.ContainsGenericParameters
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.Equals(System.Object)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: Equals(Object)
  nameWithType: MethodBase.Equals(Object)
  fullName: System.Reflection.MethodBase.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.MethodBase.GetCurrentMethod
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetCurrentMethod()
  nameWithType: MethodBase.GetCurrentMethod()
  fullName: System.Reflection.MethodBase.GetCurrentMethod()
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase.GetGenericArguments
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetGenericArguments()
  nameWithType: MethodBase.GetGenericArguments()
  fullName: System.Reflection.MethodBase.GetGenericArguments()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
- uid: System.Reflection.MethodBase.GetHashCode
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetHashCode()
  nameWithType: MethodBase.GetHashCode()
  fullName: System.Reflection.MethodBase.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.MethodBase.GetMethodBody
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetMethodBody()
  nameWithType: MethodBase.GetMethodBody()
  fullName: System.Reflection.MethodBase.GetMethodBody()
- uid: System.Reflection.MethodBody
  parent: System.Reflection
  isExternal: false
  name: MethodBody
  nameWithType: MethodBody
  fullName: System.Reflection.MethodBody
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetMethodFromHandle(RuntimeMethodHandle)
  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(RuntimeMethodHandle)
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetMethodFromHandle(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(RuntimeMethodHandle,RuntimeTypeHandle)
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.MethodBase.GetMethodImplementationFlags
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetMethodImplementationFlags()
  nameWithType: MethodBase.GetMethodImplementationFlags()
  fullName: System.Reflection.MethodBase.GetMethodImplementationFlags()
- uid: System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodImplAttributes
  nameWithType: MethodImplAttributes
  fullName: System.Reflection.MethodImplAttributes
- uid: System.Reflection.MethodBase.GetParameters
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetParameters()
  nameWithType: MethodBase.GetParameters()
  fullName: System.Reflection.MethodBase.GetParameters()
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo[]
- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  parent: System.Reflection.MethodBase
  isExternal: false
  name: Invoke(Object,Object[])
  nameWithType: MethodBase.Invoke(Object,Object[])
  fullName: System.Reflection.MethodBase.Invoke(Object,Object[])
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  nameWithType: MethodBase.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
  fullName: System.Reflection.MethodBase.Invoke(Object,BindingFlags,Binder,Object[],CultureInfo)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.MethodBase.IsAbstract
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsAbstract
  nameWithType: MethodBase.IsAbstract
  fullName: System.Reflection.MethodBase.IsAbstract
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsAssembly
  nameWithType: MethodBase.IsAssembly
  fullName: System.Reflection.MethodBase.IsAssembly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsConstructor
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsConstructor
  nameWithType: MethodBase.IsConstructor
  fullName: System.Reflection.MethodBase.IsConstructor
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsFamily
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamily
  nameWithType: MethodBase.IsFamily
  fullName: System.Reflection.MethodBase.IsFamily
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsFamilyAndAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamilyAndAssembly
  nameWithType: MethodBase.IsFamilyAndAssembly
  fullName: System.Reflection.MethodBase.IsFamilyAndAssembly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsFamilyOrAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamilyOrAssembly
  nameWithType: MethodBase.IsFamilyOrAssembly
  fullName: System.Reflection.MethodBase.IsFamilyOrAssembly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsFinal
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFinal
  nameWithType: MethodBase.IsFinal
  fullName: System.Reflection.MethodBase.IsFinal
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsGenericMethod
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsGenericMethod
  nameWithType: MethodBase.IsGenericMethod
  fullName: System.Reflection.MethodBase.IsGenericMethod
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsGenericMethodDefinition
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsGenericMethodDefinition
  nameWithType: MethodBase.IsGenericMethodDefinition
  fullName: System.Reflection.MethodBase.IsGenericMethodDefinition
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsHideBySig
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsHideBySig
  nameWithType: MethodBase.IsHideBySig
  fullName: System.Reflection.MethodBase.IsHideBySig
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsPrivate
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsPrivate
  nameWithType: MethodBase.IsPrivate
  fullName: System.Reflection.MethodBase.IsPrivate
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsPublic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsPublic
  nameWithType: MethodBase.IsPublic
  fullName: System.Reflection.MethodBase.IsPublic
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsSecurityCritical
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsSecurityCritical
  nameWithType: MethodBase.IsSecurityCritical
  fullName: System.Reflection.MethodBase.IsSecurityCritical
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsSecuritySafeCritical
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsSecuritySafeCritical
  nameWithType: MethodBase.IsSecuritySafeCritical
  fullName: System.Reflection.MethodBase.IsSecuritySafeCritical
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsSecurityTransparent
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsSecurityTransparent
  nameWithType: MethodBase.IsSecurityTransparent
  fullName: System.Reflection.MethodBase.IsSecurityTransparent
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsSpecialName
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsSpecialName
  nameWithType: MethodBase.IsSpecialName
  fullName: System.Reflection.MethodBase.IsSpecialName
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsStatic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsStatic
  nameWithType: MethodBase.IsStatic
  fullName: System.Reflection.MethodBase.IsStatic
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.IsVirtual
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsVirtual
  nameWithType: MethodBase.IsVirtual
  fullName: System.Reflection.MethodBase.IsVirtual
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.MethodHandle
  parent: System.Reflection.MethodBase
  isExternal: false
  name: MethodHandle
  nameWithType: MethodBase.MethodHandle
  fullName: System.Reflection.MethodBase.MethodHandle
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.MethodBase.MethodImplementationFlags
  parent: System.Reflection.MethodBase
  isExternal: false
  name: MethodImplementationFlags
  nameWithType: MethodBase.MethodImplementationFlags
  fullName: System.Reflection.MethodBase.MethodImplementationFlags
- uid: System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodImplAttributes
  nameWithType: MethodImplAttributes
  fullName: System.Reflection.MethodImplAttributes
- uid: System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: op_Equality(MethodBase,MethodBase)
  nameWithType: MethodBase.op_Equality(MethodBase,MethodBase)
  fullName: System.Reflection.MethodBase.op_Equality(MethodBase,MethodBase)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: op_Inequality(MethodBase,MethodBase)
  nameWithType: MethodBase.op_Inequality(MethodBase,MethodBase)
  fullName: System.Reflection.MethodBase.op_Inequality(MethodBase,MethodBase)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.GetType()
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetType()
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetType()
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(UInt32)
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsAbstract
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsAbstract
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsAbstract
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsAssembly
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsAssembly
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsAssembly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsConstructor
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsConstructor
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsConstructor
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsFamily
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamily
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFamily
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsFinal
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsFinal
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFinal
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsHideBySig
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsHideBySig
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsHideBySig
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsPrivate
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsPrivate
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsPrivate
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsPublic
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsPublic
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsPublic
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsSpecialName
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsSpecialName
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsSpecialName
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsStatic
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsStatic
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsStatic
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual
  parent: System.Reflection.MethodBase
  isExternal: false
  name: System.Runtime.InteropServices._MethodBase.IsVirtual
  nameWithType: MethodBase.System.Runtime.InteropServices._MethodBase.IsVirtual
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsVirtual
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.GetMethodFromHandle*
  parent: System.Reflection.MethodBase
  isExternal: false
  nameWithType: MethodBase.
- uid: System.Reflection.MethodBase.Invoke*
  parent: System.Reflection.MethodBase
  isExternal: false
  nameWithType: MethodBase.
