### YamlMime:ManagedReference
items:
- uid: System.Reflection.CustomAttributeNamedArgument
  id: CustomAttributeNamedArgument
  children:
  - System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)
  - System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)
  - System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)
  - System.Reflection.CustomAttributeNamedArgument.GetHashCode
  - System.Reflection.CustomAttributeNamedArgument.IsField
  - System.Reflection.CustomAttributeNamedArgument.MemberInfo
  - System.Reflection.CustomAttributeNamedArgument.MemberName
  - System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)
  - System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)
  - System.Reflection.CustomAttributeNamedArgument.ToString
  - System.Reflection.CustomAttributeNamedArgument.TypedValue
  langs:
  - csharp
  name: CustomAttributeNamedArgument
  nameWithType: CustomAttributeNamedArgument
  fullName: System.Reflection.CustomAttributeNamedArgument
  type: Struct
  summary: Represents a named argument of a custom attribute in the reflection-only context.
  remarks: "Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.  \n  \n The CustomAttributeNamedArgument structure is used by the <xref:System.Reflection.CustomAttributeData> class to provide access to a named argument specified for a custom attribute instance, without executing the code of the corresponding property of the custom attribute type. The <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A> property returns a <xref:System.Reflection.CustomAttributeTypedArgument> structure that contains the type and value of the named argument.  \n  \n> [!IMPORTANT]\n>  Whether an argument is named or positional, you must access its type and value by using the <xref:System.Reflection.CustomAttributeTypedArgument> structure.  \n  \n To create instances of the <xref:System.Reflection.CustomAttributeData> class, use the `static`<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> factory method."
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public struct CustomAttributeNamedArgument
  inheritance:
  - System.Object
  - System.ValueType
  implements: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)
  id: '#ctor(System.Reflection.MemberInfo,System.Object)'
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: CustomAttributeNamedArgument(MemberInfo,Object)
  nameWithType: CustomAttributeNamedArgument.CustomAttributeNamedArgument(MemberInfo,Object)
  fullName: System.Reflection.CustomAttributeNamedArgument.CustomAttributeNamedArgument(MemberInfo,Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeNamedArgument"> class, which represents the specified field or property of the custom attribute, and specifies the value of the field or property.
  remarks: This constructor is for use by inheritors of the <xref:System.Reflection.CustomAttributeNamedArgument> class. It is not intended for use in application code.
  syntax:
    content: public CustomAttributeNamedArgument (System.Reflection.MemberInfo memberInfo, object value);
    parameters:
    - id: memberInfo
      type: System.Reflection.MemberInfo
      description: A field or property of the custom attribute. The new <see cref="T:System.Reflection.CustomAttributeNamedArgument"> object represents this member and its value.
    - id: value
      type: System.Object
      description: The value of the field or property of the custom attribute.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)
  id: '#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)'
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: CustomAttributeNamedArgument(MemberInfo,CustomAttributeTypedArgument)
  nameWithType: CustomAttributeNamedArgument.CustomAttributeNamedArgument(MemberInfo,CustomAttributeTypedArgument)
  fullName: System.Reflection.CustomAttributeNamedArgument.CustomAttributeNamedArgument(MemberInfo,CustomAttributeTypedArgument)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeNamedArgument"> class, which represents the specified field or property of the custom attribute, and specifies a <xref:System.Reflection.CustomAttributeTypedArgument> object that describes the type and value of the field or property.
  remarks: This constructor is for use by inheritors of the <xref:System.Reflection.CustomAttributeNamedArgument> class. It is not intended for use in application code.
  syntax:
    content: public CustomAttributeNamedArgument (System.Reflection.MemberInfo memberInfo, System.Reflection.CustomAttributeTypedArgument typedArgument);
    parameters:
    - id: memberInfo
      type: System.Reflection.MemberInfo
      description: A field or property of the custom attribute. The new <see cref="T:System.Reflection.CustomAttributeNamedArgument"> object represents this member and its value.
    - id: typedArgument
      type: System.Reflection.CustomAttributeTypedArgument
      description: An object that describes the type and value of the field or property.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CustomAttributeNamedArgument.Equals(Object)
  fullName: System.Reflection.CustomAttributeNamedArgument.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or `null`.
    return:
      type: System.Boolean
      description: '`true` if  equals the type and value of this instance; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.GetHashCode
  id: GetHashCode
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CustomAttributeNamedArgument.GetHashCode()
  fullName: System.Reflection.CustomAttributeNamedArgument.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.IsField
  id: IsField
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: IsField
  nameWithType: CustomAttributeNamedArgument.IsField
  fullName: System.Reflection.CustomAttributeNamedArgument.IsField
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value that indicates whether the named argument is a field.
  remarks: To be added.
  syntax:
    content: public bool IsField { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.MemberInfo
  id: MemberInfo
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: MemberInfo
  nameWithType: CustomAttributeNamedArgument.MemberInfo
  fullName: System.Reflection.CustomAttributeNamedArgument.MemberInfo
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the attribute member that would be used to set the named argument.
  remarks: In most cases, the member is a property.
  syntax:
    content: public System.Reflection.MemberInfo MemberInfo { get; }
    return:
      type: System.Reflection.MemberInfo
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.MemberName
  id: MemberName
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: MemberName
  nameWithType: CustomAttributeNamedArgument.MemberName
  fullName: System.Reflection.CustomAttributeNamedArgument.MemberName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the name of the attribute member that would be used to set the named argument.
  remarks: To be added.
  syntax:
    content: public string MemberName { get; }
    return:
      type: System.String
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)
  id: op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: op_Equality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
  nameWithType: CustomAttributeNamedArgument.op_Equality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
  fullName: System.Reflection.CustomAttributeNamedArgument.op_Equality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Tests whether two <see cref="T:System.Reflection.CustomAttributeNamedArgument"> structures are equivalent.
  remarks: To be added.
  syntax:
    content: public static bool op_Equality (System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);
    parameters:
    - id: left
      type: System.Reflection.CustomAttributeNamedArgument
      description: The structure to the left of the equality operator.
    - id: right
      type: System.Reflection.CustomAttributeNamedArgument
      description: The structure to the right of the equality operator.
    return:
      type: System.Boolean
      description: '`true` if the two <see cref="T:System.Reflection.CustomAttributeNamedArgument"> structures are equal; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)
  id: op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: op_Inequality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
  nameWithType: CustomAttributeNamedArgument.op_Inequality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
  fullName: System.Reflection.CustomAttributeNamedArgument.op_Inequality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Tests whether two <see cref="T:System.Reflection.CustomAttributeNamedArgument"> structures are different.
  remarks: To be added.
  syntax:
    content: public static bool op_Inequality (System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);
    parameters:
    - id: left
      type: System.Reflection.CustomAttributeNamedArgument
      description: The structure to the left of the inequality operator.
    - id: right
      type: System.Reflection.CustomAttributeNamedArgument
      description: The structure to the right of the inequality operator.
    return:
      type: System.Boolean
      description: '`true` if the two <see cref="T:System.Reflection.CustomAttributeNamedArgument"> structures are different; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.ToString
  id: ToString
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: ToString()
  nameWithType: CustomAttributeNamedArgument.ToString()
  fullName: System.Reflection.CustomAttributeNamedArgument.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a string that consists of the argument name, the equal sign, and a string representation of the argument value.
  remarks: To be added.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string that consists of the argument name, the equal sign, and a string representation of the argument value.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeNamedArgument.TypedValue
  id: TypedValue
  parent: System.Reflection.CustomAttributeNamedArgument
  langs:
  - csharp
  name: TypedValue
  nameWithType: CustomAttributeNamedArgument.TypedValue
  fullName: System.Reflection.CustomAttributeNamedArgument.TypedValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a <see cref="T:System.Reflection.CustomAttributeTypedArgument"> structure that can be used to obtain the type and value of the current named argument.
  remarks: The <xref:System.Reflection.CustomAttributeNamedArgument> structure only contains information about how the argument value was set. Use this property to obtain a <xref:System.Reflection.CustomAttributeTypedArgument> structure that contains the type and value.
  example:
  - "The following code example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n The TypedValue property is used in the `ShowAttributeData` method that displays custom attribute data, to obtain the types and values of named attributes.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: public System.Reflection.CustomAttributeTypedArgument TypedValue { get; }
    return:
      type: System.Reflection.CustomAttributeTypedArgument
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: CustomAttributeNamedArgument(MemberInfo,Object)
  nameWithType: CustomAttributeNamedArgument.CustomAttributeNamedArgument(MemberInfo,Object)
  fullName: System.Reflection.CustomAttributeNamedArgument.CustomAttributeNamedArgument(MemberInfo,Object)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: CustomAttributeNamedArgument(MemberInfo,CustomAttributeTypedArgument)
  nameWithType: CustomAttributeNamedArgument.CustomAttributeNamedArgument(MemberInfo,CustomAttributeTypedArgument)
  fullName: System.Reflection.CustomAttributeNamedArgument.CustomAttributeNamedArgument(MemberInfo,CustomAttributeTypedArgument)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.CustomAttributeTypedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeTypedArgument
  nameWithType: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
- uid: System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: Equals(Object)
  nameWithType: CustomAttributeNamedArgument.Equals(Object)
  fullName: System.Reflection.CustomAttributeNamedArgument.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.CustomAttributeNamedArgument.GetHashCode
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: GetHashCode()
  nameWithType: CustomAttributeNamedArgument.GetHashCode()
  fullName: System.Reflection.CustomAttributeNamedArgument.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.CustomAttributeNamedArgument.IsField
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: IsField
  nameWithType: CustomAttributeNamedArgument.IsField
  fullName: System.Reflection.CustomAttributeNamedArgument.IsField
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.CustomAttributeNamedArgument.MemberInfo
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: MemberInfo
  nameWithType: CustomAttributeNamedArgument.MemberInfo
  fullName: System.Reflection.CustomAttributeNamedArgument.MemberInfo
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.CustomAttributeNamedArgument.MemberName
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: MemberName
  nameWithType: CustomAttributeNamedArgument.MemberName
  fullName: System.Reflection.CustomAttributeNamedArgument.MemberName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: op_Equality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
  nameWithType: CustomAttributeNamedArgument.op_Equality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
  fullName: System.Reflection.CustomAttributeNamedArgument.op_Equality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.CustomAttributeNamedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeNamedArgument
  nameWithType: CustomAttributeNamedArgument
  fullName: System.Reflection.CustomAttributeNamedArgument
- uid: System.Reflection.CustomAttributeNamedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeNamedArgument
  nameWithType: CustomAttributeNamedArgument
  fullName: System.Reflection.CustomAttributeNamedArgument
- uid: System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: op_Inequality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
  nameWithType: CustomAttributeNamedArgument.op_Inequality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
  fullName: System.Reflection.CustomAttributeNamedArgument.op_Inequality(CustomAttributeNamedArgument,CustomAttributeNamedArgument)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.CustomAttributeNamedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeNamedArgument
  nameWithType: CustomAttributeNamedArgument
  fullName: System.Reflection.CustomAttributeNamedArgument
- uid: System.Reflection.CustomAttributeNamedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeNamedArgument
  nameWithType: CustomAttributeNamedArgument
  fullName: System.Reflection.CustomAttributeNamedArgument
- uid: System.Reflection.CustomAttributeNamedArgument.ToString
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: ToString()
  nameWithType: CustomAttributeNamedArgument.ToString()
  fullName: System.Reflection.CustomAttributeNamedArgument.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.CustomAttributeNamedArgument.TypedValue
  parent: System.Reflection.CustomAttributeNamedArgument
  isExternal: false
  name: TypedValue
  nameWithType: CustomAttributeNamedArgument.TypedValue
  fullName: System.Reflection.CustomAttributeNamedArgument.TypedValue
- uid: System.Reflection.CustomAttributeTypedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeTypedArgument
  nameWithType: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
