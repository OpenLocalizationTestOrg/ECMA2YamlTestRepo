### YamlMime:ManagedReference
items:
- uid: System.Reflection.CustomAttributeTypedArgument
  id: CustomAttributeTypedArgument
  children:
  - System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)
  - System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)
  - System.Reflection.CustomAttributeTypedArgument.ArgumentType
  - System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)
  - System.Reflection.CustomAttributeTypedArgument.GetHashCode
  - System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  - System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  - System.Reflection.CustomAttributeTypedArgument.ToString
  - System.Reflection.CustomAttributeTypedArgument.Value
  langs:
  - csharp
  name: CustomAttributeTypedArgument
  nameWithType: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
  type: Struct
  summary: Represents an argument of a custom attribute in the reflection-only context, or an element of an array argument.
  remarks: "Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName>, <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.  \n  \n The <xref:System.Reflection.CustomAttributeNamedArgument> structure is used by the <xref:System.Reflection.CustomAttributeData> class to provide access to the type and value of a positional argument specified for a custom attribute instance, without executing the attribute constructor. It also provides access to the type and value of a named argument without executing the code of the corresponding property of the custom attribute type.  \n  \n The types and values of all the positional and named arguments of an attribute instance are provided by CustomAttributeTypedArgument structures. The positional attributes returned by the <xref:System.Reflection.CustomAttributeData.ConstructorArguments%2A?displayProperty=fullName> property are directly represented by CustomAttributeTypedArgument structures, but the named arguments returned by the <xref:System.Reflection.CustomAttributeData.NamedArguments%2A?displayProperty=fullName> property are represented by <xref:System.Reflection.CustomAttributeNamedArgument> structures; to get the CustomAttributeTypedArgument structure for a named argument, use the <xref:System.Reflection.CustomAttributeNamedArgument.TypedValue%2A?displayProperty=fullName> property.  \n  \n If an argument is an array of values, the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A> property of the CustomAttributeTypedArgument that represents the argument returns a generic <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of CustomAttributeTypedArgument objects. Each CustomAttributeTypedArgument object in the collection represents the corresponding element of the array.  \n  \n To create instances of the <xref:System.Reflection.CustomAttributeData> class, use the `static`<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> factory method."
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public struct CustomAttributeTypedArgument
  inheritance:
  - System.Object
  - System.ValueType
  implements: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  name: CustomAttributeTypedArgument(Object)
  nameWithType: CustomAttributeTypedArgument.CustomAttributeTypedArgument(Object)
  fullName: System.Reflection.CustomAttributeTypedArgument.CustomAttributeTypedArgument(Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeTypedArgument"> class with the specified value.
  remarks: "The  parameter cannot be `null` for this constructor, because the argument type is inferred from the type of . To specify a `null` value, use the <xref:System.Reflection.CustomAttributeTypedArgument.%23ctor%28System.Type%2CSystem.Object%29> constructor.  \n  \n This constructor is for use by inheritors of the <xref:System.Reflection.CustomAttributeTypedArgument> class. It is not intended for use in application code."
  syntax:
    content: public CustomAttributeTypedArgument (object value);
    parameters:
    - id: value
      type: System.Object
      description: The value of the custom attribute argument.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)
  id: '#ctor(System.Type,System.Object)'
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  name: CustomAttributeTypedArgument(Type,Object)
  nameWithType: CustomAttributeTypedArgument.CustomAttributeTypedArgument(Type,Object)
  fullName: System.Reflection.CustomAttributeTypedArgument.CustomAttributeTypedArgument(Type,Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.CustomAttributeTypedArgument"> class with the specified type and value.
  remarks: This constructor is for use by inheritors of the <xref:System.Reflection.CustomAttributeTypedArgument> class. It is not intended for use in application code.
  syntax:
    content: public CustomAttributeTypedArgument (Type argumentType, object value);
    parameters:
    - id: argumentType
      type: System.Type
      description: The type of the custom attribute argument.
    - id: value
      type: System.Object
      description: The value of the custom attribute argument.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeTypedArgument.ArgumentType
  id: ArgumentType
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  name: ArgumentType
  nameWithType: CustomAttributeTypedArgument.ArgumentType
  fullName: System.Reflection.CustomAttributeTypedArgument.ArgumentType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the type of the argument or of the array argument element.
  remarks: For simple arguments or for elements of array arguments, this property identifies the actual type of the value returned by the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A> property. For array arguments, this property returns the array type, but the <xref:System.Reflection.CustomAttributeTypedArgument.Value%2A> property returns a `ReadOnlyCollection<CustomAttributeTypedArgument>` (`ReadOnlyCollection(Of CustomAttributeTypedArgument)` in Visual Basic) in which each element of the collection represents the corresponding element of the array argument.
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n The ArgumentType property is used in the `ShowValueOrArray` method that displays custom attribute data, to display the types of attributes.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]"
  syntax:
    content: public Type ArgumentType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CustomAttributeTypedArgument.Equals(Object)
  fullName: System.Reflection.CustomAttributeTypedArgument.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Indicates whether this instance and a specified object are equal.
  remarks: To be added.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: Another object to compare to.
    return:
      type: System.Boolean
      description: '`true` if  and this instance are the same type and represent the same value; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeTypedArgument.GetHashCode
  id: GetHashCode
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CustomAttributeTypedArgument.GetHashCode()
  fullName: System.Reflection.CustomAttributeTypedArgument.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  remarks: To be added.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  id: op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  name: op_Equality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
  nameWithType: CustomAttributeTypedArgument.op_Equality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
  fullName: System.Reflection.CustomAttributeTypedArgument.op_Equality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Tests whether two <see cref="T:System.Reflection.CustomAttributeTypedArgument"> structures are equivalent.
  remarks: To be added.
  syntax:
    content: public static bool op_Equality (System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);
    parameters:
    - id: left
      type: System.Reflection.CustomAttributeTypedArgument
      description: The <see cref="T:System.Reflection.CustomAttributeTypedArgument"> structure to the left of the equality operator.
    - id: right
      type: System.Reflection.CustomAttributeTypedArgument
      description: The <see cref="T:System.Reflection.CustomAttributeTypedArgument"> structure to the right of the equality operator.
    return:
      type: System.Boolean
      description: '`true` if the two <see cref="T:System.Reflection.CustomAttributeTypedArgument"> structures are equal; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  id: op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  name: op_Inequality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
  nameWithType: CustomAttributeTypedArgument.op_Inequality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
  fullName: System.Reflection.CustomAttributeTypedArgument.op_Inequality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Tests whether two <see cref="T:System.Reflection.CustomAttributeTypedArgument"> structures are different.
  remarks: To be added.
  syntax:
    content: public static bool op_Inequality (System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);
    parameters:
    - id: left
      type: System.Reflection.CustomAttributeTypedArgument
      description: The <see cref="T:System.Reflection.CustomAttributeTypedArgument"> structure to the left of the inequality operator.
    - id: right
      type: System.Reflection.CustomAttributeTypedArgument
      description: The <see cref="T:System.Reflection.CustomAttributeTypedArgument"> structure to the right of the inequality operator.
    return:
      type: System.Boolean
      description: '`true` if the two <see cref="T:System.Reflection.CustomAttributeTypedArgument"> structures are different; otherwise, `false`.'
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeTypedArgument.ToString
  id: ToString
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  name: ToString()
  nameWithType: CustomAttributeTypedArgument.ToString()
  fullName: System.Reflection.CustomAttributeTypedArgument.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a string consisting of the argument name, the equal sign, and a string representation of the argument value.
  remarks: To be added.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string consisting of the argument name, the equal sign, and a string representation of the argument value.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.CustomAttributeTypedArgument.Value
  id: Value
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  name: Value
  nameWithType: CustomAttributeTypedArgument.Value
  fullName: System.Reflection.CustomAttributeTypedArgument.Value
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the value of the argument for a simple argument or for an element of an array argument; gets a collection of values for an array argument.
  remarks: "If the <xref:System.Reflection.CustomAttributeTypedArgument> represents an array argument, this property returns a `ReadOnlyCollection<CustomAttributeTypedArgument>` (`ReadOnlyCollection(Of CustomAttributeTypedArgument)` in Visual Basic). Each element of the collection represents the corresponding element of the array argument.  \n  \n The type of the value can be obtained by using the <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A> property. <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A> gets the actual type of the value returned by the Value property for simple arguments or for elements of array arguments. It returns the array type for array arguments."
  example:
  - "The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  \n  \n The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays the custom attributes.  \n  \n The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  \n  \n The Value property is used in the `ShowValueOrArray` method that displays custom attribute data, to display the values of attributes.  \n  \n [!CODE [CustomAttributeData#1](../CodeSnippet/VS_Snippets_CLR/CustomAttributeData#1)]  \n  \n <xref:System.Reflection.CustomAttributeTypedArgument.ArgumentType%2A> &#124; <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>"
  syntax:
    content: public object Value { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)
  parent: System.Reflection.CustomAttributeTypedArgument
  isExternal: false
  name: CustomAttributeTypedArgument(Object)
  nameWithType: CustomAttributeTypedArgument.CustomAttributeTypedArgument(Object)
  fullName: System.Reflection.CustomAttributeTypedArgument.CustomAttributeTypedArgument(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)
  parent: System.Reflection.CustomAttributeTypedArgument
  isExternal: false
  name: CustomAttributeTypedArgument(Type,Object)
  nameWithType: CustomAttributeTypedArgument.CustomAttributeTypedArgument(Type,Object)
  fullName: System.Reflection.CustomAttributeTypedArgument.CustomAttributeTypedArgument(Type,Object)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.CustomAttributeTypedArgument.ArgumentType
  parent: System.Reflection.CustomAttributeTypedArgument
  isExternal: false
  name: ArgumentType
  nameWithType: CustomAttributeTypedArgument.ArgumentType
  fullName: System.Reflection.CustomAttributeTypedArgument.ArgumentType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)
  parent: System.Reflection.CustomAttributeTypedArgument
  isExternal: false
  name: Equals(Object)
  nameWithType: CustomAttributeTypedArgument.Equals(Object)
  fullName: System.Reflection.CustomAttributeTypedArgument.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.CustomAttributeTypedArgument.GetHashCode
  parent: System.Reflection.CustomAttributeTypedArgument
  isExternal: false
  name: GetHashCode()
  nameWithType: CustomAttributeTypedArgument.GetHashCode()
  fullName: System.Reflection.CustomAttributeTypedArgument.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  parent: System.Reflection.CustomAttributeTypedArgument
  isExternal: false
  name: op_Equality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
  nameWithType: CustomAttributeTypedArgument.op_Equality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
  fullName: System.Reflection.CustomAttributeTypedArgument.op_Equality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.CustomAttributeTypedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeTypedArgument
  nameWithType: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
- uid: System.Reflection.CustomAttributeTypedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeTypedArgument
  nameWithType: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
- uid: System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  parent: System.Reflection.CustomAttributeTypedArgument
  isExternal: false
  name: op_Inequality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
  nameWithType: CustomAttributeTypedArgument.op_Inequality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
  fullName: System.Reflection.CustomAttributeTypedArgument.op_Inequality(CustomAttributeTypedArgument,CustomAttributeTypedArgument)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.CustomAttributeTypedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeTypedArgument
  nameWithType: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
- uid: System.Reflection.CustomAttributeTypedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeTypedArgument
  nameWithType: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
- uid: System.Reflection.CustomAttributeTypedArgument.ToString
  parent: System.Reflection.CustomAttributeTypedArgument
  isExternal: false
  name: ToString()
  nameWithType: CustomAttributeTypedArgument.ToString()
  fullName: System.Reflection.CustomAttributeTypedArgument.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.CustomAttributeTypedArgument.Value
  parent: System.Reflection.CustomAttributeTypedArgument
  isExternal: false
  name: Value
  nameWithType: CustomAttributeTypedArgument.Value
  fullName: System.Reflection.CustomAttributeTypedArgument.Value
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
