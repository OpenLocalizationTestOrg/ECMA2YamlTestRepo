### YamlMime:ManagedReference
items:
- uid: System.Reflection.ExceptionHandlingClause
  id: ExceptionHandlingClause
  children:
  - System.Reflection.ExceptionHandlingClause.#ctor
  - System.Reflection.ExceptionHandlingClause.CatchType
  - System.Reflection.ExceptionHandlingClause.FilterOffset
  - System.Reflection.ExceptionHandlingClause.Flags
  - System.Reflection.ExceptionHandlingClause.HandlerLength
  - System.Reflection.ExceptionHandlingClause.HandlerOffset
  - System.Reflection.ExceptionHandlingClause.ToString
  - System.Reflection.ExceptionHandlingClause.TryLength
  - System.Reflection.ExceptionHandlingClause.TryOffset
  langs:
  - csharp
  name: ExceptionHandlingClause
  nameWithType: ExceptionHandlingClause
  fullName: System.Reflection.ExceptionHandlingClause
  type: Class
  summary: Represents a clause in a structured exception-handling block.
  remarks: "The ExceptionHandlingClause class provides information about the clauses in a `try`…`catch`…`finally` block (`Try`…`Catch`…`Finally` in Visual Basic). To get a list of exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> that represents the method. Use the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain a <xref:System.Reflection.MethodBody> object, and then use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to get the list of clauses.  \n  \n> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  example:
  - "The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of ExceptionHandlingClause objects and display their properties.  \n  \n You can use Ildasm.exe to examine the MSIL for the compiled code example, to see how the offsets and lengths are calculated.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#4](../CodeSnippet/VS_Snippets_CLR/MethodBody#4)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]  \n[!CODE [MethodBody#7](../CodeSnippet/VS_Snippets_CLR/MethodBody#7)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ExceptionHandlingClause
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ExceptionHandlingClause.#ctor
  id: '#ctor'
  parent: System.Reflection.ExceptionHandlingClause
  langs:
  - csharp
  name: ExceptionHandlingClause()
  nameWithType: ExceptionHandlingClause.ExceptionHandlingClause()
  fullName: System.Reflection.ExceptionHandlingClause.ExceptionHandlingClause()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <see cref="T:System.Reflection.ExceptionHandlingClause"> class.
  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.ExceptionHandlingClause> objects.
  syntax:
    content: protected ExceptionHandlingClause ();
    parameters: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ExceptionHandlingClause.CatchType
  id: CatchType
  parent: System.Reflection.ExceptionHandlingClause
  langs:
  - csharp
  name: CatchType
  nameWithType: ExceptionHandlingClause.CatchType
  fullName: System.Reflection.ExceptionHandlingClause.CatchType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the type of exception handled by this clause.
  remarks: >-
    > [!NOTE]

    >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  example:
  - "The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#4](../CodeSnippet/VS_Snippets_CLR/MethodBody#4)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]  \n[!CODE [MethodBody#7](../CodeSnippet/VS_Snippets_CLR/MethodBody#7)]"
  syntax:
    content: public virtual Type CatchType { get; }
    return:
      type: System.Type
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ExceptionHandlingClause.FilterOffset
  id: FilterOffset
  parent: System.Reflection.ExceptionHandlingClause
  langs:
  - csharp
  name: FilterOffset
  nameWithType: ExceptionHandlingClause.FilterOffset
  fullName: System.Reflection.ExceptionHandlingClause.FilterOffset
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the offset within the method body, in bytes, of the user-supplied filter code.
  remarks: "A filter clause contains user-suppliedMicrosoft intermediate language (MSIL) that determines whether an exception is handled by this clause. For example, any clause containing the Visual Basic `When` keyword is a <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clause.  \n  \n> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public virtual int FilterOffset { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ExceptionHandlingClause.Flags
  id: Flags
  parent: System.Reflection.ExceptionHandlingClause
  langs:
  - csharp
  name: Flags
  nameWithType: ExceptionHandlingClause.Flags
  fullName: System.Reflection.ExceptionHandlingClause.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.
  remarks: >-
    > [!NOTE]

    >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  example:
  - "The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#4](../CodeSnippet/VS_Snippets_CLR/MethodBody#4)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]  \n[!CODE [MethodBody#7](../CodeSnippet/VS_Snippets_CLR/MethodBody#7)]"
  syntax:
    content: public virtual System.Reflection.ExceptionHandlingClauseOptions Flags { get; }
    return:
      type: System.Reflection.ExceptionHandlingClauseOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ExceptionHandlingClause.HandlerLength
  id: HandlerLength
  parent: System.Reflection.ExceptionHandlingClause
  langs:
  - csharp
  name: HandlerLength
  nameWithType: ExceptionHandlingClause.HandlerLength
  fullName: System.Reflection.ExceptionHandlingClause.HandlerLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the length, in bytes, of the body of this exception-handling clause.
  remarks: >-
    > [!NOTE]

    >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  example:
  - "The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#4](../CodeSnippet/VS_Snippets_CLR/MethodBody#4)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]  \n[!CODE [MethodBody#7](../CodeSnippet/VS_Snippets_CLR/MethodBody#7)]"
  syntax:
    content: public virtual int HandlerLength { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ExceptionHandlingClause.HandlerOffset
  id: HandlerOffset
  parent: System.Reflection.ExceptionHandlingClause
  langs:
  - csharp
  name: HandlerOffset
  nameWithType: ExceptionHandlingClause.HandlerOffset
  fullName: System.Reflection.ExceptionHandlingClause.HandlerOffset
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the offset within the method body, in bytes, of this exception-handling clause.
  remarks: >-
    > [!NOTE]

    >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  example:
  - "The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#4](../CodeSnippet/VS_Snippets_CLR/MethodBody#4)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]  \n[!CODE [MethodBody#7](../CodeSnippet/VS_Snippets_CLR/MethodBody#7)]"
  syntax:
    content: public virtual int HandlerOffset { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ExceptionHandlingClause.ToString
  id: ToString
  parent: System.Reflection.ExceptionHandlingClause
  langs:
  - csharp
  name: ToString()
  nameWithType: ExceptionHandlingClause.ToString()
  fullName: System.Reflection.ExceptionHandlingClause.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: A string representation of the exception-handling clause.
  remarks: To be added.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string that lists appropriate property values for the filter clause type.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ExceptionHandlingClause.TryLength
  id: TryLength
  parent: System.Reflection.ExceptionHandlingClause
  langs:
  - csharp
  name: TryLength
  nameWithType: ExceptionHandlingClause.TryLength
  fullName: System.Reflection.ExceptionHandlingClause.TryLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The total length, in bytes, of the try block that includes this exception-handling clause.
  remarks: "An integer that represents the total length, in bytes, of the try block that includes this exception-handling clause.  \n  \n> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  example:
  - "The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#4](../CodeSnippet/VS_Snippets_CLR/MethodBody#4)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]  \n[!CODE [MethodBody#7](../CodeSnippet/VS_Snippets_CLR/MethodBody#7)]"
  syntax:
    content: public virtual int TryLength { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.ExceptionHandlingClause.TryOffset
  id: TryOffset
  parent: System.Reflection.ExceptionHandlingClause
  langs:
  - csharp
  name: TryOffset
  nameWithType: ExceptionHandlingClause.TryOffset
  fullName: System.Reflection.ExceptionHandlingClause.TryOffset
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: The offset within the method, in bytes, of the try block that includes this exception-handling clause.
  remarks: >-
    > [!NOTE]

    >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  example:
  - "The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \n  \n [!CODE [MethodBody#2](../CodeSnippet/VS_Snippets_CLR/MethodBody#2)]  \n[!CODE [MethodBody#4](../CodeSnippet/VS_Snippets_CLR/MethodBody#4)]  \n[!CODE [MethodBody#5](../CodeSnippet/VS_Snippets_CLR/MethodBody#5)]  \n[!CODE [MethodBody#7](../CodeSnippet/VS_Snippets_CLR/MethodBody#7)]"
  syntax:
    content: public virtual int TryOffset { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.ExceptionHandlingClause.#ctor
  parent: System.Reflection.ExceptionHandlingClause
  isExternal: false
  name: ExceptionHandlingClause()
  nameWithType: ExceptionHandlingClause.ExceptionHandlingClause()
  fullName: System.Reflection.ExceptionHandlingClause.ExceptionHandlingClause()
- uid: System.Reflection.ExceptionHandlingClause.CatchType
  parent: System.Reflection.ExceptionHandlingClause
  isExternal: false
  name: CatchType
  nameWithType: ExceptionHandlingClause.CatchType
  fullName: System.Reflection.ExceptionHandlingClause.CatchType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.ExceptionHandlingClause.FilterOffset
  parent: System.Reflection.ExceptionHandlingClause
  isExternal: false
  name: FilterOffset
  nameWithType: ExceptionHandlingClause.FilterOffset
  fullName: System.Reflection.ExceptionHandlingClause.FilterOffset
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ExceptionHandlingClause.Flags
  parent: System.Reflection.ExceptionHandlingClause
  isExternal: false
  name: Flags
  nameWithType: ExceptionHandlingClause.Flags
  fullName: System.Reflection.ExceptionHandlingClause.Flags
- uid: System.Reflection.ExceptionHandlingClauseOptions
  parent: System.Reflection
  isExternal: false
  name: ExceptionHandlingClauseOptions
  nameWithType: ExceptionHandlingClauseOptions
  fullName: System.Reflection.ExceptionHandlingClauseOptions
- uid: System.Reflection.ExceptionHandlingClause.HandlerLength
  parent: System.Reflection.ExceptionHandlingClause
  isExternal: false
  name: HandlerLength
  nameWithType: ExceptionHandlingClause.HandlerLength
  fullName: System.Reflection.ExceptionHandlingClause.HandlerLength
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ExceptionHandlingClause.HandlerOffset
  parent: System.Reflection.ExceptionHandlingClause
  isExternal: false
  name: HandlerOffset
  nameWithType: ExceptionHandlingClause.HandlerOffset
  fullName: System.Reflection.ExceptionHandlingClause.HandlerOffset
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ExceptionHandlingClause.ToString
  parent: System.Reflection.ExceptionHandlingClause
  isExternal: false
  name: ToString()
  nameWithType: ExceptionHandlingClause.ToString()
  fullName: System.Reflection.ExceptionHandlingClause.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.ExceptionHandlingClause.TryLength
  parent: System.Reflection.ExceptionHandlingClause
  isExternal: false
  name: TryLength
  nameWithType: ExceptionHandlingClause.TryLength
  fullName: System.Reflection.ExceptionHandlingClause.TryLength
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.ExceptionHandlingClause.TryOffset
  parent: System.Reflection.ExceptionHandlingClause
  isExternal: false
  name: TryOffset
  nameWithType: ExceptionHandlingClause.TryOffset
  fullName: System.Reflection.ExceptionHandlingClause.TryOffset
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
