<Type Name="TypeBinaryExpression" FullName="System.Linq.Expressions.TypeBinaryExpression">
  <TypeSignature Language="C#" Value="public sealed class TypeBinaryExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TypeBinaryExpression extends System.Linq.Expressions.Expression" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/TypeBinaryExpressionProxy))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an operation between an expression and a type.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A type test is an example of an operation between an expression and a type.  
  
 Use the <xref:System.Linq.Expressions.Expression.TypeIs%2A> factory method to create a TypeBinaryExpression.  
  
 The value of the <xref:System.Linq.Expressions.Expression.NodeType%2A> property of a TypeBinaryExpression object is <xref:System.Linq.Expressions.ExpressionType>.  
  
   
  
## Examples  
 The following example creates a TypeBinaryExpression object that represents a type test of a string value against the <xref:System.Int32> type.  
  
 [!CODE [System.Linq.Expressions.Expression#12](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#12)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the expression operand of a type test operation.</summary>
        <value>An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the expression operand of a type test operation.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override sealed System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the node type of this Expression. Extension nodes should return &lt;see cref="T:System.Linq.Expressions.ExpressionType"&gt; when overriding this method.</summary>
        <value>The &lt;see cref="T:System.Linq.Expressions.ExpressionType"&gt; of the expression.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override sealed Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the static type of the expression that this &lt;xref:System.Linq.Expressions.TypeBinaryExpression.Expression%2A&gt; represents.</summary>
        <value>The Type that represents the static type of the expression.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOperand">
      <MemberSignature Language="C#" Value="public Type TypeOperand { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TypeOperand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type operand of a type test operation.</summary>
        <value>A &lt;see cref="T:System.Type"&gt; that represents the type operand of a type test operation.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.TypeBinaryExpression Update (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.TypeBinaryExpression Update(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">The &lt;xref:System.Linq.Expressions.TypeBinaryExpression.Expression%2A&gt; property of the result.</param>
        <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
        <returns>This expression if no children are changed or an expression with the updated children.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>