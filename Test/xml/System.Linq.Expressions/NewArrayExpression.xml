<Type Name="NewArrayExpression" FullName="System.Linq.Expressions.NewArrayExpression">
  <TypeSignature Language="C#" Value="public class NewArrayExpression : System.Linq.Expressions.Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NewArrayExpression extends System.Linq.Expressions.Expression" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Linq.Expressions.Expression</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Linq.Expressions.Expression/NewArrayExpressionProxy))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents creating a new array and possibly initializing the elements of the new array.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table shows the different factory methods that you can use to create a NewArrayExpression depending on the <xref:System.Linq.Expressions.Expression.NodeType%2A> you require.  
  
|<xref:System.Linq.Expressions.Expression.NodeType%2A>|Factory Methods|  
|----------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------|  
|<xref:System.Linq.Expressions.ExpressionType>|<xref:System.Linq.Expressions.Expression.NewArrayBounds%2A>|  
|<xref:System.Linq.Expressions.ExpressionType>|<xref:System.Linq.Expressions.Expression.NewArrayInit%2A>|  
  
   
  
## Examples  
 The following example creates a NewArrayExpression object that represents creating and initializing a one-dimensional array of strings.  
  
 [!CODE [System.Linq.Expressions.Expression#1](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#1)]  
  
 The next example creates a NewArrayExpression object that represents creating a two-dimensional array of strings.  
  
 [!CODE [System.Linq.Expressions.Expression#2](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">The visitor to visit this node with.</param>
        <summary>Dispatches to the specific visit method for this node type. For example, &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; calls the &lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall%2A&gt;.</summary>
        <returns>The result of visiting this node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This default implementation for <xref:System.Linq.Expressions.ExpressionType> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expressions">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt; Expressions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Linq.Expressions.Expression&gt; Expressions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Linq.Expressions.Expression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bounds of the array if the value of the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property is &lt;xref:System.Linq.Expressions.ExpressionType&gt;, or the values to initialize the elements of the new array if the value of the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property is &lt;xref:System.Linq.Expressions.ExpressionType&gt;.</summary>
        <value>A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; of &lt;xref:System.Linq.Expressions.Expression&gt; objects which represent either the bounds of the array or the initialization values.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public override sealed Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the static type of the expression that this &lt;see cref="T:System.Linq.Expressions.Expression"&gt; represents.</summary>
        <value>The Type that represents the static type of the expression.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.NewArrayExpression Update (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.NewArrayExpression Update(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions">The &lt;xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A&gt; property of the result.</param>
        <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
        <returns>This expression if no children are changed or an expression with the updated children.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>