<Type Name="Expression" FullName="System.Linq.Expressions.Expression">
  <TypeSignature Language="C#" Value="public abstract class Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Expression extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides the base class from which the classes that represent expression tree nodes are derived. It also contains `static` (`Shared` in Visual Basic) factory methods to create the various node types. This is an `abstract` class.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to create a block expression. The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#13](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Constructs a new instance of &lt;see cref="T:System.Linq.Expressions.Expression"&gt;.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Linq.Expressions.ExpressionType nodeType, class System.Type type) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nodeType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="nodeType">The &lt;see cref="T:System.Linq.Expressions.ExpressionType"&gt; to set as the node type.</param>
        <param name="type">The &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; of this &lt;xref:System.Linq.Expressions.Expression&gt;.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Linq.Expressions.Expression"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is called from constructors in derived classes.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">The visitor to visit this node with.</param>
        <summary>Dispatches to the specific visit method for this node type. For example, &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; calls the &lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall%2A&gt;.</summary>
        <returns>The result of visiting this node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This default implementation for <xref:System.Linq.Expressions.ExpressionType> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>. Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class. However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic addition operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the selected implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.  
  
   
  
## Examples  
 The following code example shows how to create an expression that adds two integers.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#1](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an addition assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#18](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an addition assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an addition assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an addition assignment operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an addition assignment operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an addition assignment operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic addition operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The implementing method for the operation is chosen based on the following rules:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined addition operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise `AND` operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#2](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise `AND` operation. The implementing method can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The implementing method for the operation is chosen based on the following rules:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `AND` operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a conditional `AND` operation that evaluates the second operand only if the first operand evaluates to `true`.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
    > [!NOTE]
    >  The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](../../add/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.  
  
-   Otherwise, if .Type and .Type are Boolean types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   .Type and .Type are the same Boolean type.  
  
-   If .Type and .Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.  
  
-   If .Type and .Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.  
  
   
  
## Examples  
 The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#19](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a conditional `AND` operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The implementing method for the operation is chosen based on the following rules:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
    > [!NOTE]
    >  The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](../../add/includes/vbprvb-md.md)]. However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator. Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.  
  
-   Otherwise, if .Type and .Type are Boolean types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   .Type and .Type are the same Boolean type.  
  
-   If .Type and .Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `AND` operator.  
  
-   If .Type and .Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise AND assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise AND assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise AND assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">An expression that represents the multidimensional array.</param>
        <param name="indexes">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; containing expressions used to index the array.</param>
        <summary>Creates an &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt; to access a multidimensional array.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.  
  
   
  
## Examples  
 The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#21](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">An expression representing the array to index.</param>
        <param name="indexes">An array that contains expressions used to index the array.</param>
        <summary>Creates an &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt; to access an array.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.  
  
 For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.  
  
   
  
## Examples  
 The following code example shows how to change a value of an array element by using the `ArrayAccess` method.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#20](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; property equal to.</param>
        <param name="indexes">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents applying an array index operator to an array of rank more than one.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each element of  must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent an array type whose rank matches the number of elements in .  
  
 If the rank of .Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to  and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of . The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of .Type.  
  
 If the rank of .Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of .  
  
   
  
## Examples  
 The following example demonstrates how to use the [ArrayIndex(Expression, Expression\[\])](assetId:///M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])?qualifyHint=False&autoUpgrade=False) method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.  
  
 [!CODE [System.Linq.Expressions.Expression#3](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="index">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents applying an array index operator to an array of rank one.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 must represent an index of type <xref:System.Int32>.  
  
 The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of .Type. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; instances - indexes for the array index operation.</param>
        <param name="indexes">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents applying an array index operator to a multidimensional array.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each element of  must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent an array type whose rank matches the number of elements in .  
  
 If the rank of .Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>. The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to  and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of . The <xref:System.Linq.Expressions.Expression.Type%2A> property of the<xref:System.Linq.Expressions.BinaryExpression> represents the element type of .Type.  
  
 If the rank of .Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>. The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of .  
  
   
  
## Examples  
 The following example demonstrates how to use the ArrayIndex method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.  
  
 [!CODE [System.Linq.Expressions.Expression#3](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ArrayLength(class System.Linq.Expressions.Expression array) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents an expression for obtaining the length of a one-dimensional array.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent an array type.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Assign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Assign` expression copies a value for value types, and it copies a reference for reference types.  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents an assignment operation.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#12](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="member">A &lt;see cref="T:System.Reflection.MemberInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; property equal to.</param>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.MemberAssignment.Expression%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberAssignment"&gt; that represents the initialization of a field or property.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberAssignment"&gt; that has &lt;xref:System.Linq.Expressions.MemberBinding.BindingType%2A&gt; equal to &lt;xref:System.Linq.Expressions.MemberBindingType&gt; and the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; and &lt;xref:System.Linq.Expressions.MemberAssignment.Expression%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents a property accessor method.</param>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.MemberAssignment.Expression%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberAssignment"&gt; that represents the initialization of a member by using a property accessor method.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberAssignment"&gt; that has the &lt;xref:System.Linq.Expressions.MemberBinding.BindingType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.MemberBindingType&gt;, the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; property set to the &lt;xref:System.Reflection.PropertyInfo&gt; that represents the property accessed in , and the &lt;xref:System.Linq.Expressions.MemberAssignment.Expression%2A&gt; property set to .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions">The expressions in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains the given expressions and has no variables.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the block expression is executed, it returns the value of the last expression in the block.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expressions">The expressions in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains the given expressions and has no variables.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the block expression is executed, it returns the value of the last expression in the block.  
  
   
  
## Examples  
 The following code example shows how to create a block expression. The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#13](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">The variables in the block.</param>
        <param name="expressions">The expressions in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains the given variables and expressions.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the block expression is executed, it returns the value of the last expression in the block.  
  
   
  
## Examples  
 The following code example shows how to pass a parameter to a block expression and process this parameter within a block.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#14](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">The variables in the block.</param>
        <param name="expressions">The expressions in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains the given variables and expressions.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the block expression is executed, it returns the value of the last expression in the block.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">The first expression in the block.</param>
        <param name="arg1">The second expression in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains two expressions and has no variables.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the block expression is executed, it returns the value of the last expression in the block.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">The result type of the block.</param>
        <param name="expressions">The expressions in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains the given expressions, has no variables and has specific result type.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">The result type of the block.</param>
        <param name="expressions">The expressions in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains the given expressions, has no variables and has specific result type.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">The first expression in the block.</param>
        <param name="arg1">The second expression in the block.</param>
        <param name="arg2">The third expression in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains three expressions and has no variables.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the block expression is executed, it returns the value of the last expression in the block.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">The result type of the block.</param>
        <param name="variables">The variables in the block.</param>
        <param name="expressions">The expressions in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains the given variables and expressions.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">The result type of the block.</param>
        <param name="variables">The variables in the block.</param>
        <param name="expressions">The expressions in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains the given variables and expressions.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">The first expression in the block.</param>
        <param name="arg1">The second expression in the block.</param>
        <param name="arg2">The third expression in the block.</param>
        <param name="arg3">The fourth expression in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains four expressions and has no variables.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the block expression is executed, it returns the value of the last expression in the block.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">The first expression in the block.</param>
        <param name="arg1">The second expression in the block.</param>
        <param name="arg2">The third expression in the block.</param>
        <param name="arg3">The fourth expression in the block.</param>
        <param name="arg4">The fifth expression in the block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt; that contains five expressions and has no variables.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.BlockExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the block expression is executed, it returns the value of the last expression in the block.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a break statement.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Break, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , and a null value to be passed to the target label upon jumping.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the Break method.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#44](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="value">The value that will be passed to the associated label upon jumping.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a break statement. The value passed to the label upon jumping can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Break, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , and  to be passed to the target label upon jumping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="type">An &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a break statement with the specified type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Break, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , and the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to .</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="value">The value that will be passed to the associated label upon jumping.</param>
        <param name="type">An &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a break statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Break, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to , and  to be passed to the target label upon jumping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="instance">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method).</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a method that takes no arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the  parameter when you call this method.  
  
 If  represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of  must be assignable to the declaring type of the method represented by .  
  
 The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by .  
  
   
  
## Examples  
 The following code example shows how to create an expression that calls a method without arguments.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#15](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="method">The &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the target method.</param>
        <param name="arguments">A collection of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the call arguments.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a static (Shared in Visual Basic) method.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; property equal to.</param>
        <param name="arg0">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the first argument.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a `static` (`Shared` in Visual Basic) method that takes one argument.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#16](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents a `static` (`Shared` in Visual Basic) method to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; property equal to.</param>
        <param name="arguments">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a `static` (`Shared` in Visual Basic) method that has arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is not `null`, it must have the same number of elements as the number of parameters for the method represented by . Each element in  must not be `null` and must be assignable to the corresponding parameter of , possibly after *quoting*.  
  
> [!NOTE]
>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  
  
 The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if  is `null`. Otherwise, it contains the same elements as , some of which may be quoted.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by . The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; property equal to (pass `null` for a `static` (`Shared` in Visual Basic) method).</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; property equal to.</param>
        <param name="arguments">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a method that takes arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt;, &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the  parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  
  
 If  represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of  must be assignable to the declaring type of the method represented by .  
  
 If  is not `null`, it must have the same number of elements as the number of parameters for the method represented by . Each element in  must not be `null` and must be assignable to the corresponding parameter of , possibly after *quoting*.  
  
> [!NOTE]
>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  
  
 The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if  is `null`. Otherwise, it contains the same elements as , some of which may be quoted.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that specifies the instance for an instance method call (pass `null` for a `static` (`Shared` in Visual Basic) method).</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; property equal to.</param>
        <param name="arguments">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a method that takes arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt;, &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the  parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.  
  
 If  represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of  must be assignable to the declaring type of the method represented by .  
  
 If  is not `null`, it must have the same number of elements as the number of parameters for the method represented by . Each element in  must not be `null` and must be assignable to the corresponding parameter of , possibly after *quoting*.  
  
> [!NOTE]
>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  
  
 The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if  is `null`. Otherwise, it contains the same elements as , some of which may be quoted.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; property equal to.</param>
        <param name="arg0">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the first argument.</param>
        <param name="arg1">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the second argument.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a static method that takes two arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
        <param name="method">The &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the target method.</param>
        <param name="arg0">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the first argument.</param>
        <param name="arg1">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the second argument.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a method that takes two arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to create an expression that calls an instance method that has two arguments.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#17](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; whose &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property value will be searched for a specific method.</param>
        <param name="methodName">The name of the method.</param>
        <param name="typeArguments">An array of &lt;see cref="T:System.Type"&gt; objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
        <param name="arguments">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects that represents the arguments to the method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a method by calling the appropriate factory method.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt;, the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; property equal to , &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; set to the &lt;xref:System.Reflection.MethodInfo&gt; that represents the specified instance method, and &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; set to the specified arguments.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; property equal to.</param>
        <param name="arg0">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the first argument.</param>
        <param name="arg1">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the second argument.</param>
        <param name="arg2">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the third argument.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a static method that takes three arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Type type, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">The &lt;see cref="T:System.Type"&gt; that specifies the type that contains the specified `static` (`Shared` in Visual Basic) method.</param>
        <param name="methodName">The name of the method.</param>
        <param name="typeArguments">An array of &lt;see cref="T:System.Type"&gt; objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
        <param name="arguments">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects that represent the arguments to the method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a `static` (`Shared` in Visual Basic) method by calling the appropriate factory method.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt;, the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; property set to the &lt;xref:System.Reflection.MethodInfo&gt; that represents the specified `static` (`Shared` in Visual Basic) method, and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A&gt; property set to the specified arguments.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by . The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
        <param name="method">The &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the target method.</param>
        <param name="arg0">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the first argument.</param>
        <param name="arg1">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the second argument.</param>
        <param name="arg2">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the third argument.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a method that takes three arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; property equal to.</param>
        <param name="arg0">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the first argument.</param>
        <param name="arg1">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the second argument.</param>
        <param name="arg2">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the third argument.</param>
        <param name="arg3">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the fourth argument.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a static method that takes four arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; property equal to.</param>
        <param name="arg0">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the first argument.</param>
        <param name="arg1">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the second argument.</param>
        <param name="arg2">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the third argument.</param>
        <param name="arg3">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the fourth argument.</param>
        <param name="arg4">The &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the fifth argument.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that represents a call to a static method that takes five arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MethodCallExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MethodCallExpression.Object%2A&gt; and &lt;xref:System.Linq.Expressions.MethodCallExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public virtual bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.</summary>
        <value>True if the node can be reduced, otherwise false.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">A &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; representing a reference to the &lt;xref:System.Exception&gt; object caught by this handler.</param>
        <param name="body">The body of the catch statement.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt; representing a catch statement with a reference to the caught &lt;xref:System.Exception&gt; object for use in the handler body.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; of &lt;xref:System.Exception&gt; this &lt;xref:System.Linq.Expressions.CatchBlock&gt; will handle.</param>
        <param name="body">The body of the catch statement.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt; representing a catch statement.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">A &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; representing a reference to the &lt;xref:System.Exception&gt; object caught by this handler.</param>
        <param name="body">The body of the catch statement.</param>
        <param name="filter">The body of the &lt;see cref="T:System.Exception"&gt; filter.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt; representing a catch statement with an &lt;xref:System.Exception&gt; filter and a reference to the caught &lt;xref:System.Exception&gt; object.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; of &lt;xref:System.Exception&gt; this &lt;xref:System.Linq.Expressions.CatchBlock&gt; will handle.</param>
        <param name="body">The body of the catch statement.</param>
        <param name="filter">The body of the &lt;see cref="T:System.Exception"&gt; filter.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt; representing a catch statement with an &lt;xref:System.Exception&gt; filter but no reference to the caught &lt;xref:System.Exception&gt; object.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearDebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
      </Parameters>
      <Docs>
        <param name="document">The &lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo"&gt; that represents the source file.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DebugInfoExpression"&gt; for clearing a sequence point.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.DebugInfoExpression"&gt; for clearning a sequence point.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a coalescing operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
#### Result Type  
 The following rules determine the result type:  
  
-   If .Type represents a nullable type and .Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of .Type.  
  
-   Otherwise, if .Type is implicitly convertible to .Type, the result type is .Type.  
  
-   Otherwise, if the non-nullable equivalent of .Type is implicitly convertible to .Type, the result type is .Type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a coalescing operation, given a conversion function.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.  
  
 The following rules determine the result type:  
  
-   If .Type represents a nullable type and .Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of .Type.  
  
-   Otherwise, if .Type is implicitly convertible to .Type, the result type is .Type.  
  
-   Otherwise, if the non-nullable equivalent of .Type is implicitly convertible to .Type, the result type is .Type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.Test%2A&gt; property equal to.</param>
        <param name="ifTrue">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A&gt; property equal to.</param>
        <param name="ifFalse">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ConditionalExpression"&gt; that represents a conditional statement.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ConditionalExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ConditionalExpression.Test%2A&gt;, &lt;xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A&gt;, and &lt;xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of .  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents a conditional statement. If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#3](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="test">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.Test%2A&gt; property equal to.</param>
        <param name="ifTrue">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A&gt; property equal to.</param>
        <param name="ifFalse">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A&gt; property equal to.</param>
        <param name="type">A &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ConditionalExpression"&gt; that represents a conditional statement.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ConditionalExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ConditionalExpression.Test%2A&gt;, &lt;xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A&gt;, and &lt;xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method allows explicitly unifying the result type of the conditional expression in cases where the types of  and  expressions are not equal. Types of both  and  must be implicitly reference assignable to the result type. The  is allowed to be <xref:System.Void>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An &lt;see cref="T:System.Object"&gt; to set the &lt;xref:System.Linq.Expressions.ConstantExpression.Value%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ConstantExpression"&gt; that has the &lt;xref:System.Linq.Expressions.ConstantExpression.Value%2A&gt; property set to the specified value.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ConstantExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ConstantExpression.Value%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of . If  is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.  
  
 To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents a constant value.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#4](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">An &lt;see cref="T:System.Object"&gt; to set the &lt;xref:System.Linq.Expressions.ConstantExpression.Value%2A&gt; property equal to.</param>
        <param name="type">A &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ConstantExpression"&gt; that has the &lt;xref:System.Linq.Expressions.ConstantExpression.Value%2A&gt; and &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; properties set to the specified values.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ConstantExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ConstantExpression.Value%2A&gt; and &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be useful for representing values of nullable types.  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#22](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a continue statement.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Continue, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , and a null value to be passed to the target label upon jumping.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create a loop expression that uses the Continue method.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#46](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="type">An &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a continue statement with the specified type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Continue, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to , and a null value to be passed to the target label upon jumping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <param name="type">A &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a type conversion operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; and &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If either .Type or  is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise:  
  
    -   If both .Type and  represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  
  
    -   If either .Type or  is a reference type and an explicit boxing, unboxing, or reference conversion exists from .Type to , the implementing method is `null`.  
  
#### Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to , the node is not lifted.  
  
-   If one or both of .Type or  is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  
  
 If the implementing method is `null`:  
  
-   If both .Type and  are non-nullable, the node is not lifted.  
  
-   Otherwise the node is lifted.  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents a type convertion operation.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#23](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <param name="type">A &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a conversion operation for which the implementing method is specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;, &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;, and &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.  
  
-   Otherwise, if either .Type or  is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise:  
  
    -   If both .Type and  represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  
  
    -   If either .Type or  is a reference type and an explicit boxing, unboxing, or reference conversion exists from .Type to , the implementing method is `null`.  
  
#### Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to , the node is not lifted.  
  
-   If either or both of .Type or  are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  
  
 If the implementing method is `null`:  
  
-   If both .Type and  are non-nullable, the node is not lifted.  
  
-   Otherwise the node is lifted.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <param name="type">A &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a conversion operation that throws an exception if the target type is overflowed.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; and &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If either .Type or  is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise:  
  
    -   If both .Type and  represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  
  
    -   If either .Type or  is a reference type and an explicit boxing, unboxing, or reference conversion exists from .Type to , the implementing method is `null`.  
  
#### Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to , the node is not lifted.  
  
-   If either or both of .Type or  are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  
  
 If the implementing method is `null`:  
  
-   If both .Type and  are non-nullable, the node is not lifted.  
  
-   Otherwise the node is lifted.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <param name="type">A &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt;, &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt;, and &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`. If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`. Otherwise, it is `false`.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If method is not `null`, it is the implementing method. It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.  
  
-   Otherwise, if either .Type or  is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise:  
  
    -   If both .Type and  represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.  
  
    -   If either .Type or  is a reference type and an explicit boxing, unboxing, or reference conversion exists from .Type to , the implementing method is `null`.  
  
#### Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to , the node is not lifted.  
  
-   If either or both of .Type or  are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.  
  
 If the implementing method is `null`:  
  
-   If both .Type and  are non-nullable, the node is not lifted.  
  
-   Otherwise the node is lifted.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression DebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
        <Parameter Name="startLine" Type="System.Int32" />
        <Parameter Name="startColumn" Type="System.Int32" />
        <Parameter Name="endLine" Type="System.Int32" />
        <Parameter Name="endColumn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document">The &lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo"&gt; that represents the source file.</param>
        <param name="startLine">The start line of this &lt;see cref="T:System.Linq.Expressions.DebugInfoExpression"&gt;. Must be greater than 0.</param>
        <param name="startColumn">The start column of this &lt;see cref="T:System.Linq.Expressions.DebugInfoExpression"&gt;. Must be greater than 0.</param>
        <param name="endLine">The end line of this &lt;see cref="T:System.Linq.Expressions.DebugInfoExpression"&gt;. Must be greater or equal than the start line.</param>
        <param name="endColumn">The end column of this &lt;see cref="T:System.Linq.Expressions.DebugInfoExpression"&gt;. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DebugInfoExpression"&gt; with the specified span.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.DebugInfoExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to decrement.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the decrementing of the expression by 1.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the decremented expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This expression is functional and does not change the value of the object passed to it.  
  
   
  
## Examples  
 The following code example shows how to create an expression that substracts 1 from a given value.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#5](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to decrement.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the implementing method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the decrementing of the expression by 1.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the decremented expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This expression is functional and does not change the value of the object passed to it.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Default (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Default(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DefaultExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to the specified type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DefaultExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to the specified type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to create an expression that represents a default vaule for a given type.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#6](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic division operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.  
  
   
  
## Examples  
 The following code example shows how to create an expression that divides divides its first argument by its second argument.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#7](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic division operation. The implementing method can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined division operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined division operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a division assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a division assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a division assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="returnType">The result type of the dynamic expression.</param>
        <param name="arguments">The arguments to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt; and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="returnType">The result type of the dynamic expression.</param>
        <param name="arg0">The first argument to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt; and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="returnType">The result type of the dynamic expression.</param>
        <param name="arguments">The arguments to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt; and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="returnType">The result type of the dynamic expression.</param>
        <param name="arg0">The first argument to the dynamic operation.</param>
        <param name="arg1">The second argument to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt; and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="returnType">The result type of the dynamic expression.</param>
        <param name="arg0">The first argument to the dynamic operation.</param>
        <param name="arg1">The second argument to the dynamic operation.</param>
        <param name="arg2">The third argument to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt; and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="returnType">The result type of the dynamic expression.</param>
        <param name="arg0">The first argument to the dynamic operation.</param>
        <param name="arg1">The second argument to the dynamic operation.</param>
        <param name="arg2">The third argument to the dynamic operation.</param>
        <param name="arg3">The fourth argument to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt; and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="addMethod">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt; property equal to.</param>
        <param name="arguments">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects to set the &lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt; property equal to.</param>
        <summary>Creates an &lt;see cref="T:System.Linq.Expressions.ElementInit"&gt;, given an &lt;xref:System.Collections.Generic.IEnumerable%601&gt; as the second argument.</summary>
        <returns>An &lt;see cref="T:System.Linq.Expressions.ElementInit"&gt; that has the &lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt; and &lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must represent an instance method named "Add" (case insensitive). The add method must have the same number of parameters as the number of elements in . The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in  must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.  
  
> [!NOTE]
>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  
  
   
  
## Examples  
 The following example demonstrates how to use the [ElementInit(MethodInfo, Expression\[\])](assetId:///M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])?qualifyHint=False&autoUpgrade=False) method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.  
  
 [!CODE [System.Linq.Expressions.Expression#4](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="addMethod">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt; property equal to.</param>
        <param name="arguments">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects to set the &lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt; property equal to.</param>
        <summary>Creates an &lt;see cref="T:System.Linq.Expressions.ElementInit"&gt;, given an array of values as the second argument.</summary>
        <returns>An &lt;see cref="T:System.Linq.Expressions.ElementInit"&gt; that has the &lt;xref:System.Linq.Expressions.ElementInit.AddMethod%2A&gt; and &lt;xref:System.Linq.Expressions.ElementInit.Arguments%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must represent an instance method named "Add" (case insensitive). The add method must have the same number of parameters as the number of elements in . The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in  must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.  
  
> [!NOTE]
>  An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  
  
   
  
## Examples  
 The following example demonstrates how to use the ElementInit method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.  
  
 [!CODE [System.Linq.Expressions.Expression#4](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Empty() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an empty expression that has &lt;see cref="T:System.Void"&gt; type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DefaultExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to &lt;xref:System.Void&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An empty expression can be used where an expression is expected but no action is desired. For example, you can use an empty expression as the last expression in a block expression. In this case, the block expression's return value is void.  
  
   
  
## Examples  
 The following code example shows how to create an empty expression and add it to a block expression.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#31](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an equality comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.  
  
   
  
## Examples  
 The following code example shows how to create an expression that checks whether the values of its two arguments are equal.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#8](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="liftToNull">`true` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `true`; `false` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `false`.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an equality comparison. The implementing method can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise `XOR` operation, using `op_ExclusiveOr` for user-defined types.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents the logical XOR operation.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#9](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise `XOR` operation, using `op_ExclusiveOr` for user-defined types. The implementing method can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the chosen implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined `XOR` operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise XOR assignment operation, using `op_ExclusiveOr` for user-defined types.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise XOR assignment operation, using `op_ExclusiveOr` for user-defined types.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise XOR assignment operation, using `op_ExclusiveOr` for user-defined types.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Reflection.FieldInfo field) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.MemberExpression.Expression%2A&gt; property equal to. For `static` (`Shared` in Visual Basic),  must be `null`.</param>
        <param name="field">The &lt;see cref="T:System.Reflection.FieldInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that represents accessing a field.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MemberExpression.Expression%2A&gt; and &lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, string fieldName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; whose &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; contains a field named . This can be null for static fields.</param>
        <param name="fieldName">The name of a field to be accessed.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that represents accessing a field given the name of the field.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt;, the &lt;xref:System.Linq.Expressions.MemberExpression.Expression%2A&gt; property set to , and the &lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt; property set to the &lt;xref:System.Reflection.FieldInfo&gt; that represents the field denoted by .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by .  
  
 This method searches .Type and its base types for a field that has the name . Public fields are given preference over non-public fields. If a matching field is found, this method passes  and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents accessing a field.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#37](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#37)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Type type, string fieldName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">The containing object of the field. This can be null for static fields.</param>
        <param name="type">The &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; that contains the field.</param>
        <param name="fieldName">The field to be accessed.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that represents accessing a field.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionType">
      <MemberSignature Language="C#" Value="public static Type GetActionType (Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetActionType(class System.Type[] typeArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">An array of up to sixteen &lt;see cref="T:System.Type"&gt; objects that specify the type arguments for the `System.Action` delegate type.</param>
        <summary>Creates a &lt;see cref="T:System.Type"&gt; object that represents a generic `System.Action` delegate type that has specific type arguments.</summary>
        <returns>The type of a `System.Action` delegate that has the specified type arguments.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As an example, if the elements of  represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateType">
      <MemberSignature Language="C#" Value="public static Type GetDelegateType (Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetDelegateType(class System.Type[] typeArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">The type arguments of the delegate.</param>
        <summary>Gets a &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; object that represents a generic `System.Func` or `System.Action` delegate type that has specific type arguments.</summary>
        <returns>The delegate type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The last type argument determines the return type of the delegate. If no Func or Action is large enough, it will generate a custom delegate type.  
  
 As with Func, the last argument is the return type. It can be set to System.Void to produce an Action.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFuncType">
      <MemberSignature Language="C#" Value="public static Type GetFuncType (Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetFuncType(class System.Type[] typeArgs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">An array of one to seventeen &lt;see cref="T:System.Type"&gt; objects that specify the type arguments for the `System.Func` delegate type.</param>
        <summary>Creates a &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; object that represents a generic `System.Func` delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
        <returns>The type of a `System.Func` delegate that has the specified type arguments.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 must contain at least one and at most seventeen elements.  
  
 As an example, if the elements of  represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a "go to" statement.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Goto, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to the specified value, and a null value to be passed to the target label upon jumping.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#45](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="value">The value that will be passed to the associated label upon jumping.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a "go to" statement. The value passed to the label upon jumping can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Goto, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , and  to be passed to the target label upon jumping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="type">An &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a "go to" statement with the specified type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Goto, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to the specified value, the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to , and a null value to be passed to the target label upon jumping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="value">The value that will be passed to the associated label upon jumping.</param>
        <param name="type">An &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a "go to" statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Goto, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to , and  to be passed to the target label upon jumping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a "greater than" numeric comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.  
  
   
  
## Examples  
 The following code example shows how to create an expression that compares two integers.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#10](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="liftToNull">`true` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `true`; `false` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `false`.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a "greater than" numeric comparison. The implementing method can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation :  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a "greater than or equal" numeric comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.  
  
   
  
## Examples  
 The following code example shows how to create an expression that compares two integers.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#11](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="liftToNull">`true` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `true`; `false` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `false`.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a "greater than or equal" numeric comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfThen">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThen(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.Test%2A&gt; property equal to.</param>
        <param name="ifTrue">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ConditionalExpression"&gt; that represents a conditional block with an `if` statement.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ConditionalExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ConditionalExpression.Test%2A&gt;, &lt;xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A&gt;, properties set to the specified values. The &lt;xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A&gt; property is set to default expression and the type of the resulting &lt;see cref="T:System.Linq.Expressions.ConditionalExpression"&gt; returned by this method is &lt;xref:System.Void&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to create an expression that represents a conditional block.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#32](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfThenElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThenElse(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.Test%2A&gt; property equal to.</param>
        <param name="ifTrue">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A&gt; property equal to.</param>
        <param name="ifFalse">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ConditionalExpression"&gt; that represents a conditional block with `if` and `else` statements.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ConditionalExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ConditionalExpression.Test%2A&gt;, &lt;xref:System.Linq.Expressions.ConditionalExpression.IfTrue%2A&gt;, and &lt;xref:System.Linq.Expressions.ConditionalExpression.IfFalse%2A&gt; properties set to the specified values. The type of the resulting &lt;see cref="T:System.Linq.Expressions.ConditionalExpression"&gt; returned by this method is &lt;xref:System.Void&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example shows how to create an expression that represents a conditional block.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#33](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to increment.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the incrementing of the expression value by 1.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the incremented expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This expression is functional and does not change the value of the object that is passed to it.  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents an increment operation.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#24](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to increment.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the implementing method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the incrementing of the expression by 1.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the incremented expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This expression is functional and does not change the value of the object that is passed to it.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the delegate or lambda expression to be applied to.</param>
        <param name="arguments">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects that represent the arguments that the delegate or lambda expression is applied to.</param>
        <summary>Creates an &lt;see cref="T:System.Linq.Expressions.InvocationExpression"&gt; that applies a delegate or lambda expression to a list of argument expressions.</summary>
        <returns>An &lt;see cref="T:System.Linq.Expressions.InvocationExpression"&gt; that applies the specified delegate or lambda expression to the provided arguments.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by .Type.  
  
 The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if  is `null`. Otherwise, it contains the same elements as  except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.  
  
> [!NOTE]
>  An element will be quoted only if the corresponding parameter of the delegate represented by  is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  
  
   
  
## Examples  
 The following example demonstrates how to use the [Invoke(Expression, Expression\[\])](assetId:///M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])?qualifyHint=False&autoUpgrade=False) method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.  
  
 [!CODE [System.Linq.Expressions.Expression#6](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the delegate or lambda expression to be applied.</param>
        <param name="arguments">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects that represent the arguments that the delegate or lambda expression is applied to.</param>
        <summary>Creates an &lt;see cref="T:System.Linq.Expressions.InvocationExpression"&gt; that applies a delegate or lambda expression to a list of argument expressions.</summary>
        <returns>An &lt;see cref="T:System.Linq.Expressions.InvocationExpression"&gt; that applies the specified delegate or lambda expression to the provided arguments.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by .Type.  
  
 The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if  is `null`. Otherwise, it contains the same elements as  except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.  
  
> [!NOTE]
>  An element will be quoted only if the corresponding parameter of the delegate represented by  is of type <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  
  
   
  
## Examples  
 The following example demonstrates how to use the Invoke method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.  
  
 [!CODE [System.Linq.Expressions.Expression#6](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to evaluate.</param>
        <summary>Returns whether the expression evaluates to false.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to evaluate.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the implementing method.</param>
        <summary>Returns whether the expression evaluates to false.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to evaluate.</param>
        <summary>Returns whether the expression evaluates to true.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to evaluate.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the implementing method.</param>
        <summary>Returns whether the expression evaluates to true.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; representing a label with void type and no name.</summary>
        <returns>The new &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#43](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; which this &lt;xref:System.Linq.Expressions.LabelExpression&gt; will be associated with.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LabelExpression"&gt; representing a label without a default value.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LabelExpression"&gt; without a default value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the label.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; representing a label with void type and the given name.</summary>
        <returns>The new &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type of value that is passed when jumping to the label.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; representing a label with the given type.</summary>
        <returns>The new &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#44](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; which this &lt;xref:System.Linq.Expressions.LabelExpression&gt; will be associated with.</param>
        <param name="defaultValue">The value of this &lt;see cref="T:System.Linq.Expressions.LabelExpression"&gt; when the label is reached through regular control flow.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LabelExpression"&gt; representing a label with the given default value.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LabelExpression"&gt; with the given default value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type, string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of value that is passed when jumping to the label.</param>
        <param name="name">The name of the label.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; representing a label with the given type and name.</summary>
        <returns>The new &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="parameters">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ParameterExpression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that has the &lt;xref:System.Linq.Expressions.LambdaExpression.NodeType%2A&gt; property equal to Lambda and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="parameters">An array of &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; by first constructing a delegate type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must not have more than sixteen elements.  
  
 The elements of  must be reference equal to the parameter expressions in .  
  
 This method constructs an appropriate delegate type from one of the `System.Func` generic delegates. It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="tailCall">A &lt;see cref="T:System.Boolean"&gt; that indicates if tail call optimization will be applied when compiling the created expression.</param>
        <param name="parameters">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ParameterExpression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that has the &lt;xref:System.Linq.Expressions.LambdaExpression.NodeType%2A&gt; property equal to Lambda and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="tailCall">A &lt;see cref="T:System.Boolean"&gt; that indicates if tail call optimization will be applied when compiling the created expression.</param>
        <param name="parameters">An array that contains &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that has the &lt;xref:System.Linq.Expressions.LambdaExpression.NodeType%2A&gt; property equal to Lambda and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="name">The name for the lambda. Used for emitting debug information.</param>
        <param name="parameters">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ParameterExpression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that has the &lt;xref:System.Linq.Expressions.LambdaExpression.NodeType%2A&gt; property equal to Lambda and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">A &lt;see cref="T:System.Type"&gt; that represents a delegate signature for the lambda.</param>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="parameters">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ParameterExpression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</summary>
        <returns>An object that represents a lambda expression which has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  
  
 The number of parameters for the delegate type represented by must equal the length of .  
  
 The elements of  must be reference equal to the parameter expressions in .  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to . If  is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.  
  
   
  
## Examples  
 The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#42](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">A &lt;see cref="T:System.Type"&gt; that represents a delegate signature for the lambda.</param>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="parameters">An array of &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; by first constructing a delegate type. It can be used when the delegate type is not known at compile time.</summary>
        <returns>An object that represents a lambda expression which has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>. The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.  
  
 The number of parameters for the delegate type represented by  must equal the length of .  
  
 The elements of  must be reference equal to the parameter expressions in .  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to . If  is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="name">The name for the lambda. Used for emitting debug information.</param>
        <param name="tailCall">A &lt;see cref="T:System.Boolean"&gt; that indicates if tail call optimization will be applied when compiling the created expression.</param>
        <param name="parameters">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ParameterExpression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that has the &lt;xref:System.Linq.Expressions.LambdaExpression.NodeType%2A&gt; property equal to Lambda and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">A &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; representing the delegate signature for the lambda.</param>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="tailCall">A &lt;see cref="T:System.Boolean"&gt; that indicates if tail call optimization will be applied when compiling the created expression.</param>
        <param name="parameters">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ParameterExpression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that has the &lt;xref:System.Linq.Expressions.LambdaExpression.NodeType%2A&gt; property equal to Lambda and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">A &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; representing the delegate signature for the lambda.</param>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="tailCall">A &lt;see cref="T:System.Boolean"&gt; that indicates if tail call optimization will be applied when compiling the created expression.</param>
        <param name="parameters">An array that contains &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that has the &lt;xref:System.Linq.Expressions.LambdaExpression.NodeType%2A&gt; property equal to Lambda and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">A &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; representing the delegate signature for the lambda.</param>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="name">The name for the lambda. Used for emitting debug information.</param>
        <param name="parameters">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ParameterExpression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that has the &lt;xref:System.Linq.Expressions.LambdaExpression.NodeType%2A&gt; property equal to Lambda and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">A &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; representing the delegate signature for the lambda.</param>
        <param name="body">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; property equal to.</param>
        <param name="name">The name for the lambda. Used for emitting debug information.</param>
        <param name="tailCall">A &lt;see cref="T:System.Boolean"&gt; that indicates if tail call optimization will be applied when compiling the created expression.</param>
        <param name="parameters">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ParameterExpression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; collection.</param>
        <summary>Creates a LambdaExpression by first constructing a delegate type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that has the &lt;xref:System.Linq.Expressions.LambdaExpression.NodeType%2A&gt; property equal to Lambda and the &lt;xref:System.Linq.Expressions.LambdaExpression.Body%2A&gt; and &lt;xref:System.Linq.Expressions.LambdaExpression.Parameters%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">To be added.</typeparam>
        <param name="body">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">To be added.</typeparam>
        <param name="body">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">To be added.</typeparam>
        <param name="body">To be added.</param>
        <param name="tailCall">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">To be added.</typeparam>
        <param name="body">To be added.</param>
        <param name="tailCall">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">To be added.</typeparam>
        <param name="body">To be added.</param>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">To be added.</typeparam>
        <param name="body">To be added.</param>
        <param name="name">To be added.</param>
        <param name="tailCall">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise left-shift operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the selected implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and .Type is <xref:System.Int32>, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise left-shift operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the selected implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and .Type is <xref:System.Int32>, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined left-shift operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise left-shift assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise left-shift assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise left-shift assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a "less than" numeric comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The implementing method for the operation is chosen based on the following rules:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.  
  
   
  
## Examples  
 The following code example shows how to create an expression that compares two integers.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#25](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="liftToNull">`true` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `true`; `false` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `false`.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a "less than" numeric comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a " less than or equal" numeric comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.  
  
   
  
## Examples  
 The following code example shows how to create an expression that compares two integers.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#26](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="liftToNull">`true` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `true`; `false` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `false`.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a "less than or equal" numeric comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="member">A &lt;see cref="T:System.Reflection.MemberInfo"&gt; that represents a field or property to set the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; property equal to.</param>
        <param name="initializers">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ElementInit&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MemberListBinding.Initializers%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberListBinding"&gt; where the member is a field or property.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberListBinding"&gt; that has the &lt;xref:System.Linq.Expressions.MemberBinding.BindingType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.MemberBindingType&gt; and the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; and &lt;xref:System.Linq.Expressions.MemberListBinding.Initializers%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">A &lt;see cref="T:System.Reflection.MemberInfo"&gt; that represents a field or property to set the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; property equal to.</param>
        <param name="initializers">An array of &lt;see cref="T:System.Linq.Expressions.ElementInit"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MemberListBinding.Initializers%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberListBinding"&gt; where the member is a field or property.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberListBinding"&gt; that has the &lt;xref:System.Linq.Expressions.MemberBinding.BindingType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.MemberBindingType&gt; and the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; and &lt;xref:System.Linq.Expressions.MemberListBinding.Initializers%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents a property accessor method.</param>
        <param name="initializers">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ElementInit&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MemberListBinding.Initializers%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberListBinding"&gt; based on a specified property accessor method.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberListBinding"&gt; that has the &lt;xref:System.Linq.Expressions.MemberBinding.BindingType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.MemberBindingType&gt;, the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; property set to the &lt;xref:System.Reflection.MemberInfo&gt; that represents the property accessed in , and &lt;xref:System.Linq.Expressions.MemberListBinding.Initializers%2A&gt; populated with the elements of .</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents a property accessor method.</param>
        <param name="initializers">An array of &lt;see cref="T:System.Linq.Expressions.ElementInit"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MemberListBinding.Initializers%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberListBinding"&gt; object based on a specified property accessor method.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberListBinding"&gt; that has the &lt;xref:System.Linq.Expressions.MemberBinding.BindingType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.MemberBindingType&gt;, the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; property set to the &lt;xref:System.Reflection.MemberInfo&gt; that represents the property accessed in , and &lt;xref:System.Linq.Expressions.MemberListBinding.Initializers%2A&gt; populated with the elements of .</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; to set the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; property equal to.</param>
        <param name="initializers">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.ElementInit&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that uses specified &lt;xref:System.Linq.Expressions.ElementInit&gt; objects to initialize a collection.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; and &lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type.  
  
   
  
## Examples  
 The following example demonstrates how to use the [ListInit(NewExpression, ElementInit\[\])](assetId:///M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])?qualifyHint=False&autoUpgrade=False) method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.  
  
 [!CODE [System.Linq.Expressions.Expression#7](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; to set the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; property equal to.</param>
        <param name="initializers">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that uses a method named "Add" to add elements to a collection.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  
  
 In order to use this overload of ListInit, .Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of .  
  
 The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of . The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of . The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on .Type or its base type.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; to set the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; property equal to.</param>
        <param name="initializers">An array of &lt;see cref="T:System.Linq.Expressions.ElementInit"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that uses specified &lt;xref:System.Linq.Expressions.ElementInit&gt; objects to initialize a collection.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; and &lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type.  
  
   
  
## Examples  
 The following example demonstrates how to use the ListInit method to create a <xref:System.Linq.Expressions.ListInitExpression>that represents the initialization of a new dictionary instance with two key-value pairs.  
  
 [!CODE [System.Linq.Expressions.Expression#7](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; to set the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; property equal to.</param>
        <param name="initializers">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that uses a method named "Add" to add elements to a collection.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  
  
 In order to use this overload of ListInit, .Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument. The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of .  
  
 The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of . The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of . The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on .Type or its base type.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; to set the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; property equal to.</param>
        <param name="addMethod">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</param>
        <param name="initializers">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that uses a specified method to add elements to a collection.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  
  
 If  is `null`, .Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument. If  is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must be assignable to the argument type of the add method.  
  
 The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of . The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of . The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to .  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; to set the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; property equal to.</param>
        <param name="addMethod">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents an instance method that takes one argument, that adds an element to a collection.</param>
        <param name="initializers">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.ListInitExpression.Initializers%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that uses a specified method to add elements to a collection.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ListInitExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.ListInitExpression.NewExpression%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of  must represent a type that implements <xref:System.Collections.IEnumerable>.  
  
 If  is `null`, .Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument. If  is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter. The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must be assignable to the argument type of the add method.  
  
 The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression>contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of . The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of . The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to .  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to .Type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">The body of the loop.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LoopExpression"&gt; with the given body.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.LoopExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">The body of the loop.</param>
        <param name="break">The break target used by the loop body.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LoopExpression"&gt; with the given body and break target.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.LoopExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#44](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break, class System.Linq.Expressions.LabelTarget continue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="continue" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">The body of the loop.</param>
        <param name="break">The break target used by the loop body.</param>
        <param name="continue">The continue target used by the loop body.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.LoopExpression"&gt; with the given body.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.LoopExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binaryType">The &lt;see cref="T:System.Linq.Expressions.ExpressionType"&gt; that specifies the type of binary operation.</param>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the left operand.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the right operand.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt;, given the left and right operands, by calling an appropriate factory method.</summary>
        <returns>The &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that results from calling the appropriate factory method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls. For example, if  is <xref:System.Linq.Expressions.ExpressionType>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.  
  
   
  
## Examples  
 The following example demonstrates how to use the MakeBinary method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.  
  
 [!CODE [System.Linq.Expressions.Expression#8](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="binaryType">The &lt;see cref="T:System.Linq.Expressions.ExpressionType"&gt; that specifies the type of binary operation.</param>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the left operand.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the right operand.</param>
        <param name="liftToNull">`true` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `true`; `false` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `false`.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that specifies the implementing method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt;, given the left operand, right operand and implementing method, by calling the appropriate factory method.</summary>
        <returns>The &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that results from calling the appropriate factory method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if  is <xref:System.Linq.Expressions.ExpressionType>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The  and  parameters are ignored if the appropriate factory method does not have a corresponding parameter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="binaryType">The &lt;see cref="T:System.Linq.Expressions.ExpressionType"&gt; that specifies the type of binary operation.</param>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the left operand.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the right operand.</param>
        <param name="liftToNull">`true` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `true`; `false` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `false`.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that specifies the implementing method.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; that represents a type conversion function. This parameter is used only if  is &lt;xref:System.Linq.Expressions.ExpressionType&gt; or compound assignment..</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt;, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</summary>
        <returns>The &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that results from calling the appropriate factory method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call. For example, if  is <xref:System.Linq.Expressions.ExpressionType>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>. The ,  and  parameters are ignored if the appropriate factory method does not have a corresponding parameter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeCatchBlock">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock MakeCatchBlock(class System.Type type, class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; of &lt;xref:System.Exception&gt; this &lt;xref:System.Linq.Expressions.CatchBlock&gt; will handle.</param>
        <param name="variable">A &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; representing a reference to the &lt;xref:System.Exception&gt; object caught by this handler.</param>
        <param name="body">The body of the catch statement.</param>
        <param name="filter">The body of the &lt;see cref="T:System.Exception"&gt; filter.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt; representing a catch statement with the specified elements.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 must be non-null and match the type of  (if it is supplied).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">The type of the delegate used by the &lt;see cref="T:System.Runtime.CompilerServices.CallSite"&gt;.</param>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="arguments">The arguments to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;, &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt;, and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">The type of the delegate used by the &lt;see cref="T:System.Runtime.CompilerServices.CallSite"&gt;.</param>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="arg0">The argument to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt; and one argument.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;, &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt;, and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">The type of the delegate used by the &lt;see cref="T:System.Runtime.CompilerServices.CallSite"&gt;.</param>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="arguments">The arguments to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;, &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt;, and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">The type of the delegate used by the &lt;see cref="T:System.Runtime.CompilerServices.CallSite"&gt;.</param>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="arg0">The first argument to the dynamic operation.</param>
        <param name="arg1">The second argument to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt; and two arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;, &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt;, and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">The type of the delegate used by the &lt;see cref="T:System.Runtime.CompilerServices.CallSite"&gt;.</param>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="arg0">The first argument to the dynamic operation.</param>
        <param name="arg1">The second argument to the dynamic operation.</param>
        <param name="arg2">The third argument to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt; and three arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;, &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt;, and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">The type of the delegate used by the &lt;see cref="T:System.Runtime.CompilerServices.CallSite"&gt;.</param>
        <param name="binder">The runtime binder for the dynamic operation.</param>
        <param name="arg0">The first argument to the dynamic operation.</param>
        <param name="arg1">The second argument to the dynamic operation.</param>
        <param name="arg2">The third argument to the dynamic operation.</param>
        <param name="arg3">The fourth argument to the dynamic operation.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that represents a dynamic operation bound by the provided &lt;xref:System.Runtime.CompilerServices.CallSiteBinder&gt; and four arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.DynamicExpression"&gt; that has &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and has the &lt;xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A&gt;, &lt;xref:System.Linq.Expressions.DynamicExpression.Binder%2A&gt;, and &lt;xref:System.Linq.Expressions.DynamicExpression.Arguments%2A&gt; set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGoto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression MakeGoto(valuetype System.Linq.Expressions.GotoExpressionKind kind, class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Linq.Expressions.GotoExpressionKind" />
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="kind">The &lt;see cref="T:System.Linq.Expressions.GotoExpressionKind"&gt; of the &lt;xref:System.Linq.Expressions.GotoExpression&gt;.</param>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="value">The value that will be passed to the associated label upon jumping.</param>
        <param name="type">An &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a jump of the specified &lt;xref:System.Linq.Expressions.GotoExpressionKind&gt;. The value passed to the label upon jumping can also be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to , the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to , and  to be passed to the target label upon jumping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression MakeIndex(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">The object to which the property belongs. It should be null if the property is `static` (`shared` in Visual Basic).</param>
        <param name="indexer">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; representing the property to index.</param>
        <param name="arguments">An `IEnumerable&lt;Expression&gt;` (`IEnumerable (Of Expression)` in Visual Basic) that contains the arguments that will be used to index the property.</param>
        <summary>Creates an &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt; that represents accessing an indexed property in an object.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the object that the member belongs to. This can be null for static members.</param>
        <param name="member">The &lt;see cref="T:System.Reflection.MemberInfo"&gt; that describes the field or property to be accessed.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that represents accessing either a field or a property.</summary>
        <returns>The &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that results from calling the appropriate factory method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of . If  is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>. If  is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeTry">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt; handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression MakeTry(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.Expression fault, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.CatchBlock&gt; handlers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt;" />
      </Parameters>
      <Docs>
        <param name="type">The result type of the try expression. If null, bodh and all handlers must have identical type.</param>
        <param name="body">The body of the try block.</param>
        <param name="finally">The body of the finally block. Pass null if the try block has no finally block associated with it.</param>
        <param name="fault">The body of the fault block. Pass null if the try block has no fault block associated with it.</param>
        <param name="handlers">A collection of &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt;s representing the catch statements to be associated with the try block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.TryExpression"&gt; representing a try block with the specified elements.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.TryExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="unaryType">The &lt;see cref="T:System.Linq.Expressions.ExpressionType"&gt; that specifies the type of unary operation.</param>
        <param name="operand">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the operand.</param>
        <param name="type">The &lt;see cref="T:System.Type"&gt; that specifies the type to be converted to (pass `null` if not applicable).</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt;, given an operand, by calling the appropriate factory method.</summary>
        <returns>The &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that results from calling the appropriate factory method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if  is equal to <xref:System.Linq.Expressions.ExpressionType>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The parameter is ignored if it does not apply to the factory method that is called.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="unaryType">The &lt;see cref="T:System.Linq.Expressions.ExpressionType"&gt; that specifies the type of unary operation.</param>
        <param name="operand">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; that represents the operand.</param>
        <param name="type">The &lt;see cref="T:System.Type"&gt; that specifies the type to be converted to (pass `null` if not applicable).</param>
        <param name="method">The &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the implementing method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt;, given an operand and implementing method, by calling the appropriate factory method.</summary>
        <returns>The &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that results from calling the appropriate factory method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls. For example, if  is equal to <xref:System.Linq.Expressions.ExpressionType>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>. The  and  parameters are ignored if they do not apply to the factory method that is called.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="member">The &lt;see cref="T:System.Reflection.MemberInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; property equal to.</param>
        <param name="bindings">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.MemberBinding&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberMemberBinding"&gt; that represents the recursive initialization of members of a field or property.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberMemberBinding"&gt; that has the &lt;xref:System.Linq.Expressions.MemberBinding.BindingType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.MemberBindingType&gt; and the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; and &lt;xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must represent a field or property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">The &lt;see cref="T:System.Reflection.MemberInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; property equal to.</param>
        <param name="bindings">An array of &lt;see cref="T:System.Linq.Expressions.MemberBinding"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberMemberBinding"&gt; that represents the recursive initialization of members of a field or property.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberMemberBinding"&gt; that has the &lt;xref:System.Linq.Expressions.MemberBinding.BindingType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.MemberBindingType&gt; and the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; and &lt;xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must represent a field or property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">The &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents a property accessor method.</param>
        <param name="bindings">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.MemberBinding&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberMemberBinding"&gt; that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberMemberBinding"&gt; that has the &lt;xref:System.Linq.Expressions.MemberBinding.BindingType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.MemberBindingType&gt;, the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; property set to the &lt;xref:System.Reflection.PropertyInfo&gt; that represents the property accessed in , and &lt;xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">The &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents a property accessor method.</param>
        <param name="bindings">An array of &lt;see cref="T:System.Linq.Expressions.MemberBinding"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberMemberBinding"&gt; that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberMemberBinding"&gt; that has the &lt;xref:System.Linq.Expressions.MemberBinding.BindingType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.MemberBindingType&gt;, the &lt;xref:System.Linq.Expressions.MemberBinding.Member%2A&gt; property set to the &lt;xref:System.Reflection.PropertyInfo&gt; that represents the property accessed in , and &lt;xref:System.Linq.Expressions.MemberMemberBinding.Bindings%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; to set the &lt;xref:System.Linq.Expressions.MemberInitExpression.NewExpression%2A&gt; property equal to.</param>
        <param name="bindings">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.MemberBinding&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MemberInitExpression.Bindings%2A&gt; collection.</param>
        <summary>Represents an expression that creates a new object and initializes a property of the object.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberInitExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MemberInitExpression.NewExpression%2A&gt; and &lt;xref:System.Linq.Expressions.MemberInitExpression.Bindings%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of .  
  
   
  
## Examples  
 The following example demonstrates an expression that creates a new object and initializes a property of the object.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#40](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; to set the &lt;xref:System.Linq.Expressions.MemberInitExpression.NewExpression%2A&gt; property equal to.</param>
        <param name="bindings">An array of &lt;see cref="T:System.Linq.Expressions.MemberBinding"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.MemberInitExpression.Bindings%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberInitExpression"&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberInitExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MemberInitExpression.NewExpression%2A&gt; and &lt;xref:System.Linq.Expressions.MemberInitExpression.Bindings%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of .  
  
   
  
## Examples  
 The following example demonstrates how to use the MemberInit method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.  
  
 [!CODE [System.Linq.Expressions.Expression#9](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic remainder operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the selected implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic remainder operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The implementing method for the operation is chosen based on the following rules:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined modulus operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a remainder assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a remainder assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a remainder assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the selected implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.  
  
   
  
## Examples  
 The following code example shows how to create an expression that multiplies two values.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#27](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic multiplication operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a multiplication assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a multiplication assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a multiplication assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a multiplication assignment operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a multiplication assignment operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a multiplication assignment operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic multiplication operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the selected implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic multiplication operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined multiplication operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents an arithmetic negation operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If .Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.  
  
   
  
## Examples  
 The following example demonstrates how to create an expression that represents an arithmetic negation operation.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#50](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#50)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents an arithmetic negation operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; and &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  
  
-   If .Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents an arithmetic negation operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If .Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; and &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  
  
-   If .Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="constructor">The &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; to set the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that represents calling the specified constructor that takes no arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A &lt;see cref="T:System.Type"&gt; that has a constructor that takes no arguments.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that represents calling the parameterless constructor of the specified type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt; property set to the &lt;xref:System.Reflection.ConstructorInfo&gt; that represents the constructor without parameters for the specified type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must represent a type that has a constructor without parameters.  
  
 The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections. The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to .  
  
   
  
## Examples  
 The following example demonstrates how to use the New method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.  
  
 [!CODE [System.Linq.Expressions.Expression#10](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">The &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; to set the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt; property equal to.</param>
        <param name="arguments">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that represents calling the specified constructor with the specified arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt; and &lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must contain the same number of elements as the number of parameters for the constructor represented by . If  is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by . The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">The &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; to set the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt; property equal to.</param>
        <param name="arguments">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that represents calling the specified constructor with the specified arguments.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt; and &lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must contain the same number of elements as the number of parameters for the constructor represented by . If  is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by . The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; members) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">The &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; to set the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt; property equal to.</param>
        <param name="arguments">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt; collection.</param>
        <param name="members">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Reflection.MemberInfo&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt;, &lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt; and &lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must contain the same number of elements as the number of parameters for the constructor represented by . If  is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  
  
 If  is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If  is not `null`, it must have the same number of elements as  and each element must not be `null`. Each element of  must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by . If it represents a property, the property must have a `get` accessor. The corresponding element of  for each element of  must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the  element represents.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that  represents.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Reflection.MemberInfo[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Reflection.MemberInfo[] members) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">The &lt;see cref="T:System.Reflection.ConstructorInfo"&gt; to set the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt; property equal to.</param>
        <param name="arguments">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt; collection.</param>
        <param name="members">An array of &lt;see cref="T:System.Reflection.MemberInfo"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.NewExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.NewExpression.Constructor%2A&gt;, &lt;xref:System.Linq.Expressions.NewExpression.Arguments%2A&gt; and &lt;xref:System.Linq.Expressions.NewExpression.Members%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must contain the same number of elements as the number of parameters for the constructor represented by . If  is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.  
  
 If  is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection. If  is not `null`, it must have the same number of elements as  and each element must not be `null`. Each element of  must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by . If it represents a property, the property must be able to retrieve the value of the associated field. The corresponding element of  for each element of  must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the  element represents.  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that  represents.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; bounds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">A &lt;see cref="T:System.Type"&gt; that represents the element type of the array.</param>
        <param name="bounds">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.NewArrayExpression"&gt; that represents creating an array that has a specified rank.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.NewArrayExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of  and whose element type is .  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must represent an integral type.  
  
   
  
## Examples  
 The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.  
  
 [!CODE [System.Linq.Expressions.Expression#2](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Linq.Expressions.Expression[] bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Linq.Expressions.Expression[] bounds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">A &lt;see cref="T:System.Type"&gt; that represents the element type of the array.</param>
        <param name="bounds">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.NewArrayExpression"&gt; that represents creating an array that has a specified rank.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.NewArrayExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of  and whose element type is .  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must represent an integral type.  
  
   
  
## Examples  
 The following example demonstrates how to use the NewArrayBounds method to create an expression tree that represents creating a string array that has a rank of 2.  
  
 [!CODE [System.Linq.Expressions.Expression#2](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">A &lt;see cref="T:System.Type"&gt; that represents the element type of the array.</param>
        <param name="initializers">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; that contains &lt;xref:System.Linq.Expressions.Expression&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.NewArrayExpression"&gt; that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.NewArrayExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must represent a type that is assignable to the type represented by , possibly after it is *quoted*.  
  
> [!NOTE]
>  An element will be quoted only if  is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is .  
  
   
  
## Examples  
 The following example demonstrates how to use the NewArrayInit method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.  
  
 [!CODE [System.Linq.Expressions.Expression#1](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">A &lt;see cref="T:System.Type"&gt; that represents the element type of the array.</param>
        <param name="initializers">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A&gt; collection.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.NewArrayExpression"&gt; that represents creating a one-dimensional array and initializing it from a list of elements.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.NewArrayExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.NewArrayExpression.Expressions%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of  must represent a type that is assignable to the type represented by , possibly after it is *quoted*.  
  
> [!NOTE]
>  An element will be quoted only if  is <xref:System.Linq.Expressions.Expression>. Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType> node. The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of .  
  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is .  
  
   
  
## Examples  
 The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.  
  
 [!CODE [System.Linq.Expressions.Expression#1](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the node type of this &lt;see cref="T:System.Linq.Expressions.Expression"&gt;.</summary>
        <value>One of the &lt;see cref="T:System.Linq.Expressions.ExpressionType"&gt; values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The NodeType property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type. For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a "greater than" operation. The NodeType property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType> and <xref:System.Linq.Expressions.ExpressionType>, respectively.  
  
 The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a bitwise complement operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If .Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise, if .Type is a numeric or Boolean type, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.  
  
   
  
## Examples  
 The following example demonstrates how to create an expression that represents a logical NOT operation.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#51](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#51)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a bitwise complement operation. The implementing method can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; and &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  
  
-   If .Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an inequality comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`. Otherwise, it is `false`. The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is <xref:System.Boolean>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="liftToNull">`true` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `true`; `false` to set &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt; to `false`.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an inequality comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to . Otherwise, they are both `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is <xref:System.Boolean>.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is <xref:System.Boolean>.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is nullable <xref:System.Boolean> if  is `true` or <xref:System.Boolean> if  is `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt;.</param>
        <summary>Returns the expression representing the ones complement.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt;.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the implementing method.</param>
        <summary>Returns the expression representing the ones complement.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise `OR` operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents a logical OR operation.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#28](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise `OR` operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are integral or Boolean types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined bitwise `OR` operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise OR assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise OR assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise OR assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
    > [!NOTE]
    >  The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](../../add/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.  
  
-   Otherwise, if .Type and .Type are Boolean types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   .Type and .Type are the same Boolean type.  
  
-   If .Type and .Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.  
  
-   If .Type and .Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.  
  
   
  
## Examples  
 The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#29](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a conditional `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A>property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
    > [!NOTE]
    >  The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](../../add/includes/vbprvb-md.md)]. However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator. Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.  
  
-   Otherwise, if .Type and .Type are Boolean types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   .Type and .Type are the same Boolean type.  
  
-   If .Type and .Type are non-nullable, the node is not lifted. The type of the node is the result type of the predefined conditional `OR` operator.  
  
-   If .Type and .Type are nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type of the parameter or variable.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; node that can be used to identify a parameter or a variable in an expression tree.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; node with the specified name and type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#49](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type, string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the parameter or variable.</param>
        <param name="name">The name of the parameter or variable, used for debugging or printing purpose only.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; node that can be used to identify a parameter or a variable in an expression tree.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; and &lt;xref:System.Linq.Expressions.ParameterExpression.Name%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to apply the operations on.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the resultant expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to apply the operations on.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the implementing method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the resultant expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to apply the operations on.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the resultant expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to apply the operations on.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the implementing method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the resultant expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents raising a number to a power.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  
  
#### Node Type and Lifted versus Non-Lifted  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents raising a number to a power.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.  
  
#### Node Type and Lifted versus Non-Lifted  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents raising an expression to a power and assigning the result back to the expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents raising an expression to a power and assigning the result back to the expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents raising an expression to a power and assigning the result back to the expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to apply the operations on.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that decrements the expression by 1 and assigns the result back to the expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the resultant expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to apply the operations on.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the implementing method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that decrements the expression by 1 and assigns the result back to the expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the resultant expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to apply the operations on.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that increments the expression by 1 and assigns the result back to the expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the resultant expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to apply the operations on.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents the implementing method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that increments the expression by 1 and assigns the result back to the expression.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the resultant expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo propertyAccessor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.MemberExpression.Expression%2A&gt; property equal to. This can be null for static properties.</param>
        <param name="propertyAccessor">The &lt;see cref="T:System.Reflection.MethodInfo"&gt; that represents a property accessor method.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that represents accessing a property by using a property accessor method.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt;, the &lt;xref:System.Linq.Expressions.MemberExpression.Expression%2A&gt; property set to  and the &lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt; property set to the &lt;xref:System.Reflection.PropertyInfo&gt; that represents the property accessed in .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.  
  
 If the method represented by  is `static` (`Shared` in Visual Basic),  can be `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.PropertyInfo property) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.MemberExpression.Expression%2A&gt; property equal to. This can be null for static properties.</param>
        <param name="property">The &lt;see cref="T:System.Reflection.PropertyInfo"&gt; to set the &lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that represents accessing a property.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.MemberExpression.Expression%2A&gt; and &lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.  
  
 If the property represented by  is `static` (`Shared` in Visual Basic),  can be `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, string propertyName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; whose &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; contains a property named . This can be `null` for static properties.</param>
        <param name="propertyName">The name of a property to be accessed.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that represents accessing a property.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt;, the &lt;xref:System.Linq.Expressions.MemberExpression.Expression%2A&gt; property set to , and the &lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt; property set to the &lt;xref:System.Reflection.PropertyInfo&gt; that represents the property denoted by .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression>is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by .  
  
 This method searches .Type and its base types for a property that has the name . Public properties are given preference over non-public properties. If a matching property is found, this method passes  and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.  
  
   
  
## Examples  
 The following example shows how to create an expression that represents accessing a property.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#38](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
        <param name="indexer">The &lt;see cref="T:System.Reflection.PropertyInfo"&gt; that represents the property to index.</param>
        <param name="arguments">An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; of &lt;xref:System.Linq.Expressions.Expression&gt; objects that are used to index the property.</param>
        <summary>Creates an &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt; representing the access to an indexed property.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
        <param name="indexer">The &lt;see cref="T:System.Reflection.PropertyInfo"&gt; that represents the property to index.</param>
        <param name="arguments">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects that are used to index the property.</param>
        <summary>Creates an &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt; representing the access to an indexed property.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, string propertyName, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">The object to which the property belongs. If the property is static/shared, it must be null.</param>
        <param name="propertyName">The name of the indexer.</param>
        <param name="arguments">An array of &lt;see cref="T:System.Linq.Expressions.Expression"&gt; objects that are used to index the property.</param>
        <summary>Creates an &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt; representing the access to an indexed property.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.IndexExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Type type, string propertyName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">The containing object of the property. This can be null for static properties.</param>
        <param name="type">The &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; that contains the property.</param>
        <param name="propertyName">The property to be accessed.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; accessing a property.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyOrField">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression PropertyOrField(class System.Linq.Expressions.Expression expression, string propertyOrFieldName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyOrFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; whose &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; contains a property or field named . This can be null for static members.</param>
        <param name="propertyOrFieldName">The name of a property or field to be accessed.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that represents accessing a property or field.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.MemberExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt;, the &lt;xref:System.Linq.Expressions.MemberExpression.Expression%2A&gt; property set to , and the &lt;xref:System.Linq.Expressions.MemberExpression.Member%2A&gt; property set to the &lt;xref:System.Reflection.PropertyInfo&gt; or &lt;xref:System.Reflection.FieldInfo&gt; that represents the property or field denoted by .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by .  
  
 This method searches .Type and its base types for a property or field that has the name . Public properties and fields are given preference over non-public properties and fields. Also, properties are given preference over fields. If a matching property or field is found, this method passes  and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.  
  
   
  
## Examples  
 The following example shows how to create an expression that represents accessing a property or field.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#39](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Quote(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents an expression that has a constant value of type &lt;xref:System.Linq.Expressions.Expression&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by .Type. The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`. Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
        <returns>The reduced expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceAndCheck">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceAndCheck ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceAndCheck() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.</summary>
        <returns>The reduced expression.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unlike Reduce, this method checks that the reduced node satisfies certain invariants.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceExtensions">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceExtensions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</summary>
        <returns>The reduced expression.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a reference equality comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceNotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a reference inequality comparison.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a rethrowing of an exception.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a rethrowing of an exception.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The new &lt;see cref="T:System.Type"&gt; of the expression.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a rethrowing of an exception with a given type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a rethrowing of an exception.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a return statement.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Return, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , and a null value to be passed to the target label upon jumping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="value">The value that will be passed to the associated label upon jumping.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a return statement. The value passed to the label upon jumping can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Continue, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , and  to be passed to the target label upon jumping.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create an expression that contains the Return method.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#43](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="type">An &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a return statement with the specified type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Return, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to , and a null value to be passed to the target label upon jumping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">The &lt;see cref="T:System.Linq.Expressions.LabelTarget"&gt; that the &lt;xref:System.Linq.Expressions.GotoExpression&gt; will jump to.</param>
        <param name="value">The value that will be passed to the associated label upon jumping.</param>
        <param name="type">An &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; representing a return statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.GotoExpression"&gt; with &lt;xref:System.Linq.Expressions.GotoExpression.Kind%2A&gt; equal to Continue, the &lt;xref:System.Linq.Expressions.GotoExpression.Target%2A&gt; property set to , the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property set to , and  to be passed to the target label upon jumping.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise right-shift operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the selected implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and .Type is <xref:System.Int32>, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise right-shift operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the selected implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and .Type is <xref:System.Int32>, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined right-shift operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise right-shift assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise right-shift assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a bitwise right-shift assignment operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">A collection of &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.RuntimeVariablesExpression.Variables%2A&gt; collection.</param>
        <summary>Creates an instance of &lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"&gt;.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.RuntimeVariablesExpression.Variables%2A&gt; property set to the specified value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Linq.Expressions.ParameterExpression[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Linq.Expressions.ParameterExpression[] variables) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">An array of &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; objects to use to populate the &lt;xref:System.Linq.Expressions.RuntimeVariablesExpression.Variables%2A&gt; collection.</param>
        <summary>Creates an instance of &lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"&gt;.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.RuntimeVariablesExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.RuntimeVariablesExpression.Variables%2A&gt; property set to the specified value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the selected implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.  
  
   
  
## Examples  
 The following code example shows how to create an expression that subtracts the argument from the first argument.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#30](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic subtraction operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a subtraction assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a subtraction assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a subtraction assignment operation that does not have overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a subtraction assignment operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a subtraction assignment operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <param name="conversion">A &lt;see cref="T:System.Linq.Expressions.LambdaExpression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents a subtraction assignment operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Conversion%2A&gt; properties set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic subtraction operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; and &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the selected implementing method for the operation:  
  
-   If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt; property equal to.</param>
        <param name="right">A &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that represents an arithmetic subtraction operation that has overflow checking.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.BinaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.BinaryExpression.Left%2A&gt;, &lt;xref:System.Linq.Expressions.BinaryExpression.Right%2A&gt;, and &lt;xref:System.Linq.Expressions.BinaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are `false`. The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.  
  
 The following information describes the implementing method, the node type, and whether a node is lifted.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation :  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.  
  
-   Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either  or  represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.  
  
-   Otherwise, if .Type and .Type are numeric types, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type and .Type are assignable to the corresponding argument types of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type and .Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`:  
  
-   If .Type and .Type are both non-nullable, the node is not lifted. The type of the node is the result type of the predefined subtraction operator.  
  
-   If .Type and .Type are both nullable, the node is lifted. The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">The value to be tested against each case.</param>
        <param name="cases">The set of cases for this switch expression.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt; that represents a `switch` statement without a default case.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  
  
 Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  
  
 If  does not match any of the cases, no exception is thrown.  
  
   
  
## Examples  
 The following example demonstrates how to create an expression that represents a swtich statement without a default case.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#34](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">The value to be tested against each case.</param>
        <param name="defaultBody">The result of the switch if  does not match any of the cases.</param>
        <param name="cases">The set of cases for this switch expression.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt; that represents a `switch` statement that has a default case.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  
  
 Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  
  
 If  does not match any of the cases, the default case represented by  is run.  
  
   
  
## Examples  
 The following example demonstrates how to create an expression that represents a swtich statement that has a default case.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#35](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="switchValue">The value to be tested against each case.</param>
        <param name="defaultBody">The result of the switch if  does not match any of the cases.</param>
        <param name="comparison">The equality comparison method to use.</param>
        <param name="cases">The set of cases for this switch expression.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt; that represents a `switch` statement that has a default case.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">The value to be tested against each case.</param>
        <param name="defaultBody">The result of the switch if  does not match any of the cases.</param>
        <param name="comparison">The equality comparison method to use.</param>
        <param name="cases">The set of cases for this switch expression.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt; that represents a `switch` statement that has a default case.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="type">The result type of the switch.</param>
        <param name="switchValue">The value to be tested against each case.</param>
        <param name="defaultBody">The result of the switch if  does not match any of the cases.</param>
        <param name="comparison">The equality comparison method to use.</param>
        <param name="cases">The set of cases for this switch expression.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt; that represents a `switch` statement that has a default case.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">The result type of the switch.</param>
        <param name="switchValue">The value to be tested against each case.</param>
        <param name="defaultBody">The result of the switch if  does not match any of the cases.</param>
        <param name="comparison">The equality comparison method to use.</param>
        <param name="cases">The set of cases for this switch expression.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt; that represents a `switch` statement that has a default case..</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.SwitchExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; testValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">The body of the case.</param>
        <param name="testValues">The test values of the case.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.SwitchCase"&gt; object to be used in a &lt;xref:System.Linq.Expressions.SwitchExpression&gt; object.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.SwitchCase"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.  
  
 Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.  
  
   
  
## Examples  
 The following example demonstrates how to create an expression that represents a swtich statement that has a default case.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#35](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression[] testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression[] testValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">The body of the case.</param>
        <param name="testValues">The test values of the case.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.SwitchCase"&gt; for use in a &lt;xref:System.Linq.Expressions.SwitchExpression&gt;.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.SwitchCase"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">A &lt;see cref="T:System.String"&gt; to set the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A&gt; equal to.</param>
        <summary>Creates an instance of &lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo"&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo"&gt; that has the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A&gt; property set to the specified value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">A &lt;see cref="T:System.String"&gt; to set the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A&gt; equal to.</param>
        <param name="language">A &lt;see cref="T:System.Guid"&gt; to set the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A&gt; equal to.</param>
        <summary>Creates an instance of &lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo"&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo"&gt; that has the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A&gt; and &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A&gt; properties set to the specified value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">A &lt;see cref="T:System.String"&gt; to set the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A&gt; equal to.</param>
        <param name="language">A &lt;see cref="T:System.Guid"&gt; to set the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A&gt; equal to.</param>
        <param name="languageVendor">A &lt;see cref="T:System.Guid"&gt; to set the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor%2A&gt; equal to.</param>
        <summary>Creates an instance of &lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo"&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo"&gt; that has the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A&gt; and &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A&gt; and &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor%2A&gt; properties set to the specified value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
        <Parameter Name="documentType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">A &lt;see cref="T:System.String"&gt; to set the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A&gt; equal to.</param>
        <param name="language">A &lt;see cref="T:System.Guid"&gt; to set the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A&gt; equal to.</param>
        <param name="languageVendor">A &lt;see cref="T:System.Guid"&gt; to set the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor%2A&gt; equal to.</param>
        <param name="documentType">A &lt;see cref="T:System.Guid"&gt; to set the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.DocumentType%2A&gt; equal to.</param>
        <summary>Creates an instance of &lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo"&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.SymbolDocumentInfo"&gt; that has the &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.FileName%2A&gt; and &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.Language%2A&gt; and &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor%2A&gt; and &lt;xref:System.Linq.Expressions.SymbolDocumentInfo.DocumentType%2A&gt; properties set to the specified value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="value">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt;.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a throwing of an exception.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the exception.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the Throw method.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#47](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt;.</param>
        <param name="type">The new &lt;see cref="T:System.Type"&gt; of the expression.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a throwing of an exception with a given type.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents the exception.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a textual representation of the &lt;see cref="T:System.Linq.Expressions.Expression"&gt;.</summary>
        <returns>A textual representation of the &lt;see cref="T:System.Linq.Expressions.Expression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatch(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">The body of the try block.</param>
        <param name="handlers">The array of zero or more &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt; expressions representing the catch statements to be associated with the try block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.TryExpression"&gt; representing a try block with any number of catch statements and neither a fault nor finally block.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.TryExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#47](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatchFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">The body of the try block.</param>
        <param name="finally">The body of the finally block.</param>
        <param name="handlers">The array of zero or more &lt;see cref="T:System.Linq.Expressions.CatchBlock"&gt; expressions representing the catch statements to be associated with the try block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.TryExpression"&gt; representing a try block with any number of catch statements and a finally block.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.TryExpression"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#48](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFault">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFault(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression fault) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">The body of the try block.</param>
        <param name="fault">The body of the fault block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.TryExpression"&gt; representing a try block with a fault block and no catch statements.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.TryExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">The body of the try block.</param>
        <param name="finally">The body of the finally block.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.TryExpression"&gt; representing a try block with a finally block and no catch statements.</summary>
        <returns>The created &lt;see cref="T:System.Linq.Expressions.TryExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetActionType">
      <MemberSignature Language="C#" Value="public static bool TryGetActionType (Type[] typeArgs, out Type actionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetActionType(class System.Type[] typeArgs, class System.Type actionType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="actionType" Type="System.Type&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Action delegate type.</param>
        <param name="actionType">When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the .This parameter is passed uninitialized.</param>
        <summary>Creates a &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; object that represents a generic System.Action delegate type that has specific type arguments.</summary>
        <returns>true if generic System.Action delegate type was created for specific ; false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFuncType">
      <MemberSignature Language="C#" Value="public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetFuncType(class System.Type[] typeArgs, class System.Type funcType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="funcType" Type="System.Type&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">An array of Type objects that specify the type arguments for the System.Func delegate type.</param>
        <param name="funcType">When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the .This parameter is passed uninitialized.</param>
        <summary>Creates a &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.</summary>
        <returns>true if generic System.Func delegate type was created for specific ; false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public virtual Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the static type of the expression that this &lt;see cref="T:System.Linq.Expressions.Expression"&gt; represents.</summary>
        <value>The &lt;see cref="T:System.Type"&gt; that represents the static type of the expression.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the Type represents the static common language runtime (CLR) type of the expression that the node represents. For example, two nodes with different node types can have the same Type, as shown in the following code example.  
  
 [!CODE [System.Linq.Expressions.ExpressionDev10#36](../CodeSnippet/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression TypeAs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <param name="type">A &lt;see cref="T:System.Type"&gt; to set the &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents an explicit reference or boxing conversion where `null` is supplied if the conversion fails.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; and &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`. The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.  
  
   
  
## Examples  
 The following example demonstrates how to use the TypeAs method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.  
  
 [!CODE [System.Linq.Expressions.Expression#11](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeEqual(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;see cref="T:System.Linq.Expressions.Expression"&gt; property equal to.</param>
        <param name="type">A &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; to set the &lt;xref:System.Linq.Expressions.TypeBinaryExpression.TypeOperand%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression"&gt; that compares run-time type identity.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression"&gt; for which the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property is equal to TypeEqual and for which the &lt;xref:System.Linq.Expressions.Expression&gt; and &lt;xref:System.Linq.Expressions.TypeBinaryExpression.TypeOperand%2A&gt; properties are set to the specified values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeIs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeIs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.TypeBinaryExpression.Expression%2A&gt; property equal to.</param>
        <param name="type">A &lt;xref:System.Linq.Expressions.Expression.Type%2A&gt; to set the &lt;xref:System.Linq.Expressions.TypeBinaryExpression.TypeOperand%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression"&gt;.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.TypeBinaryExpression"&gt; for which the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property is equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and for which the &lt;xref:System.Linq.Expressions.TypeBinaryExpression.Expression%2A&gt; and &lt;xref:System.Linq.Expressions.TypeBinaryExpression.TypeOperand%2A&gt; properties are set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.  
  
   
  
## Examples  
 The following example demonstrates how to use the TypeIs method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.  
  
 [!CODE [System.Linq.Expressions.Expression#12](../CodeSnippet/VS_Snippets_CLR_System/system.Linq.Expressions.Expression#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a unary plus operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property set to the specified value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If .Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; property equal to.</param>
        <param name="method">A &lt;see cref="T:System.Reflection.MethodInfo"&gt; to set the &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; property equal to.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents a unary plus operation.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that has the &lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt; property equal to &lt;xref:System.Linq.Expressions.ExpressionType&gt; and the &lt;xref:System.Linq.Expressions.UnaryExpression.Operand%2A&gt; and &lt;xref:System.Linq.Expressions.UnaryExpression.Method%2A&gt; properties set to the specified values.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method. The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node. If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`. Otherwise, they are false.  
  
#### Implementing Method  
 The following rules determine the implementing method for the operation:  
  
-   If  is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.  
  
-   If .Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.  
  
-   Otherwise, if .Type is a numeric type, the implementing method is `null`.  
  
#### Node Type and Lifted versus Non-Lifted  
 If the implementing method is not `null`:  
  
-   If .Type is assignable to the argument type of the implementing method, the node is not lifted. The type of the node is the return type of the implementing method.  
  
-   If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:  
  
    -   .Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.  
  
    -   The return type of the implementing method is a non-nullable value type.  
  
 If the implementing method is `null`, the type of the node is .Type. If .Type is non-nullable, the node is not lifted. Otherwise, the node is lifted.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Unbox(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">An &lt;see cref="T:System.Linq.Expressions.Expression"&gt; to unbox.</param>
        <param name="type">The new &lt;see cref="T:System.Type"&gt; of the expression.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt; that represents an explicit unboxing.</summary>
        <returns>An instance of &lt;see cref="T:System.Linq.Expressions.UnaryExpression"&gt;.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type of the parameter or variable.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; node that can be used to identify a parameter or a variable in an expression tree.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; node with the specified name and type</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type, string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The type of the parameter or variable.</param>
        <param name="name">The name of the parameter or variable. This name is used for debugging or printing purpose only.</param>
        <summary>Creates a &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; node that can be used to identify a parameter or a variable in an expression tree.</summary>
        <returns>A &lt;see cref="T:System.Linq.Expressions.ParameterExpression"&gt; node with the specified name and type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">An instance of &lt;xref:System.Func%602&gt;.</param>
        <summary>Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.</summary>
        <returns>The expression being visited, or an expression which should replace it in the tree.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Override this method to provide logic to walk the node's children. A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>