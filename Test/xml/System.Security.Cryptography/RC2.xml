<Type Name="RC2" FullName="System.Security.Cryptography.RC2">
  <TypeSignature Language="C#" Value="public abstract class RC2 : System.Security.Cryptography.SymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit RC2 extends System.Security.Cryptography.SymmetricAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.SymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the base class from which all implementations of the RC2 algorithm must derive.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> algorithm and its derived classes instead of the RC2 class. Use RC2 only for compatibility with legacy applications and data.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RC2 ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of &lt;see cref="T:System.Security.Cryptography.RC2"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  
  
 This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the <xref:System.Security.Cryptography.RC2CryptoServiceProvider> implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits.  
  
 This method initializes the protected fields of <xref:System.Security.Cryptography.SymmetricAlgorithm> to the default values listed in the following table.  
  
|Field|Default Value|  
|-----------|-------------------|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|128|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|64|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.RC2 Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.RC2 Create() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.RC2</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an instance of a cryptographic object to perform the &lt;see cref="T:System.Security.Cryptography.RC2"&gt; algorithm.</summary>
        <returns>An instance of a cryptographic object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create an instance of the RC2 class that you can use to encrypt and decrypt data.  
  
   
  
## Examples  
 The following example shows how to create and use an RC2 object to encrypt and decrypt data in a file.  
  
 [!CODE [Cryptography.RC2.Create.File#1](../CodeSnippet/VS_Snippets_CLR/Cryptography.RC2.Create.File#1)]  
  
 The following example shows how to create and use an RC2 object to encrypt and decrypt data in memory.  
  
 [!CODE [Cryptography.RC2.Create.Memory#1](../CodeSnippet/VS_Snippets_CLR/Cryptography.RC2.Create.Memory#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.RC2 Create (string AlgName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.RC2 Create(string AlgName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.RC2</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="AlgName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="AlgName">The name of the specific implementation of &lt;see cref="T:System.Security.Cryptography.RC2"&gt; to use.</param>
        <summary>Creates an instance of a cryptographic object to perform the specified implementation of the &lt;see cref="T:System.Security.Cryptography.RC2"&gt; algorithm.</summary>
        <returns>An instance of a cryptographic object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to create an instance of the RC2 class that you can use to encrypt and decrypt data.  
  
   
  
## Examples  
 The following example shows how to create and use an RC2 object to encrypt and decrypt data in a file.  
  
 [!CODE [Cryptography.RC2.Createstring.File#1](../CodeSnippet/VS_Snippets_CLR/Cryptography.RC2.Createstring.File#1)]  
  
 The following example shows how to create and use an RC2 object to encrypt and decrypt data in memory.  
  
 [!CODE [Cryptography.RC2.Createstring.Memory#1](../CodeSnippet/VS_Snippets_CLR/Cryptography.RC2.Createstring.Memory#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectiveKeySize">
      <MemberSignature Language="C#" Value="public virtual int EffectiveKeySize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EffectiveKeySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the effective size of the secret key used by the &lt;see cref="T:System.Security.Cryptography.RC2"&gt; algorithm in bits.</summary>
        <value>The effective key size used by the &lt;see cref="T:System.Security.Cryptography.RC2"&gt; algorithm.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectiveKeySizeValue">
      <MemberSignature Language="C#" Value="protected int EffectiveKeySizeValue;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 EffectiveKeySizeValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the effective size of the secret key used by the &lt;see cref="T:System.Security.Cryptography.RC2"&gt; algorithm in bits.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This field is accessed through the <xref:System.Security.Cryptography.RC2.EffectiveKeySize%2A> property.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeySize">
      <MemberSignature Language="C#" Value="public override int KeySize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size of the secret key used by the &lt;see cref="T:System.Security.Cryptography.RC2"&gt; algorithm in bits.</summary>
        <value>The size of the secret key used by the &lt;see cref="T:System.Security.Cryptography.RC2"&gt; algorithm.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the RC2CryptoServiceProvider implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>