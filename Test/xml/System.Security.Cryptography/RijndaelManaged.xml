<Type Name="RijndaelManaged" FullName="System.Security.Cryptography.RijndaelManaged">
  <TypeSignature Language="C#" Value="public sealed class RijndaelManaged : System.Security.Cryptography.Rijndael" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RijndaelManaged extends System.Security.Cryptography.Rijndael" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.Rijndael</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Accesses the managed version of the &lt;see cref="T:System.Security.Cryptography.Rijndael"&gt; algorithm. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This algorithm supports key lengths of 128, 192, or 256 bits; defaulting to 256 bits. This algorithm supports block sizes of 128, 192, or 256 bits; defaulting to 128 bits (<xref:System.Security.Cryptography.Aes>-compatible).  
  
 The <xref:System.Security.Cryptography.Rijndael> algorithm is the predecessor of <xref:System.Security.Cryptography.Aes>. You should use the <xref:System.Security.Cryptography.Aes> class instead of RijndaelManaged. For more information, see the entry [The Differences Between Rijndael and AES](http://go.microsoft.com/fwlink/?LinkId=200932) in the .NET Security blog.  
  
   
  
## Examples  
 The following example demonstrates how to encrypt and decrypt sample data using the `RijndaelManaged` class.  
  
 [!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RijndaelManaged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.Cryptography.RijndaelManaged"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates a new instance of the `RijndaelManaged` class.  
  
 [!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDecryptor">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.ICryptoTransform CreateDecryptor(unsigned int8[] rgbKey, unsigned int8[] rgbIV) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">The secret key to be used for the symmetric algorithm. The key size must be 128, 192, or 256 bits.</param>
        <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
        <summary>Creates a symmetric &lt;see cref="T:System.Security.Cryptography.Rijndael"&gt; decryptor object with the specified &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt; and initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;).</summary>
        <returns>A symmetric &lt;see cref="T:System.Security.Cryptography.Rijndael"&gt; decryptor object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method decrypts an encrypted message created using the <xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A> overload with the same signature.  
  
 The  size must be 128, 192, or 256 bits.  
  
   
  
## Examples  
 The following code example demonstrates how to use the CreateDecryptor method to decrypt messages encoded with the same signature parameter.  
  
 [!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEncryptor">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.ICryptoTransform CreateEncryptor(unsigned int8[] rgbKey, unsigned int8[] rgbIV) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgbKey" Type="System.Byte[]" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rgbKey">The secret key to be used for the symmetric algorithm. The key size must be 128, 192, or 256 bits.</param>
        <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
        <summary>Creates a symmetric &lt;see cref="T:System.Security.Cryptography.Rijndael"&gt; encryptor object with the specified &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt; and initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;).</summary>
        <returns>A symmetric &lt;see cref="T:System.Security.Cryptography.Rijndael"&gt; encryptor object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A> overload with the same signature to decrypt the result of this method.  
  
 The  size must be 128, 192, or 256 bits.  
  
   
  
## Examples  
 The following code examples demonstrates how to encrypt a message using the `CreateEncryptor` method.  
  
 [!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateIV">
      <MemberSignature Language="C#" Value="public override void GenerateIV ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateIV() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a random initialization vector (&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A&gt;) to be used for the algorithm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to generate a random IV when none is specified.  
  
   
  
## Examples  
 [!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a random &lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A&gt; to be used for the algorithm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to generate a random key when none is specified.  
  
   
  
## Examples  
 [!CODE [RijndaelManaged Example#1](../CodeSnippet/VS_Snippets_CLR/RijndaelManaged Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>