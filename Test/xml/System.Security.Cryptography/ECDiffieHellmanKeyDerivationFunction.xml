<Type Name="ECDiffieHellmanKeyDerivationFunction" FullName="System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
  <TypeSignature Language="C#" Value="public enum ECDiffieHellmanKeyDerivationFunction" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ECDiffieHellmanKeyDerivationFunction extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Specifies the key derivation function that the &lt;see cref="T:System.Security.Cryptography.ECDiffieHellmanCng"&gt; class will use to convert secret agreements into key material.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ECDiffieHellmanKeyDerivationFunction enumeration defines the type of algorithm that will be used to transform a raw secret agreement into key material. The secret agreement is the value that is generated from a private key and the other partyâ€™s public key, as part of the key exchange. It is the seed value for the key material that is generated by the <xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial%2A> method.  
  
 The <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property uses this enumeration to get the key derivation function for the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Hash">
      <MemberSignature Language="C#" Value="Hash" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction Hash = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A hash algorithm is used to generate key material. The P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm?qualifyHint=False&amp;autoUpgrade=True property specifies the name of the algorithm to use. If the algorithm name is not specified, T:System.Security.Cryptography.SHA256?qualifyHint=False&amp;autoUpgrade=True is used as the default algorithm.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also specify the P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend?qualifyHint=False&autoUpgrade=True and P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend?qualifyHint=False&autoUpgrade=True properties, but they are not required.  
  
 The amount of key material that is generated is equivalent to the size of the hash value for the specified algorithm.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hmac">
      <MemberSignature Language="C#" Value="Hmac" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction Hmac = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Hash-based Message Authentication Code (HMAC) algorithm is used to generate key material. The P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey?qualifyHint=False&amp;autoUpgrade=True property specifies the key to use. Either this property must be set or the P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey?qualifyHint=False&amp;autoUpgrade=True property must be set to `true`; otherwise, a T:System.Security.Cryptography.CryptographicException?qualifyHint=False&amp;autoUpgrade=True is thrown when you use F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac?qualifyHint=False&amp;autoUpgrade=True. If both properties are set, the secret agreement is used as the HMAC key.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also specify the P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend?qualifyHint=False&autoUpgrade=True and P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend?qualifyHint=False&autoUpgrade=True properties, but they are not required.  
  
 The amount of key material that is generated is equivalent to the size of the HMAC value.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tls">
      <MemberSignature Language="C#" Value="Tls" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction Tls = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The Transport Layer Security (TLS) protocol is used to generate key material. The P:System.Security.Cryptography.ECDiffieHellmanCng.Seed?qualifyHint=False&amp;autoUpgrade=True and P:System.Security.Cryptography.ECDiffieHellmanCng.Label?qualifyHint=False&amp;autoUpgrade=True properties must be set; otherwise, a T:System.Security.Cryptography.CryptographicException?qualifyHint=False&amp;autoUpgrade=True is thrown when you use F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls?qualifyHint=False&amp;autoUpgrade=True.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This value generates 160 bits of key material.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>