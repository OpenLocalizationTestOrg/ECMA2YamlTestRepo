<Type Name="Rijndael" FullName="System.Security.Cryptography.Rijndael">
  <TypeSignature Language="C#" Value="public abstract class Rijndael : System.Security.Cryptography.SymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Rijndael extends System.Security.Cryptography.SymmetricAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.SymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the base class from which all implementations of the Rijndael symmetric encryption algorithm must inherit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This algorithm supports key lengths of 128, 192, or 256 bits; defaulting to 256 bits. This algorithm supports block sizes of 128, 192, or 256 bits; defaulting to 128 bits (<xref:System.Security.Cryptography.Aes>-compatible).  
  
 The Rijndael class is the predecessor of the <xref:System.Security.Cryptography.Aes> algorithm. You should use the <xref:System.Security.Cryptography.Aes> algorithm instead of Rijndael. For more information, see the entry [The Differences Between Rijndael and AES](http://go.microsoft.com/fwlink/?LinkId=200932) in the .NET Security blog.  
  
   
  
## Examples  
 The following code example uses the Rijndael class to encrypt and then decrypt data.  
  
 [!CODE [Cryptography.Rijndael.Create.File#1](../CodeSnippet/VS_Snippets_CLR/cryptography.rijndael.create.file#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Rijndael ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of &lt;see cref="T:System.Security.Cryptography.Rijndael"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  
  
 This method initializes the protected fields of <xref:System.Security.Cryptography.SymmetricAlgorithm> to the default values listed in the following table.  
  
|Field|Default Value|  
|-----------|-------------------|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|256|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|128|  
|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|128|  
  
   
  
## Examples  
 The following code example uses the <xref:System.Security.Cryptography.Rijndael> class to encrypt and then decrypt data.  
  
 [!CODE [Cryptography.Rijndael.Create.File#1](../CodeSnippet/VS_Snippets_CLR/cryptography.rijndael.create.file#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Rijndael Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.Rijndael Create() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Rijndael</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a cryptographic object to perform the &lt;see cref="T:System.Security.Cryptography.Rijndael"&gt; algorithm.</summary>
        <returns>A cryptographic object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default implementation of <xref:System.Security.Cryptography.Rijndael> is <xref:System.Security.Cryptography.RijndaelManaged>.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Security.Cryptography.Rijndael> class to encrypt and then decrypt data.  
  
 [!CODE [Cryptography.Rijndael.Create.File#1](../CodeSnippet/VS_Snippets_CLR/cryptography.rijndael.create.file#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.Rijndael Create (string algName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.Rijndael Create(string algName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Rijndael</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algName">The name of the specific implementation of &lt;see cref="T:System.Security.Cryptography.Rijndael"&gt; to create.</param>
        <summary>Creates a cryptographic object to perform the specified implementation of the &lt;see cref="T:System.Security.Cryptography.Rijndael"&gt; algorithm.</summary>
        <returns>A cryptographic object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Acceptable values for the  parameter are `Rijndael` and `System.Security.Cryptography.RijndaelManaged`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>