<Type Name="SignatureDescription" FullName="System.Security.Cryptography.SignatureDescription">
  <TypeSignature Language="C#" Value="public class SignatureDescription" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SignatureDescription extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contains information about the properties of a digital signature.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use members of the SignatureDescription class.  
  
 [!CODE [System.Security.Cryptography.SignatureDescription#2](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.SignatureDescription#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignatureDescription ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.Cryptography.SignatureDescription"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to call the default SignatureDescription constructor. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.SignatureDescription> class.  
  
 [!CODE [System.Security.Cryptography.SignatureDescription#1](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.SignatureDescription#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignatureDescription (System.Security.SecurityElement el);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.SecurityElement el) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="el" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="el">The &lt;see cref="T:System.Security.SecurityElement"&gt; from which to get the algorithms for the signature description.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.Cryptography.SignatureDescription"&gt; class from the specified &lt;xref:System.Security.SecurityElement&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to initialize a new <xref:System.Security.Cryptography.SignatureDescription> class using a  
  
 <xref:System.Security.SecurityElement> containing the four algorithms. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.SignatureDescription> class.  
  
 [!CODE [System.Security.Cryptography.SignatureDescription#3](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.SignatureDescription#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDeformatter">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.AsymmetricSignatureDeformatter CreateDeformatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.AsymmetricSignatureDeformatter CreateDeformatter(class System.Security.Cryptography.AsymmetricAlgorithm key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricSignatureDeformatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.AsymmetricAlgorithm" />
      </Parameters>
      <Docs>
        <param name="key">The key to use in the &lt;see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter"&gt;.</param>
        <summary>Creates an &lt;see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter"&gt; instance with the specified key using the &lt;xref:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm%2A&gt; property.</summary>
        <returns>The newly created &lt;see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter"&gt; instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the CreateDeformatter method to create a DSA signature deformatter to verify the signature. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.SignatureDescription> class.  
  
 [!CODE [System.Security.Cryptography.SignatureDescription#4](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.SignatureDescription#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDigest">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.HashAlgorithm CreateDigest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.HashAlgorithm CreateDigest() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a &lt;see cref="T:System.Security.Cryptography.HashAlgorithm"&gt; instance using the &lt;xref:System.Security.Cryptography.SignatureDescription.DigestAlgorithm%2A&gt; property.</summary>
        <returns>The newly created &lt;see cref="T:System.Security.Cryptography.HashAlgorithm"&gt; instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the CreateDigest method to create a <xref:System.Security.Cryptography.HashAlgorithm> using the digest algorithm of the signature. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.SignatureDescription> class.  
  
 [!CODE [System.Security.Cryptography.SignatureDescription#10](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.SignatureDescription#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFormatter">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.AsymmetricSignatureFormatter CreateFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.AsymmetricSignatureFormatter CreateFormatter(class System.Security.Cryptography.AsymmetricAlgorithm key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricSignatureFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.AsymmetricAlgorithm" />
      </Parameters>
      <Docs>
        <param name="key">The key to use in the &lt;see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter"&gt;.</param>
        <summary>Creates an &lt;see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter"&gt; instance with the specified key using the &lt;xref:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm%2A&gt; property.</summary>
        <returns>The newly created &lt;see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter"&gt; instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to use the CreateFormatter method to create a signature formatter for DSA encryption. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.SignatureDescription> class.  
  
 [!CODE [System.Security.Cryptography.SignatureDescription#5](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.SignatureDescription#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeformatterAlgorithm">
      <MemberSignature Language="C#" Value="public string DeformatterAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeformatterAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the deformatter algorithm for the signature description.</summary>
        <value>The deformatter algorithm for the signature description.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to set the DeformatterAlgorithm property with the RSAPKCS1 deformatter. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.SignatureDescription> class.  
  
 [!CODE [System.Security.Cryptography.SignatureDescription#8](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.SignatureDescription#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DigestAlgorithm">
      <MemberSignature Language="C#" Value="public string DigestAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DigestAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the digest algorithm for the signature description.</summary>
        <value>The digest algorithm for the signature description.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to set the DigestAlgorithm property for RSA encryption using the SHA1 provider. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.SignatureDescription> class.  
  
 [!CODE [System.Security.Cryptography.SignatureDescription#6](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.SignatureDescription#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatterAlgorithm">
      <MemberSignature Language="C#" Value="public string FormatterAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatterAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the formatter algorithm for the signature description.</summary>
        <value>The formatter algorithm for the signature description.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to set the FormatterAlgorithm property with the RSAPKCS1 formatter. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.SignatureDescription> class.  
  
 [!CODE [System.Security.Cryptography.SignatureDescription#9](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.SignatureDescription#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyAlgorithm">
      <MemberSignature Language="C#" Value="public string KeyAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the key algorithm for the signature description.</summary>
        <value>The key algorithm for the signature description.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates how to set the KeyAlgorithm property for RSA encryption. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.SignatureDescription> class.  
  
 [!CODE [System.Security.Cryptography.SignatureDescription#7](../CodeSnippet/VS_Snippets_CLR_System/system.Security.Cryptography.SignatureDescription#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>