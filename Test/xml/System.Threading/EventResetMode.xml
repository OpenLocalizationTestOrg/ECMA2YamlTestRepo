<Type Name="EventResetMode" FullName="System.Threading.EventResetMode">
  <TypeSignature Language="C#" Value="public enum EventResetMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventResetMode extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indicates whether an &lt;see cref="T:System.Threading.EventWaitHandle"&gt; is reset automatically or manually after receiving a signal.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example uses the <xref:System.Threading.WaitHandle.SignalAndWait%28System.Threading.WaitHandle%2CSystem.Threading.WaitHandle%29> method overload to allow the main thread to signal a blocked thread and then wait until the thread finishes a task.  
  
 The example starts five threads and allows them to block on an <xref:System.Threading.EventWaitHandle> created with the F:System.Threading.EventResetMode.AutoReset?qualifyHint=True&autoUpgrade=True flag, then releases one thread each time the user presses the ENTER key. The example then queues another five threads and releases them all using an T:System.Threading.EventWaitHandle?qualifyHint=False&autoUpgrade=True created with the F:System.Threading.EventResetMode.ManualReset?qualifyHint=True&autoUpgrade=True flag.  
  
 [!CODE [System.Threading.WaitHandle.SignalAndWait#1](../CodeSnippet/VS_Snippets_CLR_System/system.Threading.WaitHandle.SignalAndWait#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AutoReset">
      <MemberSignature Language="C#" Value="AutoReset" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.EventResetMode AutoReset = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.EventResetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When signaled, the T:System.Threading.EventWaitHandle?qualifyHint=False&amp;autoUpgrade=True resets automatically after releasing a single thread. If no threads are waiting, the T:System.Threading.EventWaitHandle?qualifyHint=False&amp;autoUpgrade=True remains signaled until a thread blocks, and resets after releasing the thread.</summary>
      </Docs>
    </Member>
    <Member MemberName="ManualReset">
      <MemberSignature Language="C#" Value="ManualReset" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.EventResetMode ManualReset = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.EventResetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When signaled, the T:System.Threading.EventWaitHandle?qualifyHint=False&amp;autoUpgrade=True releases all waiting threads and remains signaled until it is manually reset.</summary>
      </Docs>
    </Member>
  </Members>
</Type>