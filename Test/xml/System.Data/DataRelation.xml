<Type Name="DataRelation" FullName="System.Data.DataRelation">
  <TypeSignature Language="C#" Value="public class DataRelation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataRelation extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("RelationName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataRelationEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.RelationshipConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a parent/child relationship between two &lt;see cref="T:System.Data.DataTable"&gt; objects.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A DataRelation is used to relate two <xref:System.Data.DataTable> objects to each other through <xref:System.Data.DataColumn> objects. For example, in a Customer/Orders relationship, the Customers table is the parent and the Orders table is the child of the relationship. This is similar to a primary key/foreign key relationship. For more information, see [Navigating DataRelations](../Topic/Navigating%20DataRelations.md).  
  
 Relationships are created between matching columns in the parent and child tables. That is, the <xref:System.Data.DataColumn.DataType%2A> value for both columns must be identical.  
  
 Relationships can also cascade various changes from the parent <xref:System.Data.DataRow> to its child rows. To control how values are changed in child rows, add a <xref:System.Data.ForeignKeyConstraint> to the <xref:System.Data.ConstraintCollection> of the <xref:System.Data.DataTable> object. The <xref:System.Data.ConstraintCollection> determines what action to take when a value in a parent table is deleted or updated.  
  
 When a DataRelation is created, it first verifies that the relationship can be established. After it is added to the <xref:System.Data.DataRelationCollection>, the relationship is maintained by disallowing any changes that would invalidate it. Between the period when a DataRelation is created and added to the <xref:System.Data.DataRelationCollection>, it is possible for additional changes to be made to the parent or child rows. An exception is generated if this causes a relationship that is no longer valid.  
  
> [!NOTE]
>  Data corruption can occur if a bi-directional relation is defined between two tables. A bi-directional relation consists of two `DataRelation` objects that use the same columns, with the parent-child roles switched. No exception is raised when the `DataRelation` objects are saved; however, data corruption can occur.  
  
 DataRelation objects are contained in a <xref:System.Data.DataRelationCollection>, which you can access through the <xref:System.Data.DataSet.Relations%2A> property of the <xref:System.Data.DataSet>, and the <xref:System.Data.DataTable.ChildRelations%2A> and <xref:System.Data.DataTable.ParentRelations%2A> properties of the <xref:System.Data.DataTable>.  
  
   
  
## Examples  
 The following example creates a new DataRelation and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  
  
 [!CODE [Classic WebData DataRelation Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation Example#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataRelation (string relationName, System.Data.DataColumn parentColumn, System.Data.DataColumn childColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string relationName, class System.Data.DataColumn parentColumn, class System.Data.DataColumn childColumn) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
        <Parameter Name="parentColumn" Type="System.Data.DataColumn" />
        <Parameter Name="childColumn" Type="System.Data.DataColumn" />
      </Parameters>
      <Docs>
        <param name="relationName">The name of the &lt;see cref="T:System.Data.DataRelation"&gt;. If `null` or an empty string (""), a default name will be given when the created object is added to the &lt;xref:System.Data.DataRelationCollection&gt;.</param>
        <param name="parentColumn">The parent &lt;see cref="T:System.Data.DataColumn"&gt; in the relationship.</param>
        <param name="childColumn">The child &lt;see cref="T:System.Data.DataColumn"&gt; in the relationship.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Data.DataRelation"&gt; class using the specified &lt;see cref="T:System.Data.DataRelation"&gt; name, and parent and child &lt;xref:System.Data.DataColumn&gt; objects.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  
  
 [!CODE [Classic WebData DataRelation.DataRelation#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.DataRelation#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataRelation (string relationName, System.Data.DataColumn[] parentColumns, System.Data.DataColumn[] childColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string relationName, class System.Data.DataColumn[] parentColumns, class System.Data.DataColumn[] childColumns) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
        <Parameter Name="parentColumns" Type="System.Data.DataColumn[]" />
        <Parameter Name="childColumns" Type="System.Data.DataColumn[]" />
      </Parameters>
      <Docs>
        <param name="relationName">The name of the relation. If `null` or an empty string (""), a default name will be given when the created object is added to the &lt;see cref="T:System.Data.DataRelationCollection"&gt;.</param>
        <param name="parentColumns">An array of parent &lt;see cref="T:System.Data.DataColumn"&gt; objects.</param>
        <param name="childColumns">An array of child &lt;see cref="T:System.Data.DataColumn"&gt; objects.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Data.DataRelation"&gt; class using the specified &lt;see cref="T:System.Data.DataRelation"&gt; name and matched arrays of parent and child &lt;xref:System.Data.DataColumn&gt; objects.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  
  
 [!CODE [Classic WebData DataRelation.DataRelation2 Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.DataRelation2 Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataRelation (string relationName, System.Data.DataColumn parentColumn, System.Data.DataColumn childColumn, bool createConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string relationName, class System.Data.DataColumn parentColumn, class System.Data.DataColumn childColumn, bool createConstraints) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
        <Parameter Name="parentColumn" Type="System.Data.DataColumn" />
        <Parameter Name="childColumn" Type="System.Data.DataColumn" />
        <Parameter Name="createConstraints" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="relationName">The name of the relation. If `null` or an empty string (""), a default name will be given when the created object is added to the &lt;see cref="T:System.Data.DataRelationCollection"&gt;.</param>
        <param name="parentColumn">The parent &lt;see cref="T:System.Data.DataColumn"&gt; in the relation.</param>
        <param name="childColumn">The child &lt;see cref="T:System.Data.DataColumn"&gt; in the relation.</param>
        <param name="createConstraints">A value that indicates whether constraints are created. `true`, if constraints are created. Otherwise, `false`.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Data.DataRelation"&gt; class using the specified name, parent and child &lt;xref:System.Data.DataColumn&gt; objects, and a value that indicates whether to create constraints.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  
  
 [!CODE [Classic WebData DataRelation.DataRelation1 Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.DataRelation1 Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataRelation (string relationName, System.Data.DataColumn[] parentColumns, System.Data.DataColumn[] childColumns, bool createConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string relationName, class System.Data.DataColumn[] parentColumns, class System.Data.DataColumn[] childColumns, bool createConstraints) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
        <Parameter Name="parentColumns" Type="System.Data.DataColumn[]" />
        <Parameter Name="childColumns" Type="System.Data.DataColumn[]" />
        <Parameter Name="createConstraints" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="relationName">The name of the relation. If `null` or an empty string (""), a default name will be given when the created object is added to the &lt;see cref="T:System.Data.DataRelationCollection"&gt;.</param>
        <param name="parentColumns">An array of parent &lt;see cref="T:System.Data.DataColumn"&gt; objects.</param>
        <param name="childColumns">An array of child &lt;see cref="T:System.Data.DataColumn"&gt; objects.</param>
        <param name="createConstraints">A value that indicates whether to create constraints. `true`, if constraints are created. Otherwise, `false`.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Data.DataRelation"&gt; class using the specified name, matched arrays of parent and child &lt;xref:System.Data.DataColumn&gt; objects, and value that indicates whether to create constraints.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  
  
 [!CODE [Classic WebData DataRelation.DataRelation3 Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.DataRelation3 Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataRelation (string relationName, string parentTableName, string childTableName, string[] parentColumnNames, string[] childColumnNames, bool nested);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string relationName, string parentTableName, string childTableName, string[] parentColumnNames, string[] childColumnNames, bool nested) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
        <Parameter Name="parentTableName" Type="System.String" />
        <Parameter Name="childTableName" Type="System.String" />
        <Parameter Name="parentColumnNames" Type="System.String[]" />
        <Parameter Name="childColumnNames" Type="System.String[]" />
        <Parameter Name="nested" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="relationName">The name of the relation. If `null` or an empty string (""), a default name will be given when the created object is added to the &lt;see cref="T:System.Data.DataRelationCollection"&gt;.</param>
        <param name="parentTableName">The name of the &lt;see cref="T:System.Data.DataTable"&gt; that is the parent table of the relation.</param>
        <param name="childTableName">The name of the &lt;see cref="T:System.Data.DataTable"&gt; that is the child table of the relation.</param>
        <param name="parentColumnNames">An array of &lt;see cref="T:System.Data.DataColumn"&gt; object names in the parent &lt;xref:System.Data.DataTable&gt; of the relation.</param>
        <param name="childColumnNames">An array of &lt;see cref="T:System.Data.DataColumn"&gt; object names in the child &lt;xref:System.Data.DataTable&gt; of the relation.</param>
        <param name="nested">A value that indicates whether relationships are nested.</param>
        <summary>This constructor is provided for design time support in the Visual Studio environment.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Any <xref:System.Data.DataRelation> object created by using this constructor must be added to the collection with the <xref:System.Data.DataRelationCollection.AddRange%2A> method inside of a <xref:System.Data.DataTable.BeginInit%2A> and <xref:System.Data.DataTable.EndInit%2A> block. If this constructor is not called between <xref:System.Data.DataTable.BeginInit%2A> and <xref:System.Data.DataTable.EndInit%2A> a <xref:System.NullReferenceException> will occur. In addition, the tables and columns with the specified names must exist at the time the constructor is called.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataRelation (string relationName, string parentTableName, string parentTableNamespace, string childTableName, string childTableNamespace, string[] parentColumnNames, string[] childColumnNames, bool nested);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string relationName, string parentTableName, string parentTableNamespace, string childTableName, string childTableNamespace, string[] parentColumnNames, string[] childColumnNames, bool nested) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="relationName" Type="System.String" />
        <Parameter Name="parentTableName" Type="System.String" />
        <Parameter Name="parentTableNamespace" Type="System.String" />
        <Parameter Name="childTableName" Type="System.String" />
        <Parameter Name="childTableNamespace" Type="System.String" />
        <Parameter Name="parentColumnNames" Type="System.String[]" />
        <Parameter Name="childColumnNames" Type="System.String[]" />
        <Parameter Name="nested" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="relationName">The name of the &lt;see cref="T:System.Data.DataRelation"&gt;. If `null` or an empty string (""), a default name will be given when the created object is added to the &lt;xref:System.Data.DataRelationCollection&gt;.</param>
        <param name="parentTableName">The name of the &lt;see cref="T:System.Data.DataTable"&gt; that is the parent table of the relation.</param>
        <param name="parentTableNamespace">The name of the parent table namespace.</param>
        <param name="childTableName">The name of the &lt;see cref="T:System.Data.DataTable"&gt; that is the child table of the relation.</param>
        <param name="childTableNamespace">The name of the child table namespace.</param>
        <param name="parentColumnNames">An array of &lt;see cref="T:System.Data.DataColumn"&gt; object names in the parent &lt;xref:System.Data.DataTable&gt; of the relation.</param>
        <param name="childColumnNames">An array of &lt;see cref="T:System.Data.DataColumn"&gt; object names in the child &lt;xref:System.Data.DataTable&gt; of the relation.</param>
        <param name="nested">A value that indicates whether relationships are nested.</param>
        <summary>This constructor is provided for design time support in the Visual Studio environment.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Any <xref:System.Data.DataRelation> object created by using this constructor must then be added to the collection with <xref:System.Data.DataRelationCollection.AddRange%2A>. Tables and columns with the specified names must exist at the time the method is called, or if <xref:System.Data.DataTable.BeginInit%2A> has been called before calling this constructor, the tables and columns with the specified names must exist at the time that <xref:System.Data.DataTable.EndInit%2A> is called.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckStateForProperty">
      <MemberSignature Language="C#" Value="protected void CheckStateForProperty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckStateForProperty() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildColumns">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataColumn[] ChildColumns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataColumn[] ChildColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataColumn[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the child &lt;see cref="T:System.Data.DataColumn"&gt; objects of this relation.</summary>
        <value>An array of &lt;see cref="T:System.Data.DataColumn"&gt; objects.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example gets the child <xref:System.Data.DataColumn> objects of a <xref:System.Data.DataRelation>.  
  
 [!CODE [Classic WebData DataRelation.ChildColumns Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.ChildColumns Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildKeyConstraint">
      <MemberSignature Language="C#" Value="public virtual System.Data.ForeignKeyConstraint ChildKeyConstraint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ForeignKeyConstraint ChildKeyConstraint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ForeignKeyConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Data.ForeignKeyConstraint"&gt; for the relation.</summary>
        <value>A `ForeignKeyConstraint`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If no associated <xref:System.Data.ForeignKeyConstraint> exists for this relationship, it will be created automatically, and pointed to by the `ChildKeyConstraint`, when the relation is added to the collection of relations.  
  
   
  
## Examples  
 The following example sets the `UpdateRule`, `DeleteRule`, and `AcceptReject` rule for the `ForeignKeyConstraint` associated with the `DataRelation`.  
  
 [!CODE [Classic WebData DataRelation.ChildKeyConstraint Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.ChildKeyConstraint Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildTable">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataTable ChildTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable ChildTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the child table of this relation.</summary>
        <value>A &lt;see cref="T:System.Data.DataTable"&gt; that is the child table of the relation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example gets the child <xref:System.Data.DataTable> of a <xref:System.Data.DataRelation>.  
  
 [!CODE [Classic WebData DataRelation.ChildTable Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.ChildTable Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSet">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataSet DataSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataSet DataSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Data.DataSet"&gt; to which the &lt;xref:System.Data.DataRelation&gt; belongs.</summary>
        <value>A &lt;see cref="T:System.Data.DataSet"&gt; to which the &lt;xref:System.Data.DataRelation&gt; belongs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.DataRelationCollection> associated with a <xref:System.Data.DataSet> is accessed through the <xref:System.Data.DataSet.Relations%2A> property of the <xref:System.Data.DataSet> object.  
  
   
  
## Examples  
 The following example gets the <xref:System.Data.DataSet> of a <xref:System.Data.DataRelation>.  
  
 [!CODE [Classic WebData DataRelation.DataSet Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.DataSet Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection that stores customized properties.</summary>
        <value>A &lt;see cref="T:System.Data.PropertyCollection"&gt; that contains customized properties.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use ExtendedProperties to add custom information to a <xref:System.Data.DataRelation> object. Add information with the Add method. Retrieve information with the Item method.  
  
 Extended properties must be of type <xref:System.String>. Properties that are not of type String are not persisted when the <xref:System.Data.DataRelation> is written as XML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nested">
      <MemberSignature Language="C#" Value="public virtual bool Nested { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Nested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether &lt;see cref="T:System.Data.DataRelation"&gt; objects are nested.</summary>
        <value>`true`, if &lt;see cref="T:System.Data.DataRelation"&gt; objects are nested; otherwise, `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use <xref:System.Data.DataRelation> objects to define hierarchical relationships, such as those specified in XML. For more information, see [Nesting DataRelations](../Topic/Nesting%20DataRelations.md).  
  
> [!NOTE]
>  If the <xref:System.Data.DataTable.TableName%2A> of the child table in the relation matches the <xref:System.Data.DataColumn.ColumnName%2A> of a column in the parent table in the relation, the Nested property must be false. This was not required with the .NET Framework version 1.0.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">Parameter reference.</param>
        <summary>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentColumns">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataColumn[] ParentColumns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataColumn[] ParentColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataColumn[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array of &lt;see cref="T:System.Data.DataColumn"&gt; objects that are the parent columns of this &lt;xref:System.Data.DataRelation&gt;.</summary>
        <value>An array of &lt;see cref="T:System.Data.DataColumn"&gt; objects that are the parent columns of this &lt;xref:System.Data.DataRelation&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example gets the array of <xref:System.Data.DataColumn> objects that function as parent columns for the relation.  
  
 [!CODE [Classic WebData DataRelation.ParentColumns Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.ParentColumns Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentKeyConstraint">
      <MemberSignature Language="C#" Value="public virtual System.Data.UniqueConstraint ParentKeyConstraint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.UniqueConstraint ParentKeyConstraint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.UniqueConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Data.UniqueConstraint"&gt; that guarantees that values in the parent column of a &lt;xref:System.Data.DataRelation&gt; are unique.</summary>
        <value>A &lt;see cref="T:System.Data.UniqueConstraint"&gt; that makes sure that values in a parent column are unique.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example gets the ParentKeyConstraint of a <xref:System.Data.DataRelation> object.  
  
 [!CODE [Classic WebData DataRelation.ParentKeyConstraint Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.ParentKeyConstraint Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentTable">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataTable ParentTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable ParentTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent &lt;see cref="T:System.Data.DataTable"&gt; of this &lt;xref:System.Data.DataRelation&gt;.</summary>
        <value>A &lt;see cref="T:System.Data.DataTable"&gt; that is the parent table of this relation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example gets the parent <xref:System.Data.DataTable> of a <xref:System.Data.DataRelation>.  
  
 [!CODE [Classic WebData DataRelation.ParentTable Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.ParentTable Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Parameter reference.</param>
        <summary>This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RelationName">
      <MemberSignature Language="C#" Value="public virtual string RelationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RelationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name used to retrieve a &lt;see cref="T:System.Data.DataRelation"&gt; from the &lt;xref:System.Data.DataRelationCollection&gt;.</summary>
        <value>The name of the a &lt;see cref="T:System.Data.DataRelation"&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the RelationName property to retrieve a <xref:System.Data.DataRelation> from the <xref:System.Data.DataRelationCollection>.  
  
   
  
## Examples  
 The following example uses the RelationName property to retrieve a <xref:System.Data.DataRelation> from a <xref:System.Data.DataRelationCollection>.  
  
 [!CODE [Classic WebData DataRelation.RelationName Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.RelationName Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the &lt;xref:System.Data.DataRelation.RelationName%2A&gt;, if one exists.</summary>
        <returns>The value of the &lt;xref:System.Data.DataRelation.RelationName%2A&gt; property.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the <xref:System.Data.DataColumn.ToString%2A> property to return the name of the <xref:System.Data.DataRelation> object.  
  
 [!CODE [Classic WebData DataRelation.ToString Example#1](../CodeSnippet/VS_Snippets_ADO.NET/Classic WebData DataRelation.ToString Example#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>