<Type Name="SecurityElement" FullName="System.Security.SecurityElement">
  <TypeSignature Language="C#" Value="public sealed class SecurityElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit SecurityElement extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the XML object model for encoding security objects. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model. This documentation assumes a basic knowledge of XML.  
  
 The simple XML object model for an element consists of the following parts:  
  
-   The tag is the element name.  
  
-   The attributes are zero or more name/value attribute pairs on the element.  
  
-   The children are zero or more elements nested within `<tag>` and `</tag>`.  
  
 It is strongly suggested that attribute based XML representation is used to express security elements and their values. This means properties of an element are expressed as attributes and property values are expressed as attribute values. Avoid nesting text within tags. For any `<tag>text</tag>` representation a representation of type `<tag value="text"/>` is usually available. Using this attribute-based XML representation increases readability and allows easy WMI portability of the resulting XML serialization.  
  
 An attribute name must be one character or longer, and cannot be `null`. If element-based value representation is used, elements with a text string that is `null` are represented in the `<tag/>` form; otherwise, text is delimited by the `<tag>` and `</tag>` tokens. Both forms can be combined with attributes, which are shown if present.  
  
 The tags, attributes, and text of elements, if present, are always case-sensitive. The XML form contains quotations and escapes where necessary. String values that include characters invalid for use in XML result in an <xref:System.ArgumentException>. These rules apply to all properties and methods.  
  
> [!NOTE]
>  For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method. Static methods allow explicit checking where needed.  
  
   
  
## Examples  
 The following example shows the use of members of the SecurityElement class.  
  
 [!CODE [SecurityElementMembers#1](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecurityElement (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tag) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">The tag name of an XML element.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.SecurityElement"&gt; class with the specified tag.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  parameter must consist of a valid XML tag name. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  
  
   
  
## Examples  
 The following code shows the use of  the SecurityElement constructor to create a new <xref:System.Security.SecurityElement> object.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#2](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecurityElement (string tag, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tag, string text) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">The tag name of the XML element.</param>
        <param name="text">The text content within the element.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.SecurityElement"&gt; class with the specified tag and text.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the  parameter is `null` this constructor produces an element identical to the default constructor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAttribute(string name, string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the attribute.</param>
        <param name="value">The value of the attribute.</param>
        <summary>Adds a name/value attribute to an XML element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Names and values in attributes should only contain valid XML attribute characters. XML attribute names must be unique. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  
  
 There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.  
  
   
  
## Examples  
 The following code shows the use of the AddAttribute method to add a name/value attribute to an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#4](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public void AddChild (System.Security.SecurityElement child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddChild(class System.Security.SecurityElement child) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="child">The child element to add.</param>
        <summary>Adds a child element to the XML element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The child element is added following any previously existing child elements.  
  
   
  
## Examples  
 The following code shows the use of the AddChild method to add a child element to the XML element.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#5](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public string Attribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Attribute(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the attribute for which to search.</param>
        <summary>Finds an attribute by name in an XML element.</summary>
        <returns>The value associated with the named attribute, or `null` if no attribute with  exists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 With XML as follows, `Attribute("B")` would return "456".  
  
```  
<thetag A="123" B="456" C="789">text</thetag>  
```  
  
   
  
## Examples  
 The following code shows the use of the Attribute method to find an attribute by name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#13](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Hashtable Attributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the attributes of an XML element as name/value pairs.</summary>
        <value>The &lt;see cref="T:System.Collections.Hashtable"&gt; object for the attribute values of the XML element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each attribute is stored in the <xref:System.Collections.Hashtable> as a name/value pair.  
  
 Names and values in attributes should contain only valid XML attribute characters. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  
  
 There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.  
  
   
  
## Examples  
 The following code shows the use of the Attributes property to get an attribute of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#15](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Children { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the array of child elements of the XML element.</summary>
        <value>The ordered child elements of the XML element as security elements.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a <xref:System.Security.SecurityElement> contains both <xref:System.Security.SecurityElement.Text%2A> and Children, <xref:System.Security.SecurityElement.Text%2A> will appear first.  
  
   
  
## Examples  
 The following code shows the use of the Children property to get the array of child elements of the XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#14](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecurityElement Copy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates and returns an identical copy of the current &lt;see cref="T:System.Security.SecurityElement"&gt; object.</summary>
        <returns>A copy of the current &lt;see cref="T:System.Security.SecurityElement"&gt; object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The copy includes both the <xref:System.Security.SecurityElement.Children%2A> and <xref:System.Security.SecurityElement.Attributes%2A> properties.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public bool Equal (System.Security.SecurityElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equal(class System.Security.SecurityElement other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="other">An XML element object to which to compare the current XML element object.</param>
        <summary>Compares two XML element objects for equality.</summary>
        <returns>`true` if the tag, attribute names and values, child elements, and text fields in the current XML element are identical to their counterparts in the  parameter; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If there are child elements, comparison extends recursively to them.  
  
 There is no support for comparing different XML representations of the same characters.  
  
   
  
## Examples  
 The following code shows the use of the Equal method to compare two XML elements. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#22](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="public static string Escape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Escape(string str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">The string within which to escape invalid characters.</param>
        <summary>Replaces invalid XML characters in a string with their valid XML equivalent.</summary>
        <returns>The input string with invalid characters replaced.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this method to replace invalid characters in a string before using the string in a <xref:System.Security.SecurityElement>. If invalid characters are used in a <xref:System.Security.SecurityElement> without being escaped, an <xref:System.ArgumentException> is thrown.  
  
 The following table shows the invalid XML characters and their escaped equivalents.  
  
|invalid XML Character|Replaced With|  
|---------------------------|-------------------|  
|"\<"|"&lt;"|  
|">"|"&gt;"|  
|"\\""|"&quot;"|  
|"\\'"|"&apos;"|  
|"&"|"&amp;"|  
  
   
  
## Examples  
 The following code shows the use of the Escape method to replace invalid XML characters in a string with their valid XML equivalent. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#19](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromString">
      <MemberSignature Language="C#" Value="public static System.Security.SecurityElement FromString (string xml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.SecurityElement FromString(string xml) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xml">The XML-encoded string from which to create the security element.</param>
        <summary>Creates a security element from an XML-encoded string.</summary>
        <returns>A &lt;see cref="T:System.Security.SecurityElement"&gt; created from the XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Do not use single quotation marks in the XML string; instead, use escaped double quotation marks. For example, instead of "`<value name='Company'>Microsoft</value>"` use "`<value name=\"Company\">Microsoft</value>"`.  
  
 Using single quotation marks can result in either an exception being thrown or, in some cases, the single quotation marks being treated as text in the string.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidAttributeName">
      <MemberSignature Language="C#" Value="public static bool IsValidAttributeName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidAttributeName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The attribute name to test for validity.</param>
        <summary>Determines whether a string is a valid attribute name.</summary>
        <returns>`true` if the  parameter is a valid XML attribute name; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to test an attribute before adding it to a security element.  
  
   
  
## Examples  
 The following code shows the use of the IsValidAttributeName method to determine whether a string is a valid attribute name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#6](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidAttributeValue">
      <MemberSignature Language="C#" Value="public static bool IsValidAttributeValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidAttributeValue(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The attribute value to test for validity.</param>
        <summary>Determines whether a string is a valid attribute value.</summary>
        <returns>`true` if the  parameter is a valid XML attribute value; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to test an attribute before adding it to a security element.  
  
   
  
## Examples  
 The following code shows the use of the IsValidAttributeValue method to determine whether a string is a valid attribute value. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#7](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidTag">
      <MemberSignature Language="C#" Value="public static bool IsValidTag (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidTag(string tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">The tag to test for validity.</param>
        <summary>Determines whether a string is a valid tag.</summary>
        <returns>`true` if the  parameter is a valid XML tag; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This can be used to test a <xref:System.Security.SecurityElement.Tag%2A> before setting it.  
  
   
  
## Examples  
 The following code shows the use of the IsValidTag method to determine whether a string is a valid attribute tag. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#10](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidText">
      <MemberSignature Language="C#" Value="public static bool IsValidText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to test for validity.</param>
        <summary>Determines whether a string is valid as text within an XML element.</summary>
        <returns>`true` if the  parameter is a valid XML text element; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to test <xref:System.Security.SecurityElement.Text%2A> before setting it.  
  
   
  
## Examples  
 The following code shows the use of the IsValidText method to determine whether a string is valid as XML element text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#9](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForChildByTag">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement SearchForChildByTag (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecurityElement SearchForChildByTag(string tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">The tag for which to search in child elements.</param>
        <summary>Finds a child by its tag name.</summary>
        <returns>The first child XML element with the specified tag value, or `null` if no child element with  exists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 With XML as follows, `SearchForChildByTag("second")` would return the child element `<second>`.  
  
```  
<thetag A="123" B="456" C="789"> <first>text1</first>  
       <second>text2</second></thetag>  
```  
  
   
  
## Examples  
 The following code shows the use of the SearchForChildByTag method to find a child by its tag name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#17](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForTextOfTag">
      <MemberSignature Language="C#" Value="public string SearchForTextOfTag (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string SearchForTextOfTag(string tag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">The tag for which to search in child elements.</param>
        <summary>Finds a child by its tag name and returns the contained text.</summary>
        <returns>The text contents of the first child element with the specified tag value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is equivalent to the following:  
  
 [!CODE [System.Security.SecurityElement#1](../CodeSnippet/VS_Snippets_CLR_System/system.security.securityelement#1)]  
  
 With XML as follows, `SearchForTextOfTag("second")` would return "text2".  
  
```  
<thetag A="123" B="456" C="789"> <first>text1</first>  
    <second>text2</second></thetag>  
```  
  
   
  
## Examples  
 The following code shows the use of the SearchForTextOfTag method to find a child by its tag name and return the contained text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#18](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public string Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the tag name of an XML element.</summary>
        <value>The tag name of an XML element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In XML, the tag appears in the script as appears below:  
  
```  
<tag attributes>text</tag>  
```  
  
 If this element has child elements, the children will replace `text`.  
  
 Assign only valid XML tag strings to this property. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  
  
   
  
## Examples  
 The following code shows the use of the Tag property to get the tag name of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#11](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the text within an XML element.</summary>
        <value>The value of the text within an XML element.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The text should not contain XML special characters. Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.  
  
 If a <xref:System.Security.SecurityElement> contains both Text and <xref:System.Security.SecurityElement.Children%2A>, Text will appear first.  
  
   
  
## Examples  
 The following code shows the use of the Text property to get the text of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  
  
 [!CODE [SecurityElementMembers#12](../CodeSnippet/VS_Snippets_CLR/SecurityElementMembers#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Produces a string representation of an XML element and its constituent attributes, child elements, and text.</summary>
        <returns>The XML element and its contents.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is useful in debugging to see the XML representation of the element.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>