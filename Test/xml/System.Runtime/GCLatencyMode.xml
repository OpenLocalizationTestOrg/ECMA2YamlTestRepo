<Type Name="GCLatencyMode" FullName="System.Runtime.GCLatencyMode">
  <TypeSignature Language="C#" Value="public enum GCLatencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed GCLatencyMode extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Adjusts the time that the garbage collector intrudes in your application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can adjust the intrusiveness of garbage collection in your application by setting the <xref:System.Runtime.GCSettings.LatencyMode%2A> property to any GCLatencyMode enumeration value except F:System.Runtime.GCLatencyMode.NoGCRegion?qualifyHint=False&autoUpgrade=True. You can also determine the garbage collector's current latency mode by retrieving the P:System.Runtime.GCSettings.LatencyMode?qualifyHint=True&autoUpgrade=True property value.  
  
 See [Latency Modes](../Topic/Latency%20Modes.md) for a discussion of how the runtime configuration settings for garbage collection affect the default value for this enumeration.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Batch">
      <MemberSignature Language="C#" Value="Batch" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.GCLatencyMode Batch = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Disables garbage collection concurrency and reclaims objects in a batch call. This is the most intrusive mode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This mode is designed for maximum throughput at the expense of responsiveness.  
  
 This mode overrides the  runtime configuration setting. If  is enabled, switching to F:System.Runtime.GCLatencyMode.Batch?qualifyHint=False&autoUpgrade=True mode prevents any further concurrent collections.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interactive">
      <MemberSignature Language="C#" Value="Interactive" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.GCLatencyMode Interactive = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables garbage collection concurrency and reclaims objects while the application is running. This is the default mode for garbage collection on a workstation and is less intrusive than F:System.Runtime.GCLatencyMode.Batch?qualifyHint=False&amp;autoUpgrade=True. It balances responsiveness with throughput.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This mode is equivalent to garbage collection on a workstation that is concurrent.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowLatency">
      <MemberSignature Language="C#" Value="LowLatency" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.GCLatencyMode LowLatency = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables garbage collection that is more conservative in reclaiming objects. Full collections occur only if the system is under memory pressure, whereas generation 0 and generation 1 collections might occur more frequently</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This mode is not available for the server garbage collector.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoGCRegion">
      <MemberSignature Language="C#" Value="NoGCRegion" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.GCLatencyMode NoGCRegion = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that garbage collection is suspended while the app is executing a critical path.  
  
 F:System.Runtime.GCLatencyMode.NoGCRegion?qualifyHint=False&amp;autoUpgrade=True is a read-only value; that is, you cannot assign the F:System.Runtime.GCLatencyMode.NoGCRegion?qualifyHint=False&amp;autoUpgrade=True value to the P:System.Runtime.GCSettings.LatencyMode?qualifyHint=True&amp;autoUpgrade=True property. You specify the no GC region latency mode by calling the Overload:System.GC.TryStartNoGCRegion?qualifyHint=False&amp;autoUpgrade=True method and terminate it by calling the M:System.GC.EndNoGCRegion?qualifyHint=False&amp;autoUpgrade=True method.</summary>
      </Docs>
    </Member>
    <Member MemberName="SustainedLowLatency">
      <MemberSignature Language="C#" Value="SustainedLowLatency" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.GCLatencyMode SustainedLowLatency = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enables garbage collection that tries to minimize latency over an extended period. The collector tries to perform only generation 0, generation 1, and concurrent generation 2 collections. Full blocking collections may still occur if the system is under memory pressure.</summary>
      </Docs>
    </Member>
  </Members>
</Type>