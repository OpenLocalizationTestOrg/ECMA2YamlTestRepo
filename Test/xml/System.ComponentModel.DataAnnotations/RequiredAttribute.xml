<Type Name="RequiredAttribute" FullName="System.ComponentModel.DataAnnotations.RequiredAttribute">
  <TypeSignature Language="C#" Value="public class RequiredAttribute : System.ComponentModel.DataAnnotations.ValidationAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RequiredAttribute extends System.ComponentModel.DataAnnotations.ValidationAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.DataAnnotations</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.DataAnnotations.ValidationAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies that a data field value is required.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RequiredAttribute attribute specifies that when a field on a form is validated, the field must contain a value. A validation exception is raised if the property is `null`, contains an empty string (""), or contains only white-space characters.  
  
> [!NOTE]
>  If the MVC data model or entity partial class contains a field that is annotated with the RequiredAttribute attribute, but the page does not contain the property, an error is not raised. Validation occurs only for fields that are submitted to the server.  
  
 A Visual Studio project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?linkid=158686).  
  
   
  
## Examples  
 The following example uses the RequiredAttribute attribute to override the database schema rule that allows a data field to be empty. The example performs the following steps:  
  
-   Implements a metadata partial class and the associated metadata class.  
  
-   In the associated metadata class, it applies the RequiredAttribute attribute, which specifies the following requirements:  
  
    -   The Title data field cannot be empty. If validation fails, the code in the example throws a validation exception and displays an error message. The error message is specified at the time that the attribute is applied to the data field.  
  
    -   The MiddleName data field cannot be empty. If validation fails, the code in the example throws a validation exception and displays an error message.  
  
 [!CODE [System.ComponentModel.DataAnnotations.RequiredAttribute#1](../CodeSnippet/VS_Snippets_WebNet/System.ComponentModel.DataAnnotations.RequiredAttribute#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RequiredAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows how to use the RequiredAttribute constructor. If validation fails, the example displays a validation error message that is provided by Dynamic Data.  
  
 [!CODE [System.ComponentModel.DataAnnotations.RequiredAttribute#3](../CodeSnippet/VS_Snippets_WebNet/System.ComponentModel.DataAnnotations.RequiredAttribute#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowEmptyStrings">
      <MemberSignature Language="C#" Value="public bool AllowEmptyStrings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowEmptyStrings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether an empty string is allowed.</summary>
        <value>`true` if an empty string is allowed; otherwise, `false`. The default value is `false`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When you set AllowEmptyStrings to `true` for a data field, Dynamic Data does not perform validation and transforms the empty string to a `null` value. This value is then passed to the database.  
  
 If the database does not allow `null` values, it raises an error. To avoid this error, you must also set the <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.ConvertEmptyStringToNull%2A> to `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public override bool IsValid (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValid(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The data field value to validate.</param>
        <summary>Checks that the value of the required data field is not empty.</summary>
        <returns>`true` if validation is successful; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the value is an empty string, the method returns `false` and a validation error is displayed.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>