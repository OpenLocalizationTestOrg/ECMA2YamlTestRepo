<Type Name="RealProxy" FullName="System.Runtime.Remoting.Proxies.RealProxy">
  <TypeSignature Language="C#" Value="public abstract class RealProxy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract RealProxy extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides base functionality for proxies.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The RealProxy class is the `abstract` base class from which proxies must derive.  
  
 A client that uses an object across any kind of a remoting boundary is actually using a transparent proxy for the object. The transparent proxy provides the illusion that the actual object resides in the client's space. It achieves this by forwarding calls made on it to the real object using the remoting infrastructure.  
  
 The transparent proxy is itself housed by an instance of a managed runtime class of type RealProxy. The RealProxy implements a part of the functionality that is needed to forward the operations from the transparent proxy. Note that a proxy object inherits the associated semantics of managed objects such as garbage collection, support for fields and methods, and can be extended to form new classes. The proxy has a dual nature: it acts as an object of the same class as the remote object (transparent proxy), and it is a managed object itself.  
  
 A proxy object can be used without regard to any remoting subdivisions within a <xref:System.AppDomain>.  
  
> [!NOTE]
>  This class makes a link demand and an inheritance demand at the class level. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see [Link Demands](../Topic/Link%20Demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).  
  
   
  
## Examples  
 [!CODE [ChannelServices_SyncDispatchMessage#1](../CodeSnippet/VS_Snippets_Remoting/ChannelServices_SyncDispatchMessage#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RealProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Runtime.Remoting.Proxies.RealProxy"&gt; class with default values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!CODE [CustomProxy_Attribute_RealProxy#12](../CodeSnippet/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RealProxy (Type classToProxy);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type classToProxy) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="classToProxy" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="classToProxy">The &lt;see cref="T:System.Type"&gt; of the remote object for which to create a proxy.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Runtime.Remoting.Proxies.RealProxy"&gt; class that represents a remote object of the specified &lt;xref:System.Type&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The current method creates a transparent proxy, which can be accessed through the <xref:System.Runtime.Remoting.Proxies.RealProxy.GetTransparentProxy%2A> method.  
  
 A client that uses an object across any kind of a remoting boundary is actually using a transparent proxy for the object. The transparent proxy gives the impression that the actual object resides in the client's space. It achieves this by forwarding calls made on it to the real object using the remoting infrastructure.  
  
 The transparent proxy is housed by an instance of a managed runtime class <xref:System.Runtime.Remoting.Proxies.RealProxy>. The <xref:System.Runtime.Remoting.Proxies.RealProxy> implements a part of the functionality that is needed to forward the operations from the transparent proxy. Note that a proxy object inherits the associated semantics of managed objects such as garbage collection and support for fields and methods, and can be extended to form new classes. The proxy has a dual nature: it acts as an object of the same class as the remote object (transparent proxy), and is a managed object itself.  
  
   
  
## Examples  
 [!CODE [CustomProxy_Attribute_RealProxy#10](../CodeSnippet/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RealProxy (Type classToProxy, IntPtr stub, object stubData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type classToProxy, native int stub, object stubData) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="classToProxy" Type="System.Type" />
        <Parameter Name="stub" Type="System.IntPtr" />
        <Parameter Name="stubData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="classToProxy">The &lt;see cref="T:System.Type"&gt; of the remote object for which to create a proxy.</param>
        <param name="stub">A stub to associate with the new proxy instance.</param>
        <param name="stubData">The stub data to set for the specified stub and the new proxy instance.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Runtime.Remoting.Proxies.RealProxy"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The stub data is used by custom proxy users to decide what to do with an incoming method call. For example, the stub data might be information about the server's context that you can use to determine whether to execute the call locally, or send it through the remoting infrastructure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachServer">
      <MemberSignature Language="C#" Value="protected void AttachServer (MarshalByRefObject s);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AttachServer(class System.MarshalByRefObject s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.MarshalByRefObject" />
      </Parameters>
      <Docs>
        <param name="s">The &lt;see cref="T:System.MarshalByRefObject"&gt; that the current proxy instance represents.</param>
        <summary>Attaches the current proxy instance to the specified remote &lt;see cref="T:System.MarshalByRefObject"&gt;.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjRef">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjRef CreateObjRef (Type requestedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjRef CreateObjRef(class System.Type requestedType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjRef</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestedType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="requestedType">The object type that an &lt;see cref="T:System.Runtime.Remoting.ObjRef"&gt; is created for.</param>
        <summary>Creates an &lt;see cref="T:System.Runtime.Remoting.ObjRef"&gt; for the specified object type, and registers it with the remoting infrastructure as a client-activated object.</summary>
        <returns>A new instance of &lt;see cref="T:System.Runtime.Remoting.ObjRef"&gt; that is created for the specified type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!CODE [CustomProxy_Attribute_RealProxy#6](../CodeSnippet/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachServer">
      <MemberSignature Language="C#" Value="protected MarshalByRefObject DetachServer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.MarshalByRefObject DetachServer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.MarshalByRefObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detaches the current proxy instance from the remote server object that it represents.</summary>
        <returns>The detached server object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCOMIUnknown">
      <MemberSignature Language="C#" Value="public virtual IntPtr GetCOMIUnknown (bool fIsMarshalled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetCOMIUnknown(bool fIsMarshalled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fIsMarshalled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fIsMarshalled">`true` if the object reference is requested for marshaling to a remote location; `false` if the object reference is requested for communication with unmanaged objects in the current process through COM.</param>
        <summary>Requests an unmanaged reference to the object represented by the current proxy instance.</summary>
        <returns>A pointer to a [COM Callable Wrapper](../Topic/COM%20Callable%20Wrapper.md) if the object reference is requested for communication with unmanaged objects in the current process through COM, or a pointer to a cached or newly generated `IUnknown` COM interface if the object reference is requested for marshaling to a remote location.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the proxy is requested for marshaling, then an `IUnknown` interface for the object represented by the current proxy instance is returned. If an `IUnknown` was previously cached by the <xref:System.Runtime.Remoting.Proxies.RealProxy.SetCOMIUnknown%2A> method, then that instance is returned; otherwise, a new instance is returned.  
  
 If the proxy is requested not for marshaling but for communication with unmanaged objects in the current process, then a [COM Callable Wrapper](../Topic/COM%20Callable%20Wrapper.md) (CCW), which can be used in the current process for communication through COM, is returned.  
  
   
  
## Examples  
 [!CODE [RealProxy_Sample#2](../CodeSnippet/VS_Snippets_Remoting/RealProxy_Sample#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The &lt;see cref="T:System.Runtime.Serialization.SerializationInfo"&gt; into which the transparent proxy is serialized.</param>
        <param name="context">The source and destination of the serialization.</param>
        <summary>Adds the transparent proxy of the object represented by the current instance of &lt;see cref="T:System.Runtime.Remoting.Proxies.RealProxy"&gt; to the specified &lt;xref:System.Runtime.Serialization.SerializationInfo&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!CODE [CustomProxy_Attribute_RealProxy#7](../CodeSnippet/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProxiedType">
      <MemberSignature Language="C#" Value="public Type GetProxiedType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetProxiedType() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the &lt;see cref="T:System.Type"&gt; of the object that the current instance of &lt;xref:System.Runtime.Remoting.Proxies.RealProxy&gt; represents.</summary>
        <returns>The &lt;see cref="T:System.Type"&gt; of the object that the current instance of &lt;xref:System.Runtime.Remoting.Proxies.RealProxy&gt; represents.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!CODE [CustomProxy_Attribute_RealProxy#10](../CodeSnippet/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStubData">
      <MemberSignature Language="C#" Value="public static object GetStubData (System.Runtime.Remoting.Proxies.RealProxy rp);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetStubData(class System.Runtime.Remoting.Proxies.RealProxy rp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rp" Type="System.Runtime.Remoting.Proxies.RealProxy" />
      </Parameters>
      <Docs>
        <param name="rp">The proxy for which stub data is requested.</param>
        <summary>Retrieves stub data that is stored for the specified proxy.</summary>
        <returns>Stub data for the specified proxy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The stub data is used by custom proxy users to decide what to do with an incoming method call. For example, the stub data might be information about the server's context that you can use to determine whether to execute the call locally, or send it through the remoting infrastructure.  
  
   
  
## Examples  
 [!CODE [CustomProxy_Attribute_RealProxy#9](../CodeSnippet/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransparentProxy">
      <MemberSignature Language="C#" Value="public virtual object GetTransparentProxy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetTransparentProxy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the transparent proxy for the current instance of &lt;see cref="T:System.Runtime.Remoting.Proxies.RealProxy"&gt;.</summary>
        <returns>The transparent proxy for the current proxy instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!CODE [CustomProxy_Attribute_RealProxy#8](../CodeSnippet/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnwrappedServer">
      <MemberSignature Language="C#" Value="protected MarshalByRefObject GetUnwrappedServer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.MarshalByRefObject GetUnwrappedServer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.MarshalByRefObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the server object that is represented by the current proxy instance.</summary>
        <returns>The server object that is represented by the current proxy instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetUnwrappedServer method is used in scenarios involving an external <xref:System.Runtime.Remoting.Contexts.Context> in the same <xref:System.AppDomain>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeServerObject">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Activation.IConstructionReturnMessage InitializeServerObject (System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.Activation.IConstructionReturnMessage InitializeServerObject(class System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Activation.IConstructionReturnMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctorMsg" Type="System.Runtime.Remoting.Activation.IConstructionCallMessage" />
      </Parameters>
      <Docs>
        <param name="ctorMsg">A construction call message that contains the constructor parameters for the new instance of the remote object that is represented by the current &lt;see cref="T:System.Runtime.Remoting.Proxies.RealProxy"&gt;. Can be `null`.</param>
        <summary>Initializes a new instance of the object &lt;see cref="T:System.Type"&gt; of the remote object that the current instance of &lt;xref:System.Runtime.Remoting.Proxies.RealProxy&gt; represents with the specified &lt;xref:System.Runtime.Remoting.Activation.IConstructionCallMessage&gt;.</summary>
        <returns>The result of the construction request.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the  parameter is `null`, then the InitializeServerObject method calls the default constructor for the new instance of the remote object that is represented by the current <xref:System.Runtime.Remoting.Proxies.RealProxy>.  
  
   
  
## Examples  
 [!CODE [CustomProxy_Attribute_RealProxy#5](../CodeSnippet/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public abstract System.Runtime.Remoting.Messaging.IMessage Invoke (System.Runtime.Remoting.Messaging.IMessage msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.Messaging.IMessage Invoke(class System.Runtime.Remoting.Messaging.IMessage msg) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Messaging.IMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
      </Parameters>
      <Docs>
        <param name="msg">A &lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage"&gt; that contains a &lt;xref:System.Collections.IDictionary&gt; of information about the method call.</param>
        <summary>When overridden in a derived class, invokes the method that is specified in the provided &lt;see cref="T:System.Runtime.Remoting.Messaging.IMessage"&gt; on the remote object that is represented by the current instance.</summary>
        <returns>The message returned by the invoked method, containing the return value and any `out` or `ref` parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the transparent proxy that is backed by the <xref:System.Runtime.Remoting.Proxies.RealProxy> is called, it delegates the calls to the Invoke method. The Invoke method transforms the message in the  parameter into a <xref:System.Runtime.Remoting.Messaging.IMethodCallMessage>, and sends it to the remote object that is represented by the current instance of <xref:System.Runtime.Remoting.Proxies.RealProxy>.  
  
 The <xref:System.Runtime.Remoting.Messaging.IMessage> parameter provides a dictionary through the <xref:System.Runtime.Remoting.Messaging.IMessage.Properties%2A?displayProperty=fullName> property. The dictionary contains name/value pairs of information about the method call, such as the name of the method called and its parameters.  
  
   
  
## Examples  
 [!CODE [CustomProxy_Attribute_RealProxy#4](../CodeSnippet/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCOMIUnknown">
      <MemberSignature Language="C#" Value="public virtual void SetCOMIUnknown (IntPtr i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCOMIUnknown(native int i) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="i">A pointer to the `IUnknown` interface for the object that is represented by the current proxy instance.</param>
        <summary>Stores an unmanaged proxy of the object that is represented by the current instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When an unmanaged proxy attempts to communicate with the common language runtime through COM, the runtime resolves the remote object that is represented by the unmanaged proxy. If the remote object is managed and also resides in a common language environment, then instead of communicating with it through distributed COM, the object is sent to the current process.  
  
 If the remote object is not derived from <xref:System.MarshalByRefObject>, then it is serialized and copied to the current location. If it is derived from <xref:System.MarshalByRefObject>, then it returns a transparent proxy, and the remoting infrastructure caches the unmanaged proxy (the `IUnknown` interface) in the transparent proxy for future use.  
  
   
  
## Examples  
 [!CODE [RealProxy_Sample#3](../CodeSnippet/VS_Snippets_Remoting/RealProxy_Sample#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStubData">
      <MemberSignature Language="C#" Value="public static void SetStubData (System.Runtime.Remoting.Proxies.RealProxy rp, object stubData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetStubData(class System.Runtime.Remoting.Proxies.RealProxy rp, object stubData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rp" Type="System.Runtime.Remoting.Proxies.RealProxy" />
        <Parameter Name="stubData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="rp">The proxy for which to set stub data.</param>
        <param name="stubData">The new stub data.</param>
        <summary>Sets the stub data for the specified proxy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The stub data is used by custom proxy users to decide what to do with an incoming method call. For example, the stub data might be information about the server's context that you can use to determine whether to execute the call locally, or send it through the remoting infrastructure.  
  
   
  
## Examples  
 [!CODE [CustomProxy_Attribute_RealProxy#3](../CodeSnippet/VS_Snippets_Remoting/CustomProxy_Attribute_RealProxy#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsInterface">
      <MemberSignature Language="C#" Value="public virtual IntPtr SupportsInterface (ref Guid iid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int SupportsInterface(valuetype System.Guid iid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iid" Type="System.Guid&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="iid">A reference to the requested interface.</param>
        <summary>Requests a COM interface with the specified ID.</summary>
        <returns>A pointer to the requested interface.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SupportsInterface method allows the current proxy instance to implement additional COM interfaces on behalf of the server object that the current instance represents. The current method generates the requested interface and returns a pointer to it. The types of COM interfaces that can be generated by this method depend on the proxy type, which in turn might depend on the type of the server object that the current proxy instance represents.  
  
 For more information, see <xref:System.Runtime.Remoting.Proxies.ProxyAttribute>.  
  
   
  
## Examples  
 [!CODE [RealProxy_Sample#1](../CodeSnippet/VS_Snippets_Remoting/RealProxy_Sample#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>