<Type Name="ObjectContext" FullName="System.Data.Objects.ObjectContext">
  <TypeSignature Language="C#" Value="public class ObjectContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectContext extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides facilities for querying and working with entity data as objects.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The ObjectContext class is not thread safe. The integrity of data objects in an ObjectContext cannot be ensured in multithreaded scenarios.  
  
 The ObjectContext class is the primary class for interacting with data as objects that are instances of entity types that are defined in a conceptual model. An instance of the ObjectContext class encapsulates the following:  
  
-   A connection to the database, in the form of an <xref:System.Data.EntityClient.EntityConnection> object.  
  
-   Metadata that describes the model, in the form of a <xref:System.Data.Metadata.Edm.MetadataWorkspace> object.  
  
-   An <xref:System.Data.Objects.ObjectStateManager> object that manages objects persisted in the cache.  
  
 When the object layer that represents a conceptual model is generated by the Entity Data Model tools, the class that represents the <xref:System.Data.Metadata.Edm.EntityContainer> for the model is derived from the ObjectContext.  
  
   
  
## Examples  
 This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to construct an ObjectContext.  
  
 [!CODE [DP ObjectServices Concepts#ObjectContext](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#objectcontext)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectContext (System.Data.EntityClient.EntityConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
      </Parameters>
      <Docs>
        <param name="connection">An &lt;see cref="T:System.Data.EntityClient.EntityConnection"&gt; that contains references to the model and to the data source connection.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Data.Objects.ObjectContext"&gt; class with the given connection. During construction, the metadata workspace is extracted from the &lt;xref:System.Data.EntityClient.EntityConnection&gt; object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectContext (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">The connection string, which also provides access to the metadata information.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Data.Objects.ObjectContext"&gt; class with the given connection string and default entity container name.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  is a string that contains information that is required to access a conceptual model and to connect to a data source. The <xref:System.Data.EntityClient.EntityConnectionStringBuilder> class can be used to correctly format the string.  
  
 The  generate a named connection string that is stored in the application's configuration file. This named connection string can be supplied instead of the  parameter when instantiating the <xref:System.Data.Objects.ObjectContext> class.  
  
   
  
## Examples  
 The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows how to construct an <xref:System.Data.Objects.ObjectContext>.  
  
 [!CODE [DP ObjectServices Concepts#ObjectContext](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#objectcontext)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectContext (System.Data.EntityClient.EntityConnection connection, string defaultContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection, string defaultContainerName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
        <Parameter Name="defaultContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">An &lt;see cref="T:System.Data.EntityClient.EntityConnection"&gt; that contains references to the model and to the data source connection.</param>
        <param name="defaultContainerName">The name of the default entity container. When the  is set through this method, the property becomes read-only.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Data.Objects.ObjectContext"&gt; class with a given connection and entity container name.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectContext (string connectionString, string defaultContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string connectionString, string defaultContainerName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="defaultContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">The connection string, which also provides access to the metadata information.</param>
        <param name="defaultContainerName">The name of the default entity container. When the  is set through this method, the property becomes read-only.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Data.Objects.ObjectContext"&gt; class with a given connection string and entity container name.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The  is a string that contains information that is required to access a conceptual model and to connect to a data source. The <xref:System.Data.EntityClient.EntityConnectionStringBuilder> class can be used to correctly format the string.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptAllChanges">
      <MemberSignature Language="C#" Value="public void AcceptAllChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptAllChanges() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Accepts all changes made to objects in the object context.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Accepts the changes on all associated entries in the <xref:System.Data.Objects.ObjectStateManager> so their resultant state is either unchanged or detached.  
  
 This method iterates all the <xref:System.Data.Objects.ObjectStateEntry> objects within the <xref:System.Data.Objects.ObjectStateManager> that are Added or Modified, and then sets the state of the entry to Unchanged. The Deleted items become detached.  
  
 If the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method was called and the <xref:System.Data.Objects.SaveOptions> was not specified, the user must call the AcceptAllChanges method. The AcceptAllChanges method is useful in the scenario where a transaction has failed and a user wants to retry.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddObject(string entitySetName, object entity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">Represents the entity set name, which may optionally be qualified by the entity container name.</param>
        <param name="entity">The &lt;see cref="T:System.Object"&gt; to add.</param>
        <summary>Adds an object to the object context.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call AddObject on the <xref:System.Data.Objects.ObjectContext> to add the object to the object context. Do this when the object is a new object that does not yet exist in the data source. For more information, see [Attaching and Detaching Objects](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  
  
 Objects are added to the <xref:System.Data.Objects.ObjectStateManager> in the <xref:System.Data.EntityState>, <xref:System.Data.EntityState> or <xref:System.Data.EntityState> state.  
  
 When you create a new object that is related to another object in the object context, add the object by using one of the following methods:  
  
-   Call the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> method on the <xref:System.Data.Objects.DataClasses.EntityCollection%601> and specify the related object. Do this for a one-to-many or many-to-many relationship.  
  
-   Set the <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> property of the <xref:System.Data.Objects.DataClasses.EntityReference%601> to the related object. Do this for a one-to-one or many-to-one relationship.  
  
 For more information, see [Creating, Adding, Modifying, and Deleting Objects](http://msdn.microsoft.com/en-us/f76f1fad-c553-4b59-820b-89b3dec2fad1).  
  
 If the object is in a detached state it must not have an <xref:System.Data.EntityKey>.  
  
 The rules for the  format are as follows:  
  
-   If the <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> property is `null`, then the  has to be fully qualified as in *<Entity Container Name\>*.*<Entity Set Name\>*.  
  
-   If <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> is not `null`, then the  can be either *\<Entity Container Name>*.*\<Entity Set Name>* or *\<Entity Set Name>*.  
  
 If the  has an <xref:System.Data.EntityKey> and  has a value, then the <xref:System.Data.Metadata.Edm.EntitySet> of the entity key must match the <xref:System.Data.Metadata.Edm.EntitySet> that was found based on the  and entity container name.  
  
   
  
## Examples  
 This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example adds a new product and saves the changes to the database.  
  
 [!CODE [DP ObjectServices Concepts#AddObject](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#addobject)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyCurrentValues&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public TEntity ApplyCurrentValues&lt;TEntity&gt; (string entitySetName, TEntity currentEntity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEntity ApplyCurrentValues&lt;class TEntity&gt;(string entitySetName, !!TEntity currentEntity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="currentEntity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entitySetName">To be added.</param>
        <param name="currentEntity">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOriginalValues&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public TEntity ApplyOriginalValues&lt;TEntity&gt; (string entitySetName, TEntity originalEntity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEntity ApplyOriginalValues&lt;class TEntity&gt;(string entitySetName, !!TEntity originalEntity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="originalEntity" Type="TEntity" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entitySetName">To be added.</param>
        <param name="originalEntity">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyPropertyChanges">
      <MemberSignature Language="C#" Value="public void ApplyPropertyChanges (string entitySetName, object changed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyPropertyChanges(string entitySetName, object changed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use ApplyCurrentValues instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="changed" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">The name of the entity set to which the object belongs.</param>
        <param name="changed">The detached object that has property updates to apply to the original object.</param>
        <summary>Applies property changes from a detached object to an object already attached to the object context.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> method is used to apply property changes from a modified, detached version of an object to the original version attached to the <xref:System.Data.Objects.ObjectContext>. This supports scenarios, such as Web services, where an entity object is detached and sent to a remote application where property updates are made. This method enables you to more easily apply these changes back to the original object.  
  
 After <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A>, the object is in the <xref:System.Data.EntityState> state. You must call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method to update the data source.  
  
 The original object must exist in the <xref:System.Data.Objects.ObjectStateManager> and must be in the <xref:System.Data.EntityState> or <xref:System.Data.EntityState> state. The original object is only modified if there are modified properties in the  object.  
  
 The <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> property of the supplied object must be set to a valid <xref:System.Data.EntityKey>.  
  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> does not affect navigation properties or related objects.  
  
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> only sets properties that exist in the entity metadata for the type. For example, properties that are added in a partial class are not included in the <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> operation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Data.Objects.DataClasses.IEntityWithKey entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(class System.Data.Objects.DataClasses.IEntityWithKey entity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithKey" />
      </Parameters>
      <Docs>
        <param name="entity">The object to attach.</param>
        <summary>Attaches an object or object graph to the object context when the object has an entity key.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call Attach on the <xref:System.Data.Objects.ObjectContext> to attach the object to the object context. Do this when the object already exists in the data source but is currently not attached to the context. For more information, see [Customizing Objects](http://msdn.microsoft.com/en-us/af6f07ce-2261-4c65-87cf-d018ad082921).  
  
 Attach is used to attach an object or the top-level object in an object graph.  
  
 The object being attached must implement <xref:System.Data.Objects.DataClasses.IEntityWithKey> to expose an <xref:System.Data.EntityKey>. All generated entity classes implement <xref:System.Data.Objects.DataClasses.IEntityWithKey>.  
  
 When you attach related objects, you must also call `Attach` on the <xref:System.Data.Objects.DataClasses.EntityReference%601> or the <xref:System.Data.Objects.DataClasses.EntityCollection%601> to define the relationship.  
  
 This method calls the <xref:System.Data.Objects.ObjectContext.AttachTo%2A> method.  
  
 The following considerations apply when attaching objects:  
  
-   If the object being attached has related objects, those objects will also be attached to the object context.  
  
-   Objects are added to the object context in an unchanged state.  
  
-   The object that is passed to the Attach method must have a valid <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> value. If the object does not have a valid <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> value, use the <xref:System.Data.Objects.ObjectContext.AttachTo%2A> method to specify the name of the entity set.  
  
   
  
## Examples  
 The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). In this example, two objects are attached and then the relationship is defined.  
  
 [!CODE [DP ObjectServices Concepts#AttachRelatedObjects](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#attachrelatedobjects)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachTo">
      <MemberSignature Language="C#" Value="public void AttachTo (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachTo(string entitySetName, object entity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">Represents the entity set name, which may optionally be qualified by the entity container name.</param>
        <param name="entity">The &lt;see cref="T:System.Object"&gt; to attach.</param>
        <summary>Attaches an object or object graph to the object context in a specific entity set.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call AttachTo on the <xref:System.Data.Objects.ObjectContext> to attach the object to a specific entity set in the object context or if the object has a `null` (`Nothing` in Visual Basic) <xref:System.Data.EntityKey> value. For more information, see [Attaching and Detaching Objects](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  
  
 The object being attached can be a single object or be part of the graph.  
  
 The rules for the  format are as follows:  
  
-   If the <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> property is `null`, then the  has to be fully qualified as in *\<Entity Container Name>*.*\<Entity Set Name>*.  
  
-   If the <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> is not `null`, then the  can be either *\<Entity Container Name>*.*\<Entity Set Name>* or *\<Entity Set Name>*.  
  
 The object being attached is not required to have an <xref:System.Data.EntityKey> associated with it. If the object does not have an entity key, then  cannot be an empty string.  
  
 If the object being attached has an <xref:System.Data.EntityKey> and  has a value, then the <xref:System.Data.Metadata.Edm.EntitySet> of the entity key must match the <xref:System.Data.Metadata.Edm.EntitySet> that was found based on the  and entity container name.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; CommandTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the timeout value, in seconds, for all object context operations. A `null` value indicates that the default value of the underlying provider will be used.</summary>
        <value>An &lt;see cref="T:System.Int32"&gt; value that is the timeout value, in seconds.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default timeout for object queries and the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> operation is defined by the underlying connection provider. However, you can override this default timeout value by using the CommandTimeout property on the <xref:System.Data.Objects.ObjectContext>, as shown in the following example.  
  
 [!CODE [DP ObjectServices Concepts#QueryTimeout](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#querytimeout)]  
  
 Do this when you have a complex query or when other performance issues cause queries or calls to <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> to time out frequently.  
  
   
  
## Examples  
 [Object Queries](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the connection used by the object context.</summary>
        <value>A &lt;see cref="T:System.Data.Common.DbConnection"&gt; object that is the connection.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property returns the connection object that was passed into the constructor or created during construction. The connection’s ownership is determined by the constructors used.  
  
   
  
## Examples  
 This example creates an <xref:System.Data.EntityClient.EntityConnection> object that is passed into the constructor of a long-running <xref:System.Data.Objects.ObjectContext>. The connection is opened manually. Both the <xref:System.Data.EntityClient.EntityConnection> object and the <xref:System.Data.Objects.ObjectContext> object are disposed of manually.  
  
 [!CODE [DP ObjectServices Concepts#OpenEntityConnection](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#openentityconnection)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextOptions">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectContextOptions ContextOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectContextOptions ContextOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectContextOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Data.Objects.ObjectContextOptions"&gt; instance that contains options that affect the behavior of the &lt;xref:System.Data.Objects.ObjectContext&gt;.</summary>
        <value>The &lt;see cref="T:System.Data.Objects.ObjectContextOptions"&gt; instance that contains options that affect the behavior of the &lt;xref:System.Data.Objects.ObjectContext&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabase">
      <MemberSignature Language="C#" Value="public void CreateDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateDatabase() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the database by using the current data source connection and the metadata in the &lt;see cref="T:System.Data.Metadata.Edm.StoreItemCollection"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call <xref:System.Data.Objects.ObjectContext.CreateDatabaseScript%2A> to view the data definition language (DDL) script. Call CreateDatabase to execute the script.  
  
 Most of the work is delegated to the <xref:System.Data.Common.DbProviderServices.CreateDatabase%2A> method.  
  
 For more information, see [Working with Data Definition Language](../Topic/Working%20with%20Data%20Definition%20Language.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseScript">
      <MemberSignature Language="C#" Value="public string CreateDatabaseScript ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string CreateDatabaseScript() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a data definition language (DDL) script that creates schema objects (tables, primary keys, foreign keys) for the metadata in the &lt;see cref="T:System.Data.Metadata.Edm.StoreItemCollection"&gt;. The &lt;see cref="T:System.Data.Metadata.Edm.StoreItemCollection"&gt; loads metadata from store schema definition language (SSDL) files.</summary>
        <returns>A DDL script that creates schema objects for the metadata in the &lt;see cref="T:System.Data.Metadata.Edm.StoreItemCollection"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call CreateDatabaseScript to view the DDL script. Call <xref:System.Data.Objects.ObjectContext.CreateDatabase%2A> to execute the script.  
  
 Most of the work is delegated to the <xref:System.Data.Common.DbProviderServices.CreateDatabase%2A> method.  
  
 For more information, see [Working with Data Definition Language](../Topic/Working%20with%20Data%20Definition%20Language.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEntityKey">
      <MemberSignature Language="C#" Value="public System.Data.EntityKey CreateEntityKey (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityKey CreateEntityKey(string entitySetName, object entity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">The fully qualified name of the entity set to which the entity object belongs.</param>
        <param name="entity">The object for which the entity key is being retrieved.</param>
        <summary>Creates the entity key for a specific object, or returns the entity key if it already exists.</summary>
        <returns>The &lt;see cref="T:System.Data.EntityKey"&gt; of the object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If an <xref:System.Data.EntityKey> does not exist for the , the CreateEntityKey method creates a new key for it.  
  
 This method is used to determine whether an object that has the same <xref:System.Data.EntityKey> is already attached to the <xref:System.Data.Objects.ObjectContext>. If an object that has the same <xref:System.Data.EntityKey> is already attached, an exception is raised. Use the CreateEntityKey method to try to retrieve the <xref:System.Data.EntityKey> of the detached object before calling the <xref:System.Data.Objects.ObjectContext.Attach%2A> method.  
  
   
  
## Examples  
 The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). In this example, CreateEntityKey is used to retrieve the entity key of an existing object.  
  
 [!CODE [DP ObjectServices Concepts#ApplyItemUpdatesGetObject](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#applyitemupdatesgetobject)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T CreateObject&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T CreateObject&lt;class T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectSet&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectSet&lt;TEntity&gt; CreateObjectSet&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectSet`1&lt;!!TEntity&gt; CreateObjectSet&lt;class TEntity&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectSet&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectSet&lt;TEntity&gt; CreateObjectSet&lt;TEntity&gt; (string entitySetName) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectSet`1&lt;!!TEntity&gt; CreateObjectSet&lt;class TEntity&gt;(string entitySetName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entitySetName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateProxyTypes">
      <MemberSignature Language="C#" Value="public void CreateProxyTypes (System.Collections.Generic.IEnumerable&lt;Type&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateProxyTypes(class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Collections.Generic.IEnumerable&lt;System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="types">An enumeration of &lt;see cref="T:System.Type"&gt; objects that represent custom data classes that map to the conceptual model.</param>
        <summary>Generates an equivalent type that can be used with the Entity Framework for each type in the supplied enumeration.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Individual types in the  enumeration that do not map to an entity type in the conceptual model are ignored.  
  
 For more information, see [Requirements for Creating POCO Proxies](http://msdn.microsoft.com/en-us/dcdbf982-9b9d-4582-806a-64de4a1c03c8) and [Working with POCO Entities](http://msdn.microsoft.com/en-us/5e0fb82a-b6d1-41a1-b37b-c12db61629d3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; CreateQuery&lt;T&gt; (string queryString, System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!T&gt; CreateQuery&lt;T&gt;(string queryString, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="queryString">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseExists">
      <MemberSignature Language="C#" Value="public bool DatabaseExists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DatabaseExists() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Checks if the database that is specified as the database in the current data source connection exists on the data source.</summary>
        <returns>`true` if the database exists.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Most of the work is delegated to the <xref:System.Data.Common.DbProviderServices.DatabaseExists%2A> method.  
  
 For more information, see [Working with Data Definition Language](../Topic/Working%20with%20Data%20Definition%20Language.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultContainerName">
      <MemberSignature Language="C#" Value="public string DefaultContainerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultContainerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default container name.</summary>
        <value>A &lt;see cref="T:System.String"&gt; that is the default container name.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 DefaultContainerName never returns `null`; it either returns the value that was set or an empty string. The user can set this property to `null`, but internally the name will be set to an empty string, so the user never needs to check for both an empty string and `null`.  
  
 The default container name is also defined as part of a constructor. If the default container name is set through the protected constructor, the property becomes read-only.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public void DeleteDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteDatabase() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deletes the database that is specified as the database in the current data source connection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Most of the work is delegated to the  <xref:System.Data.Common.DbProviderServices.DeleteDatabase%2A> method.  
  
 For more information, see [Working with Data Definition Language](../Topic/Working%20with%20Data%20Definition%20Language.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteObject">
      <MemberSignature Language="C#" Value="public void DeleteObject (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteObject(object entity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">An object that specifies the entity to delete. The object can be in any state except &lt;see cref="T:System.Data.EntityState"&gt;.</param>
        <summary>Marks an object for deletion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Marks an object for deletion from the <xref:System.Data.Objects.ObjectStateManager>. The object is deleted in the data source when the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method is called.  
  
 Deleting the parent object also deletes all the child objects in the constrained relationship. This result is the same as enabling the `CascadeDelete` property on the association for the relationship.  
  
 The DeleteObject method can be called on objects that are already deleted.  
  
   
  
## Examples  
 These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832).  
  
 This example constructs an <xref:System.Data.EntityKey> with a specific ProductID, uses the key to retrieve a Product object from the data source, deletes the product, and saves the changes to the database.  
  
 [!CODE [DP ObjectServices Concepts#DeleteObject](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#deleteobject)]  
  
 This example deletes an existing order item, adds a new item, and saves the changes to the database.  
  
 [!CODE [DP ObjectServices Concepts#SaveChanges](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#savechanges)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Detach">
      <MemberSignature Language="C#" Value="public void Detach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Detach(object entity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">Object to be detached. Only the  is removed; if there are any related objects that are being tracked by the same &lt;see cref="T:System.Data.Objects.ObjectStateManager"&gt;, those will not be detached automatically.</param>
        <summary>Removes the object from the object context.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Removes the object from the <xref:System.Data.Objects.ObjectStateManager>. This disables change tracking and identity resolution for that object. For more information, see [Attaching and Detaching Objects](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  
  
 After the Detach method is called, the system will no longer keep references that point to this object and it can be collected by the garbage collector.  
  
> [!NOTE]
>  Garbage collection can only occur if the user code does not have any references to the detached object.  
  
 The following considerations apply when detaching objects:  
  
-   Detach only affects the specific object that is passed to the method. If the object being detached has related objects in the object context, those objects are not detached.  
  
-   Detaching objects does not affect data in the data source.  
  
-   Cascade delete directives and referential constraints are not enforced during a detach operation.  
  
 For more information, see [Attaching and Detaching Objects](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  
  
   
  
## Examples  
 [!CODE [DP ObjectServices Concepts#DetachObjects](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#detachobjects)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public void DetectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetectChanges() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ensures that &lt;see cref="T:System.Data.Objects.ObjectStateEntry"&gt; changes are synchronized with changes in all objects that are tracked by the &lt;xref:System.Data.Objects.ObjectStateManager&gt;.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the object context.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method closes the connection if it was opened by the Entity Framework. After <xref:System.Data.Objects.ObjectContext.Dispose%2A> is called, operations that require an open connection, such as executing a query or calling the<xref:System.Data.Objects.ObjectQuery.ToTraceString%2A> method, will cause an exception. Operations that do not require an open connection, such as composing a query or attaching objects, will not cause an exception. The Dispose method does not close any explicitly opened connections.  
  
 Limiting the scope of an <xref:System.Data.Objects.ObjectContext> within a `using` block (`Using` in Visual Basic) ensures that resources are correctly disposed. For more information, see [Managing Connections and Transactions](http://msdn.microsoft.com/en-us/b6659d2a-9a45-4e98-acaa-d7a8029e5b99).  
  
 The Dispose method calls the `virtual` (`Overridable` in Visual Basic) <xref:System.Data.Objects.ObjectContext.Dispose%28System.Boolean%29> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.</param>
        <summary>Releases the resources used by the object context.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method closes the connection. After Dispose is called, operations that require an open connection, such as executing a query or calling the <xref:System.Data.Objects.ObjectQuery.ToTraceString%2A> method, will cause an exception. Operations that do not require an open connection, such as composing a query or attaching objects, will not cause an exception.  
  
 Limiting the scope of an <xref:System.Data.Objects.ObjectContext> within a `using` block (`Using` in Visual Basic) ensures that resources are properly disposed. For more information, see [Managing Connections and Transactions](http://msdn.microsoft.com/en-us/b6659d2a-9a45-4e98-acaa-d7a8029e5b99).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction">
      <MemberSignature Language="C#" Value="public int ExecuteFunction (string functionName, System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteFunction(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as `&lt;Container Name&gt;.&lt;Function Name&gt;`. When the default container name is known, only the function name is required.</param>
        <param name="parameters">An array of &lt;see cref="T:System.Data.Objects.ObjectParameter"&gt; objects.</param>
        <summary>Executes a stored procedure or function that is defined in the data source and expressed in the conceptual model; discards any results returned from the function; and returns the number of rows affected by the execution.</summary>
        <returns>The number of rows affected.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;TElement&gt;(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="functionName">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, System.Data.Objects.MergeOption mergeOption, System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;TElement&gt;(string functionName, valuetype System.Data.Objects.MergeOption mergeOption, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="functionName">To be added.</param>
        <param name="mergeOption">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreCommand">
      <MemberSignature Language="C#" Value="public int ExecuteStoreCommand (string commandText, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteStoreCommand(string commandText, object[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandText">The command to execute, in the native language of the data source.</param>
        <param name="parameters">An array of parameters to pass to the command.</param>
        <summary>Executes an arbitrary command directly against the data source using the existing connection.</summary>
        <returns>The number of rows affected.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using parameterized commands helps guard against SQL injection attacks, in which an attacker "injects" a command into a SQL statement that compromises security on the server. Parameterized commands guard against a SQL injection attack by guaranteeing that values received from an external source are passed as values only, and not part of the SQL statement. As a result, SQL commands inserted into a value are not executed at the data source. Rather, they are evaluated only as a parameter value. In addition to the security benefits, parameterized commands provide a convenient method for organizing values passed with a SQL statement or to a stored procedure.  
  
 The  value can be an array of <xref:System.Data.Common.DbParameter> objects or an array of parameter values. If only values are supplied, an array of <xref:System.Data.Common.DbParameter> objects are created based on the order of the values in the array.  
  
 The store command is executed in the context of the current transaction, if a current transaction exists.  
  
 For more information, see:  
  
 [Directly Executing Store Commands](http://msdn.microsoft.com/en-us/5708d0a2-3f76-4825-978a-d06ff5c4bb3d) and  
  
 [How to: Directly Execute Commands Against the Data Source](http://msdn.microsoft.com/en-us/def3cc87-cfff-4dee-83cf-1a40c73a2d01)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreQuery&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteStoreQuery&lt;TElement&gt; (string commandText, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteStoreQuery&lt;TElement&gt;(string commandText, object[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="commandText">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreQuery&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TEntity&gt; ExecuteStoreQuery&lt;TEntity&gt; (string commandText, string entitySetName, System.Data.Objects.MergeOption mergeOption, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TEntity&gt; ExecuteStoreQuery&lt;TEntity&gt;(string commandText, string entitySetName, valuetype System.Data.Objects.MergeOption mergeOption, object[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="commandText">To be added.</param>
        <param name="entitySetName">To be added.</param>
        <param name="mergeOption">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownProxyTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Type&gt; GetKnownProxyTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; GetKnownProxyTypes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns all the existing proxy types.</summary>
        <returns>An &lt;xref:System.Collections.Generic.IEnumerable%601&gt; of all the existing proxy types.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetKnownProxyTypes method is used when proxy object generation is enabled for POCO entities. For more information, see [Requirements for Creating POCO Proxies](http://msdn.microsoft.com/en-us/dcdbf982-9b9d-4582-806a-64de4a1c03c8) and [Working with POCO Entities](http://msdn.microsoft.com/en-us/5e0fb82a-b6d1-41a1-b37b-c12db61629d3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectByKey">
      <MemberSignature Language="C#" Value="public object GetObjectByKey (System.Data.EntityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetObjectByKey(class System.Data.EntityKey key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key">The key of the object to be found.</param>
        <summary>Returns an object that has the specified entity key.</summary>
        <returns>An &lt;see cref="T:System.Object"&gt; that is an instance of an entity type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GetObjectByKey tries to retrieve an object that has the specified <xref:System.Data.EntityKey> from the <xref:System.Data.Objects.ObjectStateManager>. If the object is currently not loaded into the object context, a query is executed in an attempt to return the object from the data source. For more information, see [Object Queries](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276).  
  
 GetObjectByKey raises an <xref:System.Data.ObjectNotFoundException> when the object cannot be found. To avoid handling this exception, instead use the <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> method.  
  
 This method will return objects in the <xref:System.Data.EntityState> state.  
  
 A temporary key cannot be used to return an object from the data source.  
  
   
  
## Examples  
 This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example creates an <xref:System.Data.EntityKey> for an entity of the given type and then fetches an entity by key.  
  
 [!CODE [DP ObjectServices Concepts#EntityKeyClass_GetObjectByKey](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#entitykeyclass_getobjectbykey)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectType">
      <MemberSignature Language="C#" Value="public static Type GetObjectType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetObjectType(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The &lt;see cref="T:System.Type"&gt; of the proxy object.</param>
        <summary>Returns the entity type of the POCO entity associated with a proxy object of a specified type.</summary>
        <returns>The &lt;see cref="T:System.Type"&gt; of the associated POCO entity.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetObjectType method is used when proxy object generation is enabled for POCO entities. For more information, see [Requirements for Creating POCO Proxies](http://msdn.microsoft.com/en-us/dcdbf982-9b9d-4582-806a-64de4a1c03c8) and [Working with POCO Entities](http://msdn.microsoft.com/en-us/5e0fb82a-b6d1-41a1-b37b-c12db61629d3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty">
      <MemberSignature Language="C#" Value="public void LoadProperty (object entity, string navigationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty(object entity, string navigationProperty) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="navigationProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entity">The entity for which related objects are to be loaded.</param>
        <param name="navigationProperty">The name of the navigation property that returns the related objects to be loaded.</param>
        <summary>Explicitly loads an object related to the supplied object by the specified navigation property and using the default merge option.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LoadProperty method must be called to achieve explicit loading when you are using POCO custom data classes.  
  
 After calling LoadProperty, the related object can be accessed through the navigation properties of the source entity.  
  
 When using POCO custom data classes, related objects cannot be explicitly loaded like instances of entity types that are generated by the Entity Data Model tools. This is because the tools generate the navigation properties that return an <xref:System.Data.Objects.DataClasses.EntityCollection%601> or <xref:System.Data.Objects.DataClasses.EntityReference%601> of related objects when <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> is called on a <xref:System.Data.Objects.DataClasses.RelatedEnd%601>. POCO entities can still be loaded by using lazy loading by setting the <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> property to `true` on the instance of <xref:System.Data.Objects.ObjectContextOptions> that is returned by the <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=fullName> property, or by using eager loading with the <xref:System.Data.Objects.ObjectQuery%601.Include%2A> method on the <xref:System.Data.Objects.ObjectQuery%601>.  
  
 When the LoadProperty method is called, objects are loaded into the <xref:System.Data.Objects.ObjectContext> by using the default <xref:System.Data.Objects.MergeOption> value of <xref:System.Data.Objects.MergeOption>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty">
      <MemberSignature Language="C#" Value="public void LoadProperty (object entity, string navigationProperty, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty(object entity, string navigationProperty, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="navigationProperty" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="entity">The entity for which related objects are to be loaded.</param>
        <param name="navigationProperty">The name of the navigation property that returns the related objects to be loaded.</param>
        <param name="mergeOption">The &lt;see cref="T:System.Data.Objects.MergeOption"&gt; value to use when you load the related objects.</param>
        <summary>Explicitly loads an object that is related to the supplied object by the specified navigation property and using the specified merge option.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LoadProperty method must be called to achieve explicit loading when you are using POCO custom data classes.  
  
 After calling LoadProperty, the related object can be accessed through the navigation properties of the source entity.  
  
 When using POCO custom data classes, related objects cannot be explicitly loaded like instances of entity types that are generated by the Entity Data Model tools. This is because the tools generate the navigation properties that return an <xref:System.Data.Objects.DataClasses.EntityCollection%601> or <xref:System.Data.Objects.DataClasses.EntityReference%601> of related objects when <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> is called on a <xref:System.Data.Objects.DataClasses.RelatedEnd%601>. POCO entities can still be loaded by using lazy loading by setting the <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> property to `true` on the instance of <xref:System.Data.Objects.ObjectContextOptions> that is returned by the <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=fullName> property, or by using eager loading with the <xref:System.Data.Objects.ObjectQuery%601.Include%2A> method on the <xref:System.Data.Objects.ObjectQuery%601>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public void LoadProperty&lt;TEntity&gt; (TEntity entity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty&lt;TEntity&gt;(!!TEntity entity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; selector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entity">To be added.</param>
        <param name="selector">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public void LoadProperty&lt;TEntity&gt; (TEntity entity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; selector, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty&lt;TEntity&gt;(!!TEntity entity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; selector, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="entity">To be added.</param>
        <param name="selector">To be added.</param>
        <param name="mergeOption">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the metadata workspace used by the object context.</summary>
        <value>The &lt;see cref="T:System.Data.Metadata.Edm.MetadataWorkspace"&gt; object associated with this &lt;xref:System.Data.Objects.ObjectContext&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.Metadata.Edm.MetadataWorkspace> class is a central runtime API that you can use to interact with the Entity Data Model (EDM) metadata in the context of an application. For more information, see [Metadata Workspace](http://msdn.microsoft.com/en-us/601aee56-3eda-4caa-9082-a01df76c5e84).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectMaterialized">
      <MemberSignature Language="C#" Value="public event System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectMaterializedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a new entity object is created from data in the data source as part of a query or load operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This event is raised after all scalar, complex, and reference properties have been set on an object, but before collections are loaded. If an object with the same key value exists in the object context, the Entity Framework will not recreate the object and this event will not be raised.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectStateManager">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateManager ObjectStateManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectStateManager ObjectStateManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the object state manager used by the object context to track object changes.</summary>
        <value>The &lt;see cref="T:System.Data.Objects.ObjectStateManager"&gt; used by this &lt;xref:System.Data.Objects.ObjectContext&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). This example gets the <xref:System.Data.Objects.ObjectStateManager> from the <xref:System.Data.Objects.ObjectContext> and uses the state manager to access an object in the context.  
  
 [!CODE [DP ObjectServices Concepts#ObjectStateManager](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#objectstatemanager)]  
  
 This example uses the <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%2A> method on the returned <xref:System.Data.Objects.ObjectStateManager> to get an object based on its entity key.  
  
 [!CODE [DP ObjectServices Concepts#ApplyItemUpdates](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#applyitemupdates)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryProvider">
      <MemberSignature Language="C#" Value="protected System.Linq.IQueryProvider QueryProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider QueryProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the LINQ query provider associated with this object context.</summary>
        <value>The &lt;see cref="T:System.Linq.IQueryProvider"&gt; instance used by this object context.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Objects.RefreshMode refreshMode, System.Collections.IEnumerable collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Objects.RefreshMode refreshMode, class System.Collections.IEnumerable collection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Objects.RefreshMode" />
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="refreshMode">A &lt;see cref="T:System.Data.Objects.RefreshMode"&gt; value that indicates whether property changes in the object context are overwritten with property values from the data source.</param>
        <param name="collection">An &lt;see cref="T:System.Collections.IEnumerable"&gt; collection of objects to refresh.</param>
        <summary>Updates a collection of objects in the object context with data from the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method has the dual purpose of allowing objects in the object context to be refreshed with data from the data source, and being the mechanism by which conflicts can be resolved. For more information, see [Saving Changes and Managing Concurrency](http://msdn.microsoft.com/en-us/b8378601-4f26-4a05-a24a-f50aeb68610e).  
  
 The order in which objects are refreshed is nondeterministic.  
  
 After Refresh is called, the object’s original values will always be updated with the data source value, but the current values might or might not be updated with the data source value. This depends on the <xref:System.Data.Objects.RefreshMode> value. The <xref:System.Data.Objects.RefreshMode> mode means that the objects in the collection should be updated to match the data source values. <xref:System.Data.Objects.RefreshMode> means that only the changes in the object context will be persisted, even if there have been other changes in the data source.  
  
 To ensure that objects have been updated by data source-side logic, you can call Refresh with <xref:System.Data.Objects.RefreshMode> after you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Objects.RefreshMode refreshMode, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Objects.RefreshMode refreshMode, object entity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Objects.RefreshMode" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="refreshMode">One of the &lt;see cref="T:System.Data.Objects.RefreshMode"&gt; values that specifies which mode to use for refreshing the &lt;xref:System.Data.Objects.ObjectStateManager&gt;.</param>
        <param name="entity">The object to be refreshed.</param>
        <summary>Updates an object in the object context with data from the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Refresh has the dual purpose of allowing an object to be refreshed with data from the data source and being the mechanism by which conflicts can be resolved. For more information, see [Saving Changes and Managing Concurrency](http://msdn.microsoft.com/en-us/b8378601-4f26-4a05-a24a-f50aeb68610e).  
  
 The order in which objects are refreshed is nondeterministic.  
  
 After the Refresh method is called, the object’s original values will always be updated with the data source value, but the current values might or might not be updated with the data source value. This depends on the <xref:System.Data.Objects.RefreshMode>. The <xref:System.Data.Objects.RefreshMode> mode means that the object should be updated to match the data source values. The <xref:System.Data.Objects.RefreshMode> value means that only the changes in the object context will be persisted, even if there have been other changes in the data source.  
  
 To ensure that an object has been updated by data source-side logic, you can call the <xref:System.Data.Objects.ObjectContext.Refresh%2A> method with the <xref:System.Data.Objects.RefreshMode> value after you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method.  
  
   
  
## Examples  
 This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example tries to save changes, and this may cause a concurrency conflict. Then it shows how to resolve the concurrency conflict by refreshing the object context before re-saving changes.  
  
 [!CODE [DP ObjectServices Concepts#Concurrency](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#concurrency)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public int SaveChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveChanges() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Persists all updates to the data source and resets change tracking in the object context.</summary>
        <returns>The number of objects in an &lt;see cref="T:System.Data.EntityState"&gt;, &lt;see cref="T:System.Data.EntityState"&gt;, or &lt;see cref="T:System.Data.EntityState"&gt; state when SaveChanges was called.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To ensure that objects on the client have been updated by data source-side logic, you can call the <xref:System.Data.Objects.ObjectContext.Refresh%2A> method with the <xref:System.Data.Objects.RefreshMode> value after you call SaveChanges. For more information, see [Saving Changes and Managing Concurrency](http://msdn.microsoft.com/en-us/b8378601-4f26-4a05-a24a-f50aeb68610e).  
  
 SaveChanges operates within a transaction. SaveChanges will roll back that transaction and throw an exception if any of the dirty <xref:System.Data.Objects.ObjectStateEntry> objects cannot be persisted.  
  
 If an optimistic concurrency violation has occurred, an <xref:System.Data.OptimisticConcurrencyException> is thrown. You can resolve an optimistic concurrency violation by catching it, calling the <xref:System.Data.Objects.ObjectContext.Refresh%2A> method with the <xref:System.Data.Objects.RefreshMode> or <xref:System.Data.Objects.RefreshMode> value, and then calling SaveChanges again. For more information, see [How to: Manage Data Concurrency in the Object Context](http://msdn.microsoft.com/en-us/25ffe70d-ce97-4f0a-8ae0-22b7c40f748a).  
  
   
  
## Examples  
 This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). This example tries to save changes, which may cause a concurrency conflict. Then, it demonstrates how to resolve the concurrency conflict by refreshing the object context before re-saving changes.  
  
 [!CODE [DP ObjectServices Concepts#Concurrency](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#concurrency)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public int SaveChanges (bool acceptChangesDuringSave);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveChanges(bool acceptChangesDuringSave) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use SaveChanges(SaveOptions options) instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptChangesDuringSave" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="acceptChangesDuringSave">This parameter is needed for client-side transaction support. If `true`, the change tracking on all objects is reset after SaveChanges finishes. If `false`, you must call the &lt;xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A&gt; method after SaveChanges.</param>
        <summary>Persists all updates to the data source and optionally resets change tracking in the object context.</summary>
        <returns>The number of objects in an &lt;see cref="T:System.Data.EntityState"&gt;, &lt;see cref="T:System.Data.EntityState"&gt;, or &lt;see cref="T:System.Data.EntityState"&gt; state when &lt;xref:System.Data.Objects.ObjectContext.SaveChanges%2A&gt; was called.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call the <xref:System.Data.Objects.ObjectContext.SaveChanges%28System.Data.Objects.SaveOptions%29> method instead.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public virtual int SaveChanges (System.Data.Objects.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveChanges(valuetype System.Data.Objects.SaveOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Data.Objects.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="options">A &lt;see cref="T:System.Data.Objects.SaveOptions"&gt; value that determines the behavior of the operation.</param>
        <summary>Persists all updates to the data source with the specified &lt;see cref="T:System.Data.Objects.SaveOptions"&gt;.</summary>
        <returns>The number of objects in an &lt;see cref="T:System.Data.EntityState"&gt;, &lt;see cref="T:System.Data.EntityState"&gt;, or &lt;see cref="T:System.Data.EntityState"&gt; state when &lt;xref:System.Data.Objects.ObjectContext.SaveChanges%2A&gt; was called.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this specific overload of SaveChanges to either make sure that <xref:System.Data.Objects.ObjectContext.DetectChanges%2A> is called before you save changes to the data source or that <xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> is called after you save changes to the data source.  
  
 This enumeration has a <xref:System.FlagsAttribute> that allows for a bitwise combination of its member values.  
  
 To make sure that objects on the client have been updated by data source-side logic, you can call the <xref:System.Data.Objects.ObjectContext.Refresh%2A> method with the <xref:System.Data.Objects.RefreshMode> value after you call <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>. The <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method operates in a transaction. <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> will roll back that transaction and throw an exception if any one of the dirty <xref:System.Data.Objects.ObjectStateEntry> objects cannot be persisted.  
  
 If an optimistic concurrency violation has occurred, an <xref:System.Data.OptimisticConcurrencyException> is thrown. You can resolve an optimistic concurrency violation by catching it, calling the <xref:System.Data.Objects.ObjectContext.Refresh%2A> method with the <xref:System.Data.Objects.RefreshMode> or <xref:System.Data.Objects.RefreshMode> values, and then calling the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method again. For more information, see [How to: Manage Data Concurrency in the Object Context](http://msdn.microsoft.com/en-us/25ffe70d-ce97-4f0a-8ae0-22b7c40f748a).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SavingChanges">
      <MemberSignature Language="C#" Value="public event EventHandler SavingChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SavingChanges" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when changes are saved to the data source.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SavingChanges event is raised at the start of a <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> operation on an <xref:System.Data.Objects.ObjectContext>. This event is typically used to validate changed objects before new values are written to the database.  
  
   
  
## Examples  
 This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). This registers a handler for the SavingChanges event that performs entity state validation.  
  
 [!CODE [DP ObjectServices Concepts#SavingChanges](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#savingchanges)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; Translate&lt;TElement&gt; (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; Translate&lt;TElement&gt;(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <typeparam name="TElement">To be added.</typeparam>
        <param name="reader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TEntity&gt; Translate&lt;TEntity&gt; (System.Data.Common.DbDataReader reader, string entitySetName, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TEntity&gt; Translate&lt;TEntity&gt;(class System.Data.Common.DbDataReader reader, string entitySetName, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">To be added.</typeparam>
        <param name="reader">To be added.</param>
        <param name="entitySetName">To be added.</param>
        <param name="mergeOption">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetObjectByKey">
      <MemberSignature Language="C#" Value="public bool TryGetObjectByKey (System.Data.EntityKey key, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetObjectByKey(class System.Data.EntityKey key, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
        <Parameter Name="value" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">The key of the object to be found.</param>
        <param name="value">When this method returns, contains the object.</param>
        <summary>Returns an object that has the specified entity key.</summary>
        <returns>`true` if the object was retrieved successfully. `false` if the  is temporary, the connection is `null`, or the  is `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 TryGetObjectByKey tries to retrieve an object that has the specified <xref:System.Data.EntityKey> from the <xref:System.Data.Objects.ObjectStateManager>. If the object is currently not loaded into the object context, a query is executed in an attempt to return the object from the data source. For more information, see [Object Queries](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276).  
  
 Use the TryGetObjectByKey method to avoid handling the <xref:System.Data.ObjectNotFoundException> raised by <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> when the object cannot be found.  
  
 This method will return objects in the <xref:System.Data.EntityState> state.  
  
 A temporary key cannot be used to return an object from the data source.  
  
 The <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> method applies the standard .NET `TryParse` pattern for the <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> method, returning `false` when the <xref:System.Data.ObjectNotFoundException> is caught.  
  
   
  
## Examples  
 The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example creates an <xref:System.Data.EntityKey> for an entity of the given type and then tries to retrieve an entity by key.  
  
 [!CODE [DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#entitykeyclass_trygetobjectbykey)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>