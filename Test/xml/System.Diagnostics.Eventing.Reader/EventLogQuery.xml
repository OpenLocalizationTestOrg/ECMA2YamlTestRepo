<Type Name="EventLogQuery" FullName="System.Diagnostics.Eventing.Reader.EventLogQuery">
  <TypeSignature Language="C#" Value="public class EventLogQuery" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogQuery extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a query for events in an event log and the settings that define how the query is executed and on what computer the query is executed on.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 For example code using this class, see [How To: Query for Events](http://msdn.microsoft.com/en-us/5231a436-4cf2-4539-90d2-a04813aba069) or [How To: Access and Read Event Information](http://msdn.microsoft.com/en-us/14db3375-d305-49ae-aa24-aedbe906e76c).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogQuery (string path, System.Diagnostics.Eventing.Reader.PathType pathType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.Diagnostics.Eventing.Reader.PathType pathType) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathType" Type="System.Diagnostics.Eventing.Reader.PathType" />
      </Parameters>
      <Docs>
        <param name="path">The name of the event log to query, or the path to the event log file to query.</param>
        <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery"&gt; class by specifying the target of the query. The target can be an active event log or a log file.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogQuery (string path, System.Diagnostics.Eventing.Reader.PathType pathType, string query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.Diagnostics.Eventing.Reader.PathType pathType, string query) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathType" Type="System.Diagnostics.Eventing.Reader.PathType" />
        <Parameter Name="query" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The name of the event log to query, or the path to the event log file to query.</param>
        <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
        <param name="query">The event query used to retrieve events that match the query conditions.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery"&gt; class by specifying the target of the query and the event query. The target can be an active event log or a log file.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseDirection">
      <MemberSignature Language="C#" Value="public bool ReverseDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReverseDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the Boolean value that determines whether to read events from the newest event in an event log to the oldest event in the log.</summary>
        <value>Returns `true` if events are read from the newest event in the log to the oldest event, and returns `false` if events are read from the oldest event in the log to the newest event.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default value is `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Eventing.Reader.EventLogSession Session { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.Eventing.Reader.EventLogSession Session" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Eventing.Reader.EventLogSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the session that access the Event Log service on the local computer or a remote computer. This object can be set to access a remote event log by creating a &lt;see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader"&gt; object or an &lt;xref:System.Diagnostics.Eventing.Reader.EventLogWatcher&gt; object with this &lt;xref:System.Diagnostics.Eventing.Reader.EventLogQuery&gt; object.</summary>
        <value>Returns an &lt;see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession"&gt; object.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TolerateQueryErrors">
      <MemberSignature Language="C#" Value="public bool TolerateQueryErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TolerateQueryErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that determines whether this query will continue to retrieve events when the query has an error.</summary>
        <value>`true` indicates that the query will continue to retrieve events even if the query fails for some logs, and `false` indicates that this query will not continue to retrieve events when the query fails.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>