<Type Name="FileAccess" FullName="System.IO.FileAccess">
  <TypeSignature Language="C#" Value="public enum FileAccess" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed FileAccess extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines constants for read, write, or read/write access to a file.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For an example of creating a file and writing text to a file, see [How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md). For an example of reading text from a file, see [How to: Read Text from a File](../Topic/How%20to:%20Read%20Text%20from%20a%20File.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md).  
  
 A `FileAccess` parameter is specified in many of the constructors for <xref:System.IO.File>, <xref:System.IO.FileInfo>, <xref:System.IO.FileStream>, and other constructors where it is important to control the kind of access users have to a file.  
  
   
  
## Examples  
 The following `FileStream` constructor grants read-only access to an existing file (`FileAccess.Read`).  
  
 [!CODE [Classic FileAccess Example#1](../CodeSnippet/VS_Snippets_CLR_Classic/classic FileAccess Example#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="Read" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.IO.FileAccess Read = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Read access to the file. Data can be read from the file. Combine with `Write` for read/write access.</summary>
      </Docs>
    </Member>
    <Member MemberName="ReadWrite">
      <MemberSignature Language="C#" Value="ReadWrite" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.IO.FileAccess ReadWrite = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Read and write access to the file. Data can be written to and read from the file.</summary>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="Write" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.IO.FileAccess Write = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Write access to the file. Data can be written to the file. Combine with `Read` for read/write access.</summary>
      </Docs>
    </Member>
  </Members>
</Type>