<Type Name="Network" FullName="Microsoft.VisualBasic.Devices.Network">
  <TypeSignature Language="C#" Value="public class Network" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Network extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Provides a property, event, and methods for interacting with the network to which the computer is connected.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table lists examples of tasks involving the `My.Computer.Network` object.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
|Check connection status|[How to: Check Connection Status](../Topic/How%20to:%20Check%20Connection%20Status%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to http://www.cohowinery.com/uploads.  
  
 [!CODE [VbVbalrMyNetwork#6](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Network ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:Microsoft.VisualBasic.Devices.Network"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(string address, string destinationFileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the destination file already exists, the `DownloadFile` method will not overwrite the existing file. You can use one of the other overloads of the <xref:Microsoft.VisualBasic.Devices.Network.DownloadFile%2A> method to instruct it to overwrite existing files, provide user credentials, or specify a specific timeout value.  
  
 `DownloadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The `DownloadFile` method does not send optional HTTP headers. Some servers may return 500 (Internal Server Error) if the optional user agent header is missing. To send optional headers, you must construct a request using the <xref:System.Net.WebClient> class.  
  
 The following table lists an example of a task involving the `My.Computer.Network.DownloadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbalrMyNetwork#7](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#7)]  
  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`, specifying a timeout interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#8](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the destination file already exists, the `DownloadFile` method will not overwrite the existing file. You can use one of the other overloads of the <xref:Microsoft.VisualBasic.Devices.Network.DownloadFile%2A> method to instruct it to overwrite existing files, provide user credentials, or specify a specific timeout value. `DownloadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The `DownloadFile` method does not send optional HTTP headers. Some servers may return 500 (Internal Server Error) if the optional user agent header is missing. To send optional headers, you must construct a request using the <xref:System.Net.WebClient> class.  
  
 The following table lists an example of a task involving the `My.Computer.Network.DownloadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbalrMyNetwork#7](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#7)]  
  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`, specifying a timeout interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#8](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string destinationFileName, string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(string address, string destinationFileName, string userName, string password) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the destination file already exists, the `DownloadFile` method will not overwrite the existing file. You can use one of the other overloads of the <xref:Microsoft.VisualBasic.Devices.Network.DownloadFile%2A> method to instruct it to overwrite existing files or specify a specific timeout value.  
  
 `DownloadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The `DownloadFile` method does not send optional HTTP headers. Some servers may return 500 (Internal Server Error) if the optional user agent header is missing. To send optional headers, you must construct a request using the <xref:System.Net.WebClient> class.  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.DownloadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbalrMyNetwork#7](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#7)]  
  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`, specifying a timeout interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#8](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName, string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName, string userName, string password) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the destination file already exists, the `DownloadFile` method will not overwrite the existing file. You can use one of the other overloads of the <xref:Microsoft.VisualBasic.Devices.Network.DownloadFile%2A> method to instruct it to overwrite existing files or specify a specific timeout value.  
  
 `DownloadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The `DownloadFile` method does not send optional HTTP headers. Some servers may return 500 (Internal Server Error) if the optional user agent header is missing. To send optional headers, you must construct a request using the <xref:System.Net.WebClient> class.  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.DownloadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbalrMyNetwork#7](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#7)]  
  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`, specifying a timeout interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#8](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName, System.Net.ICredentials networkCredentials, bool showUI, int connectionTimeout, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName, class System.Net.ICredentials networkCredentials, bool showUI, int32 connectionTimeout, bool overwrite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="networkCredentials" Type="System.Net.ICredentials" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address">`String` or &lt;xref:System.Uri&gt;. Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">`String`. File name and path of the downloaded file.</param>
        <param name="networkCredentials">&lt;xref:System.Net.ICredentials&gt;. Credentials to be supplied.</param>
        <param name="showUI">`True` to display the progress of the operation; otherwise `False`. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">`True` to overwrite existing files; otherwise `False`. Default is `False`.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box appears that shows the progress of the operation; the dialog box contains a **Cancel** button that can be used to cancel the operation. The dialog box is not modal, and therefore does not block user input to other windows in the program.  
  
 If the server does not respond within the specified , the operation is cancelled, and an exception is thrown.  
  
 `DownloadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The `DownloadFile` method does not send optional HTTP headers. Some servers may return 500 (Internal Server Error) if the optional user agent header is missing. To send optional headers, you must construct a request using the <xref:System.Net.WebClient> class.  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.DownloadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbalrMyNetwork#7](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#7)]  
  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`, specifying a timeout interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#8](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(string address, string destinationFileName, string userName, string password, bool showUI, int32 connectionTimeout, bool overwrite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <param name="showUI">`True` to display the progress of the operation; otherwise `False`. Default is `False`.</param>
        <param name="connectionTimeout">&lt;see cref="T:System.Int32"&gt;. Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">`True` to overwrite existing files; otherwise `False`. Default is `False`.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box appears that shows the progress of the operation; the dialog box contains a **Cancel** button that can be used to cancel the operation. The dialog box is not modal, and therefore does not block user input to other windows in the program.  
  
 If the server does not respond within the specified , the operation is cancelled, and an exception is thrown.  
  
 `DownloadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The `DownloadFile` method does not send optional HTTP headers. Some servers may return 500 (Internal Server Error) if the optional user agent header is missing. To send optional headers, you must construct a request using the <xref:System.Net.WebClient> class.  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.DownloadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbalrMyNetwork#7](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#7)]  
  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`, specifying a timeout interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#8](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName, System.Net.ICredentials networkCredentials, bool showUI, int connectionTimeout, bool overwrite, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName, class System.Net.ICredentials networkCredentials, bool showUI, int32 connectionTimeout, bool overwrite, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="networkCredentials" Type="System.Net.ICredentials" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="networkCredentials">Credentials to be supplied.</param>
        <param name="showUI">`True` to display the progress of the operation; otherwise `False`. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">`True` to overwrite existing files; otherwise `False`. Default is `False`.</param>
        <param name="onUserCancel">Specifies behavior when the user clicks **Cancel** or **No** on the dialog box shown as a result of  set to `True`. Default is &lt;see cref="T:Microsoft.VisualBasic.FileIO.UICancelOption"&gt;.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box appears that shows the progress of the operation; the dialog box contains a **Cancel** button that can be used to cancel the operation. The dialog box is not modal, and therefore does not block user input to other windows in the program.  
  
 If the server does not respond within the specified , the operation is cancelled, and an exception is thrown.  
  
 `DownloadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The `DownloadFile` method does not send optional HTTP headers. Some servers may return 500 (Internal Server Error) if the optional user agent header is missing. To send optional headers, you must construct a request using the <xref:System.Net.WebClient> class.  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.DownloadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbalrMyNetwork#7](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#7)]  
  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`, specifying a timeout interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#8](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName, string userName, string password, bool showUI, int32 connectionTimeout, bool overwrite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <param name="showUI">`True` to display the progress of the operation; otherwise `False`. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">`True` to overwrite existing files; otherwise `False`. Default is `False`.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box appears that shows the progress of the operation; the dialog box contains a **Cancel** button that can be used to cancel the operation. The dialog box is not modal, and therefore does not block user input to other windows in the program.  
  
 If the server does not respond within the specified , the operation is cancelled, and an exception is thrown.  
  
 `DownloadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The `DownloadFile` method does not send optional HTTP headers. Some servers may return 500 (Internal Server Error) if the optional user agent header is missing. To send optional headers, you must construct a request using the <xref:System.Net.WebClient> class.  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.DownloadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbalrMyNetwork#7](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#7)]  
  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`, specifying a timeout interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#8](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(string address, string destinationFileName, string userName, string password, bool showUI, int32 connectionTimeout, bool overwrite, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <param name="showUI">`True` to display the progress of the operation; otherwise `False`. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">`True` to overwrite existing files; otherwise `False`. Default is `False`.</param>
        <param name="onUserCancel">Specifies behavior when the user clicks **Cancel** or **No** on the dialog box shown as a result of  set to `True`. Default is &lt;see cref="T:Microsoft.VisualBasic.FileIO.UICancelOption"&gt;.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box appears that shows the progress of the operation; the dialog box contains a **Cancel** button that can be used to cancel the operation. The dialog box is not modal, and therefore does not block user input to other windows in the program.  
  
 If the server does not respond within the specified , the operation is cancelled, and an exception is thrown.  
  
 `DownloadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The `DownloadFile` method does not send optional HTTP headers. Some servers may return 500 (Internal Server Error) if the optional user agent header is missing. To send optional headers, you must construct a request using the <xref:System.Net.WebClient> class.  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.DownloadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbalrMyNetwork#7](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#7)]  
  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`, specifying a timeout interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#8](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DownloadFile(class System.Uri address, string destinationFileName, string userName, string password, bool showUI, int32 connectionTimeout, bool overwrite, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="destinationFileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="overwrite" Type="System.Boolean" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="address">Path of the file to download, including file name and host address.</param>
        <param name="destinationFileName">File name and path of the downloaded file.</param>
        <param name="userName">User name to authenticate. Default is an empty string, "".</param>
        <param name="password">Password to authenticate. Default is an empty string, "".</param>
        <param name="showUI">`True` to display the progress of the operation; otherwise `False`. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval, in milliseconds. Default is 100 seconds.</param>
        <param name="overwrite">`True` to overwrite existing files; otherwise `False`. Default is `False`.</param>
        <param name="onUserCancel">Specifies behavior when the user clicks **Cancel** or **No** on the dialog box shown as a result of  set to `True`. Default is &lt;see cref="T:Microsoft.VisualBasic.FileIO.UICancelOption"&gt;.</param>
        <summary>Downloads the specified remote file and saves it in the specified location.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box appears that shows the progress of the operation; the dialog box contains a **Cancel** button that can be used to cancel the operation. The dialog box is not modal, and therefore does not block user input to other windows in the program.  
  
 If the server does not respond within the specified , the operation is cancelled, and an exception is thrown.  
  
 `DownloadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The `DownloadFile` method does not send optional HTTP headers. Some servers may return 500 (Internal Server Error) if the optional user agent header is missing. To send optional headers, you must construct a request using the <xref:System.Net.WebClient> class.  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.DownloadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Download a file|[How to: Download a File](../Topic/How%20to:%20Download%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`.  
  
 [!CODE [VbVbalrMyNetwork#7](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#7)]  
  
 This example downloads the file `WineList.txt` from `http://www.cohowinery.com/downloads` and saves it to `C:\Documents and Settings\All Users\Documents`, specifying a timeout interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#8](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAvailable">
      <MemberSignature Language="C#" Value="public bool IsAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether a computer is connected to a network.</summary>
        <value>`True` if the computer is connected to a network; otherwise `False`.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IsAvailable` always returns `False` when called from a `Click Once` application or if the user does not have <xref:System.Net.NetworkInformation.NetworkInformationPermission>.  
  
 The following table lists examples of tasks involving the `My.Computer.Network.IsAvailable` property.  
  
|||  
|-|-|  
|To|See|  
|Check whether a computer is connected to a network|[How to: Check Connection Status](../Topic/How%20to:%20Check%20Connection%20Status%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example checks the property's status and reports it.  
  
 [!CODE [VbVbalrMyNetwork#1](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkAvailabilityChanged">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the network availability changes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An application raises the `NetworkAvailabilityChanged` event every time the availability of the network changes. You can use the <xref:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs.IsNetworkAvailable%2A> property of the  parameter to get the new state of the network connection. To get the current state of the network connection, use the <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> property.  
  
 In a Windows Forms application, this event is raised on the application's main thread with the other user-interface events. This allows the event handler to access directly the application's user interface. However, if the application is busy handling another user-interface event when this event is raised, this event cannot be processed until the other event handler finishes or calls the <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> method.  
  
 You cannot use the `Handles` statement to handle the `NetworkAvailabilityChanged` event; you must use the `AddHandler` statement.  
  
 In Windows Forms applications, the `MyApplication` object exposes a `NetworkAvailabilityChanged` event that provides the same functionality as this event, but you can handle it with the `Handles` statement.  
  
> [!NOTE]
>  Many network hubs provide a network connection, even if the hub is disconnected from a larger network. Consequently, for wired connections, this event indicates a change in the connection between the computer and a hub.  
  
> [!NOTE]
>  The `NetworkAvailabilityChanged` event is not raised by applications that run on Windows 95 and Windows 98 or by applications that are run on Windows 2000 by a non-administrator. If your application might run on those platforms, use the <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> property.  
  
   
  
## Examples  
 This example uses the `My.Computer.Network.NetworkAvailabilityChanged` event to update the user interface of a form or control.  
  
 This code should to be in a form or control that has a <xref:System.Windows.Forms.Label> named `Label1`.  
  
 [!code-vb[VbVbalrMyApplication#50](../../add/codesnippet/VisualBasic/VbVbalrMyApplication/Form1.vb#50)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ping">
      <MemberSignature Language="C#" Value="public bool Ping (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Ping(string hostNameOrAddress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The URL, computer name, or IP number of the server to ping.</param>
        <summary>Pings the specified server.</summary>
        <returns>`True` if the operation was successful; otherwise `False`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Ping` method is not a fail-safe method for determining the availability of a remote computer: the ping port on the target computer may be turned off or the ping request may be blocked by a firewall or router.  
  
 The address passed to the `Ping` method must be DNS resolvable and cannot be preceded by "http://".  
  
   
  
## Examples  
 This example reports whether or not the server can be pinged by determining whether the `Ping` method returns `True`.  
  
 [!CODE [VbVbalrMyNetwork#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#4)]  
  
 Replace `"198.01.01.01"` with the IP address, URL, or computer name of the server to ping.  
  
 This example reports whether or not the server can be pinged by determining whether the `Ping` method returned `True` and specifies a timeout interval of 1000 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#5)]  
  
 Replace `"www.cohowinery.com"` with the IP address, URL, or computer name of the server to ping.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ping">
      <MemberSignature Language="C#" Value="public bool Ping (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Ping(class System.Uri address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">The URI of the server to ping.</param>
        <summary>Pings the specified server.</summary>
        <returns>`True` if the operation was successful; otherwise `False`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Ping` method is not a fail-safe method for determining the availability of a remote computer: the ping port on the target computer may be turned off or the ping request may be blocked by a firewall or router.  
  
 The address passed to the `Ping` method must be DNS resolvable and cannot be preceded by "http://".  
  
   
  
## Examples  
 This example reports whether or not the server can be pinged by determining whether the `Ping` method returns `True`.  
  
 [!CODE [VbVbalrMyNetwork#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#4)]  
  
 Replace `"198.01.01.01"` with the IP address, URL, or computer name of the server to ping.  
  
 This example reports whether or not the server can be pinged by determining whether the `Ping` method returned `True` and specifies a timeout interval of 1000 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#5)]  
  
 Replace `"www.cohowinery.com"` with the IP address, URL, or computer name of the server to ping.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ping">
      <MemberSignature Language="C#" Value="public bool Ping (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Ping(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The URL, computer name, or IP number of the server to ping.</param>
        <param name="timeout">Time threshold in milliseconds for contacting the destination. Default is 500.</param>
        <summary>Pings the specified server.</summary>
        <returns>`True` if the operation was successful; otherwise `False`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Ping` method is not a fail-safe method for determining the availability of a remote computer: the ping port on the target computer may be turned off or the ping request may be blocked by a firewall or router.  
  
 The address passed to the `Ping` method must be DNS resolvable and cannot be preceded by "http://".  
  
   
  
## Examples  
 This example reports whether or not the server can be pinged by determining whether the `Ping` method returns `True`.  
  
 [!CODE [VbVbalrMyNetwork#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#4)]  
  
 Replace `"198.01.01.01"` with the IP address, URL, or computer name of the server to ping.  
  
 This example reports whether or not the server can be pinged by determining whether the `Ping` method returned `True` and specifies a timeout interval of 1000 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#5)]  
  
 Replace `"www.cohowinery.com"` with the IP address, URL, or computer name of the server to ping.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ping">
      <MemberSignature Language="C#" Value="public bool Ping (Uri address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Ping(class System.Uri address, int32 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">The URI of the server to ping.</param>
        <param name="timeout">Time threshold in milliseconds for contacting the destination. Default is 500.</param>
        <summary>Pings the specified server.</summary>
        <returns>`True` if the operation was successful; otherwise `False`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `Ping` method is not a fail-safe method for determining the availability of a remote computer: the ping port on the target computer may be turned off or the ping request may be blocked by a firewall or router.  
  
 The address passed to the `Ping` method must be DNS resolvable and cannot be preceded by "http://".  
  
   
  
## Examples  
 This example reports whether or not the server can be pinged by determining whether the `Ping` method returns `True`.  
  
 [!CODE [VbVbalrMyNetwork#4](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#4)]  
  
 Replace `"198.01.01.01"` with the IP address, URL, or computer name of the server to ping.  
  
 This example reports whether or not the server can be pinged by determining whether the `Ping` method returned `True` and specifies a timeout interval of 1000 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#5](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#5)]  
  
 Replace `"www.cohowinery.com"` with the IP address, URL, or computer name of the server to ping.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, string address);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, string address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use one of the other overloads of the <xref:Microsoft.VisualBasic.Devices.Network.UploadFile%2A> method to provide user credentials or specify a specific timeout value.  
  
 `My.Computer.Network.UploadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
 The following table lists an example of a task involving the `My.Computer.Network.UploadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads`.  
  
 [!CODE [VbVbalrMyNetwork#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#2)]  
  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads` without supplying a user name or password, shows the progress of the upload, and has a time-out interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use one of the other overloads of the <xref:Microsoft.VisualBasic.Devices.Network.UploadFile%2A> method to provide user credentials or specify a specific timeout value.  
  
 `My.Computer.Network.UploadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
 The following table lists an example of a task involving the `My.Computer.Network.UploadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads`.  
  
 [!CODE [VbVbalrMyNetwork#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#2)]  
  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads` without supplying a user name or password, shows the progress of the upload, and has a time-out interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, string address, string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, string address, string userName, string password) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: `""`.</param>
        <param name="password">Password to authenticate. Default is an empty string: `""`.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use one of the other overloads of the <xref:Microsoft.VisualBasic.Devices.Network.UploadFile%2A> method to specify a specific timeout value.  
  
 `My.Computer.Network.UploadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.UploadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads`.  
  
 [!CODE [VbVbalrMyNetwork#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#2)]  
  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads` without supplying a user name or password, shows the progress of the upload, and has a time-out interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address, string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address, string userName, string password) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: `""`.</param>
        <param name="password">Password to authenticate. Default is an empty string: `""`.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use one of the other overloads of the <xref:Microsoft.VisualBasic.Devices.Network.UploadFile%2A> method to specify a specific timeout value.  
  
 `My.Computer.Network.UploadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.UploadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads`.  
  
 [!CODE [VbVbalrMyNetwork#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#2)]  
  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads` without supplying a user name or password, shows the progress of the upload, and has a time-out interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address, System.Net.ICredentials networkCredentials, bool showUI, int connectionTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address, class System.Net.ICredentials networkCredentials, bool showUI, int32 connectionTimeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="networkCredentials" Type="System.Net.ICredentials" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="networkCredentials">Credentials for authentication.</param>
        <param name="showUI">`True` to display progress of the operation; otherwise `False`. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box shows the progress of the operation and includes a **Cancel** button that the user can click to cancel the operation. Because the dialog box is not modal, it does not block user input to other windows in the program.  
  
 If the server does not respond within the interval specified in , the operation is cancelled and an exception is thrown.  
  
 `My.Computer.Network.UploadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.UploadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads`.  
  
 [!CODE [VbVbalrMyNetwork#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#2)]  
  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads` without supplying a user name or password, shows the progress of the upload, and has a time-out interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, string address, string userName, string password, bool showUI, int connectionTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, string address, string userName, string password, bool showUI, int32 connectionTimeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: `""`.</param>
        <param name="password">Password to authenticate. Default is an empty string: `""`.</param>
        <param name="showUI">`True` to display progress of the operation; otherwise `False`. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box shows the progress of the operation and includes a **Cancel** button that the user can click to cancel the operation. Because the dialog box is not modal, it does not block user input to other windows in the program.  
  
 If the server does not respond within the interval specified in , the operation is cancelled and an exception is thrown.  
  
 `My.Computer.Network.UploadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.UploadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads`.  
  
 [!CODE [VbVbalrMyNetwork#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#2)]  
  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads` without supplying a user name or password, shows the progress of the upload, and has a time-out interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address, System.Net.ICredentials networkCredentials, bool showUI, int connectionTimeout, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address, class System.Net.ICredentials networkCredentials, bool showUI, int32 connectionTimeout, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="networkCredentials" Type="System.Net.ICredentials" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="networkCredentials">Credentials for authentication.</param>
        <param name="showUI">`True` to display progress of the operation; otherwise `False`. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <param name="onUserCancel">Action to be taken when the user clicks **Cancel**. Default is &lt;see cref="T:Microsoft.VisualBasic.FileIO.UICancelOption"&gt;.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box shows the progress of the operation and includes a **Cancel** button that the user can click to cancel the operation. Because the dialog box is not modal, it does not block user input to other windows in the program.  
  
 If the server does not respond within the interval specified in , the operation is cancelled and an exception is thrown.  
  
 `My.Computer.Network.UploadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.UploadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads`.  
  
 [!CODE [VbVbalrMyNetwork#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#2)]  
  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads` without supplying a user name or password, shows the progress of the upload, and has a time-out interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address, string userName, string password, bool showUI, int connectionTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address, string userName, string password, bool showUI, int32 connectionTimeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: `""`.</param>
        <param name="password">Password to authenticate. Default is an empty string: `""`.</param>
        <param name="showUI">`True` to display progress of the operation; otherwise `False`. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box shows the progress of the operation and includes a **Cancel** button that the user can click to cancel the operation. Because the dialog box is not modal, it does not block user input to other windows in the program.  
  
 If the server does not respond within the interval specified in , the operation is cancelled and an exception is thrown.  
  
 `My.Computer.Network.UploadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.UploadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads`.  
  
 [!CODE [VbVbalrMyNetwork#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#2)]  
  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads` without supplying a user name or password, shows the progress of the upload, and has a time-out interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, string address, string userName, string password, bool showUI, int connectionTimeout, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, string address, string userName, string password, bool showUI, int32 connectionTimeout, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: `""`.</param>
        <param name="password">Password to authenticate. Default is an empty string: `""`.</param>
        <param name="showUI">Whether to display progress of the operation. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <param name="onUserCancel">Action to be taken when the user clicks **Cancel**. Default is &lt;see cref="T:Microsoft.VisualBasic.FileIO.UICancelOption"&gt;.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box shows the progress of the operation and includes a **Cancel** button that the user can click to cancel the operation. Because the dialog box is not modal, it does not block user input to other windows in the program.  
  
 If the server does not respond within the interval specified in , the operation is cancelled and an exception is thrown.  
  
 `My.Computer.Network.UploadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.UploadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads`.  
  
 [!CODE [VbVbalrMyNetwork#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#2)]  
  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads` without supplying a user name or password, shows the progress of the upload, and has a time-out interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public void UploadFile (string sourceFileName, Uri address, string userName, string password, bool showUI, int connectionTimeout, Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void UploadFile(string sourceFileName, class System.Uri address, string userName, string password, bool showUI, int32 connectionTimeout, valuetype Microsoft.VisualBasic.FileIO.UICancelOption onUserCancel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFileName" Type="System.String" />
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="connectionTimeout" Type="System.Int32" />
        <Parameter Name="onUserCancel" Type="Microsoft.VisualBasic.FileIO.UICancelOption" />
      </Parameters>
      <Docs>
        <param name="sourceFileName">Path and name of file to upload.</param>
        <param name="address">URL, IP address, or URI of destination server.</param>
        <param name="userName">User name to authenticate. Default is an empty string: `""`.</param>
        <param name="password">Password to authenticate. Default is an empty string: `""`.</param>
        <param name="showUI">Whether to display progress of the operation. Default is `False`.</param>
        <param name="connectionTimeout">Timeout interval in milliseconds. Default is 100 seconds.</param>
        <param name="onUserCancel">Action to be taken when the user clicks **Cancel**. Default is &lt;see cref="T:Microsoft.VisualBasic.FileIO.UICancelOption"&gt;.</param>
        <summary>Sends the specified file to the specified host address.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If  is set to `True`, a dialog box shows the progress of the operation and includes a **Cancel** button that the user can click to cancel the operation. Because the dialog box is not modal, it does not block user input to other windows in the program.  
  
 If the server does not respond within the interval specified in , the operation is cancelled and an exception is thrown.  
  
 `My.Computer.Network.UploadFile` outputs trace information when you enable network tracing in your application. For more information, see [Enabling Network Tracing](../Topic/Enabling%20Network%20Tracing.md).  
  
> [!NOTE]
>  The FTP protocol sends information, including passwords, in plain text and should not be used for transmitting sensitive information.  
  
 The following table lists an example of a task involving the `My.Computer.Network.UploadFile` method.  
  
|||  
|-|-|  
|To|See|  
|Upload a file|[How to: Upload a File](../Topic/How%20to:%20Upload%20a%20File%20in%20Visual%20Basic.md)|  
  
   
  
## Examples  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads`.  
  
 [!CODE [VbVbalrMyNetwork#2](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#2)]  
  
 This example uploads the file `Order.txt` to `http://www.cohowinery.com/uploads` without supplying a user name or password, shows the progress of the upload, and has a time-out interval of 500 milliseconds.  
  
 [!CODE [VbVbalrMyNetwork#3](../CodeSnippet/VS_Snippets_VBCSharp/VbVbalrMyNetwork#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>