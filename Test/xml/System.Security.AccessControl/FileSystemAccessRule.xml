<Type Name="FileSystemAccessRule" FullName="System.Security.AccessControl.FileSystemAccessRule">
  <TypeSignature Language="C#" Value="public sealed class FileSystemAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystemAccessRule extends System.Security.AccessControl.AccessRule" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents an abstraction of an access control entry (ACE) that defines an access rule for a file or directory. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FileSystemAccessRule class represents an abstraction of an underlying access control entry (ACE) that specifies a user account, the type of access to provide (read, write, and so on), and whether to allow or deny that right.  This class can also specify how access rules are propagated to child objects.  
  
 Use the FileSystemAccessRule class to create a new access rule.  You can persist the rule using the <xref:System.Security.AccessControl.FileSecurity> or <xref:System.Security.AccessControl.DirectorySecurity> class.  
  
   
  
## Examples  
 The following code example uses the <xref:System.Security.AccessControl.FileSecurity> class to add and then remove an access control entry (ACE) from a file.  You must supply a valid user or group account to run this example.  
  
 [!CODE [IO.File.GetAccessControl-SetAccessControl#1](../CodeSnippet/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.FileSystemRights fileSystemRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="fileSystemRights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">An &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; object that encapsulates a reference to a user account.</param>
        <param name="fileSystemRights">One of the &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; values that specifies the type of operation associated with the access rule.</param>
        <param name="type">One of the &lt;see cref="T:System.Security.AccessControl.AccessControlType"&gt; values that specifies whether to allow or deny the operation.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.AccessControl.FileSystemAccessRule"&gt; class using a reference to a user account, a value that specifies the type of operation associated with the access rule, and a value that specifies whether to allow or deny the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create an access control rule that you can persist using the <xref:System.Security.AccessControl.FileSecurity> or <xref:System.Security.AccessControl.DirectorySecurity> class.  Access control rules define user account rights that determine which actions are allowed or disallowed on computers running Microsoft Windows.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemAccessRule (string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.FileSystemRights fileSystemRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="fileSystemRights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">The name of a user account.</param>
        <param name="fileSystemRights">One of the &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; values that specifies the type of operation associated with the access rule.</param>
        <param name="type">One of the &lt;see cref="T:System.Security.AccessControl.AccessControlType"&gt; values that specifies whether to allow or deny the operation.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.AccessControl.FileSystemAccessRule"&gt; class using the name of a user account, a value that specifies the type of operation associated with the access rule, and a value that describes whether to allow or deny the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create an access control rule that you can persist using the <xref:System.Security.AccessControl.FileSecurity> or <xref:System.Security.AccessControl.DirectorySecurity> class.  Access control rules define user account rights that determine which actions are allowed or disallowed on computers running Microsoft Windows.  
  
 The  parameter must identify a valid account on the current computer or domain.  The string takes the following form, where  is the name of a valid domain or computer name and  is the name of a valid user account on a domain or computer: .  
  
   
  
## Examples  
 The following code example uses the <xref:System.Security.AccessControl.FileSecurity> class to add and then remove an access control entry (ACE) from a file.  You must supply a valid user or group account to run this example.  
  
 [!CODE [IO.File.GetAccessControl-SetAccessControl#1](../CodeSnippet/VS_Snippets_CLR/IO.File.GetAccessControl-SetAccessControl#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.FileSystemRights fileSystemRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="fileSystemRights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">An &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; object that encapsulates a reference to a user account.</param>
        <param name="fileSystemRights">One of the &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; values that specifies the type of operation associated with the access rule.</param>
        <param name="inheritanceFlags">One of the &lt;see cref="T:System.Security.AccessControl.InheritanceFlags"&gt; values that specifies how access masks are propagated to child objects.</param>
        <param name="propagationFlags">One of the &lt;see cref="T:System.Security.AccessControl.PropagationFlags"&gt; values that specifies how Access Control Entries (ACEs) are propagated to child objects.</param>
        <param name="type">One of the &lt;see cref="T:System.Security.AccessControl.AccessControlType"&gt; values that specifies whether to allow or deny the operation.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.AccessControl.FileSystemAccessRule"&gt; class using a reference to a user account, a value that specifies the type of operation associated with the access rule, a value that determines how rights are inherited, a value that determines how rights are propagated, and a value that specifies whether to allow or deny the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create an access control rule that you can persist using the <xref:System.Security.AccessControl.FileSecurity> or <xref:System.Security.AccessControl.DirectorySecurity> class.  Access control rules define user account rights that determine which actions are allowed or disallowed on computers running Microsoft Windows.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemAccessRule (string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.FileSystemRights fileSystemRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="fileSystemRights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">The name of a user account.</param>
        <param name="fileSystemRights">One of the &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; values that specifies the type of operation associated with the access rule.</param>
        <param name="inheritanceFlags">One of the &lt;see cref="T:System.Security.AccessControl.InheritanceFlags"&gt; values that specifies how access masks are propagated to child objects.</param>
        <param name="propagationFlags">One of the &lt;see cref="T:System.Security.AccessControl.PropagationFlags"&gt; values that specifies how Access Control Entries (ACEs) are propagated to child objects.</param>
        <param name="type">One of the &lt;see cref="T:System.Security.AccessControl.AccessControlType"&gt; values that specifies whether to allow or deny the operation.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.AccessControl.FileSystemAccessRule"&gt; class using the name of a user account, a value that specifies the type of operation associated with the access rule, a value that determines how rights are inherited, a value that determines how rights are propagated, and a value that specifies whether to allow or deny the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create an access control rule that you can persist using the <xref:System.Security.AccessControl.FileSecurity> or <xref:System.Security.AccessControl.DirectorySecurity> class.  Access control rules define user account rights that determine which actions are allowed or disallowed on computers running Microsoft Windows.  
  
 The  parameter must identify a valid account on the current computer or domain.  The string takes the following form, where  is the name of a valid domain or computer name and  is the name of a valid user account on a domain or computer: .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileSystemRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.FileSystemRights FileSystemRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.FileSystemRights FileSystemRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.FileSystemRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; flags associated with the current &lt;xref:System.Security.AccessControl.FileSystemAccessRule&gt; object.</summary>
        <value>The &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; flags associated with the current &lt;xref:System.Security.AccessControl.FileSystemAccessRule&gt; object.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>