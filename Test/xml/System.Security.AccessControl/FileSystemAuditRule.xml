<Type Name="FileSystemAuditRule" FullName="System.Security.AccessControl.FileSystemAuditRule">
  <TypeSignature Language="C#" Value="public sealed class FileSystemAuditRule : System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystemAuditRule extends System.Security.AccessControl.AuditRule" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AuditRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents an abstraction of an access control entry (ACE) that defines an audit rule for a file or directory. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The FileSystemAuditRule class represents an abstraction of an underlying access control entry (ACE) that specifies a user account, the type of access to provide (read, write, and so on), and whether to perform auditing.  This class can also specify how audit rules are inherited from and propagated to objects.  
  
 To permit file and directory auditing on Windows NT or later, you must enable Audit Access Security policy on your machine.  By default, this policy is set to No Auditing.  
  
 To enable the Audit Access Security policy, perform the following steps:  
  
1.  Open the **Local Security Settings** Microsoft Management Console (MMC) snap-in, located in the Administrative Tools folder.  
  
2.  Expand the Local Policies folder and left-click the Audit Policy folder.  
  
3.  Double-click the **Audit object access** entry on the right pane of the MMC snap-in, or right-click and choose Properties to display the **Audit object access properties** dialog box.  
  
4.  Select the **Success** or **Failure** check boxes to log successes or failures.  
  
 Note that an audit rule for a user account requires a corresponding access rule for the same user account.  
  
 Use the FileSystemAuditRule class to create a new audit rule.  You can persist this rule using the <xref:System.Security.AccessControl.FileSecurity> or <xref:System.Security.AccessControl.DirectorySecurity> class.  
  
   
  
## Examples  
 The following code example uses the FileSystemAuditRule class to add and then remove an audit rule from a file.  You must supply a valid user or group account to run this example.  
  
 [!CODE [AccessControl.FileSystemAuditRule#1](../CodeSnippet/VS_Snippets_CLR/AccessControl.FileSystemAuditRule#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.FileSystemRights fileSystemRights, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="fileSystemRights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">An &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; object that encapsulates a reference to a user account.</param>
        <param name="fileSystemRights">One of the &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; values that specifies the type of operation associated with the audit rule.</param>
        <param name="flags">One of the &lt;see cref="T:System.Security.AccessControl.AuditFlags"&gt; values that specifies when to perform auditing.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.AccessControl.FileSystemAuditRule"&gt; class using a reference to a user account, a value that specifies the type of operation associated with the audit rule, and a value that specifies when to perform auditing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create an audit rule that you can persist using the <xref:System.Security.AccessControl.FileSecurity> or <xref:System.Security.AccessControl.DirectorySecurity> class.  Audit rules determine when and how actions performed on system objects, such as files and folders, are logged.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemAuditRule (string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.FileSystemRights fileSystemRights, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="fileSystemRights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">The name of a user account.</param>
        <param name="fileSystemRights">One of the &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; values that specifies the type of operation associated with the audit rule.</param>
        <param name="flags">One of the &lt;see cref="T:System.Security.AccessControl.AuditFlags"&gt; values that specifies when to perform auditing.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.AccessControl.FileSystemAuditRule"&gt; class using a user account name, a value that specifies the type of operation associated with the audit rule, and a value that specifies when to perform auditing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create an audit rule that you can persist using the <xref:System.Security.AccessControl.FileSecurity> or <xref:System.Security.AccessControl.DirectorySecurity> class.  Audit rules determine when and how actions performed on system objects, such as files and folders, are logged.  
  
 The  parameter must identify a valid account on the current computer or domain.  The string takes the following form, where  is the name of a valid domain or computer name and  is the name of a valid user account on a domain or computer: .  
  
   
  
## Examples  
 The following code example uses the <xref:System.Security.AccessControl.FileSystemAuditRule> class to add and then remove an audit rule from a file.  You must supply a valid user or group account to run this example.  
  
 [!CODE [AccessControl.FileSystemAuditRule#1](../CodeSnippet/VS_Snippets_CLR/AccessControl.FileSystemAuditRule#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.FileSystemRights fileSystemRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="fileSystemRights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">An &lt;see cref="T:System.Security.Principal.IdentityReference"&gt; object that encapsulates a reference to a user account.</param>
        <param name="fileSystemRights">One of the &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; values that specifies the type of operation associated with the audit rule.</param>
        <param name="inheritanceFlags">One of the &lt;see cref="T:System.Security.AccessControl.InheritanceFlags"&gt; values that specifies how access masks are propagated to child objects.</param>
        <param name="propagationFlags">One of the &lt;see cref="T:System.Security.AccessControl.PropagationFlags"&gt; values that specifies how Access Control Entries (ACEs) are propagated to child objects.</param>
        <param name="flags">One of the &lt;see cref="T:System.Security.AccessControl.AuditFlags"&gt; values that specifies when to perform auditing.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.AccessControl.FileSystemAuditRule"&gt; class using the name of a reference to a user account, a value that specifies the type of operation associated with the audit rule, a value that determines how rights are inherited, a value that determines how rights are propagated, and a value that specifies when to perform auditing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create an audit rule that you can persist using the <xref:System.Security.AccessControl.FileSecurity> or <xref:System.Security.AccessControl.DirectorySecurity> class.  Audit rules determine when and how actions performed on system objects, such as files and folders, are logged.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileSystemAuditRule (string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.FileSystemRights fileSystemRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="fileSystemRights" Type="System.Security.AccessControl.FileSystemRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">The name of a user account.</param>
        <param name="fileSystemRights">One of the &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; values that specifies the type of operation associated with the audit rule.</param>
        <param name="inheritanceFlags">One of the &lt;see cref="T:System.Security.AccessControl.InheritanceFlags"&gt; values that specifies how access masks are propagated to child objects.</param>
        <param name="propagationFlags">One of the &lt;see cref="T:System.Security.AccessControl.PropagationFlags"&gt; values that specifies how Access Control Entries (ACEs) are propagated to child objects.</param>
        <param name="flags">One of the &lt;see cref="T:System.Security.AccessControl.AuditFlags"&gt; values that specifies when to perform auditing.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Security.AccessControl.FileSystemAuditRule"&gt; class using the name of a user account, a value that specifies the type of operation associated with the audit rule, a value that determines how rights are inherited, a value that determines how rights are propagated, and a value that specifies when to perform auditing.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor to create an audit rule that you can persist using the <xref:System.Security.AccessControl.FileSecurity> or <xref:System.Security.AccessControl.DirectorySecurity> class.  Audit rules determine when and how actions performed on system objects, such as files and folders, are logged.  
  
 The  parameter must identify a valid account on the current computer or domain.  The string takes the following form, where  is the name of a valid domain or computer name and  is the name of a valid user account on a domain or computer: .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileSystemRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.FileSystemRights FileSystemRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.FileSystemRights FileSystemRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.FileSystemRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; flags associated with the current &lt;xref:System.Security.AccessControl.FileSystemAuditRule&gt; object.</summary>
        <value>The &lt;see cref="T:System.Security.AccessControl.FileSystemRights"&gt; flags associated with the current &lt;xref:System.Security.AccessControl.FileSystemAuditRule&gt; object.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>