<Type Name="GenericAce" FullName="System.Security.AccessControl.GenericAce">
  <TypeSignature Language="C#" Value="public abstract class GenericAce" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit GenericAce extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents an Access Control Entry (ACE), and is the base class for all other ACE classes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An ACE contains both an ACE header and a binary blob. The header contains information about the type of the ACE, various flags, and the size of the binary blob.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AceFlags">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.AceFlags AceFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.AceFlags AceFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AceFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the &lt;see cref="T:System.Security.AccessControl.AceFlags"&gt; associated with this &lt;xref:System.Security.AccessControl.GenericAce&gt; object.</summary>
        <value>The &lt;see cref="T:System.Security.AccessControl.AceFlags"&gt; associated with this &lt;xref:System.Security.AccessControl.GenericAce&gt; object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 An <xref:System.Security.AccessControl.AceFlags> object contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for an Access Control Entry (ACE).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AceType">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.AceType AceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.AceType AceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of this Access Control Entry (ACE).</summary>
        <value>The type of this ACE.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditFlags">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.AuditFlags AuditFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.AuditFlags AuditFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the audit information associated with this Access Control Entry (ACE).</summary>
        <value>The audit information associated with this Access Control Entry (ACE).</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinaryLength">
      <MemberSignature Language="C#" Value="public abstract int BinaryLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BinaryLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the length, in bytes, of the binary representation of the current &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object. This length should be used before marshaling the ACL into a binary array with the &lt;xref:System.Security.AccessControl.GenericAce.GetBinaryForm%2A&gt; method.</summary>
        <value>The length, in bytes, of the binary representation of the current &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.GenericAce Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.AccessControl.GenericAce Copy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.GenericAce</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a deep copy of this Access Control Entry (ACE).</summary>
        <returns>The &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object that this method creates.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFromBinaryForm">
      <MemberSignature Language="C#" Value="public static System.Security.AccessControl.GenericAce CreateFromBinaryForm (byte[] binaryForm, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.AccessControl.GenericAce CreateFromBinaryForm(unsigned int8[] binaryForm, int32 offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.GenericAce</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryForm" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="binaryForm">The binary data from which to create the new &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object.</param>
        <param name="offset">The offset at which to begin unmarshaling.</param>
        <summary>Creates a &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object from the specified binary data.</summary>
        <returns>The &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object this method creates.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object to compare to the current &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object.</param>
        <summary>Determines whether the specified &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object is equal to the current &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object.</summary>
        <returns>`true` if the specified &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object is equal to the current &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBinaryForm">
      <MemberSignature Language="C#" Value="public abstract void GetBinaryForm (byte[] binaryForm, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBinaryForm(unsigned int8[] binaryForm, int32 offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryForm" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="binaryForm">The byte array into which the contents of the &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; is marshaled.</param>
        <param name="offset">The offset at which to start marshaling.</param>
        <summary>Marshals the contents of the &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object into the specified byte array beginning at the specified offset.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for the &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; class. The  GetHashCode method is suitable for use in hashing algorithms and data structures like a hash table.</summary>
        <returns>A hash code for the current &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceFlags">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.InheritanceFlags InheritanceFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.InheritanceFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets flags that specify the inheritance properties of this Access Control Entry (ACE).</summary>
        <value>Flags that specify the inheritance properties of this ACE.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInherited">
      <MemberSignature Language="C#" Value="public bool IsInherited { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInherited" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that specifies whether this Access Control Entry (ACE) is inherited or is set explicitly.</summary>
        <value>`true` if this ACE is inherited; otherwise, `false`.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Security.AccessControl.GenericAce left, class System.Security.AccessControl.GenericAce right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Security.AccessControl.GenericAce" />
        <Parameter Name="right" Type="System.Security.AccessControl.GenericAce" />
      </Parameters>
      <Docs>
        <param name="left">The first &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object to compare.</param>
        <param name="right">The second &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; to compare.</param>
        <summary>Determines whether the specified &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; objects are considered equal.</summary>
        <returns>`true` if the two &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; objects are equal; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Security.AccessControl.GenericAce left, class System.Security.AccessControl.GenericAce right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Security.AccessControl.GenericAce" />
        <Parameter Name="right" Type="System.Security.AccessControl.GenericAce" />
      </Parameters>
      <Docs>
        <param name="left">The first &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; object to compare.</param>
        <param name="right">The second &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; to compare.</param>
        <summary>Determines whether the specified &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; objects are considered unequal.</summary>
        <returns>`true` if the two &lt;see cref="T:System.Security.AccessControl.GenericAce"&gt; objects are unequal; otherwise, `false`.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropagationFlags">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.PropagationFlags PropagationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.PropagationFlags PropagationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.PropagationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets flags that specify the inheritance propagation properties of this Access Control Entry (ACE).</summary>
        <value>Flags that specify the inheritance propagation properties of this ACE.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>