<Type Name="VisualCollection" FullName="System.Windows.Media.VisualCollection">
  <TypeSignature Language="C#" Value="public sealed class VisualCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit VisualCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents an ordered collection of &lt;see cref="T:System.Windows.Media.Visual"&gt; objects.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A VisualCollection has implied context affinity. If a procedure attempts to access the VisualCollection from a different context than the context of the owning <xref:System.Windows.Media.ContainerVisual>, an exception is thrown.  
  
   
  
## Examples  
 The following example shows how to create a VisualCollection and add members to it.  
  
 [!code-cs[DrawingVisualSample#100](../../add/codesnippet/CSharp/DrawingVisual/Window1.xaml.cs#100)]
 [!code-vb[DrawingVisualSample#100](../../add/codesnippet/VisualBasic/drawingvisual/window1.xaml.vb#100)]  
  
> [!NOTE]
>  For the complete sample, see [Hit Test Using DrawingVisuals Sample](http://go.microsoft.com/fwlink/?LinkID=159994).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualCollection (System.Windows.Media.Visual parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.Visual parent) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="parent">The parent visual object whose &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; is returned.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.Windows.Media.Visual visual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">The &lt;see cref="T:System.Windows.Media.Visual"&gt; to append to the &lt;xref:System.Windows.Media.VisualCollection&gt;.</param>
        <summary>Appends a &lt;see cref="T:System.Windows.Media.Visual"&gt; to the end of the &lt;xref:System.Windows.Media.VisualCollection&gt;.</summary>
        <returns>The index in the collection at which  was added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Adding a <xref:System.Windows.Media.Visual> whose value is `null` is permitted and does not raise an exception.  
  
 The Add method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child .  
  
 If you need greater low-level control over the underlying storage implementation of visual child objects of a custom class, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you must define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.  
  
   
  
## Examples  
 The following example shows how to create a <xref:System.Windows.Media.VisualCollection> and add members to it.  
  
 [!code-cs[DrawingVisualSample#100](../../add/codesnippet/CSharp/DrawingVisual/Window1.xaml.cs#100)]
 [!code-vb[DrawingVisualSample#100](../../add/codesnippet/VisualBasic/drawingvisual/window1.xaml.vb#100)]  
  
> [!NOTE]
>  For the complete sample, see [Hit Test Using DrawingVisuals Sample](http://go.microsoft.com/fwlink/?LinkID=159994).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of elements that the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; can contain.</summary>
        <value>The number of elements that the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; can contain.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of Capacity is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing. <xref:System.Windows.Media.VisualCollection.Count%2A> is the number of visuals that are actually in the <xref:System.Windows.Media.VisualCollection>. Capacity is always greater than or equal to <xref:System.Windows.Media.VisualCollection.Count%2A>. If <xref:System.Windows.Media.VisualCollection.Count%2A> exceeds Capacity while adding elements, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased. By default Capacity is zero.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all elements from the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Media.VisualCollection.Count%2A> is reset to zero. The value of the <xref:System.Windows.Media.VisualCollection.Capacity%2A> remains unchanged. To reset the capacity of the <xref:System.Windows.Media.VisualCollection>, set the <xref:System.Windows.Media.VisualCollection.Capacity%2A> property to the desired size.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Media.Visual visual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">The &lt;see cref="T:System.Windows.Media.Visual"&gt; to search for in the collection.</param>
        <summary>Returns a &lt;see cref="T:System.Boolean"&gt; value that indicates whether the specified &lt;xref:System.Windows.Media.Visual&gt; is contained in the collection.</summary>
        <returns>`true` if  is contained in the collection; otherwise, `false`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The worst-case runtime scenario of this function is `O(n)`, where `n` is the number of items in the <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The one-dimensional &lt;see cref="T:System.Array"&gt; that is the destination of the elements that are copied from the &lt;xref:System.Windows.Media.VisualCollection&gt;.</param>
        <param name="index">The zero-based index in  at which copying begins.</param>
        <summary>Copies the items in the collection to an array, starting at a specific array index.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Windows.Media.Visual[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Windows.Media.Visual[] array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Windows.Media.Visual[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">An array of &lt;see cref="T:System.Windows.Media.Visual"&gt; objects (which must have zero-based indexing).</param>
        <param name="index">The index to start copying from within .</param>
        <summary>Copies the current collection into the passed &lt;see cref="T:System.Windows.Media.Visual"&gt; array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of elements in the collection.</summary>
        <value>The number of elements that the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; contains.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Count is the number of elements that are actually in the <xref:System.Windows.Media.VisualCollection>. <xref:System.Windows.Media.VisualCollection.Capacity%2A> is the number of elements that the <xref:System.Windows.Media.VisualCollection> is capable of storing.  
  
 Count is always less than or equal to <xref:System.Windows.Media.VisualCollection.Capacity%2A>. If Count exceeds <xref:System.Windows.Media.VisualCollection.Capacity%2A> while adding elements, the capacity of the list is doubled by automatically reallocating the internal array before copying the old elements and adding the new elements.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.Media.VisualCollection.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.VisualCollection/Enumerator GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.VisualCollection+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves an enumerator that can iterate through the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt;.</summary>
        <returns>An enumerator that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Media.Visual visual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">The &lt;see cref="T:System.Windows.Media.Visual"&gt; to locate in the &lt;xref:System.Windows.Media.VisualCollection&gt;.</param>
        <summary>Returns the zero-based index of the &lt;see cref="T:System.Windows.Media.Visual"&gt;.</summary>
        <returns>The index of the &lt;see cref="T:System.Windows.Media.Visual"&gt;.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Windows.Media.Visual> is not in the <xref:System.Windows.Media.VisualCollection>, -1 is returned. If `null` is passed to the method, the index of the first entry that has `null` is returned. If there is no null entry, -1 is returned.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Windows.Media.Visual visual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index at which the value should be inserted.</param>
        <param name="visual">The &lt;see cref="T:System.Windows.Media.Visual"&gt; to insert into the &lt;xref:System.Windows.Media.VisualCollection&gt;.</param>
        <summary>Inserts an element into the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; at the specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If <xref:System.Windows.Media.VisualCollection.Count%2A> already equals <xref:System.Windows.Media.VisualCollection.Capacity%2A>, the capacity of the <xref:System.Windows.Media.VisualCollection> is increased before the new <xref:System.Windows.Media.Visual> is inserted. If  is equal to <xref:System.Windows.Media.VisualCollection.Count%2A>,  is added to the end of <xref:System.Windows.Media.VisualCollection>. Any existing visual objects that are equal to or greater than  are shifted to accommodate the new <xref:System.Windows.Media.Visual>, and their index values are updated.  
  
 The Insert method also sets up the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child .  
  
 If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; is read-only.</summary>
        <value>The value that indicates whether the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; is read-only.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is always `false` for all <xref:System.Windows.Media.VisualCollection> objects.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether access to the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; is synchronized (thread-safe).</summary>
        <value>The value that indicates whether the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; is synchronized (thread-safe).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is always `false` for all <xref:System.Windows.Media.VisualCollection> objects.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Visual this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Visual Item(int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt; from which to get or set the &lt;xref:System.Windows.Media.Visual&gt;.</param>
        <summary>Gets or sets the &lt;see cref="T:System.Windows.Media.Visual"&gt; that is stored at the zero-based index of the &lt;xref:System.Windows.Media.VisualCollection&gt;.</summary>
        <value>The &lt;see cref="T:System.Windows.Media.Visual"&gt; that is stored at .</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property provides the ability to access a specific <xref:System.Windows.Media.Visual> in the <xref:System.Windows.Media.VisualCollection> by using an index.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Media.Visual visual) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">The &lt;see cref="T:System.Windows.Media.Visual"&gt; to remove from the &lt;xref:System.Windows.Media.VisualCollection&gt;.</param>
        <summary>Removes the specified &lt;see cref="T:System.Windows.Media.Visual"&gt; object from the &lt;xref:System.Windows.Media.VisualCollection&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated. If  is `null`, the first `null` entry is removed. Note that removing a `null` entry is linear in the size of the collection.  
  
 The Remove method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child .  
  
 If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the visual to remove.</param>
        <summary>Removes the visual object at the specified index in the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The visual objects that follow the removed object are shifted to occupy the vacated position, and their index values are updated.  
  
 The RemoveAt method also removes the parent-child relationship between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the child .  
  
 If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index of the range of elements to remove.</param>
        <param name="count">The number of elements to remove.</param>
        <summary>Removes a range of visual objects from the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The visual objects that follow the removed objects are shifted to occupy the vacated positions, and their index values are updated.  
  
 The RemoveRange method also removes the parent-child relationships between the parent visual, which is the owner of the <xref:System.Windows.Media.VisualCollection>, and the range of child visuals.  
  
 If you need greater low-level control over the underlying storage implementation of visual child objects, consider using the <xref:System.Windows.Media.Visual.AddVisualChild%2A> and <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> methods. When you use these methods, you define your own storage implementation, and do not use <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the &lt;see cref="T:System.Windows.Media.VisualCollection"&gt;.</summary>
        <value>A value of type &lt;see cref="T:System.Object"&gt;.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This member supports the [!INCLUDE[TLA2#tla_winclient](../../add/includes/tla2sharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code. For a description of this member, see &lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;.</summary>
        <returns>An object that can be used to iterate through the collection.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>