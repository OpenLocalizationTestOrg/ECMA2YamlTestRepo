<Type Name="JSVsaError" FullName="Microsoft.JScript.Vsa.JSVsaError">
  <TypeSignature Language="C#" Value="public enum JSVsaError" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed JSVsaError extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("7607D148-3AA5-4CC6-AED5-D4DB0ECBD992")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines the set of exceptions that can be thrown by a .NET script engine.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AppDomainCannotBeSet">
      <MemberSignature Language="C#" Value="AppDomainCannotBeSet" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError AppDomainCannotBeSet = int32(-2146226176)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133000</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The application domain cannot be set.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)?qualifyHint=False&autoUpgrade=True method or the M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)?qualifyHint=False&autoUpgrade=True method when attempts fail to set the AppDomain option on a managed engine, such as the Visual Basic or JScript script engines. Managed script engines do not support using custom application domains. Managed script engines will always use the application domain in which they are running.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppDomainInvalid">
      <MemberSignature Language="C#" Value="AppDomainInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError AppDomainInvalid = int32(-2146226175)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133001</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified application domain is not valid.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)?qualifyHint=False&autoUpgrade=True method or M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)?qualifyHint=False&autoUpgrade=True method when attempting to set an AppDomain reference that is not valid. To reset the `AppDomain` option to a null reference, call the M:Microsoft.Vsa.IVsaEngine.Reset?qualifyHint=False&autoUpgrade=True method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationBaseCannotBeSet">
      <MemberSignature Language="C#" Value="ApplicationBaseCannotBeSet" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ApplicationBaseCannotBeSet = int32(-2146226174)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133002</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Application base cannot be set.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)?qualifyHint=False&autoUpgrade=True method or M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)?qualifyHint=False&autoUpgrade=True method when attempts to get or set the ApplicationBase option on a managed engine, such as the Visual Basic .NET or JScript .NET script engines. The host must set the `ApplicationBase` option in the application domain in which it creates its script engine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationBaseInvalid">
      <MemberSignature Language="C#" Value="ApplicationBaseInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ApplicationBaseInvalid = int32(-2146226173)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133003</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified application base directory is not valid.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)?qualifyHint=False&autoUpgrade=True method or M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)?qualifyHint=False&autoUpgrade=True method when attempts to get or set the ApplicationBase option on an engine, and by the M:Microsoft.Vsa.IVsaEngine.Run?qualifyHint=False&autoUpgrade=True method when the directory specified as the Application Base directory is not a valid directory.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyExpected">
      <MemberSignature Language="C#" Value="AssemblyExpected" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError AssemblyExpected = int32(-2146226172)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133004</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: T:Microsoft.Vsa.IVsaReferenceItem?qualifyHint=False&autoUpgrade=True does not reference a valid assembly.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.Compile?qualifyHint=False&autoUpgrade=True method when one of the `IVsaReferenceItem` objects contained in the T:Microsoft.Vsa.IVsaItems?qualifyHint=False&autoUpgrade=True collection does not represent a valid assembly.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyNameInvalid">
      <MemberSignature Language="C#" Value="AssemblyNameInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError AssemblyNameInvalid = int32(-2146226171)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133005</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Assembly name is not valid.  
  
 Thrown by the P:Microsoft.Vsa.IVsaReferenceItem.AssemblyName?qualifyHint=False&autoUpgrade=True property when an assembly name that is not valid is specified for a T:Microsoft.Vsa.IVsaReferenceItem?qualifyHint=False&autoUpgrade=True object.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BadAssembly">
      <MemberSignature Language="C#" Value="BadAssembly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError BadAssembly = int32(-2146226170)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133006</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Assembly format is not valid.  
  
 Thrown when the assembly provided to the engine is not valid. This exception typically occurs when an engine tries to run or use the assembly.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BrowserNotExist">
      <MemberSignature Language="C#" Value="BrowserNotExist" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError BrowserNotExist = int32(-2146226115)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013303D</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified browser was not found.  
  
 Thrown by the aDTEngine.AttachDebugger method when a remote debugging session has been initiated and an attempt made to launch the remote browser, but a browser is not available.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CachedAssemblyInvalid">
      <MemberSignature Language="C#" Value="CachedAssemblyInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError CachedAssemblyInvalid = int32(-2146226169)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133007</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The cached assembly is not valid.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.Run?qualifyHint=False&autoUpgrade=True method when it is called and it tries to use a previously cached assembly, but the assembly is not valid, for example, it is a null reference (`Nothing` in Visual Basic).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallbackUnexpected">
      <MemberSignature Language="C#" Value="CallbackUnexpected" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError CallbackUnexpected = int32(-2146226168)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133008</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Callback cannot be made at this time.  
  
 Thrown by multiple methods when one of the T:Microsoft.Vsa.IVsaSite?qualifyHint=False&autoUpgrade=True or T:Microsoft.Vsa.IVsaPersistSite?qualifyHint=False&autoUpgrade=True callback methods is called at an unexpected time. For example, the M:Microsoft.Vsa.IVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)?qualifyHint=False&autoUpgrade=True method should only be called by an engine as a result of a call to the M:Microsoft.Vsa.IVsaEngine.Run?qualifyHint=False&autoUpgrade=True method. If it is called at any other time, a CallbackUnexpected exception will be thrown.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CannotAttachToWebServer">
      <MemberSignature Language="C#" Value="CannotAttachToWebServer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError CannotAttachToWebServer = int32(-2146226100)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013304C</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Cannot attach to the specified Web server.  
  
 Thrown by the aDTEngine.AttachDebugger method when launching a server-side debugging session and VSA cannot attach the debugger to the specified Web server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeDOMNotAvailable">
      <MemberSignature Language="C#" Value="CodeDOMNotAvailable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError CodeDOMNotAvailable = int32(-2146226167)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133009</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: A valid Code Document Object Model (CodeDOM) is not available.  
  
 Thrown by the P:Microsoft.Vsa.IVsaCodeItem.CodeDOM?qualifyHint=False&autoUpgrade=True property when the property is not available to be read. The engine either does not support the property or it requires an explicit call to the M:Microsoft.Vsa.IVsaEngine.Compile?qualifyHint=False&autoUpgrade=True method in order to generate the Document Object Model (DOM).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompiledStateNotFound">
      <MemberSignature Language="C#" Value="CompiledStateNotFound" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError CompiledStateNotFound = int32(-2146226166)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013300A</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified compiled state could not be loaded.  
  
 Thrown by the M:Microsoft.Vsa.IVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)?qualifyHint=False&autoUpgrade=True method when it is called for an engine that does not have compiled state.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DebuggeeNotStarted">
      <MemberSignature Language="C#" Value="DebuggeeNotStarted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError DebuggeeNotStarted = int32(-2146226114)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013303E</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Debug target application not started.  
  
 Thrown by the aDTEngine.AttachDebugger method when a Windows client debugging session is initiated, but the `AttachDebugger` method is not able to launch the target application that is specified with the TargetEXE option.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugInfoNotSupported">
      <MemberSignature Language="C#" Value="DebugInfoNotSupported" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError DebugInfoNotSupported = int32(-2146226165)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013300B</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The use of debug information is not supported.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.GenerateDebugInfo?qualifyHint=False&autoUpgrade=True property when it is set to true, but the engine does not support the generation of debugging information. Compilation continues, but the engine compiles code without debug information.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementNameInvalid">
      <MemberSignature Language="C#" Value="ElementNameInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ElementNameInvalid = int32(-2146226164)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013300C</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The element name is not valid.  
  
 Thrown by the M:Microsoft.Vsa.IVsaPersistSite.LoadElement(System.String)?qualifyHint=False&autoUpgrade=True method and M:Microsoft.Vsa.IVsaPersistSite.SaveElement(System.String,System.String)?qualifyHint=False&autoUpgrade=True methods when either is called with a name parameter that is not valid, for example, one that contains characters that are not valid. Note that the host must not throw an ElementNameInvalid Exception when the name parameter is a null pointer, as a null pointer is a valid argument used to request engine-level data.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementNotFound">
      <MemberSignature Language="C#" Value="ElementNotFound" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ElementNotFound = int32(-2146226163)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013300D</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The element was not found.  
  
 Thrown by M:Microsoft.Vsa.IVsaPersistSite.LoadElement(System.String)?qualifyHint=False&autoUpgrade=True method when it is called with a name parameter that is not valid, that is, one that does not correspond to a previously saved element.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineBusy">
      <MemberSignature Language="C#" Value="EngineBusy" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineBusy = int32(-2146226162)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013300E</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Engine is busy servicing another thread.  
  
 Thrown by all members when an engine is currently servicing a request from another thread. By design, a .NET script engine should only be called from one thread at a time.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineCannotClose">
      <MemberSignature Language="C#" Value="EngineCannotClose" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineCannotClose = int32(-2146226161)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013300F</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified engine cannot be closed.  
  
 Thrown by M:Microsoft.Vsa.IVsaEngine.Close?qualifyHint=False&autoUpgrade=True method when an attempt is made to call this method, but the. NET script engine cannot be closed properly.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineCannotReset">
      <MemberSignature Language="C#" Value="EngineCannotReset" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineCannotReset = int32(-2146226160)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133010</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified engine cannot be reset.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.Reset?qualifyHint=False&autoUpgrade=True method when it is called, but the .NET script engine could not be reset or its events could not be unhooked.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineClosed">
      <MemberSignature Language="C#" Value="EngineClosed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineClosed = int32(-2146226159)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133011</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Engine has been closed.  
  
 Thrown in most cases after the .NET script engine has been closed using a call to the M:Microsoft.Vsa.IVsaEngine.Close?qualifyHint=False&autoUpgrade=True method. Once the Close method has been called, the engine can no longer be used, and a new script engine must be created to perform any tasks.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineEmpty">
      <MemberSignature Language="C#" Value="EngineEmpty" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineEmpty = int32(-2146226159)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133012</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified engine has no source items to compile.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.Compile?qualifyHint=False&autoUpgrade=True method when it is called, but there are no items in the T:Microsoft.Vsa.IVsaItems?qualifyHint=False&autoUpgrade=True collection to compile, that is, the P:Microsoft.Vsa.IVsaItems.Count?qualifyHint=False&autoUpgrade=True property = 0.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineInitialized">
      <MemberSignature Language="C#" Value="EngineInitialized" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineInitialized = int32(-2146226157)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133013</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Engine has already been initialized.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)?qualifyHint=False&autoUpgrade=True method and M:Microsoft.Vsa.IVsaEngine.InitNew?qualifyHint=False&autoUpgrade=True methods when these methods are called but the .NET script engine has already been initialized. If the host wants to load source state or initialize a new script engine, the respective methods must be the first ones called after setting the P:Microsoft.Vsa.IVsaEngine.RootMoniker?qualifyHint=False&autoUpgrade=True and P:Microsoft.Vsa.IVsaEngine.Site?qualifyHint=False&autoUpgrade=True properties.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineNameInUse">
      <MemberSignature Language="C#" Value="EngineNameInUse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineNameInUse = int32(-2146226156)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133014</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified engine name is already in use by another engine.  
  
 Thrown by P:Microsoft.Vsa.IVsaEngine.Name?qualifyHint=False&autoUpgrade=True property when an attempt is made to set it to the same name as that of an existing .NET script engine inside the host. While the Name property does not need to be globally unique, it cannot be the same as the name of a script engine that is currently being hosted.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineNameInvalid">
      <MemberSignature Language="C#" Value="EngineNameInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineNameInvalid = int32(-2146226113)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013303F</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Engine name not valid.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.Name?qualifyHint=False&autoUpgrade=True property if the specified name is already in use by another engine. VSA requires that design-time engine names be unique.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineNameNotSet">
      <MemberSignature Language="C#" Value="EngineNameNotSet" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineNameNotSet = int32(-2146226099)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013303F</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Engine name not valid.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.Name?qualifyHint=False&autoUpgrade=True property if the specified name is already in use by another engine. VSA requires that design-time engine names be unique.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineNotCompiled">
      <MemberSignature Language="C#" Value="EngineNotCompiled" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineNotCompiled = int32(-2146226155)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133015</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified engine is not compiled.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.Run?qualifyHint=False&autoUpgrade=True method and M:Microsoft.Vsa.IVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)?qualifyHint=False&autoUpgrade=True methods when there is no compiled state to run or save. Either the .NET script engine must compile the code with a call to the M:Microsoft.Vsa.IVsaEngine.Compile?qualifyHint=False&autoUpgrade=True method, or the M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)?qualifyHint=False&autoUpgrade=True method must be called before the script engine can be run or saved.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineNotExist">
      <MemberSignature Language="C#" Value="EngineNotExist" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineNotExist = int32(-2146226112)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133040</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Engine does not exist.  
  
 Thrown by the aIDE.ExtensibilityObject property in cases where there are no valid engines from which to retrieve the extensibility object.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineNotInitialized">
      <MemberSignature Language="C#" Value="EngineNotInitialized" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineNotInitialized = int32(-2146226154)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133016</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified engine has not been initialized.  
  
 Thrown by multiple members when the .NET script engine has not been properly initialized, and the host tries to access a property or method that requires the script engine to be initialized.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineNotRunning">
      <MemberSignature Language="C#" Value="EngineNotRunning" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineNotRunning = int32(-2146226153)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133017</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified engine must be running.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.Reset?qualifyHint=False&autoUpgrade=True method and P:Microsoft.Vsa.IVsaEngine.Assembly?qualifyHint=False&autoUpgrade=True property when either is called and the specified .NET script engine is not running.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EngineRunning">
      <MemberSignature Language="C#" Value="EngineRunning" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EngineRunning = int32(-2146226152)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133018</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Engine is running.  
  
 Thrown by multiple members when the .NET script engine is running, and the host attempts to perform an operation that is not allowed while the script engine is running. For example, attempting to create a new code item using the M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)?qualifyHint=False&autoUpgrade=True method will produce this exception if the engine is in the running state.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventSourceInvalid">
      <MemberSignature Language="C#" Value="EventSourceInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EventSourceInvalid = int32(-2146226151)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133019</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified event source does not exist.  
  
 Thrown by the M:Microsoft.Vsa.IVsaSite.GetEventSourceInstance(System.String,System.String)?qualifyHint=False&autoUpgrade=True method when it is called with a parameter or pairing of parameters that is not valid. Either the  parameter refers to an item that the host did not add to the engine, or the  parameter refers to an event source that was not added to the specified item.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventSourceNameInUse">
      <MemberSignature Language="C#" Value="EventSourceNameInUse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EventSourceNameInUse = int32(-2146226150)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013301A</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified event source name is already in use.  
  
 Thrown by the M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)?qualifyHint=False&autoUpgrade=True method when it is called with an  parameter that has previously been used as an event source name.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventSourceNameInvalid">
      <MemberSignature Language="C#" Value="EventSourceNameInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EventSourceNameInvalid = int32(-2146226149)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013301B</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified event source name is not valid.  
  
 Thrown by the M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)?qualifyHint=False&autoUpgrade=True method and M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)?qualifyHint=False&autoUpgrade=True methods when either is called with an  parameter that is not a valid identifier. Hosts can determine whether an identifier is valid by first calling the M:Microsoft.Vsa.IVsaEngine.IsValidIdentifier(System.String)?qualifyHint=False&autoUpgrade=True method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventSourceNotFound">
      <MemberSignature Language="C#" Value="EventSourceNotFound" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EventSourceNotFound = int32(-2146226148)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013301C</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified event source not found.  
  
 Thrown by the M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)?qualifyHint=False&autoUpgrade=True method when it is called with an  parameter that is not already in use as an event source in the code item.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventSourceTypeInvalid">
      <MemberSignature Language="C#" Value="EventSourceTypeInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError EventSourceTypeInvalid = int32(-2146226147)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013301D</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified event source type is not valid.  
  
 Thrown by the M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)?qualifyHint=False&autoUpgrade=True method when it is called with an  parameter that is not a valid type. Note that this is not true for the Visual Basic script engine, which instead reports a compile exception in this situation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileFormatUnsupported">
      <MemberSignature Language="C#" Value="FileFormatUnsupported" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError FileFormatUnsupported = int32(-2146226111)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133041</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: File format is not supported.  
  
 Reserved for future use.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileTypeUnknown">
      <MemberSignature Language="C#" Value="FileTypeUnknown" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError FileTypeUnknown = int32(-2146226110)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133042</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: File is of unknown type.  
  
 Reserved for future use.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompiledStateFailed">
      <MemberSignature Language="C#" Value="GetCompiledStateFailed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError GetCompiledStateFailed = int32(-2146226146)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013301E</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified compiled state could not be loaded.  
  
 Thrown by the M:Microsoft.Vsa.IVsaSite.GetCompiledState(System.Byte[]@,System.Byte[]@)?qualifyHint=False&autoUpgrade=True method and M:Microsoft.Vsa.IVsaEngine.Run?qualifyHint=False&autoUpgrade=True methods when the `GetCompiledState` method fails. The Run method returns to the caller the `GetCompiledStateFailed` exception returned by the `GetCompiledState` method. The `Run` method may also generate the GetCompiledStateFailed exception if the assembly cache throws an exception.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalInstanceInvalid">
      <MemberSignature Language="C#" Value="GlobalInstanceInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError GlobalInstanceInvalid = int32(-2146226145)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013301F</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified global instance does not exist.  
  
 Thrown by M:Microsoft.Vsa.IVsaSite.GetGlobalInstance(System.String)?qualifyHint=False&autoUpgrade=True method when it is called with an invalid name parameter, that is, one that was not added using the M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)?qualifyHint=False&autoUpgrade=True method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalInstanceTypeInvalid">
      <MemberSignature Language="C#" Value="GlobalInstanceTypeInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError GlobalInstanceTypeInvalid = int32(-2146226144)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133020</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Global instance type is not valid.  
  
 Thrown when the `TypeString` property of an T:Microsoft.Vsa.IVsaGlobalItem?qualifyHint=False&autoUpgrade=True object is not valid.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalCompilerError">
      <MemberSignature Language="C#" Value="InternalCompilerError" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError InternalCompilerError = int32(-2146226143)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133021</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: An internal compiler exception has occurred.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.Compile?qualifyHint=False&autoUpgrade=True method when it is called and an unexpected exception occurs within the compiler. This exception is not thrown for compilation errors, which are signaled to the host by means of the M:Microsoft.Vsa.IVsaSite.OnCompilerError(Microsoft.Vsa.IVsaError)?qualifyHint=False&autoUpgrade=True method, but for exceptions in the compiler itself.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemCannotBeRemoved">
      <MemberSignature Language="C#" Value="ItemCannotBeRemoved" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ItemCannotBeRemoved = int32(-2146226142)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133022</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified item cannot be removed.  
  
 Thrown by the M:Microsoft.Vsa.IVsaItems.Remove(System.Int32)?qualifyHint=False&autoUpgrade=True and M:Microsoft.Vsa.IVsaItems.Remove(System.String)?qualifyHint=False&autoUpgrade=True methods when an attempt is made to remove an item that cannot be removed.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemCannotBeRenamed">
      <MemberSignature Language="C#" Value="ItemCannotBeRenamed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ItemCannotBeRenamed = int32(-2146226109)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133043</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The item cannot be renamed.  
  
 Thrown by the P:Microsoft.Vsa.IVsaItem.Name?qualifyHint=False&autoUpgrade=True property in cases where an attempt is made to rename an item that cannot be renamed.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemFlagNotSupported">
      <MemberSignature Language="C#" Value="ItemFlagNotSupported" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ItemFlagNotSupported = int32(-2146226141)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133023</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified flag is not supported.  
  
 Thrown by the M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)?qualifyHint=False&autoUpgrade=True method when the call specifies a flag that is not valid, or a flag that is not supported by the host.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemNameInUse">
      <MemberSignature Language="C#" Value="ItemNameInUse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ItemNameInUse = int32(-2146226140)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133024</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified item's name is already in use.  
  
 Thrown by the M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)?qualifyHint=False&autoUpgrade=True method and the P:Microsoft.Vsa.IVsaItem.Name?qualifyHint=False&autoUpgrade=True property when a call to the `CreateItem` method is made with a name parameter that is already in use, or when an existing item has its `Name` property set to a name that is already in use.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemNameInvalid">
      <MemberSignature Language="C#" Value="ItemNameInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ItemNameInvalid = int32(-2146226139)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133025</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Item name is not valid.  
  
 Thrown by the P:Microsoft.Vsa.IVsaItems.Item(System.Int32)?qualifyHint=False&autoUpgrade=True property when the name of an item is not valid. The name of an item can be set either when calling the `CreateItem` method, or when setting the `Name` property. Use the M:Microsoft.Vsa.IVsaEngine.IsValidIdentifier(System.String)?qualifyHint=False&autoUpgrade=True method to determine whether an identifier is valid for the engine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemNotFound">
      <MemberSignature Language="C#" Value="ItemNotFound" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ItemNotFound = int32(-2146226138)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133026</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified item not found in the collection.  
  
 Thrown by the P:Microsoft.Vsa.IVsaItems.Item(System.Int32)?qualifyHint=False&autoUpgrade=True property, M:Microsoft.Vsa.IVsaItems.Remove(System.Int32)?qualifyHint=False&autoUpgrade=True method, P:Microsoft.Vsa.IVsaItems.Item(System.String)?qualifyHint=False&autoUpgrade=True property, and M:Microsoft.Vsa.IVsaItems.Remove(System.String)?qualifyHint=False&autoUpgrade=True method when the aItems.Item property is indexed using a parameter that is not valid. When using the string overload, the name parameter must be the same as the name of an item already in the collection; when using the int overload, the  parameter must be between 0 and the value of the P:Microsoft.Vsa.IVsaItems.Count?qualifyHint=False&autoUpgrade=True property -1, inclusive.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemTypeNotSupported">
      <MemberSignature Language="C#" Value="ItemTypeNotSupported" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ItemTypeNotSupported = int32(-2146226137)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133027</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified item type is not supported.  
  
 Thrown by the M:Microsoft.Vsa.IVsaItems.CreateItem(System.String,Microsoft.Vsa.VsaItemType,Microsoft.Vsa.VsaItemFlag)?qualifyHint=False&autoUpgrade=True method when a call is made with an  parameter that is not supported by the engine. Note that not all engines support all the values of the VsaItemType enumeration.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCIDNotSupported">
      <MemberSignature Language="C#" Value="LCIDNotSupported" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError LCIDNotSupported = int32(-2146226136)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133028</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified locale identifier (LCID) is not supported.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.LCID?qualifyHint=False&autoUpgrade=True property when it is set to an LCID that is not supported by the engine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadElementFailed">
      <MemberSignature Language="C#" Value="LoadElementFailed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError LoadElementFailed = int32(-2146226135)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133029</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified element could not be loaded.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)?qualifyHint=False&autoUpgrade=True method and M:Microsoft.Vsa.IVsaPersistSite.LoadElement(System.String)?qualifyHint=False&autoUpgrade=True methods when a call to the `LoadElement` method fails. The `LoadSourceState` method returns the LoadElementFailed exception from the `IVsaPersistSite.LoadElement` method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingPdb">
      <MemberSignature Language="C#" Value="MissingPdb" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError MissingPdb = int32(-2146226102)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013304A</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: n/a  
  
 Reserved for future use.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingSource">
      <MemberSignature Language="C#" Value="MissingSource" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError MissingSource = int32(-2146226108)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133044</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Missing source.  
  
 Reserved for future use.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTooLong">
      <MemberSignature Language="C#" Value="NameTooLong" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError NameTooLong = int32(-2146226106)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133046</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The engine name exceeds the allowable length of 256 characters.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.Name?qualifyHint=False&autoUpgrade=True property in cases where the value set for the engine name exceeds 256 characters.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotClientSideAndNoUrl">
      <MemberSignature Language="C#" Value="NotClientSideAndNoUrl" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError NotClientSideAndNoUrl = int32(-2146226101)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013304B</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: n/a  
  
 Reserved for future use.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotificationInvalid">
      <MemberSignature Language="C#" Value="NotificationInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError NotificationInvalid = int32(-2146226134)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013302A</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified notification is not valid.  
  
 Thrown by the M:Microsoft.Vsa.IVsaSite.Notify(System.String,System.Object)?qualifyHint=False&autoUpgrade=True method when it is called with a notification that is not valid. It is generally recommended that host applications ignore notifications of which they are not aware, or to which they do not need to respond. However, in cases where they do handle a specific notification and the notification is not valid, hosts should throw the NotificationInvalid exception.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotInitCompleted">
      <MemberSignature Language="C#" Value="NotInitCompleted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError NotInitCompleted = int32(-2146226107)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133045</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The aDTEngine.InitCompleted method has not been called.  
  
 Thrown by the aDTEngine.GetIDE method or by the signTime.ShowIDE method in cases where either is called before the `InitCompleted` method has been called, signaling that initialization is complete. In the case of the `ShowIDE` method, the exception signals that the first engine in the engines collection has not yet been initialized.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionInvalid">
      <MemberSignature Language="C#" Value="OptionInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError OptionInvalid = int32(-2146226133)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013302B</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified option is not valid.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)?qualifyHint=False&autoUpgrade=True method and M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)?qualifyHint=False&autoUpgrade=True methods when the host attempts to set an option using either method, but the value supplied is not valid for the option.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionNotSupported">
      <MemberSignature Language="C#" Value="OptionNotSupported" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError OptionNotSupported = int32(-2146226132)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013302C</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified option is not supported.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)?qualifyHint=False&autoUpgrade=True method M:Microsoft.Vsa.IVsaEngine.SetOption(System.String,System.Object)?qualifyHint=False&autoUpgrade=True method, M:Microsoft.Vsa.IVsaEngine.GetOption(System.String)?qualifyHint=False&autoUpgrade=True method, and `IVsaItem.SetOption` methods when trying to get or set an option that is not supported by the engine  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcNameInUse">
      <MemberSignature Language="C#" Value="ProcNameInUse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ProcNameInUse = int32(-2146226105)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133047</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: n/a  
  
 Reserved for future use.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcNameInvalid">
      <MemberSignature Language="C#" Value="ProcNameInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError ProcNameInvalid = int32(-2146226104)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133048</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: n/a  
  
 Reserved for future use.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RevokeFailed">
      <MemberSignature Language="C#" Value="RevokeFailed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError RevokeFailed = int32(-2146226131)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013302D</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: A request to revoke the assembly cache failed.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.RevokeCache?qualifyHint=False&autoUpgrade=True method when it is called, but it cannot revoke the cache. More information may be available by means of the Exception.InnerException property. Note that if there is no cached assembly to revoke, the engine should return "success" and not throw this exception.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootMonikerAlreadySet">
      <MemberSignature Language="C#" Value="RootMonikerAlreadySet" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError RootMonikerAlreadySet = int32(-2146226130)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013302E</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The P:Microsoft.Vsa.IVsaEngine.RootMoniker?qualifyHint=False&autoUpgrade=True property has already been set and cannot be set again.  
  
 Thrown by the `IVsaEngine.RootMoniker` property when an attempt is made to set this property after it has already been set to a valid value. The `RootMoniker` property can only be set once.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootMonikerInUse">
      <MemberSignature Language="C#" Value="RootMonikerInUse" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError RootMonikerInUse = int32(-2146226129)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013302F</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified root moniker is already in use.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.RootMoniker?qualifyHint=False&autoUpgrade=True property when an attempt is made to set this property to a value that is already in use by another engine. The `RootMoniker` property must be globally unique.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootMonikerInvalid">
      <MemberSignature Language="C#" Value="RootMonikerInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError RootMonikerInvalid = int32(-2146226128)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133030</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified root moniker is not valid.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.RootMoniker?qualifyHint=False&autoUpgrade=True property when an attempt is made to set this property to a value that is not a valid moniker. A moniker can be invalid for the following reasons:  
  
 It does not adhere to the moniker syntax of \<protocol>://\<path>.  
  
 It uses characters that are not valid inside a Uniform Resource Identifier (URI). For more information about valid characters, see "Request For Comments 2396" at http://www.ietf.org/rfc/rfc2396.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootMonikerNotSet">
      <MemberSignature Language="C#" Value="RootMonikerNotSet" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError RootMonikerNotSet = int32(-2146226127)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133031</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The P:Microsoft.Vsa.IVsaEngine.RootMoniker?qualifyHint=False&autoUpgrade=True property has not been set.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.Compile?qualifyHint=False&autoUpgrade=True method, M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)?qualifyHint=False&autoUpgrade=True method, M:Microsoft.Vsa.IVsaEngine.Run?qualifyHint=False&autoUpgrade=True method, and M:Microsoft.Vsa.IVsaEngine.InitNew?qualifyHint=False&autoUpgrade=True methods, and the P:Microsoft.Vsa.IVsaEngine.Site?qualifyHint=False&autoUpgrade=True property when the property or method requires a valid root moniker, but the `RootMoniker` property has not been set.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootMonikerProtocolInvalid">
      <MemberSignature Language="C#" Value="RootMonikerProtocolInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError RootMonikerProtocolInvalid = int32(-2146226126)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133032</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The protocol specified in the root moniker is not valid.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.RootMoniker?qualifyHint=False&autoUpgrade=True property when an attempt is made to set this property to a value that uses a protocol already registered on the machine, such as file or http. Registered protocols cannot be used as part of the moniker.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNamespaceInvalid">
      <MemberSignature Language="C#" Value="RootNamespaceInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError RootNamespaceInvalid = int32(-2146226125)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133033</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified root namespace is not valid.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.RootNamespace?qualifyHint=False&autoUpgrade=True property when an attempt is made to set this property to a value that is not a valid namespace identifier.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNamespaceNotSet">
      <MemberSignature Language="C#" Value="RootNamespaceNotSet" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError RootNamespaceNotSet = int32(-2146226124)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133034</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The root namespace has not been set.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.Compile?qualifyHint=False&autoUpgrade=True method if it is called before the P:Microsoft.Vsa.IVsaEngine.RootNamespace?qualifyHint=False&autoUpgrade=True property is set. The runtime loader engine and the Visual Basic script engine will also throw this exception on calling the Run method if the property has not been set.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCompiledStateFailed">
      <MemberSignature Language="C#" Value="SaveCompiledStateFailed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError SaveCompiledStateFailed = int32(-2146226123)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133035</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified compiled state could not be saved.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.SaveCompiledState(System.Byte[]@,System.Byte[]@)?qualifyHint=False&autoUpgrade=True method when this method fails. Note that this method does not actually save code, but rather simply provides the host application with the specified binary data, so that the host can save it.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveElementFailed">
      <MemberSignature Language="C#" Value="SaveElementFailed" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError SaveElementFailed = int32(-2146226122)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133036</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified element could not be saved.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.SaveSourceState(Microsoft.Vsa.IVsaPersistSite)?qualifyHint=False&autoUpgrade=True method and M:Microsoft.Vsa.IVsaPersistSite.SaveElement(System.String,System.String)?qualifyHint=False&autoUpgrade=True methods when a call to the `SaveElement` method fails. The `InnerException` property of the T:System.Exception?qualifyHint=False&autoUpgrade=True class is set to the actual exception thrown by the underlying code (for example, an out of disk space exception). For more information, see P:System.Exception.InnerException?qualifyHint=True&autoUpgrade=True. The `SaveSourceState` method returns the `SaveElementFailed` exception from the `SaveElement` method back to the caller.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SiteAlreadySet">
      <MemberSignature Language="C#" Value="SiteAlreadySet" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError SiteAlreadySet = int32(-2146226121)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133037</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified site has already been set.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.Site?qualifyHint=False&autoUpgrade=True property when an attempt is made to set this property and it already has a non-null value. Once it has been set, the Site property cannot be reset.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SiteInvalid">
      <MemberSignature Language="C#" Value="SiteInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError SiteInvalid = int32(-2146226120)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133038</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: The specified site is not valid.  
  
 Thrown by the P:Microsoft.Vsa.IVsaEngine.Site?qualifyHint=False&autoUpgrade=True property when an attempt is made to set this property to a value that is not a valid T:Microsoft.Vsa.IVsaSite?qualifyHint=False&autoUpgrade=True object reference.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SiteNotSet">
      <MemberSignature Language="C#" Value="SiteNotSet" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError SiteNotSet = int32(-2146226119)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133039</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Site has not been set.  
  
 Thrown by the M:Microsoft.Vsa.IVsaEngine.Compile?qualifyHint=False&autoUpgrade=True method, M:Microsoft.Vsa.IVsaEngine.LoadSourceState(Microsoft.Vsa.IVsaPersistSite)?qualifyHint=False&autoUpgrade=True method, M:Microsoft.Vsa.IVsaEngine.Run?qualifyHint=False&autoUpgrade=True method, and M:Microsoft.Vsa.IVsaEngine.InitNew?qualifyHint=False&autoUpgrade=True methods when a property or method that requires a valid T:Microsoft.Vsa.IVsaSite?qualifyHint=False&autoUpgrade=True object is called, but the P:Microsoft.Vsa.IVsaEngine.Site?qualifyHint=False&autoUpgrade=True property has not been set.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceItemNotAvailable">
      <MemberSignature Language="C#" Value="SourceItemNotAvailable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError SourceItemNotAvailable = int32(-2146226118)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013303A</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Source item is not available for this exception.  
  
 Thrown when there is no source item for an exception, that is, the P:Microsoft.Vsa.IVsaError.SourceItem?qualifyHint=False&autoUpgrade=True property is not set.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceMonikerNotAvailable">
      <MemberSignature Language="C#" Value="SourceMonikerNotAvailable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError SourceMonikerNotAvailable = int32(-2146226117)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013303B</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Source moniker is not available for this exception.  
  
 Thrown when there is no moniker for an exception, that is, the P:Microsoft.Vsa.IVsaError.SourceMoniker?qualifyHint=False&autoUpgrade=True property is not set.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownError">
      <MemberSignature Language="C#" Value="UnknownError" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError UnknownError = int32(-2146225921)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x801330FF</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Unknown exception.  
  
 Thrown by multiple members when the exception is not recognized.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="URLInvalid">
      <MemberSignature Language="C#" Value="URLInvalid" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError URLInvalid = int32(-2146226116)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x8013303C</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: Invalid URL; ASPX file extension is missing.  
  
 Thrown by the P:Microsoft.Vsa.IVsaDTEngine.TargetURL?qualifyHint=False&autoUpgrade=True property when the target URL to which the debugger is set is not valid. The property must be pointing to an ASPX file.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VsaServerDown">
      <MemberSignature Language="C#" Value="VsaServerDown" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.JScript.Vsa.JSVsaError VsaServerDown = int32(-2146226103)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.JScript.Vsa.JSVsaError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value: 0x80133049</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exception string: n/a  
  
 Reserved for future use.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>