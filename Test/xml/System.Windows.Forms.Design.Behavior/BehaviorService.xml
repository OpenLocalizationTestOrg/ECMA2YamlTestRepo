<Type Name="BehaviorService" FullName="System.Windows.Forms.Design.Behavior.BehaviorService">
  <TypeSignature Language="C#" Value="public sealed class BehaviorService : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BehaviorService extends System.Object implements class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Manages user interface in the designer. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When the BehaviorService is created, it adds a transparent window over the designer frame. The BehaviorService can then use this window to render user interface elements, called <xref:System.Windows.Forms.Design.Behavior.Glyph> objects, as well as catch all mouse messages. In this way, the BehaviorService can control designer behavior.  
  
 The BehaviorService class supports a behavior stack, onto which <xref:System.Windows.Forms.Design.Behavior.Behavior> objects can be pushed. When a message is intercepted through the transparent window, the BehaviorService can send the message to the <xref:System.Windows.Forms.Design.Behavior.Behavior> at the top of the stack. This enables different user interface modes depending on the currently pushed <xref:System.Windows.Forms.Design.Behavior.Behavior>. The BehaviorService is used to render all <xref:System.Windows.Forms.Design.Behavior.Glyph> objects, such as selection borders, sizing handles, and smart tags. The BehaviorService also controls many design-time behaviors, such as using snaplines, dragging, and selecting.  
  
 For more information, see [Behavior Service Overview](../Topic/Behavior%20Service%20Overview.md).  
  
   
  
## Examples  
 The following code example demonstrates how to create your own <xref:System.Windows.Forms.Design.Behavior.Behavior> based class that responds to user clicks.  
  
 [!CODE [System.Windows.Forms.Design.Behavior.BehaviorService#1](../CodeSnippet/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Adorners">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection Adorners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection Adorners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection"&gt;.</summary>
        <value>A collection of adorner.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Adorners property provides access to the <xref:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection> managed by the <xref:System.Windows.Forms.Design.Behavior.BehaviorService>.  
  
   
  
## Examples  
 The following code example demonstrates how to add <xref:System.Windows.Forms.Design.Behavior.Adorner> objects to and remove them from a <xref:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection>. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> class.  
  
 [!CODE [System.Windows.Forms.Design.Behavior.BehaviorService#2](../CodeSnippet/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdornerWindowGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics AdornerWindowGraphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics AdornerWindowGraphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;xref:System.Drawing.Graphics&gt; for the adorner window.</summary>
        <value>The &lt;xref:System.Drawing.Graphics&gt; for the adorner window.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdornerWindowPointToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Point AdornerWindowPointToScreen (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point AdornerWindowPointToScreen(valuetype System.Drawing.Point p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">The &lt;xref:System.Drawing.Point&gt; value to transform.</param>
        <summary>Translates a &lt;xref:System.Drawing.Point&gt; in the adorner window to screen coordinates.</summary>
        <returns>The transformed &lt;xref:System.Drawing.Point&gt; value, in screen coordinates.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdornerWindowToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Point AdornerWindowToScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point AdornerWindowToScreen() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the location of the adorner window in screen coordinates.</summary>
        <returns>The location, from the upper-left corner of the adorner window, in screen coordinates.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler BeginDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler BeginDrag" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService"&gt; starts a drag-and-drop operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.Design.Behavior.BehaviorService> raises the BeginDrag event immediately before it starts a drag-and-drop operation.  
  
 For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlRectInAdornerWindow">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ControlRectInAdornerWindow (System.Windows.Forms.Control c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle ControlRectInAdornerWindow(class System.Windows.Forms.Control c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="c">The &lt;xref:System.Windows.Forms.Control&gt; to translate.</param>
        <summary>Returns the bounding &lt;xref:System.Drawing.Rectangle&gt; of a &lt;xref:System.Windows.Forms.Control&gt;.</summary>
        <returns>The bounding &lt;xref:System.Drawing.Rectangle&gt; of a &lt;xref:System.Windows.Forms.Control&gt; translated to the adorner window coordinates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The adorner window is a transparent window that resides on top of the designer's frame. This window is used by the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> to intercept all messages. It also serves as a unified canvas on which to paint a <xref:System.Windows.Forms.Design.Behavior.Glyph>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlToAdornerWindow">
      <MemberSignature Language="C#" Value="public System.Drawing.Point ControlToAdornerWindow (System.Windows.Forms.Control c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point ControlToAdornerWindow(class System.Windows.Forms.Control c) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="c">The &lt;xref:System.Windows.Forms.Control&gt; to translate.</param>
        <summary>Returns the location of a &lt;xref:System.Windows.Forms.Control&gt; translated to adorner window coordinates.</summary>
        <returns>A &lt;xref:System.Drawing.Point&gt; value indicating the location of  in adorner window coordinates.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> class.  
  
 [!CODE [System.Windows.Forms.Design.Behavior.BehaviorService#8](../CodeSnippet/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Design.Behavior.Behavior CurrentBehavior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Design.Behavior.Behavior CurrentBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Design.Behavior.Behavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; at the top of the behavior stack without removing it.</summary>
        <value>The &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; at the top of the behavior stack.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by the &lt;see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Call Dispose when you are finished using the <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. The Dispose method leaves the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> in an unusable state. After calling Dispose, you must release all references to the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> so the garbage collector can reclaim the memory that the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> was occupying. For more information, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md) and [Implementing a Dispose Method](../Topic/Implementing%20a%20Dispose%20Method.md).  
  
> [!NOTE]
>  Always call Dispose before you release your last reference to the <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> object's `Finalize` method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler EndDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler EndDrag" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the &lt;see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService"&gt; completes a drag operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Windows.Forms.Design.Behavior.BehaviorService> raises the EndDrag event immediately after the drag operation is complete.  
  
 For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Design.Behavior.Behavior GetNextBehavior (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Design.Behavior.Behavior GetNextBehavior(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Design.Behavior.Behavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">The &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; preceding the &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; to be returned.</param>
        <summary>Returns the &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; immediately after the given &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; in the behavior stack.</summary>
        <returns>The &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; immediately after  in the behavior stack, or `null` if there is no following behavior.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the adorner window of the &lt;see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calling the <xref:System.Windows.Forms.Design.Behavior.BehaviorService.Invalidate%2A> method forces a refresh of all <xref:System.Windows.Forms.Design.Behavior.Adorner> objects and, in turn, all <xref:System.Windows.Forms.Design.Behavior.Glyph> objects.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangular area to invalidate.</param>
        <summary>Invalidates, within the adorner window, the specified area of the &lt;see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Invalidate method will force a refresh of all <xref:System.Windows.Forms.Design.Behavior.BehaviorService.Adorners%2A> and, in turn, all <xref:System.Windows.Forms.Design.Behavior.Adorner.Glyphs%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="r">The region to invalidate.</param>
        <summary>Invalidates, within the adorner window, the specified area of the &lt;see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService"&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Invalidate method will force a refresh of all <xref:System.Windows.Forms.Design.Behavior.BehaviorService.Adorners%2A> and, in turn, all <xref:System.Windows.Forms.Design.Behavior.Adorner.Glyphs%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapAdornerWindowPoint">
      <MemberSignature Language="C#" Value="public System.Drawing.Point MapAdornerWindowPoint (IntPtr handle, System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point MapAdornerWindowPoint(native int handle, valuetype System.Drawing.Point pt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="handle">An adorner window's handle.</param>
        <param name="pt">A &lt;xref:System.Drawing.Point&gt; in a handle's coordinate system.</param>
        <summary>Converts a point in a handle's coordinate system to the adorner window coordinates.</summary>
        <returns>A &lt;xref:System.Drawing.Point&gt; in the adorner window coordinates.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Design.Behavior.Behavior PopBehavior (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Design.Behavior.Behavior PopBehavior(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Design.Behavior.Behavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">The &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; to remove from the stack.</param>
        <summary>Removes and returns the &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; at the top of the stack.</summary>
        <returns>The &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; that was removed from the stack.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Removes the current <xref:System.Windows.Forms.Design.Behavior.Behavior> from the behavior stack internally maintained by the <xref:System.Windows.Forms.Design.Behavior.BehaviorService>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushBehavior">
      <MemberSignature Language="C#" Value="public void PushBehavior (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PushBehavior(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">The &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; to push.</param>
        <summary>Pushes a &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; onto the behavior stack.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PushBehavior method is often performed by means of a hit-tested <xref:System.Windows.Forms.Design.Behavior.Glyph>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushCaptureBehavior">
      <MemberSignature Language="C#" Value="public void PushCaptureBehavior (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PushCaptureBehavior(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">The &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; to push.</param>
        <summary>Pushes a &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; onto the behavior stack and assigns mouse capture to the behavior.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pushing a capture behavior is often done through a hit-tested <xref:System.Windows.Forms.Design.Behavior.Glyph>. If a behavior calls the PushCaptureBehavior method and mouse capture is lost, the behavior's <xref:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture%2A> method is called.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScreenToAdornerWindow">
      <MemberSignature Language="C#" Value="public System.Drawing.Point ScreenToAdornerWindow (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point ScreenToAdornerWindow(valuetype System.Drawing.Point p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">The &lt;xref:System.Drawing.Point&gt; value to transform.</param>
        <summary>Translates a point in screen coordinates into the adorner window coordinates of the &lt;see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService"&gt;.</summary>
        <returns>The transformed &lt;xref:System.Drawing.Point&gt; value, in adorner window coordinates.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Synchronize">
      <MemberSignature Language="C#" Value="public event EventHandler Synchronize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Synchronize" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the current selection should be refreshed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For more information about handling events, see [Events](../Topic/Handling%20and%20Raising%20Events.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncSelection">
      <MemberSignature Language="C#" Value="public void SyncSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SyncSelection() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Synchronizes all selection glyphs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>