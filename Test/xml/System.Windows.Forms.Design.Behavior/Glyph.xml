<Type Name="Glyph" FullName="System.Windows.Forms.Design.Behavior.Glyph">
  <TypeSignature Language="C#" Value="public abstract class Glyph" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Glyph extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a single user interface (UI) entity managed by an &lt;see cref="T:System.Windows.Forms.Design.Behavior.Adorner"&gt;.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The sole purpose of a Glyph is to paint and hit test. A Glyph does not have a window handle (HWND), as it is rendered on the adorner window control of the <xref:System.Windows.Forms.Design.Behavior.BehaviorService>. Each Glyph can have a <xref:System.Windows.Forms.Design.Behavior.Behavior> associated with it. A successfully hit-tested Glyph has the opportunity to push a new or different <xref:System.Windows.Forms.Design.Behavior.Behavior> onto the behavior stack of the <xref:System.Windows.Forms.Design.Behavior.BehaviorService>.  
  
 For more information, see [Behavior Service Overview](../Topic/Behavior%20Service%20Overview.md).  
  
   
  
## Examples  
 The following example demonstrates how to create your own Glyph based class with <xref:System.Windows.Forms.Design.Behavior.Behavior> associated with it. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> class.  
  
 [!CODE [System.Windows.Forms.Design.Behavior.BehaviorService#5](../CodeSnippet/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Glyph (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">The &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; associated with the &lt;xref:System.Windows.Forms.Design.Behavior.Glyph&gt;. Can be `null`.</param>
        <summary>Initializes a new instance of the &lt;see cref="T:System.Windows.Forms.Design.Behavior.Glyph"&gt; class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to initialize a new instance of the <xref:System.Windows.Forms.Design.Behavior.Glyph> class. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> class.  
  
 [!CODE [System.Windows.Forms.Design.Behavior.BehaviorService#4](../CodeSnippet/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Behavior">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Design.Behavior.Behavior Behavior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Design.Behavior.Behavior Behavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Design.Behavior.Behavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; associated with the &lt;xref:System.Windows.Forms.Design.Behavior.Glyph&gt;.</summary>
        <value>The &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; associated with the &lt;xref:System.Windows.Forms.Design.Behavior.Glyph&gt;, or `null` if there is no behavior.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle Bounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bounds of the &lt;see cref="T:System.Windows.Forms.Design.Behavior.Glyph"&gt;.</summary>
        <value>A &lt;xref:System.Drawing.Rectangle&gt; representing the bounds of the &lt;xref:System.Windows.Forms.Design.Behavior.Glyph&gt;.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates how to override the Bounds to create a glyph with the specific dimensions and position. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> class.  
  
 [!CODE [System.Windows.Forms.Design.Behavior.BehaviorService#8](../CodeSnippet/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHitTest">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Forms.Cursor GetHitTest (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.Cursor GetHitTest(valuetype System.Drawing.Point p) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">A point to hit-test.</param>
        <summary>Provides hit test logic.</summary>
        <returns>A &lt;xref:System.Windows.Forms.Cursor&gt; if the &lt;xref:System.Windows.Forms.Design.Behavior.Glyph&gt; is associated with ; otherwise, `null`.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetHitTest method is an `abstract` method that forces <xref:System.Windows.Forms.Design.Behavior.Glyph> implementations to provide hit test logic. Given any point, if the <xref:System.Windows.Forms.Design.Behavior.Glyph> has decided to be involved with that location, it will need to return a valid <xref:System.Windows.Forms.Cursor>. Otherwise, returning `null` will cause the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> to ignore the location.  
  
   
  
## Examples  
 The following example demonstrates how to override the GetHitTest to see if the point is within this glyph. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> class.  
  
 [!CODE [System.Windows.Forms.Design.Behavior.BehaviorService#9](../CodeSnippet/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public abstract void Paint (System.Windows.Forms.PaintEventArgs pe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Paint(class System.Windows.Forms.PaintEventArgs pe) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pe" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pe">A &lt;xref:System.Windows.Forms.PaintEventArgs&gt; that contains the event data.</param>
        <summary>Provides paint logic.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Paint method is an `abstract` method that forces <xref:System.Windows.Forms.Design.Behavior.Glyph> implementations to provide paint logic. The  parameter contains the <xref:System.Drawing.Graphics> related to the adorner window of the <xref:System.Windows.Forms.Design.Behavior.BehaviorService>.  
  
   
  
## Examples  
 The following example demonstrates how to override the Paint to draw a glyph. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.Behavior.BehaviorService> class.  
  
 [!CODE [System.Windows.Forms.Design.Behavior.BehaviorService#10](../CodeSnippet/VS_Snippets_Winforms/System.Windows.Forms.Design.Behavior.BehaviorService#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBehavior">
      <MemberSignature Language="C#" Value="protected void SetBehavior (System.Windows.Forms.Design.Behavior.Behavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetBehavior(class System.Windows.Forms.Design.Behavior.Behavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Windows.Forms.Design.Behavior.Behavior" />
      </Parameters>
      <Docs>
        <param name="behavior">A &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; to associate with the &lt;xref:System.Windows.Forms.Design.Behavior.Glyph&gt;.</param>
        <summary>Changes the &lt;see cref="T:System.Windows.Forms.Design.Behavior.Behavior"&gt; associated with the &lt;xref:System.Windows.Forms.Design.Behavior.Glyph&gt;.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>