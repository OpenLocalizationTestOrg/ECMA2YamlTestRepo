<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a collection of application-specific &lt;xref:System.IO.Packaging.Package&gt; instances used in combination with &lt;xref:System.IO.Packaging.PackWebRequest&gt;.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The PackageStore defines a reference collections of package that are open and active in the application.  Packages added to the PackageStore are accessed is by their key URI value.  The PackageStore supports three common uses:  
  
1.  Accessing <xref:System.IO.Packaging.PackagePart> data through <xref:System.IO.Packaging.PackWebRequest>.  
  
2.  The application obtaining an instance of a <xref:System.IO.Packaging.Package> given the package's URI.  
  
3.  Accessing packages that are created and stored in a <xref:System.IO.MemoryStream>.  
  
 To improve performance and minimize the overhead of repeated file open/close operations, the PackageStore is used to manage instances of packages accessed by <xref:System.IO.Packaging.PackWebRequest> and directly by the application.  When accessing data in a package, the <xref:System.IO.Packaging.Package> address of a requested <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> is first checked to see if the package is already defined and open in the PackageStore.  If the package is defined as open in the PackageStore, requested parts can be accessed directly without repeatedly opening and closing the package for each  request.  
  
 If your application opens a package with <xref:System.IO.Packaging.Package.Open%2A?displayProperty=fullName>, <xref:System.IO.Packaging.PackageStore.AddPackage%2A> can be called to add the package to the PackageStore.  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> should later be called to remove the package from the PackageStore prior to calling <xref:System.IO.Packaging.Package.Close%2A?displayProperty=fullName>.  
  
 XPS packages opened with an <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> constructor are automatically added and removed from the PackageStore when the document is created and disposed.  (You do not need to call <xref:System.IO.Packaging.PackageStore.AddPackage%2A> or <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> separately for XPS packages opened with <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> constructors.)  
  
 The file I/O permissions of a package accessed through the PackageStore remains the same as the I/O permissions set on the package when it is opened.  The PackageStore only provides references to the packages that have been added the store.  It is up to the application to correctly open, update, and close each package.  
  
 Packages added to the PackageStore can be accessed in multithreaded environments when they are used in combination with a [!INCLUDE[TLA2#tla_xaml](../../add/includes/tla2sharptla-xaml-md.md)] parser such as <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>.  When operating in a multithreaded environment, the application must lock the package before access.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">The key [!INCLUDE[TLA2#tla_uri](../../add/includes/tla2sharptla-uri-md.md)] of the  to compare in a &lt;see cref="T:System.IO.Packaging.PackWebRequest"&gt;.</param>
        <param name="package">The package to add to the store.</param>
        <summary>Adds a &lt;xref:System.IO.Packaging.Package&gt; to the store.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 defines the package's key URI that is compared when you call <xref:System.IO.Packaging.PackWebRequest>.  
  
 If the  matches the <xref:System.IO.Packaging.PackagePart.Uri%2A> for a <xref:System.IO.Packaging.PackagePart> in a <xref:System.IO.Packaging.PackWebRequest> call, the package defined in the <xref:System.IO.Packaging.PackageStore> is used to access the requested part.  
  
 If the  does not match the <xref:System.IO.Packaging.PackagePart.Uri%2A> for a <xref:System.IO.Packaging.PackagePart> in a <xref:System.IO.Packaging.PackWebRequest> call, the package with the specified URI is opened to access the requested part.  
  
 **Security Note** This method demands <xref:System.Security.Permissions.EnvironmentPermission> for all custom <xref:System.IO.Packaging.Package> (non-<xref:System.IO.Packaging.ZipPackage>) types.  
  
   
  
## Examples  
 The following example shows how to use the AddPackage method.  
  
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](../../add/codesnippet/VisualBasic/rmpackageviewer/window1.xaml.vb#rmpkgviewdecrypt)]
 [!code-cs[RightsManagedPackageViewer#RmPkgViewDecrypt](../../add/codesnippet/CSharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">The [!INCLUDE[TLA#tla_uri](../../add/includes/tlasharptla-uri-md.md)] of the package to return.</param>
        <summary>Returns the &lt;xref:System.IO.Packaging.Package&gt; with a specified [!INCLUDE[TLA2#tla_uri](../../add/includes/tla2sharptla-uri-md.md)] from the store.</summary>
        <returns>The package with a specified ; or `null`, if a package with the specified  is not in the store.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 is matched to the URIs specified in the <xref:System.IO.Packaging.PackageStore.AddPackage%2A> method call.  
  
 **Security Note** This method demands <xref:System.Security.Permissions.EnvironmentPermission> for all custom <xref:System.IO.Packaging.Package> (non-<xref:System.IO.Packaging.ZipPackage>) types.  
  
   
  
## Examples  
 The following example shows how to use the GetPackage method.  
  
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](../../add/codesnippet/VisualBasic/rmpackageviewer/window1.xaml.vb#rmpkgviewopendoc)]
 [!code-cs[RightsManagedPackageViewer#RmPkgViewOpenDoc](../../add/codesnippet/CSharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">The [!INCLUDE[TLA#tla_uri](../../add/includes/tlasharptla-uri-md.md)] of the package to remove.</param>
        <summary>Removes the &lt;xref:System.IO.Packaging.Package&gt; with a specified [!INCLUDE[TLA2#tla_uri](../../add/includes/tla2sharptla-uri-md.md)] from the store.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 is matched to the URIs specified in the <xref:System.IO.Packaging.PackageStore.AddPackage%2A> method call.  
  
 **Security Note** This method demands <xref:System.Security.Permissions.EnvironmentPermission> for all custom <xref:System.IO.Packaging.Package> (non-<xref:System.IO.Packaging.ZipPackage>) types.  
  
   
  
## Examples  
 The following example shows how to use the RemovePackage method.  
  
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](../../add/codesnippet/VisualBasic/rmpackageviewer/window1.xaml.vb#rmpkgviewclosedoc)]
 [!code-cs[RightsManagedPackageViewer#RmPkgViewCloseDoc](../../add/codesnippet/CSharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>